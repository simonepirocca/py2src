{"total_count": 131, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/325", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/325/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/325/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/325", "id": 643742772, "node_id": "MDU6SXNzdWU2NDM3NDI3NzI=", "number": 325, "title": "Documentation about ModelSchema.include_relationships is wrong", "user": {"login": "mvanbaak", "id": 1928231, "node_id": "MDQ6VXNlcjE5MjgyMzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1928231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvanbaak", "html_url": "https://github.com/mvanbaak", "followers_url": "https://api.github.com/users/mvanbaak/followers", "following_url": "https://api.github.com/users/mvanbaak/following{/other_user}", "gists_url": "https://api.github.com/users/mvanbaak/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvanbaak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvanbaak/subscriptions", "organizations_url": "https://api.github.com/users/mvanbaak/orgs", "repos_url": "https://api.github.com/users/mvanbaak/repos", "events_url": "https://api.github.com/users/mvanbaak/events{/privacy}", "received_events_url": "https://api.github.com/users/mvanbaak/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1163000770, "node_id": "MDU6TGFiZWwxMTYzMDAwNzcw", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/documentation", "name": "documentation", "color": "fbca04", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-23T10:57:37Z", "updated_at": "2020-06-23T20:49:45Z", "closed_at": "2020-06-23T14:23:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/blob/5a43cbb7dc556580da58ce0070e635bfef252840/src/marshmallow_sqlalchemy/schema/model_schema.py#L23 states that the default is false, but a few lines later the default is true", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/324", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/324/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/324/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/324", "id": 643725049, "node_id": "MDU6SXNzdWU2NDM3MjUwNDk=", "number": 324, "title": "Questions about load_instance with multiple fields", "user": {"login": "jnsdrtlf", "id": 8471891, "node_id": "MDQ6VXNlcjg0NzE4OTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/8471891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jnsdrtlf", "html_url": "https://github.com/jnsdrtlf", "followers_url": "https://api.github.com/users/jnsdrtlf/followers", "following_url": "https://api.github.com/users/jnsdrtlf/following{/other_user}", "gists_url": "https://api.github.com/users/jnsdrtlf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jnsdrtlf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jnsdrtlf/subscriptions", "organizations_url": "https://api.github.com/users/jnsdrtlf/orgs", "repos_url": "https://api.github.com/users/jnsdrtlf/repos", "events_url": "https://api.github.com/users/jnsdrtlf/events{/privacy}", "received_events_url": "https://api.github.com/users/jnsdrtlf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-23T10:30:10Z", "updated_at": "2020-07-15T08:12:16Z", "closed_at": "2020-07-15T08:12:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a question about the inner workings of `SQLAlchemySchema`'s `load_instance` option that I could not find in the documentation.\r\n\r\nI have a simple model like this:\r\n\r\n```python\r\nclass Document(Model):\r\n    id = db.Column(db.Integer, primary_key=True, unique=True, nullable=False)\r\n    name = db.Column(db.String(255), unique=False, nullable=False)\r\n```\r\n\r\nwith its schema\r\n\r\n```python\r\nclass DocumentSchema(SQLAlchemySchema):\r\n    class Meta:\r\n        model = Document\r\n        load_instance = True\r\n\r\n    id = auto_field()\r\n    name = auto_field()\r\n```\r\n\r\nLet's assume that I have a single document with `id=1` and `name='Foo'`. When I now load its instance using \r\n\r\n```python\r\ninstance = schema.load({'id': 1, 'name': 'Foo'}, session=session)\r\n```\r\n\r\nI get the actual instance. When I now change the `name`:\r\n\r\n```python\r\ninstance2 = schema.load({'id': 1, 'name': 'Bar'}, session=session)\r\n\r\ninstance is instance2  # True\r\n```\r\n\r\nI still get the same instance. This is actually desirable, as I use this in an API e.g. for changing the name of a document by sending some JSON with the document `id` and the updated `name`. However, I was curious why this works when one field does not match the instance. Am I only getting an instance when the `primary_key` is present or any other unique field?\r\n\r\nI would be happy to document this behaviour as I feel the documentation for `load_instance` is a bit lacklustre. If someone could provide me with the implementation and its details, I'd be happy to get to work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/323", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/323/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/323/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/323", "id": 638977709, "node_id": "MDU6SXNzdWU2Mzg5Nzc3MDk=", "number": 323, "title": "sqla_session is defined twice in the ModelSchemaOpts docs", "user": {"login": "WhyNotHugo", "id": 730811, "node_id": "MDQ6VXNlcjczMDgxMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/730811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WhyNotHugo", "html_url": "https://github.com/WhyNotHugo", "followers_url": "https://api.github.com/users/WhyNotHugo/followers", "following_url": "https://api.github.com/users/WhyNotHugo/following{/other_user}", "gists_url": "https://api.github.com/users/WhyNotHugo/gists{/gist_id}", "starred_url": "https://api.github.com/users/WhyNotHugo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WhyNotHugo/subscriptions", "organizations_url": "https://api.github.com/users/WhyNotHugo/orgs", "repos_url": "https://api.github.com/users/WhyNotHugo/repos", "events_url": "https://api.github.com/users/WhyNotHugo/events{/privacy}", "received_events_url": "https://api.github.com/users/WhyNotHugo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1163000770, "node_id": "MDU6TGFiZWwxMTYzMDAwNzcw", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/documentation", "name": "documentation", "color": "fbca04", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-15T16:17:56Z", "updated_at": "2020-06-23T14:31:58Z", "closed_at": "2020-06-23T14:23:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "`sqla_session` appears twice [here](https://marshmallow-sqlalchemy.readthedocs.io/en/latest/api_reference.html#marshmallow_sqlalchemy.ModelSchemaOpts):\r\n\r\n![2020-06-15T18:16:56,852204453+02:00](https://user-images.githubusercontent.com/730811/84681475-b1355500-af23-11ea-9059-8d25e8b0edf5.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/320", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/320/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/320/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/320", "id": 636059380, "node_id": "MDU6SXNzdWU2MzYwNTkzODA=", "number": 320, "title": "Does marshmallow-sqlalchemy not support \"Method Fields\"?", "user": {"login": "gotounix", "id": 18606632, "node_id": "MDQ6VXNlcjE4NjA2NjMy", "avatar_url": "https://avatars2.githubusercontent.com/u/18606632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gotounix", "html_url": "https://github.com/gotounix", "followers_url": "https://api.github.com/users/gotounix/followers", "following_url": "https://api.github.com/users/gotounix/following{/other_user}", "gists_url": "https://api.github.com/users/gotounix/gists{/gist_id}", "starred_url": "https://api.github.com/users/gotounix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gotounix/subscriptions", "organizations_url": "https://api.github.com/users/gotounix/orgs", "repos_url": "https://api.github.com/users/gotounix/repos", "events_url": "https://api.github.com/users/gotounix/events{/privacy}", "received_events_url": "https://api.github.com/users/gotounix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-10T08:48:36Z", "updated_at": "2020-06-11T02:32:43Z", "closed_at": "2020-06-11T02:32:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/306", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/306/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/306/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/306", "id": 606530038, "node_id": "MDU6SXNzdWU2MDY1MzAwMzg=", "number": 306, "title": "Ordering output doesn't work for auto_field", "user": {"login": "KwonL", "id": 34660286, "node_id": "MDQ6VXNlcjM0NjYwMjg2", "avatar_url": "https://avatars3.githubusercontent.com/u/34660286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KwonL", "html_url": "https://github.com/KwonL", "followers_url": "https://api.github.com/users/KwonL/followers", "following_url": "https://api.github.com/users/KwonL/following{/other_user}", "gists_url": "https://api.github.com/users/KwonL/gists{/gist_id}", "starred_url": "https://api.github.com/users/KwonL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KwonL/subscriptions", "organizations_url": "https://api.github.com/users/KwonL/orgs", "repos_url": "https://api.github.com/users/KwonL/repos", "events_url": "https://api.github.com/users/KwonL/events{/privacy}", "received_events_url": "https://api.github.com/users/KwonL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-24T19:22:00Z", "updated_at": "2020-04-26T17:57:48Z", "closed_at": "2020-04-26T17:49:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "In marshmallow, to order serialization output, set ordered = True in the Meta class as follows.\r\n\r\n```python\r\nclass MyModelSchema(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = MyModel\r\n        ordered = True\r\n\r\n    some_field = auto_field(validate=validate.Range(min=0, max=10))\r\n```\r\n\r\nIt works well without ```auto_field```, but it generate following error with ```auto_field```.\r\n\r\n```\r\nAttributeError: 'SQLAlchemyAutoField' object has no attribute '_creation_index'\r\n```\r\n\r\nIs there any solution for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/305", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/305/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/305/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/305/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/305", "id": 606208204, "node_id": "MDU6SXNzdWU2MDYyMDgyMDQ=", "number": 305, "title": "Unknown field error on foreign key : cannot validate the marshmallow schemas of two SQLAlchemy in a Many-to-One relationship", "user": {"login": "MarcSharma", "id": 17672714, "node_id": "MDQ6VXNlcjE3NjcyNzE0", "avatar_url": "https://avatars0.githubusercontent.com/u/17672714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcSharma", "html_url": "https://github.com/MarcSharma", "followers_url": "https://api.github.com/users/MarcSharma/followers", "following_url": "https://api.github.com/users/MarcSharma/following{/other_user}", "gists_url": "https://api.github.com/users/MarcSharma/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcSharma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcSharma/subscriptions", "organizations_url": "https://api.github.com/users/MarcSharma/orgs", "repos_url": "https://api.github.com/users/MarcSharma/repos", "events_url": "https://api.github.com/users/MarcSharma/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcSharma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-24T10:23:28Z", "updated_at": "2020-05-04T03:54:20Z", "closed_at": "2020-05-04T03:54:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI have got two `SQLAlchemy` objects as follow:\r\n - an object `Person` with a `string` `name` that acts as a primary key.\r\n - an object `Submission` with a simple `id` primary key and a field `requester_name`\r\n\r\nIn other words one `person` can make many `submission`, this is a `many-to-one` relationship, that I have set up exactly like in the sqlalchemy doc.\r\n\r\nI can manipulate the code `SQLAlchemy` side without any problems, and when I `dump` the two `schemas` throughs `marshmallow`, I get the expected result.\r\n\r\nBut My issue is an `unknown_field` error on the foreign key when I try to `validate` the schema of the parent object.\r\n\r\nHere is the code:\r\n\r\n    # tests\r\n    from pprint import pprint\r\n    \r\n    \r\n    from sqlalchemy import Column, ForeignKey, Integer, String, create_engine\r\n    from sqlalchemy.ext.declarative import declarative_base\r\n    from sqlalchemy.orm import relationship, sessionmaker\r\n    \r\n    \r\n    from marshmallow import ValidationError\r\n    from marshmallow_sqlalchemy import SQLAlchemyAutoSchema\r\n    \r\n    # sqlalchemy\r\n    \r\n    Base = declarative_base()\r\n    engine = create_engine(\"sqlite:///:memory:\")\r\n    session = sessionmaker(bind=engine)()\r\n    \r\n    \r\n    class Person(Base):\r\n        __tablename__ = \"persons\"\r\n        name = Column(String(64), primary_key=True)\r\n    \r\n    \r\n    # MANY-TO-ONE. One Person can make many Submission\r\n    class Submission(Base):\r\n        __tablename__ = \"submissions\"\r\n        id = Column(Integer, primary_key=True)\r\n        requester_name = Column(String(64), ForeignKey(\"persons.name\"))\r\n        requester = relationship(\"Person\")\r\n    \r\n    \r\n    Base.metadata.create_all(engine)\r\n    \r\n    # marshmallow\r\n    class PersonSchema(SQLAlchemyAutoSchema):\r\n        class Meta:\r\n            model = Person\r\n            load_instance = True\r\n    \r\n    \r\n    class SubmissionSchema(SQLAlchemyAutoSchema):\r\n        class Meta:\r\n            model = Submission\r\n            load_instance = True\r\n        requester = fields.Nested(PersonSchema)\r\n\r\n    \r\n    \r\n    def test_person():#SUCCESS\r\n        try:\r\n            PersonSchema().load({\"name\": \"Maria\"}, session=session)\r\n            assert True\r\n        except ValidationError as err:\r\n            pprint(err.messages)\r\n            assert False\r\n    \r\n    \r\n    def test_submission():#FAILURE\r\n        try:\r\n            SubmissionSchema().load({\"requester_name\": \"Maria\"}, session=session)\r\n            assert True\r\n        except ValidationError as err:\r\n            pprint(err.messages)\r\n            assert False\r\n\r\n\r\nHere is the raised `ValidationError`: \r\n    \r\n    marshmallow.exceptions.ValidationError: {'requester_name': ['Unknown field.']}\r\n\r\nObviously the field is *there* (shows in the console, if I insert the object in the database, it's there, etc.) and I don't understand why thre's an error like that.\r\n\r\nI would appreciate any help.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/304", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/304/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/304/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/304", "id": 603544408, "node_id": "MDU6SXNzdWU2MDM1NDQ0MDg=", "number": 304, "title": "Invaid Syntax", "user": {"login": "andremvb", "id": 12978746, "node_id": "MDQ6VXNlcjEyOTc4NzQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/12978746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andremvb", "html_url": "https://github.com/andremvb", "followers_url": "https://api.github.com/users/andremvb/followers", "following_url": "https://api.github.com/users/andremvb/following{/other_user}", "gists_url": "https://api.github.com/users/andremvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/andremvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andremvb/subscriptions", "organizations_url": "https://api.github.com/users/andremvb/orgs", "repos_url": "https://api.github.com/users/andremvb/repos", "events_url": "https://api.github.com/users/andremvb/events{/privacy}", "received_events_url": "https://api.github.com/users/andremvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-20T21:22:55Z", "updated_at": "2020-04-26T17:58:45Z", "closed_at": "2020-04-26T17:58:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I am using python 2.7. And I get this error:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/Develop/PycharmProjects/testAPI/app.py\", line 3, in <module>\r\n    from flask_marshmallow import Marshmallow\r\n  File \"/Users/Develop/PycharmProjects/testAPI/venv/lib/python2.7/site-packages/flask_marshmallow/__init__.py\", line 24, in <module>\r\n    from . import sqla\r\n  File \"/Users/Develop/PycharmProjects/testAPI/venv/lib/python2.7/site-packages/flask_marshmallow/sqla.py\", line 12, in <module>\r\n    import marshmallow_sqlalchemy as msqla\r\n  File \"/Users/Develop/PycharmProjects/testAPI/venv/lib/python2.7/site-packages/marshmallow_sqlalchemy/__init__.py\", line 1, in <module>\r\n    from .schema import TableSchemaOpts, ModelSchemaOpts, TableSchema, ModelSchema\r\n  File \"/Users/Develop/PycharmProjects/testAPI/venv/lib/python2.7/site-packages/marshmallow_sqlalchemy/schema.py\", line 101\r\n    class TableSchema(ma.Schema, metaclass=TableSchemaMeta):\r\n                                          ^\r\nSyntaxError: invalid syntax\r\n\r\nProcess finished with exit code 1\r\n\r\nI am using 0.19.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/299", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/299/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/299/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/299/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/299", "id": 593810664, "node_id": "MDU6SXNzdWU1OTM4MTA2NjQ=", "number": 299, "title": "Related doesn't handle when Column is named different to Attribute", "user": {"login": "peterschutt", "id": 20659309, "node_id": "MDQ6VXNlcjIwNjU5MzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/20659309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterschutt", "html_url": "https://github.com/peterschutt", "followers_url": "https://api.github.com/users/peterschutt/followers", "following_url": "https://api.github.com/users/peterschutt/following{/other_user}", "gists_url": "https://api.github.com/users/peterschutt/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterschutt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterschutt/subscriptions", "organizations_url": "https://api.github.com/users/peterschutt/orgs", "repos_url": "https://api.github.com/users/peterschutt/repos", "events_url": "https://api.github.com/users/peterschutt/events{/privacy}", "received_events_url": "https://api.github.com/users/peterschutt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-04T11:47:55Z", "updated_at": "2020-04-26T17:57:30Z", "closed_at": "2020-04-26T17:57:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Related is dumping the `Column` key, not the `ColumnProperty` key, meaning that when a model is defined like so:\r\n\r\n```py\r\nclass Model(Base):\r\n    id = Column(\"model_id\", Integer)\r\n    blah = Column(\"model_blah\", String)\r\n```\r\n...Related serializes it like this (note `None` values):\r\n```\r\n{\r\n    \"model_id\": None,\r\n    \"model_blah\": None\r\n}\r\n```\r\nAnd dumped data cannot be loaded: `TypeError: 'model_id' is an invalid keyword argument for Model`.\r\n\r\nThis code reproduces the issue:\r\n\r\n```py\r\nimport marshmallow_sqlalchemy as ma_sqla\r\nimport sqlalchemy as sa\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import relationship\r\n\r\n\r\nBase = declarative_base()\r\n\r\n\r\nclass Foo(Base):\r\n    __tablename__ = \"foo\"\r\n\r\n    id = sa.Column(sa.Integer, primary_key=True)\r\n    bar_id = sa.Column(sa.Integer, sa.ForeignKey(\"bar.bar_id\"))\r\n    bar = relationship(\"Bar\")\r\n\r\n\r\nclass Bar(Base):\r\n    __tablename__ = \"bar\"\r\n\r\n    id = sa.Column(\"bar_id\", sa.Integer, primary_key=True)\r\n    prop = sa.Column(\"bar_prop\", sa.String)\r\n\r\n\r\nclass FooSchema(ma_sqla.SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Foo\r\n        transient = True\r\n        load_instance = True\r\n\r\n    bar = ma_sqla.fields.Related([\"id\", \"prop\"])\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    foo = Foo(id=1, bar=Bar(id=2, prop=\"baz\"))\r\n    dump_data = FooSchema().dump(foo)\r\n    new_foo = FooSchema().load(\r\n        dump_data\r\n    )  # TypeError: 'bar_id' is an invalid keyword argument for Bar\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/298", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/298/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/298/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/298", "id": 593634042, "node_id": "MDU6SXNzdWU1OTM2MzQwNDI=", "number": 298, "title": "'DummySession' object has no attribute 'query' in many-to-many relationship", "user": {"login": "ruggerotosc", "id": 11682062, "node_id": "MDQ6VXNlcjExNjgyMDYy", "avatar_url": "https://avatars0.githubusercontent.com/u/11682062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruggerotosc", "html_url": "https://github.com/ruggerotosc", "followers_url": "https://api.github.com/users/ruggerotosc/followers", "following_url": "https://api.github.com/users/ruggerotosc/following{/other_user}", "gists_url": "https://api.github.com/users/ruggerotosc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruggerotosc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruggerotosc/subscriptions", "organizations_url": "https://api.github.com/users/ruggerotosc/orgs", "repos_url": "https://api.github.com/users/ruggerotosc/repos", "events_url": "https://api.github.com/users/ruggerotosc/events{/privacy}", "received_events_url": "https://api.github.com/users/ruggerotosc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-03T20:51:55Z", "updated_at": "2020-04-26T18:01:45Z", "closed_at": "2020-04-26T18:01:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, i have a problem in a simple many to many relationship. I have two models, User and Role, with an association table defined as helper table, like Flask-SqlAlchemy documentation recommended.\r\nAfter defined the relative schema, i try to load a new user instance from json data, with a single role attached, but i encounter the error in subject.\r\n\r\nThis is the code:\r\n```\r\nuser_roles = db.Table('user_roles',\r\n    db.Column('user_id', db.Integer, db.ForeignKey('users.user_id'), primary_key=True),\r\n    db.Column('role_code', db.String(20), db.ForeignKey('roles.role_code'), primary_key=True)\r\n)\r\n\r\nclass UserModel(db.Model):\r\n    __tablename__ = 'users'\r\n    user_id = db.Column(db.Integer, primary_key=True)\r\n    user_name = db.Column(db.String(100), nullable=False)\r\n    user_surname = db.Column(db.String(100), nullable=False)\r\n    user_email = db.Column(db.String(100), nullable=False, unique=True)\r\n    user_password = db.Column(db.String(100), nullable=False)\r\n    user_active = db.Column(db.String(1), nullable=False, default='Y')\r\n    roles = db.relationship('RoleModel', secondary=user_roles, lazy='subquery',\r\n        backref=db.backref('users', lazy=True))\r\n\r\nclass RoleModel(db.Model):\r\n    __tablename__ = 'roles'\r\n    role_code = db.Column(db.String(20), primary_key=True)\r\n    role_name = db.Column(db.String(50), nullable=False)\r\n    role_active = db.Column(db.String(1), nullable=False, default='Y')`\r\n```\r\n\r\n```\r\nclass UserSchema(ma.SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = UserModel\r\n        load_instance=True\r\n        include_fk=True\r\n        load_only=('user_password',)\r\n        dump_only=('user_id',)\r\n    user_name = ma.auto_field(validate=validate.Length(min=1, error=\"Field can not be blank\"),)\r\n    user_surname = ma.auto_field(validate=validate.Length(min=1, error=\"Field can not be blank\"),)\r\n    user_email = ma.auto_field(validate=validate.Length(min=1, error=\"Field can not be blank\"),)\r\n    user_password = ma.auto_field(validate=validate.Length(min=1, error=\"Field can not be blank\"),)\r\n    roles = ma.Nested(\"RoleSchema\", many=True, only=('role_code', 'role_name',))\r\n\r\nclass RoleSchema(ma.SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = RoleModel\r\n        load_instance=True\r\n        include_fk=True\r\n```\r\n```\r\nuser = user_schema.load(data_json, partial=('roles.role_name',))\r\n```\r\nThe json data:\r\n```\r\n{\r\n\t\"user_name\": \"John\",\r\n\t\"user_surname\": \"Doe\",\r\n\t\"user_email\": \"john.doe@domain.com\",\r\n\t\"user_password\": \"xxxxx\",\r\n\t\"user_active\": \"Y\",\r\n\t\"roles\": [\r\n\t\t{\r\n\t\t\t\"role_code\": \"ADMIN\"\r\n\t\t}\r\n\t]\r\n}\r\n```\r\n\r\nMaybe is better define the association table like a model? \r\n\r\nThank you for help and this library! ;)\r\nRuggero", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/297", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/297/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/297/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/297", "id": 583993433, "node_id": "MDU6SXNzdWU1ODM5OTM0MzM=", "number": 297, "title": "Why doesn't SQLAlechemySchema inherit from ModelSchema, rather than Schema?", "user": {"login": "skinofstars", "id": 50792, "node_id": "MDQ6VXNlcjUwNzky", "avatar_url": "https://avatars3.githubusercontent.com/u/50792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skinofstars", "html_url": "https://github.com/skinofstars", "followers_url": "https://api.github.com/users/skinofstars/followers", "following_url": "https://api.github.com/users/skinofstars/following{/other_user}", "gists_url": "https://api.github.com/users/skinofstars/gists{/gist_id}", "starred_url": "https://api.github.com/users/skinofstars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skinofstars/subscriptions", "organizations_url": "https://api.github.com/users/skinofstars/orgs", "repos_url": "https://api.github.com/users/skinofstars/repos", "events_url": "https://api.github.com/users/skinofstars/events{/privacy}", "received_events_url": "https://api.github.com/users/skinofstars/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-18T20:48:04Z", "updated_at": "2020-03-29T16:45:35Z", "closed_at": "2020-03-29T16:45:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure this is an issue with the library, but it's certainly an issue for myself as a new user. I'd been trying for some time to figure how to update an existing instance. \r\n\r\nI could in various places that I needed to add an instance `schema.load(data, instance=Model.query.get(1))`, but it took me a long time to realise that my schema def needed to inherit from a ModelSchema and not an SQLAlchemySchema. \r\n\r\nWhy wouldn't the SQLAlchemySchema inherit from ModelSchema rather than just Schema? And even if there is a reasonable reason for this (which I'm sure there is), shouldn't it be clearer in the docs how one might update an existing instance? \r\n\r\nFeel free to close this as a non-bug, I think I'm just hoping to get some understanding. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/296", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/296/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/296/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/296/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/296", "id": 583814514, "node_id": "MDU6SXNzdWU1ODM4MTQ1MTQ=", "number": 296, "title": "How can I deserialize from either of two JSON fields into the same DB field", "user": {"login": "eino", "id": 4985, "node_id": "MDQ6VXNlcjQ5ODU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eino", "html_url": "https://github.com/eino", "followers_url": "https://api.github.com/users/eino/followers", "following_url": "https://api.github.com/users/eino/following{/other_user}", "gists_url": "https://api.github.com/users/eino/gists{/gist_id}", "starred_url": "https://api.github.com/users/eino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eino/subscriptions", "organizations_url": "https://api.github.com/users/eino/orgs", "repos_url": "https://api.github.com/users/eino/repos", "events_url": "https://api.github.com/users/eino/events{/privacy}", "received_events_url": "https://api.github.com/users/eino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-18T15:33:21Z", "updated_at": "2020-03-21T16:27:22Z", "closed_at": "2020-03-21T16:27:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have this problem that I've been trying to solve for a few hours.\r\n\r\nI'm using marshmallow-sqlalchemy to deserialize json into SQLAlchemy models\r\n\r\nSo far, I had a schema that contained a nested relationship :\r\ncategory = Nested(CategorySchema)\r\n\r\nSo far so good.\r\n\r\nHowever now the API evolves and has to accomodate for a new format : either \"category\" is provided, and is a single category, or a \"categories\"  is provided, and is a list of categories. (When one is provided, the other will be missing). In either case, the categories relationship will have to be filled in the DB.\r\n\r\nHow can I make my marshmallow-sqlalchemy schema evolve to accomodate either of the fields ? It's similar to a synonym, except that if category is provided, I have to \"transform\" it into a list of one object. (I hope my explanation makes sense)\r\n\r\nI can't find in which direction I have to look.\r\n\r\nThanks in advance for any hint or help !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/294", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/294/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/294/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/294/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/294", "id": 576255469, "node_id": "MDU6SXNzdWU1NzYyNTU0Njk=", "number": 294, "title": "Output nested object as part of dump", "user": {"login": "keithdarragh", "id": 1859155, "node_id": "MDQ6VXNlcjE4NTkxNTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1859155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keithdarragh", "html_url": "https://github.com/keithdarragh", "followers_url": "https://api.github.com/users/keithdarragh/followers", "following_url": "https://api.github.com/users/keithdarragh/following{/other_user}", "gists_url": "https://api.github.com/users/keithdarragh/gists{/gist_id}", "starred_url": "https://api.github.com/users/keithdarragh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keithdarragh/subscriptions", "organizations_url": "https://api.github.com/users/keithdarragh/orgs", "repos_url": "https://api.github.com/users/keithdarragh/repos", "events_url": "https://api.github.com/users/keithdarragh/events{/privacy}", "received_events_url": "https://api.github.com/users/keithdarragh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T13:30:53Z", "updated_at": "2020-03-05T14:37:05Z", "closed_at": "2020-03-05T14:37:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "marshmallow-sqlalchemy==0.21.0\r\n\r\nI'm trying to output a nested object as part of the dump but can't quite get the correct output\r\n```\r\nclass Book(Base):\r\n    __tablename__ = 'book'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    author_id = Column(Integer, ForeignKey('author.author_id '))\r\n    alt_title = Column(String)\r\n    instrument = Column(String)\r\n    sale_price = Column(Float)\r\n    rrp_price = Column(String)\r\n    book_id = Column(String, unique=True)\r\n    chapter_chapter = Column(Float)\r\n    authord_with = Column(String)\r\n    state = Column(String)\r\n    author = relationship(\"Author\", back_populates=\"books\")\r\n\r\n    def __repr__(self):\r\n        return \"<Book(autor_id='%s', alt_title='%s', instrument='%s', sale_price='%s', rrp_price='%s', book_id='%s')>\" % ( \r\n            self.autor_id, self.alt_title, self.instrument, self.sale_price, self.rrp_price, self.book_id)\r\n\r\nclass Author(Base):\r\n    __tablename__ = 'author'\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    author_id = Column(Integer, unique=True)\r\n    author_class = Column(String)\r\n    authorr = Column(String)\r\n    author_date = Column(DateTime)\r\n    last_updated = Column(DateTime)\r\n    book_count = Column(Integer)\r\n    books = relationship(\"Book\", back_populates='author')\r\n    \r\n    def __repr__(self):\r\n        return \"<Author(author_id ='%s', author_class='%s', authorr='%s', author_date='%s', last_updated='%s', book_count='%s')>\" % ( \r\n            self.author_id , \r\n            self.author_class , \r\n            self.authorr , \r\n            self.author_date , \r\n            self.last_updated, \r\n            self.book_count\r\n        )\r\n\r\nclass BookSchema(ModelSchema):\r\n    class Meta:\r\n        model = Book\r\n\r\nclass AuthorSchema(ModelSchema):\r\n    class Meta:\r\n        model = Author\r\n\r\n```\r\n\r\nWhen I do a dump I only get the parent object, how do I get the output to print the parent and child?\r\n\r\nWhen I update the AuthorSchema to be:\r\n```\r\nclass AuthorSchema(ModelSchema):\r\n    books = Nested(OptionStateSchema, many=True)\r\n    class Meta:\r\n        model = Author\r\n```\r\n\r\nI get an error: \r\n\r\n```\r\nmarshmallow.exceptions.ValidationError: {'books ': {0: {'author_id ': ['Unknown field.']}}}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/293", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/293/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/293/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/293/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/293", "id": 576071126, "node_id": "MDU6SXNzdWU1NzYwNzExMjY=", "number": 293, "title": "marshmallow.exceptions.ValidationError: {'production_id': ['Field may not be null.']}", "user": {"login": "mozesa", "id": 49973426, "node_id": "MDQ6VXNlcjQ5OTczNDI2", "avatar_url": "https://avatars2.githubusercontent.com/u/49973426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mozesa", "html_url": "https://github.com/mozesa", "followers_url": "https://api.github.com/users/mozesa/followers", "following_url": "https://api.github.com/users/mozesa/following{/other_user}", "gists_url": "https://api.github.com/users/mozesa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mozesa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mozesa/subscriptions", "organizations_url": "https://api.github.com/users/mozesa/orgs", "repos_url": "https://api.github.com/users/mozesa/repos", "events_url": "https://api.github.com/users/mozesa/events{/privacy}", "received_events_url": "https://api.github.com/users/mozesa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-05T08:18:17Z", "updated_at": "2020-03-05T08:22:57Z", "closed_at": "2020-03-05T08:22:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hy!\r\n\r\nI would like to ask for some help.\r\n\r\nI got the below exception, namely: \r\n`marshmallow.exceptions.ValidationError: {'production_id': ['Field may not be null.']}`.\r\n\r\nActually I have two backends: mysql and sqlite.\r\nWhat I want to grab records from sqlite backend, serialize them then load and upload to mysql backend.\r\n\r\n`sqlite_prod = schema_sqlite.Production().dump(a_record_from_sqlite_prod_table)`\r\n`mysql_prod = schema_mysql.Production().load(sqlite_prod)`\r\n\r\n\r\n`produciton_id` is a primary key of the mysql Production model.\r\n\r\n```python\r\nclass Production(BaseMySQL):\r\n    __tablename__ = \"production\"\r\n\r\n    production_id = Column(INTEGER(unsigned=True), primary_key=True)\r\n```\r\n\r\nThe error happens when I try to load the dumped sqlite_prod.\r\n`mysql_prod = schema_mysql.Production().load(sqlite_prod)`\r\n\r\n\r\nThis is the production schema for mysql:\r\n```python\r\nclass Production(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = orm_mysql.Production\r\n        load_instance = True\r\n        sqla_session = db_session\r\n```\r\n\r\nThis is the production schema for sqlite, as you can see here I try to overwrite the production_id with the reference_id. Reference_id comes from the mysql table, so first it tends to be None, but later it will have an id as well.\r\n```python\r\nclass Production(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = orm_sqlite.Production\r\n        exclude = (\"reference_id\", \"updated_at\")\r\n\r\n    production_id = auto_field(\"reference_id\", dump_only=True, required=False, allow_non=True)\r\n```\r\n\r\nIf I insantiate the mysql Production model directly from dumped dict like Production(**dumped_dict) it works like a charm.\r\n\r\nThanks for your help in advance.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/292", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/292/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/292/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/292", "id": 575392387, "node_id": "MDU6SXNzdWU1NzUzOTIzODc=", "number": 292, "title": "Autogenerating Nested fields by SQLAlchemyAutoSchema", "user": {"login": "BorysekOndrej", "id": 6960421, "node_id": "MDQ6VXNlcjY5NjA0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6960421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BorysekOndrej", "html_url": "https://github.com/BorysekOndrej", "followers_url": "https://api.github.com/users/BorysekOndrej/followers", "following_url": "https://api.github.com/users/BorysekOndrej/following{/other_user}", "gists_url": "https://api.github.com/users/BorysekOndrej/gists{/gist_id}", "starred_url": "https://api.github.com/users/BorysekOndrej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BorysekOndrej/subscriptions", "organizations_url": "https://api.github.com/users/BorysekOndrej/orgs", "repos_url": "https://api.github.com/users/BorysekOndrej/repos", "events_url": "https://api.github.com/users/BorysekOndrej/events{/privacy}", "received_events_url": "https://api.github.com/users/BorysekOndrej/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-04T13:15:51Z", "updated_at": "2020-05-04T03:57:28Z", "closed_at": "2020-05-04T03:57:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm looking through the new SQLAlchemyAutoSchema and I'm failing to find a way to autogenerate Nested fields based on relationship. Even with `include_relationships = True` the generated fields appear to be `fields.Related`, not `fields.Nested` as I would have guessed. The autogenerating schemas will certainly cleanup my code quite a lot and having the option to generate Nested fields directly would be nice to have. Is such a feature considered? Or is it already included and I'm missing something?\r\n\r\nHere's a a fully runnable example showing the different behavior between schema generated by SQLAlchemyAutoSchema and one with manually added field `author = fields.Nested(AuthorSchema)`. I'm primarily looking for the output of the nested version.\r\n```python\r\nfrom sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker, relationship, joinedload\r\nfrom sqlalchemy import Column, Integer, String, ForeignKey\r\nfrom marshmallow_sqlalchemy import SQLAlchemyAutoSchema, auto_field, fields\r\n\r\nengine = create_engine('sqlite:///test5.db', echo=False)\r\nSession = sessionmaker(bind=engine)\r\nsession = Session()\r\n\r\nBase = declarative_base()\r\n\r\nclass Author(Base):\r\n    __tablename__ = 'authors'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String(255))\r\n\r\nclass Book(Base):\r\n    __tablename__ = 'books'\r\n    id = Column(Integer, primary_key=True)\r\n    title = Column(String(255))\r\n    author_id = Column(Integer, ForeignKey(\"authors.id\"))\r\n    author = relationship(\"Author\", backref=\"books\")\r\n\r\nBase.metadata.create_all(engine)\r\n\r\nclass AuthorSchema(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Author\r\n        load_instance = True\r\n        include_relationships = True\r\n\r\nclass BookSchema(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Book\r\n        load_instance = True\r\n        include_relationships = True\r\n\r\nclass BookSchemaWithNested(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Book\r\n        load_instance = True\r\n        include_relationships = True\r\n\r\n    author = fields.Nested(AuthorSchema)\r\n\r\nauthor = Author(name=\"Chuck Paluhniuk\")\r\nbook = Book(title=\"Fight Club\", author=author)\r\nsession.add(author)\r\nsession.add(book)\r\nsession.commit()\r\n\r\nprint(AuthorSchema().dump(author)) # {'books': [1], 'name': 'Chuck Paluhniuk', 'id': 1}\r\nprint(BookSchema().dump(book)) # {'id': 1, 'title': 'Fight Club', 'author': 1}\r\nprint(BookSchemaWithNested().dump(book)) # {'id': 1, 'title': 'Fight Club', 'author': {'books': [1], 'name': 'Chuck Paluhniuk', 'id': 1}}\r\n\r\nbook = session.query(Book).options(joinedload(\"author\")).get(1)\r\nprint(BookSchema().dump(book)) # {'id': 1, 'title': 'Fight Club', 'author': 1}\r\n\r\nprint(BookSchema._declared_fields[\"author\"]) # <fields.Related(default=<marshmallow.missing>, ...\r\nprint(BookSchemaWithNested._declared_fields[\"author\"]) # <fields.Nested(default=<marshmallow.missing>, ...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/291", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/291/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/291/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/291/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/291", "id": 575391447, "node_id": "MDU6SXNzdWU1NzUzOTE0NDc=", "number": 291, "title": "Recipe: Smart Nested Field - possible typo in example", "user": {"login": "BorysekOndrej", "id": 6960421, "node_id": "MDQ6VXNlcjY5NjA0MjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6960421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BorysekOndrej", "html_url": "https://github.com/BorysekOndrej", "followers_url": "https://api.github.com/users/BorysekOndrej/followers", "following_url": "https://api.github.com/users/BorysekOndrej/following{/other_user}", "gists_url": "https://api.github.com/users/BorysekOndrej/gists{/gist_id}", "starred_url": "https://api.github.com/users/BorysekOndrej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BorysekOndrej/subscriptions", "organizations_url": "https://api.github.com/users/BorysekOndrej/orgs", "repos_url": "https://api.github.com/users/BorysekOndrej/repos", "events_url": "https://api.github.com/users/BorysekOndrej/events{/privacy}", "received_events_url": "https://api.github.com/users/BorysekOndrej/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-04T13:14:33Z", "updated_at": "2020-05-04T03:59:42Z", "closed_at": "2020-05-04T03:59:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, while looking through the documentation for another issue, I've notice that one of the recipes might have small typo. It's trying to add and commit variable `author`, which is not defined in the example. On the other hand, adding and commiting variable `book` would make perfect sense. So it's just a typo I think.\r\n\r\nhttps://marshmallow-sqlalchemy.readthedocs.io/en/latest/recipes.html#smart-nested-field\r\n\r\nCurrent version of the relevant part:\r\n```python\r\nbook = Book(id=1)\r\nbook.author = Author(name=\"Chuck Paluhniuk\")\r\nsession.add(author)\r\nsession.commit()\r\n```\r\nSuggested version:\r\n```python\r\nbook = Book(title=\"Fight club\")\r\nbook.author = Author(name=\"Chuck Paluhniuk\")\r\nsession.add(book)\r\nsession.commit()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/289", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/289/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/289/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/289", "id": 571773102, "node_id": "MDU6SXNzdWU1NzE3NzMxMDI=", "number": 289, "title": "Remove depreciation warnings from metaclasses", "user": {"login": "peterschutt", "id": 20659309, "node_id": "MDQ6VXNlcjIwNjU5MzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/20659309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterschutt", "html_url": "https://github.com/peterschutt", "followers_url": "https://api.github.com/users/peterschutt/followers", "following_url": "https://api.github.com/users/peterschutt/following{/other_user}", "gists_url": "https://api.github.com/users/peterschutt/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterschutt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterschutt/subscriptions", "organizations_url": "https://api.github.com/users/peterschutt/orgs", "repos_url": "https://api.github.com/users/peterschutt/repos", "events_url": "https://api.github.com/users/peterschutt/events{/privacy}", "received_events_url": "https://api.github.com/users/peterschutt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T02:07:27Z", "updated_at": "2020-03-01T22:50:02Z", "closed_at": "2020-03-01T18:11:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm still receiving the depreciation warnings for ModelSchema and TableSchema even though I've removed all instances of them from my code base as the warning is raised in the constructor of the metaclass which is unconditionally executed.\r\n\r\nThere may well be a very good reason for it which I don't understand so feel free to close off if so. Otherwise would you consider making the warnings conditional on import of the depreciated classes themselves?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/286", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/286/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/286/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/286/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/286", "id": 565403573, "node_id": "MDU6SXNzdWU1NjU0MDM1NzM=", "number": 286, "title": "Renaming autogenerated fields results in field collision", "user": {"login": "aberres", "id": 20811121, "node_id": "MDQ6VXNlcjIwODExMTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/20811121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aberres", "html_url": "https://github.com/aberres", "followers_url": "https://api.github.com/users/aberres/followers", "following_url": "https://api.github.com/users/aberres/following{/other_user}", "gists_url": "https://api.github.com/users/aberres/gists{/gist_id}", "starred_url": "https://api.github.com/users/aberres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aberres/subscriptions", "organizations_url": "https://api.github.com/users/aberres/orgs", "repos_url": "https://api.github.com/users/aberres/repos", "events_url": "https://api.github.com/users/aberres/events{/privacy}", "received_events_url": "https://api.github.com/users/aberres/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-14T15:41:02Z", "updated_at": "2020-02-17T15:07:26Z", "closed_at": "2020-02-15T19:57:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the [documentation](https://marshmallow-sqlalchemy.readthedocs.io/en/latest/recipes.html#overriding-generated-fields) the following should work to rename the 'name' column to 'custom_name'.\r\n\r\n```\r\nclass AuthorSchema(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Author\r\n        include_relationships = True\r\n        load_instance = True\r\n\r\nclass AuthorSchema(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = Author\r\n        include_relationships = True\r\n        load_instance = False\r\n\r\n    custom_name = auto_field('name')\r\n```\r\n\r\nIn practice instantiating the schema results in\r\n```ValueError: The attribute argument for one or more fields collides with another field's name or attribute argument. Check the following field names and attribute arguments: ['name']```\r\n\r\nWhen checking `_declared_fields` I found the following keys, including the duplicated name: `['custom_name', 'id', 'name']`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/284", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/284/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/284/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/284/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/284", "id": 563458155, "node_id": "MDU6SXNzdWU1NjM0NTgxNTU=", "number": 284, "title": "SQLAlchemySchema not Plucking relationship field", "user": {"login": "caffeinatedMike", "id": 22151742, "node_id": "MDQ6VXNlcjIyMTUxNzQy", "avatar_url": "https://avatars1.githubusercontent.com/u/22151742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caffeinatedMike", "html_url": "https://github.com/caffeinatedMike", "followers_url": "https://api.github.com/users/caffeinatedMike/followers", "following_url": "https://api.github.com/users/caffeinatedMike/following{/other_user}", "gists_url": "https://api.github.com/users/caffeinatedMike/gists{/gist_id}", "starred_url": "https://api.github.com/users/caffeinatedMike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caffeinatedMike/subscriptions", "organizations_url": "https://api.github.com/users/caffeinatedMike/orgs", "repos_url": "https://api.github.com/users/caffeinatedMike/repos", "events_url": "https://api.github.com/users/caffeinatedMike/events{/privacy}", "received_events_url": "https://api.github.com/users/caffeinatedMike/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-11T20:29:16Z", "updated_at": "2020-02-14T01:37:07Z", "closed_at": "2020-02-14T01:37:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two Schemas that inherit from `SQLAlchemySchema` and utilize the `auto_field` function. The two schemas have been assigned db Models that have a relationship between them. However, with the below code the only output is the 'id' property. \r\n\r\nHow can I properly \"pluck\" the columns from the related table? \r\nI know in SQLAlchemy I can just do dot notation (ie `region_name = pricelist.retailer.name`)\r\n```\r\nfrom marshmallow import Schema, EXCLUDE\r\nfrom app.schemas import RetailerSchema\r\nfrom app.models import PriceList\r\nfrom app import ma\r\n\r\nfrom marshmallow_sqlalchemy import SQLAlchemySchema, auto_field\r\n\r\nclass RegionSchema(SQLAlchemySchema):\r\n    class Meta:\r\n        model = PriceList\r\n        include_relationships = True\r\n        include_fk = True\r\n        unknown = EXCLUDE\r\n    \r\n    catalogretailer_id = auto_field(dump_only=True, data_key='id')\r\n    name = ma.Pluck(RetailerSchema, 'name')\r\n    created_at = ma.Pluck(RetailerSchema, 'created_at')\r\n    updated_at = ma.Pluck(RetailerSchema, 'updated_at')\r\n\r\nregionSchema = RegionSchema()\r\nregionsSchema = RegionSchema(many=True)\r\n```\r\n```\r\nfrom marshmallow import Schema, pre_load, post_dump, EXCLUDE\r\n#from marshmallow import fields as ma\r\nfrom app.models import Retailer\r\nfrom app import ma\r\n\r\nfrom marshmallow_sqlalchemy import SQLAlchemySchema, auto_field\r\n\r\nclass RetailerSchema(SQLAlchemySchema):\r\n    class Meta:\r\n        model = Retailer\r\n        include_relationships = True\r\n        unknown = EXCLUDE\r\n    \r\n    id = auto_field(dump_only=True)\r\n    name = auto_field()\r\n    address = auto_field()\r\n    created_at = auto_field()\r\n    updated_at = auto_field()\r\n\r\nretailerSchema = RetailerSchema()\r\nretailersSchema = RetailerSchema(many=True)\r\n```\r\n\r\nAnd finally, the database table class\r\n```\r\nfrom app import db\r\n    \r\nclass PriceList(db.Model):\r\n    __bind_key__ = 'dfdfdsf'\r\n    __tablename__ = 'dfdsfads'\r\n    __table_args__ = {'extend_existing': True}\r\n    \r\n    id = db.Column(db.Integer, primary_key = True)\r\n    catalogretailer_id = db.Column(db.Integer, db.ForeignKey('catalogretailer.id'))\r\n    catalogvendor_id = db.Column(db.Integer, db.ForeignKey('catalogvendor.id'))\r\n    use_retailer_ECU_ID = db.Column(db.Integer, default = 0)\r\n    \r\n    retailer = db.relationship('Retailer', backref='pricelists')\r\n    vendor = db.relationship('Brand', backref='pricelists')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/276", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/276/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/276/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/276/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/276", "id": 562243219, "node_id": "MDU6SXNzdWU1NjIyNDMyMTk=", "number": 276, "title": "Make generated key names configurable in ModelConverter", "user": {"login": "davenquinn", "id": 1537910, "node_id": "MDQ6VXNlcjE1Mzc5MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1537910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davenquinn", "html_url": "https://github.com/davenquinn", "followers_url": "https://api.github.com/users/davenquinn/followers", "following_url": "https://api.github.com/users/davenquinn/following{/other_user}", "gists_url": "https://api.github.com/users/davenquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/davenquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davenquinn/subscriptions", "organizations_url": "https://api.github.com/users/davenquinn/orgs", "repos_url": "https://api.github.com/users/davenquinn/repos", "events_url": "https://api.github.com/users/davenquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/davenquinn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445195, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTU=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-09T21:32:56Z", "updated_at": "2020-02-10T04:11:26Z", "closed_at": "2020-02-10T03:55:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to control how fields are generated from my models to create more meaningful names for client applications (typically modifying the SQLAlchemy automatically-generated relationship names). `ModelConverter` currently doesn't have a way to control the generated field name for properties, and uses `prop.key` in all cases. I propose adding a `ModelConverter._key_for_property` method or similar.\r\n\r\nI have implemented this in a subclass by inelegantly shimming `fields_for_model`:\r\n```python\r\nclass SparrowConverter(ModelConverter):\r\n    def _key_for_property(self, prop):\r\n        # Default implementation.\r\n        return prop.key\r\n    def fields_for_model(self, model, **kwargs):\r\n        # Shim fields_for_model so we can control the generated property names\r\n        # Precompute new keys so we can use properties\r\n        new_keys = {prop.key: self._key_for_property(prop)\r\n                    for prop in model.__mapper__.iterate_properties}\r\n        # Convert fields to models using library code.\r\n        fields = super().fields_for_model(model, **kwargs)\r\n        return {new_keys[k]: v for k, v in fields.items() if v is not None}\r\n```\r\nOther methods sometimes need to call `_key_for_property` where they currently use `prop.key`. A better implementation would actually change `fields_for_model` but I didn't want to mess with the other the logic in there.\r\n\r\nThis seems like it would increase conversion flexibility with minimum complexity penalty. I'm happy to submit a PR if this seems useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/270", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/270/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/270/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/270", "id": 557622927, "node_id": "MDU6SXNzdWU1NTc2MjI5Mjc=", "number": 270, "title": "Non-loading schema", "user": {"login": "mcclurem", "id": 236281, "node_id": "MDQ6VXNlcjIzNjI4MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/236281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcclurem", "html_url": "https://github.com/mcclurem", "followers_url": "https://api.github.com/users/mcclurem/followers", "following_url": "https://api.github.com/users/mcclurem/following{/other_user}", "gists_url": "https://api.github.com/users/mcclurem/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcclurem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcclurem/subscriptions", "organizations_url": "https://api.github.com/users/mcclurem/orgs", "repos_url": "https://api.github.com/users/mcclurem/repos", "events_url": "https://api.github.com/users/mcclurem/events{/privacy}", "received_events_url": "https://api.github.com/users/mcclurem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-30T16:51:41Z", "updated_at": "2020-02-08T17:31:15Z", "closed_at": "2020-02-08T17:31:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "For a lot of my use cases, I want the auto-generating field behavior/validation that comes from using marshmallow_sqlalchemy's ModelSchema but I don't want some of the magic loading behavior. Specifically my use case comes when using schemas in flask_smorest and I want to choose how to load inside my method/route.\r\n\r\nI've found that I can get a pretty decent result with:\r\n```python\r\nclass AutoGeneratedSchema(Schema, metaclass=ModelSchemaMeta):\r\n     OPTIONS_CLASS = ModelSchemaOpts\r\n```\r\nBut I haven't tested this aggressively.\r\nCan something similar to this be integrated into the core library? Importing ModelSchemaMeta in my own code feels a little dirty since it seems like it should stay as a library internal.\r\n\r\nPerhaps this can even be implemented with just an argument in the meta class?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/260", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/260/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/260/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/260", "id": 521623189, "node_id": "MDU6SXNzdWU1MjE2MjMxODk=", "number": 260, "title": "marshmallow-sqlalchemy-giving-syntax-error", "user": {"login": "avanishtiwari38", "id": 20028768, "node_id": "MDQ6VXNlcjIwMDI4NzY4", "avatar_url": "https://avatars2.githubusercontent.com/u/20028768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avanishtiwari38", "html_url": "https://github.com/avanishtiwari38", "followers_url": "https://api.github.com/users/avanishtiwari38/followers", "following_url": "https://api.github.com/users/avanishtiwari38/following{/other_user}", "gists_url": "https://api.github.com/users/avanishtiwari38/gists{/gist_id}", "starred_url": "https://api.github.com/users/avanishtiwari38/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avanishtiwari38/subscriptions", "organizations_url": "https://api.github.com/users/avanishtiwari38/orgs", "repos_url": "https://api.github.com/users/avanishtiwari38/repos", "events_url": "https://api.github.com/users/avanishtiwari38/events{/privacy}", "received_events_url": "https://api.github.com/users/avanishtiwari38/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-12T15:32:11Z", "updated_at": "2019-12-13T17:04:27Z", "closed_at": "2019-11-17T19:58:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "After installing `marshmallow-sqlalchemy` in python 3.5 it is showing me syntax error.\r\n```\r\nTraceback (most recent call last):\r\n  File \"run.py\", line 1, in <module>\r\n    from app import flask_app\r\n  File \"/var/www/html/mswipe-banner/mswipe-banner/app/__init__.py\", line 10, in <module>\r\n    from .models import *\r\n  File \"/var/www/html/mswipe-banner/mswipe-banner/app/models/__init__.py\", line 1, in <module>\r\n    from .banner import *\r\n  File \"/var/www/html/mswipe-banner/mswipe-banner/app/models/banner.py\", line 1, in <module>\r\n    from .base_model import *\r\n  File \"/var/www/html/mswipe-banner/mswipe-banner/app/models/base_model.py\", line 1, in <module>\r\n    from flask_marshmallow import Marshmallow\r\n  File \"/var/www/html/mswipe-banner/lib/python3.5/site-packages/flask_marshmallow/__init__.py\", line 24, in <module>\r\n    from . import sqla\r\n  File \"/var/www/html/mswipe-banner/lib/python3.5/site-packages/flask_marshmallow/sqla.py\", line 13, in <module>\r\n    import marshmallow_sqlalchemy as msqla\r\n  File \"/var/www/html/mswipe-banner/lib/python3.5/site-packages/marshmallow_sqlalchemy/__init__.py\", line 1, in <module>\r\n    from .schema import TableSchemaOpts, ModelSchemaOpts, TableSchema, ModelSchema\r\n  File \"/var/www/html/mswipe-banner/lib/python3.5/site-packages/marshmallow_sqlalchemy/schema.py\", line 3, in <module>\r\n    from .convert import ModelConverter\r\n  File \"/var/www/html/mswipe-banner/lib/python3.5/site-packages/marshmallow_sqlalchemy/convert.py\", line 80\r\n    ):\r\n    ^\r\nSyntaxError: invalid syntax\r\n```\r\nIs there any problem with `marshmallow`.\r\n\r\n[Stack overflow](https://stackoverflow.com/questions/58818863/marshmallow-sqlalchemy-giving-syntax-error) \r\nThank you \ud83d\ude0a", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/254", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/254/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/254/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/254", "id": 497742151, "node_id": "MDU6SXNzdWU0OTc3NDIxNTE=", "number": 254, "title": "How to PUT with marshmallow-sqlalchemy + webargs?", "user": {"login": "lafrech", "id": 1767010, "node_id": "MDQ6VXNlcjE3NjcwMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1767010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lafrech", "html_url": "https://github.com/lafrech", "followers_url": "https://api.github.com/users/lafrech/followers", "following_url": "https://api.github.com/users/lafrech/following{/other_user}", "gists_url": "https://api.github.com/users/lafrech/gists{/gist_id}", "starred_url": "https://api.github.com/users/lafrech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lafrech/subscriptions", "organizations_url": "https://api.github.com/users/lafrech/orgs", "repos_url": "https://api.github.com/users/lafrech/repos", "events_url": "https://api.github.com/users/lafrech/events{/privacy}", "received_events_url": "https://api.github.com/users/lafrech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-09-24T14:54:13Z", "updated_at": "2020-03-11T18:46:18Z", "closed_at": "2019-10-02T14:10:15Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi guys.\r\n\r\nI'm discovering marshmallow-sqlalchemy, trying to build a simple REST API with marshmallow-sqlalchemy. I'm using flask-smorest (apispec + webargs inside).\r\n\r\nHere's what it looks like:\r\n\r\n```py\r\nclass Member(db.Model):\r\n    id = sa.Column(UUIDType, primary_key=True, default=uuid.uuid4)\r\n    first_name = sa.Column(sa.String(length=40))\r\n    last_name = sa.Column(sa.String(length=40))\r\n    birthdate = sa.Column(sa.DateTime)\r\n```\r\n\r\n```py\r\nclass MemberSchema(ModelSchema):\r\n    class Meta(ModelSchema.Meta):\r\n        model = Member\r\n\r\nclass MemberQueryArgsSchema(ma.Schema):\r\n    first_name = ma.fields.Str()\r\n    last_name = ma.fields.Str()\r\n```\r\n\r\n```py\r\n@blp.route('/')\r\nclass Members(MethodView):\r\n\r\n    @blp.arguments(MemberQueryArgsSchema, location='query')\r\n    @blp.response(MemberSchema(many=True))\r\n    def get(self, args):\r\n        \"\"\"List members\"\"\"\r\n        return db.session.query(Member).filter_by(**args)\r\n\r\n    @blp.arguments(MemberSchema)\r\n    @blp.response(MemberSchema, code=201)\r\n    def post(self, item):\r\n        \"\"\"Add a new member\"\"\"\r\n        db.session.add(item)\r\n        db.session.commit()\r\n        return item\r\n\r\n\r\n@blp.route('/<uuid:item_id>')\r\nclass MembersById(MethodView):\r\n\r\n    @blp.response(MemberSchema)\r\n    def get(self, item_id):\r\n        \"\"\"Get member by ID\"\"\"\r\n        return db.session.query(Member).get_or_404(item_id)\r\n\r\n    @blp.arguments(MemberSchema)\r\n    @blp.response(MemberSchema)\r\n    def put(self, item, item_id):\r\n        \"\"\"Update a member\"\"\"\r\n        db.session.add(item)\r\n        db.session.commit()\r\n        return item\r\n\r\n    @blp.response(code=204)\r\n    def delete(self, item_id):\r\n        \"\"\"Delete a member\"\"\"\r\n        item = db.session.query(Member).get_or_404(item_id)\r\n        db.session.delete(item)\r\n        db.session.commit()\r\n```\r\n\r\nLooks like I'm almost there and I find it pretty neat, except for two things related to the update (PUT).\r\n\r\n### id must be passed in body\r\n\r\nWhen PUTing a resource, the id is in the resource path, injected as `item_id` in the view function. It shouldn't have to be in the request body. In fact, I'd like to make the id field read-only since id should not be modified.\r\n\r\nWith the code above\r\n- the id in the path is unused\r\n- the user must pass the id in the request body\r\n\r\nIf the id is not passed in the request body but added in the view function, the `make_instance` method of `MemberSchema` does not find the existing instance and creates another one. Adding the id in the view generates a unique constraint failure on the id when committing.\r\n\r\nI don't see how to get out of this. Since the instantiation takes place in a `post_load` method, I don't see how to pass the id from path parameter. (Perhaps webargs could fetch it from path. I gave it a quick try with no luck, not sure why, but the single-schema/multi-location case is about to be dropped from webargs anyway.)\r\n\r\nLooks like I need to back-off from marshmallow-sqlalchemy's niceness and no-op `make_instance` to do the actual job in the view function.\r\n\r\nI can't believe I'm the only one here. Any advice ?\r\n\r\n### missing fields are not nulled\r\n\r\nNot really specific to marshmallow-sqlalchemy.\r\n\r\nAFAIU, the update in `make_instance` is similar to a `dict` update in that it does not null missing fields. Technically, this is not a real PUT.\r\n\r\nIn REST the old representation should be completely replaced with the new one. Updates should be done using PATCH (and the dict update method is not really satisfying, as it can't remove fields, which is why some advocate for a patch language such as json-patch, but that's another story).\r\n\r\nWhen the client PUTs a resource with a removed field (not null, removed, therefore missing), I expect the field to be removed (nulled or rather set to default value) from the object.\r\n\r\nIn another app, I use a custom method that uses the new data (as dict) and the schema to update the fields in the object and null all non-dump-only missing fields.\r\n\r\nI thought `make_instance` would do that but it doesn't.\r\n\r\nIn fact, I thought this was the idea behind of #40. Since it reads \"Require fields for non-nullable properties\", I figured nullable properties would not be required, therefore allowed to be missing and this made me think that missing values would be nullified, but it does not appear to be true.\r\n\r\nIt could be patched to do it, though.\r\n\r\nAgain, I'm surprised. Am I the only one with this issue? Am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/252", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/252/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/252/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/252", "id": 494136562, "node_id": "MDU6SXNzdWU0OTQxMzY1NjI=", "number": 252, "title": "Ignore `nullable` property of column in generated fields", "user": {"login": "acnebs", "id": 9054108, "node_id": "MDQ6VXNlcjkwNTQxMDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9054108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acnebs", "html_url": "https://github.com/acnebs", "followers_url": "https://api.github.com/users/acnebs/followers", "following_url": "https://api.github.com/users/acnebs/following{/other_user}", "gists_url": "https://api.github.com/users/acnebs/gists{/gist_id}", "starred_url": "https://api.github.com/users/acnebs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acnebs/subscriptions", "organizations_url": "https://api.github.com/users/acnebs/orgs", "repos_url": "https://api.github.com/users/acnebs/repos", "events_url": "https://api.github.com/users/acnebs/events{/privacy}", "received_events_url": "https://api.github.com/users/acnebs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-09-16T15:54:09Z", "updated_at": "2019-09-16T19:31:56Z", "closed_at": "2019-09-16T16:47:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "In marshmallow, objects are assumed to be valid, so no validation is done on `dump`. Validation is only performed on `load`. A marshmallow `load` generally goes hand-in-hand with inserting something into the DB in SQLAlchemy. However, the `nullable` property on a column is referring to the fact that in your database, you want that column to always have something in it, e.g. it is already validating that property on insert (load).\r\n\r\nI'm doing a terrible job of explaining this, but essentially I think that marshmallow-sqlalchemy automatically assuming I want my `nullable=False` columns to be `required=True` in my marshmallow Schema is redundant (because my DB will already throw an error if a `nullable=False` column is empty) and counter to many (most?) use-cases, where you want to only include selected fields, but not necessarily force non-nullable columns to be in the serialized data that you want to deserialize.\r\n\r\nIt would be nice if there was at least a way to disable automatically setting `nullable=False` columns to `Field(required=True)` without having to override a bunch of methods in the `ModelConverter`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/251", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/251/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/251/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/251", "id": 490808079, "node_id": "MDU6SXNzdWU0OTA4MDgwNzk=", "number": 251, "title": "Data in from a many-to-many association object", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-08T21:23:45Z", "updated_at": "2020-05-04T17:18:01Z", "closed_at": "2020-05-04T17:18:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using the example of a party co-ordination system, where many `Parties` can have many `Responders`. I have an association object `PartyResponder` which maps the many-to-many, and adds another few columns such as `is_attending` (maybe the responder will come to the party, maybe they won't).\r\n\r\n```python\r\nclass PartySchema(ma.ModelSchema):\r\n    class Meta:\r\n        model = Party\r\n\r\n    responders = ma.Nested(\r\n        ResponderSchema, many=True, exclude=[\"responder_parties\", \"parties\"]\r\n    )\r\n\r\nclass ResponderSchema(ma.ModelSchema):\r\n    class Meta:\r\n        model = Responder\r\n\r\n    parties = ma.Nested(\r\n        \"PartySchema\", many=True, exclude=[\"party_responders\", \"responders\"]\r\n    )\r\n\r\nclass PartyResponderSchema(ma.ModelSchema):\r\n    class Meta:\r\n        model = PartyResponder\r\n```\r\n\r\n\r\nThe JSON I currently get from my API (via `PartySchema` when I do something like `http GET http://localhost:5000/parties/1/`) looks something like this. (I've removed irrelevant parts.)\r\n```\r\n{\r\n  \"id\": 1, \r\n  \"party_responders\": [\r\n    {\r\n      \"party_id\": 1, \r\n      \"responder_id\": 1\r\n    }, \r\n    {\r\n      \"party_id\": 1, \r\n      \"responder_id\": 2\r\n    }\r\n  ], \r\n  \"responders\": [\r\n    {\r\n      \"id\": 1, \r\n      \"name\": \"Bob Smith\", \r\n      \"username\": \"bob\"\r\n    }, \r\n    {\r\n \r\n      \"id\": 2, \r\n      \"name\": \"John Doe\", \r\n      \"username\": \"john\"\r\n    }\r\n  ], \r\n}\r\n```\r\n\r\nThe `Nested` relationships behave as intended, I can see who has responded to the party in the `responders` array of objects, but what is the sanest way to get access to the association object to get to the `is_attending` field? As you see from the first code paste, neither `PartySchema` nor `ResponderSchema` know about `PartyResponderSchema`. Will that need to change in order to do this? It feels like something that could quickly hit maximum recursion depth.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/249", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/249/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/249/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/249", "id": 490259323, "node_id": "MDU6SXNzdWU0OTAyNTkzMjM=", "number": 249, "title": "AttributeError: module 'sqlalchemy.dialects.postgresql' has no attribute 'MONEY'", "user": {"login": "HarmeetSokhi", "id": 35092366, "node_id": "MDQ6VXNlcjM1MDkyMzY2", "avatar_url": "https://avatars0.githubusercontent.com/u/35092366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HarmeetSokhi", "html_url": "https://github.com/HarmeetSokhi", "followers_url": "https://api.github.com/users/HarmeetSokhi/followers", "following_url": "https://api.github.com/users/HarmeetSokhi/following{/other_user}", "gists_url": "https://api.github.com/users/HarmeetSokhi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HarmeetSokhi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HarmeetSokhi/subscriptions", "organizations_url": "https://api.github.com/users/HarmeetSokhi/orgs", "repos_url": "https://api.github.com/users/HarmeetSokhi/repos", "events_url": "https://api.github.com/users/HarmeetSokhi/events{/privacy}", "received_events_url": "https://api.github.com/users/HarmeetSokhi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-09-06T10:43:50Z", "updated_at": "2019-09-10T14:19:17Z", "closed_at": "2019-09-06T16:12:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ,\r\n\r\nAfter today's release we are getting the below error when starting the airflow server.We are using amazon-linux-extras install postgresql10=10\r\n\r\n\"Traceback (most recent call last):\r\n  File \"/usr/local/bin/airflow\", line 22, in <module>\r\n    from airflow.bin.cli import CLIFactory\r\n  File \"/usr/local/lib/python3.6/site-packages/airflow/bin/cli.py\", line 69, in <module>\r\n    from airflow.www_rbac.app import cached_app as cached_app_rbac\r\n  File \"/usr/local/lib/python3.6/site-packages/airflow/www_rbac/app.py\", line 24, in <module>\r\n    from flask_appbuilder import AppBuilder, SQLA\r\n  File \"/usr/local/lib64/python3.6/site-packages/flask_appbuilder/__init__.py\", line 5, in <module>\r\n    from .base import AppBuilder\r\n  File \"/usr/local/lib64/python3.6/site-packages/flask_appbuilder/base.py\", line 5, in <module>\r\n    from .api.manager import OpenApiManager\r\n  File \"/usr/local/lib64/python3.6/site-packages/flask_appbuilder/api/__init__.py\", line 11, in <module>\r\n    from marshmallow_sqlalchemy.fields import Related, RelatedList\r\n  File \"/usr/local/lib/python3.6/site-packages/marshmallow_sqlalchemy/__init__.py\", line 1, in <module>\r\n    from .schema import TableSchemaOpts, ModelSchemaOpts, TableSchema, ModelSchema\r\n  File \"/usr/local/lib/python3.6/site-packages/marshmallow_sqlalchemy/schema.py\", line 3, in <module>\r\n    from .convert import ModelConverter\r\n  File \"/usr/local/lib/python3.6/site-packages/marshmallow_sqlalchemy/convert.py\", line 36, in <module>\r\n    class ModelConverter:\r\n  File \"/usr/local/lib/python3.6/site-packages/marshmallow_sqlalchemy/convert.py\", line 52, in ModelConverter\r\n    postgresql.MONEY: fields.Decimal,\r\nAttributeError: module 'sqlalchemy.dialects.postgresql' has no attribute 'MONEY'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/245", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/245/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/245/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/245/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/245", "id": 488300691, "node_id": "MDU6SXNzdWU0ODgzMDA2OTE=", "number": 245, "title": "schema.load : TypeError: unhashable type: 'dict' when using deep nested dictionaries", "user": {"login": "svenfraeys", "id": 4804787, "node_id": "MDQ6VXNlcjQ4MDQ3ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4804787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svenfraeys", "html_url": "https://github.com/svenfraeys", "followers_url": "https://api.github.com/users/svenfraeys/followers", "following_url": "https://api.github.com/users/svenfraeys/following{/other_user}", "gists_url": "https://api.github.com/users/svenfraeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/svenfraeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svenfraeys/subscriptions", "organizations_url": "https://api.github.com/users/svenfraeys/orgs", "repos_url": "https://api.github.com/users/svenfraeys/repos", "events_url": "https://api.github.com/users/svenfraeys/events{/privacy}", "received_events_url": "https://api.github.com/users/svenfraeys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-02T19:33:22Z", "updated_at": "2019-09-05T15:05:00Z", "closed_at": "2019-09-05T03:11:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello,\r\nI am trying to use marshmallow to load a dict that contains model in a model in a model. (so deep nested )\r\nbut once it seems to bug out when reaching the lowest model which stays a dict.\r\nso it throws a `TypeError: unhashable type: 'dict'` exception.\r\n\r\nUnderneath a full standalone working example that shows the problem I am having.\r\n\r\nIn this example you have a Project which contains Users and a User can hold Spoons.\r\nThe goal that I have is to make a model using the schema.load passing a dictionary containing a project dict which has a user dict and a spoon dict.\r\n\r\nThe expected result would be sqlalchemy models where the project module has a single user and a single spoon.\r\n\r\nAm I missing something in my setup or is this feature not supported yet?\r\nCheers and thanks!\r\nSven\r\n\r\nCode:\r\n```\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_marshmallow import Marshmallow\r\n\r\napp = Flask(__name__)\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres@127.0.0.1:5432/test_marshmallow'\r\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\r\n\r\nma = Marshmallow(app)\r\ndb = SQLAlchemy(app)\r\n\r\nclass Project(db.Model):\r\n    __tablename__ = 'project'\r\n    has_namespace = True\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(80), nullable=False)\r\n    users = db.relationship(\"User\", back_populates=\"project\", foreign_keys=\"[User.project_id]\")\r\n\r\nclass User(db.Model):\r\n    __tablename__ = 'user'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(80), nullable=False)\r\n\r\n    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)\r\n    project = db.relationship(\"Project\", back_populates=\"users\", foreign_keys=[project_id])\r\n\r\n    spoons = db.relationship(\"Spoon\", back_populates=\"user\", foreign_keys=\"[Spoon.user_id]\")\r\n\r\nclass Spoon(db.Model):\r\n    __tablename__ = 'spoon'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(80), nullable=False)\r\n\r\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\r\n    user = db.relationship(\"User\", back_populates=\"spoons\", foreign_keys=[user_id])\r\n\r\nclass BaseSchema(ma.ModelSchema):\r\n    class Meta:\r\n        include_fk = True\r\n\r\nclass ProjectSchema(BaseSchema):\r\n    class Meta(BaseSchema.Meta):\r\n        model = Project\r\n\r\nclass UserSchema(BaseSchema):\r\n    class Meta(BaseSchema.Meta):\r\n        model = User\r\n\r\nclass SpoonSchema(BaseSchema):\r\n    class Meta(BaseSchema.Meta):\r\n        model = Spoon\r\n\r\nproject_schema = ProjectSchema()\r\ndata = {\r\n    'name': 'hello',\r\n    'users': [\r\n        {\r\n            'name': 'man1',\r\n            'spoons': [\r\n                {'name': 'spoon1'}\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\n# create db\r\n# db.create_all()\r\n\r\n# load schema\r\nproject = project_schema.load(data, session=db.session)\r\nprint(project.name)\r\n```\r\n\r\nTraceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow_sqlalchemy\\fields.py\", line 109, in _deserialize\r\n    self.session.query(self.related_model), value\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow_sqlalchemy\\fields.py\", line 140, in _get_existing_instance\r\n    raise NoResultFound\r\nsqlalchemy.orm.exc.NoResultFound: ()\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\dev\\projects\\basset9\\test_marshmallow.py\", line 71, in <module>\r\n    project = project_schema.load(data, session=db.session)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow_sqlalchemy\\schema.py\", line 216, in load\r\n    return super(ModelSchema, self).load(data, *args, **kwargs)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\schema.py\", line 684, in load\r\n    data, many=many, partial=partial, unknown=unknown, postprocess=True\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\schema.py\", line 799, in _do_load\r\n    unknown=unknown,\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\schema.py\", line 639, in _deserialize\r\n    index=index,\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\schema.py\", line 483, in _call_and_store\r\n    value = getter_func(data)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\schema.py\", line 632, in <lambda>\r\n    val, field_name, data, **d_kwargs\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\fields.py\", line 329, in deserialize\r\n    output = self._deserialize(value, attr, data, **kwargs)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\fields.py\", line 660, in _deserialize\r\n    result.append(self.inner.deserialize(each, **kwargs))\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow\\fields.py\", line 329, in deserialize\r\n    output = self._deserialize(value, attr, data, **kwargs)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\marshmallow_sqlalchemy\\fields.py\", line 114, in _deserialize\r\n    return self.related_model(**value)\r\n  File \"<string>\", line 4, in __init__\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\orm\\state.py\", line 441, in _initialize_instance\r\n    manager.dispatch.init_failure(self, args, kwargs)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\util\\langhelpers.py\", line 68, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 153, in reraise\r\n    raise value\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\orm\\state.py\", line 438, in _initialize_instance\r\n    return manager.original_init(*mixed[1:], **kwargs)\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\ext\\declarative\\base.py\", line 842, in _declarative_constructor\r\n    setattr(self, k, kwargs[k])\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\orm\\attributes.py\", line 268, in __set__\r\n    instance_state(instance), instance_dict(instance), value, None\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\orm\\attributes.py\", line 1321, in set\r\n    new_values, old_collection, new_collection, initiator=evt\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\orm\\collections.py\", line 790, in bulk_replace\r\n    constants = existing_idset.intersection(values or ())\r\n  File \"C:\\Users\\svenf\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\sqlalchemy\\util\\_collections.py\", line 615, in intersection\r\n    result._members.update(self._working_set(members).intersection(other))\r\nTypeError: unhashable type: 'dict'\r\n[Finished in 1.9s]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/241", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/241/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/241/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/241", "id": 487796643, "node_id": "MDU6SXNzdWU0ODc3OTY2NDM=", "number": 241, "title": "Drop Python 2 and 3.5 support", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1529807774, "node_id": "MDU6TGFiZWwxNTI5ODA3Nzc0", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/backwards%20incompatible", "name": "backwards incompatible", "color": "d93f0b", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-31T18:08:48Z", "updated_at": "2019-09-06T19:12:58Z", "closed_at": "2019-09-06T01:41:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "* py2 EOL is nigh\r\n* marshmallow 3 no longer supports Python 2\r\n* Very few marshmallow users use Python 3.5 (even fewer than Python 2): http://marshmallow.sloria.io/#ma2-vs-ma3-pyminor", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/240", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/240/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/240/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/240", "id": 486104679, "node_id": "MDU6SXNzdWU0ODYxMDQ2Nzk=", "number": 240, "title": "RFC: A more concise API for overriding field arguments and consolidating TableSchema and ModelSchema", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445195, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTU=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1273727464, "node_id": "MDU6TGFiZWwxMjczNzI3NDY0", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/feedback%20welcome", "name": "feedback welcome", "color": "c2e0c6", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-08-28T00:52:14Z", "updated_at": "2020-02-09T21:17:38Z", "closed_at": "2020-02-09T21:14:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### Status quo\r\n\r\nUsers often need to provide overrides to autogenerated fields.  There are currently two current mechanisms for this.\r\n\r\nYou can use `field_for`. This gets verbose when you use it for many fields.\r\n\r\n```python\r\nclass ArtistSchema(ModelSchema):\r\n    class Meta:\r\n        model = models.Artist\r\n\r\n    created_at = field_for(models.Artist, \"created_at\", dump_only=True)\r\n    # ...\r\n\r\n```\r\n\r\nYou can also pass overrides on the model.\r\n\r\n```python\r\nclass Artist(Model):\r\n    created_at = Column(Timestamp, info={\"marshmallow\": {\"dump_only\": True})\r\n```\r\n\r\nThis awkwardly mixes concerns and can be problematic when you need multiple schemas for the same model.\r\n\r\n### Proposed changes\r\n\r\n1. Deprecate `ModelSchema` and `TableSchema` in favor of a `SQLAlchemyAutoSchema` that can take either `model` or `table` as an option. Like `ModelSchema` and `TableSchema`, `SQLAlchemyAutoSchema` will autogenerate fields for all columns. Field configuration can be overridden using a new `auto_field` function.\r\n\r\n```python\r\nfrom marshmallow_sqlalchemy import SQLAlchemySchema, auto_field\r\n\r\nclass ArtistSchema(SQLAlchemyAutoSchema):\r\n    class Meta:\r\n        model = models.Artist\r\n        # OR\r\n        # table = models.Artist.__table__\r\n     \r\n    id = auto_field(dump_only=True)\r\n    created_at = auto_field(dump_only=True)\r\n```\r\n\r\n2. Add a `SQLAlchemySchema` class that associates the schema with a model/table so that `auto_field` can be used. Unlike `SQLAlchemyAutoSchema`, fields won't be automatically generated for all columns, so fields must be declared explicitly.\r\n\r\n```python\r\nfrom marshmallow_sqlalchemy import SQLAlchemySchema, auto_field\r\n\r\nclass ArtistSchema(SQLAlchemySchema):\r\n    class Meta:\r\n        model = models.Artist\r\n        # OR\r\n        # table = models.Artist.__table__\r\n\r\n    id = auto_field(dump_only=True)\r\n    created_at = auto_field(dump_only=True)\r\n    name = auto_field()\r\n```\r\n\r\n3. Deprecate support for `info={\"marshmallow\": {...}}`, as it is redundant.\r\n\r\n---\r\n\r\nh/t @taion for the SQLAlchemySchema/auto_field idea and its implementation (currently outside this repo)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/236", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/236/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/236/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/236", "id": 482459953, "node_id": "MDU6SXNzdWU0ODI0NTk5NTM=", "number": 236, "title": "Update documentation for marshmallow 3.0.0", "user": {"login": "mathiasritter", "id": 5930569, "node_id": "MDQ6VXNlcjU5MzA1Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/5930569?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathiasritter", "html_url": "https://github.com/mathiasritter", "followers_url": "https://api.github.com/users/mathiasritter/followers", "following_url": "https://api.github.com/users/mathiasritter/following{/other_user}", "gists_url": "https://api.github.com/users/mathiasritter/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathiasritter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathiasritter/subscriptions", "organizations_url": "https://api.github.com/users/mathiasritter/orgs", "repos_url": "https://api.github.com/users/mathiasritter/repos", "events_url": "https://api.github.com/users/mathiasritter/events{/privacy}", "received_events_url": "https://api.github.com/users/mathiasritter/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1163000770, "node_id": "MDU6TGFiZWwxMTYzMDAwNzcw", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/documentation", "name": "documentation", "color": "fbca04", "default": true, "description": ""}, {"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T18:25:26Z", "updated_at": "2019-08-23T02:11:29Z", "closed_at": "2019-08-23T02:11:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "**marshmallow 3.0.0** was released [yesterday](https://marshmallow.readthedocs.io/en/stable/changelog.html#id1).\r\n\r\nPlease update the documentation of marshmallow-sqlalchemy for this new release.\r\n\r\n**Example**\r\n`schema.load(data)` no longer returns `UnmarshalResult` with the deserialized object stored under the attribute `data`. Instead, it returns the deserialized object directly without wrapping it in `UnmarshalResult`.\r\nTherefore, the following line in [this example ](https://marshmallow-sqlalchemy.readthedocs.io/en/latest/#de-serialize-your-data) needs to be changed from:\r\n`load_data = author_schema.load(dump_data, session=session).data`\r\nto\r\n`load_data = author_schema.load(dump_data, session=session)`\r\n\r\nI'm assuming that there are other changes as well that need to be reflected in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/235", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/235/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/235/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/235", "id": 482447633, "node_id": "MDU6SXNzdWU0ODI0NDc2MzM=", "number": 235, "title": "TypeError: __init__() got an unexpected keyword argument 'ordered'", "user": {"login": "bzaks1424", "id": 10064914, "node_id": "MDQ6VXNlcjEwMDY0OTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/10064914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzaks1424", "html_url": "https://github.com/bzaks1424", "followers_url": "https://api.github.com/users/bzaks1424/followers", "following_url": "https://api.github.com/users/bzaks1424/following{/other_user}", "gists_url": "https://api.github.com/users/bzaks1424/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzaks1424/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzaks1424/subscriptions", "organizations_url": "https://api.github.com/users/bzaks1424/orgs", "repos_url": "https://api.github.com/users/bzaks1424/repos", "events_url": "https://api.github.com/users/bzaks1424/events{/privacy}", "received_events_url": "https://api.github.com/users/bzaks1424/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-19T17:56:36Z", "updated_at": "2019-12-06T22:11:15Z", "closed_at": "2019-08-19T18:02:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I'm using the following:\r\nmarshmallow (3.0.0)\r\nmarshmallow-sqlalchemy (0.17.0)\r\npsycopg2 (2.8.3)\r\nSQLAlchemy (1.3.7)\r\n\r\nI've got the following:\r\n_Tables.py\r\n```\r\nperson_table = Table(\r\n    'person',\r\n    Base.metadata,\r\n    Column('id', UUID(as_uuid=True), primary_key=True, nullable=False, default=sqlalchemy.text('uuid_generate_v4()'), server_default=sqlalchemy.text('uuid_generate_v4()')),\r\n    Column('display_name', String(length=255), nullable=False),\r\n    Column('email', String(length=255), unique=True, nullable=False),\r\n    Column('first_name', String(length=255), nullable=False),\r\n    Column('image', Text),\r\n    Column('last_name', String(length=255), nullable=False),\r\n    Column('phash', Text))\r\n```\r\n\r\nSAObjects.py\r\n```\r\nclass Person(Base):\r\n    def __repr__(self):\r\n        return (\r\n            \"<Person id='\" + str(self.id)\r\n            + \"' first_name='\" + self.first_name\r\n            + \"' last_name='\" + self.last_name + \"'>\")\r\n    __table__ = person_table\r\n```\r\n\r\n_Schema.py\r\n```\r\nclass BaseOpts(ModelSchemaOpts):\r\n    def __init__(self, meta):\r\n        if not hasattr(meta, \"sqla_session\"):\r\n            meta.sqla_session = SqlSessionSingleton.get_instance()\r\n        super(BaseOpts, self).__init__(meta)\r\n\r\nclass BaseSchema(ModelSchema):\r\n    OPTIONS_CLASS = BaseOpts\r\n\r\nclass PersonSchema(BaseSchema):\r\n    class Meta:\r\n        model = Person\r\n```\r\n\r\nbut I am getting the following:\r\n```\r\n$ python3 db_tester.py\r\nTraceback (most recent call last):\r\n  File \"db_tester.py\", line 4, in <module>\r\n    from ._Schema import PersonSchema\r\n  File \"#####-venv/myproject/tests/myproject/_Schema.py\", line 21, in <module>\r\n    class BaseSchema(ModelSchema):\r\n  File \"#####-venv/lib/python3.7/site-packages/marshmallow/schema.py\", line 112, in __new__\r\n    klass.opts = klass.OPTIONS_CLASS(meta, ordered=ordered)\r\nTypeError: __init__() got an unexpected keyword argument 'ordered'\r\n```\r\n\r\n\r\nDid I screw something up?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/228", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/228/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/228/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/228", "id": 469286764, "node_id": "MDU6SXNzdWU0NjkyODY3NjQ=", "number": 228, "title": "schema.load might raise exception if database is locked", "user": {"login": "Obbi89", "id": 720039, "node_id": "MDQ6VXNlcjcyMDAzOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/720039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Obbi89", "html_url": "https://github.com/Obbi89", "followers_url": "https://api.github.com/users/Obbi89/followers", "following_url": "https://api.github.com/users/Obbi89/following{/other_user}", "gists_url": "https://api.github.com/users/Obbi89/gists{/gist_id}", "starred_url": "https://api.github.com/users/Obbi89/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Obbi89/subscriptions", "organizations_url": "https://api.github.com/users/Obbi89/orgs", "repos_url": "https://api.github.com/users/Obbi89/repos", "events_url": "https://api.github.com/users/Obbi89/events{/privacy}", "received_events_url": "https://api.github.com/users/Obbi89/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-17T15:26:04Z", "updated_at": "2019-08-29T14:23:22Z", "closed_at": "2019-08-29T14:23:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "If the model/schema has relationships that get loaded from database and the database is currently locked due to other parallel operations (multiple parallel requests) the operation fails with an Exception.\r\n\r\nIt should at least be documented as caveat; if you use SQLite this issue is quite common.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/226", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/226/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/226/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/226", "id": 465543425, "node_id": "MDU6SXNzdWU0NjU1NDM0MjU=", "number": 226, "title": "deserializion difficulties: schema.load(data) only works, when it returns model.__dict__", "user": {"login": "hiphamster", "id": 1666965, "node_id": "MDQ6VXNlcjE2NjY5NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1666965?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hiphamster", "html_url": "https://github.com/hiphamster", "followers_url": "https://api.github.com/users/hiphamster/followers", "following_url": "https://api.github.com/users/hiphamster/following{/other_user}", "gists_url": "https://api.github.com/users/hiphamster/gists{/gist_id}", "starred_url": "https://api.github.com/users/hiphamster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hiphamster/subscriptions", "organizations_url": "https://api.github.com/users/hiphamster/orgs", "repos_url": "https://api.github.com/users/hiphamster/repos", "events_url": "https://api.github.com/users/hiphamster/events{/privacy}", "received_events_url": "https://api.github.com/users/hiphamster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-09T02:23:45Z", "updated_at": "2019-07-09T11:15:52Z", "closed_at": "2019-07-09T03:01:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nUnless i explicitly return a ```dict``` from the ```load_subcontractor``` method (schema.py, see below) I get \"Subcontractor object missing 'get' attribute\", but based on the [documentation](https://marshmallow.readthedocs.io/en/2.x-line/quickstart.html#deserializing-objects-loading) i should just return a model object:\r\n```\r\nfrom marshmallow import Schema, fields, post_load\r\n\r\nclass UserSchema(Schema):\r\n    name = fields.Str()\r\n    email = fields.Email()\r\n    created_at = fields.DateTime()\r\n\r\n    @post_load\r\n    def make_user(self, data):\r\n        return User(**data)\r\n```\r\nWhat gives?\r\n**Here's the setup of my flask application:**\r\n\r\napp/__init__.py:\r\n```\r\n 18 db = SQLAlchemy()\r\n 19 ma = Marshmallow()\r\n...\r\n 27 def create_app(config_name=None):\r\n...\r\n 50     db.init_app(app)\r\n 51     ma.init_app(app)\r\n...\r\n101     return app\r\n```\r\napp/models.py\r\n```\r\n311 class Subcontractor(db.Model):\r\n312     \"\"\"\r\n313     A cleaning service provider\r\n314     \"\"\"\r\n315     __tablename__ = 'subcontractors'\r\n316\r\n317     id = db.Column(db.Integer, primary_key=True)\r\n318     # site_id = db.Column(db.Integer, db.ForeignKey('sites.id'))\r\n319     name = db.Column(db.String(50), unique=True)\r\n320     phone = db.Column(db.String(20), index=True, unique=True)\r\n321     # email = db.Column(db.String(60), index=True, unique=True)\r\n322     fax = db.Column(db.String(20), index=True, unique=True)\r\n323     street = db.Column(db.String(150), index=True)\r\n324     city = db.Column(db.String(50))\r\n325     state = db.Column(db.String(2))\r\n326     zip = db.Column(db.String(30))\r\n```\r\napp/api/schema.py\r\n```\r\n  1 from .. import models, ma, db\r\n  2 from marshmallow import fields, post_load, pre_load\r\n  3 from flask import current_app\r\n...\r\n 58 class SubcontractorSchema(ma.ModelSchema):\r\n 59     class Meta:\r\n 60         include_fk = True\r\n 61         model = models.Subcontractor\r\n 62         strict = True\r\n 63\r\n 64     @post_load\r\n 65     def load_subcontractor(self, data):\r\n 66         s = models.Subcontractor()\r\n 67         s.name = data.get('name', None)\r\n 68         s.phone = data.get('phone', None)\r\n 69         s.fax = data.get('fax', None)\r\n 70         s.street = data.get('street', None)\r\n 71         s.city = data.get('city', None)\r\n 72         s.state = data.get('state', None)\r\n 73         s.zip = data.get('zip', None)\r\n 74\r\n 75         db.session.add(s)\r\n 76         db.session.commit()\r\n 77\r\n 78         return s.__dict__\r\n 79\r\n...\r\n```\r\napp/api/resource.py (blueprint)\r\n```\r\n...\r\n237     def post_collection(self, *args, **kwargs):\r\n238         current_app.logger.debug('post_collection')\r\n239\r\n240         data = request.get_json()\r\n241\r\n242         resource_schema = self.resource_schema()\r\n243\r\n244         # pdb.set_trace()\r\n245\r\n246         resource, errors = resource_schema.load(data, transient=False)\r\n247         current_app.logger.debug('resource: {}\\nerrors: {}'.format(resource, errors))\r\n248\r\n249         return 'OK'\r\n...\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/224", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/224/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/224/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/224", "id": 464258300, "node_id": "MDU6SXNzdWU0NjQyNTgzMDA=", "number": 224, "title": "Deserialization requires a session", "user": {"login": "MojsaKirill", "id": 36696824, "node_id": "MDQ6VXNlcjM2Njk2ODI0", "avatar_url": "https://avatars0.githubusercontent.com/u/36696824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MojsaKirill", "html_url": "https://github.com/MojsaKirill", "followers_url": "https://api.github.com/users/MojsaKirill/followers", "following_url": "https://api.github.com/users/MojsaKirill/following{/other_user}", "gists_url": "https://api.github.com/users/MojsaKirill/gists{/gist_id}", "starred_url": "https://api.github.com/users/MojsaKirill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MojsaKirill/subscriptions", "organizations_url": "https://api.github.com/users/MojsaKirill/orgs", "repos_url": "https://api.github.com/users/MojsaKirill/repos", "events_url": "https://api.github.com/users/MojsaKirill/events{/privacy}", "received_events_url": "https://api.github.com/users/MojsaKirill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-04T13:09:11Z", "updated_at": "2019-08-15T14:24:58Z", "closed_at": "2019-08-15T14:24:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Falcon + sqlalchemy + marshmallow_sqlalchemy\r\nI can serializ object. but can not deserializ object\r\n```\r\nfrom dataclasses import dataclass\r\n\r\nfrom marshmallow.fields import Nested\r\nfrom marshmallow_sqlalchemy import ModelSchema\r\nfrom sqlalchemy import Column, Integer, String, ForeignKey\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import relationship\r\n\r\n\r\n@dataclass(order=True)\r\nclass Base(object):\r\n    pass\r\n\r\n\r\nBase = declarative_base(cls=Base)\r\n\r\n\r\nclass Note(Base):\r\n    __tablename__ = 'note'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String)\r\n    user_id = Column(Integer, ForeignKey('user.id'))\r\n\r\n\r\nclass User(Base):\r\n    __tablename__ = 'user'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String)\r\n    fullname = Column(String)\r\n    password = Column(String)\r\n    notes = relationship(Note)\r\n\r\n\r\nclass NoteSchema(ModelSchema):\r\n    class Meta:\r\n        model = Note\r\n\r\n\r\nclass UserSchema(ModelSchema):\r\n    class Meta:\r\n        model = User\r\n\r\n    notes = Nested(NoteSchema(), many=True)\r\n\r\n\r\nuser_schema = UserSchema()\r\n\r\nnote_schema = NoteSchema()\r\n```\r\n\r\nJSON\r\n\r\n```\r\n{\r\n    \"name\": \"Kirill\",\r\n    \"fullname\": \"kirill_mojsa@mail.ru\",\r\n    \"password\": \"password\",\r\n    \"notes\": [\r\n        {\r\n            \"name\": \"My note\"\r\n        },\r\n        {\r\n            \"name\": \"My note2\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n```\r\n        current_session = req.context[\"session\"]\r\n        dump_data = req.media\r\n        user = user_schema.load(dump_data, session=current_session).data\r\n        current_session.add(user)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 135, in handle\r\n    self.handle_request(listener, req, client, addr)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 176, in handle_request\r\n    respiter = self.wsgi(environ, resp.start_response)\r\n  File \"falcon/api.py\", line 274, in falcon.api.API.__call__\r\n  File \"falcon/api.py\", line 269, in falcon.api.API.__call__\r\n  File \"/home/user/PycharmProjects/Falcon/api/user_resource.py\", line 19, in on_post\r\n    user = user_schema.load(dump_data, session=current_session).data\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow_sqlalchemy/schema.py\", line 216, in load\r\n    return super(ModelSchema, self).load(data, *args, **kwargs)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/schema.py\", line 588, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/schema.py\", line 670, in _do_load\r\n    index_errors=self.opts.index_errors,\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 290, in deserialize\r\n    index=(index if index_errors else None)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 62, in call_and_store\r\n    value = getter_func(data)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 283, in <lambda>\r\n    data\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/fields.py\", line 265, in deserialize\r\n    output = self._deserialize(value, attr, data)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/fields.py\", line 468, in _deserialize\r\n    data, errors = self.schema.load(value)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow_sqlalchemy/schema.py\", line 213, in load\r\n    raise ValueError(\"Deserialization requires a session\")\r\nValueError: Deserialization requires a session\r\n[2019-07-04 16:08:21 +0300] [11254] [ERROR] Error handling request /user\r\nTraceback (most recent call last):\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 135, in handle\r\n    self.handle_request(listener, req, client, addr)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/gunicorn/workers/sync.py\", line 176, in handle_request\r\n    respiter = self.wsgi(environ, resp.start_response)\r\n  File \"falcon/api.py\", line 274, in falcon.api.API.__call__\r\n  File \"falcon/api.py\", line 269, in falcon.api.API.__call__\r\n  File \"/home/user/PycharmProjects/Falcon/api/user_resource.py\", line 19, in on_post\r\n    user = user_schema.load(dump_data, session=current_session).data\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow_sqlalchemy/schema.py\", line 216, in load\r\n    return super(ModelSchema, self).load(data, *args, **kwargs)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/schema.py\", line 588, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/schema.py\", line 670, in _do_load\r\n    index_errors=self.opts.index_errors,\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 290, in deserialize\r\n    index=(index if index_errors else None)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 62, in call_and_store\r\n    value = getter_func(data)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/marshalling.py\", line 283, in <lambda>\r\n    data\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/fields.py\", line 265, in deserialize\r\n    output = self._deserialize(value, attr, data)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow/fields.py\", line 468, in _deserialize\r\n    data, errors = self.schema.load(value)\r\n  File \"/home/user/PycharmProjects/Falcon/.venv/lib/python3.7/site-packages/marshmallow_sqlalchemy/schema.py\", line 213, in load\r\n    raise ValueError(\"Deserialization requires a session\")\r\nValueError: Deserialization requires a session\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/223", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/223/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/223/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/223", "id": 463679805, "node_id": "MDU6SXNzdWU0NjM2Nzk4MDU=", "number": 223, "title": "Error `TypeError: unhashable type: 'list'`", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445193, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTM=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-03T10:43:57Z", "updated_at": "2019-09-01T01:42:08Z", "closed_at": "2019-09-01T01:42:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If to try to deserialize model which should have relationship one to many and put the array in this field then there will be an error `TypeError: unhashable type: 'list'` instead of ValidationError\r\nExample\r\n\r\n    class M(Base):\r\n       ....\r\n       store_id = Column(ForeignKey('stores.id'))\r\n       store = relationship(\"Store\", uselist=False)\r\n       ....\r\n\r\n    M().load({\"store\":[1,2,3]})\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/219", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/219/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/219/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/219", "id": 456677605, "node_id": "MDU6SXNzdWU0NTY2Nzc2MDU=", "number": 219, "title": "Is there a way to inherit meta?", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-16T20:14:17Z", "updated_at": "2019-06-17T18:33:45Z", "closed_at": "2019-06-17T18:33:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have models which have the same session. How to make it so that you don't have to write in meta `sqla_session = session`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/213", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/213/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/213/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/213", "id": 444007873, "node_id": "MDU6SXNzdWU0NDQwMDc4NzM=", "number": 213, "title": "Question: CUD Nested Field during load", "user": {"login": "myslak71", "id": 43068450, "node_id": "MDQ6VXNlcjQzMDY4NDUw", "avatar_url": "https://avatars1.githubusercontent.com/u/43068450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myslak71", "html_url": "https://github.com/myslak71", "followers_url": "https://api.github.com/users/myslak71/followers", "following_url": "https://api.github.com/users/myslak71/following{/other_user}", "gists_url": "https://api.github.com/users/myslak71/gists{/gist_id}", "starred_url": "https://api.github.com/users/myslak71/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myslak71/subscriptions", "organizations_url": "https://api.github.com/users/myslak71/orgs", "repos_url": "https://api.github.com/users/myslak71/repos", "events_url": "https://api.github.com/users/myslak71/events{/privacy}", "received_events_url": "https://api.github.com/users/myslak71/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-14T16:20:24Z", "updated_at": "2019-05-21T07:44:02Z", "closed_at": "2019-05-21T07:44:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider following code:\r\n```\r\nclass FooSchema(BaseSchema):\r\n    class Meta(BaseSchema.Meta):\r\n        model = Foo\r\n\r\nclass BarSchema(BaseSchema):\r\n    class Meta(BaseSchema.Meta):\r\n        model = Bar\r\n        foo = Nested(FooSchema)\r\n```\r\nBoth models are related with one-to-one.\r\n\r\nIs there a way to control creation. update and delete of Foo model during Bar load?\r\nHow can I pass only argument for foo Nested field during load?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/210", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/210/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/210/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/210", "id": 441553329, "node_id": "MDU6SXNzdWU0NDE1NTMzMjk=", "number": 210, "title": "Linking records by a different unique field instead of primary keys.", "user": {"login": "sjmh", "id": 12321, "node_id": "MDQ6VXNlcjEyMzIx", "avatar_url": "https://avatars2.githubusercontent.com/u/12321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjmh", "html_url": "https://github.com/sjmh", "followers_url": "https://api.github.com/users/sjmh/followers", "following_url": "https://api.github.com/users/sjmh/following{/other_user}", "gists_url": "https://api.github.com/users/sjmh/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjmh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjmh/subscriptions", "organizations_url": "https://api.github.com/users/sjmh/orgs", "repos_url": "https://api.github.com/users/sjmh/repos", "events_url": "https://api.github.com/users/sjmh/events{/privacy}", "received_events_url": "https://api.github.com/users/sjmh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-08T05:07:51Z", "updated_at": "2020-04-08T00:03:10Z", "closed_at": "2020-04-08T00:03:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "So let's say I have the following models ( apologies, this is a bit of a contrived example )\r\n\r\n```\r\nclass Template(Model):\r\n    __tablename__ = \"templates\"\r\n    __table_args__ = {\"schema\": \"myschema\"}\r\n\r\n  id = Column(Integer, primary_key=True, autoincrement=True)\r\n  name = Column(String, nullable=False)\r\n  docs = relationship(\"Doc\", backref=\"template\")\r\n\r\nclass Doc(Model):\r\n    __tablename__ = \"docs\"\r\n    __table_args__ = {\"schema\": \"myschema\"}\r\n\r\n  id = Column(Integer, primary_key=True, autoincrement=True)\r\n  content = Column(String, nullable=False)\r\n  template_id = Column(Integer, ForeignKey(\"myschema.templates.id\"))\r\n```\r\n\r\nand matching schemas:\r\n\r\n```\r\nclass TemplateSchema(ModelSchema):\r\n  class Meta:\r\n    model = Template\r\n    dump_only = (\"id\",)\r\n    exclude = (\"docs\",)\r\n\r\nclass DocSchema(ModelSchema):\r\n  class Meta:\r\n    model = Doc\r\n    include_fk = True\r\n    dump_only = (\"id\", )\r\n    exclude = ('template\", )\r\n```\r\n\r\nSo I have a few templates already created:\r\n```\r\nt1 = Template(name='foo')\r\nt2 = Template(name='bar')\r\ndb.add(t1)\r\ndb.add(t2)\r\ndb.commit()\r\n```\r\n\r\nNow, normally I can create a new doc with something like:\r\n```\r\nDoc(content='hello world', template_id=1)\r\n```\r\n\r\nHowever, I'd like someway to instead be able to do:\r\n\r\n```\r\nDoc(content='hello world', template_name='foo')\r\n```\r\n\r\nand have it be able to get the id value for me, based off the name 'foo'.  I've been able to get this to work ( sorta ) with something like:\r\n\r\n```class DocSchema(ModelSchema):\r\n    class Meta:\r\n        model = Doc\r\n        dump_only = (\"id\",)\r\n        exclude = (\"template\",)\r\n\r\n    template_name = fields.String()\r\n\r\n    @post_load\r\n    def get_template(self, data):\r\n        template_name = data.pop(\"template_name\")\r\n        try:\r\n            template = Template.query.filter_by(name=template_name).one()\r\n        except NoResultFound:\r\n            raise ValidationError(f\"No template named {template_name}\")\r\n\r\n        data[\"template_id\"] = template.id\r\n        return data\r\n```\r\n\r\nThe idea being here that this is eventually all wrapped in a REST API and POST calls to create new docs wouldn't need the template id in order to create a Doc, just the template_name ( or some other unique column )\r\n\r\nAm I going about this the right way or is there an easier way to get this done?  \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/209", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/209/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/209/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/209", "id": 440589574, "node_id": "MDU6SXNzdWU0NDA1ODk1NzQ=", "number": 209, "title": "Question: using render_module in Meta", "user": {"login": "javiersanp", "id": 1605829, "node_id": "MDQ6VXNlcjE2MDU4Mjk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1605829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javiersanp", "html_url": "https://github.com/javiersanp", "followers_url": "https://api.github.com/users/javiersanp/followers", "following_url": "https://api.github.com/users/javiersanp/following{/other_user}", "gists_url": "https://api.github.com/users/javiersanp/gists{/gist_id}", "starred_url": "https://api.github.com/users/javiersanp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javiersanp/subscriptions", "organizations_url": "https://api.github.com/users/javiersanp/orgs", "repos_url": "https://api.github.com/users/javiersanp/repos", "events_url": "https://api.github.com/users/javiersanp/events{/privacy}", "received_events_url": "https://api.github.com/users/javiersanp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-06T08:18:17Z", "updated_at": "2020-03-16T23:23:59Z", "closed_at": "2019-05-07T13:13:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to use [render_module](https://marshmallow.readthedocs.io/en/3.0/api_reference.html?highlight=render_module) option of marshmallow Schema Meta class to serialize with a module different of json from the standard library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/208", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/208/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/208/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/208", "id": 440572055, "node_id": "MDU6SXNzdWU0NDA1NzIwNTU=", "number": 208, "title": "Imcompatibility with marshmallow-3.0.0rc6", "user": {"login": "jssuzanne", "id": 5787689, "node_id": "MDQ6VXNlcjU3ODc2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5787689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jssuzanne", "html_url": "https://github.com/jssuzanne", "followers_url": "https://api.github.com/users/jssuzanne/followers", "following_url": "https://api.github.com/users/jssuzanne/following{/other_user}", "gists_url": "https://api.github.com/users/jssuzanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/jssuzanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jssuzanne/subscriptions", "organizations_url": "https://api.github.com/users/jssuzanne/orgs", "repos_url": "https://api.github.com/users/jssuzanne/repos", "events_url": "https://api.github.com/users/jssuzanne/events{/privacy}", "received_events_url": "https://api.github.com/users/jssuzanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-06T07:26:43Z", "updated_at": "2019-07-03T23:19:22Z", "closed_at": "2019-05-11T17:37:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the latest version of marshmallow a get the error:\r\n\r\n> ImportError while loading conftest '/home/jssuzanne/anyblok/AnyBlok_Marshmallow/anyblok_marshmallow/tests/conftest.py'.\r\nanyblok_marshmallow/__init__.py:10: in <module>\r\n    from .schema import SchemaWrapper, PostLoadSchema  # noqa\r\nanyblok_marshmallow/schema.py:10: in <module>\r\n    from marshmallow_sqlalchemy.schema import (\r\nvenv/lib/python3.6/site-packages/marshmallow_sqlalchemy/__init__.py:4: in <module>\r\n    from .schema import TableSchemaOpts, ModelSchemaOpts, TableSchema, ModelSchema\r\nvenv/lib/python3.6/site-packages/marshmallow_sqlalchemy/schema.py:3: in <module>\r\n    from marshmallow.compat import with_metaclass, iteritems\r\nE   ModuleNotFoundError: No module named 'marshmallow.compat'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/206", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/206/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/206/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/206", "id": 438539135, "node_id": "MDU6SXNzdWU0Mzg1MzkxMzU=", "number": 206, "title": "\"transient\" setting not shared with nested schemas", "user": {"login": "MattF-NSIDC", "id": 18539827, "node_id": "MDQ6VXNlcjE4NTM5ODI3", "avatar_url": "https://avatars0.githubusercontent.com/u/18539827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattF-NSIDC", "html_url": "https://github.com/MattF-NSIDC", "followers_url": "https://api.github.com/users/MattF-NSIDC/followers", "following_url": "https://api.github.com/users/MattF-NSIDC/following{/other_user}", "gists_url": "https://api.github.com/users/MattF-NSIDC/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattF-NSIDC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattF-NSIDC/subscriptions", "organizations_url": "https://api.github.com/users/MattF-NSIDC/orgs", "repos_url": "https://api.github.com/users/MattF-NSIDC/repos", "events_url": "https://api.github.com/users/MattF-NSIDC/events{/privacy}", "received_events_url": "https://api.github.com/users/MattF-NSIDC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-29T22:49:28Z", "updated_at": "2019-09-06T01:28:06Z", "closed_at": "2019-09-06T01:28:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Exactly like #67 for sharing \"session\" with nested child schemas, but with \"transient\" instead!\r\n\r\nMy fix for both issues in one snippet:\r\n\r\n```\r\nclass BaseModelSchema(ModelSchema):\r\n    OPTIONS_CLASS = BaseOpts\r\n\r\n    @mm.pre_load\r\n    def set_nested_attrs(self, data: Data) -> Data:\r\n        \"\"\"Allow nested schemas to use the parent schema's attrs. This is a\r\n        longstanding bug with marshmallow-sqlalchemy.\r\n\r\n        https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/67\r\n        https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/206\r\n        https://github.com/marshmallow-code/marshmallow/issues/658#issuecomment-328369199\r\n        \"\"\"\r\n        nested_fields = {k: v for k, v in self.fields.items() if type(v) == mm.fields.Nested}\r\n        for field in nested_fields.values():\r\n            field.schema.session = self.session\r\n            field.schema.transient = self.transient\r\n\r\n        return data\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/205", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/205/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/205/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/205", "id": 438511758, "node_id": "MDU6SXNzdWU0Mzg1MTE3NTg=", "number": 205, "title": "Typo in \"Basic Schema 2\" recipe?", "user": {"login": "MattF-NSIDC", "id": 18539827, "node_id": "MDQ6VXNlcjE4NTM5ODI3", "avatar_url": "https://avatars0.githubusercontent.com/u/18539827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattF-NSIDC", "html_url": "https://github.com/MattF-NSIDC", "followers_url": "https://api.github.com/users/MattF-NSIDC/followers", "following_url": "https://api.github.com/users/MattF-NSIDC/following{/other_user}", "gists_url": "https://api.github.com/users/MattF-NSIDC/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattF-NSIDC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattF-NSIDC/subscriptions", "organizations_url": "https://api.github.com/users/MattF-NSIDC/orgs", "repos_url": "https://api.github.com/users/MattF-NSIDC/repos", "events_url": "https://api.github.com/users/MattF-NSIDC/events{/privacy}", "received_events_url": "https://api.github.com/users/MattF-NSIDC/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-29T21:16:07Z", "updated_at": "2019-04-30T02:13:33Z", "closed_at": "2019-04-30T02:13:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nclass BaseOpts(ModelSchemaOpts):\r\n    def __init__(self, meta):\r\n        if not hasattr(meta, \"sql_session\"):\r\n            meta.sqla_session = Session\r\n        super(BaseOpts, self).__init__(meta)\r\n```\r\n\r\nShould the 3rd line be `if not hasattr(meta, \"sqla_session\"):`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/204", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/204/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/204/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/204", "id": 435406909, "node_id": "MDU6SXNzdWU0MzU0MDY5MDk=", "number": 204, "title": "A few type of columns were neglected when building Schema from SQLAlchemy model.", "user": {"login": "chari8", "id": 16845784, "node_id": "MDQ6VXNlcjE2ODQ1Nzg0", "avatar_url": "https://avatars3.githubusercontent.com/u/16845784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chari8", "html_url": "https://github.com/chari8", "followers_url": "https://api.github.com/users/chari8/followers", "following_url": "https://api.github.com/users/chari8/following{/other_user}", "gists_url": "https://api.github.com/users/chari8/gists{/gist_id}", "starred_url": "https://api.github.com/users/chari8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chari8/subscriptions", "organizations_url": "https://api.github.com/users/chari8/orgs", "repos_url": "https://api.github.com/users/chari8/repos", "events_url": "https://api.github.com/users/chari8/events{/privacy}", "received_events_url": "https://api.github.com/users/chari8/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-20T08:43:48Z", "updated_at": "2019-12-01T18:53:18Z", "closed_at": "2019-12-01T18:53:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, let me share my problem.\r\n\r\nWhen I try to build schema from SQLAlchemy model (or Table), a few columns with specific property were neglected.\r\n\r\nThe columns didn't reflect in schema were one of\r\n* DateTime\r\n* INTEGER (mysql dialect)\r\n\r\nI would like to know if this is a bug or not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/200", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/200/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/200/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/200", "id": 430154152, "node_id": "MDU6SXNzdWU0MzAxNTQxNTI=", "number": 200, "title": "Fields nested create new records in database", "user": {"login": "gomes-fdr", "id": 6998451, "node_id": "MDQ6VXNlcjY5OTg0NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6998451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gomes-fdr", "html_url": "https://github.com/gomes-fdr", "followers_url": "https://api.github.com/users/gomes-fdr/followers", "following_url": "https://api.github.com/users/gomes-fdr/following{/other_user}", "gists_url": "https://api.github.com/users/gomes-fdr/gists{/gist_id}", "starred_url": "https://api.github.com/users/gomes-fdr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gomes-fdr/subscriptions", "organizations_url": "https://api.github.com/users/gomes-fdr/orgs", "repos_url": "https://api.github.com/users/gomes-fdr/repos", "events_url": "https://api.github.com/users/gomes-fdr/events{/privacy}", "received_events_url": "https://api.github.com/users/gomes-fdr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-07T14:48:59Z", "updated_at": "2019-04-07T17:40:30Z", "closed_at": "2019-04-07T17:40:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello friends,\r\nI am using fields nested with data coming from a json in a rest API.\r\n\r\nWhy does whenever I do a POST of json, where do I use 'fields.Nested' a new record is created in the table of the nested object?\r\n\r\nHere's an example of how my code is:\r\n\r\n```\r\nclass PerfilSchema(ma.ModelSchema):\r\n    id = fields.Integer(dump_only=True)\r\n    descricao = fields.Str()\r\n    permissao = fields.Int()\r\n    \r\n    class Meta:\r\n        model = Perfil\r\n        fields = ('id', 'descricao', 'permissao')\r\n\r\nclass SituacaoSchema(ma.ModelSchema):\r\n    id = fields.Integer(dump_only=True)\r\n    descricao = fields.Str()\r\n    \r\n    class Meta:\r\n        model = Situacao\r\n        fields = ('id', 'descricao')\r\n\r\n\r\nclass ProfissionalSchema(ma.ModelSchema):\r\n    perfil = fields.Nested(PerfilSchema)\r\n    situacao = fields.Nested(SituacaoSchema)\r\n\r\n    class Meta:\r\n        model = Profissional\r\n```\r\nEvery time I insert a 'Profissional' via API, a new record is inserted in the 'Perfil' table and in the 'Situacao' table too.\r\n\r\nDo I need a separate search for these situations?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/198", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/198/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/198/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/198", "id": 427733505, "node_id": "MDU6SXNzdWU0Mjc3MzM1MDU=", "number": 198, "title": "field_for should set `attribute` based on passed field name", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-01T14:20:50Z", "updated_at": "2020-02-09T21:19:01Z", "closed_at": "2020-02-09T21:19:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/196", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/196/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/196/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/196", "id": 427299361, "node_id": "MDU6SXNzdWU0MjcyOTkzNjE=", "number": 196, "title": "add section to docs about using with Flask", "user": {"login": "twosigmajab", "id": 40300730, "node_id": "MDQ6VXNlcjQwMzAwNzMw", "avatar_url": "https://avatars0.githubusercontent.com/u/40300730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twosigmajab", "html_url": "https://github.com/twosigmajab", "followers_url": "https://api.github.com/users/twosigmajab/followers", "following_url": "https://api.github.com/users/twosigmajab/following{/other_user}", "gists_url": "https://api.github.com/users/twosigmajab/gists{/gist_id}", "starred_url": "https://api.github.com/users/twosigmajab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twosigmajab/subscriptions", "organizations_url": "https://api.github.com/users/twosigmajab/orgs", "repos_url": "https://api.github.com/users/twosigmajab/repos", "events_url": "https://api.github.com/users/twosigmajab/events{/privacy}", "received_events_url": "https://api.github.com/users/twosigmajab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-30T16:19:54Z", "updated_at": "2019-04-20T14:47:52Z", "closed_at": "2019-04-03T02:13:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Was curious if there was a recommendation for folks already using (1) Flask-SQLAlchemy, and (2) Marshmallow (e.g. via some Flask extension that uses Marshmallow for Swagger integration), who then wanted a way to de-duplicate between their Marshmallow schemas and SQLAlchemy models and found their way to this project. Searching the docs for Flask doesn't currently turn up [any results](https://marshmallow-sqlalchemy.readthedocs.io/en/latest/search.html?q=flask&check_keywords=yes&area=default). Since it's not immediately clear how to best integrate Flask, SQLAlchemy, and Marshmallow -- (there exist Flask-Marshmallow, Flask-SQLAlchemy, and Marshmallow-SQLAlchemy, but no Flask-Marshmallow-SQLAlchemy) -- would it be worth adding at least a sentence or two for beginners with some guidance here?\r\n\r\nThanks for your consideration and for maintaining so many great projects!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/193", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/193/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/193/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/193", "id": 422879195, "node_id": "MDU6SXNzdWU0MjI4NzkxOTU=", "number": 193, "title": "Add option to ModelSchema to deserialize to a dict", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445195, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTU=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-19T18:08:39Z", "updated_at": "2020-02-09T21:17:57Z", "closed_at": "2020-02-09T21:14:58Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, `ModelSchema` deserializes to a model object, and there's no way to opt out of this behavior. Some use cases require deserialization to a dictionary, e.g. update logic outside the model layer.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/191", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/191/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/191/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/191", "id": 421837548, "node_id": "MDU6SXNzdWU0MjE4Mzc1NDg=", "number": 191, "title": "Make sure all models declared before configure_mappers() runs", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1163000770, "node_id": "MDU6TGFiZWwxMTYzMDAwNzcw", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/documentation", "name": "documentation", "color": "fbca04", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-16T18:21:47Z", "updated_at": "2019-04-03T02:14:41Z", "closed_at": "2019-04-03T02:14:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My app is still relatively small, and I had models and schemas in the same file per entity, e.g.\r\n\r\n```\r\n# app/models/user.py\r\n\r\nclass User(Model):\r\n    # some model stuff\r\n\r\nclass UserSchema(ModelSchema):\r\n    class Meta:\r\n        model = User\r\n        # some schema stuff\r\n```\r\n\r\nThis caused problems with relationships, as `sqlalchemy.orm.configure_mappers()` would run too early (before all `Models` were declared). Even string names didn't work.\r\n\r\nMy solution was two-fold (thanks to ms7821 on IRC):\r\n\r\n1. Move the `Schema` classes into different files under `app/schemas/*.py`.\r\n2. Make sure all `Models` were instantiated by adding `from .somemodel import Somemodel` lines into `app/models/__init__.py`.\r\n\r\nThe need to make sure all models are declared is implicit in the docs:\r\n\r\n> Declare your models\r\n> ...\r\n> Generate marshmallow schemas\r\n\r\nbut it caught me out for a while. Would a doc PR clarifying this be welcome?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/190", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/190/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/190/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/190", "id": 421082543, "node_id": "MDU6SXNzdWU0MjEwODI1NDM=", "number": 190, "title": "Synonyms on Models", "user": {"login": "TrilceAC", "id": 11046271, "node_id": "MDQ6VXNlcjExMDQ2Mjcx", "avatar_url": "https://avatars1.githubusercontent.com/u/11046271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TrilceAC", "html_url": "https://github.com/TrilceAC", "followers_url": "https://api.github.com/users/TrilceAC/followers", "following_url": "https://api.github.com/users/TrilceAC/following{/other_user}", "gists_url": "https://api.github.com/users/TrilceAC/gists{/gist_id}", "starred_url": "https://api.github.com/users/TrilceAC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TrilceAC/subscriptions", "organizations_url": "https://api.github.com/users/TrilceAC/orgs", "repos_url": "https://api.github.com/users/TrilceAC/repos", "events_url": "https://api.github.com/users/TrilceAC/events{/privacy}", "received_events_url": "https://api.github.com/users/TrilceAC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445193, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTM=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-14T15:17:21Z", "updated_at": "2020-02-10T04:11:07Z", "closed_at": "2020-02-10T03:40:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model which makes use of a [synonym](https://docs.sqlalchemy.org/en/latest/orm/mapped_attributes.html#synonyms) for convenience. Flask.Marshmallow raises an `AttributeError` exception when a ModelSchema that uses this class is defined.\r\n\r\n```\r\nclass Department(Model):\r\n    \"\"\"Represents a department.\"\"\"\r\n\r\n    MAXLEN_NAME = 255\r\n\r\n    name = Column(\r\n        String(MAXLEN_NAME),\r\n        nullable=False,\r\n        unique=True,\r\n        index=True\r\n    )\r\n    department = synonym('name')\r\n\r\n\r\nclass DepartmentSchema(ma.ModelSchema):\r\n    \"\"\"Schema for Department.\"\"\"\r\n\r\n    class Meta:\r\n        \"\"\"Meta for Marshmallow-SQLAlchemy.\"\"\"\r\n\r\n        model = Department\r\n\r\n```\r\nThis causes the following exception:\r\n\r\n```\r\n...\r\n  File \"devel/gesific/webapp/schemas.py\", line 253, in <module>\r\n    class DepartmentSchema(ma.ModelSchema):\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/marshmallow/schema.py\", line 118, in __new__\r\n    dict_cls=dict_cls\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/marshmallow_sqlalchemy/schema.py\", line 60, in get_declared_fields\r\n    declared_fields = mcs.get_fields(converter, opts, base_fields, dict_cls)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/marshmallow_sqlalchemy/schema.py\", line 94, in get_fields\r\n    dict_cls=dict_cls,\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/marshmallow_sqlalchemy/convert.py\", line 102, in fields_for_model\r\n    field = base_fields.get(prop.key) or self.property2field(prop)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/marshmallow_sqlalchemy/convert.py\", line 124, in property2field\r\n    field_class = field_class or self._get_field_class_for_property(prop)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/marshmallow_sqlalchemy/convert.py\", line 185, in _get_field_class_for_property\r\n    column = prop.columns[0]\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py\", line 853, in __getattr__\r\n    return self._fallback_getattr(key)\r\n  File \".virtualenvs/gesific/lib/python3.5/site-packages/sqlalchemy/util/langhelpers.py\", line 831, in _fallback_getattr\r\n    raise AttributeError(key)\r\nAttributeError: columns\r\n\r\n```\r\nForcing the exclusion of the synonym solves the issue, but I think that it would be better if somehow Flask-Marshmallow were able to handle this automatically, either by duplicating the field or by ignoring the synonyms.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/185", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/185/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/185/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/185", "id": 419242173, "node_id": "MDU6SXNzdWU0MTkyNDIxNzM=", "number": 185, "title": "Fix compatibility with SQLAlchemy 1.3", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445193, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTM=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-10T22:37:04Z", "updated_at": "2019-03-11T04:00:53Z", "closed_at": "2019-03-11T04:00:53Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/183", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/183/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/183/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/183", "id": 418863998, "node_id": "MDU6SXNzdWU0MTg4NjM5OTg=", "number": 183, "title": "Is postgresql.CIDR can be added to the convert mapping ?", "user": {"login": "chaufmaurice", "id": 38210221, "node_id": "MDQ6VXNlcjM4MjEwMjIx", "avatar_url": "https://avatars1.githubusercontent.com/u/38210221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chaufmaurice", "html_url": "https://github.com/chaufmaurice", "followers_url": "https://api.github.com/users/chaufmaurice/followers", "following_url": "https://api.github.com/users/chaufmaurice/following{/other_user}", "gists_url": "https://api.github.com/users/chaufmaurice/gists{/gist_id}", "starred_url": "https://api.github.com/users/chaufmaurice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chaufmaurice/subscriptions", "organizations_url": "https://api.github.com/users/chaufmaurice/orgs", "repos_url": "https://api.github.com/users/chaufmaurice/repos", "events_url": "https://api.github.com/users/chaufmaurice/events{/privacy}", "received_events_url": "https://api.github.com/users/chaufmaurice/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-08T16:39:37Z", "updated_at": "2019-12-01T18:53:44Z", "closed_at": "2019-12-01T18:53:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nMy\r\n```\r\nsubnet = field_for(Layer3, 'subnet', example='10.123.50.0/30')\r\n```\r\ngenerate a\r\n```\r\nmarshmallow_sqlalchemy.exceptions.ModelConversionError: Could not find field column of type <class 'sqlalchemy.dialects.postgresql.base.CIDR'>.\r\n```\r\n\r\nThe database column concerned:\r\n```\r\nsubnet CIDR NOT NULL,\r\n```\r\n\r\nIt looks like CIDR is not include in the convert mapping:\r\nhttps://github.com/marshmallow-code/marshmallow-sqlalchemy/blob/637077fad43830f035c84b7e9969cb4c84f4267f/marshmallow_sqlalchemy/convert.py#L42\r\n\r\nIs there any reason ?\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/182", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/182/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/182/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/182", "id": 418862670, "node_id": "MDU6SXNzdWU0MTg4NjI2NzA=", "number": 182, "title": "include_fk = True awkward when foreign key is required (nullable=False)", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-03-08T16:36:23Z", "updated_at": "2019-09-05T21:10:38Z", "closed_at": "2019-09-05T21:10:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This follows on from my question in #181. I guess it might be user error / misunderstanding, but I'd like to share here anyway to get the community's feedback. Take the following example code, similar to that shown in #181 :\r\n\r\n```python\r\nclass Delivery(BaseModel):    \r\n    status = db.Column(db.Enum(\"new\", \"dispatched\", nullable=False))\r\n    # ... (some other Columns)\r\n\r\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\r\n\r\nclass DeliverySchema(ma.ModelSchema):\r\n    class Meta:\r\n        include_fk = True  # FOO\r\n        model = Delivery\r\n        strict = True\r\n\r\n    #  user_id = fields.Int(missing=None)  # BAR\r\n\r\n    # UserSchema has deliveries as Nested\r\n    user = ma.HyperlinkRelated(\"UsersView:get\")\r\n\r\ndelivery_schema = DeliverySchema()\r\ndeliveries_schema = DeliverySchema(many=True)\r\n\r\nclass DeliveriesView(FlaskView):\r\n\r\n    @use_kwargs(deliveries_schema.fields)\r\n    def index(self, **kwargs):\r\n        deliveries = Delivery.query.filter_by(**kwargs)\r\n        return deliveries_schema.jsonify(deliveries)\r\n\r\n    @use_kwargs(delivery_schema.fields)\r\n    def post(self, **kwargs):\r\n        delivery = Delivery(user_id=kwargs[\"user_id\"])\r\n        db.session.add(delivery)\r\n        db.session.commit()\r\n        return delivery_schema.jsonify(delivery), 201\r\n```\r\n\r\n`user_id` is defined as `nullable=False`, because technically I should never be able to create a `Delivery` without an associated `User`, which is achieved in `post`. So adding `include_fk=True` (marked above as `FOO`) seemed like the sensible thing to do.\r\n\r\nUnfortunately, this broke my call to `index`, which started returning 422 because `user_id` was required. I tried to work round this by adding the line marked above as `BAR`, `user_id = fields.Int(missing=None)`. This passed the 422 validation, but breaks calls to `index` as `user_id` of `None` would be added to the SQL query by webargs, when not explicitly specified as a parameter.\r\n\r\nI can work around this by setting `nullable=True` for `user_id`. This implicitly sets `required=False` and hence allows the 422 validation to pass when calling `index`. Yet, it doesn't seem quite right from a business perspective. Is this a feature, in which case how should I express my schema, or is it a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/181", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/181/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/181/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/181", "id": 416406512, "node_id": "MDU6SXNzdWU0MTY0MDY1MTI=", "number": 181, "title": "Is include_fk=True an antipattern? If not, why isn't it True by default?", "user": {"login": "antgel", "id": 295571, "node_id": "MDQ6VXNlcjI5NTU3MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/295571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antgel", "html_url": "https://github.com/antgel", "followers_url": "https://api.github.com/users/antgel/followers", "following_url": "https://api.github.com/users/antgel/following{/other_user}", "gists_url": "https://api.github.com/users/antgel/gists{/gist_id}", "starred_url": "https://api.github.com/users/antgel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antgel/subscriptions", "organizations_url": "https://api.github.com/users/antgel/orgs", "repos_url": "https://api.github.com/users/antgel/repos", "events_url": "https://api.github.com/users/antgel/events{/privacy}", "received_events_url": "https://api.github.com/users/antgel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-02T15:13:24Z", "updated_at": "2019-03-09T17:15:06Z", "closed_at": "2019-03-09T17:15:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a one to many relationship, where one `User` can have many `Deliveries`. When I create a `Delivery`, I want to `POST /delivery/` with the foreign key user ID in the data `{ user_id: 456 }`.\r\n\r\nNow some code, see comments `FOO` and `BAR`:\r\n```\r\nclass Delivery(BaseModel):    \r\n    status = db.Column(db.Enum(\"new\", \"dispatched\", nullable=False))\r\n    # ... (some other Columns)\r\n\r\n    user_id = db.Column(db.Integer, db.ForeignKey(\"user.id\"), nullable=False)\r\n\r\nclass DeliverySchema(ma.ModelSchema):\r\n    class Meta:\r\n        include_fk = True  # FOO\r\n        model = Delivery\r\n        strict = True\r\n\r\n    # UserSchema has deliveries as Nested\r\n    user = ma.HyperlinkRelated(\"UsersView:get\")\r\n\r\ndelivery_schema = DeliverySchema()\r\n\r\nclass DeliveriesView(FlaskView):\r\n    @use_kwargs(delivery_schema.fields)\r\n    def post(self, **kwargs):\r\n        # BAR\r\n        print(', '.join(['{}={!r}'.format(k, v) for k, v in kwargs.items()]))\r\n        delivery = Delivery(user_id=kwargs[\"user_id\"])\r\n        db.session.add(delivery)\r\n        db.session.commit()\r\n        return delivery_schema.jsonify(delivery), 201\r\n\r\n```\r\n\r\nIf I don't `include_fk = True`, `kwargs` doesn't contain `user_id`. But how am I supposed to update the field in my database if it doesn't get passed in?\r\n\r\nThis seems like a common use case, and I assume `include_fk = True` would be the default if it was meant to be used a lot. I feel like I'm missing something, I'm just not sure what.\r\n\r\nAlternatively `POST /delivery/456/` works, but as I understand it, it's less preferable to have the new data as part of the URL, and I'm not inclined to work around something in my code that smells off.\r\n\r\nGrateful for any help, and happy to provide more information as needed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/177", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/177/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/177/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/177", "id": 411375317, "node_id": "MDU6SXNzdWU0MTEzNzUzMTc=", "number": 177, "title": "Propagate transient to Nested fields", "user": {"login": "leonidumanskiy", "id": 7004323, "node_id": "MDQ6VXNlcjcwMDQzMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/7004323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonidumanskiy", "html_url": "https://github.com/leonidumanskiy", "followers_url": "https://api.github.com/users/leonidumanskiy/followers", "following_url": "https://api.github.com/users/leonidumanskiy/following{/other_user}", "gists_url": "https://api.github.com/users/leonidumanskiy/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonidumanskiy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonidumanskiy/subscriptions", "organizations_url": "https://api.github.com/users/leonidumanskiy/orgs", "repos_url": "https://api.github.com/users/leonidumanskiy/repos", "events_url": "https://api.github.com/users/leonidumanskiy/events{/privacy}", "received_events_url": "https://api.github.com/users/leonidumanskiy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-18T09:21:37Z", "updated_at": "2019-09-06T01:28:06Z", "closed_at": "2019-09-06T01:28:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI saw that #160 was merged and I am really excited. Unfortunately, it seems that transient does not propagate to Nested fields.\r\n\r\nI saw that support for Related was added however Related does not work for me since Related only serializes provided keys and does not use schemas like Nested does.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/184", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/184/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/184/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/184", "id": 419128310, "node_id": "MDU6SXNzdWU0MTkxMjgzMTA=", "number": 184, "title": "Ordered true not working in nested ", "user": {"login": "faravinicius", "id": 19297708, "node_id": "MDQ6VXNlcjE5Mjk3NzA4", "avatar_url": "https://avatars2.githubusercontent.com/u/19297708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faravinicius", "html_url": "https://github.com/faravinicius", "followers_url": "https://api.github.com/users/faravinicius/followers", "following_url": "https://api.github.com/users/faravinicius/following{/other_user}", "gists_url": "https://api.github.com/users/faravinicius/gists{/gist_id}", "starred_url": "https://api.github.com/users/faravinicius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faravinicius/subscriptions", "organizations_url": "https://api.github.com/users/faravinicius/orgs", "repos_url": "https://api.github.com/users/faravinicius/repos", "events_url": "https://api.github.com/users/faravinicius/events{/privacy}", "received_events_url": "https://api.github.com/users/faravinicius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-23T14:22:07Z", "updated_at": "2019-03-10T00:17:03Z", "closed_at": "2019-03-10T00:15:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm doing a table relationship, but the json return is cluttered as shown below.\r\nI would like the address to be at the bottom of json as shown below.\r\n\r\n**Model Hospital**\r\n```\r\nclass Hospital(db.Model):\r\n    __tablename__ = 'hospital'\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    admin_id = db.Column(db.Integer)\r\n    name = db.Column(db.String(190))\r\n    social_name = db.Column(db.String(190))\r\n    cnpj = db.Column(db.String(190))\r\n    image_url = db.Column(db.String(190))\r\n    description = db.Column(db.String(255))\r\n    status = db.Column(db.Integer, default=1)\r\n    created_at = db.Column(db.DateTime, default=db.func.now())\r\n    updated_at = db.Column(db.DateTime, default=db.func.now(), onupdate=db.func.utc_timestamp())\r\n    address = db.relationship(\"HospitalAddress\", uselist=False)\r\n\r\n    def __init__(self, name, description):\r\n        self.name = name\r\n        self.description = description\r\n```\r\n\r\n**Model HospitalAddress**\r\n```\r\nclass HospitalAddress(db.Model):\r\n    __tablename__ = 'hospital_address'\r\n\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    code_post = db.Column(db.String(190))\r\n    street = db.Column(db.String(190))\r\n    number = db.Column(db.String(190))\r\n    district = db.Column(db.String(190))\r\n    complement = db.Column(db.String(190))\r\n    city = db.Column(db.String(190))\r\n    state = db.Column(db.String(190))\r\n    country = db.Column(db.String(190))\r\n    created_at = db.Column(db.DateTime, default=db.func.now())\r\n    updated_at = db.Column(db.DateTime, default=db.func.now(), onupdate=db.func.utc_timestamp())\r\n    hospital_id = db.Column(db.Integer, db.ForeignKey('hospital.id'))\r\n\r\n    def __init__(self, code_post, street, number, district, complement, city, state, country):\r\n        self.code_post = code_post\r\n        self.street = street\r\n        self.number = number\r\n        self.district = district\r\n        self.complement = complement\r\n        self.city = city\r\n        self.state = state\r\n        self.country = country\r\n```\r\n\r\n**Schemas**\r\n```\r\nclass HospitalAddressSchema(ma.ModelSchema):\r\n    class Meta:\r\n        model = HospitalAddress\r\n        ordered = True\r\n\r\n\r\nhospital_address_schema = HospitalAddressSchema(strict=True)\r\n\r\n\r\nclass HospitalSchema(ma.ModelSchema):\r\n    class Meta:\r\n        model = Hospital\r\n        ordered = True\r\n\r\n    address = fields.Nested(hospital_address_schema, many=False)\r\n\r\n\r\nhospital_schema = HospitalSchema(strict=True)\r\nhospitals_schema = HospitalSchema(strict=True, many=True)\r\n```\r\n\r\n**Viewer**\r\n```\r\n@hospital_bp.route(\"/<id>\")\r\ndef get_hospital(id):\r\n    hospital = Hospital.query.filter_by(id=id).first()\r\n    results = hospital_schema.dump(hospital).data\r\n    return jsonify(results)\r\n```\r\n\r\n**Json**\r\n```\r\n{\r\n        \"address\": {\r\n            \"id\": 1,\r\n            \"code_post\": \"74430390\",\r\n            \"street\": \"Rua Paulo VI\",\r\n            \"number\": \"350\",\r\n            \"district\": \"Rodovi\u00e1rio\",\r\n            \"complement\": \"Pr\u00f3ximo Pio XII\",\r\n            \"city\": \"Goi\u00e2nia\",\r\n            \"state\": \"Goi\u00e1s\",\r\n            \"country\": \"Brasli\",\r\n            \"created_at\": \"2019-01-22T15:16:50+00:00\",\r\n            \"updated_at\": \"2019-01-22T15:16:50+00:00\"\r\n        },\r\n        \"id\": 1,\r\n        \"admin_id\": 1,\r\n        \"name\": \"Hospital de Urg\u00eancias\",\r\n        \"social_name\": \"Hopsital de Urg\u00eancias LTDA\",\r\n        \"cnpj\": \"04542255000137\",\r\n        \"image_url\": \"https://dimob.med.br/gestor/inc/img/logo-dimob.png\",\r\n        \"description\": \"Um dos melhors hospitais do brasil\",\r\n        \"status\": 1,\r\n        \"created_at\": \"2019-01-22T15:16:50+00:00\",\r\n        \"updated_at\": \"2019-01-22T15:16:50+00:00\"\r\n    }\r\n```\r\n\r\n**See now how I want it to appear**\r\n```\r\n{\r\n        \"id\": 1,\r\n        \"admin_id\": 1,\r\n        \"name\": \"Hospital de Urg\u00eancias\",\r\n        \"social_name\": \"Hopsital de Urg\u00eancias LTDA\",\r\n        \"cnpj\": \"04542255000137\",\r\n        \"image_url\": \"https://dimob.med.br/gestor/inc/img/logo-dimob.png\",\r\n        \"description\": \"Um dos melhors hospitais do brasil\",\r\n        \"status\": 1,\r\n        \"created_at\": \"2019-01-22T15:16:50+00:00\",\r\n        \"updated_at\": \"2019-01-22T15:16:50+00:00\",\r\n        \"address\": {\r\n            \"id\": 1,\r\n            \"code_post\": \"74430390\",\r\n            \"street\": \"Rua Paulo VI\",\r\n            \"number\": \"350\",\r\n            \"district\": \"Rodovi\u00e1rio\",\r\n            \"complement\": \"Pr\u00f3ximo Pio XII\",\r\n            \"city\": \"Goi\u00e2nia\",\r\n            \"state\": \"Goi\u00e1s\",\r\n            \"country\": \"Brasli\",\r\n            \"created_at\": \"2019-01-22T15:16:50+00:00\",\r\n            \"updated_at\": \"2019-01-22T15:16:50+00:00\"\r\n        }\r\n}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/159", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/159/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/159/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/159", "id": 384033533, "node_id": "MDU6SXNzdWUzODQwMzM1MzM=", "number": 159, "title": "SQLAlchemy Sessions Not Passed to Nested Fields", "user": {"login": "ducharmemp", "id": 4974673, "node_id": "MDQ6VXNlcjQ5NzQ2NzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/4974673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ducharmemp", "html_url": "https://github.com/ducharmemp", "followers_url": "https://api.github.com/users/ducharmemp/followers", "following_url": "https://api.github.com/users/ducharmemp/following{/other_user}", "gists_url": "https://api.github.com/users/ducharmemp/gists{/gist_id}", "starred_url": "https://api.github.com/users/ducharmemp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ducharmemp/subscriptions", "organizations_url": "https://api.github.com/users/ducharmemp/orgs", "repos_url": "https://api.github.com/users/ducharmemp/repos", "events_url": "https://api.github.com/users/ducharmemp/events{/privacy}", "received_events_url": "https://api.github.com/users/ducharmemp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-25T00:06:43Z", "updated_at": "2019-08-15T14:24:43Z", "closed_at": "2019-08-15T14:24:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://marshmallow-sqlalchemy.readthedocs.io/en/latest/recipes.html#smart-nested-field\r\n\r\nUsing this recipe as a base, I was writing a function to assist with serialization/de-serialization that looks somewhat like the below snippet:\r\n\r\n```python\r\nclass MySchema(ModelSchema):\r\n    children = SmartNested(ChildModel)\r\n    class Meta:\r\n        model = Model\r\n\r\n... \r\n\r\nschema_obj = MySchema(session=session)\r\nschema_obj.dump(data)\r\n```\r\n\r\nFor the above snippet, data is an object with a children list that is eagerly loaded. Additionally, I don't have a global/thread local SQLAlchemy session object available as I'm using raw SQLAlchemy rather than flask-sqlalchemy because I'm a masochist who likes to reinvent the wheel. The above code (rightfully) throws an exception of \"ValueError: Deserialization requires a session\", as the SmartNested field's schema doesn't appear to have access to the parent schema object. I went digging through the code and I'm sure this is a non-trivial issue to address, but I admittedly have only been looking at this code base for a day.\r\n\r\nIs there a workaround for this or do I have to just bite the bullet and set up a thread local scoped session?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/158", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/158/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/158/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/158", "id": 381382468, "node_id": "MDU6SXNzdWUzODEzODI0Njg=", "number": 158, "title": "Meta.extra_kwargs to allow adding additional kwargs to fields", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-15T23:25:32Z", "updated_at": "2020-02-09T23:49:46Z", "closed_at": "2020-02-09T23:49:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "repost from: https://github.com/marshmallow-code/marshmallow-sqlalchemy/pull/133#issuecomment-439099123\r\n\r\nAdd what DRF does and allow loading extra kwargs for the schema from the schema's meta: https://www.django-rest-framework.org/api-guide/serializers/#additional-keyword-arguments\r\n\r\n/CC @jeanphix ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/156", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/156/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/156/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/156", "id": 378002869, "node_id": "MDU6SXNzdWUzNzgwMDI4Njk=", "number": 156, "title": "AttributeError: type object '<Schema>' has no attribute 'TYPE_MAPPING", "user": {"login": "lordlabakdas", "id": 1252659, "node_id": "MDQ6VXNlcjEyNTI2NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1252659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lordlabakdas", "html_url": "https://github.com/lordlabakdas", "followers_url": "https://api.github.com/users/lordlabakdas/followers", "following_url": "https://api.github.com/users/lordlabakdas/following{/other_user}", "gists_url": "https://api.github.com/users/lordlabakdas/gists{/gist_id}", "starred_url": "https://api.github.com/users/lordlabakdas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lordlabakdas/subscriptions", "organizations_url": "https://api.github.com/users/lordlabakdas/orgs", "repos_url": "https://api.github.com/users/lordlabakdas/repos", "events_url": "https://api.github.com/users/lordlabakdas/events{/privacy}", "received_events_url": "https://api.github.com/users/lordlabakdas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-06T19:39:00Z", "updated_at": "2018-11-07T00:44:34Z", "closed_at": "2018-11-07T00:44:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using `marshmallow-sqlalchemy==0.15.0` when i am running into the below problem:\r\n\r\n`AttributeError: type object '<Schema>' has no attribute 'TYPE_MAPPING'`\r\n\r\nThe marshmallow deserialization class I have is given below:\r\n\r\n```\r\nfrom marshmallow_sqlalchemy import ModelSchema\r\nfrom data_models.entity.user import User\r\nclass UserSchema(ModelSchema):\r\n    class Meta:\r\n        model = User\r\nuser_schema = UserSchema()\r\n```\r\n\r\nMy user.py model is given below:\r\n\r\n```\r\nfrom sqlalchemy import Column, Integer, String, ForeignKey\r\nfrom data_models.db import Base\r\nclass User(Base):\r\n    __tablename__ = \"user\"\r\n    name = Column(String)\r\n    email = Column(String)\r\n\r\n    def get_name(self):\r\n        return self.name\r\n```\r\n\r\nIs there something I am missing in the above code?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/154", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/154/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/154/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/154", "id": 374930800, "node_id": "MDU6SXNzdWUzNzQ5MzA4MDA=", "number": 154, "title": "Question: best way on how to organize CRUD schema objects with marshmallow-sqlalchemy", "user": {"login": "nikoladsp", "id": 7402902, "node_id": "MDQ6VXNlcjc0MDI5MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/7402902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikoladsp", "html_url": "https://github.com/nikoladsp", "followers_url": "https://api.github.com/users/nikoladsp/followers", "following_url": "https://api.github.com/users/nikoladsp/following{/other_user}", "gists_url": "https://api.github.com/users/nikoladsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikoladsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikoladsp/subscriptions", "organizations_url": "https://api.github.com/users/nikoladsp/orgs", "repos_url": "https://api.github.com/users/nikoladsp/repos", "events_url": "https://api.github.com/users/nikoladsp/events{/privacy}", "received_events_url": "https://api.github.com/users/nikoladsp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-29T09:43:07Z", "updated_at": "2020-02-10T08:31:29Z", "closed_at": "2020-02-10T04:08:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\none question on what is the best practice to organize marshmallow schema objects for CRUD methods. Say, I have a simple class in SqlAlchemy:\r\n```python\r\nclass Order(Base):\r\n    __tablename__ = 'Orders'\r\n    \r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(String)\r\n    quantity = Column(Integer)\r\n    placed_at = Column(DateTime)\r\n```\r\nNow, when creating new Order, I need schema that has **name** field only (and eventually **placed_at** automatically set to ```datetime.utcnow()```). When updating, my endpoint for example should allow to change only **name** and **quantity** fields. On reading (and delete) however I want all fields: **id**, **name**, **quantity** and **placed_at** to be serialized (dumped).\r\n\r\nWhat is the best/recommended way to do this: shall I crate one _base_ class, containing the smallest set of attributes and then extend it (subclass it) and add additional fields? Or, shall I simply create different classes with no common class. I prefer using the base class approach whenever possible, but I am not sure will this complicate managing of _dump_only_ and _exclude_fields_ in sub-classes and make code hard to maintain?\r\n\r\nThank you in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/151", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/151/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/151/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/151", "id": 372794777, "node_id": "MDU6SXNzdWUzNzI3OTQ3Nzc=", "number": 151, "title": "field Related doesnt support association_proxy", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-23T03:41:56Z", "updated_at": "2018-11-03T17:03:21Z", "closed_at": "2018-11-03T17:03:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "```\r\n    def related_model(self):\r\n        return getattr(self.model, self.attribute or self.name).property.mapper.class_\r\n```\r\nThis function assumes that the attribute is always a property - but association_proxies do not have a property. They have a remote_attr.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/149", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/149/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/149/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/149", "id": 372168758, "node_id": "MDU6SXNzdWUzNzIxNjg3NTg=", "number": 149, "title": "Converting all dumped keys to camelCase from snake_case", "user": {"login": "AbdealiJK", "id": 2200743, "node_id": "MDQ6VXNlcjIyMDA3NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/2200743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AbdealiJK", "html_url": "https://github.com/AbdealiJK", "followers_url": "https://api.github.com/users/AbdealiJK/followers", "following_url": "https://api.github.com/users/AbdealiJK/following{/other_user}", "gists_url": "https://api.github.com/users/AbdealiJK/gists{/gist_id}", "starred_url": "https://api.github.com/users/AbdealiJK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AbdealiJK/subscriptions", "organizations_url": "https://api.github.com/users/AbdealiJK/orgs", "repos_url": "https://api.github.com/users/AbdealiJK/repos", "events_url": "https://api.github.com/users/AbdealiJK/events{/privacy}", "received_events_url": "https://api.github.com/users/AbdealiJK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-20T03:47:31Z", "updated_at": "2019-09-05T21:11:41Z", "closed_at": "2019-09-05T21:11:41Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "We use snake_case in our DB but the APIs we have need to be in camelCase\r\nI am thinking of using https://github.com/okunishinishi/python-stringcase to convert all my field names to camel easily.\r\n\r\nBut, how can I do this with marshmallow-sqlalchemy so that all my fields will be automatically converted to camelCase when dump/load ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/147", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/147/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/147/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/147", "id": 365714553, "node_id": "MDU6SXNzdWUzNjU3MTQ1NTM=", "number": 147, "title": "Do not support UUID type data save/load", "user": {"login": "thinksource", "id": 2766693, "node_id": "MDQ6VXNlcjI3NjY2OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2766693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thinksource", "html_url": "https://github.com/thinksource", "followers_url": "https://api.github.com/users/thinksource/followers", "following_url": "https://api.github.com/users/thinksource/following{/other_user}", "gists_url": "https://api.github.com/users/thinksource/gists{/gist_id}", "starred_url": "https://api.github.com/users/thinksource/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thinksource/subscriptions", "organizations_url": "https://api.github.com/users/thinksource/orgs", "repos_url": "https://api.github.com/users/thinksource/repos", "events_url": "https://api.github.com/users/thinksource/events{/privacy}", "received_events_url": "https://api.github.com/users/thinksource/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445193, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTM=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 204445196, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTY=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/help%20wanted", "name": "help wanted", "color": "64e09c", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-02T02:23:34Z", "updated_at": "2019-08-29T14:24:30Z", "closed_at": "2019-08-29T14:24:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to use postgresql.UUID type as id:\r\n\r\nmy product json is:\r\n\r\n```\r\n{\r\n  \"id\":\"fceeec0d-de3c-4d65-84ff-f2374cf87e02\",\r\n  \"name\": \"Iron Screwdriver\",\r\n  \"provider\":\"ABC provider\",\r\n  \"barcode\":\"e9099384-7e67-45e3-88d5-8b310b40d0aa\",\r\n  \"price\":10.5,\r\n  \"category_id\":\"a0b98a09-e7a4-4898-af70-7f3bd403678d\"\r\n}\r\n```\r\n\r\nI defined Product and ProductSchema like:\r\n\r\n```\r\nclass Product(db.Model):\r\n    __tablename__='Product'\r\n    id = db.Column(postgresql.UUID, primary_key=True)\r\n    name = db.Column(db.String(80), nullable=False)\r\n    desc = db.Column(db.TEXT, nullable=True)\r\n    provider = db.Column(db.String(200), nullable=False)\r\n    barcode = db.Column(db.String(50), nullable=False)\r\n    price = db.Column(db.DECIMAL(10, 2), nullable=False)\r\n    category_id=db.Column(postgresql.UUID, db.ForeignKey('Category.id'))\r\n    category = relationship(\"Category\", back_populates='products')\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Product, self).__init__(**kwargs)\r\n\r\nclass ProductSchema(ModelSchema):\r\n    class Meta:\r\n        model = Product\r\n        sqla_session = db.session\r\n        include_fk = True\r\n```\r\n\r\n\r\nI try to save this product use fellowing code:\r\n```\r\ndef create(product):\r\n    id = product.get('id')\r\n    if not validate_uuid(id, 4):\r\n        return uuid_error(obj,\"id\")\r\n    existing_item = Product.query.filter(Product.id == id).one_or_none()\r\n    if id is None:\r\n        id = uuid.uuid4()\r\n        product['id']=id\r\n    if existing_item is None:\r\n        schema = ProductSchema()\r\n        new_item = schema.load(product, session=db.session).data    <<<<<< error happens here.\r\n        print(\"==========================\")\r\n\r\n        db.session.add(new_item)\r\n        db.session.commit()\r\n        data = schema.dump(new_item).data\r\n        return data, 201\r\n```\r\n\r\nMy error is:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 2309, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 2295, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 1741, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 2292, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 1815, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 1718, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 1813, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\flask\\app.py\", line 1799, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\connexion\\decorators\\decorator.py\", line 73, in wrapper\r\n    response = function(request)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\connexion\\decorators\\uri_parsing.py\", line 117, in wrapper\r\n    response = function(request)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\connexion\\decorators\\validation.py\", line 163, in wrapper\r\n    response = function(request)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\connexion\\decorators\\validation.py\", line 336, in wrapper\r\n    return function(request)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\connexion\\decorators\\decorator.py\", line 44, in wrapper\r\n    response = function(request)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\connexion\\decorators\\parameter.py\", line 207, in wrapper\r\n    return function(**kwargs)\r\n  File \"F:\\personalprojects\\newrest\\api\\product.py\", line 23, in create\r\n    new_item = schema.load(product, session=db.session).data\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow_sqlalchemy\\schema.py\", line 194, in load\r\n    return super(ModelSchema, self).load(data, *args, **kwargs)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow\\schema.py\", line 576, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow\\schema.py\", line 683, in _do_load\r\n    original_data=data)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow\\schema.py\", line 863, in _invoke_load_processors\r\n    data=data, many=many, original_data=original_data)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow\\schema.py\", line 966, in _invoke_processors\r\n    data = utils.if_none(processor(data), data)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow_sqlalchemy\\schema.py\", line 176, in make_instance\r\n    instance = self.instance or self.get_instance(data)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\marshmallow_sqlalchemy\\schema.py\", line 164, in get_instance\r\n    **filters\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 2895, in first\r\n    ret = list(self[0:1])\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 2687, in __getitem__\r\n    return list(res)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 2995, in __iter__\r\n    return self._execute_and_instances(context)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\orm\\query.py\", line 3018, in _execute_and_instances\r\n    result = conn.execute(querycontext.statement, self._params)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 948, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 269, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1060, in _execute_clauseelement\r\n    compiled_sql, distilled_params\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1132, in _execute_context\r\n    None, None)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1413, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 265, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 248, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1127, in _execute_context\r\n    context = constructor(dialect, self, conn, *args)\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 695, in _init_compiled\r\n    for key in compiled_params\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 695, in <genexpr>\r\n    for key in compiled_params\r\n  File \"F:\\personalprojects\\newrest\\venv\\lib\\site-packages\\sqlalchemy\\dialects\\postgresql\\psycopg2.py\", line 448, in process\r\n    value = _python_UUID(value)\r\n  File \"d:\\anaconda3\\Lib\\uuid.py\", line 138, in __init__\r\n    hex = hex.replace('urn:', '').replace('uuid:', '')\r\nsqlalchemy.exc.StatementError: (builtins.AttributeError) 'UUID' object has no attribute 'replace'\r\n```\r\n\r\nwhich is happens in UUID defination:\r\n\r\nwhen initialize the UUID type:\r\nuuid.py file is like:\r\n\r\n```\r\n    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,\r\n                       int=None, version=None):\r\n   ....\r\n```\r\nthe first hex should be string type rather than UUID type.\r\nBut if I use the marshmallow-sqlalchemy I mean when I execute schema.load(product, session=db.session) , it will automatically change the ID data into UUID type and then give me error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/138", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/138/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/138/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/138", "id": 349506493, "node_id": "MDU6SXNzdWUzNDk1MDY0OTM=", "number": 138, "title": "Handling Unknown Fields functionnality", "user": {"login": "chaufmaurice", "id": 38210221, "node_id": "MDQ6VXNlcjM4MjEwMjIx", "avatar_url": "https://avatars1.githubusercontent.com/u/38210221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chaufmaurice", "html_url": "https://github.com/chaufmaurice", "followers_url": "https://api.github.com/users/chaufmaurice/followers", "following_url": "https://api.github.com/users/chaufmaurice/following{/other_user}", "gists_url": "https://api.github.com/users/chaufmaurice/gists{/gist_id}", "starred_url": "https://api.github.com/users/chaufmaurice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chaufmaurice/subscriptions", "organizations_url": "https://api.github.com/users/chaufmaurice/orgs", "repos_url": "https://api.github.com/users/chaufmaurice/repos", "events_url": "https://api.github.com/users/chaufmaurice/events{/privacy}", "received_events_url": "https://api.github.com/users/chaufmaurice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-10T13:00:32Z", "updated_at": "2018-08-15T11:41:55Z", "closed_at": "2018-08-15T11:41:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "And I would like to use the Handling Unknown Fields functionnality:\r\n'Turn off automatic skipping of unknown fields' [marshmallow#127](https://github.com/marshmallow-code/marshmallow/issues/127)\r\nhttps://marshmallow.readthedocs.io/en/3.0/quickstart.html#handling-unknown-fields\r\n\r\nBut I'm not able to import : \r\n`from marshmallow import INCLUDE`\r\n=> `ImportError:` cannot import name 'INCLUDE'`\r\n\r\nDo you when it will be integrated to Flask-marshmallow ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/137", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/137/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/137/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/137", "id": 346271927, "node_id": "MDU6SXNzdWUzNDYyNzE5Mjc=", "number": 137, "title": "0.14.1 shows as a release here but it's not in pypi", "user": {"login": "yaheath", "id": 3083011, "node_id": "MDQ6VXNlcjMwODMwMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3083011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaheath", "html_url": "https://github.com/yaheath", "followers_url": "https://api.github.com/users/yaheath/followers", "following_url": "https://api.github.com/users/yaheath/following{/other_user}", "gists_url": "https://api.github.com/users/yaheath/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaheath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaheath/subscriptions", "organizations_url": "https://api.github.com/users/yaheath/orgs", "repos_url": "https://api.github.com/users/yaheath/repos", "events_url": "https://api.github.com/users/yaheath/events{/privacy}", "received_events_url": "https://api.github.com/users/yaheath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-31T16:50:44Z", "updated_at": "2018-08-15T11:46:11Z", "closed_at": "2018-08-15T11:46:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "pip says ``Could not find a version that satisfies the requirement marshmallow-sqlalchemy==0.14.1``", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/134", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/134/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/134/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/134", "id": 344852660, "node_id": "MDU6SXNzdWUzNDQ4NTI2NjA=", "number": 134, "title": "Initial Update", "user": {"login": "pyup-bot", "id": 16239342, "node_id": "MDQ6VXNlcjE2MjM5MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/16239342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyup-bot", "html_url": "https://github.com/pyup-bot", "followers_url": "https://api.github.com/users/pyup-bot/followers", "following_url": "https://api.github.com/users/pyup-bot/following{/other_user}", "gists_url": "https://api.github.com/users/pyup-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyup-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyup-bot/subscriptions", "organizations_url": "https://api.github.com/users/pyup-bot/orgs", "repos_url": "https://api.github.com/users/pyup-bot/repos", "events_url": "https://api.github.com/users/pyup-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/pyup-bot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-26T13:49:56Z", "updated_at": "2018-08-15T11:44:28Z", "closed_at": "2018-08-15T11:44:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The bot created this issue to inform you that pyup.io has been set up on this repo.\nOnce you have closed it, the bot will open pull requests for updates as soon as they are available.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/131", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/131/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/131/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/131", "id": 339951768, "node_id": "MDU6SXNzdWUzMzk5NTE3Njg=", "number": 131, "title": "`exclude` in Meta breaks with marshmallow 3", "user": {"login": "yaheath", "id": 3083011, "node_id": "MDQ6VXNlcjMwODMwMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3083011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaheath", "html_url": "https://github.com/yaheath", "followers_url": "https://api.github.com/users/yaheath/followers", "following_url": "https://api.github.com/users/yaheath/following{/other_user}", "gists_url": "https://api.github.com/users/yaheath/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaheath/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaheath/subscriptions", "organizations_url": "https://api.github.com/users/yaheath/orgs", "repos_url": "https://api.github.com/users/yaheath/repos", "events_url": "https://api.github.com/users/yaheath/events{/privacy}", "received_events_url": "https://api.github.com/users/yaheath/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-07-10T18:09:20Z", "updated_at": "2018-07-20T02:30:51Z", "closed_at": "2018-07-20T02:15:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a pattern where we exclude some relations from the marshmallow schema like this:\r\n\r\n```python\r\nclass CustomerSchema(MyBaseSchema):\r\n    class Meta(MyBaseSchema.Meta):\r\n        model = Customer\r\n        exclude = ('orders',)\r\n```\r\nWhere `Customer` is a sqlalchemy model and `orders` is a relation from another table.\r\n\r\nThis works fine with marshmallow 2.x, but with marshmallow 3, an exception is thrown in the instantiation of `CustomerSchema` because marshmallow-sqlalchemy did not create the `orders` field, and so `orders` doesn't exist to be excluded.\r\n\r\nSee also https://github.com/marshmallow-code/marshmallow/issues/877\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/130", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/130/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/130/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/130", "id": 327150777, "node_id": "MDU6SXNzdWUzMjcxNTA3Nzc=", "number": 130, "title": "Initial Update", "user": {"login": "pyup-bot", "id": 16239342, "node_id": "MDQ6VXNlcjE2MjM5MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/16239342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyup-bot", "html_url": "https://github.com/pyup-bot", "followers_url": "https://api.github.com/users/pyup-bot/followers", "following_url": "https://api.github.com/users/pyup-bot/following{/other_user}", "gists_url": "https://api.github.com/users/pyup-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyup-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyup-bot/subscriptions", "organizations_url": "https://api.github.com/users/pyup-bot/orgs", "repos_url": "https://api.github.com/users/pyup-bot/repos", "events_url": "https://api.github.com/users/pyup-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/pyup-bot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-29T02:26:22Z", "updated_at": "2018-05-29T12:45:08Z", "closed_at": "2018-05-29T12:45:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The bot created this issue to inform you that pyup.io has been set up on this repo.\nOnce you have closed it, the bot will open pull requests for updates as soon as they are available.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/128", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/128/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/128/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/128/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/128", "id": 314317299, "node_id": "MDU6SXNzdWUzMTQzMTcyOTk=", "number": 128, "title": "Single Schema/Model", "user": {"login": "bourdeau", "id": 1926353, "node_id": "MDQ6VXNlcjE5MjYzNTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1926353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bourdeau", "html_url": "https://github.com/bourdeau", "followers_url": "https://api.github.com/users/bourdeau/followers", "following_url": "https://api.github.com/users/bourdeau/following{/other_user}", "gists_url": "https://api.github.com/users/bourdeau/gists{/gist_id}", "starred_url": "https://api.github.com/users/bourdeau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bourdeau/subscriptions", "organizations_url": "https://api.github.com/users/bourdeau/orgs", "repos_url": "https://api.github.com/users/bourdeau/repos", "events_url": "https://api.github.com/users/bourdeau/events{/privacy}", "received_events_url": "https://api.github.com/users/bourdeau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445198, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTg=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-14T10:13:43Z", "updated_at": "2018-12-04T18:12:49Z", "closed_at": "2018-12-04T18:12:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm very new to Python and I don't know much about SQLAlchemy and Marshmallow, so I apologize in advance for my ignorance.\r\n\r\nI was wondering if it is possible with marshmallow-sqlalchemy to have a single ModelSchema instead of having one Model and one Shema?\r\n\r\nIn PHP (with Doctrine ORM and JMS serializer) one can define a model attribute as such:\r\n\r\n```php\r\n    /**\r\n     * @var string\r\n     *\r\n     * @ORM\\Column(name=\"email\", type=\"string\", length=50, nullable=false)\r\n     * @JMS\\Expose\r\n     * @JMS\\Groups({\"mobile\", \"backoffice\", \"front\"})\r\n     * @JMS\\SerializedName(\"contact_email\")\r\n     * @JMS\\Since(\"1.2\")\r\n     * @Assert\\Email(message=\"The email '{{ value }}' is not a valid email.\", checkMX = true)\r\n     */\r\n    private $email;\r\n```\r\nIn PHP we use Annotations a bit like Decorators in Python. This way our model can handle both serilization and db stuff. So you can do stuff like (pseudo code): User.load(json).save()\r\nThis way you can have a single model that handle json, xml -> Model -> MySQL, MongoDB, etc.\r\n\r\nIs it possible to do such thing with marshmallow-sqlalchemy to avoid having UserBase and UserModeSchema? Inheritance maybe?\r\n\r\nThanks a lot and sorry if my question is silly due to my lack of Python knowledge.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/126", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/126/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/126/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/126", "id": 303623420, "node_id": "MDU6SXNzdWUzMDM2MjM0MjA=", "number": 126, "title": "Merging values into existing object from database", "user": {"login": "tispratik", "id": 80631, "node_id": "MDQ6VXNlcjgwNjMx", "avatar_url": "https://avatars2.githubusercontent.com/u/80631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tispratik", "html_url": "https://github.com/tispratik", "followers_url": "https://api.github.com/users/tispratik/followers", "following_url": "https://api.github.com/users/tispratik/following{/other_user}", "gists_url": "https://api.github.com/users/tispratik/gists{/gist_id}", "starred_url": "https://api.github.com/users/tispratik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tispratik/subscriptions", "organizations_url": "https://api.github.com/users/tispratik/orgs", "repos_url": "https://api.github.com/users/tispratik/repos", "events_url": "https://api.github.com/users/tispratik/events{/privacy}", "received_events_url": "https://api.github.com/users/tispratik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-03-08T20:38:38Z", "updated_at": "2018-12-04T18:05:56Z", "closed_at": "2018-12-04T18:05:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I could not find any documentation around merging incoming json fields with attributes already present in the database object in memory. I came up with the following code to achieve that. Wondering if there is an easier way to do this:\r\n\r\n```python\r\nfrom sqlalchemy.orm.attributes import set_attribute, flag_modified\r\n\r\n@post_load\r\ndef make_author(self, data):\r\n  author_from_db = db_helper.find_one_by_id(data['author_id'])\r\n  if author_from_db:\r\n    for attr, value in data.iteritems():\r\n      set_attribute(author_from_db, attr, value)\r\n      flag_modified(author_from_db, attr)\r\n    return author_from_db\r\n  else:\r\n    return Author(**data)\r\n```\r\n\r\nIn the above, `db_helper` is my custom helper to get the object from db like below:\r\n```python\r\ndef find_one_by_author_id(author_id):\r\n  authors = find_all_by_author_id([author_id])\r\n  if authors:\r\n    return authors[0]\r\n  return None\r\n\r\n\r\ndef find_all_by_author_id(author_ids):\r\n  session = db_setup.get_session()\r\n  query = session.query(Author).filter(\r\n    Author.author_id.in_(author_ids))\r\n  return query.all()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/125", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/125/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/125/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/125", "id": 303138877, "node_id": "MDU6SXNzdWUzMDMxMzg4Nzc=", "number": 125, "title": "Do make_instance() and custom post_load-methods clash?", "user": {"login": "schober-ch", "id": 6029155, "node_id": "MDQ6VXNlcjYwMjkxNTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6029155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schober-ch", "html_url": "https://github.com/schober-ch", "followers_url": "https://api.github.com/users/schober-ch/followers", "following_url": "https://api.github.com/users/schober-ch/following{/other_user}", "gists_url": "https://api.github.com/users/schober-ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/schober-ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schober-ch/subscriptions", "organizations_url": "https://api.github.com/users/schober-ch/orgs", "repos_url": "https://api.github.com/users/schober-ch/repos", "events_url": "https://api.github.com/users/schober-ch/events{/privacy}", "received_events_url": "https://api.github.com/users/schober-ch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-07T15:18:15Z", "updated_at": "2018-03-09T13:16:58Z", "closed_at": "2018-03-09T13:16:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI'm working on a Flask app using sqlalchemy, marshmallow and marshmallow-sqlalchemy. I implemented a basic API, using pre_load and post-load decorators for some models to change/adjust fields. \r\n\r\nSometimes I need to create additional sqlA-objects based on the data and for this I use the post_load-decorator. \r\n\r\n(from the docs, as illustration)\r\n```\r\nclass AuthorSchema(ModelSchema):\r\n    class Meta:\r\n        model = Author\r\n\r\n    @post_load\r\n    def create_stuff(self, data):\r\n        print(type(data))\r\n```\r\n\r\nI would expect the `data` variable to be an instance of the SQLA-model, which works for 2 of my models. \r\n\r\nNow, for a third, I get a dictionary. The dictionary already contains the SQLA-instances for nested fields, but is still a dictionary. Digging into the marshmallow-sqlalchemy code and adding some `print`-statements in `ModelSchema.make_instance` showed that this method works correctly (returning the model instance), but I realized that my print-statements in my own `post_load`-method are printed **before** the ones I added to the `make_instance`-method. \r\nDoing the same for one of the two working schemata the print in my method is printed after the `make_instance`-one.\r\n\r\nSo, my question: Is it possible that there is some kind of race condition happening between both decorated methods? I found a warning regarding the execution order in the marshmallow-docs (https://marshmallow.readthedocs.io/en/latest/extending.html#pre-post-processor-invocation-order), and both methods are decorated with the `post_load`-decorator - once in my code and once in the ModelSchema-class.\r\n\r\nIf this seems unreasonable, has anyone any idea why I don't get the expected SQLA-model instance?\r\n\r\nAnd of course, last but not least, thank you for this library!\r\n\r\n\r\n\r\n   ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/123", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/123/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/123/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/123", "id": 293531003, "node_id": "MDU6SXNzdWUyOTM1MzEwMDM=", "number": 123, "title": "Document how auto generated fields are generated", "user": {"login": "italomaia", "id": 14670, "node_id": "MDQ6VXNlcjE0Njcw", "avatar_url": "https://avatars1.githubusercontent.com/u/14670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/italomaia", "html_url": "https://github.com/italomaia", "followers_url": "https://api.github.com/users/italomaia/followers", "following_url": "https://api.github.com/users/italomaia/following{/other_user}", "gists_url": "https://api.github.com/users/italomaia/gists{/gist_id}", "starred_url": "https://api.github.com/users/italomaia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/italomaia/subscriptions", "organizations_url": "https://api.github.com/users/italomaia/orgs", "repos_url": "https://api.github.com/users/italomaia/repos", "events_url": "https://api.github.com/users/italomaia/events{/privacy}", "received_events_url": "https://api.github.com/users/italomaia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-01T13:31:41Z", "updated_at": "2019-08-29T14:27:35Z", "closed_at": "2019-08-29T14:27:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given a Model, how are ModelSchema fields generated? Does it introspect validation rules? Which? What does it not do?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/122", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/122/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/122/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/122", "id": 288183989, "node_id": "MDU6SXNzdWUyODgxODM5ODk=", "number": 122, "title": "Specify columns which are dumped", "user": {"login": "disconnect3d", "id": 10009354, "node_id": "MDQ6VXNlcjEwMDA5MzU0", "avatar_url": "https://avatars2.githubusercontent.com/u/10009354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/disconnect3d", "html_url": "https://github.com/disconnect3d", "followers_url": "https://api.github.com/users/disconnect3d/followers", "following_url": "https://api.github.com/users/disconnect3d/following{/other_user}", "gists_url": "https://api.github.com/users/disconnect3d/gists{/gist_id}", "starred_url": "https://api.github.com/users/disconnect3d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/disconnect3d/subscriptions", "organizations_url": "https://api.github.com/users/disconnect3d/orgs", "repos_url": "https://api.github.com/users/disconnect3d/repos", "events_url": "https://api.github.com/users/disconnect3d/events{/privacy}", "received_events_url": "https://api.github.com/users/disconnect3d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-12T17:01:10Z", "updated_at": "2018-11-21T22:39:23Z", "closed_at": "2018-11-21T22:38:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to specify model's fields/columns which will be dumped?\r\n\r\nAssuming we have such code:\r\n\r\n```python\r\nclass SomeModel(model):\r\n    id = Column(Integer, autoincrement=True, primary_key=True)\r\n    name = Column(String, nullable=False, unique=True)\r\n\r\n\r\nclass SomeModelSchema(ModelSchema):\r\n    class Meta:\r\n        model = SomeModel\r\n        fields = (SomeModel.name,)  # <-- wishful thinking;\r\n```\r\n\r\nI'd like `SomeModelSchema().dumps(SomeModel_instance)` dump me just `name` column.\r\n\r\nIs there any way to achieve sth like this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/121", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/121/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/121/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/121", "id": 282724695, "node_id": "MDU6SXNzdWUyODI3MjQ2OTU=", "number": 121, "title": "Using Related field under different name", "user": {"login": "zezic", "id": 1945127, "node_id": "MDQ6VXNlcjE5NDUxMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1945127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zezic", "html_url": "https://github.com/zezic", "followers_url": "https://api.github.com/users/zezic/followers", "following_url": "https://api.github.com/users/zezic/following{/other_user}", "gists_url": "https://api.github.com/users/zezic/gists{/gist_id}", "starred_url": "https://api.github.com/users/zezic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zezic/subscriptions", "organizations_url": "https://api.github.com/users/zezic/orgs", "repos_url": "https://api.github.com/users/zezic/repos", "events_url": "https://api.github.com/users/zezic/events{/privacy}", "received_events_url": "https://api.github.com/users/zezic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-12-17T21:20:21Z", "updated_at": "2018-11-03T20:48:43Z", "closed_at": "2018-11-03T16:09:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to use `Related` field for many to many relations in my schemas but under different name than real property name, but there is problems on serialization step even if using `attribute` argument pointing to wanted property because Marshmallow trying to access same property but pick it from related model.\r\n\r\nAny guides how to use `Related` field under different name than property name?\r\n\r\nPseudocode example:\r\n```python \r\nclass Article(Base):\r\n    id = Column(UUID,\r\n                server_default=text('gen_random_uuid()'),\r\n                primary_key=True)\r\n    name = Column(String(256))\r\n    pictures = relationship('File', secondary=article_to_picture)\r\n\r\nclass ArticleSchema(ModelSchema):\r\n    class Meta:\r\n        model = Article\r\n    pictures_ids = fields.List(Relation(attribute='pictures'), attribute='pictures'))\r\n    pictures = fields.Nested('FileSchema',\r\n                             attribute='pictures',\r\n                             many=True,\r\n                             only=['id', 'name', 'url'],\r\n                             dump_only=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/120", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/120/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/120/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/120", "id": 271122829, "node_id": "MDU6SXNzdWUyNzExMjI4Mjk=", "number": 120, "title": "How to use Marshmallow when models have __init__?", "user": {"login": "zerox1212", "id": 13090472, "node_id": "MDQ6VXNlcjEzMDkwNDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/13090472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zerox1212", "html_url": "https://github.com/zerox1212", "followers_url": "https://api.github.com/users/zerox1212/followers", "following_url": "https://api.github.com/users/zerox1212/following{/other_user}", "gists_url": "https://api.github.com/users/zerox1212/gists{/gist_id}", "starred_url": "https://api.github.com/users/zerox1212/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zerox1212/subscriptions", "organizations_url": "https://api.github.com/users/zerox1212/orgs", "repos_url": "https://api.github.com/users/zerox1212/repos", "events_url": "https://api.github.com/users/zerox1212/events{/privacy}", "received_events_url": "https://api.github.com/users/zerox1212/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-03T21:24:18Z", "updated_at": "2017-11-07T15:07:47Z", "closed_at": "2017-11-07T15:07:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Flask and SQL Alchemy for my web app.\r\n\r\nThis app was already working, but for simplicity I want to use marshmallow for serialize/deserialize.\r\n\r\nI set up my schemas and started testing, but I have found that if my model has `__init__` defined without ALL of the model fields defined I can't deserialize due to missing arguments.\r\n\r\nIs it a requirement that if `__init__()` is defined that all columns in the db model must be declared?\r\n\r\nMy model:\r\n```python\r\nclass Item(db.Model):\r\n    __tablename__ = 'items'\r\n    id = db.Column(db.Integer(), primary_key=True)\r\n    project_id = db.Column(db.Integer(), db.ForeignKey('projects.id'))\r\n    myvalue = db.Column(db.Integer())\r\n\r\ndef __init__(self, project_id=None):\r\n        self.project_id = project_id\r\n        self.myvalue = 0\r\n```\r\n\r\nError:\r\n```python\r\n  File \"C:\\Users\\user\\PythonVirtualEnvs\\cvirt\\lib\\site-packages\\marshmallow_sqlalchemy\\schema.py\", line 175, in make_instance\r\n    return self.opts.model(**data)\r\nTypeError: __init__() got an unexpected keyword argument 'myvalue'\r\n```\r\n\r\nIt looks like if your model is using `__init__` that you MUST\r\nA. Have all possible db fields defined\r\nB. Include `**kwargs` in the init\r\nC. Do not use `__init__`\r\n\r\n I couldn't find this anywhere in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/119", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/119/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/119/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/119", "id": 258351988, "node_id": "MDU6SXNzdWUyNTgzNTE5ODg=", "number": 119, "title": "How to auto generate property ?", "user": {"login": "eromoe", "id": 3938751, "node_id": "MDQ6VXNlcjM5Mzg3NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3938751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eromoe", "html_url": "https://github.com/eromoe", "followers_url": "https://api.github.com/users/eromoe/followers", "following_url": "https://api.github.com/users/eromoe/following{/other_user}", "gists_url": "https://api.github.com/users/eromoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/eromoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eromoe/subscriptions", "organizations_url": "https://api.github.com/users/eromoe/orgs", "repos_url": "https://api.github.com/users/eromoe/repos", "events_url": "https://api.github.com/users/eromoe/events{/privacy}", "received_events_url": "https://api.github.com/users/eromoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-18T01:35:50Z", "updated_at": "2017-10-29T22:39:28Z", "closed_at": "2017-10-29T22:39:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a property defined as \r\n```\r\n   @property\r\n    def doc_count(self):\r\n        return Session.object_session(self).query(Document).with_parent(self, \"documents\").count()\r\n```\r\nBut I found it didn't generate. From doc, I only see :\r\n\r\n```\r\nfrom marshmallow_sqlalchemy import property2field\r\n\r\nid_prop = Author.__mapper__.get_property('id')\r\n\r\nproperty2field(id_prop)\r\n```\r\n\r\nAnd example don't contain this too. \r\nhttp://marshmallow.readthedocs.io/en/latest/examples.html\r\n\r\nNow I have to use `doc_count = fields.Function(lambda obj: obj.doc_count, dump_only=True)` in schema.\r\n\r\nI think it is a usual case, should write in docs.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/118", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/118/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/118/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/118", "id": 256925831, "node_id": "MDU6SXNzdWUyNTY5MjU4MzE=", "number": 118, "title": "how to serieslize ForeignKey default?", "user": {"login": "eromoe", "id": 3938751, "node_id": "MDQ6VXNlcjM5Mzg3NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3938751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eromoe", "html_url": "https://github.com/eromoe", "followers_url": "https://api.github.com/users/eromoe/followers", "following_url": "https://api.github.com/users/eromoe/following{/other_user}", "gists_url": "https://api.github.com/users/eromoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/eromoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eromoe/subscriptions", "organizations_url": "https://api.github.com/users/eromoe/orgs", "repos_url": "https://api.github.com/users/eromoe/repos", "events_url": "https://api.github.com/users/eromoe/events{/privacy}", "received_events_url": "https://api.github.com/users/eromoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-12T05:54:52Z", "updated_at": "2018-12-04T18:13:47Z", "closed_at": "2018-12-04T18:13:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model with below field:\r\n```\r\n    corpus_id = Column(Integer, ForeignKey('corpus.id', ondelete='CASCADE'))\r\n    corpus = relationship('Corpus', backref=backref('documents', order_by=id, cascade='all, delete-orphan'), foreign_keys=corpus_id)\r\n```\r\n\r\nAfter serieslization, it became \r\n```\r\n{\r\n    \"corpus\": 1,\r\n    \"created\": \"2017-09-12T05:50:07+00:00\",\r\n    \"id\": 1,\r\n    \"text\": \"text\",\r\n    \"title\": \"doc1\",\r\n}\r\n```\r\n\r\nI want `corpus_id` , not `corpus`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/117", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/117/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/117/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/117", "id": 247991660, "node_id": "MDU6SXNzdWUyNDc5OTE2NjA=", "number": 117, "title": "Lookup-only nested field", "user": {"login": "timster", "id": 173666, "node_id": "MDQ6VXNlcjE3MzY2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/173666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timster", "html_url": "https://github.com/timster", "followers_url": "https://api.github.com/users/timster/followers", "following_url": "https://api.github.com/users/timster/following{/other_user}", "gists_url": "https://api.github.com/users/timster/gists{/gist_id}", "starred_url": "https://api.github.com/users/timster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timster/subscriptions", "organizations_url": "https://api.github.com/users/timster/orgs", "repos_url": "https://api.github.com/users/timster/repos", "events_url": "https://api.github.com/users/timster/events{/privacy}", "received_events_url": "https://api.github.com/users/timster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-04T12:28:54Z", "updated_at": "2018-01-02T17:33:57Z", "closed_at": "2018-01-02T17:33:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to have a `Nested` field that does not allow creating new nested objects, but only allows lookups? Let me explain.\r\n\r\nConsider the following schemas:\r\n\r\n```python\r\nclass IndicatorSchema(ModelSchema):\r\n    class Meta:\r\n        model = Indicator\r\n        sqla_session = db.session\r\n        fields = ('id', 'code', 'name')\r\n\r\nclass RatingSchema(ModelSchema):\r\n    indicator = Nested(IndicatorSchema)\r\n\r\n    class Meta:\r\n        model = Rating\r\n        sqla_session = db.session\r\n        fields = ('id', 'rating', 'indicator')\r\n```\r\n\r\nThis would allow creating a rating AND indicator like so:\r\n```python\r\nschema = RatingSchema()\r\n\r\ndata = {'rating': 5, 'indicator': {'code': 4, 'name': 'Test Indicator'}}\r\n\r\nrv = schema.load(data)\r\n```\r\n\r\nI want to prevent that and only allow indicators to be existing items:\r\n\r\n```python\r\n\r\n# indicator with ID 123 must exist, otherwise there will be an error\r\ndata = {'rating': 5, 'indicator': {'id': 123}}\r\n\r\nrv = schema.load(data)\r\n```\r\n\r\nIs this possible, or am I going to need to write something custom to accomplish this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/116", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/116/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/116/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/116", "id": 241746701, "node_id": "MDU6SXNzdWUyNDE3NDY3MDE=", "number": 116, "title": "Setting instance attribute with function during deserialization?", "user": {"login": "YKdvd", "id": 4149559, "node_id": "MDQ6VXNlcjQxNDk1NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4149559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YKdvd", "html_url": "https://github.com/YKdvd", "followers_url": "https://api.github.com/users/YKdvd/followers", "following_url": "https://api.github.com/users/YKdvd/following{/other_user}", "gists_url": "https://api.github.com/users/YKdvd/gists{/gist_id}", "starred_url": "https://api.github.com/users/YKdvd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YKdvd/subscriptions", "organizations_url": "https://api.github.com/users/YKdvd/orgs", "repos_url": "https://api.github.com/users/YKdvd/repos", "events_url": "https://api.github.com/users/YKdvd/events{/privacy}", "received_events_url": "https://api.github.com/users/YKdvd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-10T15:09:05Z", "updated_at": "2019-09-06T01:05:42Z", "closed_at": "2019-09-06T01:05:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Parent class, with a Child class as a standard one-many relationship (\"Parent.children\").  The Child class has a field call \"specialVal\", which needs some extra logic when it is changed.  I have a \"setSpecialVar()\" method that does this internally.  But when doing deserialization, the value of \"specialVar\" is just simply set by the deserializer, and my method obviously isn't called.\r\n\r\nBy the time \"load()\" comes back with the Parent instance, SQLAlchemy's flush has been called, probably for each child, which wipes out the change history and there seems to be no way to get the \"old\" value of \"specialVal\", so I can't even change it back and call \"setSpecialVar()\" to do the \"right\" thing (the logic depends on the current and new value of the variable).\r\n\r\nThere doesn't seem to be any sort of hook to define a \"setter\" for a specific field as an instance is being made?  It looks like \"make_instance()\" is a Marshmallow post_load method, and is just doing a plain \"setattr()\" in a loop with the data passed to it.  Would my best bet be to define a custom \"make_instance\" for Child, copying most of the code but calling my setSpecialVar() method instead of \"setattr\" when the key is \"specialVar\"?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/113", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/113/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/113/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/113", "id": 237888950, "node_id": "MDU6SXNzdWUyMzc4ODg5NTA=", "number": 113, "title": "synonyms not work", "user": {"login": "novvv", "id": 26185470, "node_id": "MDQ6VXNlcjI2MTg1NDcw", "avatar_url": "https://avatars1.githubusercontent.com/u/26185470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/novvv", "html_url": "https://github.com/novvv", "followers_url": "https://api.github.com/users/novvv/followers", "following_url": "https://api.github.com/users/novvv/following{/other_user}", "gists_url": "https://api.github.com/users/novvv/gists{/gist_id}", "starred_url": "https://api.github.com/users/novvv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/novvv/subscriptions", "organizations_url": "https://api.github.com/users/novvv/orgs", "repos_url": "https://api.github.com/users/novvv/repos", "events_url": "https://api.github.com/users/novvv/events{/privacy}", "received_events_url": "https://api.github.com/users/novvv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-22T15:42:12Z", "updated_at": "2018-10-09T17:03:52Z", "closed_at": "2018-10-09T17:03:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nIf i add to my model synonyms of columns, schema not extract fields from model by default.\r\n\r\nmodel like:\r\n\r\nclass DbModel(sa.Base):\r\n   name=Column(String())\r\n   last_name=sa.synonym('name')\r\n\r\nerror log:\r\n....\r\n File \"/home/novvv/prj/dnl/webbackend/api_dnl/scheme.py\", line 2125, in <module>\r\n    class ClientCdrGetScheme(BaseModelScheme):\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/marshmallow/schema.py\", line 118, in __new__\r\n    dict_cls=dict_cls\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/marshmallow_sqlalchemy-0.13.1-py3.6.egg/marshmallow_sqlalchemy/schema.py\", line 60, in get_declared_fields\r\n    declared_fields = mcs.get_fields(converter, opts, base_fields, dict_cls)\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/marshmallow_sqlalchemy-0.13.1-py3.6.egg/marshmallow_sqlalchemy/schema.py\", line 94, in get_fields\r\n    dict_cls=dict_cls,\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/marshmallow_sqlalchemy-0.13.1-py3.6.egg/marshmallow_sqlalchemy/convert.py\", line 105, in fields_for_model\r\n    field = base_fields.get(prop.key) or self.property2field(prop)\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/marshmallow_sqlalchemy-0.13.1-py3.6.egg/marshmallow_sqlalchemy/convert.py\", line 125, in property2field\r\n    field_class = field_class or self._get_field_class_for_property(prop)\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/marshmallow_sqlalchemy-0.13.1-py3.6.egg/marshmallow_sqlalchemy/convert.py\", line 185, in _get_field_class_for_property\r\n    column = prop.columns[0]\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/SQLAlchemy-1.1.9-py3.6-linux-x86_64.egg/sqlalchemy/util/langhelpers.py\", line 850, in __getattr__\r\n    return self._fallback_getattr(key)\r\n  File \"/home/novvv/prj/dnl/webbackend/venv/lib/python3.6/site-packages/SQLAlchemy-1.1.9-py3.6-linux-x86_64.egg/sqlalchemy/util/langhelpers.py\", line 828, in _fallback_getattr\r\n    raise AttributeError(key)\r\nAttributeError: columns\r\n\r\nBut if i declare in meta section this fields (and synonym too) are pass ok.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/110", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/110/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/110/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/110", "id": 233363026, "node_id": "MDU6SXNzdWUyMzMzNjMwMjY=", "number": 110, "title": "Getting AttributeError: type object  has no attribute '_query_cls' with fields.Nested and relationship", "user": {"login": "dolfandringa", "id": 1193497, "node_id": "MDQ6VXNlcjExOTM0OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1193497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dolfandringa", "html_url": "https://github.com/dolfandringa", "followers_url": "https://api.github.com/users/dolfandringa/followers", "following_url": "https://api.github.com/users/dolfandringa/following{/other_user}", "gists_url": "https://api.github.com/users/dolfandringa/gists{/gist_id}", "starred_url": "https://api.github.com/users/dolfandringa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dolfandringa/subscriptions", "organizations_url": "https://api.github.com/users/dolfandringa/orgs", "repos_url": "https://api.github.com/users/dolfandringa/repos", "events_url": "https://api.github.com/users/dolfandringa/events{/privacy}", "received_events_url": "https://api.github.com/users/dolfandringa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-03T11:11:16Z", "updated_at": "2020-02-10T03:10:27Z", "closed_at": "2020-02-10T03:10:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI am getting an error when I am trying to create a new SQLAlchemy instance with a relationship defined. I am loading the new instance from JSON, and have a fields.Nested defined for the relationship attribute. But (I guess because of the relationship/ma-sa magic) the foreignkey field is not deserialized and can't be used to specify the id of the related instance, but when using the relationship attribute itself, it throws an error when sqlalchemy tries to query for the instance.\r\n\r\nI may be doing something wrong myself, but don't know what. The documentation is quite sparse on this.\r\n\r\nHere is a completely self contained example that throws the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"app.py\", line 60, in <module>\r\n    terminal = TerminalSchema.loads(json.dumps(data))\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 603, in loads\r\n    return self.load(data, many=many, partial=partial)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow_sqlalchemy/schema.py\", line 186, in load\r\n    ret = super(ModelSchema, self).load(data, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 580, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 660, in _do_load\r\n    index_errors=self.opts.index_errors,\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/marshalling.py\", line 295, in deserialize\r\n    index=(index if index_errors else None)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/marshalling.py\", line 68, in call_and_store\r\n    value = getter_func(data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/marshalling.py\", line 288, in <lambda>\r\n    data\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/fields.py\", line 265, in deserialize\r\n    output = self._deserialize(value, attr, data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/fields.py\", line 465, in _deserialize\r\n    data, errors = self.schema.load(value)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow_sqlalchemy/schema.py\", line 186, in load\r\n    ret = super(ModelSchema, self).load(data, *args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 580, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 685, in _do_load\r\n    original_data=data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 855, in _invoke_load_processors\r\n    data=data, many=many, original_data=original_data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow/schema.py\", line 957, in _invoke_processors\r\n    data = utils.if_none(processor(data), data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow_sqlalchemy/schema.py\", line 169, in make_instance\r\n    instance = self.instance or self.get_instance(data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/marshmallow_sqlalchemy/schema.py\", line 155, in get_instance\r\n    self.opts.model\r\n  File \"/usr/local/lib/python3.5/dist-packages/sqlalchemy/orm/session.py\", line 1330, in query\r\n    return self._query_cls(entities, self, **kwargs)\r\nAttributeError: type object 'TerminalType' has no attribute '_query_cls'\r\n```\r\nwith the following code:\r\n\r\n```python\r\nimport json\r\nfrom sqlalchemy import Column, Integer, Unicode, DateTime, Table, ForeignKey\r\nfrom sqlalchemy import Numeric\r\nfrom sqlalchemy.orm import relationship\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom marshmallow_sqlalchemy import ModelSchema\r\nfrom flask import Flask\r\nfrom flask_restful import Resource, Api\r\nfrom flask import request\r\nfrom marshmallow import fields\r\n\r\napp = Flask(__name__)\r\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite://\"\r\napi = Api(app)\r\ndb = SQLAlchemy(app)\r\n\r\nclass TerminalType(db.Model):\r\n    __tablename__ = 'terminaltypes'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(Unicode, nullable=False)\r\n\r\n\r\nclass Terminal(db.Model):\r\n    __tablename__ = 'terminals'\r\n    id = Column(Integer, primary_key=True)\r\n    name = Column(Unicode, nullable=False)\r\n    terminaltypeid = Column(Integer, ForeignKey('terminaltypes.id'),\r\n                            nullable=False)\r\n    terminaltype = relationship(\"TerminalType\", backref='terminals')\r\n\r\nclass _TerminalTypeSchema(ModelSchema):\r\n    class Meta:\r\n        model = TerminalType\r\n        sqla_session = db.Session\r\n    terminals = fields.Nested('_TerminalSchema', exclude=('terminaltype',))\r\n\r\nclass _TerminalSchema(ModelSchema):\r\n    class Meta:\r\n        model = Terminal\r\n        sqla_session = db.Session\r\n    terminaltype = fields.Nested(_TerminalTypeSchema, exclude=('terminals',))\r\n\r\nTerminalSchema = _TerminalSchema()\r\nTerminalTypeSchema = _TerminalTypeSchema()\r\n\r\nctx = app.app_context()\r\nctx.push()\r\ndb.create_all()\r\ndb.session.commit()\r\n\r\ndata = {'name': 'TestTType'}\r\nttype = TerminalTypeSchema.loads(json.dumps(data)).data\r\ndb.session.add(ttype)\r\ndb.session.commit()\r\nprint(\"\\n%s\" % ttype)\r\nprint(\"%i\\n\" % ttype.id)\r\n#data = {'name':'TestTerminal', 'terminaltype':{'id': 1}}\r\n#data = {'name':'TestTerminal', 'terminaltypeid': 1}\r\ndata = {'name':'TestTerminal', 'terminaltype':{'id': 1, 'name':'TestTType'}}\r\nterminal = TerminalSchema.loads(json.dumps(data))\r\ndb.session.add(terminal.data)\r\ndb.session.commit()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/109", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/109/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/109/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/109", "id": 233018398, "node_id": "MDU6SXNzdWUyMzMwMTgzOTg=", "number": 109, "title": "proposal: infinitely-recursive model schemas", "user": {"login": "dradetsky", "id": 947430, "node_id": "MDQ6VXNlcjk0NzQzMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/947430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dradetsky", "html_url": "https://github.com/dradetsky", "followers_url": "https://api.github.com/users/dradetsky/followers", "following_url": "https://api.github.com/users/dradetsky/following{/other_user}", "gists_url": "https://api.github.com/users/dradetsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/dradetsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dradetsky/subscriptions", "organizations_url": "https://api.github.com/users/dradetsky/orgs", "repos_url": "https://api.github.com/users/dradetsky/repos", "events_url": "https://api.github.com/users/dradetsky/events{/privacy}", "received_events_url": "https://api.github.com/users/dradetsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-01T21:38:52Z", "updated_at": "2020-02-10T02:42:36Z", "closed_at": "2020-02-10T02:42:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now if I generate a schema for a model which has related objs, those will be represented by `Related` fields, which are just pks. This is obviously the correct default behavior, but for my purposes it would be useful if I could explicitly ask to generate an infinitely-recursive (and thus unserializable) schema, perhaps like\r\n\r\n```\r\nclass MySchema(ModelSchema):\r\n    class Meta:\r\n        model = MyModel\r\n        infinitely_recursive = True\r\n```\r\n\r\nIf you look at my [tests for marshmallow-select](https://github.com/marshmallow-code/marshmallow-select/blob/master/tests/test_marshmallow_select.py) (see fixtures `schemas` & `detail_schemas`) hopefully you get the idea. I'd like to generate an infinitely-recursive \"Master Schema\" for every model I want to serialize, then define several finite subtrees of that schema for each view of the model's data I present in my application.\r\n\r\nAt the moment, the only way to do this (that I know of) is to define parent schemas with ModelSchema and then manually override each relation field with marshmallow's two-way nesting. Which is fine for the present example (and for fixing the underlying issues), but is going to get boring as I try to scale this up to larger applications.\r\n\r\nNote that the aforementioned test is currently broken, and I probably won't have time to fix it until at least this weekend, so the need here is not urgent, but it would be seriously cool if this could be implemented somehow eventually. My knowledge of the marshmallow-sqlalchemy internals is not very deep, but I assume it's at least possible. Is it hard?\r\n\r\nI know I'm not the first person to ask something _like_ this, so there's probably lots of other marginally related issues, but I'm not sure whether to link them.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/106", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/106/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/106/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/106", "id": 213426181, "node_id": "MDU6SXNzdWUyMTM0MjYxODE=", "number": 106, "title": "Excessive queries on load (nested schemas)", "user": {"login": "xarg", "id": 94721, "node_id": "MDQ6VXNlcjk0NzIx", "avatar_url": "https://avatars2.githubusercontent.com/u/94721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xarg", "html_url": "https://github.com/xarg", "followers_url": "https://api.github.com/users/xarg/followers", "following_url": "https://api.github.com/users/xarg/following{/other_user}", "gists_url": "https://api.github.com/users/xarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/xarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xarg/subscriptions", "organizations_url": "https://api.github.com/users/xarg/orgs", "repos_url": "https://api.github.com/users/xarg/repos", "events_url": "https://api.github.com/users/xarg/events{/privacy}", "received_events_url": "https://api.github.com/users/xarg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-10T19:10:51Z", "updated_at": "2017-04-17T02:43:53Z", "closed_at": "2017-04-17T02:43:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "We had this issue for a long time, but now it's starting to become really bad for us. See the example below:\r\n\r\n```\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy, get_debug_queries\r\nfrom marshmallow import fields\r\nfrom marshmallow_sqlalchemy import ModelSchema\r\nfrom datetime import datetime\r\n\r\napp = Flask(__name__)\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\r\napp.config['SQLALCHEMY_ECHO'] = False\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = True\r\napp.config['SQLALCHEMY_RECORD_QUERIES'] = True\r\ndb = SQLAlchemy(app)\r\n\r\n\r\nclass User(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(80), unique=True)\r\n    email = db.Column(db.String(120), unique=True)\r\n    created_datetime = db.Column(db.DateTime(), default=datetime.utcnow)\r\n    updated_datetime = db.Column(db.DateTime(), default=datetime.utcnow,\r\n                                 onupdate=datetime.utcnow)\r\n\r\n    def __repr__(self):\r\n        return '<User %r>' % self.username\r\n\r\n\r\nclass URL(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, db.ForeignKey(User.id))\r\n    url = db.Column(db.String())\r\n\r\n    user = db.relationship(User, backref=db.backref('urls'))\r\n\r\n    def __repr__(self):\r\n        return '<URL %r>' % self.url\r\n\r\n\r\ndef create_user():\r\n    user1 = User(username='user1', email=\"user1@example.com\")\r\n    user1.urls.append(URL(url=\"http://a\"))\r\n    user1.urls.append(URL(url=\"http://b\"))\r\n    user2 = User(username='user2', email=\"user2@example.com\")\r\n    user2.urls.append(URL(url=\"http://c\"))\r\n    user2.urls.append(URL(url=\"http://d\"))\r\n\r\n    db.session.add(user1)\r\n    db.session.add(user2)\r\n    db.session.commit()\r\n\r\n\r\nclass UserSchema(ModelSchema):\r\n    urls = fields.Nested('URLSchema', many=True)\r\n\r\n    class Meta:\r\n        model = User\r\n        sqla_session = db.session\r\n\r\n\r\nclass URLSchema(ModelSchema):\r\n    class Meta:\r\n        model = URL\r\n        sqla_session = db.session\r\n\r\n\r\nuser_schema = UserSchema()\r\n\r\n\r\n@app.route(\"/\")\r\ndef hello():\r\n    user = User.query.options(db.joinedload('urls')).filter_by(id=1).first()\r\n    user_dump = user_schema.dump(user)\r\n    user_schema.load(user_dump.data, instance=user)\r\n    for query in get_debug_queries():\r\n        print(\"%s %r\\n------\" % (query.statement, query.parameters))\r\n\r\n    return ''\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    db.drop_all()\r\n    db.create_all()\r\n    create_user()\r\n    app.run(port=9999, debug=True)\r\n\r\n```\r\n\r\nResults in:\r\n\r\n```\r\nSELECT anon_1.user_id AS anon_1_user_id, anon_1.user_username AS anon_1_user_username, anon_1.user_email AS anon_1_user_email, anon_1.user_created_datetime AS anon_1_user_created_datetime, anon_1.user_updated_datetime AS anon_1_user_updated_datetime, \"URL_1\".id AS \"URL_1_id\", \"URL_1\".user_id AS \"URL_1_user_id\", \"URL_1\".url AS \"URL_1_url\"\r\nFROM (SELECT user.id AS user_id, user.username AS user_username, user.email AS user_email, user.created_datetime AS user_created_datetime, user.updated_datetime AS user_updated_datetime\r\nFROM user\r\nWHERE user.id = ?\r\n LIMIT ? OFFSET ?) AS anon_1 LEFT OUTER JOIN \"URL\" AS \"URL_1\" ON anon_1.user_id = \"URL_1\".user_id (1, 1, 0)\r\n------\r\nSELECT user.id AS user_id, user.username AS user_username, user.email AS user_email, user.created_datetime AS user_created_datetime, user.updated_datetime AS user_updated_datetime\r\nFROM user\r\nWHERE user.id = ? (1,)\r\n------\r\nSELECT user.id AS user_id, user.username AS user_username, user.email AS user_email, user.created_datetime AS user_created_datetime, user.updated_datetime AS user_updated_datetime\r\nFROM user\r\nWHERE user.id = ? (1,)\r\n------\r\nSELECT \"URL\".id AS \"URL_id\", \"URL\".user_id AS \"URL_user_id\", \"URL\".url AS \"URL_url\"\r\nFROM \"URL\"\r\nWHERE \"URL\".id = ?\r\n LIMIT ? OFFSET ? (1, 1, 0)\r\n------\r\nSELECT \"URL\".id AS \"URL_id\", \"URL\".user_id AS \"URL_user_id\", \"URL\".url AS \"URL_url\"\r\nFROM \"URL\"\r\nWHERE \"URL\".id = ?\r\n LIMIT ? OFFSET ? (2, 1, 0)\r\n------\r\n127.0.0.1 - - [10/Mar/2017 10:32:47] \"GET / HTTP/1.1\" 200 -\r\n```\r\n\r\nIt's a bit hard to parse but you might notice that the `dump` part  is 1 query with an `OUTER JOIN` which is exactly what I expected, however when loading with an attached instance it performs these additional queries.\r\n\r\nI think I understand why this happens, you need this because you might need to do an update, but if the instance is given with all the associated objects, the queries above are not really need. \r\n\r\nIn an ideal world I would expect: No queries to the DB when doing dump/load when `instance` is provided.\r\n\r\nIs there a way to have no side effects when doing `load`? This is a constant source of big bugs for us.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/105", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/105/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/105/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/105", "id": 213372844, "node_id": "MDU6SXNzdWUyMTMzNzI4NDQ=", "number": 105, "title": "Compatibility issue with marshmallow 2.13.2 onwards", "user": {"login": "BdeUtra", "id": 1216960, "node_id": "MDQ6VXNlcjEyMTY5NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1216960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BdeUtra", "html_url": "https://github.com/BdeUtra", "followers_url": "https://api.github.com/users/BdeUtra/followers", "following_url": "https://api.github.com/users/BdeUtra/following{/other_user}", "gists_url": "https://api.github.com/users/BdeUtra/gists{/gist_id}", "starred_url": "https://api.github.com/users/BdeUtra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BdeUtra/subscriptions", "organizations_url": "https://api.github.com/users/BdeUtra/orgs", "repos_url": "https://api.github.com/users/BdeUtra/repos", "events_url": "https://api.github.com/users/BdeUtra/events{/privacy}", "received_events_url": "https://api.github.com/users/BdeUtra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-10T15:35:55Z", "updated_at": "2017-03-10T15:49:48Z", "closed_at": "2017-03-10T15:49:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is an issue with releases on pypi has the dependencies mention `marshmallow>=2.0.0`\r\n\r\n`ma.SchemaOpts` has a new argument (`ordered=False`) on it's `__init__` signature.\r\nSee https://github.com/marshmallow-code/marshmallow/commit/3ffb74d71b5e647ddc3793f464e271a2eeb98bad\r\n\r\nAdding the field to `SchemaOpts` and `TableOpts` seems to fix it and tests pass.\r\n\r\nI've wrote a potential solution https://github.com/BdeUtra/marshmallow-sqlalchemy/commit/e65b0f8ec8324e767f57e03a0a8ace5ad4d41377\r\n\r\nIf useful let me know and I'll create a PR", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/104", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/104/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/104/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/104", "id": 208444891, "node_id": "MDU6SXNzdWUyMDg0NDQ4OTE=", "number": 104, "title": "avoiding circular imports", "user": {"login": "aminalaee", "id": 19784933, "node_id": "MDQ6VXNlcjE5Nzg0OTMz", "avatar_url": "https://avatars0.githubusercontent.com/u/19784933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aminalaee", "html_url": "https://github.com/aminalaee", "followers_url": "https://api.github.com/users/aminalaee/followers", "following_url": "https://api.github.com/users/aminalaee/following{/other_user}", "gists_url": "https://api.github.com/users/aminalaee/gists{/gist_id}", "starred_url": "https://api.github.com/users/aminalaee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aminalaee/subscriptions", "organizations_url": "https://api.github.com/users/aminalaee/orgs", "repos_url": "https://api.github.com/users/aminalaee/repos", "events_url": "https://api.github.com/users/aminalaee/events{/privacy}", "received_events_url": "https://api.github.com/users/aminalaee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-17T13:40:51Z", "updated_at": "2017-03-20T22:01:41Z", "closed_at": "2017-03-20T22:01:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Flask app that has a structure like the following:\r\n\r\n\r\n`project`\r\n  -- `users`\r\n    `__init__.py`\r\n    `models.py`\r\n    `views.py`\r\n    `serializers.py`\r\n  -- `genres`\r\n     `__init__.py`\r\n    `models.py`\r\n    `views.py`\r\n    `serializers.py`\r\n\r\nI have a ModelSchema class in one of my folders that uses models.py from the other folder. SQLAlchemy by default solves this problem by using the string name of the class but I get circular import errors in Marshmallow SQLAlchemy. Is there a way to solve this? Or shoud I change my structure? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/102", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/102/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/102/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/102", "id": 206268837, "node_id": "MDU6SXNzdWUyMDYyNjg4Mzc=", "number": 102, "title": "ModelSchema shouldn't take into account private _attributes", "user": {"login": "alexandre-janniaux", "id": 413037, "node_id": "MDQ6VXNlcjQxMzAzNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/413037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandre-janniaux", "html_url": "https://github.com/alexandre-janniaux", "followers_url": "https://api.github.com/users/alexandre-janniaux/followers", "following_url": "https://api.github.com/users/alexandre-janniaux/following{/other_user}", "gists_url": "https://api.github.com/users/alexandre-janniaux/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandre-janniaux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandre-janniaux/subscriptions", "organizations_url": "https://api.github.com/users/alexandre-janniaux/orgs", "repos_url": "https://api.github.com/users/alexandre-janniaux/repos", "events_url": "https://api.github.com/users/alexandre-janniaux/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandre-janniaux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-08T17:33:47Z", "updated_at": "2020-02-10T02:43:32Z", "closed_at": "2020-02-10T02:43:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI work on a project with marshmallow_sqlalchemy and sqlalchemy_i18n. When I try to build a schema using ModelSchema and Translatable (from i18n), it outputs the different translations field added by sqlalchemy_i18n, even though an underscore prefixes them. After reading the code of both sqlalchemy projects, I understood these fields are taken into account because they are manytomany relations, so they account for a field of sqlalchemy. \r\n\r\nMy understanding of PEP8 for naming style (https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles) is that having a leading underscore for attributes means they should only be used internally, and I find strange that marshmallow_sqlalchemy has not this behavior.\r\n\r\nI understand there might be practical reasons for adding attributes with a leading underscore, but shouldn't it be explicitly added to the schema, or with an option set to true instead ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/101", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/101/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/101/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/101", "id": 204739013, "node_id": "MDU6SXNzdWUyMDQ3MzkwMTM=", "number": 101, "title": "API example to update existing instance does not work for partial updates", "user": {"login": "nielstuts", "id": 23694703, "node_id": "MDQ6VXNlcjIzNjk0NzAz", "avatar_url": "https://avatars2.githubusercontent.com/u/23694703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nielstuts", "html_url": "https://github.com/nielstuts", "followers_url": "https://api.github.com/users/nielstuts/followers", "following_url": "https://api.github.com/users/nielstuts/following{/other_user}", "gists_url": "https://api.github.com/users/nielstuts/gists{/gist_id}", "starred_url": "https://api.github.com/users/nielstuts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nielstuts/subscriptions", "organizations_url": "https://api.github.com/users/nielstuts/orgs", "repos_url": "https://api.github.com/users/nielstuts/repos", "events_url": "https://api.github.com/users/nielstuts/events{/privacy}", "received_events_url": "https://api.github.com/users/nielstuts/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-01T23:35:42Z", "updated_at": "2020-02-10T02:41:48Z", "closed_at": "2020-02-10T02:41:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trying to update an existing instance as shown [here](https://marshmallow-sqlalchemy.readthedocs.io/en/latest/_modules/marshmallow_sqlalchemy/schema.html#ModelSchema) does not work for partial updates since it fails validation due to missing attributes.\r\n\r\nSay the User model also has a required address field, and you execute this:\r\n\r\n`existing_user = schema.load({'name': 'Bill'}, instance=User.query.first())`\r\n\r\nThis will fail validation since the only data that is passed to the validator is the 'name' field. The load function in marsmallow.schema will ultimately fail when calling _unmarshal since it verifies all of a schema's fields but only the name will validate. An easy fix is updating the data dict in the load function in marshmallow_sqlalchemy.schema when that function is passed an existing instance. This works fine (note I'm using data.to_dict() since my data is an ImmutableMultiDict:\r\n\r\n```\r\n    def load(self, data, session=None, instance=None, *args, **kwargs):\r\n        \"\"\"Deserialize data to internal representation.\r\n\r\n        :param session: Optional SQLAlchemy session.\r\n        :param instance: Optional existing instance to modify.\r\n        \"\"\"\r\n        self.session = session or self.session\r\n        self.instance = instance or self.instance\r\n        if not self.session:\r\n            raise ValueError('Deserialization requires a session')\r\n\r\n        if instance is not None:\r\n            instance_data = self.dump(instance).data\r\n            instance_data.update(data.to_dict())\r\n            data = instance_data\r\n\r\n        ret = super(ModelSchema, self).load(data, *args, **kwargs)\r\n        self.instance = None\r\n        return ret\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/98", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/98/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/98/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/98", "id": 186883918, "node_id": "MDU6SXNzdWUxODY4ODM5MTg=", "number": 98, "title": "Add ability to disable relationships", "user": {"login": "dusktreader", "id": 713676, "node_id": "MDQ6VXNlcjcxMzY3Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/713676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dusktreader", "html_url": "https://github.com/dusktreader", "followers_url": "https://api.github.com/users/dusktreader/followers", "following_url": "https://api.github.com/users/dusktreader/following{/other_user}", "gists_url": "https://api.github.com/users/dusktreader/gists{/gist_id}", "starred_url": "https://api.github.com/users/dusktreader/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dusktreader/subscriptions", "organizations_url": "https://api.github.com/users/dusktreader/orgs", "repos_url": "https://api.github.com/users/dusktreader/repos", "events_url": "https://api.github.com/users/dusktreader/events{/privacy}", "received_events_url": "https://api.github.com/users/dusktreader/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445195, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTU=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2016-11-02T18:30:23Z", "updated_at": "2020-02-09T21:17:48Z", "closed_at": "2020-02-09T21:14:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The include_fk option is really nice when producing flat serializations (non-nested). However, there's the issue of the foreign keys showing up twice: once as the proper foreign key name, and once as the relationship from the sqlalchemy model.\r\n\r\nPlease add either another option to exclude relationships or to have the include-fk option automatically get rid of simple relationship attributes that are just wrapping a foreign key", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/96", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/96/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/96/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/96", "id": 186563436, "node_id": "MDU6SXNzdWUxODY1NjM0MzY=", "number": 96, "title": "Deserialization with relationships always triggers SqlAlchemy history change", "user": {"login": "nochristrequired", "id": 7018842, "node_id": "MDQ6VXNlcjcwMTg4NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7018842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nochristrequired", "html_url": "https://github.com/nochristrequired", "followers_url": "https://api.github.com/users/nochristrequired/followers", "following_url": "https://api.github.com/users/nochristrequired/following{/other_user}", "gists_url": "https://api.github.com/users/nochristrequired/gists{/gist_id}", "starred_url": "https://api.github.com/users/nochristrequired/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nochristrequired/subscriptions", "organizations_url": "https://api.github.com/users/nochristrequired/orgs", "repos_url": "https://api.github.com/users/nochristrequired/repos", "events_url": "https://api.github.com/users/nochristrequired/events{/privacy}", "received_events_url": "https://api.github.com/users/nochristrequired/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-01T15:28:48Z", "updated_at": "2020-02-10T03:57:20Z", "closed_at": "2020-02-10T03:57:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have tables with relationships. The issue I'm seeing is that the child relationships seem to not be evaluated based on their values before a new instance of that relationship is merged on top. I can see in the SQLAlchemy history API that the object references change, but no values have changed - this causes SQLAlchemy to generate unnecessary update statements.\r\n\r\nI am wondering if someone can advise on how to use Marshmallow to check the values first and not create a replacement SQLAlchemy child object. Is it possible to somehow leverage pre_load to check and throw out the values or prevent mm-sqlalchemy from creating the object that way?\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/87", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/87/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/87/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/87", "id": 182426132, "node_id": "MDU6SXNzdWUxODI0MjYxMzI=", "number": 87, "title": "JSONB serialization", "user": {"login": "kmcintyre", "id": 1017886, "node_id": "MDQ6VXNlcjEwMTc4ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1017886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcintyre", "html_url": "https://github.com/kmcintyre", "followers_url": "https://api.github.com/users/kmcintyre/followers", "following_url": "https://api.github.com/users/kmcintyre/following{/other_user}", "gists_url": "https://api.github.com/users/kmcintyre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcintyre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcintyre/subscriptions", "organizations_url": "https://api.github.com/users/kmcintyre/orgs", "repos_url": "https://api.github.com/users/kmcintyre/repos", "events_url": "https://api.github.com/users/kmcintyre/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcintyre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-10-12T03:23:50Z", "updated_at": "2016-10-15T04:05:09Z", "closed_at": "2016-10-15T04:05:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using posgres \n\n<pre>\nclass Entity(Base):\n    id = Column(Integer, primary_key=True)\n    properties = Column(JSONB)\n</pre>\n\n\nbut when I serialize to json I do not see the properties key.  \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/86", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/86/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/86/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/86", "id": 181996849, "node_id": "MDU6SXNzdWUxODE5OTY4NDk=", "number": 86, "title": "Tests fail in TestModelFieldConversion.test_sets_enum_choices with python 2.7 and 3.4", "user": {"login": "dev-zero", "id": 11307, "node_id": "MDQ6VXNlcjExMzA3", "avatar_url": "https://avatars2.githubusercontent.com/u/11307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dev-zero", "html_url": "https://github.com/dev-zero", "followers_url": "https://api.github.com/users/dev-zero/followers", "following_url": "https://api.github.com/users/dev-zero/following{/other_user}", "gists_url": "https://api.github.com/users/dev-zero/gists{/gist_id}", "starred_url": "https://api.github.com/users/dev-zero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dev-zero/subscriptions", "organizations_url": "https://api.github.com/users/dev-zero/orgs", "repos_url": "https://api.github.com/users/dev-zero/repos", "events_url": "https://api.github.com/users/dev-zero/events{/privacy}", "received_events_url": "https://api.github.com/users/dev-zero/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-10-10T11:55:49Z", "updated_at": "2016-10-23T22:08:55Z", "closed_at": "2016-10-23T22:08:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n$ EPYTHON=python2.7 py.test\n============================================================= test session starts ==============================================================\nplatform linux2 -- Python 2.7.12, pytest-2.8.7, py-1.4.31, pluggy-0.3.1\nrootdir: /home/tiziano/work/gentoo/marshmallow-sqlalchemy, inifile: \nplugins: mock-0.11.0, cram-0.1.1, capturelog-0.7, xdist-1.14, flaky-3.1.0, hypothesis-3.1.0, cov-2.2.1\ncollected 70 items \n\ntests/test_marshmallow_sqlalchemy.py ......F...............................................................\n===Flaky Test Report===\n\n\n===End Flaky Test Report===\n\n=================================================================== FAILURES ===================================================================\n_______________________________________________ TestModelFieldConversion.test_sets_enum_choices ________________________________________________\n\nself = <tests.test_marshmallow_sqlalchemy.TestModelFieldConversion instance at 0x7fc50d54cc20>\nmodels = <tests.test_marshmallow_sqlalchemy._models object at 0x7fc50d516a10>\n\n    def test_sets_enum_choices(self, models):\n        fields_ = fields_for_model(models.Course)\n        validator = contains_validator(fields_['level'], validate.OneOf)\n        assert validator\n>       assert validator.choices == ('Primary', 'Secondary')\nE       assert ['Primary', 'Secondary'] == ('Primary', 'Secondary')\nE         Use -v to get the full diff\n\ntests/test_marshmallow_sqlalchemy.py:311: AssertionError\n============================================ 1 failed, 69 passed, 1 pytest-warnings in 2.70 seconds ============================================\n```\n\nrespectively\n\n```\n$ EPYTHON=python3.4 py.test \n============================================================= test session starts ==============================================================\nplatform linux -- Python 3.4.5, pytest-2.8.7, py-1.4.31, pluggy-0.3.1\nrootdir: /home/tiziano/work/gentoo/marshmallow-sqlalchemy, inifile: \nplugins: mock-0.11.0, cram-0.1.1, capturelog-0.7, xdist-1.14, flaky-3.1.0, hypothesis-3.1.0, cov-2.2.1\ncollected 70 items \n\ntests/test_marshmallow_sqlalchemy.py ......F...............................................................\n===Flaky Test Report===\n\n\n===End Flaky Test Report===\n\n=================================================================== FAILURES ===================================================================\n_______________________________________________ TestModelFieldConversion.test_sets_enum_choices ________________________________________________\n\nself = <tests.test_marshmallow_sqlalchemy.TestModelFieldConversion object at 0x7f48b98da438>\nmodels = <tests.test_marshmallow_sqlalchemy.models.<locals>._models object at 0x7f48b99000f0>\n\n    def test_sets_enum_choices(self, models):\n        fields_ = fields_for_model(models.Course)\n        validator = contains_validator(fields_['level'], validate.OneOf)\n        assert validator\n>       assert validator.choices == ('Primary', 'Secondary')\nE       assert ['Primary', 'Secondary'] == ('Primary', 'Secondary')\nE         Use -v to get the full diff\n\ntests/test_marshmallow_sqlalchemy.py:311: AssertionError\n============================================ 1 failed, 69 passed, 1 pytest-warnings in 3.13 seconds ============================================\n```\n\n... with latest SQLAlchemy-1.1.1 and Marshmallow-2.10.3.\n\nThe succeed with Python-3.5\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/84", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/84/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/84/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/84", "id": 181887751, "node_id": "MDU6SXNzdWUxODE4ODc3NTE=", "number": 84, "title": "Custom SQLAlchemy types with a python_type that is not a class fail on init", "user": {"login": "fuhrysteve", "id": 67489, "node_id": "MDQ6VXNlcjY3NDg5", "avatar_url": "https://avatars2.githubusercontent.com/u/67489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuhrysteve", "html_url": "https://github.com/fuhrysteve", "followers_url": "https://api.github.com/users/fuhrysteve/followers", "following_url": "https://api.github.com/users/fuhrysteve/following{/other_user}", "gists_url": "https://api.github.com/users/fuhrysteve/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuhrysteve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuhrysteve/subscriptions", "organizations_url": "https://api.github.com/users/fuhrysteve/orgs", "repos_url": "https://api.github.com/users/fuhrysteve/repos", "events_url": "https://api.github.com/users/fuhrysteve/events{/privacy}", "received_events_url": "https://api.github.com/users/fuhrysteve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-10-09T13:46:45Z", "updated_at": "2016-10-21T02:04:07Z", "closed_at": "2016-10-21T02:04:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let me start by saying this might not be a bug.\n\nLooks like https://github.com/kelvinhammond/marshmallow-sqlalchemy/commit/12da838c8ca3e02516dd83852cef870d1d596b1b breaks compatibility with sqlalchemy-utils (particularly `PhoneNumberType`). It seems like a bug in sqlalchemy-utils where it has a `python_type` of `method` (rather than a class).\n\nI have a pull request which should fix the issue:\nkvesteri/sqlalchemy-utils#248\n\nI think this is a bug in sqlalchemy-utils, but it might also be reasonable to be a little more forgiving by gracefully handling cases where `issubclass` will fail. Tough call - on the one hand it is good to be accommodating but on the other hand we should trust that people are adhering to what appears to be a pretty definitive interface definition:\n\nhttp://docs.sqlalchemy.org/en/latest/core/type_api.html#sqlalchemy.types.TypeEngine.python_type\n\nHere is the relevant stack trace:\n\n``` python\n  File \"marshmallow_sqlalchemy/convert.py\", line 219, in _add_column_kwargs\n    if not python_type or not issubclass(python_type, uuid.UUID):\nTypeError: issubclass() arg 1 must be a class\n\n(Pdb) python_type\n<bound method PhoneNumberType.python_type of PhoneNumberType(length=20)>\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/81", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/81/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/81/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/81", "id": 180199384, "node_id": "MDU6SXNzdWUxODAxOTkzODQ=", "number": 81, "title": "Allow overriding class with field_for", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-30T01:15:26Z", "updated_at": "2016-10-02T02:18:04Z", "closed_at": "2016-10-02T02:18:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "For example I have a JSONB field on the model which is currently mapped to `Raw`. I would like to make it map to `Dict`. Ideally I could write:\n\n``` python\ncontent = field_for(MyModel, 'content', klass=fields.Dict)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/79", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/79/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/79/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/79", "id": 171501308, "node_id": "MDU6SXNzdWUxNzE1MDEzMDg=", "number": 79, "title": "Support object polymorphism", "user": {"login": "abendebury", "id": 146027, "node_id": "MDQ6VXNlcjE0NjAyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/146027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abendebury", "html_url": "https://github.com/abendebury", "followers_url": "https://api.github.com/users/abendebury/followers", "following_url": "https://api.github.com/users/abendebury/following{/other_user}", "gists_url": "https://api.github.com/users/abendebury/gists{/gist_id}", "starred_url": "https://api.github.com/users/abendebury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abendebury/subscriptions", "organizations_url": "https://api.github.com/users/abendebury/orgs", "repos_url": "https://api.github.com/users/abendebury/repos", "events_url": "https://api.github.com/users/abendebury/events{/privacy}", "received_events_url": "https://api.github.com/users/abendebury/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-16T19:47:29Z", "updated_at": "2020-02-10T03:08:42Z", "closed_at": "2020-02-10T03:08:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my application, I have an API endpoint like so:\n\n`/api/activities/`\n\nIn my database, I have several different types of Activity models, all inheriting from a common class. I made a schema like so:\n\n```\nclass ActivitySchema(ModelSchema):\n    class Meta:\n        model = models.Activity\n```\n\nAnd then have flask-restful handle the api endpoint itself, querying the database and passing the objects to marshmallow-alchemy.\n\nHowever, marshmallow-sqlalchemy serializes the objects as if they were all of the base Activity type. It would be nice if there was some support like this:\n\n```\nclass ActivitySchema(ModelSchema):\n    class Meta:\n        model = models.Activity\n        generate_polymorphic_schemas = True\n```\n\nWhich would use sqlalchemy's inspection to view all polymorpic subclasses of `Meta.model`, store them on `ActivitySchema`, and then when serializing/deserializing use the appropriate class.\n\nThoughts?\n\nIf this is a desirable feature, I can try to make a PR implementing such functionality.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/78", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/78/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/78/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/78", "id": 168733678, "node_id": "MDU6SXNzdWUxNjg3MzM2Nzg=", "number": 78, "title": "ModelSchema.load(instance=None) call wont overridden .instance ", "user": {"login": "georgexsh", "id": 32751, "node_id": "MDQ6VXNlcjMyNzUx", "avatar_url": "https://avatars3.githubusercontent.com/u/32751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgexsh", "html_url": "https://github.com/georgexsh", "followers_url": "https://api.github.com/users/georgexsh/followers", "following_url": "https://api.github.com/users/georgexsh/following{/other_user}", "gists_url": "https://api.github.com/users/georgexsh/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgexsh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgexsh/subscriptions", "organizations_url": "https://api.github.com/users/georgexsh/orgs", "repos_url": "https://api.github.com/users/georgexsh/repos", "events_url": "https://api.github.com/users/georgexsh/events{/privacy}", "received_events_url": "https://api.github.com/users/georgexsh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 204445193, "node_id": "MDU6TGFiZWwyMDQ0NDUxOTM=", "url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-08-01T20:23:43Z", "updated_at": "2017-06-30T11:16:38Z", "closed_at": "2017-01-05T10:34:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "as in `ModelSchema.load`\r\n\r\n``` python\r\nself.instance = instance or self.instance\r\n```\r\n\r\nbecause I instantiation schema class in module level, reuse them  in multiple places and across requests,\r\nthe `.instance` value firstly set will persists in following `load()` calls, regardless  `load(instance=None)`, this will trigger nasty bug as its value depends on request order.\r\n\r\nis there a good reason for this behavior and not just set `self.instance` from parameter?\r\nor should I instantiation a new schema object before any `load` or `dump` call? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/77", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/77/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/77/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/77", "id": 168542339, "node_id": "MDU6SXNzdWUxNjg1NDIzMzk=", "number": 77, "title": "Initial Update", "user": {"login": "pyup-bot", "id": 16239342, "node_id": "MDQ6VXNlcjE2MjM5MzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/16239342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pyup-bot", "html_url": "https://github.com/pyup-bot", "followers_url": "https://api.github.com/users/pyup-bot/followers", "following_url": "https://api.github.com/users/pyup-bot/following{/other_user}", "gists_url": "https://api.github.com/users/pyup-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/pyup-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pyup-bot/subscriptions", "organizations_url": "https://api.github.com/users/pyup-bot/orgs", "repos_url": "https://api.github.com/users/pyup-bot/repos", "events_url": "https://api.github.com/users/pyup-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/pyup-bot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-07-31T22:42:06Z", "updated_at": "2016-07-31T22:42:57Z", "closed_at": "2016-07-31T22:42:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi \ud83d\udc4a\n\nThis is my first visit to this fine repo, but it seems you have been working hard to keep all dependencies updated so far.\n\nOnce you have closed this issue, I'll create seperate pull requests for every update as soon as I find one.\n\nThat's it for now!\n\nHappy merging! \ud83e\udd16\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/74", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/74/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/74/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/74", "id": 167755721, "node_id": "MDU6SXNzdWUxNjc3NTU3MjE=", "number": 74, "title": "Use with sqlalchemy-1.1 and JSON field type", "user": {"login": "ewittle", "id": 1630612, "node_id": "MDQ6VXNlcjE2MzA2MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1630612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ewittle", "html_url": "https://github.com/ewittle", "followers_url": "https://api.github.com/users/ewittle/followers", "following_url": "https://api.github.com/users/ewittle/following{/other_user}", "gists_url": "https://api.github.com/users/ewittle/gists{/gist_id}", "starred_url": "https://api.github.com/users/ewittle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ewittle/subscriptions", "organizations_url": "https://api.github.com/users/ewittle/orgs", "repos_url": "https://api.github.com/users/ewittle/repos", "events_url": "https://api.github.com/users/ewittle/events{/privacy}", "received_events_url": "https://api.github.com/users/ewittle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-27T02:32:27Z", "updated_at": "2016-07-31T21:12:50Z", "closed_at": "2016-07-31T21:12:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If you use sqlalchemy 1.1 (b2 in my case) with the new JSON field type, you'll get a type conversion error:\n\nmarshmallow_sqlalchemy.exceptions.ModelConversionError: Could not find field column of type <class 'sqlalchemy.sql.sqltypes.JSON'>.\n\nIn Convert.py, I added \",\n        sa.JSON: fields.Raw\" to the end of SQLA_TYPE_MAPPING in class ModelConverter, and that seems to do the trick (at least so far)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/73", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/73/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/73/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/73", "id": 165756786, "node_id": "MDU6SXNzdWUxNjU3NTY3ODY=", "number": 73, "title": "Checking unique constraints", "user": {"login": "Darkheir", "id": 679995, "node_id": "MDQ6VXNlcjY3OTk5NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/679995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Darkheir", "html_url": "https://github.com/Darkheir", "followers_url": "https://api.github.com/users/Darkheir/followers", "following_url": "https://api.github.com/users/Darkheir/following{/other_user}", "gists_url": "https://api.github.com/users/Darkheir/gists{/gist_id}", "starred_url": "https://api.github.com/users/Darkheir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Darkheir/subscriptions", "organizations_url": "https://api.github.com/users/Darkheir/orgs", "repos_url": "https://api.github.com/users/Darkheir/repos", "events_url": "https://api.github.com/users/Darkheir/events{/privacy}", "received_events_url": "https://api.github.com/users/Darkheir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-15T10:27:55Z", "updated_at": "2018-12-04T18:21:36Z", "closed_at": "2018-12-04T18:21:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI have just a small question, is it actually possible to check unique constraint during validation ?\n\nIn my current application during the load of the json data everything is going well, and when I'm trying to persist the data I obtain an Integrity error since the unique filed value is already taken by another row.\n\nps: Thank you for this module that is really useful\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/71", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/71/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/71/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/71", "id": 160482460, "node_id": "MDU6SXNzdWUxNjA0ODI0NjA=", "number": 71, "title": "Validating multi-table json", "user": {"login": "EdCampion", "id": 146034, "node_id": "MDQ6VXNlcjE0NjAzNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/146034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdCampion", "html_url": "https://github.com/EdCampion", "followers_url": "https://api.github.com/users/EdCampion/followers", "following_url": "https://api.github.com/users/EdCampion/following{/other_user}", "gists_url": "https://api.github.com/users/EdCampion/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdCampion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdCampion/subscriptions", "organizations_url": "https://api.github.com/users/EdCampion/orgs", "repos_url": "https://api.github.com/users/EdCampion/repos", "events_url": "https://api.github.com/users/EdCampion/events{/privacy}", "received_events_url": "https://api.github.com/users/EdCampion/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-15T17:44:56Z", "updated_at": "2016-07-29T17:10:19Z", "closed_at": "2016-07-29T17:10:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there anyway of using marshmallow-sqlalchemy to validate json which contains data for multiple tables?\n\nExample:\nGiven 2 tables Question and InputQuestion where InputQuestion is an extension of Question,\nthe following json is posted\n\n```\n{  \n    \"question\": {\n        \"question_type_id\": 1,\n        \"client_date_created\": \"17:25:12.517000\",\n        \"company_id\": 74\n         },\n    \"input_question\": {\n        \"input_question_type_id\": 1,\n        \"require_input_if_positive\": false,\n        \"device_input_type_id\": 1,\n        \"require_photo_if_positive\": false\n    }\n}\n```\n\nMy naive and unsuccessful attempt to validate this was to setup a schema, with nested instances of\nModelSchema classes.\n\n``` python\nclass Linked_Checklist_Input_Question_Schema(Schema):\n    question =  fields.Nested(Checklist_Question_Schema)\n    input_question = fields.Nested(Checklist_Input_Question)\n\n#test link schema\nschema = Linked_Checklist_Input_Question_Schema()\n#load example json\nresult = schema.load(data)\n#which gives us as result.errors\n{u'_schema': [u'Invalid type.']}\n```\n\n`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/67", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/67/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/67/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/67", "id": 156190520, "node_id": "MDU6SXNzdWUxNTYxOTA1MjA=", "number": 67, "title": "Schema deserialisation with defined session and nested field throws an exception", "user": {"login": "nickw444", "id": 1289759, "node_id": "MDQ6VXNlcjEyODk3NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1289759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickw444", "html_url": "https://github.com/nickw444", "followers_url": "https://api.github.com/users/nickw444/followers", "following_url": "https://api.github.com/users/nickw444/following{/other_user}", "gists_url": "https://api.github.com/users/nickw444/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickw444/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickw444/subscriptions", "organizations_url": "https://api.github.com/users/nickw444/orgs", "repos_url": "https://api.github.com/users/nickw444/repos", "events_url": "https://api.github.com/users/nickw444/events{/privacy}", "received_events_url": "https://api.github.com/users/nickw444/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-05-23T02:45:24Z", "updated_at": "2019-08-31T18:04:05Z", "closed_at": "2019-08-31T18:04:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is intended functionality, however the code below throws `ValueError: Deserialization requires a session` when trying to load data into a nested object. \n\nI would expect passing a session would propagate to nested fields, however this doesn't seem to be the case. Is this by design?\n\nIf i remove `followup` (the nested field) from the `only=` property, the data loads fine from the non-nested field.\n\n``` python\n\nclass FollowUp(ModelSchema):\n    reasonCode =fields.String(attribute='reason_code')\n    comment = fields.String()\n\nclass Occurence(ModelSchema):\n    #... other fields before ...\n    followup = fields.Nested(FollowUp())\n    status = fields.String()\n\n# Inside my request handler:\nobj = DBOccurence.query.get_or_404(occ_id)\nres = Occurence(only=['status', 'followup']).load(\n            request.json,\n            instance=obj,\n            session=current_app.db.session\n        )\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/66", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/66/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/66/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/66", "id": 154592779, "node_id": "MDU6SXNzdWUxNTQ1OTI3Nzk=", "number": 66, "title": "Documentation issue", "user": {"login": "Zitrax", "id": 115442, "node_id": "MDQ6VXNlcjExNTQ0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/115442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zitrax", "html_url": "https://github.com/Zitrax", "followers_url": "https://api.github.com/users/Zitrax/followers", "following_url": "https://api.github.com/users/Zitrax/following{/other_user}", "gists_url": "https://api.github.com/users/Zitrax/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zitrax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zitrax/subscriptions", "organizations_url": "https://api.github.com/users/Zitrax/orgs", "repos_url": "https://api.github.com/users/Zitrax/repos", "events_url": "https://api.github.com/users/Zitrax/events{/privacy}", "received_events_url": "https://api.github.com/users/Zitrax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-12T22:08:27Z", "updated_at": "2016-05-30T22:30:05Z", "closed_at": "2016-05-30T22:30:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "http://marshmallow-sqlalchemy.readthedocs.io/en/latest/recipes.html#base-schema-ii say that BaseOpts should use SchemaOpts, but with that I get:\n\nAttributeError: 'BaseOpts' object has no attribute 'model_converter'\n\nIf I change it to ModelSchemaOpts it works though.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/65", "repository_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy", "labels_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/65/comments", "events_url": "https://api.github.com/repos/marshmallow-code/marshmallow-sqlalchemy/issues/65/events", "html_url": "https://github.com/marshmallow-code/marshmallow-sqlalchemy/issues/65", "id": 154522978, "node_id": "MDU6SXNzdWUxNTQ1MjI5Nzg=", "number": 65, "title": "Incorrect SQLAlchemy dependency", "user": {"login": "alejom99", "id": 4347903, "node_id": "MDQ6VXNlcjQzNDc5MDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4347903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alejom99", "html_url": "https://github.com/alejom99", "followers_url": "https://api.github.com/users/alejom99/followers", "following_url": "https://api.github.com/users/alejom99/following{/other_user}", "gists_url": "https://api.github.com/users/alejom99/gists{/gist_id}", "starred_url": "https://api.github.com/users/alejom99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alejom99/subscriptions", "organizations_url": "https://api.github.com/users/alejom99/orgs", "repos_url": "https://api.github.com/users/alejom99/repos", "events_url": "https://api.github.com/users/alejom99/events{/privacy}", "received_events_url": "https://api.github.com/users/alejom99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-12T16:14:54Z", "updated_at": "2016-05-30T22:38:59Z", "closed_at": "2016-05-30T22:38:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The convert.py file, at line 58 says:\n\n`\npostgresql.JSONB: fields.Raw\n`\n\nBut postgresql.JSONB is not supported until SQLAlchemy 0.9.7. Yet, the setup.py lists SQLAlchemy>=0.7. So, any version between 0.7 and 0.9.6 is not really supported.\n", "performed_via_github_app": null, "score": 1.0}]}