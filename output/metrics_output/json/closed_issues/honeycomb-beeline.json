{"total_count": 19, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/101", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/101/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/101/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/101", "id": 574384502, "node_id": "MDU6SXNzdWU1NzQzODQ1MDI=", "number": 101, "title": "Automatically decorate Flask routes", "user": {"login": "jwise", "id": 87427, "node_id": "MDQ6VXNlcjg3NDI3", "avatar_url": "https://avatars3.githubusercontent.com/u/87427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwise", "html_url": "https://github.com/jwise", "followers_url": "https://api.github.com/users/jwise/followers", "following_url": "https://api.github.com/users/jwise/following{/other_user}", "gists_url": "https://api.github.com/users/jwise/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwise/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwise/subscriptions", "organizations_url": "https://api.github.com/users/jwise/orgs", "repos_url": "https://api.github.com/users/jwise/repos", "events_url": "https://api.github.com/users/jwise/events{/privacy}", "received_events_url": "https://api.github.com/users/jwise/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-03T03:06:16Z", "updated_at": "2020-03-19T15:52:42Z", "closed_at": "2020-03-19T15:52:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently, Flask routes come in with a boring old root function of `flask_http_get`, and that's *all* you get.  There's a `request.path`, but that doesn't really specify a route (especially if I pattern-match things internally -- as I would in https://github.com/honeycombio/examples/blob/39c8732285c5f9cffaa728b7d55840c601039b8e/python-gatekeeper/app.py#L49 ).  It would be much better for the span name to be the function name for the route, or at least for the function name for the route to be part of it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/95", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/95/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/95/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/95", "id": 544397939, "node_id": "MDU6SXNzdWU1NDQzOTc5Mzk=", "number": 95, "title": "ASGI support", "user": {"login": "sugendran", "id": 208311, "node_id": "MDQ6VXNlcjIwODMxMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/208311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sugendran", "html_url": "https://github.com/sugendran", "followers_url": "https://api.github.com/users/sugendran/followers", "following_url": "https://api.github.com/users/sugendran/following{/other_user}", "gists_url": "https://api.github.com/users/sugendran/gists{/gist_id}", "starred_url": "https://api.github.com/users/sugendran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sugendran/subscriptions", "organizations_url": "https://api.github.com/users/sugendran/orgs", "repos_url": "https://api.github.com/users/sugendran/repos", "events_url": "https://api.github.com/users/sugendran/events{/privacy}", "received_events_url": "https://api.github.com/users/sugendran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-01T20:55:36Z", "updated_at": "2020-05-16T08:25:10Z", "closed_at": "2020-05-16T08:25:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using starlette and uvicorn for my python webservice. I've put together a middleware for starlette based on the WSGI one I saw in this codebase.  Worth saying that I have no idea what I'm doing, but I think the code below is what is required.\r\n\r\n```\r\nimport beeline\r\n\r\nfrom starlette.datastructures import URL, Headers\r\nfrom starlette.responses import RedirectResponse\r\nfrom starlette.types import ASGIApp, Receive, Scope, Send\r\n\r\n\r\nclass HoneycombMiddleware:\r\n    def __init__(self, app: ASGIApp) -> None:\r\n        self.app = app\r\n\r\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\r\n\r\n        trace = beeline.start_trace(\r\n            context=self.get_context_from_environ(scope))\r\n\r\n        def send_wrapper(response):\r\n            beeline.add_context_field(\r\n                \"response.status_code\", response.get(\"status\"))\r\n            beeline.finish_trace(trace)\r\n            return send(response)\r\n\r\n        await self.app(scope, receive, send_wrapper)\r\n\r\n    def get_context_from_environ(self, scope):\r\n        request_method = scope.get('method')\r\n        if request_method:\r\n            trace_name = \"starlette_http_%s\" % request_method.lower()\r\n        else:\r\n            trace_name = \"starlette_http\"\r\n\r\n        headers = Headers(scope=scope)\r\n\r\n        return {\r\n            \"name\": trace_name,\r\n            \"type\": \"http_server\",\r\n            \"request.host\": headers.get('host'),\r\n            \"request.method\": request_method,\r\n            \"request.path\": scope.get('path'),\r\n            \"request.content_length\": int(headers.get('content-length', 0)),\r\n            \"request.user_agent\": headers.get('user-agent'),\r\n            \"request.scheme\": scope.get('scheme'),\r\n            \"request.query\": scope.get('query_string').decode(\"ascii\")\r\n        }\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/92", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/92/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/92/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/92", "id": 528677449, "node_id": "MDU6SXNzdWU1Mjg2Nzc0NDk=", "number": 92, "title": "Trace gets broken if only `trace_id` and `parent_id` are present in honeycomb headers", "user": {"login": "MatthewMiele", "id": 8181840, "node_id": "MDQ6VXNlcjgxODE4NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8181840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewMiele", "html_url": "https://github.com/MatthewMiele", "followers_url": "https://api.github.com/users/MatthewMiele/followers", "following_url": "https://api.github.com/users/MatthewMiele/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewMiele/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewMiele/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewMiele/subscriptions", "organizations_url": "https://api.github.com/users/MatthewMiele/orgs", "repos_url": "https://api.github.com/users/MatthewMiele/repos", "events_url": "https://api.github.com/users/MatthewMiele/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewMiele/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T11:57:00Z", "updated_at": "2019-11-27T11:04:25Z", "closed_at": "2019-11-27T11:04:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current version of the Python Beeline expects the Honeycomb tracing headers to contain at least three keys.\r\nhttps://github.com/honeycombio/beeline-python/blob/92b972cf92189d6f88868e477b7666566d63ac3c/beeline/trace.py#L339\r\n\r\nSince `dataset` and `context` are optional there are times when there are only two keys in the header `1;trace_id=xxx,parent_id=xxx`. This makes the Python Beeline start a new trace and not associate itself with the current trace due to the code to extract the current `trace_id` not being executed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/90", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/90/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/90/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/90", "id": 524923275, "node_id": "MDU6SXNzdWU1MjQ5MjMyNzU=", "number": 90, "title": "AttributeError: 'pyodbc.Cursor' object has no attribute 'lastrowid' when using mssql+pyodbc", "user": {"login": "SeanHood", "id": 135392, "node_id": "MDQ6VXNlcjEzNTM5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/135392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SeanHood", "html_url": "https://github.com/SeanHood", "followers_url": "https://api.github.com/users/SeanHood/followers", "following_url": "https://api.github.com/users/SeanHood/following{/other_user}", "gists_url": "https://api.github.com/users/SeanHood/gists{/gist_id}", "starred_url": "https://api.github.com/users/SeanHood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SeanHood/subscriptions", "organizations_url": "https://api.github.com/users/SeanHood/orgs", "repos_url": "https://api.github.com/users/SeanHood/repos", "events_url": "https://api.github.com/users/SeanHood/events{/privacy}", "received_events_url": "https://api.github.com/users/SeanHood/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-19T10:40:31Z", "updated_at": "2019-11-19T23:39:25Z", "closed_at": "2019-11-19T23:39:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm instrumenting one of our applications which uses SQLalchemy but I found when I had `db_events=True` I would get the error `AttributeError: 'pyodbc.Cursor' object has no attribute 'lastrowid'`. From my research I found that this property isn't part of the DB API spec [1](https://www.python.org/dev/peps/pep-0249/#cursor-attributes), nor implemented in pyodbc (the driver we're using).\r\n\r\nThe offending line i found was:\r\nhttps://github.com/honeycombio/beeline-python/blob/4512fc1ee2b3af9f67643600f4a21009dc8a2ec9/beeline/middleware/flask/__init__.py#L151\r\n\r\nCommenting it out I don't get the AttributeError.\r\n\r\nMy proposed fix would be something along these lines:\r\n```diff\r\n-             \"db.last_insert_id\": cursor.lastrowid,\r\n+             \"db.last_insert_id\": getattr(cursor, 'lastrowid', None),\r\n```\r\n\r\nI can submit a PR for this if this fix works for you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/74", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/74/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/74/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/74", "id": 476369653, "node_id": "MDU6SXNzdWU0NzYzNjk2NTM=", "number": 74, "title": "Beeline middleware causes some specific requests to skip parsers & potentially other middleware", "user": {"login": "tarikozket", "id": 1117290, "node_id": "MDQ6VXNlcjExMTcyOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1117290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tarikozket", "html_url": "https://github.com/tarikozket", "followers_url": "https://api.github.com/users/tarikozket/followers", "following_url": "https://api.github.com/users/tarikozket/following{/other_user}", "gists_url": "https://api.github.com/users/tarikozket/gists{/gist_id}", "starred_url": "https://api.github.com/users/tarikozket/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tarikozket/subscriptions", "organizations_url": "https://api.github.com/users/tarikozket/orgs", "repos_url": "https://api.github.com/users/tarikozket/repos", "events_url": "https://api.github.com/users/tarikozket/events{/privacy}", "received_events_url": "https://api.github.com/users/tarikozket/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-02T21:55:20Z", "updated_at": "2019-08-13T21:46:23Z", "closed_at": "2019-08-13T21:46:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of the endpoints we implemented on our Django rest framework application has `POST` method with `multipart/form-data` content type. We also utilize a parser which converts `camelCase` fields in incoming requests to `snake_case` before they hit the `view`s.\r\n\r\nThat one endpoint started failing right after integrating Beeline. Actually, it still receives the request, but when you look into the request, you see that it didn't get modified by the parser. Basically, that specific request skips the parsers and potentially other middleware after Beeline middleware.\r\n\r\nI've spent some time to investigate what was going on and realized that the stream on the request object was exhausted by the line on the below:\r\n\r\n`request.POST.dict()`\r\n\r\nI was able to find some more reference when I went deeper:\r\n\r\n1) The comment in the source code: https://github.com/encode/django-rest-framework/blob/0cc09f0c0dbe4a6552b1a5bbaa4f7f921270698a/rest_framework/request.py#L326\r\n\r\n2) A warning (the green part under `process_view` on the page) on the documentation (this is from Django package for `process_view`, but it still applies): https://docs.djangoproject.com/en/2.2/topics/http/middleware/#process-view", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/72", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/72/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/72/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/72", "id": 473358882, "node_id": "MDU6SXNzdWU0NzMzNTg4ODI=", "number": 72, "title": "Allow easier tweaking of context in Django middleware", "user": {"login": "sjoerdjob", "id": 7838469, "node_id": "MDQ6VXNlcjc4Mzg0Njk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7838469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjoerdjob", "html_url": "https://github.com/sjoerdjob", "followers_url": "https://api.github.com/users/sjoerdjob/followers", "following_url": "https://api.github.com/users/sjoerdjob/following{/other_user}", "gists_url": "https://api.github.com/users/sjoerdjob/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjoerdjob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjoerdjob/subscriptions", "organizations_url": "https://api.github.com/users/sjoerdjob/orgs", "repos_url": "https://api.github.com/users/sjoerdjob/repos", "events_url": "https://api.github.com/users/sjoerdjob/events{/privacy}", "received_events_url": "https://api.github.com/users/sjoerdjob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T13:28:37Z", "updated_at": "2019-08-19T16:08:14Z", "closed_at": "2019-08-19T16:08:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "As seen in https://github.com/honeycombio/beeline-python/blob/9c20f68d96903e58908be9de75b4666a41dafc89/beeline/middleware/django/__init__.py#L65, the data in the event context is hardcoded.\r\n\r\nI think it would be very beneficial to have some way to override the data in the context without having to re-define `create_http_event` completely.\r\n\r\nIf the contents of the `context=` parameter could be moved to a separate function, it would be easier to override without also having to re-implement the `start_trace`...`finish_trace`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/71", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/71/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/71/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/71", "id": 473120948, "node_id": "MDU6SXNzdWU0NzMxMjA5NDg=", "number": 71, "title": "Beeline prevents sentry.io from reporting", "user": {"login": "fitzoh", "id": 131809, "node_id": "MDQ6VXNlcjEzMTgwOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/131809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzoh", "html_url": "https://github.com/fitzoh", "followers_url": "https://api.github.com/users/fitzoh/followers", "following_url": "https://api.github.com/users/fitzoh/following{/other_user}", "gists_url": "https://api.github.com/users/fitzoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzoh/subscriptions", "organizations_url": "https://api.github.com/users/fitzoh/orgs", "repos_url": "https://api.github.com/users/fitzoh/repos", "events_url": "https://api.github.com/users/fitzoh/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-26T00:14:02Z", "updated_at": "2019-08-01T00:09:37Z", "closed_at": "2019-08-01T00:09:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issue created in the sentry repository @ getsentry/sentry-python#442\r\n\r\nDetails:\r\nI'm activating sentry in the top of settings.py ([docs](https://docs.sentry.io/platforms/python/django/))\r\n```\r\nsentry_sdk.init(\r\n    dsn=dsn,\r\n    environment=env,\r\n    integrations=[DjangoIntegration()],\r\n)\r\n```\r\n\r\nbeeline is being initialized in the gunicorn config file ([docs](https://docs.honeycomb.io/getting-data-in/python/beeline/#gunicorn))\r\n```\r\ndef post_worker_init(worker):\r\n    beeline.init(\r\n        writekey=honeycomb_key,\r\n        dataset=dataset,\r\n        service_name=service\r\n    )\r\n```\r\n\r\n\r\nI can manually send errors to sentry, but the automatic error reporting doesn't work unless honeycomb is removed.\r\n\r\nPartially redacted requirements.txt\r\n```\r\nDjango~=2.1.9\r\ndjangorestframework~=3.9.1\r\ngunicorn~=19.9.0\r\nsentry-sdk~=0.10.2\r\nhoneycomb-beeline~=2.6.1\r\nlibhoney~=1.8.0\r\nstatsd~=3.3.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/62", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/62/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/62/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/62", "id": 439550218, "node_id": "MDU6SXNzdWU0Mzk1NTAyMTg=", "number": 62, "title": "[flask-sqlalchemy] db.query_args appears as the param names, not param values", "user": {"login": "benregn", "id": 206066, "node_id": "MDQ6VXNlcjIwNjA2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/206066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benregn", "html_url": "https://github.com/benregn", "followers_url": "https://api.github.com/users/benregn/followers", "following_url": "https://api.github.com/users/benregn/following{/other_user}", "gists_url": "https://api.github.com/users/benregn/gists{/gist_id}", "starred_url": "https://api.github.com/users/benregn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benregn/subscriptions", "organizations_url": "https://api.github.com/users/benregn/orgs", "repos_url": "https://api.github.com/users/benregn/repos", "events_url": "https://api.github.com/users/benregn/events{/privacy}", "received_events_url": "https://api.github.com/users/benregn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-02T11:48:31Z", "updated_at": "2019-05-21T15:51:24Z", "closed_at": "2019-05-21T15:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The problem seems to be that the `parameters` argument to the `before_cursor_execute` listener is almost always (maybe always) a dict in my project. Beeline always treats it as if it's a list: https://github.com/honeycombio/beeline-python/blob/634a567/beeline/middleware/flask/__init__.py#L115.\r\n\r\nQuote from the docs about the `parameters` argument:\r\n> Dictionary, tuple, or list of parameters being passed to the execute() or executemany() method of the DBAPI cursor. In some cases may be None.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/58", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/58/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/58/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/58", "id": 408396740, "node_id": "MDU6SXNzdWU0MDgzOTY3NDA=", "number": 58, "title": "TypeError('Object of type datetime is not JSON serializable')", "user": {"login": "fajpunk", "id": 330402, "node_id": "MDQ6VXNlcjMzMDQwMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/330402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fajpunk", "html_url": "https://github.com/fajpunk", "followers_url": "https://api.github.com/users/fajpunk/followers", "following_url": "https://api.github.com/users/fajpunk/following{/other_user}", "gists_url": "https://api.github.com/users/fajpunk/gists{/gist_id}", "starred_url": "https://api.github.com/users/fajpunk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fajpunk/subscriptions", "organizations_url": "https://api.github.com/users/fajpunk/orgs", "repos_url": "https://api.github.com/users/fajpunk/repos", "events_url": "https://api.github.com/users/fajpunk/events{/privacy}", "received_events_url": "https://api.github.com/users/fajpunk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-09T04:19:24Z", "updated_at": "2019-02-12T21:45:57Z", "closed_at": "2019-02-12T21:42:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just tried to set up honeycomb in my relatively simple (admin site only) Django 2.1.5 app with a Postgres 11.1 DB running locally, configured with the middleware added, and:\r\n\r\n```python\r\nfrom django.apps import AppConfig  # type: ignore\r\nfrom django.conf import settings  # type: ignore\r\nimport beeline  # type: ignore\r\n\r\n\r\nclass LettersConfig(AppConfig):\r\n    name = \"letters\"\r\n\r\n    def ready(self):\r\n        beeline.init(\r\n            writekey=settings.HONEYCOMB_WRITE_KEY,\r\n            dataset=\"artandtybie\",\r\n            service_name=\"my-app-name\",\r\n            debug=True,\r\n        )\r\n```\r\n\r\nI have so far not received any events in the Honeycomb UI, and see a lot of these messages in the logs:\r\n\r\n```2019-02-09 04:06:31,892 - honeycomb-sdk-xmit - DEBUG - enqueuing response = {'status_code': 0, 'body': '', 'error': TypeError('Object of type datetime is not JSON serializable'), 'duration': 5.233049392700195, 'metadata': None}```\r\n\r\nMaybe they're coming from trying to serialize query args for a query against a model with a date field?\r\n\r\n```2019-02-09 04:06:31,633 - honeycomb-sdk - DEBUG - send enqueuing event ev = {'service_name': 'my-app-name', 'meta.beeline_version': '2.4.6', 'meta.local_hostname': 'localhost.localdomain', 'name': 'django_postgresql_query', 'trace.trace_id': '58a65be3-31a9-4c70-a9cd-8068459d30ef', 'trace.parent_id': '474479f5-e10b-474c-94f3-4830afc4e116', 'trace.span_id': '2abbba28-578c-4b0e-b27c-f9844c93df85', 'type': 'db', 'db.query': 'SELECT \"django_session\".\"session_key\", \"django_session\".\"session_data\", \"django_session\".\"expire_date\" FROM \"django_session\" WHERE (\"django_session\".\"expire_date\" > %s AND \"django_session\".\"session_key\" = %s)', 'db.query_args': (datetime.datetime(2019, 2, 9, 4, 6, 31, 626689, tzinfo=<UTC>), 'xxxxxxxx'), 'db.duration': 2.083, 'db.last_insert_id': 0, 'db.rows_affected': 1, 'duration_ms': 2.4789999999999996}```\r\n\r\nAm I configuring this Beeline correctly?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/56", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/56/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/56/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/56", "id": 404427644, "node_id": "MDU6SXNzdWU0MDQ0Mjc2NDQ=", "number": 56, "title": "honeycomb seems to be lagging after the request is done", "user": {"login": "posix4e", "id": 806363, "node_id": "MDQ6VXNlcjgwNjM2Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/806363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/posix4e", "html_url": "https://github.com/posix4e", "followers_url": "https://api.github.com/users/posix4e/followers", "following_url": "https://api.github.com/users/posix4e/following{/other_user}", "gists_url": "https://api.github.com/users/posix4e/gists{/gist_id}", "starred_url": "https://api.github.com/users/posix4e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/posix4e/subscriptions", "organizations_url": "https://api.github.com/users/posix4e/orgs", "repos_url": "https://api.github.com/users/posix4e/repos", "events_url": "https://api.github.com/users/posix4e/events{/privacy}", "received_events_url": "https://api.github.com/users/posix4e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-29T18:30:18Z", "updated_at": "2019-08-23T03:12:16Z", "closed_at": "2019-08-23T03:12:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "We seem to be experiencing lag in the after request. Honeycomb currently uses the after_request . This is not a reasonable solution https://stackoverflow.com/questions/48994440/execute-a-function-after-flask-returns-response. We use gunicorn, perhaps we can move it after the request to your backend there. Also I noticed there's no logging at all if we can't connect to the honeycomb backend.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/51", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/51/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/51/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/51", "id": 399313642, "node_id": "MDU6SXNzdWUzOTkzMTM2NDI=", "number": 51, "title": "Uninitialised tracer raises when not being initialised", "user": {"login": "mariokostelac", "id": 1917451, "node_id": "MDQ6VXNlcjE5MTc0NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1917451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mariokostelac", "html_url": "https://github.com/mariokostelac", "followers_url": "https://api.github.com/users/mariokostelac/followers", "following_url": "https://api.github.com/users/mariokostelac/following{/other_user}", "gists_url": "https://api.github.com/users/mariokostelac/gists{/gist_id}", "starred_url": "https://api.github.com/users/mariokostelac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mariokostelac/subscriptions", "organizations_url": "https://api.github.com/users/mariokostelac/orgs", "repos_url": "https://api.github.com/users/mariokostelac/repos", "events_url": "https://api.github.com/users/mariokostelac/events{/privacy}", "received_events_url": "https://api.github.com/users/mariokostelac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-15T12:00:21Z", "updated_at": "2019-01-23T09:39:07Z", "closed_at": "2019-01-23T09:39:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am looking here for either guidance or a fix.\r\n\r\nI have a Flask app that runs in different environments, one of them being jupyter notebooks. As you could imagine, Jupyter notebook loads part of the app, crashing when tracer gets called, if uninitialised. I'd like to provide an experience where a developer does not have to load honeycomb setup in Jupyter to experiment with the code.\r\n\r\nHere is the little helper package I wrote for myself to introduce a nice decorator for functions I want to trace::\r\n```python\r\nimport beeline\r\nimport functools\r\nimport config\r\nimport os\r\n\r\nfrom beeline.middleware.flask import HoneyMiddleware\r\n\r\ntracer = beeline.tracer\r\nadd_field = beeline.add_field\r\nadd_trace_field = beeline.add_trace_field\r\n\r\n\r\ndef init(app):\r\n    beeline.init(writekey=config.HONEYCOMB_API_KEY, dataset='<redacted>', service_name='<redacted>', presend_hook=presend)\r\n    HoneyMiddleware(app, db_events=False)\r\n\r\n\r\ndef presend(fields):\r\n    fields['pid'] = os.getpid()\r\n\r\n\r\ndef traced(name):\r\n    def decorator(func):\r\n        @functools.wraps(func)\r\n        def wrapper(*args, **kwargs):\r\n            with tracer(name):\r\n                return func(*args, **kwargs)\r\n        return wrapper\r\n    return decorator\r\n\r\n```\r\n\r\nException\r\n```python\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-6-edff33869504> in <module>()\r\n      1 import model\r\n----> 2 model.load_bot_model(6)\r\n\r\n~/SageMaker/team-ml/sth/src/honeycomb.py in wrapper(*args, **kwargs)\r\n     24         @functools.wraps(func)\r\n     25         def wrapper(*args, **kwargs):\r\n---> 26             with tracer(name):\r\n     27                 return func(*args, **kwargs)\r\n     28         return wrapper\r\n\r\n~/anaconda3/lib/python3.6/site-packages/beeline/__init__.py in tracer(name, trace_id, parent_id)\r\n    361     - `name`: a descriptive name for the this trace span, i.e. \"database query for user\"\r\n    362     '''\r\n--> 363     return _GBL.tracer(name=name, trace_id=trace_id, parent_id=parent_id)\r\n    364 \r\n    365 def start_trace(context=None, trace_id=None, parent_span_id=None):\r\n\r\nAttributeError: 'NoneType' object has no attribute 'tracer'\r\n```\r\n\r\nI can see two different solutions here:\r\n- changing beeline.tracer to not fail when it's not initialised\r\n- set the tracer inside `init` to the beeline.tracer, otherwise have just a fake one.\r\n\r\nWhat are your thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/50", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/50/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/50/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/50", "id": 399033986, "node_id": "MDU6SXNzdWUzOTkwMzM5ODY=", "number": 50, "title": "Tracer context manager should return reference to trace", "user": {"login": "tredman", "id": 3129677, "node_id": "MDQ6VXNlcjMxMjk2Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3129677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tredman", "html_url": "https://github.com/tredman", "followers_url": "https://api.github.com/users/tredman/followers", "following_url": "https://api.github.com/users/tredman/following{/other_user}", "gists_url": "https://api.github.com/users/tredman/gists{/gist_id}", "starred_url": "https://api.github.com/users/tredman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tredman/subscriptions", "organizations_url": "https://api.github.com/users/tredman/orgs", "repos_url": "https://api.github.com/users/tredman/repos", "events_url": "https://api.github.com/users/tredman/events{/privacy}", "received_events_url": "https://api.github.com/users/tredman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-14T19:15:57Z", "updated_at": "2019-01-16T18:01:41Z", "closed_at": "2019-01-16T18:01:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Example use:\r\n\r\n```\r\nwith beeline.tracer(\"name\") as trace:\r\n   start_thread_and_pass_trace(trace)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/46", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/46/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/46/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/46", "id": 397808964, "node_id": "MDU6SXNzdWUzOTc4MDg5NjQ=", "number": 46, "title": "tracer context manager ignores parent and trace_id arguments", "user": {"login": "lavie", "id": 233414, "node_id": "MDQ6VXNlcjIzMzQxNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/233414?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lavie", "html_url": "https://github.com/lavie", "followers_url": "https://api.github.com/users/lavie/followers", "following_url": "https://api.github.com/users/lavie/following{/other_user}", "gists_url": "https://api.github.com/users/lavie/gists{/gist_id}", "starred_url": "https://api.github.com/users/lavie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lavie/subscriptions", "organizations_url": "https://api.github.com/users/lavie/orgs", "repos_url": "https://api.github.com/users/lavie/repos", "events_url": "https://api.github.com/users/lavie/events{/privacy}", "received_events_url": "https://api.github.com/users/lavie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-10T12:29:40Z", "updated_at": "2019-01-16T18:09:04Z", "closed_at": "2019-01-10T19:11:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/honeycombio/beeline-python/blob/35acadef447ed99fb1ea20e7f5b87a52bad4c91c/beeline/trace.py#L41\r\n\r\nAs you can see, the function `__call__` does not make use of these parameters. A linter should have caught this...\r\n\r\nAs a result, it's impossible to use the context manager to continue a trace across threads, for example.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/42", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/42/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/42/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/42", "id": 392394602, "node_id": "MDU6SXNzdWUzOTIzOTQ2MDI=", "number": 42, "title": "Add span decorator", "user": {"login": "tredman", "id": 3129677, "node_id": "MDQ6VXNlcjMxMjk2Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3129677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tredman", "html_url": "https://github.com/tredman", "followers_url": "https://api.github.com/users/tredman/followers", "following_url": "https://api.github.com/users/tredman/following{/other_user}", "gists_url": "https://api.github.com/users/tredman/gists{/gist_id}", "starred_url": "https://api.github.com/users/tredman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tredman/subscriptions", "organizations_url": "https://api.github.com/users/tredman/orgs", "repos_url": "https://api.github.com/users/tredman/repos", "events_url": "https://api.github.com/users/tredman/events{/privacy}", "received_events_url": "https://api.github.com/users/tredman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-19T00:41:21Z", "updated_at": "2018-12-26T18:05:54Z", "closed_at": "2018-12-26T18:05:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to just decorate a function and wrap it with a span. We have something similar in the lambda middleware that we could just generalize:\r\n\r\nhttps://github.com/honeycombio/beeline-python/blob/master/beeline/middleware/awslambda/__init__.py#L29", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/32", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/32/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/32/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/32", "id": 363998505, "node_id": "MDU6SXNzdWUzNjM5OTg1MDU=", "number": 32, "title": "Exception raised while shutting down pytest + Flask", "user": {"login": "mariokostelac", "id": 1917451, "node_id": "MDQ6VXNlcjE5MTc0NTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1917451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mariokostelac", "html_url": "https://github.com/mariokostelac", "followers_url": "https://api.github.com/users/mariokostelac/followers", "following_url": "https://api.github.com/users/mariokostelac/following{/other_user}", "gists_url": "https://api.github.com/users/mariokostelac/gists{/gist_id}", "starred_url": "https://api.github.com/users/mariokostelac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mariokostelac/subscriptions", "organizations_url": "https://api.github.com/users/mariokostelac/orgs", "repos_url": "https://api.github.com/users/mariokostelac/repos", "events_url": "https://api.github.com/users/mariokostelac/events{/privacy}", "received_events_url": "https://api.github.com/users/mariokostelac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-26T12:15:08Z", "updated_at": "2018-10-02T06:27:48Z", "closed_at": "2018-10-01T22:05:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am working on flask application. Intermittently, after tests succeed (run with pytest), I get following error:\r\n```\r\nException in thread Thread-1:\r\nTraceback (most recent call last):\r\n  File \"/Users/mario/src/project/appenv/lib/python3.7/site-packages/libhoney/transmission.py\", line 113, in _sender\r\n    ev = self.pending.get(timeout=self.send_frequency)\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/queue.py\", line 178, in get\r\n    raise Empty\r\n_queue.Empty\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 917, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 865, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/Users/mario/src/project/appenv/lib/python3.7/site-packages/libhoney/transmission.py\", line 126, in _sender\r\n    pool.submit(self._flush, events)\r\n  File \"/usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/concurrent/futures/thread.py\", line 151, in submit\r\n    raise RuntimeError('cannot schedule new futures after shutdown')\r\nRuntimeError: cannot schedule new futures after shutdown\r\n```\r\n\r\nbeeline is initialised with an empty string as key in test env.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/31", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/31/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/31/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/31", "id": 363672401, "node_id": "MDU6SXNzdWUzNjM2NzI0MDE=", "number": 31, "title": "Do we really wanna hide all exceptions, i think this is breaking some code of mine", "user": {"login": "posix4e", "id": 806363, "node_id": "MDQ6VXNlcjgwNjM2Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/806363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/posix4e", "html_url": "https://github.com/posix4e", "followers_url": "https://api.github.com/users/posix4e/followers", "following_url": "https://api.github.com/users/posix4e/following{/other_user}", "gists_url": "https://api.github.com/users/posix4e/gists{/gist_id}", "starred_url": "https://api.github.com/users/posix4e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/posix4e/subscriptions", "organizations_url": "https://api.github.com/users/posix4e/orgs", "repos_url": "https://api.github.com/users/posix4e/repos", "events_url": "https://api.github.com/users/posix4e/events{/privacy}", "received_events_url": "https://api.github.com/users/posix4e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-25T16:50:32Z", "updated_at": "2018-09-25T18:33:40Z", "closed_at": "2018-09-25T18:33:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/honeycombio/beeline-python/blob/cf6272bf5d8e21c6e31829baaca316dd5174759a/beeline/patch/requests.py#L18", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/26", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/26/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/26/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/26", "id": 362455247, "node_id": "MDU6SXNzdWUzNjI0NTUyNDc=", "number": 26, "title": "Document how to use requests", "user": {"login": "posix4e", "id": 806363, "node_id": "MDQ6VXNlcjgwNjM2Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/806363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/posix4e", "html_url": "https://github.com/posix4e", "followers_url": "https://api.github.com/users/posix4e/followers", "following_url": "https://api.github.com/users/posix4e/following{/other_user}", "gists_url": "https://api.github.com/users/posix4e/gists{/gist_id}", "starred_url": "https://api.github.com/users/posix4e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/posix4e/subscriptions", "organizations_url": "https://api.github.com/users/posix4e/orgs", "repos_url": "https://api.github.com/users/posix4e/repos", "events_url": "https://api.github.com/users/posix4e/events{/privacy}", "received_events_url": "https://api.github.com/users/posix4e/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-21T04:53:11Z", "updated_at": "2018-10-03T02:46:03Z", "closed_at": "2018-10-03T02:46:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I\u2019m not sure how to get traces to show up across processes running beeline-python Rpcing to each other using libraries like requests or urllib. Help me understand is it just supposed to work? Am I supposed to provide the same name across traces when I can with? I\u2019m not sure how to trace micro flask services calling other micro flask services  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/22", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/22/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/22/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/22", "id": 361945825, "node_id": "MDU6SXNzdWUzNjE5NDU4MjU=", "number": 22, "title": "[flask] Beeline trying to get dict fields which do not exist", "user": {"login": "nathanleclaire", "id": 1476820, "node_id": "MDQ6VXNlcjE0NzY4MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1476820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanleclaire", "html_url": "https://github.com/nathanleclaire", "followers_url": "https://api.github.com/users/nathanleclaire/followers", "following_url": "https://api.github.com/users/nathanleclaire/following{/other_user}", "gists_url": "https://api.github.com/users/nathanleclaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanleclaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanleclaire/subscriptions", "organizations_url": "https://api.github.com/users/nathanleclaire/orgs", "repos_url": "https://api.github.com/users/nathanleclaire/repos", "events_url": "https://api.github.com/users/nathanleclaire/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanleclaire/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-19T22:06:20Z", "updated_at": "2018-09-19T22:43:56Z", "closed_at": "2018-09-19T22:43:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "from pollinators:\r\n\r\n```\r\nspawned uWSGI http 1 (pid: 78)\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1997, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib/python2.7/site-packages/beeline/middleware/flask/__init__.py\", line 37, in __call__\r\n    \"request.user_agent\": environ['HTTP_USER_AGENT'],\r\nKeyError: 'HTTP_USER_AGENT'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/honeycombio/beeline-python/issues/20", "repository_url": "https://api.github.com/repos/honeycombio/beeline-python", "labels_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/20/comments", "events_url": "https://api.github.com/repos/honeycombio/beeline-python/issues/20/events", "html_url": "https://github.com/honeycombio/beeline-python/issues/20", "id": 358140552, "node_id": "MDU6SXNzdWUzNTgxNDA1NTI=", "number": 20, "title": "TypeError: new_traced_event() missing 2 required positional arguments: 'trace_id' and 'parent_id'", "user": {"login": "afausti", "id": 13968086, "node_id": "MDQ6VXNlcjEzOTY4MDg2", "avatar_url": "https://avatars2.githubusercontent.com/u/13968086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afausti", "html_url": "https://github.com/afausti", "followers_url": "https://api.github.com/users/afausti/followers", "following_url": "https://api.github.com/users/afausti/following{/other_user}", "gists_url": "https://api.github.com/users/afausti/gists{/gist_id}", "starred_url": "https://api.github.com/users/afausti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afausti/subscriptions", "organizations_url": "https://api.github.com/users/afausti/orgs", "repos_url": "https://api.github.com/users/afausti/repos", "events_url": "https://api.github.com/users/afausti/events{/privacy}", "received_events_url": "https://api.github.com/users/afausti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-07T16:53:23Z", "updated_at": "2018-09-07T18:09:56Z", "closed_at": "2018-09-07T18:09:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've just tried `honeycomb-beeline` to instrument my Flask app following the instructions at https://docs.honeycomb.io/getting-data-in/beelines/beeline-python/ but I am getting this error:\r\n\r\n```\r\n127.0.0.1 - - [07/Sep/2018 09:30:38] \"GET / HTTP/1.1\" 500 -\r\nTraceback (most recent call last):\r\n  File \"/Users/afausti/Projects/squash-demo/squash-deployment/squash-restful-api/env/lib/python3.6/site-packages/flask/app.py\", line 2309, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/Users/afausti/Projects/squash-demo/squash-deployment/squash-restful-api/env/lib/python3.6/site-packages/beeline/middleware/flask/__init__.py\", line 40, in __call__\r\n    }, trace_name=trace_name, top_level=True)\r\n  File \"/Users/afausti/Projects/squash-demo/squash-deployment/squash-restful-api/env/lib/python3.6/site-packages/beeline/__init__.py\", line 183, in _new_event\r\n    ev = g_tracer.new_traced_event(trace_name)\r\nTypeError: new_traced_event() missing 2 required positional arguments: 'trace_id' and 'parent_id'\r\n```\r\nHere is how I am  invoking the beeline in my app:\r\n\r\n```\r\nimport os\r\nimport beeline\r\nfrom beeline.middleware.flask import HoneyMiddleware\r\n\r\nfrom app import create_app, db\r\n\r\nprofile = os.environ.get('SQUASH_API_PROFILE', 'app.config.Development')\r\nhoney_api_key = os.environ.get('HONEY_API_KEY')\r\n\r\napp = create_app(profile)\r\n\r\nbeeline.init(writekey=honey_api_key, dataset=\"squash-rest-api\", service_name=\"squash\")\r\n\r\nHoneyMiddleware(app, db_events=True)\r\n```\r\n\r\nI see the same with\r\n\r\n```\r\nHoneyMiddleware(app, db_events= False)\r\n```\r\n\r\nThe versions I am running:\r\n```\r\nFlask             1.0.2\r\nFlask-RESTful     0.3.6\r\nFlask-SQLAlchemy  2.3.2\r\nhoneycomb-beeline 1.2.0\r\nlibhoney          1.5.0\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}