{"total_count": 67, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/erikrose/parsimonious/issues/163", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/163/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/163/events", "html_url": "https://github.com/erikrose/parsimonious/issues/163", "id": 625046807, "node_id": "MDU6SXNzdWU2MjUwNDY4MDc=", "number": 163, "title": "Control characters cause parsing errors", "user": {"login": "davaya", "id": 19152940, "node_id": "MDQ6VXNlcjE5MTUyOTQw", "avatar_url": "https://avatars3.githubusercontent.com/u/19152940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davaya", "html_url": "https://github.com/davaya", "followers_url": "https://api.github.com/users/davaya/followers", "following_url": "https://api.github.com/users/davaya/following{/other_user}", "gists_url": "https://api.github.com/users/davaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/davaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davaya/subscriptions", "organizations_url": "https://api.github.com/users/davaya/orgs", "repos_url": "https://api.github.com/users/davaya/repos", "events_url": "https://api.github.com/users/davaya/events{/privacy}", "received_events_url": "https://api.github.com/users/davaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T17:14:07Z", "updated_at": "2020-05-26T18:05:13Z", "closed_at": "2020-05-26T17:56:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a grammar that parses a file containing multiple \"records\" separated by a sentinel character (pipe `|` in the example code).\r\n\r\nOne comment on Issue #156 suggests using a greek Delta character as a sentinel to minimize the chance of collisions with parsed text, but ASCII and Unicode define a Record Separator character for exactly that purpose, eliminating the possibility of collisions.  (https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text)\r\n\r\nBut when I try to use RS instead of pipe as a separator, parsimonious fails.  The example code gives the expected set of `<Node called \"x\" matching ...` messages with the pipe separator, but generates an exception\r\n`parsimonious.exceptions.ParseError: Rule 'rs' didn't match at '' (line 10, column 1).`\r\nwith the RS separator.\r\n\r\n```\r\nfrom parsimonious.grammar import Grammar\r\ntext1 = \"\"\"\r\n\r\na1:b1|a2:b2|\r\na3:b3|\r\na4:message$ with! punctuation[)]/.^\r\na5:more)\r\n\r\n(*&^%$#@@D!|\r\n\r\n\"\"\"\r\ngram1 = \"\"\"\r\n    lines = line+\r\n    line  = ~\"[^|]*\" rs\r\n    rs    = \"|\" _\r\n    _     = ~\"[ \\\\n\\\\r\\\\t]*\"\r\n    \"\"\"\r\ntext2 = text1.replace('|', r'\\x1e')\r\ngram2 = gram1.replace('|', r'\\x1e')\r\nprint('===1:\\n', Grammar(gram1).parse(text1))\r\nprint('===2:\\n', Grammar(gram2).parse(text2))\r\n```\r\n\r\nIs there any reason why one should work and not the other?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/146", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/146/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/146/events", "html_url": "https://github.com/erikrose/parsimonious/issues/146", "id": 368985423, "node_id": "MDU6SXNzdWUzNjg5ODU0MjM=", "number": 146, "title": "Fix travis", "user": {"login": "rominf", "id": 3449635, "node_id": "MDQ6VXNlcjM0NDk2MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3449635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rominf", "html_url": "https://github.com/rominf", "followers_url": "https://api.github.com/users/rominf/followers", "following_url": "https://api.github.com/users/rominf/following{/other_user}", "gists_url": "https://api.github.com/users/rominf/gists{/gist_id}", "starred_url": "https://api.github.com/users/rominf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rominf/subscriptions", "organizations_url": "https://api.github.com/users/rominf/orgs", "repos_url": "https://api.github.com/users/rominf/repos", "events_url": "https://api.github.com/users/rominf/events{/privacy}", "received_events_url": "https://api.github.com/users/rominf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-11T07:22:30Z", "updated_at": "2018-10-18T01:09:29Z", "closed_at": "2018-10-18T01:09:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I sent PR #143, checks fail because Tox requires Python 3.4:\r\n```\r\n$ tox\r\nTraceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.3.6/bin/tox\", line 7, in <module>\r\n    from tox import cmdline\r\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/tox/__init__.py\", line 32, in <module>\r\n    from .session import cmdline  # noqa\r\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/tox/session.py\", line 18, in <module>\r\n    import pkg_resources\r\n  File \"/home/travis/virtualenv/python3.3.6/lib/python3.3/site-packages/pkg_resources/__init__.py\", line 90, in <module>\r\n    raise RuntimeError(\"Python 3.4 or later is required\")\r\nRuntimeError: Python 3.4 or later is required\r\n```\r\n\r\nHere: https://travis-ci.org/erikrose/parsimonious/jobs/439623666", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/138", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/138/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/138/events", "html_url": "https://github.com/erikrose/parsimonious/issues/138", "id": 341904903, "node_id": "MDU6SXNzdWUzNDE5MDQ5MDM=", "number": 138, "title": "Document grammar testing strategy", "user": {"login": "MswPaulDSmith", "id": 15981244, "node_id": "MDQ6VXNlcjE1OTgxMjQ0", "avatar_url": "https://avatars2.githubusercontent.com/u/15981244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MswPaulDSmith", "html_url": "https://github.com/MswPaulDSmith", "followers_url": "https://api.github.com/users/MswPaulDSmith/followers", "following_url": "https://api.github.com/users/MswPaulDSmith/following{/other_user}", "gists_url": "https://api.github.com/users/MswPaulDSmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/MswPaulDSmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MswPaulDSmith/subscriptions", "organizations_url": "https://api.github.com/users/MswPaulDSmith/orgs", "repos_url": "https://api.github.com/users/MswPaulDSmith/repos", "events_url": "https://api.github.com/users/MswPaulDSmith/events{/privacy}", "received_events_url": "https://api.github.com/users/MswPaulDSmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-17T12:49:23Z", "updated_at": "2018-07-19T13:46:15Z", "closed_at": "2018-07-19T01:40:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Grammars can get quite complex and some guidance on how to test them would be useful.\r\n\r\nMy initial thoughts are that perhaps grammars could be combined such that the actual Grammar is\r\n\r\n`complete = elementA / elementB...`\r\n\r\nbut then we define some test nodes such as\r\n\r\n`test_elementA = elementA / xxx`\r\n\r\n(A second element, xxx, seems to be needed to cause visitation).  Then the idea would be to create a visit_test_elementA() visitor node to allow us to catch and validate the elementA part of a test parse.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/137", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/137/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/137/events", "html_url": "https://github.com/erikrose/parsimonious/issues/137", "id": 323419340, "node_id": "MDU6SXNzdWUzMjM0MTkzNDA=", "number": 137, "title": "Please release parsimonious with the print() fix.", "user": {"login": "Jo-Con-El", "id": 607909, "node_id": "MDQ6VXNlcjYwNzkwOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/607909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jo-Con-El", "html_url": "https://github.com/Jo-Con-El", "followers_url": "https://api.github.com/users/Jo-Con-El/followers", "following_url": "https://api.github.com/users/Jo-Con-El/following{/other_user}", "gists_url": "https://api.github.com/users/Jo-Con-El/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jo-Con-El/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jo-Con-El/subscriptions", "organizations_url": "https://api.github.com/users/Jo-Con-El/orgs", "repos_url": "https://api.github.com/users/Jo-Con-El/repos", "events_url": "https://api.github.com/users/Jo-Con-El/events{/privacy}", "received_events_url": "https://api.github.com/users/Jo-Con-El/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-15T23:32:46Z", "updated_at": "2018-06-21T01:51:35Z", "closed_at": "2018-06-21T01:51:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "As of now, if you are using a Python3 package that depends on yours, your build breaks:\r\n```\r\n[...]\r\n  *** Error compiling '/tmp/pip-build-60wotwft/parsimonious/parsimonious/tests/benchmarks.py'...\r\n    File \"/tmp/pip-build-60wotwft/parsimonious/parsimonious/tests/benchmarks.py\", line 91\r\n      print 'Took %.3fs to parse %.1fKB: %.0fKB/s.' % (seconds_each,\r\n                                                  ^\r\n  SyntaxError: invalid syntax\r\n```\r\n\r\nCould you please release a minor version?  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/136", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/136/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/136/events", "html_url": "https://github.com/erikrose/parsimonious/issues/136", "id": 318637222, "node_id": "MDU6SXNzdWUzMTg2MzcyMjI=", "number": 136, "title": "Issue with NodeVisitor", "user": {"login": "botzill", "id": 4686040, "node_id": "MDQ6VXNlcjQ2ODYwNDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/4686040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/botzill", "html_url": "https://github.com/botzill", "followers_url": "https://api.github.com/users/botzill/followers", "following_url": "https://api.github.com/users/botzill/following{/other_user}", "gists_url": "https://api.github.com/users/botzill/gists{/gist_id}", "starred_url": "https://api.github.com/users/botzill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/botzill/subscriptions", "organizations_url": "https://api.github.com/users/botzill/orgs", "repos_url": "https://api.github.com/users/botzill/repos", "events_url": "https://api.github.com/users/botzill/events{/privacy}", "received_events_url": "https://api.github.com/users/botzill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-04-28T13:33:48Z", "updated_at": "2018-05-03T00:33:32Z", "closed_at": "2018-05-03T00:33:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a simple example like this:\r\n\r\n```python\r\nfrom parsimonious.grammar import Grammar, NodeVisitor\r\n\r\n\r\nclass MyNodeVisitor(NodeVisitor):\r\n    grammar = Grammar(\"\"\"\r\ntext = \"My name is \"(name)\"!\"\r\nname = ~\"[a-zA-Z]+\"\r\n\"\"\")\r\n\r\n    def visit_text(self, node, visited_children):\r\n        print(\"Text\", node.text)\r\n        return node\r\n\r\n    def visit_name(self, node, visited_children):\r\n        print(\"Name\", node.text)\r\n        return node\r\n\r\n    # def generic_visit(self, node, visited_children):\r\n    #     pass\r\n\r\n\r\nmv = MyNodeVisitor()\r\nnode = mv.parse(\"My name is Geo!\")\r\n```\r\nWhile I implement all `visit_` methods I still get the error:\r\n\r\n```\r\n node.expr.as_rule())\r\nparsimonious.exceptions.VisitationError: NotImplementedError: No visitor method was defined for this expression: \"My name is \"\r\n\r\nParse tree:\r\n<Node matching \"My name is \">  <-- *** We were here. ***\r\n```\r\n\r\nAny ideas why I'm doing wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/133", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/133/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/133/events", "html_url": "https://github.com/erikrose/parsimonious/issues/133", "id": 290259507, "node_id": "MDU6SXNzdWUyOTAyNTk1MDc=", "number": 133, "title": "Allow modification of parsing grammar at runtime, without reloading the entire grammar", "user": {"login": "Botwise-Operator", "id": 35646604, "node_id": "MDQ6VXNlcjM1NjQ2NjA0", "avatar_url": "https://avatars0.githubusercontent.com/u/35646604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Botwise-Operator", "html_url": "https://github.com/Botwise-Operator", "followers_url": "https://api.github.com/users/Botwise-Operator/followers", "following_url": "https://api.github.com/users/Botwise-Operator/following{/other_user}", "gists_url": "https://api.github.com/users/Botwise-Operator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Botwise-Operator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Botwise-Operator/subscriptions", "organizations_url": "https://api.github.com/users/Botwise-Operator/orgs", "repos_url": "https://api.github.com/users/Botwise-Operator/repos", "events_url": "https://api.github.com/users/Botwise-Operator/events{/privacy}", "received_events_url": "https://api.github.com/users/Botwise-Operator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-21T09:36:07Z", "updated_at": "2018-01-25T01:11:06Z", "closed_at": "2018-01-25T01:11:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Imagine if you would, a whole sea of users naively trying to improve their forks of a base grammar all on the same server where each grammar runs in a mostly idle state on occasional sporadic user-generated input. The more users that have to reload the entire grammar they've been working on, the more the server might bog down. It would be considerably better if only the changes to the grammars needed to be loaded while the grammars worked. Is this at all doable?\r\n\r\nAlso, on the general subject of extensibility, rules are going to have to be added to the head of the grammar, the tail of the grammar, but also inserted into precise places in the middle of the grammar, because PEG requires prioritized order like that; probably by referencing a rule above or below which to insert a new rule.\r\n\r\nMight I suggest something like:\r\ngrammar=Grammar (\"\"\"\r\n    a=\"A\"\r\n    d=\"D\"\r\n    \"\"\")\r\ngrammar.insert (\"\"\"b=\"B\"\"\"\" below \"a\")\r\ngrammar.insert (\"\"\"c=\"C\"\"\"\" above \"d\")\r\n\r\nAlso, to delete a rule:\r\ngrammar.delete (\"d\")\r\n\r\nAnd, so grammar editors can know what the currently running grammar looks like:\r\ngrammar.print (\"optional_rule\")", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/127", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/127/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/127/events", "html_url": "https://github.com/erikrose/parsimonious/issues/127", "id": 264392917, "node_id": "MDU6SXNzdWUyNjQzOTI5MTc=", "number": 127, "title": "Tbon: Request for comment", "user": {"login": "Michael-F-Ellis", "id": 6699301, "node_id": "MDQ6VXNlcjY2OTkzMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6699301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Ellis", "html_url": "https://github.com/Michael-F-Ellis", "followers_url": "https://api.github.com/users/Michael-F-Ellis/followers", "following_url": "https://api.github.com/users/Michael-F-Ellis/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Ellis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Ellis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Ellis/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Ellis/orgs", "repos_url": "https://api.github.com/users/Michael-F-Ellis/repos", "events_url": "https://api.github.com/users/Michael-F-Ellis/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Ellis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-10-10T22:07:57Z", "updated_at": "2017-11-04T15:39:16Z", "closed_at": "2017-10-11T23:55:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's the music notation parser I mentioned in #124 \r\n\r\nIt's now working very well and I have to say that once I got the hang of writing visitor methods development has been remarkably easy.  Ya done good, Erik!\r\n\r\nhttps://github.com/Michael-F-Ellis/tbon\r\n\r\nThat being said, this is my first attempt at writing a parser, so I'm sure there must be ways I could have done it better.  Any constructive suggestions welcome.\r\n\r\nThanks,\r\nMike\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/126", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/126/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/126/events", "html_url": "https://github.com/erikrose/parsimonious/issues/126", "id": 264359771, "node_id": "MDU6SXNzdWUyNjQzNTk3NzE=", "number": 126, "title": "Optimization: use RE2", "user": {"login": "pjz", "id": 11100, "node_id": "MDQ6VXNlcjExMTAw", "avatar_url": "https://avatars3.githubusercontent.com/u/11100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pjz", "html_url": "https://github.com/pjz", "followers_url": "https://api.github.com/users/pjz/followers", "following_url": "https://api.github.com/users/pjz/following{/other_user}", "gists_url": "https://api.github.com/users/pjz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pjz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pjz/subscriptions", "organizations_url": "https://api.github.com/users/pjz/orgs", "repos_url": "https://api.github.com/users/pjz/repos", "events_url": "https://api.github.com/users/pjz/events{/privacy}", "received_events_url": "https://api.github.com/users/pjz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-10T20:10:37Z", "updated_at": "2017-10-11T23:49:49Z", "closed_at": "2017-10-11T23:49:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you're going for speed, you might want to use RE2 (https://github.com/google/re2) which prunes out slow regex features you're probably not using anyway.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/125", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/125/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/125/events", "html_url": "https://github.com/erikrose/parsimonious/issues/125", "id": 264275064, "node_id": "MDU6SXNzdWUyNjQyNzUwNjQ=", "number": 125, "title": "parsing markdown lists and sublists", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-10T15:33:41Z", "updated_at": "2018-11-08T15:56:04Z", "closed_at": "2018-11-08T15:56:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have done a lot with parsimonious to extract text from a markdown file.  I appreciate the ease this library offers in doing this.  The only major bottleneck I've had is parsing lists from sublists.  Example:\r\n\r\n```\r\n1. Item A\r\n2. Item B\r\n3. Block C\r\n    1. Sub-item C.1\r\n    2. Sub-block C.2\r\n       a. Sub-block C.2.a\r\n            1. Sub-item C.2.a1  \r\n```\r\n\r\nThese blocks are distinguished by indent levels.  I need to parse the following as distinct nodes:\r\n- an item (0 indent)\r\n- a block (header 0, sub-item 1) \r\n- a sub-block (header 1, sub-items 2 or more indents) \r\n\r\nI understand indenting is not something PEG parsers traditionally do, but is there any hope of using parsimonious to distinguish these blocks of text?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/124", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/124/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/124/events", "html_url": "https://github.com/erikrose/parsimonious/issues/124", "id": 262623974, "node_id": "MDU6SXNzdWUyNjI2MjM5NzQ=", "number": 124, "title": "How do I walk nodes that require forward searches", "user": {"login": "Michael-F-Ellis", "id": 6699301, "node_id": "MDQ6VXNlcjY2OTkzMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6699301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Michael-F-Ellis", "html_url": "https://github.com/Michael-F-Ellis", "followers_url": "https://api.github.com/users/Michael-F-Ellis/followers", "following_url": "https://api.github.com/users/Michael-F-Ellis/following{/other_user}", "gists_url": "https://api.github.com/users/Michael-F-Ellis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Michael-F-Ellis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Michael-F-Ellis/subscriptions", "organizations_url": "https://api.github.com/users/Michael-F-Ellis/orgs", "repos_url": "https://api.github.com/users/Michael-F-Ellis/repos", "events_url": "https://api.github.com/users/Michael-F-Ellis/events{/privacy}", "received_events_url": "https://api.github.com/users/Michael-F-Ellis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-03T23:37:04Z", "updated_at": "2017-10-11T23:34:58Z", "closed_at": "2017-10-05T00:31:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "First off,  thanks for writing this! I've been avoiding formal parsing since lex and yacc were babes -- I always gritted my teeth and made do with regexes.   This is the first parser I've tried that really makes sense to me.  \r\n\r\nSome years ago I developed  a little homemade musical notation language for rapidly writing down song melodies and fiddle tunes.  It borrows various ideas from ABC and Lilypond's input syntax but aims to be much simpler.  My innovation, if you can call it such, was realizing that since musicians think in beats it's possible to avoid having to explicitly specify note durations by grouping the pitch tokens together within beats and separating them with whitespace. For example,  a couple of bars from a jig in 6/8 time might look like `d-e f-g | agf edc | ...` It's quick to type or write by hand and readable for playing -- but not all that easy to parse with regexes.\r\n\r\nI was really pleased when a couple of hours after downloading parsimonious I had the working grammar below.\r\n```\r\nimport time\r\nfrom parsimonious.grammar import Grammar\r\ngrammar = Grammar(\r\n    \"\"\"\r\n    melody = bar+ ws*\r\n    bar = (ws* beat ws)+ barline\r\n    beat = subbeat+\r\n    barline = \"|\"\r\n    extendable = pitch /rest\r\n    pitch = octave* alteration* pitchname\r\n    subbeat = extendable / hold\r\n    rest = \"z\"\r\n    hold = \"-\"\r\n    octave = octave_up / octave_down\r\n    alteration = sharp / flat\r\n    sharp = \"#\"\r\n    flat = \"&\"\r\n    octave_up = \"^\"\r\n    octave_down = \"/\"\r\n    pitchname = ~\"[a-g]\"i\r\n    ws = \" \"*\r\n    \"\"\"\r\n    )\r\n\r\nif __name__ == '__main__':\r\n    start = time.time()\r\n    tree = grammar.parse(\" c d#d | e zf | -g /g | c - | \")\r\n    print(tree.prettily())\r\n    print(\"Parsed in {} seconds\".format(time.time() - start))\r\n``` \r\n\r\nSo now I'm trying to figure out how to use NodeVisitor to extract the info from the parse tree and create a stream of MIDI NoteOn/Noteoff events.  One of the bits I'm trying get my head around is handling the search ahead, search back operations implicit in a fragment like\r\n\r\n```\r\na-b c-- | -de ...\r\n```\r\nHandling the 2nd beat of the first bar requires looking ahead to the first beat of the second bar to extend the duration of the `c` into the first 1/8th note past the downbeat.\r\n\r\nAny help greatly appreciated!\r\n\r\nThanks,\r\nMike", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/118", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/118/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/118/events", "html_url": "https://github.com/erikrose/parsimonious/issues/118", "id": 241829237, "node_id": "MDU6SXNzdWUyNDE4MjkyMzc=", "number": 118, "title": "Ignore whitespace", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-10T19:58:32Z", "updated_at": "2017-07-13T00:12:50Z", "closed_at": "2017-07-13T00:12:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.  I am requesting **a feature to ignore whitespace**, which I can use in my calculator expressions, but can be applicable in general.  \r\n\r\n*Problem*: I have a grammar that parses the expression `2+3`, but it does not parse `2 + 3`, raising `ParseError: Rule 'operator' didn't match at ' + 3'`.\r\n\r\n```python\r\n# Starting grammar\r\nfrom parsimonious import grammar\r\n\r\ngrammar = grammar.Grammar(\r\n    \"\"\"\r\n    expression = left binary_op right\r\n    left       = number\r\n    right      = number\r\n    number     = ~\"\\d+\"i\r\n    \r\n    binary_op  = plus\r\n    plus       = \"+\"\r\n   \r\n    \"\"\"\r\n)\r\n```\r\n\r\n*Approach 1*: I can fix this issue by modifying the operator with regex i.e. `plus = ~\"\\s*\\+\\s*\"`.   I get the following result:\r\n\r\n```python\r\n# AST (clean)\r\n>>> tree = grammar.parse(\"2 + 3\")\r\n>>> print(tree)\r\n<Node called \"expression\" matching \"2 + 3\">\r\n    <RegexNode called \"number\" matching \"2\">\r\n    <Node called \"operator\" matching \" + \">\r\n        <RegexNode called \"plus\" matching \" + \">\r\n    <RegexNode called \"number\" matching \"3\">\r\n```\r\n\r\nHowever, if I extend this grammar, I would prefer not to modify every new operator with surrounding `\\s*` tags.  \r\n\r\n*Approach 2*: Alternatively, I could assign an optional item that sees zero or more occurrences of a `whitespace`:\r\n\r\n```python\r\n\"\"\"\r\n    ...\r\n\r\n    binary_op   = whitespace* binary_op_ whitespace*\r\n    binary_op_ = multiply / divide / plus / minus \r\n    plus       = \"+\"\r\n    minus      = \"-\"\r\n    multiply   = \"*\"\r\n    divide     = \"/\"\r\n    whitespace = ~\"\\s\"\r\n\r\n\"\"\"\r\n```\r\nWhile this works, I have an extra dummy variable `binary_op_`.   The list of such variables increases for other optional characters, such as parentheses.  Furthermore, the AST gets littered with extra \"spacing\" nodes, which in my case, makes an more nested tree than is required.\r\n\r\n```python\r\n# AST (less clean)\r\n>>> tree = grammar.parse(\"2 + 3\")\r\n>>> print(tree)\r\n<Node called \"expression\" matching \"2 + 3\">\r\n    <RegexNode called \"number\" matching \"2\">\r\n    <Node called \"binary_op\" matching \" + \">\r\n        <Node matching \" \">                                                 # spacing node\r\n            <RegexNode called \"whitespace\" matching \" \">\r\n        <Node called \"binary_op_\" matching \"+\">\r\n            <Node called \"plus\" matching \"+\">\r\n        <Node matching \" \">                                                 # spacing node\r\n            <RegexNode called \"whitespace\" matching \" \">\r\n    <RegexNode called \"number\" matching \"3\">\r\n```\r\n\r\n1. **Is there an idiom for ignoring  whitespace** in parsimonious?  \r\n1. If not, I think a **cleaner alternative may be to have a method that ignores a given regex**, [similar to `rply`][1] (e.g `grammar.ignore(\"\\s\")` for whitespace). This feature should allow `grammar.parse(\"2 + 3\")` to return the same \"clean\" AST as `grammar.parse(\"2+3\")`.\r\n\r\n  [1]: https://rply.readthedocs.io/en/latest/users-guide/lexers.html\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/117", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/117/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/117/events", "html_url": "https://github.com/erikrose/parsimonious/issues/117", "id": 237998874, "node_id": "MDU6SXNzdWUyMzc5OTg4NzQ=", "number": 117, "title": "Ommitting things without creating a node", "user": {"login": "schmittlauch", "id": 1479555, "node_id": "MDQ6VXNlcjE0Nzk1NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1479555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/schmittlauch", "html_url": "https://github.com/schmittlauch", "followers_url": "https://api.github.com/users/schmittlauch/followers", "following_url": "https://api.github.com/users/schmittlauch/following{/other_user}", "gists_url": "https://api.github.com/users/schmittlauch/gists{/gist_id}", "starred_url": "https://api.github.com/users/schmittlauch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/schmittlauch/subscriptions", "organizations_url": "https://api.github.com/users/schmittlauch/orgs", "repos_url": "https://api.github.com/users/schmittlauch/repos", "events_url": "https://api.github.com/users/schmittlauch/events{/privacy}", "received_events_url": "https://api.github.com/users/schmittlauch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-22T23:11:23Z", "updated_at": "2017-07-05T12:25:02Z", "closed_at": "2017-06-25T18:37:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently trying to parse a file which contains arbitrary description before the relevant data starts. I need to skip this part until I find the first data identifier, all things before the first identifier are later to be ignored.\r\n\r\nAs REs seem to behave greedily in PEG parsers I eat away the arbitrary characters one by one, each creating 2 nodes. That's probably the rason of the `RecursionError` I'm currently getting.\r\n\r\nThe relevant part of my grammar looks like this:\r\n\r\n```PEG\r\n        start           = skip_preface\r\n        skip_preface    = instance_list / (~\".\"s skip_preface)\r\n```\r\n\r\nI'd later throw away all `skip_preface` matches anyway, so is there a way to just omit/ ignore this? If not, is there a better way to deal with the preface?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/116", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/116/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/116/events", "html_url": "https://github.com/erikrose/parsimonious/issues/116", "id": 229794454, "node_id": "MDU6SXNzdWUyMjk3OTQ0NTQ=", "number": 116, "title": "Recursion Error", "user": {"login": "ibigpapa", "id": 694054, "node_id": "MDQ6VXNlcjY5NDA1NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/694054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibigpapa", "html_url": "https://github.com/ibigpapa", "followers_url": "https://api.github.com/users/ibigpapa/followers", "following_url": "https://api.github.com/users/ibigpapa/following{/other_user}", "gists_url": "https://api.github.com/users/ibigpapa/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibigpapa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibigpapa/subscriptions", "organizations_url": "https://api.github.com/users/ibigpapa/orgs", "repos_url": "https://api.github.com/users/ibigpapa/repos", "events_url": "https://api.github.com/users/ibigpapa/events{/privacy}", "received_events_url": "https://api.github.com/users/ibigpapa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-05-18T20:25:11Z", "updated_at": "2019-08-05T10:46:25Z", "closed_at": "2017-07-20T00:37:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I hit the recursion error while attempting to parse a text with this grammar.  I'm guessing my grammar is to blame for this.    Or is it because my text i'm parsing is nasty?\r\n\r\n### Grammar\r\n```python\r\ngrammar = Grammar(r\"\"\"\r\n    config = line+ EOF\r\n    block = generic_block\r\n    generic_block = statement block_start line+ block_end\r\n    block_start = block_start_word new_line\r\n    block_end = block_start_word new_line\r\n    line = (block / comment / statement)\r\n    statement = generic_statement\r\n    generic_statement = words+ new_line\r\n    words = word (space word)* space*\r\n    word = ~\"[a-z0-9\\.\\:\\-\\/\\(\\)\\,\\@\\_]+\"i\r\n    comment = comment_char (space / words)* new_line\r\n    comment_char = \"!\"\r\n    new_line = ~\"\\n\"\r\n    block_start_word = \"BLOCK_START\"\r\n    block_end_word = \"BLOCK_END\"\r\n    EOF = \"EOF\"\r\n\"\"\")\r\n```\r\n\r\n### Example Text\r\n```python\r\ntext = \"\"\"a statement line\r\n!\r\na block statement line\r\nBLOCK_START\r\nsub block statement line\r\n!\r\nsub block block statement line\r\nBLOCK_START\r\nsub sub block statement line\r\nBLOCK_END\r\nsub block statement line 2\r\n!\r\nBLOCK_END\r\nEOF\"\"\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/112", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/112/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/112/events", "html_url": "https://github.com/erikrose/parsimonious/issues/112", "id": 227834643, "node_id": "MDU6SXNzdWUyMjc4MzQ2NDM=", "number": 112, "title": "RFC: Update the test runner to pytest", "user": {"login": "lucaswiman", "id": 123110, "node_id": "MDQ6VXNlcjEyMzExMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/123110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucaswiman", "html_url": "https://github.com/lucaswiman", "followers_url": "https://api.github.com/users/lucaswiman/followers", "following_url": "https://api.github.com/users/lucaswiman/following{/other_user}", "gists_url": "https://api.github.com/users/lucaswiman/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucaswiman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucaswiman/subscriptions", "organizations_url": "https://api.github.com/users/lucaswiman/orgs", "repos_url": "https://api.github.com/users/lucaswiman/repos", "events_url": "https://api.github.com/users/lucaswiman/events{/privacy}", "received_events_url": "https://api.github.com/users/lucaswiman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-05-10T23:04:38Z", "updated_at": "2019-07-28T08:19:33Z", "closed_at": "2017-05-12T19:15:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@erikrose Nose is [no longer actively maintained](http://nose.readthedocs.io/en/latest/):\r\n>Nose has been in maintenance mode for the past several years and will likely cease without a new person/team to take over maintainership. New projects should consider using Nose2, py.test, or just plain unittest/unittest2.\r\n\r\nWhile it's essential \"done\" and is in little danger of breaking, py.test has added a  number of very nice features which make testing faster and much cleaner (e.g. descriptive errors for failures when using `assert foo(bar) == baz` styles). \r\n\r\nI've found myself missing pytest features when working on `parsimonious`, so if you're amenable to switching to pytest, I'd be happy to submit a PR. If not, please close this issue.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/111", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/111/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/111/events", "html_url": "https://github.com/erikrose/parsimonious/issues/111", "id": 211898126, "node_id": "MDU6SXNzdWUyMTE4OTgxMjY=", "number": 111, "title": "Visiting intermediate nodes", "user": {"login": "masoncj", "id": 3231507, "node_id": "MDQ6VXNlcjMyMzE1MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3231507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/masoncj", "html_url": "https://github.com/masoncj", "followers_url": "https://api.github.com/users/masoncj/followers", "following_url": "https://api.github.com/users/masoncj/following{/other_user}", "gists_url": "https://api.github.com/users/masoncj/gists{/gist_id}", "starred_url": "https://api.github.com/users/masoncj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/masoncj/subscriptions", "organizations_url": "https://api.github.com/users/masoncj/orgs", "repos_url": "https://api.github.com/users/masoncj/repos", "events_url": "https://api.github.com/users/masoncj/events{/privacy}", "received_events_url": "https://api.github.com/users/masoncj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-04T18:36:52Z", "updated_at": "2020-02-01T09:28:28Z", "closed_at": "2017-03-04T23:12:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "What's the right pattern to use to alias or refer to intermediate nodes during visitation?\r\n\r\n For instance, if I define a shared rule `user`, and then use that in two other rules (`bot_user` and `recipient`) to define two different parts of a larger expression, I only visit nodes of type `user` and not `bot_user` or `recipient`.  I'm using these intermediate rules as \"aliases\" to access the content they match.\r\n\r\nAm I misunderstanding something about how PEGs work?  Or, is there some optimization going on here where grammar rules that contain only a single other rule are elided?\r\n\r\n```\r\nfrom parsimonious import NodeVisitor\r\nfrom parsimonious.grammar import Grammar\r\n\r\ngrammar = Grammar(\"\"\"\r\n\texpression = bot_user _ recipient\r\n\tbot_user   = user\r\n\trecipient  = user\r\n\tuser       = \"@\" ~\"[a-z0-9_-]+\"i\r\n\t_          = ~\"\\s+\"\r\n\"\"\")\r\n\r\ntree = grammar.parse(\"@praisebot @cmason\")\r\n\r\nclass Visitor(NodeVisitor):\r\n\tdef visit_bot_user(self, bot_user, children):\r\n\t\tprint(\"bot_user {}\".format(recipient))\r\n\r\n\tdef visit_recipient(self, recipient, children):\r\n\t\tprint(\"recipient {}\".format(recipient))\r\n\r\n\tdef generic_visit(self, node, children):\r\n\t\tprint(\"visit {}\".format(node))\r\n\r\nVisitor().visit(tree)\r\n```\r\n\r\nHere I'd expect `visit_bot_user()` and `visit_recipient()` to both get called, but I only get calls to `generic_visit()` with `user` nodes.  \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/107", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/107/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/107/events", "html_url": "https://github.com/erikrose/parsimonious/issues/107", "id": 206576189, "node_id": "MDU6SXNzdWUyMDY1NzYxODk=", "number": 107, "title": "Can't parse a simple regular expression language", "user": {"login": "embg", "id": 12179121, "node_id": "MDQ6VXNlcjEyMTc5MTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/12179121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/embg", "html_url": "https://github.com/embg", "followers_url": "https://api.github.com/users/embg/followers", "following_url": "https://api.github.com/users/embg/following{/other_user}", "gists_url": "https://api.github.com/users/embg/gists{/gist_id}", "starred_url": "https://api.github.com/users/embg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/embg/subscriptions", "organizations_url": "https://api.github.com/users/embg/orgs", "repos_url": "https://api.github.com/users/embg/repos", "events_url": "https://api.github.com/users/embg/events{/privacy}", "received_events_url": "https://api.github.com/users/embg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-02-09T17:36:08Z", "updated_at": "2017-07-13T00:33:39Z", "closed_at": "2017-07-13T00:31:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "The example from the docs runs fine on my machine. However, a simple example I wrote fails with an infinite recursion. I'm trying to parse [this grammar](https://code.google.com/codejam/contest/7234486/dashboard#s=p0). Is this a problem with my code or a bug?\r\n\r\n```\r\nfrom parsimonious.grammar import Grammar\r\n\r\n#A grammar for a simple class of regular expressions\r\ngrammar = Grammar(\r\n    \"\"\"\r\n    expression = number / concatenation / disjunction / kleene\r\n    number = \"[0-9]\"+\r\n    concatenation = expression expression\r\n    disjunction = \"(\" (expression \"|\")+ expression \")\"\r\n    kleene = \"(\" expression \")*\"\r\n    \"\"\"\r\n)\r\n\r\n#Test it out on a string that should be in the language\r\ngrammar.parse('1') #tree should just be expression -> number\r\n#ERROR\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/105", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/105/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/105/events", "html_url": "https://github.com/erikrose/parsimonious/issues/105", "id": 205429943, "node_id": "MDU6SXNzdWUyMDU0Mjk5NDM=", "number": 105, "title": "question: seems useful, but I get a bad feeling from writing a docstring?", "user": {"login": "kootenpv", "id": 2746227, "node_id": "MDQ6VXNlcjI3NDYyMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2746227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kootenpv", "html_url": "https://github.com/kootenpv", "followers_url": "https://api.github.com/users/kootenpv/followers", "following_url": "https://api.github.com/users/kootenpv/following{/other_user}", "gists_url": "https://api.github.com/users/kootenpv/gists{/gist_id}", "starred_url": "https://api.github.com/users/kootenpv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kootenpv/subscriptions", "organizations_url": "https://api.github.com/users/kootenpv/orgs", "repos_url": "https://api.github.com/users/kootenpv/repos", "events_url": "https://api.github.com/users/kootenpv/events{/privacy}", "received_events_url": "https://api.github.com/users/kootenpv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-05T14:55:56Z", "updated_at": "2017-02-10T16:47:27Z", "closed_at": "2017-02-10T16:47:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I really like the possibilities, but I'm a bit \"worried\" about writing strings. Naturally, our editor won't help. Do you maybe have some advice on that? Why is it implemented like that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/102", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/102/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/102/events", "html_url": "https://github.com/erikrose/parsimonious/issues/102", "id": 190743350, "node_id": "MDU6SXNzdWUxOTA3NDMzNTA=", "number": 102, "title": "No support for Regex word boundaries", "user": {"login": "DomDomDoy", "id": 3393139, "node_id": "MDQ6VXNlcjMzOTMxMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3393139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DomDomDoy", "html_url": "https://github.com/DomDomDoy", "followers_url": "https://api.github.com/users/DomDomDoy/followers", "following_url": "https://api.github.com/users/DomDomDoy/following{/other_user}", "gists_url": "https://api.github.com/users/DomDomDoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/DomDomDoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DomDomDoy/subscriptions", "organizations_url": "https://api.github.com/users/DomDomDoy/orgs", "repos_url": "https://api.github.com/users/DomDomDoy/repos", "events_url": "https://api.github.com/users/DomDomDoy/events{/privacy}", "received_events_url": "https://api.github.com/users/DomDomDoy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-21T15:09:36Z", "updated_at": "2016-11-22T02:12:44Z", "closed_at": "2016-11-21T15:40:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "the following word boundary (\\b ) to delimit words is not included when invoked within a regex i.e. \"\\bmar\\b\"i", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/101", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/101/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/101/events", "html_url": "https://github.com/erikrose/parsimonious/issues/101", "id": 186965327, "node_id": "MDU6SXNzdWUxODY5NjUzMjc=", "number": 101, "title": "Should BadGrammar, Node be documented?", "user": {"login": "ramiro", "id": 40661, "node_id": "MDQ6VXNlcjQwNjYx", "avatar_url": "https://avatars1.githubusercontent.com/u/40661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramiro", "html_url": "https://github.com/ramiro", "followers_url": "https://api.github.com/users/ramiro/followers", "following_url": "https://api.github.com/users/ramiro/following{/other_user}", "gists_url": "https://api.github.com/users/ramiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramiro/subscriptions", "organizations_url": "https://api.github.com/users/ramiro/orgs", "repos_url": "https://api.github.com/users/ramiro/repos", "events_url": "https://api.github.com/users/ramiro/events{/privacy}", "received_events_url": "https://api.github.com/users/ramiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-03T02:11:29Z", "updated_at": "2016-11-11T20:03:12Z", "closed_at": "2016-11-11T20:03:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "BadGrammar isn't being imported in `__init__.py` together will the other exceptions.\r\n\r\nSomething similar happens with the Node class but I'm unsure it should be there. Also, it'd neat to have it's `text` method documented.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/96", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/96/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/96/events", "html_url": "https://github.com/erikrose/parsimonious/issues/96", "id": 174017183, "node_id": "MDU6SXNzdWUxNzQwMTcxODM=", "number": 96, "title": "How parsimonious work ?", "user": {"login": "projetmbc", "id": 168373, "node_id": "MDQ6VXNlcjE2ODM3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/168373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projetmbc", "html_url": "https://github.com/projetmbc", "followers_url": "https://api.github.com/users/projetmbc/followers", "following_url": "https://api.github.com/users/projetmbc/following{/other_user}", "gists_url": "https://api.github.com/users/projetmbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/projetmbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projetmbc/subscriptions", "organizations_url": "https://api.github.com/users/projetmbc/orgs", "repos_url": "https://api.github.com/users/projetmbc/repos", "events_url": "https://api.github.com/users/projetmbc/events{/privacy}", "received_events_url": "https://api.github.com/users/projetmbc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-30T13:20:36Z", "updated_at": "2016-09-01T07:36:23Z", "closed_at": "2016-09-01T03:32:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you explain a little the way parsimonious analyses BNF grammars and then parses files ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/95", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/95/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/95/events", "html_url": "https://github.com/erikrose/parsimonious/issues/95", "id": 172293534, "node_id": "MDU6SXNzdWUxNzIyOTM1MzQ=", "number": 95, "title": "Node __eq__ method internal error", "user": {"login": "wiseman", "id": 52466, "node_id": "MDQ6VXNlcjUyNDY2", "avatar_url": "https://avatars2.githubusercontent.com/u/52466?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiseman", "html_url": "https://github.com/wiseman", "followers_url": "https://api.github.com/users/wiseman/followers", "following_url": "https://api.github.com/users/wiseman/following{/other_user}", "gists_url": "https://api.github.com/users/wiseman/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiseman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiseman/subscriptions", "organizations_url": "https://api.github.com/users/wiseman/orgs", "repos_url": "https://api.github.com/users/wiseman/repos", "events_url": "https://api.github.com/users/wiseman/events{/privacy}", "received_events_url": "https://api.github.com/users/wiseman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-20T22:12:02Z", "updated_at": "2016-09-22T18:42:37Z", "closed_at": "2016-09-22T18:42:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Node`'s `__eq__` method doesn't check the type of the object it's being compared to, which leads to an exception if you try to compare Nodes to non-nodes.  For example, I can do `5 == \"hello\"` in Python, but if I try `5 == grammar.parse(text)`, I get the following exception:\n\n```\n  File \"/Users/wiseman/Dropbox/Disney/src/cca_dialogengine/env/lib/python2.7/site-packages/parsimonious/nodes.py\", line 90, in __eq__\n    self.expr_name == other.expr_name and\nAttributeError: 'int' object has no attribute 'expr_name'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/94", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/94/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/94/events", "html_url": "https://github.com/erikrose/parsimonious/issues/94", "id": 170998626, "node_id": "MDU6SXNzdWUxNzA5OTg2MjY=", "number": 94, "title": "About streaming tree processing", "user": {"login": "projetmbc", "id": 168373, "node_id": "MDQ6VXNlcjE2ODM3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/168373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projetmbc", "html_url": "https://github.com/projetmbc", "followers_url": "https://api.github.com/users/projetmbc/followers", "following_url": "https://api.github.com/users/projetmbc/following{/other_user}", "gists_url": "https://api.github.com/users/projetmbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/projetmbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projetmbc/subscriptions", "organizations_url": "https://api.github.com/users/projetmbc/orgs", "repos_url": "https://api.github.com/users/projetmbc/repos", "events_url": "https://api.github.com/users/projetmbc/events{/privacy}", "received_events_url": "https://api.github.com/users/projetmbc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-13T07:58:24Z", "updated_at": "2016-08-13T13:27:39Z", "closed_at": "2016-08-13T13:27:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. Can someone clarifier the following sentences of the README by an example ?\n\n---\n\nSome have asked why we don't process the tree as we go, SAX-style. There are two main reasons:\n\nIt wouldn't work. With a PEG parser, no parsing decision is final until the whole text is parsed. If we had to change a decision, we'd have to backtrack and redo the SAX-style interpretation as well, which would involve reconstituting part of the AST and quite possibly scuttling whatever you were doing with the streaming output.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/93", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/93/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/93/events", "html_url": "https://github.com/erikrose/parsimonious/issues/93", "id": 166599435, "node_id": "MDU6SXNzdWUxNjY1OTk0MzU=", "number": 93, "title": "Fragment grammar - Some documentation ?", "user": {"login": "projetmbc", "id": 168373, "node_id": "MDQ6VXNlcjE2ODM3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/168373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projetmbc", "html_url": "https://github.com/projetmbc", "followers_url": "https://api.github.com/users/projetmbc/followers", "following_url": "https://api.github.com/users/projetmbc/following{/other_user}", "gists_url": "https://api.github.com/users/projetmbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/projetmbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projetmbc/subscriptions", "organizations_url": "https://api.github.com/users/projetmbc/orgs", "repos_url": "https://api.github.com/users/projetmbc/repos", "events_url": "https://api.github.com/users/projetmbc/events{/privacy}", "received_events_url": "https://api.github.com/users/projetmbc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-07-20T14:45:18Z", "updated_at": "2016-07-27T08:51:54Z", "closed_at": "2016-07-27T08:51:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\n\nI wanted to define a grammar based on several ones like in the case of CSS and JS in an HTML file.\n\nIt seems possible but I do not see any documentation about that.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/87", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/87/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/87/events", "html_url": "https://github.com/erikrose/parsimonious/issues/87", "id": 130989233, "node_id": "MDU6SXNzdWUxMzA5ODkyMzM=", "number": 87, "title": "Context sub grammar", "user": {"login": "projetmbc", "id": 168373, "node_id": "MDQ6VXNlcjE2ODM3Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/168373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projetmbc", "html_url": "https://github.com/projetmbc", "followers_url": "https://api.github.com/users/projetmbc/followers", "following_url": "https://api.github.com/users/projetmbc/following{/other_user}", "gists_url": "https://api.github.com/users/projetmbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/projetmbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projetmbc/subscriptions", "organizations_url": "https://api.github.com/users/projetmbc/orgs", "repos_url": "https://api.github.com/users/projetmbc/repos", "events_url": "https://api.github.com/users/projetmbc/events{/privacy}", "received_events_url": "https://api.github.com/users/projetmbc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-03T10:51:14Z", "updated_at": "2016-07-20T14:43:57Z", "closed_at": "2016-07-20T14:43:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\n\nTanks a lot for your project.\n\nI wanted to do such a program but with the ability to define contexts where to use sub grammar. Think for example of a piece of JS in an HTML file.\n\nIs it feasible ? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/85", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/85/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/85/events", "html_url": "https://github.com/erikrose/parsimonious/issues/85", "id": 126292882, "node_id": "MDU6SXNzdWUxMjYyOTI4ODI=", "number": 85, "title": "How to parse with or without line breaks", "user": {"login": "JoePython1", "id": 307737, "node_id": "MDQ6VXNlcjMwNzczNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/307737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoePython1", "html_url": "https://github.com/JoePython1", "followers_url": "https://api.github.com/users/JoePython1/followers", "following_url": "https://api.github.com/users/JoePython1/following{/other_user}", "gists_url": "https://api.github.com/users/JoePython1/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoePython1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoePython1/subscriptions", "organizations_url": "https://api.github.com/users/JoePython1/orgs", "repos_url": "https://api.github.com/users/JoePython1/repos", "events_url": "https://api.github.com/users/JoePython1/events{/privacy}", "received_events_url": "https://api.github.com/users/JoePython1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-12T22:31:19Z", "updated_at": "2016-01-15T19:46:14Z", "closed_at": "2016-01-15T19:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "How would my grammar look like for text with or without line breaks?\n\n```\nmy_string = \"Line 1 \\\n                    Line 2\"\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/84", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/84/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/84/events", "html_url": "https://github.com/erikrose/parsimonious/issues/84", "id": 122867027, "node_id": "MDU6SXNzdWUxMjI4NjcwMjc=", "number": 84, "title": "noob question -> space as a separator. ", "user": {"login": "JoePython1", "id": 307737, "node_id": "MDQ6VXNlcjMwNzczNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/307737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoePython1", "html_url": "https://github.com/JoePython1", "followers_url": "https://api.github.com/users/JoePython1/followers", "following_url": "https://api.github.com/users/JoePython1/following{/other_user}", "gists_url": "https://api.github.com/users/JoePython1/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoePython1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoePython1/subscriptions", "organizations_url": "https://api.github.com/users/JoePython1/orgs", "repos_url": "https://api.github.com/users/JoePython1/repos", "events_url": "https://api.github.com/users/JoePython1/events{/privacy}", "received_events_url": "https://api.github.com/users/JoePython1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-18T02:39:50Z", "updated_at": "2015-12-18T03:54:21Z", "closed_at": "2015-12-18T03:54:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to set space(s) as separator. The following does not work.\n\n``` python\ngrammar = \"\"\"\\\nentry = \"set\"  [space]+ name sep value\nsep = ws \"=\" ws\nws = \" \"*\nname = ~\"[A-Z 0-9:]*\"i\nvalue = ~\"[A-Z 0-9]*\"i \n\"\"\"\n\ntext = \"\"\"\\\nset ddd = 5\n\"\"\"\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/83", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/83/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/83/events", "html_url": "https://github.com/erikrose/parsimonious/issues/83", "id": 119945320, "node_id": "MDU6SXNzdWUxMTk5NDUzMjA=", "number": 83, "title": "Problems with alternating", "user": {"login": "cknv", "id": 123179, "node_id": "MDQ6VXNlcjEyMzE3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/123179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cknv", "html_url": "https://github.com/cknv", "followers_url": "https://api.github.com/users/cknv/followers", "following_url": "https://api.github.com/users/cknv/following{/other_user}", "gists_url": "https://api.github.com/users/cknv/gists{/gist_id}", "starred_url": "https://api.github.com/users/cknv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cknv/subscriptions", "organizations_url": "https://api.github.com/users/cknv/orgs", "repos_url": "https://api.github.com/users/cknv/repos", "events_url": "https://api.github.com/users/cknv/events{/privacy}", "received_events_url": "https://api.github.com/users/cknv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-12-02T13:53:01Z", "updated_at": "2017-03-07T13:33:57Z", "closed_at": "2017-03-07T13:33:57Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am having a problem with an alternation in a grammar I wrote.\n\nI managed to reduce the case to a simple snippet (where even regex is probably overkill), with a couple of trivial examples:\n\n``` python\nfrom parsimonious.grammar import Grammar\n\nG = Grammar(r\"\"\"\nelement = word / wildcard\n\nwildcard = ~\"[*\\w]+\"\nword = ~\"\\w+\"\nspace = ~\"\\s+\"\n\"\"\")\n\ncases = [\n    'toast',\n    '*toast',\n    't*oast',\n    'to*st',\n]\n\nfor case in cases:\n    G.parse(case)\n```\n\nThe first case works fine, the second also (which puzzles me a bit), but the third and the fourth does not, and blows up with a `IncompleteParseError`, with the remainder being `*oast` and `*st`. However if I change the order of the element to `element = wildcard / word`, it parses just fine. So it seems that while `word` fails (as expected), it does not try to parse with `wildcard`, before giving up and just raising an error instead.\n\nWhile I have been able to work my way around it, and just defer deciding what it is until after parsing, It would be nice if I could tighten up my grammar a little.\n\nOf course I cannot quite rule out that I am just doing something stupid, so if it just me, I hope that someone else can learn from my mistake :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/82", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/82/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/82/events", "html_url": "https://github.com/erikrose/parsimonious/issues/82", "id": 115711871, "node_id": "MDU6SXNzdWUxMTU3MTE4NzE=", "number": 82, "title": "Is this an internal error?", "user": {"login": "Ethan-Bierlein", "id": 11580295, "node_id": "MDQ6VXNlcjExNTgwMjk1", "avatar_url": "https://avatars2.githubusercontent.com/u/11580295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ethan-Bierlein", "html_url": "https://github.com/Ethan-Bierlein", "followers_url": "https://api.github.com/users/Ethan-Bierlein/followers", "following_url": "https://api.github.com/users/Ethan-Bierlein/following{/other_user}", "gists_url": "https://api.github.com/users/Ethan-Bierlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ethan-Bierlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ethan-Bierlein/subscriptions", "organizations_url": "https://api.github.com/users/Ethan-Bierlein/orgs", "repos_url": "https://api.github.com/users/Ethan-Bierlein/repos", "events_url": "https://api.github.com/users/Ethan-Bierlein/events{/privacy}", "received_events_url": "https://api.github.com/users/Ethan-Bierlein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-11-08T06:27:47Z", "updated_at": "2015-11-09T02:31:12Z", "closed_at": "2015-11-09T02:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to parse a string, `[include]x[/include]`, with this grammar:\n\n```\ncharacter = ~\".*\"\n\nany = \"[any]\"\nword = \"[word]\"\ndigit = \"[digit]\"\nwhitespace = \"[whitespace]\"\n\nnot_word = \"[not-word]\"\nnot_digit = \"[not-digit]\"\nnot_whitespace = \"[not-whitespace]\"\n\nopen_include = \"[include]\"\nclose_include = \"[/include]\"\nopen_exclude = \"[exclude]\"\nclose_exclude = \"[/exclude]\"\nto = \"[to]\"\n\nopen_start_end = \"[start-end]\"\nclose_start_end = \"[/start-end]\"\n\nword_bound = \"[word-bound]\"\nopen_group = \"[group]\"\nclose_group = \"[/group]\"\n\nopen_non_cap = \"[non-cap]\"\nclose_non_cap = \"[/non-cap]\"\n\nopen_pos_look = \"[pos-look]\"\nclose_pos_look = \"[/pos-look]\"\n\nopen_neg_look = \"[neg-look]\"\nclose_neg_look = \"[/neg-look]\"\n\nzero_or_more = \"[zero-or-more]\"\none_or_more = \"[one-or-more]\"\nzero_or_one = \"[zero-or-one]\"\n\nmatch_amount = ~\"\\\\[match-amount\\\\s+\\\\d+\\\\]\"\nmatch_range = ~\"\\\\[match-range\\\\s+\\\\d+\\\\s+\\\\d+\\\\]\"\nmatch_amount_more = ~\"\\\\[match-amount-more\\\\s+\\\\d+\\\\]\"\n\nor = \"[or]\"\n```\n\nAnd I'm getting the following error when I feed the input string through a subclass of `NodeVisitor`:\n\n```\nTraceback (most recent call last):\n  ...\n  File \"C:\\Python34\\lib\\site-packages\\parsimonious\\nodes.py\", line 202 in visit\n    method = getattr(self, 'visit_' + node.expr_name, self.generic_visit)\nAttributeError: 'function' object has no attribute 'expr_name'  \n```\n\nIs this an internal error, or am I doing something wrong?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/77", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/77/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/77/events", "html_url": "https://github.com/erikrose/parsimonious/issues/77", "id": 98568178, "node_id": "MDU6SXNzdWU5ODU2ODE3OA==", "number": 77, "title": "SyntaxError in grammar.py(279)", "user": {"login": "Ethan-Bierlein", "id": 11580295, "node_id": "MDQ6VXNlcjExNTgwMjk1", "avatar_url": "https://avatars2.githubusercontent.com/u/11580295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ethan-Bierlein", "html_url": "https://github.com/Ethan-Bierlein", "followers_url": "https://api.github.com/users/Ethan-Bierlein/followers", "following_url": "https://api.github.com/users/Ethan-Bierlein/following{/other_user}", "gists_url": "https://api.github.com/users/Ethan-Bierlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ethan-Bierlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ethan-Bierlein/subscriptions", "organizations_url": "https://api.github.com/users/Ethan-Bierlein/orgs", "repos_url": "https://api.github.com/users/Ethan-Bierlein/repos", "events_url": "https://api.github.com/users/Ethan-Bierlein/events{/privacy}", "received_events_url": "https://api.github.com/users/Ethan-Bierlein/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-08-01T23:24:34Z", "updated_at": "2015-11-10T00:16:18Z", "closed_at": "2015-11-10T00:16:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm attempting to use Parsimonious with Python 3.5, with parsimonious version 6.2, but it keeps throwing this `SyntaxError`:\n\n```\nFile C:\\...\\parsimonious\\grammar.py, line 279\n  def visit_parenthesized(self, parenthesized, (left_paren, _1\n                                               ^\nSyntaxError: Invalid syntax\n```\n\nThis is clearly an issue with the library, not my code. Is there a fix for this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/76", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/76/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/76/events", "html_url": "https://github.com/erikrose/parsimonious/issues/76", "id": 98106939, "node_id": "MDU6SXNzdWU5ODEwNjkzOQ==", "number": 76, "title": "negative lookahead assertion", "user": {"login": "renzhn", "id": 1574994, "node_id": "MDQ6VXNlcjE1NzQ5OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1574994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/renzhn", "html_url": "https://github.com/renzhn", "followers_url": "https://api.github.com/users/renzhn/followers", "following_url": "https://api.github.com/users/renzhn/following{/other_user}", "gists_url": "https://api.github.com/users/renzhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/renzhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/renzhn/subscriptions", "organizations_url": "https://api.github.com/users/renzhn/orgs", "repos_url": "https://api.github.com/users/renzhn/repos", "events_url": "https://api.github.com/users/renzhn/events{/privacy}", "received_events_url": "https://api.github.com/users/renzhn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-07-30T07:59:57Z", "updated_at": "2015-07-30T11:26:03Z", "closed_at": "2015-07-30T11:26:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any examples?\nI want to match text that doesn't begin with some text, I tried as below:\nsome_text = ~u\"\\u3010\"\npara = !some_text text\ntext = ~\".*\"u\n\nAny hints?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/68", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/68/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/68/events", "html_url": "https://github.com/erikrose/parsimonious/issues/68", "id": 57890183, "node_id": "MDU6SXNzdWU1Nzg5MDE4Mw==", "number": 68, "title": "setup.py assumes utf-8 default system encoding", "user": {"login": "joshclow", "id": 9015743, "node_id": "MDQ6VXNlcjkwMTU3NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/9015743?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshclow", "html_url": "https://github.com/joshclow", "followers_url": "https://api.github.com/users/joshclow/followers", "following_url": "https://api.github.com/users/joshclow/following{/other_user}", "gists_url": "https://api.github.com/users/joshclow/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshclow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshclow/subscriptions", "organizations_url": "https://api.github.com/users/joshclow/orgs", "repos_url": "https://api.github.com/users/joshclow/repos", "events_url": "https://api.github.com/users/joshclow/events{/privacy}", "received_events_url": "https://api.github.com/users/joshclow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-17T06:52:39Z", "updated_at": "2015-05-29T02:40:18Z", "closed_at": "2015-05-29T02:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I hit this while trying to include parsimonious in a Docker container, which had a default system encoding set to ascii, leading to pip install bombing out on loading the readme in setup.py. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/67", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/67/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/67/events", "html_url": "https://github.com/erikrose/parsimonious/issues/67", "id": 54099629, "node_id": "MDU6SXNzdWU1NDA5OTYyOQ==", "number": 67, "title": "Handle indentation", "user": {"login": "gcq", "id": 1396111, "node_id": "MDQ6VXNlcjEzOTYxMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1396111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcq", "html_url": "https://github.com/gcq", "followers_url": "https://api.github.com/users/gcq/followers", "following_url": "https://api.github.com/users/gcq/following{/other_user}", "gists_url": "https://api.github.com/users/gcq/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcq/subscriptions", "organizations_url": "https://api.github.com/users/gcq/orgs", "repos_url": "https://api.github.com/users/gcq/repos", "events_url": "https://api.github.com/users/gcq/events{/privacy}", "received_events_url": "https://api.github.com/users/gcq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-01-12T20:02:25Z", "updated_at": "2017-05-24T12:42:20Z", "closed_at": "2017-05-24T12:38:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to handle indentation levels in parsimonious?\n\nI'm debating of sucking up all whitespace in front of each line, and try to take care of it with visitors, but i'm not sure how that would work out.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/66", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/66/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/66/events", "html_url": "https://github.com/erikrose/parsimonious/issues/66", "id": 47216029, "node_id": "MDU6SXNzdWU0NzIxNjAyOQ==", "number": 66, "title": "Nodes in the AST do not have names when used in conjunction with ?, +, *, ...", "user": {"login": "r41d", "id": 552662, "node_id": "MDQ6VXNlcjU1MjY2Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/552662?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r41d", "html_url": "https://github.com/r41d", "followers_url": "https://api.github.com/users/r41d/followers", "following_url": "https://api.github.com/users/r41d/following{/other_user}", "gists_url": "https://api.github.com/users/r41d/gists{/gist_id}", "starred_url": "https://api.github.com/users/r41d/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r41d/subscriptions", "organizations_url": "https://api.github.com/users/r41d/orgs", "repos_url": "https://api.github.com/users/r41d/repos", "events_url": "https://api.github.com/users/r41d/events{/privacy}", "received_events_url": "https://api.github.com/users/r41d/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-10-29T23:17:12Z", "updated_at": "2015-07-06T03:36:19Z", "closed_at": "2015-07-06T03:36:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a part of my Grammar:\n\n```\nping_statistics = entry+\nentry = int entry_body? NWL\nentry_body = NWL header NWL ping+ NWL stats\n```\n\nI created visit_\\* methods for each of entry, entry_body and ping.\nBut these methods do not get called.\nIn the AST they look like `<Node matching \"...\">`\nThe name is there when i remove the ? on entry_body.\n\nMy workaround looks like this:\n\n```\ndef visit_(self, node, contents):\n    if len(contents) < 1:\n        return None          ## generic string constant matcher..\n    if len(contents) == 1:\n        return contents[0]       ##  entry_body?\n    return contents\n```\n\nNodes shouldnt lose their names when used in conjunction with ?, +, *, ...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/65", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/65/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/65/events", "html_url": "https://github.com/erikrose/parsimonious/issues/65", "id": 45557072, "node_id": "MDU6SXNzdWU0NTU1NzA3Mg==", "number": 65, "title": "Remove whitespace : Neglect similar to pyparsing", "user": {"login": "codeyash", "id": 654242, "node_id": "MDQ6VXNlcjY1NDI0Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/654242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeyash", "html_url": "https://github.com/codeyash", "followers_url": "https://api.github.com/users/codeyash/followers", "following_url": "https://api.github.com/users/codeyash/following{/other_user}", "gists_url": "https://api.github.com/users/codeyash/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeyash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeyash/subscriptions", "organizations_url": "https://api.github.com/users/codeyash/orgs", "repos_url": "https://api.github.com/users/codeyash/repos", "events_url": "https://api.github.com/users/codeyash/events{/privacy}", "received_events_url": "https://api.github.com/users/codeyash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-10-11T17:22:24Z", "updated_at": "2014-10-13T02:27:13Z", "closed_at": "2014-10-12T19:07:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\ntest = visibility ws* function_keyword ws* word ws* arguments* ws*\n```\n\nThis rule matches\n\n```\nsample2 = \"\"\"public function __construct( )\"\"\"\n```\n\nNow problem I don't want to  mention ws\\* and it should be done by itself. Like pyparsing\n\nHow to enable that...\n\nI tried \n\n```\ntest = [visibility function_keyword word arguments*]\n```\n\nAnd\n\n```\ntest = (visibility function_keyword word arguments*)\n```\n\nWith no luck.\n\nI don't know its a bug or I'm doing wrong or its a feature request.\n\nI only want neglect all types whitespaces automatically. How to achieve this.\n\nThanks\nYash\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/63", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/63/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/63/events", "html_url": "https://github.com/erikrose/parsimonious/issues/63", "id": 45238817, "node_id": "MDU6SXNzdWU0NTIzODgxNw==", "number": 63, "title": "Lots of examples + online doc", "user": {"login": "codeyash", "id": 654242, "node_id": "MDQ6VXNlcjY1NDI0Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/654242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codeyash", "html_url": "https://github.com/codeyash", "followers_url": "https://api.github.com/users/codeyash/followers", "following_url": "https://api.github.com/users/codeyash/following{/other_user}", "gists_url": "https://api.github.com/users/codeyash/gists{/gist_id}", "starred_url": "https://api.github.com/users/codeyash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codeyash/subscriptions", "organizations_url": "https://api.github.com/users/codeyash/orgs", "repos_url": "https://api.github.com/users/codeyash/repos", "events_url": "https://api.github.com/users/codeyash/events{/privacy}", "received_events_url": "https://api.github.com/users/codeyash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-08T12:43:48Z", "updated_at": "2014-10-08T23:08:34Z", "closed_at": "2014-10-08T23:08:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks good library to me but I'm unable to use it properly and can comment how good it is.\n\nAlmost no examples (except only 2) and only ReadMe as doc. \n\nTo make it popular I feel it needs examples and full documentation. \n\nI really want to use and I'm not python pro but can understand many things easily and examples surely help in learning and using library. \n\nIf I miss anything please let me know.\n\nThanks,\nYash\nKineticWing IDE \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/61", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/61/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/61/events", "html_url": "https://github.com/erikrose/parsimonious/issues/61", "id": 43705299, "node_id": "MDU6SXNzdWU0MzcwNTI5OQ==", "number": 61, "title": "AttributeError: 'LazyReference' object has no attribute 'parse'", "user": {"login": "BillyWM", "id": 288075, "node_id": "MDQ6VXNlcjI4ODA3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/288075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillyWM", "html_url": "https://github.com/BillyWM", "followers_url": "https://api.github.com/users/BillyWM/followers", "following_url": "https://api.github.com/users/BillyWM/following{/other_user}", "gists_url": "https://api.github.com/users/BillyWM/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillyWM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillyWM/subscriptions", "organizations_url": "https://api.github.com/users/BillyWM/orgs", "repos_url": "https://api.github.com/users/BillyWM/repos", "events_url": "https://api.github.com/users/BillyWM/events{/privacy}", "received_events_url": "https://api.github.com/users/BillyWM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-09-24T01:43:46Z", "updated_at": "2014-09-24T17:43:42Z", "closed_at": "2014-09-24T17:42:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not having any luck doing any actual parsing. I've used a PEG parser before (PEG.js) but I'm not understanding how to use this one. If, for example, you simply modify that styled text example with styled_text = text, you'll generate an error like so. Why is that not legal? Should it be?\n\n```\n$ python convert.py\nTraceback (most recent call last):\n  File \"convert.py\", line 17, in <module>\n    print my_grammar.parse(\"TEST\")\n  File \"build\\bdist.win32\\egg\\parsimonious\\grammar.py\", line 112, in parse\nAttributeError: 'LazyReference' object has no attribute 'parse'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/60", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/60/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/60/events", "html_url": "https://github.com/erikrose/parsimonious/issues/60", "id": 43320709, "node_id": "MDU6SXNzdWU0MzMyMDcwOQ==", "number": 60, "title": "Easy way to handle consecutive whitespaces?", "user": {"login": "netheril96", "id": 836839, "node_id": "MDQ6VXNlcjgzNjgzOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/836839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/netheril96", "html_url": "https://github.com/netheril96", "followers_url": "https://api.github.com/users/netheril96/followers", "following_url": "https://api.github.com/users/netheril96/following{/other_user}", "gists_url": "https://api.github.com/users/netheril96/gists{/gist_id}", "starred_url": "https://api.github.com/users/netheril96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/netheril96/subscriptions", "organizations_url": "https://api.github.com/users/netheril96/orgs", "repos_url": "https://api.github.com/users/netheril96/repos", "events_url": "https://api.github.com/users/netheril96/events{/privacy}", "received_events_url": "https://api.github.com/users/netheril96/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-20T21:56:06Z", "updated_at": "2014-09-21T02:31:16Z", "closed_at": "2014-09-21T02:29:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is common in programming languages to treat consecutive whitespace characters as a single delimiter, but it seems that there is no easy way to do it in `parsimonious`. I am new to PEG, so maybe I am wrong.\n\nCurrently I'm writing a grammar like this\n\n```\ntype = (space simple_type space \"<\" space type_list space \">\" space) / ( space simple_type space )\nsimple_type = ......\ntype_list = ......\n......\nspace = ~\"[ \\t]*\"\n```\n\nIt is so tedious to insert a `space` everywhere, and easily forgettable because I hit the `Space` key on my keyboard and then forget to insert a `space`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/59", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/59/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/59/events", "html_url": "https://github.com/erikrose/parsimonious/issues/59", "id": 42322125, "node_id": "MDU6SXNzdWU0MjMyMjEyNQ==", "number": 59, "title": "Unnamed nodes should make up useful names for themselves", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 128105678, "node_id": "MDU6TGFiZWwxMjgxMDU2Nzg=", "url": "https://api.github.com/repos/erikrose/parsimonious/labels/easy", "name": "easy", "color": "0052cc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-09T15:56:58Z", "updated_at": "2017-07-23T20:08:04Z", "closed_at": "2017-07-23T20:08:04Z", "author_association": "OWNER", "active_lock_reason": null, "body": "When you print a node, you get something like this:\n\n```\n<Node called \"char_range\" matching \"c-a\">\n    <Node called \"class_char\" matching \"c\">\n        <RegexNode matching \"c\">\n    <Node matching \"-\">\n    <Node called \"class_char\" matching \"a\">\n        <RegexNode matching \"a\">\n```\n\nNamed nodes get names, but unnamed ones (like the one matching \"-\") don't. Especially when debugging\u2014for instance, ending up in visit_generic and not knowing what node triggered that dispatch\u2014it would be helpful if nodes would identify themselves by their rule expression: `<Node \"class_item*\" matching \"abc\">`. Then we take the \"called\" out of the named nodes, and everything is frighteningly consistent.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/53", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/53/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/53/events", "html_url": "https://github.com/erikrose/parsimonious/issues/53", "id": 37828507, "node_id": "MDU6SXNzdWUzNzgyODUwNw==", "number": 53, "title": "Make Grammar less of a dict", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-14T21:10:21Z", "updated_at": "2015-04-13T16:43:42Z", "closed_at": "2015-04-13T16:43:42Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The write-oriented dict methods don't make sense on Grammars. We shouldn't invite calls to them, at least not until we have some pretty comprehensive recompilation machinery hooked up to them.\n- `update()`\n- `__setitem__()`\n- `pop()` and `popitem()`\n- `setdefault()`\n- `__delitem__()`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/52", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/52/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/52/events", "html_url": "https://github.com/erikrose/parsimonious/issues/52", "id": 37827031, "node_id": "MDU6SXNzdWUzNzgyNzAzMQ==", "number": 52, "title": "Make _match() public.", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-14T20:53:10Z", "updated_at": "2014-07-18T09:44:41Z", "closed_at": "2014-07-15T03:13:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "If we're going to call _match from outside, as in https://github.com/erikrose/parsimonious/commit/029cb2f0717e07748e982673c061a4255b9ffb72#diff-23015ea821765daa0cb85fb8f8bd0665R332, it'll need to be public. Or we could add `cache` and `error` args to `match()`, or something.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/49", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/49/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/49/events", "html_url": "https://github.com/erikrose/parsimonious/issues/49", "id": 37731702, "node_id": "MDU6SXNzdWUzNzczMTcwMg==", "number": 49, "title": "/ operator only allows single terms", "user": {"login": "eevee", "id": 94112, "node_id": "MDQ6VXNlcjk0MTEy", "avatar_url": "https://avatars2.githubusercontent.com/u/94112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eevee", "html_url": "https://github.com/eevee", "followers_url": "https://api.github.com/users/eevee/followers", "following_url": "https://api.github.com/users/eevee/following{/other_user}", "gists_url": "https://api.github.com/users/eevee/gists{/gist_id}", "starred_url": "https://api.github.com/users/eevee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eevee/subscriptions", "organizations_url": "https://api.github.com/users/eevee/orgs", "repos_url": "https://api.github.com/users/eevee/repos", "events_url": "https://api.github.com/users/eevee/events{/privacy}", "received_events_url": "https://api.github.com/users/eevee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-13T00:36:23Z", "updated_at": "2014-07-13T00:44:11Z", "closed_at": "2014-07-13T00:44:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on experience with other PEG pargens, I'd think this should work:\n\n```\n>>> from parsimonious import Grammar\n>>> Grammar(\"a = b c / d\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/eevee/.local/lib/python3.4/site-packages/parsimonious/grammar.py\", line 63, in __init__\n    exprs, first = self._expressions_from_rules(rules)\n  File \"/home/eevee/.local/lib/python3.4/site-packages/parsimonious/grammar.py\", line 78, in _expressions_from_rules\n    tree = rule_grammar.parse(rules)\n  File \"/home/eevee/.local/lib/python3.4/site-packages/parsimonious/grammar.py\", line 83, in parse\n    return self.default_rule.parse(text, pos=pos)\n  File \"/home/eevee/.local/lib/python3.4/site-packages/parsimonious/expressions.py\", line 42, in parse\n    raise IncompleteParseError(text, node.end, self)\nparsimonious.exceptions.IncompleteParseError: Rule 'rules' matched in its entirety, but it didn't consume all the text. The non-matching portion of the text begins with '/ d' (line 1, column 9).\n```\n\nBut `/` is defined with:\n\n``` python\nor_term = \"/\" _ term\nored = term or_term+\n```\n\nWrapping everything in parentheses works, but is a little inconvenient when e.g. parsing a language with operators and trying to consume the whitespace after all of them  :)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/47", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/47/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/47/events", "html_url": "https://github.com/erikrose/parsimonious/issues/47", "id": 37547294, "node_id": "MDU6SXNzdWUzNzU0NzI5NA==", "number": 47, "title": "Generalizing and augmenting PEGs", "user": {"login": "keleshev", "id": 619158, "node_id": "MDQ6VXNlcjYxOTE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keleshev", "html_url": "https://github.com/keleshev", "followers_url": "https://api.github.com/users/keleshev/followers", "following_url": "https://api.github.com/users/keleshev/following{/other_user}", "gists_url": "https://api.github.com/users/keleshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/keleshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keleshev/subscriptions", "organizations_url": "https://api.github.com/users/keleshev/orgs", "repos_url": "https://api.github.com/users/keleshev/repos", "events_url": "https://api.github.com/users/keleshev/events{/privacy}", "received_events_url": "https://api.github.com/users/keleshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2014-07-10T09:49:50Z", "updated_at": "2014-07-14T21:06:46Z", "closed_at": "2014-07-13T01:06:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I wish to parse (1) binary data using PEGs, or (2) token streams (like #40). Also, I wish to parse (3) more grammars than PEGs allow by somehow augmenting the grammar with some Python code and maybe some state, because I don't want to throw away my grammar and rewrite the parser manually as soon as I want to add a feature that is not parseable by PEGs, like, say, whitespace-sensitivity.\n\nWhat do you think?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/46", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/46/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/46/events", "html_url": "https://github.com/erikrose/parsimonious/issues/46", "id": 37529844, "node_id": "MDU6SXNzdWUzNzUyOTg0NA==", "number": 46, "title": "Add NodeVisitor subclass which constructs default grammar from docstrings", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-07-10T03:52:46Z", "updated_at": "2014-07-11T05:58:35Z", "closed_at": "2014-07-11T05:58:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The default grammar concept introduced in c973cd4934eb4e49dc483c3e616e9aa99fb85a00 is a straightforward place to plug in the result of docstring aggregation, as sketched in https://github.com/erikrose/parsimonious/pull/23#issuecomment-16079065.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/44", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/44/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/44/events", "html_url": "https://github.com/erikrose/parsimonious/issues/44", "id": 37506715, "node_id": "MDU6SXNzdWUzNzUwNjcxNQ==", "number": 44, "title": "Make one-visitor-to-one-grammar case simpler", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-09T20:46:52Z", "updated_at": "2014-07-10T03:36:40Z", "closed_at": "2014-07-10T03:36:40Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Many situations have only a single visitor coupled to one grammar. It's great that Parsimonious makes it easy to decouple those (rendering plain text and HTML out of wiki text, for instance), but it would also be nice not to have to have something like this in everybody's client code:\n\n``` python\ndef create_handler(grammar, visitor):\n    visitor_inst = visitor()\n    return lambda x: visitor_inst.visit(grammar.parse(x))\n```\n\nMaybe we should be able to register a default visitor with a grammar. Actually, that's upside down. It's very unlikely we could recycle a visitor for use with more than one grammar, so let's make visitors aware of their grammars. NodeVisitor should have parse() and match() methods which run a string through the registered grammar (stored on an attr or something), visit it, and return the result:\n\n``` python\n@classmethod\ndef parse(cls, *args, **kwargs):\n    return cls().visit(cls.grammar.parse(*args, **kwargs))\n```\n\nSo then we could say just...\n\n``` python\nvisitor.parse(x)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/41", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/41/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/41/events", "html_url": "https://github.com/erikrose/parsimonious/issues/41", "id": 35188325, "node_id": "MDU6SXNzdWUzNTE4ODMyNQ==", "number": 41, "title": "setting rule precedence", "user": {"login": "jgoppert", "id": 473772, "node_id": "MDQ6VXNlcjQ3Mzc3Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/473772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgoppert", "html_url": "https://github.com/jgoppert", "followers_url": "https://api.github.com/users/jgoppert/followers", "following_url": "https://api.github.com/users/jgoppert/following{/other_user}", "gists_url": "https://api.github.com/users/jgoppert/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgoppert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgoppert/subscriptions", "organizations_url": "https://api.github.com/users/jgoppert/orgs", "repos_url": "https://api.github.com/users/jgoppert/repos", "events_url": "https://api.github.com/users/jgoppert/events{/privacy}", "received_events_url": "https://api.github.com/users/jgoppert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-06-06T22:28:06Z", "updated_at": "2014-07-15T21:51:02Z", "closed_at": "2014-07-15T05:58:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've translated the entire modelica EBNF grammar to PEG and used parsimonious to create a pure python modelica compiler.\n\nhttps://github.com/jgoppert/modpeg/blob/master/modpeg/parser.py\n\nPlease check it out and let me know if you see any obvious mistakes as this is my first adventure with PEG.\n\nMy issue is that some of the statements are matching a generic regex before my keywords. Is there a way to set precedence on rules?\n\noriginal EBNF grammar\n\n``` python\n    element_list = ((element semicolon)/(annotation semicolon))*\n```\n\nmodified PEG grammar where end/equation/algorithm are keywords that I have to ensure don't match the generic name of an element in the list\n\n``` python\n   element_list = (!(end/equation/algorithm)\n        ((element semicolon)/(annotation semicolon)))*\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/38", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/38/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/38/events", "html_url": "https://github.com/erikrose/parsimonious/issues/38", "id": 24490732, "node_id": "MDU6SXNzdWUyNDQ5MDczMg==", "number": 38, "title": "Umlaut Problem", "user": {"login": "dermariusz", "id": 1424153, "node_id": "MDQ6VXNlcjE0MjQxNTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1424153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dermariusz", "html_url": "https://github.com/dermariusz", "followers_url": "https://api.github.com/users/dermariusz/followers", "following_url": "https://api.github.com/users/dermariusz/following{/other_user}", "gists_url": "https://api.github.com/users/dermariusz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dermariusz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dermariusz/subscriptions", "organizations_url": "https://api.github.com/users/dermariusz/orgs", "repos_url": "https://api.github.com/users/dermariusz/repos", "events_url": "https://api.github.com/users/dermariusz/events{/privacy}", "received_events_url": "https://api.github.com/users/dermariusz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-12-18T13:53:18Z", "updated_at": "2013-12-18T15:34:45Z", "closed_at": "2013-12-18T14:12:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following Example:\n\n``` python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*- \n\nfrom parsimonious.grammar import Grammar\ng = Grammar(\n  \"\"\"\n  styled_text = bold_text / italic_text\n  bold_text   = \"((\" text \"))\"\n  italic_text = \"''\" text \"''\"\n  text        = ~r\"[\\w\\s]*\"\n  \"\"\"\n)\nprint g.parse(u'((b\u00f6ld))')\n```\n\nTraceback:\n\n```\nTraceback (most recent call last):                                                                                                                                                                                               \n  File \"parsi.py\", line 12, in <module>                                                                                                                                                                                          \n    print g.parse(u'((b\u00f6ld))')                                                                                                                                                                                                   \n  File \"/home/mariusz/.local/lib/python2.7/site-packages/parsimonious/grammar.py\", line 83, in parse                                                                                                                             \n    return self.default_rule.parse(text, pos=pos)                                                                                                                                                                                \n  File \"/home/mariusz/.local/lib/python2.7/site-packages/parsimonious/expressions.py\", line 40, in parse                                                                                                                         \n    node = self.match(text, pos=pos)                                                                                                                                                                                             \n  File \"/home/mariusz/.local/lib/python2.7/site-packages/parsimonious/expressions.py\", line 57, in match                                                                                                                         \n    raise error                                                                                                                                                                                                                  \nparsimonious.exceptions.ParseError: Rule <Literal \"))\" at 0x21525040> didn't match at '\u00f6ld))' (line 1, column 4).                                                                                                                \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/36", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/36/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/36/events", "html_url": "https://github.com/erikrose/parsimonious/issues/36", "id": 21362858, "node_id": "MDU6SXNzdWUyMTM2Mjg1OA==", "number": 36, "title": "Allow for rules that don't create separate nodes", "user": {"login": "victorandree", "id": 52588, "node_id": "MDQ6VXNlcjUyNTg4", "avatar_url": "https://avatars3.githubusercontent.com/u/52588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victorandree", "html_url": "https://github.com/victorandree", "followers_url": "https://api.github.com/users/victorandree/followers", "following_url": "https://api.github.com/users/victorandree/following{/other_user}", "gists_url": "https://api.github.com/users/victorandree/gists{/gist_id}", "starred_url": "https://api.github.com/users/victorandree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victorandree/subscriptions", "organizations_url": "https://api.github.com/users/victorandree/orgs", "repos_url": "https://api.github.com/users/victorandree/repos", "events_url": "https://api.github.com/users/victorandree/events{/privacy}", "received_events_url": "https://api.github.com/users/victorandree/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-10-22T06:03:14Z", "updated_at": "2017-12-21T08:37:14Z", "closed_at": "2017-12-21T08:37:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's often useful to define some basic rules that can be composited to form larger expressions:\n\n```\ndigit = ~r\"[0-9]\"\nnumber = digit+\n```\n\nHowever, there is not always any reason why each separate `digit` needs its own node, even if it's useful as a \"building block\" in the grammar. As such, it would be nice to be able to mark a rule as \"non-node creating\". The library simpleparse supports this by creating '[unreported productions](http://simpleparse.sourceforge.net/simpleparse_grammars.html)' that would translate into something like this for parsimonious:\n\n```\n<digit> = ~r\"[0-9]\"\nnumber = digit+\n```\n\nThen, any `number` node could simply be the number, and we don't get a bunch of (unneeded) nodes for each component \u2013\u00a0because the angle brackets signify that this rule should not be \"reported\" separately.\n\nI suppose this could either be implemented while parsing the grammar \u2013 replacing any reference to such a rule with simply its contents (at a preprocessing stage), or as part of the parsing of the text...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/32", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/32/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/32/events", "html_url": "https://github.com/erikrose/parsimonious/issues/32", "id": 14181080, "node_id": "MDU6SXNzdWUxNDE4MTA4MA==", "number": 32, "title": "Whitespace before first item in parenthesis breaks Grammar", "user": {"login": "keleshev", "id": 619158, "node_id": "MDQ6VXNlcjYxOTE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keleshev", "html_url": "https://github.com/keleshev", "followers_url": "https://api.github.com/users/keleshev/followers", "following_url": "https://api.github.com/users/keleshev/following{/other_user}", "gists_url": "https://api.github.com/users/keleshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/keleshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keleshev/subscriptions", "organizations_url": "https://api.github.com/users/keleshev/orgs", "repos_url": "https://api.github.com/users/keleshev/repos", "events_url": "https://api.github.com/users/keleshev/events{/privacy}", "received_events_url": "https://api.github.com/users/keleshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-05-10T07:25:53Z", "updated_at": "2013-05-10T18:37:32Z", "closed_at": "2013-05-10T18:37:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "``` python\n>>> from parsimonious.grammar import Grammar\n\n>>> Grammar('foo = (\"baz\" \"bar\")+').parse('bazbar')\ns = 'bazbar'\nNode(u'foo', s, 0, 6, children=[Node('', s, 0, 6, children=[Node('', s, 0, 3), Node('', s, 3, 6)])])\n\n>>> Grammar('foo = ( \"baz\" \"bar\")+').parse('bazbar')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Library/Python/2.7/site-packages/parsimonious/grammar.py\", line 63, in __init__\n    exprs, first = self._expressions_from_rules(rules)\n  File \"/Library/Python/2.7/site-packages/parsimonious/grammar.py\", line 80, in _expressions_from_rules\n    raise BadGrammar('There is an error in your grammar definition. '\nparsimonious.exceptions.BadGrammar: There is an error in your grammar definition. Sorry for the vague error reporting at the moment.\n>>> \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/28", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/28/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/28/events", "html_url": "https://github.com/erikrose/parsimonious/issues/28", "id": 13888016, "node_id": "MDU6SXNzdWUxMzg4ODAxNg==", "number": 28, "title": "Error handling", "user": {"login": "keleshev", "id": 619158, "node_id": "MDQ6VXNlcjYxOTE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keleshev", "html_url": "https://github.com/keleshev", "followers_url": "https://api.github.com/users/keleshev/followers", "following_url": "https://api.github.com/users/keleshev/following{/other_user}", "gists_url": "https://api.github.com/users/keleshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/keleshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keleshev/subscriptions", "organizations_url": "https://api.github.com/users/keleshev/orgs", "repos_url": "https://api.github.com/users/keleshev/repos", "events_url": "https://api.github.com/users/keleshev/events{/privacy}", "received_events_url": "https://api.github.com/users/keleshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-05-02T12:02:49Z", "updated_at": "2013-05-08T07:18:18Z", "closed_at": "2013-05-08T00:54:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I know that error handling is on the todo-list, but I just wanted to point out that it is the only reason I still don't use parsimonious for production code. I really want to make a [docopt](https://github.com/docopt/docopt) version using parsimonious, but just can't afford to show no errors to my users. Otherwise parsimonious is great and fast.\n\nAlso check out this thread: http://www.reddit.com/r/Python/comments/1dfqqo/write_an_interpreter_in_python/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/27", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/27/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/27/events", "html_url": "https://github.com/erikrose/parsimonious/issues/27", "id": 13725505, "node_id": "MDU6SXNzdWUxMzcyNTUwNQ==", "number": 27, "title": "How do I attach callbacks to terminal nodes?", "user": {"login": "salimfadhley", "id": 783193, "node_id": "MDQ6VXNlcjc4MzE5Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/783193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salimfadhley", "html_url": "https://github.com/salimfadhley", "followers_url": "https://api.github.com/users/salimfadhley/followers", "following_url": "https://api.github.com/users/salimfadhley/following{/other_user}", "gists_url": "https://api.github.com/users/salimfadhley/gists{/gist_id}", "starred_url": "https://api.github.com/users/salimfadhley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salimfadhley/subscriptions", "organizations_url": "https://api.github.com/users/salimfadhley/orgs", "repos_url": "https://api.github.com/users/salimfadhley/repos", "events_url": "https://api.github.com/users/salimfadhley/events{/privacy}", "received_events_url": "https://api.github.com/users/salimfadhley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-04-27T20:15:54Z", "updated_at": "2013-04-29T21:51:31Z", "closed_at": "2013-04-27T21:42:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Continuing from the previous example - I'd like to be able to define some kind of callback which will be called any time the parser encounters a terminal. \n\nSo continuing on from my previous example, supposing the parser had successfully parsed the expression:\n\n\"go north, south\"\n\nAnd supposing that matches a particular rule for 'movement instruction' - I'd like a particular callback to be invoked any time we have one of those.\n\nCan it be done?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/26", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/26/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/26/events", "html_url": "https://github.com/erikrose/parsimonious/issues/26", "id": 13725479, "node_id": "MDU6SXNzdWUxMzcyNTQ3OQ==", "number": 26, "title": "Is it possible to have a grammar rule which matches a sequence of instructions?", "user": {"login": "salimfadhley", "id": 783193, "node_id": "MDQ6VXNlcjc4MzE5Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/783193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salimfadhley", "html_url": "https://github.com/salimfadhley", "followers_url": "https://api.github.com/users/salimfadhley/followers", "following_url": "https://api.github.com/users/salimfadhley/following{/other_user}", "gists_url": "https://api.github.com/users/salimfadhley/gists{/gist_id}", "starred_url": "https://api.github.com/users/salimfadhley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salimfadhley/subscriptions", "organizations_url": "https://api.github.com/users/salimfadhley/orgs", "repos_url": "https://api.github.com/users/salimfadhley/repos", "events_url": "https://api.github.com/users/salimfadhley/events{/privacy}", "received_events_url": "https://api.github.com/users/salimfadhley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-04-27T20:13:08Z", "updated_at": "2013-04-27T23:56:56Z", "closed_at": "2013-04-27T21:11:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Supposing I was writing a text-based adventure game.\n\nI could issue an instruction like:\n\ngo north\n\nBut I'd also like to say\n\ngo north, south, east\n\nIs there a parsimonious way to express this kind of grammar?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/25", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/25/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/25/events", "html_url": "https://github.com/erikrose/parsimonious/issues/25", "id": 12988678, "node_id": "MDU6SXNzdWUxMjk4ODY3OA==", "number": 25, "title": "Add parentheses to the syntax reference table in the readme", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-04-09T19:46:04Z", "updated_at": "2013-04-17T06:19:15Z", "closed_at": "2013-04-17T06:19:15Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We didn't talk about parens.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/22", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/22/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/22/events", "html_url": "https://github.com/erikrose/parsimonious/issues/22", "id": 12897746, "node_id": "MDU6SXNzdWUxMjg5Nzc0Ng==", "number": 22, "title": "Strange behavior", "user": {"login": "keleshev", "id": 619158, "node_id": "MDQ6VXNlcjYxOTE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keleshev", "html_url": "https://github.com/keleshev", "followers_url": "https://api.github.com/users/keleshev/followers", "following_url": "https://api.github.com/users/keleshev/following{/other_user}", "gists_url": "https://api.github.com/users/keleshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/keleshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keleshev/subscriptions", "organizations_url": "https://api.github.com/users/keleshev/orgs", "repos_url": "https://api.github.com/users/keleshev/repos", "events_url": "https://api.github.com/users/keleshev/events{/privacy}", "received_events_url": "https://api.github.com/users/keleshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2013-04-07T16:40:11Z", "updated_at": "2013-04-09T10:44:41Z", "closed_at": "2013-04-09T10:35:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm getting this strange behavior using the latest \"master\":\n\n``` python\n>>> g = \"\"\"\n...  digits = digit+ \n...  int = digits \n...  digit = ~\"[0-9]\" \n...  number = int \n...  main = number \n... \"\"\"\n>>> Grammar(g)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"parsimonious/grammar.py\", line 109, in __repr__\n    return \"Grammar('%s')\" % str(self).encode('string_escape')\n  File \"parsimonious/utils.py\", line 9, in __str__\n    return self.__unicode__().encode('utf-8')\n  File \"parsimonious/grammar.py\", line 105, in __unicode__\n    return '\\n'.join(expr.as_rule() for expr in exprs)\n  File \"parsimonious/grammar.py\", line 105, in <genexpr>\n    return '\\n'.join(expr.as_rule() for expr in exprs)\nAttributeError: 'LazyReference' object has no attribute 'as_rule'\n>>> Grammar(g)['main']\nu'int'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/21", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/21/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/21/events", "html_url": "https://github.com/erikrose/parsimonious/issues/21", "id": 12884251, "node_id": "MDU6SXNzdWUxMjg4NDI1MQ==", "number": 21, "title": "Support right recursion", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-04-06T22:11:44Z", "updated_at": "2013-04-09T10:05:53Z", "closed_at": "2013-04-09T10:05:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "A grammar like\u2026\n\n```\ndigits = digit digits?\ndigit = ~r\"[0-9]\"\n```\n\n\u2026has no way of being built. We need to construct `Sequence(Regex(\u2026))` and then, afterward, append it as its own last member.\n\nAlso, getting reprs of such grammars recurses infinitely. Check for twice-visited nodes or something.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/19", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/19/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/19/events", "html_url": "https://github.com/erikrose/parsimonious/issues/19", "id": 12770514, "node_id": "MDU6SXNzdWUxMjc3MDUxNA==", "number": 19, "title": "Allow multi-line rules", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2013-04-03T20:07:17Z", "updated_at": "2013-04-27T04:47:43Z", "closed_at": "2013-04-27T04:37:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "`=` is used for only one thing in the rule-defining grammar, so we can do multi-line rules without requiring surrounding parens. Just be sure to require a newline at the end of each rule lest things get hard for humans to parse.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/18", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/18/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/18/events", "html_url": "https://github.com/erikrose/parsimonious/issues/18", "id": 12761116, "node_id": "MDU6SXNzdWUxMjc2MTExNg==", "number": 18, "title": "Could you post an example JSON decoder?", "user": {"login": "twneale", "id": 70850, "node_id": "MDQ6VXNlcjcwODUw", "avatar_url": "https://avatars3.githubusercontent.com/u/70850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twneale", "html_url": "https://github.com/twneale", "followers_url": "https://api.github.com/users/twneale/followers", "following_url": "https://api.github.com/users/twneale/following{/other_user}", "gists_url": "https://api.github.com/users/twneale/gists{/gist_id}", "starred_url": "https://api.github.com/users/twneale/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twneale/subscriptions", "organizations_url": "https://api.github.com/users/twneale/orgs", "repos_url": "https://api.github.com/users/twneale/repos", "events_url": "https://api.github.com/users/twneale/events{/privacy}", "received_events_url": "https://api.github.com/users/twneale/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-04-03T16:40:39Z", "updated_at": "2014-07-14T05:40:21Z", "closed_at": "2014-07-14T05:40:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might make it easier to get up an running with the code. Thanks for creating this great repo!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/17", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/17/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/17/events", "html_url": "https://github.com/erikrose/parsimonious/issues/17", "id": 12726062, "node_id": "MDU6SXNzdWUxMjcyNjA2Mg==", "number": 17, "title": "Arbitrary deviations in syntax from original PEG paper", "user": {"login": "keleshev", "id": 619158, "node_id": "MDQ6VXNlcjYxOTE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keleshev", "html_url": "https://github.com/keleshev", "followers_url": "https://api.github.com/users/keleshev/followers", "following_url": "https://api.github.com/users/keleshev/following{/other_user}", "gists_url": "https://api.github.com/users/keleshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/keleshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keleshev/subscriptions", "organizations_url": "https://api.github.com/users/keleshev/orgs", "repos_url": "https://api.github.com/users/keleshev/repos", "events_url": "https://api.github.com/users/keleshev/events{/privacy}", "received_events_url": "https://api.github.com/users/keleshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-04-02T21:18:28Z", "updated_at": "2013-04-03T20:08:10Z", "closed_at": "2013-04-03T20:08:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Maybe there is a good reason for that, but why parsimonious deviates in syntax from original [PEG paper](http://pdos.csail.mit.edu/papers/parsing:popl04.pdf)?\n\nI can understand addition of regular expression syntax (for practicality), but why not a proper superset of PEG ASCII syntax?\n\nAlso, PEG grammar allows for multi-line rules thanks to:\n\n```\nPrimary <- Identifier !LEFTARROW\n```\n\nbut parsimonious does not (apparently)\n\nAnd, BTW, thanks for the great library, it is by far my favorite PEG implementation.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/16", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/16/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/16/events", "html_url": "https://github.com/erikrose/parsimonious/issues/16", "id": 12725216, "node_id": "MDU6SXNzdWUxMjcyNTIxNg==", "number": 16, "title": "Preserve parentheses in repr for Grammar", "user": {"login": "keleshev", "id": 619158, "node_id": "MDQ6VXNlcjYxOTE1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/619158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keleshev", "html_url": "https://github.com/keleshev", "followers_url": "https://api.github.com/users/keleshev/followers", "following_url": "https://api.github.com/users/keleshev/following{/other_user}", "gists_url": "https://api.github.com/users/keleshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/keleshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keleshev/subscriptions", "organizations_url": "https://api.github.com/users/keleshev/orgs", "repos_url": "https://api.github.com/users/keleshev/repos", "events_url": "https://api.github.com/users/keleshev/events{/privacy}", "received_events_url": "https://api.github.com/users/keleshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-04-02T20:59:42Z", "updated_at": "2015-06-10T02:26:23Z", "closed_at": "2015-06-10T02:26:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using latest PyPI version:\n\n``` python\nPython 2.7.3 (default, Dec 17 2012, 20:20:42) \n[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from parsimonious.grammar import Grammar\n>>> Grammar('foo = \"bar\" (\"baz\" \"eggs\")* \"spam\"')\nGrammar('foo = \"bar\" \"baz\" \"eggs\"* \"spam\"')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/15", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/15/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/15/events", "html_url": "https://github.com/erikrose/parsimonious/issues/15", "id": 12682368, "node_id": "MDU6SXNzdWUxMjY4MjM2OA==", "number": 15, "title": "LazyReference resolution is busted", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2013-04-01T23:40:03Z", "updated_at": "2013-04-09T10:06:05Z", "closed_at": "2013-04-09T10:06:05Z", "author_association": "OWNER", "active_lock_reason": null, "body": "If a LazyReference points to a LazyReference, the former gets replaced with just another lazy reference, which isn't a big help. As a result, trying to parse with the grammar fails.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/14", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/14/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/14/events", "html_url": "https://github.com/erikrose/parsimonious/issues/14", "id": 12328052, "node_id": "MDU6SXNzdWUxMjMyODA1Mg==", "number": 14, "title": "JSON example. Some questions and thoughts", "user": {"login": "reclosedev", "id": 660112, "node_id": "MDQ6VXNlcjY2MDExMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/660112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reclosedev", "html_url": "https://github.com/reclosedev", "followers_url": "https://api.github.com/users/reclosedev/followers", "following_url": "https://api.github.com/users/reclosedev/following{/other_user}", "gists_url": "https://api.github.com/users/reclosedev/gists{/gist_id}", "starred_url": "https://api.github.com/users/reclosedev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reclosedev/subscriptions", "organizations_url": "https://api.github.com/users/reclosedev/orgs", "repos_url": "https://api.github.com/users/reclosedev/repos", "events_url": "https://api.github.com/users/reclosedev/events{/privacy}", "received_events_url": "https://api.github.com/users/reclosedev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2013-03-22T17:03:22Z", "updated_at": "2013-03-26T16:36:23Z", "closed_at": "2013-03-26T04:13:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was interested in parsimonius because of readable grammars and separation of concerns, but didn't find any examples (except `rule_syntax`), so I've tried to write a simple JSON parser with demo and benchmark. https://gist.github.com/reclosedev/5222560\n\nI'm not sure that I've used correct way to express grammar. For example, comma separated `values` and `members`. This grammar allows comma after the last `member/value` (JSON doesn't). How should it be written?\n\nCan we mark some term or rule as excluded from tree? Example: whitespace, braces, commas. It would allow to reuse and to simplify some `visit_*` methods.\n\nSuggestion: `NodeVisitor.lift_child` could be more useful, if it accepted rules with more than one child, e.g.:\n\n```\nvalues = value ws? \",\"? ws?\n```\n\n```\ndef lift_child(self, node, visited_children):\n    \"\"\"Lift the sole child of ``node`` up to replace the node.\"\"\"\n    return visited_children[0]\n```\n\nOr it can be separate method.\n\nI think it would be great to have more real grammar examples with benchmarks in parsimonius.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/8", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/8/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/8/events", "html_url": "https://github.com/erikrose/parsimonious/issues/8", "id": 3797263, "node_id": "MDU6SXNzdWUzNzk3MjYz", "number": 8, "title": "print unicode node may complain error", "user": {"login": "limodou", "id": 116544, "node_id": "MDQ6VXNlcjExNjU0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/116544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/limodou", "html_url": "https://github.com/limodou", "followers_url": "https://api.github.com/users/limodou/followers", "following_url": "https://api.github.com/users/limodou/following{/other_user}", "gists_url": "https://api.github.com/users/limodou/gists{/gist_id}", "starred_url": "https://api.github.com/users/limodou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/limodou/subscriptions", "organizations_url": "https://api.github.com/users/limodou/orgs", "repos_url": "https://api.github.com/users/limodou/repos", "events_url": "https://api.github.com/users/limodou/events{/privacy}", "received_events_url": "https://api.github.com/users/limodou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-03-25T08:50:41Z", "updated_at": "2012-12-03T03:25:49Z", "closed_at": "2012-12-03T03:25:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "The code like this:\n\n```\n#! /usr/bin/env python\n#coding=utf-8\nfrom parsimonious.grammar import Grammar, peg_grammar\nfrom parsimonious.expressions import *\n\nclass TextGrammar(Grammar):\n    def _rules_from_peg(self, peg=None):\n        string = Regex(r'\\S+', unicode=True)\n\n        peg_rules = {}\n        for k, v in ((x, y) for (x, y) in locals().iteritems() if isinstance(y, Expression)):\n            v.name = k\n            peg_rules[k] = v\n        return peg_rules, string\n\nif __name__ == '__main__':\n    peg = TextGrammar('')\n    print peg['string'].parse(u'\u4e2d\u6587')\n```\n\nAnd when I ran it on console, I got:\n\n```\nTraceback (most recent call last):\n  File \"t2.py\", line 18, in <module>\n    print peg['string'].parse(u'\u6d93\ue15f\u6783')\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 9-10: ordinal not in range(128)\n```\n\nSo you can see there is an exception. And if I change one line like this:\n\n```\nprint unicode(peg['string'].parse(u'\u4e2d\u6587'))\n```\n\nI got the right result:\n\n```\n<string \"\u4e2d\u6587\">\n```\n\nAnd I think the code of Node is not deal with unicode very well, when it needs string result, so I change the Node code like this:\n\n```\ndef __unicode__(self):\n    s = self.prettily()\n    if isinstance(s, str):\n        return unicode(s, 'utf8')\n    else:\n        return s\n\ndef __str__(self):\n    s = self.prettily()\n    if isinstance(s, unicode):\n        return s.encode('utf8')\n    else:\n        return s\n\n__repr__ = __str__\n```\n\nAnd for `__str__` and `__repr__` it'll return utf8 encoded string.\n\nBut in here, I just assume that the all string should be encoded in utf8, maybe there should be an suitable parameter to be passed, for example when doing parse:\n\n```\npeg.parse(text, encoding)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/7", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/7/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/7/events", "html_url": "https://github.com/erikrose/parsimonious/issues/7", "id": 3790935, "node_id": "MDU6SXNzdWUzNzkwOTM1", "number": 7, "title": "Simple test failed", "user": {"login": "limodou", "id": 116544, "node_id": "MDQ6VXNlcjExNjU0NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/116544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/limodou", "html_url": "https://github.com/limodou", "followers_url": "https://api.github.com/users/limodou/followers", "following_url": "https://api.github.com/users/limodou/following{/other_user}", "gists_url": "https://api.github.com/users/limodou/gists{/gist_id}", "starred_url": "https://api.github.com/users/limodou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/limodou/subscriptions", "organizations_url": "https://api.github.com/users/limodou/orgs", "repos_url": "https://api.github.com/users/limodou/repos", "events_url": "https://api.github.com/users/limodou/events{/privacy}", "received_events_url": "https://api.github.com/users/limodou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-03-24T07:36:51Z", "updated_at": "2012-03-25T02:41:56Z", "closed_at": "2012-03-25T02:41:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't find ang tutorial and example, so I found there is :\n\n```\n    g = Grammar('''\n                polite_greeting = greeting \", my good sir\"\n                greeting        = Hi / Hello\n                ''')\n    g.parse('Hello, my good sir')\n\n    g['greeting'].parse('Hi')\n```\n\nBut I got:\n\nKeyError: 'greeting'\n\nAnd I check the source code, it seems peg didn't be processed at all in Grammer **init**(), so how should I do next? Is it a bug?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/6", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/6/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/6/events", "html_url": "https://github.com/erikrose/parsimonious/issues/6", "id": 3603908, "node_id": "MDU6SXNzdWUzNjAzOTA4", "number": 6, "title": "peg unused", "user": {"login": "AndreaCrotti", "id": 53640, "node_id": "MDQ6VXNlcjUzNjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/53640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCrotti", "html_url": "https://github.com/AndreaCrotti", "followers_url": "https://api.github.com/users/AndreaCrotti/followers", "following_url": "https://api.github.com/users/AndreaCrotti/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCrotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCrotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCrotti/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCrotti/orgs", "repos_url": "https://api.github.com/users/AndreaCrotti/repos", "events_url": "https://api.github.com/users/AndreaCrotti/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCrotti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-03-11T22:00:59Z", "updated_at": "2012-03-12T04:48:04Z", "closed_at": "2012-03-12T04:48:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "in grammar.py:_rules_from_peg the \"peg\" argument is actually unused in\nthe function, even if it's actually passed from the constructor.\n\nIs it maybe not useful anymore?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/5", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/5/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/5/events", "html_url": "https://github.com/erikrose/parsimonious/issues/5", "id": 3603887, "node_id": "MDU6SXNzdWUzNjAzODg3", "number": 5, "title": "import *", "user": {"login": "AndreaCrotti", "id": 53640, "node_id": "MDQ6VXNlcjUzNjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/53640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCrotti", "html_url": "https://github.com/AndreaCrotti", "followers_url": "https://api.github.com/users/AndreaCrotti/followers", "following_url": "https://api.github.com/users/AndreaCrotti/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCrotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCrotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCrotti/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCrotti/orgs", "repos_url": "https://api.github.com/users/AndreaCrotti/repos", "events_url": "https://api.github.com/users/AndreaCrotti/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCrotti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2012-03-11T21:59:24Z", "updated_at": "2012-12-02T04:05:22Z", "closed_at": "2012-12-02T04:05:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In grammar.py there is a \\* operator..\nIt's a bit annoying specially using tools like PyLint, that can't really check if there are symbols not bound to anything.\n\nIf there are many symbols even something like\n\nimport parsimonious.expressions as e\nmight be better imho.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/4", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/4/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/4/events", "html_url": "https://github.com/erikrose/parsimonious/issues/4", "id": 3603874, "node_id": "MDU6SXNzdWUzNjAzODc0", "number": 4, "title": "import *", "user": {"login": "AndreaCrotti", "id": 53640, "node_id": "MDQ6VXNlcjUzNjQw", "avatar_url": "https://avatars2.githubusercontent.com/u/53640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCrotti", "html_url": "https://github.com/AndreaCrotti", "followers_url": "https://api.github.com/users/AndreaCrotti/followers", "following_url": "https://api.github.com/users/AndreaCrotti/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCrotti/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCrotti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCrotti/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCrotti/orgs", "repos_url": "https://api.github.com/users/AndreaCrotti/repos", "events_url": "https://api.github.com/users/AndreaCrotti/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCrotti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2012-03-11T21:57:52Z", "updated_at": "2012-03-11T22:19:02Z", "closed_at": "2012-03-11T22:19:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In grammar.py there is a \\* operator..\nIt's a bit annoying specially using tools like PyLint, that can't really check if there are symbols not bound to anything.\n\nIf there are many symbols even something like\n\nimport parsimonious.expressions as e\nmight be better imho.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/2", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/2/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/2/events", "html_url": "https://github.com/erikrose/parsimonious/issues/2", "id": 3081668, "node_id": "MDU6SXNzdWUzMDgxNjY4", "number": 2, "title": "Implement Grammar object", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2012-02-03T11:12:47Z", "updated_at": "2012-12-02T20:00:17Z", "closed_at": "2012-12-02T04:00:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Implement parsing of a PEG DSL to make grammars easy to define. In particular, recursion and forward references are a pain in pure Python, and the DSL can be leaps and bounds more concise. (At least I always had trouble reading PyParsing's definitions, and Pijnu's DSL is quite legible.)\n\nThis can conceivably wait awhile\u2014at least until I can't bear to write out the expression webs by hand anymore.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/erikrose/parsimonious/issues/1", "repository_url": "https://api.github.com/repos/erikrose/parsimonious", "labels_url": "https://api.github.com/repos/erikrose/parsimonious/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/erikrose/parsimonious/issues/1/comments", "events_url": "https://api.github.com/repos/erikrose/parsimonious/issues/1/events", "html_url": "https://github.com/erikrose/parsimonious/issues/1", "id": 3081618, "node_id": "MDU6SXNzdWUzMDgxNjE4", "number": 1, "title": "Generate a parse tree", "user": {"login": "erikrose", "id": 295816, "node_id": "MDQ6VXNlcjI5NTgxNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/295816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikrose", "html_url": "https://github.com/erikrose", "followers_url": "https://api.github.com/users/erikrose/followers", "following_url": "https://api.github.com/users/erikrose/following{/other_user}", "gists_url": "https://api.github.com/users/erikrose/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikrose/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikrose/subscriptions", "organizations_url": "https://api.github.com/users/erikrose/orgs", "repos_url": "https://api.github.com/users/erikrose/repos", "events_url": "https://api.github.com/users/erikrose/events{/privacy}", "received_events_url": "https://api.github.com/users/erikrose/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2012-02-03T11:06:44Z", "updated_at": "2012-02-05T03:30:19Z", "closed_at": "2012-02-05T03:30:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Each Expression can collect its bit of the tree and tag it with the LHS of the rule that birthed it (and maybe line number, column number, and whatever else we can think of). If it's a subexpression and has no LHS, do something quieter, I guess.\n", "performed_via_github_app": null, "score": 1.0}]}