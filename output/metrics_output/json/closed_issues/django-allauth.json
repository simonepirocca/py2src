{"total_count": 1258, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2640", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2640/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2640/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2640/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2640", "id": 677490987, "node_id": "MDU6SXNzdWU2Nzc0OTA5ODc=", "number": 2640, "title": "Facebook and Goole login.", "user": {"login": "krischal1", "id": 35735992, "node_id": "MDQ6VXNlcjM1NzM1OTky", "avatar_url": "https://avatars1.githubusercontent.com/u/35735992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krischal1", "html_url": "https://github.com/krischal1", "followers_url": "https://api.github.com/users/krischal1/followers", "following_url": "https://api.github.com/users/krischal1/following{/other_user}", "gists_url": "https://api.github.com/users/krischal1/gists{/gist_id}", "starred_url": "https://api.github.com/users/krischal1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krischal1/subscriptions", "organizations_url": "https://api.github.com/users/krischal1/orgs", "repos_url": "https://api.github.com/users/krischal1/repos", "events_url": "https://api.github.com/users/krischal1/events{/privacy}", "received_events_url": "https://api.github.com/users/krischal1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-12T08:12:00Z", "updated_at": "2020-08-12T18:29:31Z", "closed_at": "2020-08-12T18:29:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if https://github.com/pennersr/django-allauth/issues/145 this feature is available now.\r\nI am integrating facebook and google login. I want users to verify email if they register their account manually but no need to verify account if they are logged in from facebook or google.\r\nIs is possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2634", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2634/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2634/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2634/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2634", "id": 675621069, "node_id": "MDU6SXNzdWU2NzU2MjEwNjk=", "number": 2634, "title": "RemovedInDjango40Warning: django.utils.http.is_safe_url() is deprecated in favor of url_has_allowed_host_and_scheme().", "user": {"login": "theptrk", "id": 5618025, "node_id": "MDQ6VXNlcjU2MTgwMjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5618025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theptrk", "html_url": "https://github.com/theptrk", "followers_url": "https://api.github.com/users/theptrk/followers", "following_url": "https://api.github.com/users/theptrk/following{/other_user}", "gists_url": "https://api.github.com/users/theptrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/theptrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theptrk/subscriptions", "organizations_url": "https://api.github.com/users/theptrk/orgs", "repos_url": "https://api.github.com/users/theptrk/repos", "events_url": "https://api.github.com/users/theptrk/events{/privacy}", "received_events_url": "https://api.github.com/users/theptrk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-09T02:11:08Z", "updated_at": "2020-08-12T16:48:05Z", "closed_at": "2020-08-12T16:48:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nLooks like `is_safe_url` this is deprecated in a future version of Django but works now. \r\nI'm using python 3.8 and when running pytest, I run into this deprecation warning. \r\n\r\nIs there anyway to remove or ignore this?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2632", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2632/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2632/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2632/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2632", "id": 675385923, "node_id": "MDU6SXNzdWU2NzUzODU5MjM=", "number": 2632, "title": "RuntimeError at /accounts/password/reset/key/2-set-password/ autocomplete=", "user": {"login": "9mido", "id": 60831272, "node_id": "MDQ6VXNlcjYwODMxMjcy", "avatar_url": "https://avatars2.githubusercontent.com/u/60831272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/9mido", "html_url": "https://github.com/9mido", "followers_url": "https://api.github.com/users/9mido/followers", "following_url": "https://api.github.com/users/9mido/following{/other_user}", "gists_url": "https://api.github.com/users/9mido/gists{/gist_id}", "starred_url": "https://api.github.com/users/9mido/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/9mido/subscriptions", "organizations_url": "https://api.github.com/users/9mido/orgs", "repos_url": "https://api.github.com/users/9mido/repos", "events_url": "https://api.github.com/users/9mido/events{/privacy}", "received_events_url": "https://api.github.com/users/9mido/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-08T01:00:07Z", "updated_at": "2020-08-08T01:15:18Z", "closed_at": "2020-08-08T01:15:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Getting the error in the title of the issue above when I go through \"Forgot Password\" process for a user who got locked out after setting the ACCOUNT_LOGIN_ATTEMPTS_LIMIT and ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT.\r\n\r\nDjango DEBUG = True says:\r\n\r\nYou called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 127.0.0.1:8000/accounts/password/reset/key/2-set-password/%20autocomplete%3D/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.\r\n\r\nTraceback:\r\n\r\n```\r\nInternal Server Error: /accounts/password/reset/key/2-set-password/ autocomplete=\r\nTraceback (most recent call last):\r\n  File \"/home/user/.local/share/virtualenvs/project_name/lib/python3.7/site-packages/django/core/handlers/exception.py\", line 47, in inner\r\n    response = get_response(request)\r\n  File \"/home/user/.local/share/virtualenvs/project_name/lib/python3.7/site-packages/django/utils/deprecation.py\", line 113, in __call__\r\n    response = self.process_request(request)\r\n  File \"/home/user/.local/share/virtualenvs/project_name/lib/python3.7/site-packages/django/middleware/common.py\", line 54, in process_request\r\n    path = self.get_full_path_with_slash(request)\r\n  File \"/home/user/.local/share/virtualenvs/project_name/lib/python3.7/site-packages/django/middleware/common.py\", line 94, in get_full_path_with_slash\r\n    'url': request.get_host() + new_path,\r\nRuntimeError: You called this URL via POST, but the URL doesn't end in a slash and you have APPEND_SLASH set. Django can't redirect to the slash URL while maintaining POST data. Change your form to point to 127.0.0.1:8000/accounts/password/reset/key/2-set-password/%20autocomplete%3D/ (note the trailing slash), or set APPEND_SLASH=False in your Django settings.\r\n[08/Aug/2020 00:39:58] \"POST /accounts/password/reset/key/2-set-password/%20autocomplete= HTTP/1.1\" 500 89207\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2626", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2626/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2626/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2626/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2626", "id": 674391142, "node_id": "MDU6SXNzdWU2NzQzOTExNDI=", "number": 2626, "title": "'password_reset_url' replaces https://www.domain with https://url9013.domain", "user": {"login": "anthonygoslar", "id": 30745006, "node_id": "MDQ6VXNlcjMwNzQ1MDA2", "avatar_url": "https://avatars1.githubusercontent.com/u/30745006?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anthonygoslar", "html_url": "https://github.com/anthonygoslar", "followers_url": "https://api.github.com/users/anthonygoslar/followers", "following_url": "https://api.github.com/users/anthonygoslar/following{/other_user}", "gists_url": "https://api.github.com/users/anthonygoslar/gists{/gist_id}", "starred_url": "https://api.github.com/users/anthonygoslar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anthonygoslar/subscriptions", "organizations_url": "https://api.github.com/users/anthonygoslar/orgs", "repos_url": "https://api.github.com/users/anthonygoslar/repos", "events_url": "https://api.github.com/users/anthonygoslar/events{/privacy}", "received_events_url": "https://api.github.com/users/anthonygoslar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-06T15:13:42Z", "updated_at": "2020-08-07T05:29:49Z", "closed_at": "2020-08-06T18:51:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "My password recovery email is replacing the text after `https://www.domain.com `with `https://url9013.domain.com` in the password recovery email.\r\n\r\nI've read through the code and traced the url construction to the point that the confirmation email is sent using `adapter.get_adapter()`. The url going into the email constructor is correct but it seems like the adapter or email service provider is altering this url?\r\n\r\nWith regards to the email adapter, I can't locate `app_settings.ADAPTER`. I am using SendGrid to send emails with the django-sendgrid-v5 app, and their EMAIL_BACKEND settings. \r\n\r\nDo you know where I trace things from here to sort out this issue? \r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2624", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2624/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2624/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2624/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2624", "id": 673116963, "node_id": "MDU6SXNzdWU2NzMxMTY5NjM=", "number": 2624, "title": "Adding own field to signup", "user": {"login": "1JeimiP1", "id": 62905303, "node_id": "MDQ6VXNlcjYyOTA1MzAz", "avatar_url": "https://avatars2.githubusercontent.com/u/62905303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1JeimiP1", "html_url": "https://github.com/1JeimiP1", "followers_url": "https://api.github.com/users/1JeimiP1/followers", "following_url": "https://api.github.com/users/1JeimiP1/following{/other_user}", "gists_url": "https://api.github.com/users/1JeimiP1/gists{/gist_id}", "starred_url": "https://api.github.com/users/1JeimiP1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1JeimiP1/subscriptions", "organizations_url": "https://api.github.com/users/1JeimiP1/orgs", "repos_url": "https://api.github.com/users/1JeimiP1/repos", "events_url": "https://api.github.com/users/1JeimiP1/events{/privacy}", "received_events_url": "https://api.github.com/users/1JeimiP1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-04T22:13:13Z", "updated_at": "2020-08-09T11:45:27Z", "closed_at": "2020-08-09T11:45:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am sorry if i repeat someone else's issue.\r\nSo, the question is how I can add my own fields into the signup form? User must enter his email, token and password, but I can't grasp how I can do that...\r\nI hope for your answer, thank you in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2615", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2615/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2615/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2615/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2615", "id": 668715558, "node_id": "MDU6SXNzdWU2Njg3MTU1NTg=", "number": 2615, "title": "Social Network Login Failure Discord", "user": {"login": "MrKioZ", "id": 38723412, "node_id": "MDQ6VXNlcjM4NzIzNDEy", "avatar_url": "https://avatars3.githubusercontent.com/u/38723412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MrKioZ", "html_url": "https://github.com/MrKioZ", "followers_url": "https://api.github.com/users/MrKioZ/followers", "following_url": "https://api.github.com/users/MrKioZ/following{/other_user}", "gists_url": "https://api.github.com/users/MrKioZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MrKioZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MrKioZ/subscriptions", "organizations_url": "https://api.github.com/users/MrKioZ/orgs", "repos_url": "https://api.github.com/users/MrKioZ/repos", "events_url": "https://api.github.com/users/MrKioZ/events{/privacy}", "received_events_url": "https://api.github.com/users/MrKioZ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-30T13:20:58Z", "updated_at": "2020-07-30T19:21:51Z", "closed_at": "2020-07-30T19:21:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\ni have added a snippet to the allauth template `authentication_error.html` \r\n```html\r\n<p>\r\n  Code: {{ auth_error.code }}, Error: {{ auth_error.exception }}\r\n</p>\r\n```\r\nbut it doesn't seem to show me any error.\r\nall it shows is `Code: unknown, Error:`\r\n\r\ni have\r\ndjango =3.0.8\r\nallauth = 0.42\r\npython = 3.7\r\n\r\ni have followed the documentation and it seems to lack some information\r\n```py\r\nSOCIALACCOUNT_PROVIDERS ={\r\n    'discord': {\r\n        # For each OAuth based provider, either add a ``SocialApp``\r\n        # (``socialaccount`` app) containing the required client\r\n        # credentials, or list them here:\r\n        'Onyx': {\r\n            'client_id': '4627093*************',\r\n            'client_secret': '********-****-wx******',\r\n            'key': 'discord_oauth'\r\n        }\r\n    }\r\n}\r\n\r\nSITE_ID = 1\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2607", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2607/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2607/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2607/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2607", "id": 665457490, "node_id": "MDU6SXNzdWU2NjU0NTc0OTA=", "number": 2607, "title": "Discord Oauth Flow now seems to require `code_verifier` parameter.", "user": {"login": "daghack", "id": 1680823, "node_id": "MDQ6VXNlcjE2ODA4MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1680823?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daghack", "html_url": "https://github.com/daghack", "followers_url": "https://api.github.com/users/daghack/followers", "following_url": "https://api.github.com/users/daghack/following{/other_user}", "gists_url": "https://api.github.com/users/daghack/gists{/gist_id}", "starred_url": "https://api.github.com/users/daghack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daghack/subscriptions", "organizations_url": "https://api.github.com/users/daghack/orgs", "repos_url": "https://api.github.com/users/daghack/repos", "events_url": "https://api.github.com/users/daghack/events{/privacy}", "received_events_url": "https://api.github.com/users/daghack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-24T22:53:15Z", "updated_at": "2020-07-25T01:26:56Z", "closed_at": "2020-07-25T01:26:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that the Discord Oauth flow now errors with:\r\n`'{\"error\": \"invalid_request\", \"error_description\": \"Missing code_verifier\"}`\r\n\r\nWould love if I were just missing something, though.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2598", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2598/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2598/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2598/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2598", "id": 661349990, "node_id": "MDU6SXNzdWU2NjEzNDk5OTA=", "number": 2598, "title": "Prevent Staff Users From Logging In On Front End", "user": {"login": "9mido", "id": 60831272, "node_id": "MDQ6VXNlcjYwODMxMjcy", "avatar_url": "https://avatars2.githubusercontent.com/u/60831272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/9mido", "html_url": "https://github.com/9mido", "followers_url": "https://api.github.com/users/9mido/followers", "following_url": "https://api.github.com/users/9mido/following{/other_user}", "gists_url": "https://api.github.com/users/9mido/gists{/gist_id}", "starred_url": "https://api.github.com/users/9mido/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/9mido/subscriptions", "organizations_url": "https://api.github.com/users/9mido/orgs", "repos_url": "https://api.github.com/users/9mido/repos", "events_url": "https://api.github.com/users/9mido/events{/privacy}", "received_events_url": "https://api.github.com/users/9mido/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-20T04:22:02Z", "updated_at": "2020-07-24T21:15:59Z", "closed_at": "2020-07-24T21:15:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django's default behavior is to allow admin/staff users to login on the frontend of their site and when navigating to /admin/ page, users are automatically logged into the admin interface.\r\n\r\nThis is bad because if a hacker knows the admin/staff credentials, they are able to login from the frontend and then access the admin interface even if you setup OTP or other security mechanisms on the admin login page.\r\n\r\nIs there a way to restrict admin/staff users from logging in on the frontend? But they are only allowed to login from the /admin/ page?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2593", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2593/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2593/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2593/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2593", "id": 654360835, "node_id": "MDU6SXNzdWU2NTQzNjA4MzU=", "number": 2593, "title": "Is there a guide on how to contribute?", "user": {"login": "rasulkireev", "id": 8257474, "node_id": "MDQ6VXNlcjgyNTc0NzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8257474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasulkireev", "html_url": "https://github.com/rasulkireev", "followers_url": "https://api.github.com/users/rasulkireev/followers", "following_url": "https://api.github.com/users/rasulkireev/following{/other_user}", "gists_url": "https://api.github.com/users/rasulkireev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasulkireev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasulkireev/subscriptions", "organizations_url": "https://api.github.com/users/rasulkireev/orgs", "repos_url": "https://api.github.com/users/rasulkireev/repos", "events_url": "https://api.github.com/users/rasulkireev/events{/privacy}", "received_events_url": "https://api.github.com/users/rasulkireev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-09T21:32:14Z", "updated_at": "2020-07-15T15:35:07Z", "closed_at": "2020-07-15T15:35:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would love to contribute to this library, just not entirely sure how. Is there a guide or an example of how one goes about adding support for more services?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2577", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2577/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2577/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2577/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2577", "id": 646187711, "node_id": "MDU6SXNzdWU2NDYxODc3MTE=", "number": 2577, "title": "I implemented Django i18n to my app and Allauth login stopped working", "user": {"login": "goromachine", "id": 12257503, "node_id": "MDQ6VXNlcjEyMjU3NTAz", "avatar_url": "https://avatars2.githubusercontent.com/u/12257503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goromachine", "html_url": "https://github.com/goromachine", "followers_url": "https://api.github.com/users/goromachine/followers", "following_url": "https://api.github.com/users/goromachine/following{/other_user}", "gists_url": "https://api.github.com/users/goromachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/goromachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goromachine/subscriptions", "organizations_url": "https://api.github.com/users/goromachine/orgs", "repos_url": "https://api.github.com/users/goromachine/repos", "events_url": "https://api.github.com/users/goromachine/events{/privacy}", "received_events_url": "https://api.github.com/users/goromachine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T11:08:06Z", "updated_at": "2020-06-26T11:51:22Z", "closed_at": "2020-06-26T11:51:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have implemented Allauth since few moths ago and everything was working fine. \r\n\r\nWithout making any change on the login code and just by implementing i18n on the whole application, my login forms stopped working at all. I can see the template, I can fill the input, but either if I use correct or wrong credentials when I click on the button to log in it just seems to refresh the page and do not log in nor show error messages. The input fields are also empty.\r\n\r\nIf I go to django admin and I log in with the default django admin login, it works fine and I can enter with my admin user.\r\n\r\nI checked the installation guide and the configuration steps two more times but there is nothing changed and everything seems to be on it's place. I tried updating from django allauth 0.42.0 to 0.43.0 but the problem is not solved.\r\n\r\nThe register, passwd recovery and email verification works fine. It's just the login.\r\n\r\nI have a custom login form, but as I said it was working fine. The only thing I do is modify the layout with crispy-forms:\r\n\r\n```\r\nclass CustomLoginForm(LoginForm):\r\n    def __init__(self, *args, **kwargs):\r\n        super(CustomLoginForm, self).__init__(*args, **kwargs)\r\n        self.helper = FormHelper(self)\r\n        # Add magic stuff to redirect back.\r\n        self.helper.layout.append(\r\n            HTML(\r\n                \"{% if redirect_field_value %}\"\r\n                \"<input type='hidden' name='{{ redirect_field_name }}'\"\r\n                \" value='{{ redirect_field_value }}' />\"\r\n                \"{% endif %}\"\r\n            )\r\n        )\r\n        # Add password reset link.\r\n        self.helper.layout.append(\r\n            HTML(\r\n                \"<p><a class='button' href={url}>{text}</a></p>\".format(\r\n                    url=reverse('account_reset_password'),\r\n                    text=_('Forgot Password?')\r\n                )\r\n            )\r\n        )\r\n        # Add submit button like in original form.\r\n        self.helper.layout.append(\r\n            HTML(\r\n                '<button class=\"btn btn-secondary btn-main btn-block\" type=\"submit\">'\r\n                '%s</button>' % _('Sign In')\r\n            )\r\n        )\r\n\r\n        self.helper.form_class = 'login'\r\n        self.helper.form_action = '/login/'\r\n        self.helper.label_class = 'col-xs-2 d-none'\r\n        self.helper.field_class = 'col-xs-8'\r\n```\r\n\r\nand on the settings.py I have:\r\n\r\n`ACCOUNT_FORMS = {\r\n    \"login\": \"users.forms.CustomLoginForm\"\r\n}`\r\n\r\nAny Ideas? \r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2573", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2573/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2573/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2573/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2573", "id": 642922902, "node_id": "MDU6SXNzdWU2NDI5MjI5MDI=", "number": 2573, "title": "How to deactivate CSRF for registration form", "user": {"login": "sowinski", "id": 1528746, "node_id": "MDQ6VXNlcjE1Mjg3NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1528746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sowinski", "html_url": "https://github.com/sowinski", "followers_url": "https://api.github.com/users/sowinski/followers", "following_url": "https://api.github.com/users/sowinski/following{/other_user}", "gists_url": "https://api.github.com/users/sowinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/sowinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sowinski/subscriptions", "organizations_url": "https://api.github.com/users/sowinski/orgs", "repos_url": "https://api.github.com/users/sowinski/repos", "events_url": "https://api.github.com/users/sowinski/events{/privacy}", "received_events_url": "https://api.github.com/users/sowinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-22T09:48:44Z", "updated_at": "2020-06-23T16:22:29Z", "closed_at": "2020-06-23T16:22:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nhow can I deactivate the CSRF verification for the registration form? \r\n\r\nI build some landingpages on the same domain not using django / python and the post request fails of course.\r\n\r\nIs this possible?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2566", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2566/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2566/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2566/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2566", "id": 637744484, "node_id": "MDU6SXNzdWU2Mzc3NDQ0ODQ=", "number": 2566, "title": "How to use an email alias when sending verification mail? ", "user": {"login": "TotallyNotChase", "id": 44284917, "node_id": "MDQ6VXNlcjQ0Mjg0OTE3", "avatar_url": "https://avatars0.githubusercontent.com/u/44284917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TotallyNotChase", "html_url": "https://github.com/TotallyNotChase", "followers_url": "https://api.github.com/users/TotallyNotChase/followers", "following_url": "https://api.github.com/users/TotallyNotChase/following{/other_user}", "gists_url": "https://api.github.com/users/TotallyNotChase/gists{/gist_id}", "starred_url": "https://api.github.com/users/TotallyNotChase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TotallyNotChase/subscriptions", "organizations_url": "https://api.github.com/users/TotallyNotChase/orgs", "repos_url": "https://api.github.com/users/TotallyNotChase/repos", "events_url": "https://api.github.com/users/TotallyNotChase/events{/privacy}", "received_events_url": "https://api.github.com/users/TotallyNotChase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T13:18:48Z", "updated_at": "2020-06-12T15:59:06Z", "closed_at": "2020-06-12T15:59:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to specify the email alias I'd like to use when sending the verification email? I've the email host setup but I need to use an alias for the `send_mail` itself.\r\n\r\nI know I can do this using the `from` parameter in django's `send_mail` but how can I integrate this with allauth? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2563", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2563/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2563/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2563/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2563", "id": 636189936, "node_id": "MDU6SXNzdWU2MzYxODk5MzY=", "number": 2563, "title": "Option to increase scope (or broaden default scope) for Patreon (or all providers)?", "user": {"login": "nstephenh", "id": 3454308, "node_id": "MDQ6VXNlcjM0NTQzMDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/3454308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nstephenh", "html_url": "https://github.com/nstephenh", "followers_url": "https://api.github.com/users/nstephenh/followers", "following_url": "https://api.github.com/users/nstephenh/following{/other_user}", "gists_url": "https://api.github.com/users/nstephenh/gists{/gist_id}", "starred_url": "https://api.github.com/users/nstephenh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nstephenh/subscriptions", "organizations_url": "https://api.github.com/users/nstephenh/orgs", "repos_url": "https://api.github.com/users/nstephenh/repos", "events_url": "https://api.github.com/users/nstephenh/events{/privacy}", "received_events_url": "https://api.github.com/users/nstephenh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-10T12:03:23Z", "updated_at": "2020-07-26T21:02:49Z", "closed_at": "2020-07-26T21:02:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I'm using allauth for patreon authentication, and was wondering if there was any reason for the current scope, any way to increase it in my application without forking allauth, and if not whether it should be increased. Ideally I would like campaigns.members[email] added to the current scope, and I'm sure that other people might need campaigns.members.address.\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2555", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2555/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2555/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2555/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2555", "id": 626720116, "node_id": "MDU6SXNzdWU2MjY3MjAxMTY=", "number": 2555, "title": "Avoid username field creation in user model", "user": {"login": "TotallyNotChase", "id": 44284917, "node_id": "MDQ6VXNlcjQ0Mjg0OTE3", "avatar_url": "https://avatars0.githubusercontent.com/u/44284917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TotallyNotChase", "html_url": "https://github.com/TotallyNotChase", "followers_url": "https://api.github.com/users/TotallyNotChase/followers", "following_url": "https://api.github.com/users/TotallyNotChase/following{/other_user}", "gists_url": "https://api.github.com/users/TotallyNotChase/gists{/gist_id}", "starred_url": "https://api.github.com/users/TotallyNotChase/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TotallyNotChase/subscriptions", "organizations_url": "https://api.github.com/users/TotallyNotChase/orgs", "repos_url": "https://api.github.com/users/TotallyNotChase/repos", "events_url": "https://api.github.com/users/TotallyNotChase/events{/privacy}", "received_events_url": "https://api.github.com/users/TotallyNotChase/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T18:27:10Z", "updated_at": "2020-05-29T08:57:11Z", "closed_at": "2020-05-29T08:57:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using a custom user model with allauth and I need to have the username field omitted. I've already seen the docs and a whole bunch of stackoverflow answers about using `ACCOUNT_USER_MODEL_USERNAME_FIELD = None` but all of this still leads my database to have an username field. \r\n\r\nNow since the db still has an `username` field with the unique constraint set on **and** allauth will not put a username in the field with the aforementioned setting set to `None`, this causes me to face `IntegrityError` after the very first user creation. I know I can solve this by just having the aforementioned setting be set to `'username'` but I'm curious, how do I just not make the username, because I'm never using it.\r\n\r\nMy model:\r\n```py\r\nclass CustomUser(AbstractUser):\r\n    # Custom user model for django-allauth\r\n    first_name = None\r\n    last_name = None\r\n\r\n    def delete(self):\r\n        # Custom delete - make sure user storage is also purged\r\n        # Purge the user storage\r\n        purge_userstore(self.email)\r\n        # Call the original delete method to take care of everything else\r\n        super(CustomUser, self).delete()\r\n\r\n```\r\nIt doesn't really do much except override the `delete` function. It also sets `first_name` and `last_name` to `None`, which works perfectly and removes those fields from the database as expected. I've tried setting `user` to `None` but that does nothing. I've also tried setting `username` to `None` but that will raise a FieldNotFound error with `ACCOUNT_USER_MODEL_USERNAME_FIELD = None`\r\n\r\nMy settings (the relevant bit):\r\n```py\r\nAUTHENTICATION_BACKENDS = (\r\n    \"django.contrib.auth.backends.ModelBackend\",\r\n    \"allauth.account.auth_backends.AuthenticationBackend\",\r\n)\r\nAUTH_USER_MODEL = 'custom_account.CustomUser'\r\nACCOUNT_USER_MODEL_USERNAME_FIELD = None\r\nACCOUNT_USERNAME_REQUIRED = False\r\nACCOUNT_EMAIL_REQUIRED = True\r\nACCOUNT_UNIQUE_EMAIL = True\r\nACCOUNT_AUTHENTICATION_METHOD = 'email'\r\n```\r\nMy migration file:\r\n\r\n```py\r\nmigrations.CreateModel(\r\n            name='CustomUser',\r\n            fields=[\r\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\r\n                ('password', models.CharField(max_length=128, verbose_name='password')),\r\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\r\n                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),\r\n                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),\r\n                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),\r\n                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),\r\n                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),\r\n                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),\r\n                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),\r\n                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),\r\n            ],\r\n....\r\n```\r\n\r\nThis migration generation confuses me to no end. Why is the `username` field still there? Why is it set to be the only unique constraint even though I've clearly set `ACCOUNT_UNIQUE_EMAIL = True`?\r\n\r\nAt first I thought, my settings were simply not being read. But I checked `django.conf.settings` and `allauth.account.app_settings` for these changes and they were all updated. What's going on here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2554", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2554/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2554/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2554/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2554", "id": 626230658, "node_id": "MDU6SXNzdWU2MjYyMzA2NTg=", "number": 2554, "title": "How to redirect user to previous page after successful login", "user": {"login": "saileshkush95", "id": 28560875, "node_id": "MDQ6VXNlcjI4NTYwODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/28560875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saileshkush95", "html_url": "https://github.com/saileshkush95", "followers_url": "https://api.github.com/users/saileshkush95/followers", "following_url": "https://api.github.com/users/saileshkush95/following{/other_user}", "gists_url": "https://api.github.com/users/saileshkush95/gists{/gist_id}", "starred_url": "https://api.github.com/users/saileshkush95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saileshkush95/subscriptions", "organizations_url": "https://api.github.com/users/saileshkush95/orgs", "repos_url": "https://api.github.com/users/saileshkush95/repos", "events_url": "https://api.github.com/users/saileshkush95/events{/privacy}", "received_events_url": "https://api.github.com/users/saileshkush95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-28T05:38:42Z", "updated_at": "2020-05-28T10:04:34Z", "closed_at": "2020-05-28T10:04:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for this amazing package, It working perfectly in my project. But I've have one issue , that is user didn't redirect it its previous page after successful login. Actually it redirect to the homepage. This is because i've used LOGIN_REDIRECT_URL = '/' in my settings file. But i didn't know how to redirect user to its previous page after successful login. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2551", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2551/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2551/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2551/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2551", "id": 625267557, "node_id": "MDU6SXNzdWU2MjUyNjc1NTc=", "number": 2551, "title": "Confirmation email not sent after signing up", "user": {"login": "josylad", "id": 33004324, "node_id": "MDQ6VXNlcjMzMDA0MzI0", "avatar_url": "https://avatars1.githubusercontent.com/u/33004324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josylad", "html_url": "https://github.com/josylad", "followers_url": "https://api.github.com/users/josylad/followers", "following_url": "https://api.github.com/users/josylad/following{/other_user}", "gists_url": "https://api.github.com/users/josylad/gists{/gist_id}", "starred_url": "https://api.github.com/users/josylad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josylad/subscriptions", "organizations_url": "https://api.github.com/users/josylad/orgs", "repos_url": "https://api.github.com/users/josylad/repos", "events_url": "https://api.github.com/users/josylad/events{/privacy}", "received_events_url": "https://api.github.com/users/josylad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T23:40:01Z", "updated_at": "2020-05-28T07:41:32Z", "closed_at": "2020-05-28T07:40:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI am using a Custom user model and so far I have been able to hook it into the allauth package extending the \"SignupForm\" \r\n\r\nhere is what my signup form looks like \r\n\r\n**Forms.py**\r\n```\r\nclass StudentSignUpForm(SignupForm): \r\n\r\n    @transaction.atomic\r\n    def save(self, request):\r\n        user = super(StudentSignUpForm, self).save(request)\r\n        user.is_student = True\r\n        user.save()\r\n        student = StudentProfile.objects.create(user=user)\r\n        return user\r\n```\r\n**views.py**\r\n```\r\ndef student_profile_view(request):\r\n\t\r\n    if request.method == 'POST':\r\n\t\t\r\n        user_form = StudentSignUpForm(request.POST, prefix='UF')\r\n\t\t\r\n        if user_form.is_valid():\r\n            user_form.save(request)\r\n            return redirect('/') \r\n        \r\n    else: \r\n        user_form = StudentSignUpForm(prefix='UF')\r\n    \r\n    return render(request, 'registration/student-profile.html', {'user_form': user_form,})\r\n```\r\n\r\nThis works for creating the Custom User as well as creating the user under All auth, the registered email address shows in the \"/admin/\" under accounts/emails_address but no confirmation emails are being sent to newly registered users. \r\n\r\nHow do I fix this??", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2548", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2548/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2548/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2548/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2548", "id": 621978270, "node_id": "MDU6SXNzdWU2MjE5NzgyNzA=", "number": 2548, "title": "Prevent allauth to not verify superuser email", "user": {"login": "sajjudroid", "id": 22842427, "node_id": "MDQ6VXNlcjIyODQyNDI3", "avatar_url": "https://avatars3.githubusercontent.com/u/22842427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sajjudroid", "html_url": "https://github.com/sajjudroid", "followers_url": "https://api.github.com/users/sajjudroid/followers", "following_url": "https://api.github.com/users/sajjudroid/following{/other_user}", "gists_url": "https://api.github.com/users/sajjudroid/gists{/gist_id}", "starred_url": "https://api.github.com/users/sajjudroid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sajjudroid/subscriptions", "organizations_url": "https://api.github.com/users/sajjudroid/orgs", "repos_url": "https://api.github.com/users/sajjudroid/repos", "events_url": "https://api.github.com/users/sajjudroid/events{/privacy}", "received_events_url": "https://api.github.com/users/sajjudroid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T18:08:04Z", "updated_at": "2020-05-20T18:55:04Z", "closed_at": "2020-05-20T18:55:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nI have a situation here.\r\nFirst i created a superuser using \r\npython manage.exe createsuperuser\r\n\r\nAfter creating superuser now i am trying to login in in a custom user form.\r\nIt redirect me to the email verification page.\r\nI don't want to verify the superuser.\r\n\r\nIn case other then superuser when want to login in and if they don't verify there email they should be redirect to the email verification.\r\n\r\nPlease any help in this scenario. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2545", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2545/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2545/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2545/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2545", "id": 620803585, "node_id": "MDU6SXNzdWU2MjA4MDM1ODU=", "number": 2545, "title": "Keycloak Provider", "user": {"login": "JustFerry", "id": 1366659, "node_id": "MDQ6VXNlcjEzNjY2NTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1366659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JustFerry", "html_url": "https://github.com/JustFerry", "followers_url": "https://api.github.com/users/JustFerry/followers", "following_url": "https://api.github.com/users/JustFerry/following{/other_user}", "gists_url": "https://api.github.com/users/JustFerry/gists{/gist_id}", "starred_url": "https://api.github.com/users/JustFerry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JustFerry/subscriptions", "organizations_url": "https://api.github.com/users/JustFerry/orgs", "repos_url": "https://api.github.com/users/JustFerry/repos", "events_url": "https://api.github.com/users/JustFerry/events{/privacy}", "received_events_url": "https://api.github.com/users/JustFerry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-19T08:58:38Z", "updated_at": "2020-05-20T17:11:50Z", "closed_at": "2020-05-20T17:11:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having issues when I am trying to run `python manage.py migrate` after enabling the     'allauth.socialaccount.providers.keycloak' provider - without this everything worked fine. Is there a bug with this provider by any chance?\r\n\r\nMy configuration is OK.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \".../python3.7/site-packages/django/apps/config.py\", line 118, in create\r\n    cls = getattr(mod, cls_name)\r\nAttributeError: module 'allauth.socialaccount.providers' has no attribute 'keycloak'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 21, in <module>\r\n    main()\r\n  File \"manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \".../lib/python3.7/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\r\n    utility.execute()\r\n  File \".../lib/python3.7/site-packages/django/core/management/__init__.py\", line 377, in execute\r\n    django.setup()\r\n  File \".../lib/python3.7/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \".../lib/python3.7/site-packages/django/apps/registry.py\", line 91, in populate\r\n    app_config = AppConfig.create(entry)\r\n  File \".../lib/python3.7/site-packages/django/apps/config.py\", line 136, in create\r\n    import_module(entry)\r\n  File \"/usr/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 965, in _find_and_load_unlocked\r\nModuleNotFoundError: No module named 'allauth.socialaccount.providers.keycloak'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2538", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2538/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2538/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2538/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2538", "id": 617727823, "node_id": "MDU6SXNzdWU2MTc3Mjc4MjM=", "number": 2538, "title": "Alternative to X-REQUESTED-WITH for `fetch`", "user": {"login": "mustafa0x", "id": 1473102, "node_id": "MDQ6VXNlcjE0NzMxMDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1473102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mustafa0x", "html_url": "https://github.com/mustafa0x", "followers_url": "https://api.github.com/users/mustafa0x/followers", "following_url": "https://api.github.com/users/mustafa0x/following{/other_user}", "gists_url": "https://api.github.com/users/mustafa0x/gists{/gist_id}", "starred_url": "https://api.github.com/users/mustafa0x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mustafa0x/subscriptions", "organizations_url": "https://api.github.com/users/mustafa0x/orgs", "repos_url": "https://api.github.com/users/mustafa0x/repos", "events_url": "https://api.github.com/users/mustafa0x/events{/privacy}", "received_events_url": "https://api.github.com/users/mustafa0x/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 96056676, "node_id": "MDU6TGFiZWw5NjA1NjY3Ng==", "url": "https://api.github.com/repos/pennersr/django-allauth/labels/FIXME", "name": "FIXME", "color": "e11d21", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-13T20:19:07Z", "updated_at": "2020-08-14T19:23:09Z", "closed_at": "2020-08-14T19:23:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "As `fetch` doesn't send that header. This confused me for a while, as I wasn't able to get any JSON responses.\r\n\r\nI suggest that if the _request_'s content type is `application/json` then it is treated as an ajax/fetch request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2537", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2537/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2537/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2537/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2537", "id": 616936284, "node_id": "MDU6SXNzdWU2MTY5MzYyODQ=", "number": 2537, "title": "Unable to login to twitch", "user": {"login": "dnpthree", "id": 51075188, "node_id": "MDQ6VXNlcjUxMDc1MTg4", "avatar_url": "https://avatars1.githubusercontent.com/u/51075188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnpthree", "html_url": "https://github.com/dnpthree", "followers_url": "https://api.github.com/users/dnpthree/followers", "following_url": "https://api.github.com/users/dnpthree/following{/other_user}", "gists_url": "https://api.github.com/users/dnpthree/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnpthree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnpthree/subscriptions", "organizations_url": "https://api.github.com/users/dnpthree/orgs", "repos_url": "https://api.github.com/users/dnpthree/repos", "events_url": "https://api.github.com/users/dnpthree/events{/privacy}", "received_events_url": "https://api.github.com/users/dnpthree/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-12T20:25:12Z", "updated_at": "2020-05-24T10:02:42Z", "closed_at": "2020-05-23T10:24:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've created multiple vanilla loads and had a known good configuration. I am no longer able to login to twitch and know they have made recent changes to their API (this might be the issue)\r\n\r\nI believe this could be due to the switch to the new Kraken API https://dev.twitch.tv/docs/authentication/#sending-user-access-and-app-access-tokens", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2529", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2529/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2529/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2529/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2529", "id": 612891645, "node_id": "MDU6SXNzdWU2MTI4OTE2NDU=", "number": 2529, "title": "Attempting to login times out during cache lookup", "user": {"login": "Jessime", "id": 8493770, "node_id": "MDQ6VXNlcjg0OTM3NzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8493770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jessime", "html_url": "https://github.com/Jessime", "followers_url": "https://api.github.com/users/Jessime/followers", "following_url": "https://api.github.com/users/Jessime/following{/other_user}", "gists_url": "https://api.github.com/users/Jessime/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jessime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jessime/subscriptions", "organizations_url": "https://api.github.com/users/Jessime/orgs", "repos_url": "https://api.github.com/users/Jessime/repos", "events_url": "https://api.github.com/users/Jessime/events{/privacy}", "received_events_url": "https://api.github.com/users/Jessime/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-05T20:59:51Z", "updated_at": "2020-05-06T02:46:08Z", "closed_at": "2020-05-06T02:45:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "The traceback beginning with a lot of route handling. I can post it if people think it's useful, but the main bit is here:\r\n\r\n```\r\n...\r\n  File \"django/views/generic/base.py\", line 89, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"allauth/account/views.py\", line 103, in post\r\n    if form.is_valid():\r\n  File \"django/forms/forms.py\", line 179, in is_valid\r\n    return self.is_bound and not self.errors\r\n  File \"django/forms/forms.py\", line 174, in errors\r\n    self.full_clean()\r\n  File \"django/forms/forms.py\", line 377, in full_clean\r\n    self._clean_form()\r\n  File \"django/forms/forms.py\", line 404, in _clean_form\r\n    cleaned_data = self.clean()\r\n  File \"allauth/account/forms.py\", line 179, in clean\r\n    **credentials)\r\n  File \"allauth/account/adapter.py\", line 487, in authenticate\r\n    self.pre_authenticate(request, **credentials)\r\n  File \"allauth/account/adapter.py\", line 472, in pre_authenticate\r\n    login_data = cache.get(cache_key, None)\r\n  File \"django_redis/cache.py\", line 33, in _decorator\r\n    return method(self, *args, **kwargs)\r\n  File \"django_redis/cache.py\", line 82, in get\r\n    client=client)\r\n  File \"django_redis/client/default.py\", line 201, in get\r\n    value = client.get(key)\r\n  File \"redis/client.py\", line 1579, in get\r\n    return self.execute_command('GET', name)\r\n  File \"redis/client.py\", line 875, in execute_command\r\n    conn = self.connection or pool.get_connection(command_name, **options)\r\n  File \"redis/connection.py\", line 1185, in get_connection\r\n    connection.connect()\r\n  File \"redis/connection.py\", line 552, in connect\r\n    sock = self._connect()\r\n  File \"redis/connection.py\", line 597, in _connect\r\n    sock.connect(socket_address)\r\n  File \"gunicorn/workers/base.py\", line 192, in handle_abort\r\n    sys.exit(1)\r\n```\r\n\r\nUsers can sign up, and get logged in once (directly after signup). But if an existing user attempts to login a second time, the site crashes. Any suggestions would be greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2522", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2522/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2522/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2522/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2522", "id": 608252399, "node_id": "MDU6SXNzdWU2MDgyNTIzOTk=", "number": 2522, "title": "Error 500 when adding a site to socialapp", "user": {"login": "evgenium", "id": 11981624, "node_id": "MDQ6VXNlcjExOTgxNjI0", "avatar_url": "https://avatars2.githubusercontent.com/u/11981624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evgenium", "html_url": "https://github.com/evgenium", "followers_url": "https://api.github.com/users/evgenium/followers", "following_url": "https://api.github.com/users/evgenium/following{/other_user}", "gists_url": "https://api.github.com/users/evgenium/gists{/gist_id}", "starred_url": "https://api.github.com/users/evgenium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evgenium/subscriptions", "organizations_url": "https://api.github.com/users/evgenium/orgs", "repos_url": "https://api.github.com/users/evgenium/repos", "events_url": "https://api.github.com/users/evgenium/events{/privacy}", "received_events_url": "https://api.github.com/users/evgenium/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T11:44:40Z", "updated_at": "2020-06-08T10:02:58Z", "closed_at": "2020-06-08T10:02:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there.\r\n\r\nI'm quite new to django and allauth in particular so I'm not sure that issue should go here, but in case it's some allauth bug I'll post it.\r\n\r\n**Background:**\r\n\r\n- Python 3.8\r\n- django 3.0.5\r\n- pythonanywhere\r\n- postgres 9.4\r\n\r\nWhen I uploaded my project files to prod server and try to add site to social app (vk) I got a 500 error. Here's the log:\r\n\r\n> **NO MATCH**\r\n> 2020-04-28 14:26:12,194: Internal Server Error: /admin/socialaccount/socialapp/6/change/\r\n> Traceback (most recent call last):\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n>     return self.cursor.execute(sql, params)\r\n> psycopg2.errors.SyntaxError: syntax error at or near \"ON\"\r\n> LINE 1: ..._sites\" (\"socialapp_id\", \"site_id\") VALUES (6, 3) ON CONFLIC...\r\n>                                                              ^\r\n> **NO MATCH**\r\n> **NO MATCH**\r\n> The above exception was the direct cause of the following exception:\r\n> **NO MATCH**\r\n> Traceback (most recent call last):\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n>     response = get_response(request)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n>     response = self.process_exception_by_middleware(e, request)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n>     response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 607, in wrapper\r\n>     return self.admin_site.admin_view(view)(*args, **kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\r\n>     response = view_func(request, *args, **kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/views/decorators/cache.py\", line 44, in _wrapped_view_func\r\n>     response = view_func(request, *args, **kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/contrib/admin/sites.py\", line 231, in inner\r\n>     return view(request, *args, **kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1641, in change_view\r\n>     return self.changeform_view(request, object_id, form_url, extra_context)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/utils/decorators.py\", line 43, in _wrapper\r\n>     return bound_method(*args, **kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/utils/decorators.py\", line 130, in _wrapped_view\r\n>     response = view_func(request, *args, **kwargs)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1522, in changeform_view\r\n>     return self._changeform_view(request, object_id, form_url, extra_context)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1566, in _changeform_view\r\n>     self.save_related(request, form, formsets, not add)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/contrib/admin/options.py\", line 1107, in save_related\r\n>     form.save_m2m()\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/forms/models.py\", line 442, in _save_m2m\r\n>     f.save_form_data(self.instance, cleaned_data[f.name])\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/fields/related.py\", line 1618, in save_form_data\r\n>     getattr(instance, self.attname).set(data)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py\", line 1008, in set\r\n>     self.add(*new_objs, through_defaults=through_defaults)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py\", line 944, in add\r\n>     self._add_items(\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/fields/related_descriptors.py\", line 1123, in _add_items\r\n>     self.through._default_manager.using(db).bulk_create([\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/query.py\", line 492, in bulk_create\r\n>     returned_columns = self._batched_insert(\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/query.py\", line 1230, in _batched_insert\r\n>     self._insert(item, fields=fields, using=self.db, ignore_conflicts=ignore_conflicts)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/query.py\", line 1204, in _insert\r\n>     return query.get_compiler(using=using).execute_sql(returning_fields)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/models/sql/compiler.py\", line 1391, in execute_sql\r\n>     cursor.execute(sql, params)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/backends/utils.py\", line 100, in execute\r\n>     return super().execute(sql, params)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/backends/utils.py\", line 68, in execute\r\n>     return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\r\n>     return executor(sql, params, many, context)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n>     return self.cursor.execute(sql, params)\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/utils.py\", line 90, in __exit__\r\n>     raise dj_exc_value.with_traceback(traceback) from exc_value\r\n>   File \"/home/mylogin/.virtualenvs/myproject/lib/python3.8/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n>     return self.cursor.execute(sql, params)\r\n> django.db.utils.ProgrammingError: syntax error at or near \"ON\"\r\n> LINE 1: ..._sites\" (\"socialapp_id\", \"site_id\") VALUES (6, 3) ON CONFLIC...\r\n\r\nMy site id is actually 3 right now, but with site id's 1 & 2 I got the same error.\r\n\r\nI kinda solved the current problem for myself by manually linking site to social app in database, but suppose that's not a model solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2519", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2519/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2519/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2519/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2519", "id": 606784353, "node_id": "MDU6SXNzdWU2MDY3ODQzNTM=", "number": 2519, "title": "Prevent inactive users from logging in", "user": {"login": "bodgerbarnett", "id": 1990439, "node_id": "MDQ6VXNlcjE5OTA0Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1990439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bodgerbarnett", "html_url": "https://github.com/bodgerbarnett", "followers_url": "https://api.github.com/users/bodgerbarnett/followers", "following_url": "https://api.github.com/users/bodgerbarnett/following{/other_user}", "gists_url": "https://api.github.com/users/bodgerbarnett/gists{/gist_id}", "starred_url": "https://api.github.com/users/bodgerbarnett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bodgerbarnett/subscriptions", "organizations_url": "https://api.github.com/users/bodgerbarnett/orgs", "repos_url": "https://api.github.com/users/bodgerbarnett/repos", "events_url": "https://api.github.com/users/bodgerbarnett/events{/privacy}", "received_events_url": "https://api.github.com/users/bodgerbarnett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-25T14:46:24Z", "updated_at": "2020-04-26T09:32:30Z", "closed_at": "2020-04-25T15:08:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the is_active flag on a user to allow users to deactivate their accounts on my site.\r\n\r\nBut if they then try and log in to their account, they get redirect to an \"Account Inactive\" page, which is not what I want. I'd prefer it if it looked like they just didn't have an account in this instance. Essentially, I'm trying to allow users to delete their account but just using the is_active flag to denote \"deleted\" accounts, so I can preserve the links to their names etc. in the database.\r\n\r\nAm I going about this the wrong way? Or have I missed something here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2515", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2515/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2515/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2515/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2515", "id": 605459654, "node_id": "MDU6SXNzdWU2MDU0NTk2NTQ=", "number": 2515, "title": "Login using GitHub to be deprecated via URL query parameters", "user": {"login": "Jayesh-Mahato", "id": 5747707, "node_id": "MDQ6VXNlcjU3NDc3MDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5747707?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jayesh-Mahato", "html_url": "https://github.com/Jayesh-Mahato", "followers_url": "https://api.github.com/users/Jayesh-Mahato/followers", "following_url": "https://api.github.com/users/Jayesh-Mahato/following{/other_user}", "gists_url": "https://api.github.com/users/Jayesh-Mahato/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jayesh-Mahato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jayesh-Mahato/subscriptions", "organizations_url": "https://api.github.com/users/Jayesh-Mahato/orgs", "repos_url": "https://api.github.com/users/Jayesh-Mahato/repos", "events_url": "https://api.github.com/users/Jayesh-Mahato/events{/privacy}", "received_events_url": "https://api.github.com/users/Jayesh-Mahato/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T11:33:46Z", "updated_at": "2020-05-03T18:46:57Z", "closed_at": "2020-05-03T18:46:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using GitHub as one of the authentication provider. However I have received alerts from GitHub stating that the application has used an access token as pa part of a query parameter to access an endpoint through the GitHub API:\r\n\r\nhttps://api.github.com/user\r\n\r\nPlease use the Authorization HTTP header instead as using the `access_token` query parameter is deprecated.\r\n\r\nDepending on your API usage, we'll be sending you this email reminder on a monthly basis.\r\n\r\nPlease check this. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2513", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2513/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2513/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2513/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2513", "id": 603934286, "node_id": "MDU6SXNzdWU2MDM5MzQyODY=", "number": 2513, "title": "New rules: required Apple Login in iOS", "user": {"login": "MarinaaaniraM", "id": 6745753, "node_id": "MDQ6VXNlcjY3NDU3NTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/6745753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarinaaaniraM", "html_url": "https://github.com/MarinaaaniraM", "followers_url": "https://api.github.com/users/MarinaaaniraM/followers", "following_url": "https://api.github.com/users/MarinaaaniraM/following{/other_user}", "gists_url": "https://api.github.com/users/MarinaaaniraM/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarinaaaniraM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarinaaaniraM/subscriptions", "organizations_url": "https://api.github.com/users/MarinaaaniraM/orgs", "repos_url": "https://api.github.com/users/MarinaaaniraM/repos", "events_url": "https://api.github.com/users/MarinaaaniraM/events{/privacy}", "received_events_url": "https://api.github.com/users/MarinaaaniraM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T11:47:05Z", "updated_at": "2020-04-21T15:48:37Z", "closed_at": "2020-04-21T15:48:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! \r\niOS mobile have new rules \ud83d\ude16:\r\n\r\n> Apps that use a third-party or social login service to set up or authenticate the user\u2019s primary account with the app **must also offer Sign in with Apple as an equivalent option**. As you plan and design your app or website for Sign in with Apple, make sure to follow these guidelines. In addition, the Human Interface Guidelines include downloadable left-aligned, center-aligned, and logo-only buttons. New apps must follow these guidelines starting April 30, 2020. App updates must follow these guidelines starting June 30, 2020.\r\n\r\nCan you realize Apple login social auth? \ud83d\ude07", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2511", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2511/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2511/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2511/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2511", "id": 602500958, "node_id": "MDU6SXNzdWU2MDI1MDA5NTg=", "number": 2511, "title": "Upload the version with Yandex provider to PyPI", "user": {"login": "ArtyIF", "id": 8017858, "node_id": "MDQ6VXNlcjgwMTc4NTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8017858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArtyIF", "html_url": "https://github.com/ArtyIF", "followers_url": "https://api.github.com/users/ArtyIF/followers", "following_url": "https://api.github.com/users/ArtyIF/following{/other_user}", "gists_url": "https://api.github.com/users/ArtyIF/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArtyIF/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArtyIF/subscriptions", "organizations_url": "https://api.github.com/users/ArtyIF/orgs", "repos_url": "https://api.github.com/users/ArtyIF/repos", "events_url": "https://api.github.com/users/ArtyIF/events{/privacy}", "received_events_url": "https://api.github.com/users/ArtyIF/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-18T16:42:56Z", "updated_at": "2020-05-22T15:05:39Z", "closed_at": "2020-05-22T15:05:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest version of django-allauth available on PyPI, 0.41.0, does not have a Yandex.OAuth provider. I need it for my programming school project - integrating a Yandex product into them is kind of an unwritten rule there (mostly because my school is partnered with Yandex). For now I have to install it through a .zip archive for GitHub which is pretty inconvenient.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2508", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2508/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2508/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2508/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2508", "id": 600221423, "node_id": "MDU6SXNzdWU2MDAyMjE0MjM=", "number": 2508, "title": "Reset password email injection", "user": {"login": "sdanzan", "id": 1094967, "node_id": "MDQ6VXNlcjEwOTQ5Njc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1094967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdanzan", "html_url": "https://github.com/sdanzan", "followers_url": "https://api.github.com/users/sdanzan/followers", "following_url": "https://api.github.com/users/sdanzan/following{/other_user}", "gists_url": "https://api.github.com/users/sdanzan/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdanzan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdanzan/subscriptions", "organizations_url": "https://api.github.com/users/sdanzan/orgs", "repos_url": "https://api.github.com/users/sdanzan/repos", "events_url": "https://api.github.com/users/sdanzan/events{/privacy}", "received_events_url": "https://api.github.com/users/sdanzan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-15T11:19:05Z", "updated_at": "2020-04-15T20:54:42Z", "closed_at": "2020-04-15T15:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "The reset password form seems to be vulnerable to the Django vulnerability described here: https://nvd.nist.gov/vuln/detail/CVE-2019-19844 (fixed in Django `2.2.9`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2504", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2504/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2504/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2504/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2504", "id": 596317644, "node_id": "MDU6SXNzdWU1OTYzMTc2NDQ=", "number": 2504, "title": "SMTPRecipientsRefused at /accounts/signup/", "user": {"login": "saileshkush95", "id": 28560875, "node_id": "MDQ6VXNlcjI4NTYwODc1", "avatar_url": "https://avatars3.githubusercontent.com/u/28560875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saileshkush95", "html_url": "https://github.com/saileshkush95", "followers_url": "https://api.github.com/users/saileshkush95/followers", "following_url": "https://api.github.com/users/saileshkush95/following{/other_user}", "gists_url": "https://api.github.com/users/saileshkush95/gists{/gist_id}", "starred_url": "https://api.github.com/users/saileshkush95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saileshkush95/subscriptions", "organizations_url": "https://api.github.com/users/saileshkush95/orgs", "repos_url": "https://api.github.com/users/saileshkush95/repos", "events_url": "https://api.github.com/users/saileshkush95/events{/privacy}", "received_events_url": "https://api.github.com/users/saileshkush95/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-08T05:26:07Z", "updated_at": "2020-04-15T03:38:47Z", "closed_at": "2020-04-15T03:38:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Without django allauth it is working fine , when i integrate django all-auth i'm facing error somethings like this. \r\n![Screenshot_20200408_110305](https://user-images.githubusercontent.com/28560875/78747647-9fff2380-7989-11ea-9e29-80b0f93f2693.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2498", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2498/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2498/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2498/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2498", "id": 587988866, "node_id": "MDU6SXNzdWU1ODc5ODg4NjY=", "number": 2498, "title": "What elicits the email_verification_sent view?", "user": {"login": "rossm6", "id": 46228443, "node_id": "MDQ6VXNlcjQ2MjI4NDQz", "avatar_url": "https://avatars3.githubusercontent.com/u/46228443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rossm6", "html_url": "https://github.com/rossm6", "followers_url": "https://api.github.com/users/rossm6/followers", "following_url": "https://api.github.com/users/rossm6/following{/other_user}", "gists_url": "https://api.github.com/users/rossm6/gists{/gist_id}", "starred_url": "https://api.github.com/users/rossm6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rossm6/subscriptions", "organizations_url": "https://api.github.com/users/rossm6/orgs", "repos_url": "https://api.github.com/users/rossm6/repos", "events_url": "https://api.github.com/users/rossm6/events{/privacy}", "received_events_url": "https://api.github.com/users/rossm6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T21:01:56Z", "updated_at": "2020-03-27T18:48:13Z", "closed_at": "2020-03-27T18:48:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Account.urls contains this url and view function -\r\n\r\npath(\"confirm-email/\", views.email_verification_sent,\r\n         name=\"account_email_verification_sent\"),\r\n\r\nWhat actually calls this view?  I thought when the user signed up but it's not happening for me.  I can't see it documented anywhere.  Moreover the name isn't anywhere in accounts.views.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2497", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2497/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2497/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2497/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2497", "id": 586778939, "node_id": "MDU6SXNzdWU1ODY3Nzg5Mzk=", "number": 2497, "title": "django-allauth taking 4-5 minutes to sign up via google and not taking the settings into considerations", "user": {"login": "dojutsu-user", "id": 29149191, "node_id": "MDQ6VXNlcjI5MTQ5MTkx", "avatar_url": "https://avatars3.githubusercontent.com/u/29149191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dojutsu-user", "html_url": "https://github.com/dojutsu-user", "followers_url": "https://api.github.com/users/dojutsu-user/followers", "following_url": "https://api.github.com/users/dojutsu-user/following{/other_user}", "gists_url": "https://api.github.com/users/dojutsu-user/gists{/gist_id}", "starred_url": "https://api.github.com/users/dojutsu-user/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dojutsu-user/subscriptions", "organizations_url": "https://api.github.com/users/dojutsu-user/orgs", "repos_url": "https://api.github.com/users/dojutsu-user/repos", "events_url": "https://api.github.com/users/dojutsu-user/events{/privacy}", "received_events_url": "https://api.github.com/users/dojutsu-user/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-24T08:22:32Z", "updated_at": "2020-03-27T19:58:28Z", "closed_at": "2020-03-27T19:58:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have set up django-allauth for signing via google.\r\nHere are my settings:\r\n```python\r\n# settings.py\r\n\r\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\r\nAUTHENTICATION_BACKENDS = (\r\n    'django.contrib.auth.backends.ModelBackend',\r\n    'allauth.account.auth_backends.AuthenticationBackend',\r\n)\r\n\r\nSITE_ID = 1\r\nACCOUNT_EMAIL_REQUIRED = True\r\nSOCIALACCOUNT_PROVIDERS = {\r\n    'google': {\r\n        'SCOPE': [\r\n            'profile',\r\n            'email',\r\n        ],\r\n        'AUTH_PARAMS': {\r\n            'access_type': 'online',\r\n        }\r\n    }\r\n}\r\nACCOUNT_ADAPTER = 'student.adapters.CustomAccountAdapter'\r\nLOGIN_REDIRECT_URL = '/'\r\nALLOWED_EMAIL_DOMAINS = [\r\n    '@iiitl.ac.in',\r\n]\r\nSOCIALACCOUNT_ADAPTER = 'student.adapters.CustomSocialAccountAdapter'\r\n```\r\n\r\nand my `student/adapters.py`\r\n```python\r\n# adapters.py\r\n\r\nfrom allauth.account.adapter import DefaultAccountAdapter\r\nfrom allauth.socialaccount.adapter import DefaultSocialAccountAdapter\r\nfrom django.forms import ValidationError\r\n\r\nfrom student.models import Student\r\n\r\n\r\nclass CustomAccountAdapter(DefaultAccountAdapter):\r\n\r\n    def clean_email(self, email):\r\n        email = super().__init__(email)\r\n        for allowed_domain in ['@abc.com']:\r\n            if allowed_domain not in email.lower():\r\n                print('VALIDATION', email)\r\n                raise ValidationError('Please login with email provided by your organisation.')\r\n        print(email)\r\n        return email\r\n\r\n\r\nclass CustomSocialAccountAdapter(DefaultSocialAccountAdapter):\r\n    pass\r\n```\r\n\r\nYou can see that I have `print` statements here.\r\nAnd when I click on \"Login with Google\", it takes me to Google OAuth Consent Screen and then I select my email. After selecting the email, it takes too much time for loading.\r\nAnd after it loads, it creates the account, no matter what the email is and also there is no print statement outputs in console.\r\n\r\nHere is the output of console\r\n```bash\r\n[24/Mar/2020 13:36:20] \"GET /login/ HTTP/1.1\" 200 8238\r\nNot Found: /login/images/logo.png\r\n[24/Mar/2020 13:36:20] \"GET /login/images/logo.png HTTP/1.1\" 404 2709\r\nNot Found: /login/contact.html\r\n[24/Mar/2020 13:36:21] \"GET /login/contact.html HTTP/1.1\" 404 2700\r\n[24/Mar/2020 13:36:23] \"GET /accounts/google/login/ HTTP/1.1\" 302 0\r\n[24/Mar/2020 13:40:53] \"GET /accounts/google/login/callback/?state=mMCBIGLwjlxW&code=4%2FxwF6awCYSNdltwDvwsZuc4SlodI-L2c1oBp9r0YT65RKAChWNz60fxRWKK647QOIe0wmZCMCz2ydTyS8zH-A8_A&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&authuser=0&prompt=consent HTTP/1.1\" 302 0\r\n[24/Mar/2020 13:40:53] \"GET / HTTP/1.1\" 200 10865\r\nNot Found: /images/logo.png\r\n[24/Mar/2020 13:40:53] \"GET /images/logo.png HTTP/1.1\" 404 2691\r\nNot Found: /images/img_1.jpg\r\n[24/Mar/2020 13:40:53] \"GET /images/img_1.jpg HTTP/1.1\" 404 2694\r\nNot Found: /images/img_2.jpg\r\n[24/Mar/2020 13:40:53] \"GET /images/img_2.jpg HTTP/1.1\" 404 2694\r\n```\r\n(Note the time difference)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2492", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2492/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2492/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2492/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2492", "id": 584523659, "node_id": "MDU6SXNzdWU1ODQ1MjM2NTk=", "number": 2492, "title": "Issue with socialaccount provider microsoft graph (provider.py)", "user": {"login": "LunatikCoder", "id": 58997519, "node_id": "MDQ6VXNlcjU4OTk3NTE5", "avatar_url": "https://avatars2.githubusercontent.com/u/58997519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LunatikCoder", "html_url": "https://github.com/LunatikCoder", "followers_url": "https://api.github.com/users/LunatikCoder/followers", "following_url": "https://api.github.com/users/LunatikCoder/following{/other_user}", "gists_url": "https://api.github.com/users/LunatikCoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/LunatikCoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LunatikCoder/subscriptions", "organizations_url": "https://api.github.com/users/LunatikCoder/orgs", "repos_url": "https://api.github.com/users/LunatikCoder/repos", "events_url": "https://api.github.com/users/LunatikCoder/events{/privacy}", "received_events_url": "https://api.github.com/users/LunatikCoder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-19T16:06:52Z", "updated_at": "2020-03-20T22:35:22Z", "closed_at": "2020-03-20T22:35:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, i found a bug when accessing the page {% url 'socialaccount_connections' %} (/social/connections/) it gave me a 'NoneType' object has no attribute 'strip' and the culprit is provider.py. The problem is that this file calls the strip() function on a null value and python being python doesn't like it ;) The solution i found is quite simple, in the provider.py file the MicrosoftGraphAccount class should be updated from this:\r\n`class MicrosoftGraphAccount(ProviderAccount):\r\n     def to_str(self):\r\n        name = self.account.extra_data.get('displayName')\r\n        if name.strip() != '':\r\n            return name\r\n        return super(MicrosoftGraphAccount, self).to_str()`\r\n\r\nto this:\r\n\r\n`class MicrosoftGraphAccount(ProviderAccount):\r\n    def to_str(self):\r\n        name = self.account.extra_data.get('displayName')\r\n        if not name is None:\r\n            if name.strip() != '':\r\n                return name\r\n        return super(MicrosoftGraphAccount, self).to_str()`\r\n\r\nI would like to add this change myself to the project if i can but i don't really know how to proceed. I decided to report the bug instead. Thank you !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2478", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2478/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2478/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2478/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2478", "id": 576982772, "node_id": "MDU6SXNzdWU1NzY5ODI3NzI=", "number": 2478, "title": "Support for Django >3.0", "user": {"login": "adremides", "id": 19670432, "node_id": "MDQ6VXNlcjE5NjcwNDMy", "avatar_url": "https://avatars1.githubusercontent.com/u/19670432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adremides", "html_url": "https://github.com/adremides", "followers_url": "https://api.github.com/users/adremides/followers", "following_url": "https://api.github.com/users/adremides/following{/other_user}", "gists_url": "https://api.github.com/users/adremides/gists{/gist_id}", "starred_url": "https://api.github.com/users/adremides/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adremides/subscriptions", "organizations_url": "https://api.github.com/users/adremides/orgs", "repos_url": "https://api.github.com/users/adremides/repos", "events_url": "https://api.github.com/users/adremides/events{/privacy}", "received_events_url": "https://api.github.com/users/adremides/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-06T14:54:36Z", "updated_at": "2020-03-13T12:43:31Z", "closed_at": "2020-03-13T12:43:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems not to be working on versions newer than 2.x. I was not able to discover the problem. Log didn't show me any error but an empty django project crash after credentials are sent on the login screen.\r\n\r\nLast line in log with version >=3.0 is:\r\n```\r\n(0.000) SELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = 1 LIMIT 21; args=(1,)\r\n```\r\n\r\nPast this line in the log with version <3.0 (where it works) are following info:\r\n```\r\n(0.000) SELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = 1; args=(1,)\r\n(0.000) SELECT \"django_admin_log\".\"id\", \"django_admin_log\".\"action_time\", \"django_admin_log\".\"user_id\", \"django_admin_log\".\"content_type_id\", \"django_admin_log\".\"object_id\", \"django_admin_log\".\"object_repr\", \"django_admin_log\".\"action_flag\", \"django_admin_log\".\"change_message\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\", \"django_content_type\".\"id\", \"django_content_type\".\"app_label\", \"django_content_type\".\"model\" FROM \"django_admin_log\" INNER JOIN \"auth_user\" ON (\"django_admin_log\".\"user_id\" = \"auth_user\".\"id\") LEFT OUTER JOIN \"django_content_type\" ON (\"django_admin_log\".\"content_type_id\" = \"django_content_type\".\"id\") WHERE \"django_admin_log\".\"user_id\" = 1 ORDER BY \"django_admin_log\".\"action_time\" DESC  LIMIT 10; args=(1,)\r\n\"GET /admin/ HTTP/1.1\" 200 3042\r\n\"GET /static/admin/css/responsive.css HTTP/1.1\" 200 17944\r\n\"GET /static/admin/css/base.css HTTP/1.1\" 200 16378\r\n\"GET /static/admin/css/dashboard.css HTTP/1.1\" 200 412\r\n\"GET /static/admin/css/fonts.css HTTP/1.1\" 200 423\r\n\"GET /static/admin/img/icon-addlink.svg HTTP/1.1\" 200 331\r\n\"GET /static/admin/img/icon-changelink.svg HTTP/1.1\" 200 380\r\n\"GET /static/admin/fonts/Roboto-Bold-webfont.woff HTTP/1.1\" 200 86184\r\n\"GET /static/admin/fonts/Roboto-Regular-webfont.woff HTTP/1.1\" 200 85876\r\n\"GET /static/admin/fonts/Roboto-Light-webfont.woff HTTP/1.1\" 200 85692\r\n```\r\nTo reproduce the error simply create new django project with a version 3.0 or greater, do a `python manage.py migrate`, create a new superuser `python manage.py createsuperuser`, run server and try to login in django admin.\r\n\r\nUPDATE: After make some replacement of the files changed in version 3.0a1 with same in version 2.2.11, track the issue in the file `..\\site-packages\\django\\contrib\\admin\\templates\\admin\\index.html` line 76:\r\n`                    <span class=\"mini quiet\">{% filter capfirst %}{{ entry.content_type.name }}{% endfilter %}</span>`\r\nIf `entry.content_type.name` is changed by `entry.content_type`, it works again. I don't know how to fix it in the module anyway so I wait for someone who know more about it than me, or continue to try to figure it out.\r\n\r\nUPDATE2: I tested it in a computer with Ubuntu 19.10 and it works. I will continue to trying the problem in the computer with windows that gives me the problem tomorrow\r\n\r\nUPDATE3: Problem was the interpreter version. I was using 32 bit one in windows.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2474", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2474/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2474/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2474/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2474", "id": 573619288, "node_id": "MDU6SXNzdWU1NzM2MTkyODg=", "number": 2474, "title": "POST data missing in pre_social_login", "user": {"login": "steverecio", "id": 978415, "node_id": "MDQ6VXNlcjk3ODQxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/978415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steverecio", "html_url": "https://github.com/steverecio", "followers_url": "https://api.github.com/users/steverecio/followers", "following_url": "https://api.github.com/users/steverecio/following{/other_user}", "gists_url": "https://api.github.com/users/steverecio/gists{/gist_id}", "starred_url": "https://api.github.com/users/steverecio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steverecio/subscriptions", "organizations_url": "https://api.github.com/users/steverecio/orgs", "repos_url": "https://api.github.com/users/steverecio/repos", "events_url": "https://api.github.com/users/steverecio/events{/privacy}", "received_events_url": "https://api.github.com/users/steverecio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-01T21:30:35Z", "updated_at": "2020-03-02T00:32:03Z", "closed_at": "2020-03-02T00:32:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "As part of my MFA logic, I want to block social login in the event that an MFA device is set. I have the pre_social_login signal set up but the request object passed in doesn't have the POST data attached. I need to do this in the pre_social_login handler because I need access to the user object in order to look up whether the MFA device is set. Is this a bug that the POST data is missing from the request object passed into the signal handler?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2471", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2471/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2471/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2471/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2471", "id": 572410920, "node_id": "MDU6SXNzdWU1NzI0MTA5MjA=", "number": 2471, "title": "Robinhood OAuth2 Details?", "user": {"login": "dkvdm", "id": 456094, "node_id": "MDQ6VXNlcjQ1NjA5NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/456094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkvdm", "html_url": "https://github.com/dkvdm", "followers_url": "https://api.github.com/users/dkvdm/followers", "following_url": "https://api.github.com/users/dkvdm/following{/other_user}", "gists_url": "https://api.github.com/users/dkvdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkvdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkvdm/subscriptions", "organizations_url": "https://api.github.com/users/dkvdm/orgs", "repos_url": "https://api.github.com/users/dkvdm/repos", "events_url": "https://api.github.com/users/dkvdm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkvdm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T22:51:07Z", "updated_at": "2020-03-04T23:40:50Z", "closed_at": "2020-03-04T23:40:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to use Robinhood for auth, but I can't seem to figure out the OAuth2 settings.\r\n@joshowen as you submitted the PR for this, could you please give more information on what to use for `client_id`, `secret`, etc? I can't seem to create a developer app for Robinhood that specifically sets these settings.\r\n\r\nThank you,\r\nDennis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2470", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2470/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2470/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2470/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2470", "id": 571529229, "node_id": "MDU6SXNzdWU1NzE1MjkyMjk=", "number": 2470, "title": "Issue with refresh token not being saved ", "user": {"login": "lavafactory", "id": 56549640, "node_id": "MDQ6VXNlcjU2NTQ5NjQw", "avatar_url": "https://avatars0.githubusercontent.com/u/56549640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lavafactory", "html_url": "https://github.com/lavafactory", "followers_url": "https://api.github.com/users/lavafactory/followers", "following_url": "https://api.github.com/users/lavafactory/following{/other_user}", "gists_url": "https://api.github.com/users/lavafactory/gists{/gist_id}", "starred_url": "https://api.github.com/users/lavafactory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lavafactory/subscriptions", "organizations_url": "https://api.github.com/users/lavafactory/orgs", "repos_url": "https://api.github.com/users/lavafactory/repos", "events_url": "https://api.github.com/users/lavafactory/events{/privacy}", "received_events_url": "https://api.github.com/users/lavafactory/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-26T17:03:23Z", "updated_at": "2020-06-25T00:13:37Z", "closed_at": "2020-02-26T23:47:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having an issue with a particular user in allauth that for whatever reason has the blank token_secret / refresh_token for a google auth.  I followed #403 to try and reset the refresh token, and while the code does pull a new refresh token, it doesn't actually save it back to the model.  \r\n\r\nHaving a hard time figuring out where the code is that actually does the save, and could use some help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2469", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2469/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2469/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2469/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2469", "id": 571087617, "node_id": "MDU6SXNzdWU1NzEwODc2MTc=", "number": 2469, "title": "can't I access the user object just after signup but before login", "user": {"login": "ibrahimsamson", "id": 42063146, "node_id": "MDQ6VXNlcjQyMDYzMTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/42063146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibrahimsamson", "html_url": "https://github.com/ibrahimsamson", "followers_url": "https://api.github.com/users/ibrahimsamson/followers", "following_url": "https://api.github.com/users/ibrahimsamson/following{/other_user}", "gists_url": "https://api.github.com/users/ibrahimsamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibrahimsamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibrahimsamson/subscriptions", "organizations_url": "https://api.github.com/users/ibrahimsamson/orgs", "repos_url": "https://api.github.com/users/ibrahimsamson/repos", "events_url": "https://api.github.com/users/ibrahimsamson/events{/privacy}", "received_events_url": "https://api.github.com/users/ibrahimsamson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-26T05:53:47Z", "updated_at": "2020-02-29T03:14:01Z", "closed_at": "2020-02-29T03:14:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to populate some user fields by using celery and signals but it seems like the signals aren't triggered. When the `social_account_added signal` is emitted I then call a background task to download the user's profile picture from Linkedin and upload it to my oss bucket. But the signals aren't emitted so this function is never called. Here is what i have done\r\n```\r\nfrom allauth.socialaccount.signals import social_account_added\r\nfrom django.dispatch import receiver\r\n@receiver(social_account_added)\r\ndef social_user_connected(request, sociallogin, **kwargs):\r\n    update_profile_picture.delay(str(sociallogin.user))\r\n    return redirect(\"app:home\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2468", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2468/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2468/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2468/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2468", "id": 568829355, "node_id": "MDU6SXNzdWU1Njg4MjkzNTU=", "number": 2468, "title": "REDIRECT_URL_ON_CONFIRM", "user": {"login": "jameskomo", "id": 47238834, "node_id": "MDQ6VXNlcjQ3MjM4ODM0", "avatar_url": "https://avatars0.githubusercontent.com/u/47238834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jameskomo", "html_url": "https://github.com/jameskomo", "followers_url": "https://api.github.com/users/jameskomo/followers", "following_url": "https://api.github.com/users/jameskomo/following{/other_user}", "gists_url": "https://api.github.com/users/jameskomo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jameskomo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jameskomo/subscriptions", "organizations_url": "https://api.github.com/users/jameskomo/orgs", "repos_url": "https://api.github.com/users/jameskomo/repos", "events_url": "https://api.github.com/users/jameskomo/events{/privacy}", "received_events_url": "https://api.github.com/users/jameskomo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T09:14:59Z", "updated_at": "2020-03-03T12:33:38Z", "closed_at": "2020-03-03T12:33:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to have two different redirects...one for normal login and another for redirect after email confirmation\r\n\r\n`ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/profile'\r\nLOGIN_REDIRECT_URL = '/'\r\n`\r\n\r\nBut when I enable login, AUTHENTICATED REDIRECT goes to LOGIN_REDIRECT but when I disable Login it goes to the EMAIL_CONFIRMATION_REDIRECT route.\r\n\r\nWhen I try printing the adapter settings for email_confirmation redirect url below it shows only the LOGIN_REDIRECT\r\n\r\n`def get_email_confirmation_redirect_url(self, request):\r\n        \"\"\"\r\n        The URL to return to after successful e-mail confirmation.\r\n        \"\"\"\r\n        if request.user.is_authenticated:\r\n            if app_settings.EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL:\r\n                return  \\\r\n                    app_settings.EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL\r\n            else:\r\n                return self.get_login_redirect_url(request)\r\n        else:\r\n            return app_settings.EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL`\r\n\r\nI tried changing the account settings below but wont work as well\r\n\r\n` @property\r\n    def EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL(self):\r\n        \"\"\"\r\n        The URL to redirect to after a successful e-mail confirmation, in\r\n        case of an authenticated user\r\n        \"\"\"\r\n        return self._setting(\"EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL\",\r\n                             None)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2463", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2463/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2463/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2463/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2463", "id": 566421211, "node_id": "MDU6SXNzdWU1NjY0MjEyMTE=", "number": 2463, "title": "login attempts blocked user....unblock", "user": {"login": "yooyoyo", "id": 46138026, "node_id": "MDQ6VXNlcjQ2MTM4MDI2", "avatar_url": "https://avatars1.githubusercontent.com/u/46138026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yooyoyo", "html_url": "https://github.com/yooyoyo", "followers_url": "https://api.github.com/users/yooyoyo/followers", "following_url": "https://api.github.com/users/yooyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/yooyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/yooyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yooyoyo/subscriptions", "organizations_url": "https://api.github.com/users/yooyoyo/orgs", "repos_url": "https://api.github.com/users/yooyoyo/repos", "events_url": "https://api.github.com/users/yooyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/yooyoyo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-17T16:56:27Z", "updated_at": "2020-08-11T14:03:11Z", "closed_at": "2020-08-11T14:03:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "where is the data stored for login attempts made by the users?? How do you clear that? or unblock blocked users?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2457", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2457/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2457/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2457/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2457", "id": 559499294, "node_id": "MDU6SXNzdWU1NTk0OTkyOTQ=", "number": 2457, "title": "github provider should use Authorization header instead", "user": {"login": "alee", "id": 22534, "node_id": "MDQ6VXNlcjIyNTM0", "avatar_url": "https://avatars0.githubusercontent.com/u/22534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alee", "html_url": "https://github.com/alee", "followers_url": "https://api.github.com/users/alee/followers", "following_url": "https://api.github.com/users/alee/following{/other_user}", "gists_url": "https://api.github.com/users/alee/gists{/gist_id}", "starred_url": "https://api.github.com/users/alee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alee/subscriptions", "organizations_url": "https://api.github.com/users/alee/orgs", "repos_url": "https://api.github.com/users/alee/repos", "events_url": "https://api.github.com/users/alee/events{/privacy}", "received_events_url": "https://api.github.com/users/alee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-04T05:37:36Z", "updated_at": "2020-03-20T19:22:45Z", "closed_at": "2020-03-20T19:22:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "GitHub is deprecating their query parameter access token based authentication in favor of setting an `Authorization:` header in the request. I *think* this should be a fairly simple change to the [GitHub provider](https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/providers/github/views.py#L30) and adding the header to the `requests.get()` call. Happy to submit a PR for this but I'm not sure if there's anything else needed..\r\n\r\nhttps://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/#authenticating-using-query-parameters ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2453", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2453/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2453/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2453/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2453", "id": 558575268, "node_id": "MDU6SXNzdWU1NTg1NzUyNjg=", "number": 2453, "title": "Add Signal for Email Verified", "user": {"login": "steverecio", "id": 978415, "node_id": "MDQ6VXNlcjk3ODQxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/978415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steverecio", "html_url": "https://github.com/steverecio", "followers_url": "https://api.github.com/users/steverecio/followers", "following_url": "https://api.github.com/users/steverecio/following{/other_user}", "gists_url": "https://api.github.com/users/steverecio/gists{/gist_id}", "starred_url": "https://api.github.com/users/steverecio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steverecio/subscriptions", "organizations_url": "https://api.github.com/users/steverecio/orgs", "repos_url": "https://api.github.com/users/steverecio/repos", "events_url": "https://api.github.com/users/steverecio/events{/privacy}", "received_events_url": "https://api.github.com/users/steverecio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-01T18:05:53Z", "updated_at": "2020-02-01T19:26:43Z", "closed_at": "2020-02-01T19:26:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's already a signal for `email_confirmed` however this implied that an official email confirmation was sent and verified. However, when using social auth, an email address with `verified=True` is added to the database but this does not fire the `email_confirmed` signal. There is an `email_added` signal but that would not work to catch the case where an email is added initially as unverified and later modified to verified.\r\n\r\nI'd propose adding a new signal for `email_verified` that is fired from the `save()` function on the `EmailAddress` model whenever the verified field is set to True. This way we can know for sure that the user has a verified email whether or not they have clicked through the confirmation email sent to their inbox.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2448", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2448/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2448/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2448/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2448", "id": 553518355, "node_id": "MDU6SXNzdWU1NTM1MTgzNTU=", "number": 2448, "title": "Feature request: Store IP address", "user": {"login": "sowinski", "id": 1528746, "node_id": "MDQ6VXNlcjE1Mjg3NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1528746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sowinski", "html_url": "https://github.com/sowinski", "followers_url": "https://api.github.com/users/sowinski/followers", "following_url": "https://api.github.com/users/sowinski/following{/other_user}", "gists_url": "https://api.github.com/users/sowinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/sowinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sowinski/subscriptions", "organizations_url": "https://api.github.com/users/sowinski/orgs", "repos_url": "https://api.github.com/users/sowinski/repos", "events_url": "https://api.github.com/users/sowinski/events{/privacy}", "received_events_url": "https://api.github.com/users/sowinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-22T12:47:20Z", "updated_at": "2020-05-20T16:57:56Z", "closed_at": "2020-05-20T16:57:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwhat could be a good way of storing the IP of a customer during the registration process or even store a history of all login / fails / registration attempts.\r\n\r\nIs there maybe allready a plugin for django-allauth?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2416", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2416/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2416/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2416/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2416", "id": 540379510, "node_id": "MDU6SXNzdWU1NDAzNzk1MTA=", "number": 2416, "title": "How to retrieve the Facebook app ID", "user": {"login": "danihodovic", "id": 5557301, "node_id": "MDQ6VXNlcjU1NTczMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5557301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danihodovic", "html_url": "https://github.com/danihodovic", "followers_url": "https://api.github.com/users/danihodovic/followers", "following_url": "https://api.github.com/users/danihodovic/following{/other_user}", "gists_url": "https://api.github.com/users/danihodovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/danihodovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danihodovic/subscriptions", "organizations_url": "https://api.github.com/users/danihodovic/orgs", "repos_url": "https://api.github.com/users/danihodovic/repos", "events_url": "https://api.github.com/users/danihodovic/events{/privacy}", "received_events_url": "https://api.github.com/users/danihodovic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T15:21:23Z", "updated_at": "2019-12-20T08:44:07Z", "closed_at": "2019-12-20T08:44:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using the Facebook python business SDK (https://github.com/facebook/facebook-python-business-sdk) it requires the App ID in API calls. Is it possible to retrieve this using allauth?\r\n\r\nHere is the getting started example which requires the app ID:\r\nhttps://developers.facebook.com/docs/business-sdk/getting-started#python\r\n\r\n```py\r\nimport sys\r\nsys.path.append('/opt/homebrew/lib/python2.7/site-packages') # Replace this with the place you installed facebookads using pip\r\nsys.path.append('/opt/homebrew/lib/python2.7/site-packages/facebook_business-3.0.0-py2.7.egg-info') # same as above\r\n\r\nfrom facebook_business.api import FacebookAdsApi\r\nfrom facebook_business.adobjects.adaccount import AdAccount\r\n\r\nmy_app_id = '{app-id}'\r\nmy_app_secret = '{appsecret}'\r\nmy_access_token = '{access-token}'\r\nFacebookAdsApi.init(my_app_id, my_app_secret, my_access_token)\r\nmy_account = AdAccount('act_{{adaccount-id}}')\r\ncampaigns = my_account.get_campaigns()\r\nprint(campaigns\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2414", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2414/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2414/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2414/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2414", "id": 539599807, "node_id": "MDU6SXNzdWU1Mzk1OTk4MDc=", "number": 2414, "title": "Password reset emails are being sent to inactive users", "user": {"login": "deegeenl", "id": 84439, "node_id": "MDQ6VXNlcjg0NDM5", "avatar_url": "https://avatars0.githubusercontent.com/u/84439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deegeenl", "html_url": "https://github.com/deegeenl", "followers_url": "https://api.github.com/users/deegeenl/followers", "following_url": "https://api.github.com/users/deegeenl/following{/other_user}", "gists_url": "https://api.github.com/users/deegeenl/gists{/gist_id}", "starred_url": "https://api.github.com/users/deegeenl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deegeenl/subscriptions", "organizations_url": "https://api.github.com/users/deegeenl/orgs", "repos_url": "https://api.github.com/users/deegeenl/repos", "events_url": "https://api.github.com/users/deegeenl/events{/privacy}", "received_events_url": "https://api.github.com/users/deegeenl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-18T10:42:36Z", "updated_at": "2019-12-18T14:08:31Z", "closed_at": "2019-12-18T14:08:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Users that are marked as inactive should not be able to reset their passwords. This test shows that the `ResetPasswordForm` lets users reset their password even if they are inactive:\r\n```\r\nfrom allauth.account.forms import ResetPasswordForm\r\nfrom django.test.client import RequestFactory\r\n\r\nUser = get_user_model()\r\n\r\n\r\nclass TestResetPasswordForm(TestCase):\r\n\r\n    global_request = RequestFactory().get('/')\r\n\r\n    def test_user_email_not_sent_inactive_user(self):\r\n        User.objects.create_user('mike123', 'mike@ixample.org', 'test123', is_active=False)\r\n        data = {'email': 'mike@ixample.org'}\r\n        form = ResetPasswordForm(data)\r\n        self.assertTrue(form.is_valid())\r\n        form.save(self.global_request)\r\n        self.assertEqual(len(mail.outbox), 0)\r\n```\r\n\r\nAs in the Django `PasswordResetForm`, the query for users based on the email address should include `is_active=True`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2413", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2413/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2413/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2413/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2413", "id": 539581216, "node_id": "MDU6SXNzdWU1Mzk1ODEyMTY=", "number": 2413, "title": "Passwords can be hijacked due to CVE-2019-19844", "user": {"login": "deegeenl", "id": 84439, "node_id": "MDQ6VXNlcjg0NDM5", "avatar_url": "https://avatars0.githubusercontent.com/u/84439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deegeenl", "html_url": "https://github.com/deegeenl", "followers_url": "https://api.github.com/users/deegeenl/followers", "following_url": "https://api.github.com/users/deegeenl/following{/other_user}", "gists_url": "https://api.github.com/users/deegeenl/gists{/gist_id}", "starred_url": "https://api.github.com/users/deegeenl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deegeenl/subscriptions", "organizations_url": "https://api.github.com/users/deegeenl/orgs", "repos_url": "https://api.github.com/users/deegeenl/repos", "events_url": "https://api.github.com/users/deegeenl/events{/privacy}", "received_events_url": "https://api.github.com/users/deegeenl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-18T10:09:28Z", "updated_at": "2019-12-18T17:59:37Z", "closed_at": "2019-12-18T17:59:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "The Django team just [released a security update](https://www.djangoproject.com/weblog/2019/dec/18/security-releases/) for CVE-2019-19844. This security issue with high severity also affects allauth, since the `ResetPasswordForm` uses its own logic and isn't based on the Django `PasswordResetForm`. \r\n\r\nI'm posting this publicly since the issue is also public since today due to the Django release.\r\n\r\nI've replicated the tests for this security issue and they all fail. Note this happens with PostgreSQL, not with SQLite! I've asked the Django core team for clarification on the pre-conditions for this issue to happen.\r\n\r\n```\r\nfrom allauth.account.forms import ResetPasswordForm\r\nfrom django.test.client import RequestFactory\r\n\r\nUser = get_user_model()\r\n\r\n\r\nclass TestCVE2019_19844(TestCase):\r\n\r\n    global_request = RequestFactory().get('/')\r\n\r\n    def test_user_email_unicode_collision(self):\r\n        User.objects.create_user('mike123', 'mike@example.org', 'test123')\r\n        User.objects.create_user('mike456', 'm\u0131ke@example.org', 'test123')\r\n        data = {'email': 'm\u0131ke@example.org'}\r\n        form = ResetPasswordForm(data)\r\n        self.assertTrue(form.is_valid())\r\n        form.save(self.global_request)\r\n        self.assertEqual(len(mail.outbox), 1)  # Fails: AssertionError: 2 != 1 when using PostgreSQL\r\n        self.assertEqual(mail.outbox[0].to, ['m\u0131ke@example.org'])\r\n\r\n    def test_user_email_domain_unicode_collision(self):\r\n        User.objects.create_user('mike123', 'mike@ixample.org', 'test123')\r\n        User.objects.create_user('mike456', 'mike@\u0131xample.org', 'test123')\r\n        data = {'email': 'mike@\u0131xample.org'}\r\n        form = ResetPasswordForm(data)\r\n        self.assertTrue(form.is_valid())\r\n        form.save(self.global_request)\r\n        self.assertEqual(len(mail.outbox), 1)  # Fails: AssertionError: 2 != 1 when using PostgreSQL\r\n        self.assertEqual(mail.outbox[0].to, ['mike@\u0131xample.org'])\r\n\r\n    def test_user_email_unicode_collision_nonexistent(self):\r\n        User.objects.create_user('mike123', 'mike@example.org', 'test123')\r\n        data = {'email': 'm\u0131ke@example.org'}\r\n        form = ResetPasswordForm(data)\r\n        self.assertTrue(form.is_valid())\r\n        form.save(self.global_request)\r\n        self.assertEqual(len(mail.outbox), 0)  # Fails: AssertionError: 1 != 0\r\n\r\n    def test_user_email_domain_unicode_collision_nonexistent(self):\r\n        User.objects.create_user('mike123', 'mike@ixample.org', 'test123')\r\n        data = {'email': 'mike@\u0131xample.org'}\r\n        form = ResetPasswordForm(data)\r\n        self.assertTrue(form.is_valid())\r\n        form.save(self.global_request)\r\n        self.assertEqual(len(mail.outbox), 0)  # Fails: AssertionError: 1 != 0\r\n```\r\n\r\nThe solution is to change `allauth.account.utils.filter_users_by_email` to use the same comparison mechanism as Django ([`_unicode_ci_compare()`](https://github.com/django/django/commit/5b1fbcef7a8bec991ebe7b2a18b5d5a95d72cb70)) and to send the email to the actual user's email rather than `ResetPasswordForm.cleaned_data['email']`.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2410", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2410/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2410/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2410/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2410", "id": 538070273, "node_id": "MDU6SXNzdWU1MzgwNzAyNzM=", "number": 2410, "title": "REST: Change password and email", "user": {"login": "sowinski", "id": 1528746, "node_id": "MDQ6VXNlcjE1Mjg3NDY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1528746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sowinski", "html_url": "https://github.com/sowinski", "followers_url": "https://api.github.com/users/sowinski/followers", "following_url": "https://api.github.com/users/sowinski/following{/other_user}", "gists_url": "https://api.github.com/users/sowinski/gists{/gist_id}", "starred_url": "https://api.github.com/users/sowinski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sowinski/subscriptions", "organizations_url": "https://api.github.com/users/sowinski/orgs", "repos_url": "https://api.github.com/users/sowinski/repos", "events_url": "https://api.github.com/users/sowinski/events{/privacy}", "received_events_url": "https://api.github.com/users/sowinski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-15T15:59:51Z", "updated_at": "2019-12-15T16:46:07Z", "closed_at": "2019-12-15T16:46:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI build a frontend with VueJS/Nuxt. Is it possible to talk over REST with django-allauth to change the password or to change the e-mail adresse?\r\n\r\nIf not, how would you do this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2409", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2409/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2409/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2409/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2409", "id": 537750262, "node_id": "MDU6SXNzdWU1Mzc3NTAyNjI=", "number": 2409, "title": "Can't set ACCOUNT_EMAIL_SUBJECT_PREFIX to None (or empty)", "user": {"login": "taewookim", "id": 5768898, "node_id": "MDQ6VXNlcjU3Njg4OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5768898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taewookim", "html_url": "https://github.com/taewookim", "followers_url": "https://api.github.com/users/taewookim/followers", "following_url": "https://api.github.com/users/taewookim/following{/other_user}", "gists_url": "https://api.github.com/users/taewookim/gists{/gist_id}", "starred_url": "https://api.github.com/users/taewookim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taewookim/subscriptions", "organizations_url": "https://api.github.com/users/taewookim/orgs", "repos_url": "https://api.github.com/users/taewookim/repos", "events_url": "https://api.github.com/users/taewookim/events{/privacy}", "received_events_url": "https://api.github.com/users/taewookim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-13T19:59:10Z", "updated_at": "2020-04-25T16:59:04Z", "closed_at": "2019-12-14T11:07:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Version - Latest (as of 12/13/2019) via pip install, for both django and django-allauth\r\n\r\nIssue - Emails are still showing default site (\"[example.com\")\r\n\r\n```\r\nACCOUNT_EMAIL_REQUIRED = True\r\nACCOUNT_USERNAME_REQUIRED = False\r\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\r\nACCOUNT_SESSION_REMEMBER = True\r\nACCOUNT_AUTHENTICATION_METHOD = 'email'\r\nACCOUNT_UNIQUE_EMAIL = True\r\nACCOUNT_USER_MODEL_USERNAME_FIELD =\"username\"\r\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\r\nACCOUNT_EMAIL_SUBJECT_PREFIX=None # tried \"\" as well\r\nACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION=True\r\n```\r\n\r\nThought it was cache issue, so I tried clearing cache via\r\n\r\n`python` manage.py clear_cache \r\n\r\nand \r\n\r\n`Site.objects.clear_cache()`\r\n\r\nEmails are still showing \"[example.com]\" prefix.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2407", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2407/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2407/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2407/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2407", "id": 537249358, "node_id": "MDU6SXNzdWU1MzcyNDkzNTg=", "number": 2407, "title": "Is this still the best approach: automatically linking social site profiles using the registered email?", "user": {"login": "TimothyBramlett", "id": 7890441, "node_id": "MDQ6VXNlcjc4OTA0NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7890441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimothyBramlett", "html_url": "https://github.com/TimothyBramlett", "followers_url": "https://api.github.com/users/TimothyBramlett/followers", "following_url": "https://api.github.com/users/TimothyBramlett/following{/other_user}", "gists_url": "https://api.github.com/users/TimothyBramlett/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimothyBramlett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimothyBramlett/subscriptions", "organizations_url": "https://api.github.com/users/TimothyBramlett/orgs", "repos_url": "https://api.github.com/users/TimothyBramlett/repos", "events_url": "https://api.github.com/users/TimothyBramlett/events{/privacy}", "received_events_url": "https://api.github.com/users/TimothyBramlett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T22:32:58Z", "updated_at": "2019-12-15T11:42:41Z", "closed_at": "2019-12-15T11:42:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I basically want to use Facebook, Google, and local logins for a new Django Site.\r\n\r\nI found this questions on Stack Overflow which is exactly what I want to do:\r\n\r\nhttps://stackoverflow.com/questions/19354009/django-allauth-social-login-automatically-linking-social-site-profiles-using-th\r\n\r\nIs the accepted answer: https://stackoverflow.com/a/19443127/3724464 still the best approach?  I have been looking at the docs and just want to make sure I am not missing an easier way or something.\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2406", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2406/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2406/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2406/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2406", "id": 537036159, "node_id": "MDU6SXNzdWU1MzcwMzYxNTk=", "number": 2406, "title": "Confirmation e-mail", "user": {"login": "qari", "id": 1835807, "node_id": "MDQ6VXNlcjE4MzU4MDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1835807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qari", "html_url": "https://github.com/qari", "followers_url": "https://api.github.com/users/qari/followers", "following_url": "https://api.github.com/users/qari/following{/other_user}", "gists_url": "https://api.github.com/users/qari/gists{/gist_id}", "starred_url": "https://api.github.com/users/qari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qari/subscriptions", "organizations_url": "https://api.github.com/users/qari/orgs", "repos_url": "https://api.github.com/users/qari/repos", "events_url": "https://api.github.com/users/qari/events{/privacy}", "received_events_url": "https://api.github.com/users/qari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-12T15:08:55Z", "updated_at": "2019-12-12T15:13:30Z", "closed_at": "2019-12-12T15:13:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to disable it? After register that not send email and not show message for user about Confirmation. Just registration", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2403", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2403/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2403/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2403/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2403", "id": 534590148, "node_id": "MDU6SXNzdWU1MzQ1OTAxNDg=", "number": 2403, "title": "Zapier Integration", "user": {"login": "steverecio", "id": 978415, "node_id": "MDQ6VXNlcjk3ODQxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/978415?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steverecio", "html_url": "https://github.com/steverecio", "followers_url": "https://api.github.com/users/steverecio/followers", "following_url": "https://api.github.com/users/steverecio/following{/other_user}", "gists_url": "https://api.github.com/users/steverecio/gists{/gist_id}", "starred_url": "https://api.github.com/users/steverecio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steverecio/subscriptions", "organizations_url": "https://api.github.com/users/steverecio/orgs", "repos_url": "https://api.github.com/users/steverecio/repos", "events_url": "https://api.github.com/users/steverecio/events{/privacy}", "received_events_url": "https://api.github.com/users/steverecio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-08T19:44:15Z", "updated_at": "2019-12-08T19:59:58Z", "closed_at": "2019-12-08T19:59:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Has anyone built a Zapier integration on top of django-allauth? Which authentication method did you use?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2402", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2402/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2402/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2402/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2402", "id": 534576241, "node_id": "MDU6SXNzdWU1MzQ1NzYyNDE=", "number": 2402, "title": "gmail dot \".\" problem", "user": {"login": "fanckush", "id": 6278713, "node_id": "MDQ6VXNlcjYyNzg3MTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6278713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanckush", "html_url": "https://github.com/fanckush", "followers_url": "https://api.github.com/users/fanckush/followers", "following_url": "https://api.github.com/users/fanckush/following{/other_user}", "gists_url": "https://api.github.com/users/fanckush/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanckush/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanckush/subscriptions", "organizations_url": "https://api.github.com/users/fanckush/orgs", "repos_url": "https://api.github.com/users/fanckush/repos", "events_url": "https://api.github.com/users/fanckush/events{/privacy}", "received_events_url": "https://api.github.com/users/fanckush/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-08T17:50:43Z", "updated_at": "2019-12-09T15:41:27Z", "closed_at": "2019-12-09T15:40:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a social login (google login button among others). As you know google doesn't take into account dots. (some.email@gmail.com is the same as someemail@gmail.com)\r\nsomehow a logged out user clicked on the \"connect with google\" button and typed his email without a dot and it got registered as a new user. I don't use usernames cuz i have \r\n```  python\r\nUSERNAME_FIELD = 'email' #in my custom user model\r\n```\r\n\r\nI understand that this is not a issue with allauth itself but how can I fix this problem? I don't have access to the part that validates if the email already exists since that is done by allauth automatically. \r\nThe \"connect with google button\" will create an account if the user never logged in before, and if the user has logged in before then it will simply log them in. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2401", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2401/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2401/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2401/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2401", "id": 533205756, "node_id": "MDU6SXNzdWU1MzMyMDU3NTY=", "number": 2401, "title": "Change Password validation not working", "user": {"login": "mohammadasim", "id": 20421103, "node_id": "MDQ6VXNlcjIwNDIxMTAz", "avatar_url": "https://avatars1.githubusercontent.com/u/20421103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mohammadasim", "html_url": "https://github.com/mohammadasim", "followers_url": "https://api.github.com/users/mohammadasim/followers", "following_url": "https://api.github.com/users/mohammadasim/following{/other_user}", "gists_url": "https://api.github.com/users/mohammadasim/gists{/gist_id}", "starred_url": "https://api.github.com/users/mohammadasim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mohammadasim/subscriptions", "organizations_url": "https://api.github.com/users/mohammadasim/orgs", "repos_url": "https://api.github.com/users/mohammadasim/repos", "events_url": "https://api.github.com/users/mohammadasim/events{/privacy}", "received_events_url": "https://api.github.com/users/mohammadasim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T08:46:03Z", "updated_at": "2019-12-15T11:45:12Z", "closed_at": "2019-12-15T11:45:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "version: 0.40.0\r\nHi,\r\nI have just started using allauth in one of my project POC. I first created a user using allauth form and URL. The user was saved in the database. I then wanted to change the user's password. I got the form and in the current password section, I deliberately provided the wrong password and then typed a new password. Upon form submission I didn't receive any message or validation error, to say that the current password was wrong. Although the password was not updated, in the browser it seemed as if the password has been updated.\r\nLooking at your code, in the `PasswordChangeView` in the method\r\n`def form_valid(self, form):\r\n        form.save()`\r\nyou are invoking the save method without calling the `clean_oldpassword` method in the `ChangePasswordForm`.\r\nI have managed to enable this feature by overwriting the view and the `form_valid` method as follows:\r\n```\r\n    def form_valid(self, form):\r\n        try:\r\n            form.clean_oldpassword()\r\n            super().form_invalid(form)\r\n        except ValidationError as err:\r\n            messages.add_message(self.request, messages.ERROR, err.message)\r\n            return redirect(reverse_lazy('change_password'))\r\n\r\n```\r\nHowever, this is lots of work. I am not sure if this is a bug or am I missing something.\r\nThanks,\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2393", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2393/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2393/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2393/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2393", "id": 523582055, "node_id": "MDU6SXNzdWU1MjM1ODIwNTU=", "number": 2393, "title": "Language switches to EN-US right after posting SignupForm", "user": {"login": "lggwettmann", "id": 4527829, "node_id": "MDQ6VXNlcjQ1Mjc4Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4527829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lggwettmann", "html_url": "https://github.com/lggwettmann", "followers_url": "https://api.github.com/users/lggwettmann/followers", "following_url": "https://api.github.com/users/lggwettmann/following{/other_user}", "gists_url": "https://api.github.com/users/lggwettmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/lggwettmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lggwettmann/subscriptions", "organizations_url": "https://api.github.com/users/lggwettmann/orgs", "repos_url": "https://api.github.com/users/lggwettmann/repos", "events_url": "https://api.github.com/users/lggwettmann/events{/privacy}", "received_events_url": "https://api.github.com/users/lggwettmann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-15T16:56:37Z", "updated_at": "2020-05-08T16:56:12Z", "closed_at": "2020-05-08T16:56:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys,\r\n\r\nI have django set up for the languages en, nl and de, but not for en-us, en-gb etc. I have a custom sign up form:\r\n```\r\nclass SignupForm(forms.ModelForm):\r\n    receive_newsletters = forms.BooleanField(initial=True, required=False)\r\n\r\n    class Meta:\r\n        model = get_user_model()\r\n        fields = ['first_name', 'last_name',]\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        ...       \r\n\r\n    def signup(self, request, user):\r\n        user.first_name = self.cleaned_data['first_name']\r\n        user.last_name = self.cleaned_data['last_name']\r\n        user.save()\r\n        if self.cleaned_data['receive_newsletters'] == True:\r\n            subscribe_to_basic_newsletters.apply_async([user.pk], countdown=60)\r\n```\r\nEverytime a user signs up from 'en/accounts/signup/' or 'nl/accounts/signup/' and posts the data, they get redirected to '/en-us/accounts/confirm-email/' instead of '/en/accounts/confirm-email/' or ''/nl/accounts/confirm-email' - what could the reason be for that?\r\n\r\nAll other language-related functions work great on my site. Thanks for any help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2390", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2390/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2390/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2390/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2390", "id": 521452729, "node_id": "MDU6SXNzdWU1MjE0NTI3Mjk=", "number": 2390, "title": "Small typo in allauth/socialaccount/providers/facebook/locale.py", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-12T10:11:56Z", "updated_at": "2019-11-13T21:20:36Z", "closed_at": "2019-11-13T21:20:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Should read appropriate rather than appropiate in the default_local docstring.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2387", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2387/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2387/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2387/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2387", "id": 520456885, "node_id": "MDU6SXNzdWU1MjA0NTY4ODU=", "number": 2387, "title": "Error when 500 template contains a django-allauth template tag", "user": {"login": "Bartleby2718", "id": 7676354, "node_id": "MDQ6VXNlcjc2NzYzNTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7676354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bartleby2718", "html_url": "https://github.com/Bartleby2718", "followers_url": "https://api.github.com/users/Bartleby2718/followers", "following_url": "https://api.github.com/users/Bartleby2718/following{/other_user}", "gists_url": "https://api.github.com/users/Bartleby2718/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bartleby2718/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bartleby2718/subscriptions", "organizations_url": "https://api.github.com/users/Bartleby2718/orgs", "repos_url": "https://api.github.com/users/Bartleby2718/repos", "events_url": "https://api.github.com/users/Bartleby2718/events{/privacy}", "received_events_url": "https://api.github.com/users/Bartleby2718/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-09T15:23:35Z", "updated_at": "2019-12-14T11:08:29Z", "closed_at": "2019-12-14T11:08:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "**Error message**: \r\n- `AttributeError: 'NoneType' object has no attribute 'POST'`\r\n\r\n**How to reproduce**:\r\n1) Create a 500 template (`500.html` in your template directory) that includes a template tag from django-allauth. For me, it was `Google Sign In` button:\r\n```html\r\n<!--500.html-->\r\n{% load socialaccount %}\r\n<a class=\"nav-link\" href=\"{% provider_login_url 'google' %}\">Log In</a>\r\n```\r\n\r\n2. Add an endpoint that is handled by Django's default 500 handler (`handler500` in `django.conf.urls`, which by default points to `django.views.defaults.server_error`)\r\n```python\r\n# urls.py\r\nfrom django.conf.urls import handler500\r\nurlpatterns = [\r\n    # ...\r\n    path('500/', handler500, name='500'),\r\n    # ...\r\n]\r\n```\r\n- The handler (`server_error`) renders the template: `return HttpResponseServerError(template.render())`\r\n- `render` in `allauth/socialaccount/templatetags/socialaccount.py` is called\r\n- `get_request_param` in `allauth/utils.py` is called in the line `next = get_request_param(request, 'next')`\r\n- `return request.POST.get(param) or request.GET.get(param, default)` in `get_request_param` causes an error because `request` is `None` in this case\r\n\r\n**Solution**:\r\n- Add a guard statement to the function `get_request_param` in `allauth/utils.py`\r\n- before a patch: Use a custom 500 handler instead of Django's default 500 handler\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2386", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2386/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2386/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2386/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2386", "id": 516873686, "node_id": "MDU6SXNzdWU1MTY4NzM2ODY=", "number": 2386, "title": "Logout via AJAX results in empty content", "user": {"login": "cassandra", "id": 274777, "node_id": "MDQ6VXNlcjI3NDc3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/274777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cassandra", "html_url": "https://github.com/cassandra", "followers_url": "https://api.github.com/users/cassandra/followers", "following_url": "https://api.github.com/users/cassandra/following{/other_user}", "gists_url": "https://api.github.com/users/cassandra/gists{/gist_id}", "starred_url": "https://api.github.com/users/cassandra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cassandra/subscriptions", "organizations_url": "https://api.github.com/users/cassandra/orgs", "repos_url": "https://api.github.com/users/cassandra/repos", "events_url": "https://api.github.com/users/cassandra/events{/privacy}", "received_events_url": "https://api.github.com/users/cassandra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-03T19:04:09Z", "updated_at": "2019-11-15T03:29:13Z", "closed_at": "2019-11-14T21:06:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had code that worked in v0.31.0 and not in v0.39.1 in terms of the response for the LogoutView from an AJAX request.  I realize that there was a change so that it now returns JSON instead of HTML, but what I am finding is that the JSON it returns is an empty dictionary.  Tracing through the code, I think I understand why.\r\n\r\n* In views.py:772:LogoutView, it calls _ajax_response() with only a request and response and no form or data argument.\r\n* In views.py:59 inside _ajax_response(), it calls the adapter.py:332:ajax_response() passing along the same empty form and data.\r\n* At adapter.py:341 is the place that would render the content of the response, but it is nested inside a conditional on there being a non-empty form.\r\n* In fact, the only way that the \"resp\" JSON can become non-empty is if \"form\" and/or \"data\" is non \"None\".\r\n* Thus, it seems like the LogoutView will always result in empty content in the AJAX context.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2385", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2385/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2385/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2385/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2385", "id": 516826988, "node_id": "MDU6SXNzdWU1MTY4MjY5ODg=", "number": 2385, "title": "Duplicate message being displayed to user in EmailView", "user": {"login": "scottwoodall", "id": 620454, "node_id": "MDQ6VXNlcjYyMDQ1NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/620454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottwoodall", "html_url": "https://github.com/scottwoodall", "followers_url": "https://api.github.com/users/scottwoodall/followers", "following_url": "https://api.github.com/users/scottwoodall/following{/other_user}", "gists_url": "https://api.github.com/users/scottwoodall/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottwoodall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottwoodall/subscriptions", "organizations_url": "https://api.github.com/users/scottwoodall/orgs", "repos_url": "https://api.github.com/users/scottwoodall/repos", "events_url": "https://api.github.com/users/scottwoodall/events{/privacy}", "received_events_url": "https://api.github.com/users/scottwoodall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-03T13:21:10Z", "updated_at": "2019-11-03T13:41:00Z", "closed_at": "2019-11-03T13:40:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working with adding/verifying/removing email addresses I was receiving duplicate messages being displayed back to the user. These lines of code seem to be applicable to this scenario:\r\n\r\n- https://github.com/pennersr/django-allauth/blob/416b5fb8ecb2a54139e992f67201b9b6038c54fa/allauth/account/views.py#L391\r\n- https://github.com/pennersr/django-allauth/blob/416b5fb8ecb2a54139e992f67201b9b6038c54fa/allauth/account/views.py#L431\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2383", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2383/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2383/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2383/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2383", "id": 514746727, "node_id": "MDU6SXNzdWU1MTQ3NDY3Mjc=", "number": 2383, "title": "dont sent any mail from server", "user": {"login": "AgentDaun", "id": 31507719, "node_id": "MDQ6VXNlcjMxNTA3NzE5", "avatar_url": "https://avatars3.githubusercontent.com/u/31507719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AgentDaun", "html_url": "https://github.com/AgentDaun", "followers_url": "https://api.github.com/users/AgentDaun/followers", "following_url": "https://api.github.com/users/AgentDaun/following{/other_user}", "gists_url": "https://api.github.com/users/AgentDaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/AgentDaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AgentDaun/subscriptions", "organizations_url": "https://api.github.com/users/AgentDaun/orgs", "repos_url": "https://api.github.com/users/AgentDaun/repos", "events_url": "https://api.github.com/users/AgentDaun/events{/privacy}", "received_events_url": "https://api.github.com/users/AgentDaun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T15:06:42Z", "updated_at": "2019-11-14T21:02:45Z", "closed_at": "2019-11-14T21:02:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's just don't send any emails, for example - change password.\r\n```\r\n\"\"\"\r\nDjango settings for bot project.\r\n\r\nGenerated by 'django-admin startproject' using Django 2.1.5.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/2.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/2.1/ref/settings/\r\n\"\"\"\r\n\r\nimport os\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = '67=x^x*fct-xxxxxxxxxxxxxxxxxxxxxxxxx*xqxnx6xxpxz8xd#x'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = False\r\n\r\nALLOWED_HOSTS = ['*', 'localhost', '0.0.0.0', '127.0.0.1', '192.168.0.121', '188.225.24.150']\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.sites',\r\n    'bux',\r\n    'allauth',\r\n    'allauth.account',\r\n    'allauth.socialaccount',  # Need coz {% load socialaccount %}\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'botEngine',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    # 'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\n\r\nROOT_URLCONF = 'bot.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [os.path.join(BASE_DIR, 'templates'), os.path.join(BASE_DIR, 'bux', 'templates') , os.path.join(BASE_DIR, 'templates', 'allauth'), os.path.join(BASE_DIR, 'templates')],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'bot.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\nLOGGING = {\r\n    'version': 1,\r\n    'disable_existing_loggers': False,\r\n    'formatters': {\r\n        'verbose': {\r\n            'format': ('%(asctime)s [%(process)d] [%(levelname)s] '\r\n                       'pathname=%(pathname)s lineno=%(lineno)s '\r\n                       'funcname=%(funcName)s %(message)s'),\r\n            'datefmt': '%Y-%m-%d %H:%M:%S'\r\n        },\r\n        'simple': {\r\n            'format': '%(levelname)s %(message)s'\r\n        }\r\n    },\r\n    'handlers': {\r\n        'null': {\r\n            'level': 'DEBUG',\r\n            'class': 'logging.NullHandler',\r\n        },\r\n        'console': {\r\n            'level': 'INFO',\r\n            'class': 'logging.StreamHandler',\r\n            'formatter': 'verbose'\r\n        }\r\n    },\r\n    'loggers': {\r\n        'django': {\r\n            'handlers': ['console'],\r\n            'level': 'DEBUG',\r\n            'propagate': True,\r\n        },\r\n        'django.request': {\r\n            'handlers': ['console'],\r\n            'level': 'DEBUG',\r\n            'propagate': False,\r\n        },\r\n    }\r\n}\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/2.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'Asia/Dubai'\r\n\r\n# USE_I18N = True\r\n\r\n# USE_L10N = True\r\n\r\n\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n\r\nSTATIC_URL =  '/static/'\r\nAUTH_USER_MODEL = 'botEngine.CustomUser'\r\nSTATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, 'static')\r\n]\r\nSTATIC_ROOT ='/var/www/html/static/'\r\n\r\nLOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'),)  # For use LOCALES\r\nSITE_ID = 1  # django-allauth needs .site django module. 1 = predefined[can change name in /admin page]\r\nSESSION_COOKIE_AGE = 60 * 60  # How many time people will be in session (60 seconds * 60 seconds = 60 minute)\r\nLANGUAGE_CODE = 'ru'\r\n\r\nAUTH_USER_MODEL = \"botEngine.CustomUser\"\r\nACCOUNT_EMAIL_REQUIRED = True\r\nACCOUNT_AUTHENTICATION_METHOD = \"username_email\"\r\nLOGIN_REDIRECT_URL = \"/tasks/list/\"  # After login\r\nLOGIN_URL = \"/accounts/login/\"  # @login_required redirect\r\n\r\n\r\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\nEMAIL_HOST = 'smtp.gmail.com'\r\nEMAIL_USE_TLS = True\r\nEMAIL_PORT = 587\r\nEMAIL_HOST_USER = 'xxxxxxxx@gmail.com'\r\nEMAIL_HOST_PASSWORD = 'xxxxxxxx'\r\n\r\nAUTHENTICATION_BACKENDS = (\r\n    'botEngine.backend.CustomModelBackend',\r\n    'allauth.account.auth_backends.AuthenticationBackend',  # Need for /admin login.\r\n)\r\n```\r\n\r\nWhen I try to use send_mail in the shell it's works perfectly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2382", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2382/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2382/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2382/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2382", "id": 513783388, "node_id": "MDU6SXNzdWU1MTM3ODMzODg=", "number": 2382, "title": "using {% url %} in {% provider_login_url  next=\"{% url %}\" %}", "user": {"login": "harem234", "id": 38382747, "node_id": "MDQ6VXNlcjM4MzgyNzQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/38382747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harem234", "html_url": "https://github.com/harem234", "followers_url": "https://api.github.com/users/harem234/followers", "following_url": "https://api.github.com/users/harem234/following{/other_user}", "gists_url": "https://api.github.com/users/harem234/gists{/gist_id}", "starred_url": "https://api.github.com/users/harem234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harem234/subscriptions", "organizations_url": "https://api.github.com/users/harem234/orgs", "repos_url": "https://api.github.com/users/harem234/repos", "events_url": "https://api.github.com/users/harem234/events{/privacy}", "received_events_url": "https://api.github.com/users/harem234/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-29T09:12:00Z", "updated_at": "2019-12-14T11:24:22Z", "closed_at": "2019-12-14T11:24:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "it is not possible to use next without hardcoding the url!\r\neven {% url 'someexample' as next %} won't parse: {% provider_login_url  next=\"{{ next }}\" %}", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2378", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2378/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2378/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2378/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2378", "id": 509762365, "node_id": "MDU6SXNzdWU1MDk3NjIzNjU=", "number": 2378, "title": "Trello Invalid scope When scope is list in url", "user": {"login": "latest-release", "id": 9945162, "node_id": "MDQ6VXNlcjk5NDUxNjI=", "avatar_url": "https://avatars1.githubusercontent.com/u/9945162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/latest-release", "html_url": "https://github.com/latest-release", "followers_url": "https://api.github.com/users/latest-release/followers", "following_url": "https://api.github.com/users/latest-release/following{/other_user}", "gists_url": "https://api.github.com/users/latest-release/gists{/gist_id}", "starred_url": "https://api.github.com/users/latest-release/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/latest-release/subscriptions", "organizations_url": "https://api.github.com/users/latest-release/orgs", "repos_url": "https://api.github.com/users/latest-release/repos", "events_url": "https://api.github.com/users/latest-release/events{/privacy}", "received_events_url": "https://api.github.com/users/latest-release/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-21T06:43:48Z", "updated_at": "2020-05-17T00:09:04Z", "closed_at": "2019-12-15T11:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Trello complains that the scope is invalid if it is like this\r\n`oauth_callback=http://d354750f.ngrok.io/accounts/trello/login/callback&scope=['read']&type=web_server&name=Trello&expiration=never`\r\n\r\nBut when I change the scope to\r\n\r\n`oauth_callback=http://d354750f.ngrok.io/accounts/trello/login/callback&scope=read&type=web_server&name=Trello&expiration=never`\r\n\r\nIt works pretty fine.\r\nIs this in django-allauth or it's a trello change that I need to make", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2377", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2377/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2377/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2377/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2377", "id": 509710603, "node_id": "MDU6SXNzdWU1MDk3MTA2MDM=", "number": 2377, "title": "Unicode normalization for username", "user": {"login": "getup8", "id": 4086934, "node_id": "MDQ6VXNlcjQwODY5MzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4086934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/getup8", "html_url": "https://github.com/getup8", "followers_url": "https://api.github.com/users/getup8/followers", "following_url": "https://api.github.com/users/getup8/following{/other_user}", "gists_url": "https://api.github.com/users/getup8/gists{/gist_id}", "starred_url": "https://api.github.com/users/getup8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/getup8/subscriptions", "organizations_url": "https://api.github.com/users/getup8/orgs", "repos_url": "https://api.github.com/users/getup8/repos", "events_url": "https://api.github.com/users/getup8/events{/privacy}", "received_events_url": "https://api.github.com/users/getup8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-21T03:28:19Z", "updated_at": "2019-12-13T20:46:17Z", "closed_at": "2019-12-13T20:46:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Django's sign up and user authentication forms, they use a custom field called `UsernameField` for the username which unicode-normalizes the username:\r\nhttps://github.com/django/django/blob/6c9778a58e4f680db180d4cc9dc5639d2ec1b40c/django/contrib/auth/forms.py#L62\r\n\r\n```python\r\nunicodedata.normalize('NFKC', super().to_python(value))\r\n```\r\n\r\nIt doesn't seem like this is currently implemented here, but wondering if it should / could be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2375", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2375/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2375/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2375/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2375", "id": 509039858, "node_id": "MDU6SXNzdWU1MDkwMzk4NTg=", "number": 2375, "title": "Norwegian translations could use some work", "user": {"login": "yhoiseth", "id": 8469540, "node_id": "MDQ6VXNlcjg0Njk1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/8469540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yhoiseth", "html_url": "https://github.com/yhoiseth", "followers_url": "https://api.github.com/users/yhoiseth/followers", "following_url": "https://api.github.com/users/yhoiseth/following{/other_user}", "gists_url": "https://api.github.com/users/yhoiseth/gists{/gist_id}", "starred_url": "https://api.github.com/users/yhoiseth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yhoiseth/subscriptions", "organizations_url": "https://api.github.com/users/yhoiseth/orgs", "repos_url": "https://api.github.com/users/yhoiseth/repos", "events_url": "https://api.github.com/users/yhoiseth/events{/privacy}", "received_events_url": "https://api.github.com/users/yhoiseth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-18T12:09:11Z", "updated_at": "2019-10-21T19:47:43Z", "closed_at": "2019-10-21T19:47:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'll make a pull request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2373", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2373/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2373/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2373/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2373", "id": 506667295, "node_id": "MDU6SXNzdWU1MDY2NjcyOTU=", "number": 2373, "title": "EmailAddress string raises exception when user does not exist", "user": {"login": "thenewguy", "id": 77731, "node_id": "MDQ6VXNlcjc3NzMx", "avatar_url": "https://avatars2.githubusercontent.com/u/77731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thenewguy", "html_url": "https://github.com/thenewguy", "followers_url": "https://api.github.com/users/thenewguy/followers", "following_url": "https://api.github.com/users/thenewguy/following{/other_user}", "gists_url": "https://api.github.com/users/thenewguy/gists{/gist_id}", "starred_url": "https://api.github.com/users/thenewguy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thenewguy/subscriptions", "organizations_url": "https://api.github.com/users/thenewguy/orgs", "repos_url": "https://api.github.com/users/thenewguy/repos", "events_url": "https://api.github.com/users/thenewguy/events{/privacy}", "received_events_url": "https://api.github.com/users/thenewguy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-14T13:51:30Z", "updated_at": "2019-12-15T13:13:39Z", "closed_at": "2019-12-15T13:13:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "EmailAddress string method needs to check that user is set before attemping to force it into the string\r\n\r\n```\r\n Traceback (most recent call last):\r\n   File \"/usr/lib/python2.7/logging/__init__.py\", line 851, in emit\r\n     msg = self.format(record)\r\n   File \"/usr/lib/python2.7/logging/__init__.py\", line 724, in format\r\n     return fmt.format(record)\r\n   File \"/usr/lib/python2.7/logging/__init__.py\", line 464, in format\r\n     record.message = record.getMessage()\r\n   File \"/usr/lib/python2.7/logging/__init__.py\", line 328, in getMessage\r\n     msg = msg % self.args\r\n   File \"/usr/local/lib/python2.7/dist-packages/django/db/models/base.py\", line 590, in __repr__\r\n     u = six.text_type(self)\r\n   File \"/usr/local/lib/python2.7/dist-packages/allauth/account/models.py\", line 40, in __str__\r\n     return \"%s (%s)\" % (self.email, self.user)\r\n   File \"/usr/local/lib/python2.7/dist-packages/django/db/models/fields/related_descriptors.py\", line 194, in __get__\r\n     \"%s has no %s.\" % (self.field.model.__name__, self.field.name)\r\n RelatedObjectDoesNotExist: EmailAddress has no user.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2372", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2372/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2372/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2372/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2372", "id": 506651739, "node_id": "MDU6SXNzdWU1MDY2NTE3Mzk=", "number": 2372, "title": "Allow Social Application secret key to be blank in admin", "user": {"login": "thenewguy", "id": 77731, "node_id": "MDQ6VXNlcjc3NzMx", "avatar_url": "https://avatars2.githubusercontent.com/u/77731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thenewguy", "html_url": "https://github.com/thenewguy", "followers_url": "https://api.github.com/users/thenewguy/followers", "following_url": "https://api.github.com/users/thenewguy/following{/other_user}", "gists_url": "https://api.github.com/users/thenewguy/gists{/gist_id}", "starred_url": "https://api.github.com/users/thenewguy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thenewguy/subscriptions", "organizations_url": "https://api.github.com/users/thenewguy/orgs", "repos_url": "https://api.github.com/users/thenewguy/repos", "events_url": "https://api.github.com/users/thenewguy/events{/privacy}", "received_events_url": "https://api.github.com/users/thenewguy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-14T13:24:37Z", "updated_at": "2019-12-15T12:00:49Z", "closed_at": "2019-12-15T12:00:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Connecting with ADFS does not require a secret key.  With older versions of ADFS it was ignored when a secret key was provided but not needed, so the admin could be set to anything, like \"this-key-is-not-used\".  However, the newest version of ADFS responds with an error when providing a secret key.\r\n\r\nHere is my ADFS allauth provider: https://github.com/thenewguy/django-allauth-adfs\r\n\r\nIt would be helpful to mark secret key on the SocialApplication model as blank=True.  Right now, secret key has to be stripped at the command line and the SocialApplication for adfs cannot be edited in the admin as a result.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2371", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2371/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2371/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2371/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2371", "id": 506279057, "node_id": "MDU6SXNzdWU1MDYyNzkwNTc=", "number": 2371, "title": "Social Network Login Failure: The domain of this URL isn't included", "user": {"login": "RayChao2016", "id": 29619273, "node_id": "MDQ6VXNlcjI5NjE5Mjcz", "avatar_url": "https://avatars0.githubusercontent.com/u/29619273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RayChao2016", "html_url": "https://github.com/RayChao2016", "followers_url": "https://api.github.com/users/RayChao2016/followers", "following_url": "https://api.github.com/users/RayChao2016/following{/other_user}", "gists_url": "https://api.github.com/users/RayChao2016/gists{/gist_id}", "starred_url": "https://api.github.com/users/RayChao2016/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RayChao2016/subscriptions", "organizations_url": "https://api.github.com/users/RayChao2016/orgs", "repos_url": "https://api.github.com/users/RayChao2016/repos", "events_url": "https://api.github.com/users/RayChao2016/events{/privacy}", "received_events_url": "https://api.github.com/users/RayChao2016/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-13T05:48:58Z", "updated_at": "2019-12-16T09:21:23Z", "closed_at": "2019-12-16T09:21:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\nI used django-allauth to login my website via Facebook.\r\nI did login with Facebook successfully from 2019/Aug., but I encountered \"Social Network Login Failure\" from this week.\r\nI searched several blogs and questions on stackoverflow, and didn't find a way to fix this.\r\n\r\nI added Code: {{ auth_error.code }}, Error: {{ auth_error.exception }} to show the error codes:\r\nHere is the result:\r\n\r\nCode: unknown \r\nError: Error retrieving access token: b'{\"error\":{\"message\":\"Can\\'t load URL: The domain of this URL isn\\'t included in the app\\'s domains. To be able to load this URL, add all domains and sub-domains of your app to the App Domains field in your app settings.\",\"type\":\"OAuthException\",\"code\":191,\"fbtrace_id\":\"xxxxxxxx\"}}'\r\n\r\nThis one is the same as my problem:\r\nhttps://stackoverflow.com/questions/55207178/social-network-login-failure-the-domain-of-this-url-isnt-included\r\n\r\nCan anyone give me some suggestions? thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2367", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2367/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2367/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2367/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2367", "id": 502417864, "node_id": "MDU6SXNzdWU1MDI0MTc4NjQ=", "number": 2367, "title": "Unable to send confirmation emails", "user": {"login": "piraka9011", "id": 16828657, "node_id": "MDQ6VXNlcjE2ODI4NjU3", "avatar_url": "https://avatars2.githubusercontent.com/u/16828657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piraka9011", "html_url": "https://github.com/piraka9011", "followers_url": "https://api.github.com/users/piraka9011/followers", "following_url": "https://api.github.com/users/piraka9011/following{/other_user}", "gists_url": "https://api.github.com/users/piraka9011/gists{/gist_id}", "starred_url": "https://api.github.com/users/piraka9011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piraka9011/subscriptions", "organizations_url": "https://api.github.com/users/piraka9011/orgs", "repos_url": "https://api.github.com/users/piraka9011/repos", "events_url": "https://api.github.com/users/piraka9011/events{/privacy}", "received_events_url": "https://api.github.com/users/piraka9011/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-04T04:25:51Z", "updated_at": "2019-10-10T22:51:01Z", "closed_at": "2019-10-10T22:51:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a basic setup of Django allauth and rest-auth. I am trying to run the basic `/rest-auth/registration` out of the box.\r\n\r\nThe configuration works locally, however, when I deploy it to my API using [Zappa](https://github.com/Miserlou/Zappa/), I am unable to do so.\r\n\r\nWhen creating a new user, I get the following error (with stack trace):\r\n```\r\n[1570162978496] [ERROR] 2019-10-04T04:22:58.414Z c60afbf6-d74a-45f1-ae0b-d131a21b77a6 Internal Server Error: /v1/rest-auth/registration/\r\nTraceback (most recent call last):\r\n  File \"/var/task/django/core/handlers/exception.py\", line 34, in inner\r\n  response = get_response(request)\r\n  File \"/var/task/django/core/handlers/base.py\", line 115, in _get_response\r\n  response = self.process_exception_by_middleware(e, request)\r\n  File \"/var/task/django/core/handlers/base.py\", line 113, in _get_response\r\n  response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/var/task/django/views/decorators/csrf.py\", line 54, in wrapped_view\r\n  return view_func(*args, **kwargs)\r\n  File \"/var/task/django/views/generic/base.py\", line 71, in view\r\n  return self.dispatch(request, *args, **kwargs)\r\n  File \"/var/task/django/utils/decorators.py\", line 45, in _wrapper\r\n  return bound_method(*args, **kwargs)\r\n  File \"/var/task/django/views/decorators/debug.py\", line 76, in sensitive_post_parameters_wrapper\r\n  return view(request, *args, **kwargs)\r\n  File \"/var/task/rest_auth/registration/views.py\", line 46, in dispatch\r\n  return super(RegisterView, self).dispatch(*args, **kwargs)\r\n  File \"/var/task/rest_framework/views.py\", line 505, in dispatch\r\n  response = self.handle_exception(exc)\r\n  File \"/var/task/rest_framework/views.py\", line 465, in handle_exception\r\n  self.raise_uncaught_exception(exc)\r\n  File \"/var/task/rest_framework/views.py\", line 476, in raise_uncaught_exception\r\n  raise exc\r\n  File \"/var/task/rest_framework/views.py\", line 502, in dispatch\r\n  response = handler(request, *args, **kwargs)\r\n  File \"/var/task/rest_framework/generics.py\", line 190, in post\r\n  return self.create(request, *args, **kwargs)\r\n  File \"/var/task/rest_auth/registration/views.py\", line 65, in create\r\n  user = self.perform_create(serializer)\r\n  File \"/var/task/rest_auth/registration/views.py\", line 81, in perform_create\r\n  None)\r\n  File \"/var/task/allauth/account/utils.py\", line 181, in complete_signup\r\n  signal_kwargs=signal_kwargs)\r\n  File \"/var/task/allauth/account/utils.py\", line 141, in perform_login\r\n  send_email_confirmation(request, user, signup=signup)\r\n  File \"/var/task/allauth/account/utils.py\", line 312, in send_email_confirmation\r\n  signup=signup)\r\n  File \"/var/task/allauth/account/models.py\", line 60, in send_confirmation\r\n  confirmation.send(request, signup=signup)\r\n  File \"/var/task/allauth/account/models.py\", line 166, in send\r\n  get_adapter(request).send_confirmation_mail(request, self, signup)\r\n  File \"/var/task/allauth/account/adapter.py\", line 450, in send_confirmation_mail\r\n  ctx)\r\n  File \"/var/task/allauth/account/adapter.py\", line 137, in send_mail\r\n  msg.send()\r\n  File \"/var/task/django/core/mail/message.py\", line 291, in send\r\n  return self.get_connection(fail_silently).send_messages([self])\r\n  File \"/var/task/django/core/mail/backends/smtp.py\", line 103, in send_messages\r\n  new_conn_created = self.open()\r\n  File \"/var/task/django/core/mail/backends/smtp.py\", line 63, in open\r\n  self.connection = self.connection_class(self.host, self.port, **connection_params)\r\n  File \"/var/lang/lib/python3.6/smtplib.py\", line 1031, in __init__\r\n  source_address)\r\n  File \"/var/lang/lib/python3.6/smtplib.py\", line 251, in __init__\r\n  (code, msg) = self.connect(host, port)\r\n  File \"/var/lang/lib/python3.6/smtplib.py\", line 336, in connect\r\n  self.sock = self._get_socket(host, port, self.timeout)\r\n  File \"/var/lang/lib/python3.6/smtplib.py\", line 1037, in _get_socket\r\n  self.source_address)\r\n  File \"/var/lang/lib/python3.6/socket.py\", line 724, in create_connection\r\n  raise err\r\n  File \"/var/lang/lib/python3.6/socket.py\", line 708, in create_connection\r\n  sock = socket(af, socktype, proto)\r\n  File \"/var/lang/lib/python3.6/socket.py\", line 144, in __init__\r\n  _socket.socket.__init__(self, family, type, proto, fileno)\r\nOSError: [Errno 97] Address family not supported by protocol\r\n```\r\n\r\nAny suggestions? I tested to make sure my email settings were correct using this [tool](https://www.gmass.co/smtp-test#).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2363", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2363/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2363/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2363/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2363", "id": 498994411, "node_id": "MDU6SXNzdWU0OTg5OTQ0MTE=", "number": 2363, "title": "Does it support AzureAD?", "user": {"login": "ranvijay-sachan", "id": 9864887, "node_id": "MDQ6VXNlcjk4NjQ4ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9864887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranvijay-sachan", "html_url": "https://github.com/ranvijay-sachan", "followers_url": "https://api.github.com/users/ranvijay-sachan/followers", "following_url": "https://api.github.com/users/ranvijay-sachan/following{/other_user}", "gists_url": "https://api.github.com/users/ranvijay-sachan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranvijay-sachan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranvijay-sachan/subscriptions", "organizations_url": "https://api.github.com/users/ranvijay-sachan/orgs", "repos_url": "https://api.github.com/users/ranvijay-sachan/repos", "events_url": "https://api.github.com/users/ranvijay-sachan/events{/privacy}", "received_events_url": "https://api.github.com/users/ranvijay-sachan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-26T16:34:43Z", "updated_at": "2019-10-23T18:32:53Z", "closed_at": "2019-10-23T18:32:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2362", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2362/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2362/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2362/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2362", "id": 498304811, "node_id": "MDU6SXNzdWU0OTgzMDQ4MTE=", "number": 2362, "title": "Support for Sign in with Apple", "user": {"login": "oisinbyrne", "id": 10655363, "node_id": "MDQ6VXNlcjEwNjU1MzYz", "avatar_url": "https://avatars3.githubusercontent.com/u/10655363?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oisinbyrne", "html_url": "https://github.com/oisinbyrne", "followers_url": "https://api.github.com/users/oisinbyrne/followers", "following_url": "https://api.github.com/users/oisinbyrne/following{/other_user}", "gists_url": "https://api.github.com/users/oisinbyrne/gists{/gist_id}", "starred_url": "https://api.github.com/users/oisinbyrne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oisinbyrne/subscriptions", "organizations_url": "https://api.github.com/users/oisinbyrne/orgs", "repos_url": "https://api.github.com/users/oisinbyrne/repos", "events_url": "https://api.github.com/users/oisinbyrne/events{/privacy}", "received_events_url": "https://api.github.com/users/oisinbyrne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-25T13:57:03Z", "updated_at": "2020-03-12T11:42:36Z", "closed_at": "2019-10-11T13:23:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Describe the feature**\r\nAre there any plans for 'Sign in with Apple' to be added to the list of providers supported by django-allauth? Apple REST API: https://developer.apple.com/documentation/signinwithapplerestapi\r\n\r\n**Additional context**\r\nThe Apple REST API is based on OAuth 2.0 and OpenID Connect, however they use a public/private key client authentication method instead of the typical client secret. New apps uploaded to the iOS App Store with 3rd party social logins are now required to include Sign in with Apple. Existing apps have until April 2020", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2351", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2351/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2351/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2351/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2351", "id": 487160315, "node_id": "MDU6SXNzdWU0ODcxNjAzMTU=", "number": 2351, "title": "OpenID Installation issue", "user": {"login": "stuck1233333", "id": 40720309, "node_id": "MDQ6VXNlcjQwNzIwMzA5", "avatar_url": "https://avatars0.githubusercontent.com/u/40720309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuck1233333", "html_url": "https://github.com/stuck1233333", "followers_url": "https://api.github.com/users/stuck1233333/followers", "following_url": "https://api.github.com/users/stuck1233333/following{/other_user}", "gists_url": "https://api.github.com/users/stuck1233333/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuck1233333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuck1233333/subscriptions", "organizations_url": "https://api.github.com/users/stuck1233333/orgs", "repos_url": "https://api.github.com/users/stuck1233333/repos", "events_url": "https://api.github.com/users/stuck1233333/events{/privacy}", "received_events_url": "https://api.github.com/users/stuck1233333/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-29T20:27:06Z", "updated_at": "2019-12-14T11:25:04Z", "closed_at": "2019-12-14T11:25:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Under settings.py, if I add 'allauth.socialaccount.providers.openid' to INSTALLED_APPS,\r\nI get the following error: \r\n\r\nModuleNotFoundError: No module named 'allauth.socialaccount.providers.openidcorsheaders'\r\n\r\nAny recommendations?\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2350", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2350/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2350/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2350/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2350", "id": 484527527, "node_id": "MDU6SXNzdWU0ODQ1Mjc1Mjc=", "number": 2350, "title": "Twitch Social Network Login Failure", "user": {"login": "zimmermannpl", "id": 14226241, "node_id": "MDQ6VXNlcjE0MjI2MjQx", "avatar_url": "https://avatars2.githubusercontent.com/u/14226241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zimmermannpl", "html_url": "https://github.com/zimmermannpl", "followers_url": "https://api.github.com/users/zimmermannpl/followers", "following_url": "https://api.github.com/users/zimmermannpl/following{/other_user}", "gists_url": "https://api.github.com/users/zimmermannpl/gists{/gist_id}", "starred_url": "https://api.github.com/users/zimmermannpl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zimmermannpl/subscriptions", "organizations_url": "https://api.github.com/users/zimmermannpl/orgs", "repos_url": "https://api.github.com/users/zimmermannpl/repos", "events_url": "https://api.github.com/users/zimmermannpl/events{/privacy}", "received_events_url": "https://api.github.com/users/zimmermannpl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-23T13:21:00Z", "updated_at": "2019-12-16T12:10:56Z", "closed_at": "2019-12-14T11:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "0.39.1\r\n\r\n![image](https://user-images.githubusercontent.com/14226241/63595581-90c59400-c5b9-11e9-982e-dcc91fb3637b.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2348", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2348/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2348/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2348/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2348", "id": 483684019, "node_id": "MDU6SXNzdWU0ODM2ODQwMTk=", "number": 2348, "title": "Twitch Kraken API ", "user": {"login": "JayCarney", "id": 3337242, "node_id": "MDQ6VXNlcjMzMzcyNDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3337242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JayCarney", "html_url": "https://github.com/JayCarney", "followers_url": "https://api.github.com/users/JayCarney/followers", "following_url": "https://api.github.com/users/JayCarney/following{/other_user}", "gists_url": "https://api.github.com/users/JayCarney/gists{/gist_id}", "starred_url": "https://api.github.com/users/JayCarney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JayCarney/subscriptions", "organizations_url": "https://api.github.com/users/JayCarney/orgs", "repos_url": "https://api.github.com/users/JayCarney/repos", "events_url": "https://api.github.com/users/JayCarney/events{/privacy}", "received_events_url": "https://api.github.com/users/JayCarney/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-21T22:36:59Z", "updated_at": "2019-12-15T11:54:44Z", "closed_at": "2019-12-15T11:54:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Noticed the repo's been updated to no longer use the twitch kraken API, but the version of the package in pypi doesn't have these changes. [Deprecated kraken API update from Twitch](https://discuss.dev.twitch.tv/t/change-in-access-to-deprecated-kraken-twitch-apis/22241)\r\n\r\nAugust 21 2019 - Twitch test breaking the existing behavior\r\nAugust 22 2019 - Planned 24hr test that will break the API again\r\n\r\nNot sure what their real cut-off date is for the API, but looks like just publishing a new release should move over to the new API", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2345", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2345/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2345/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2345/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2345", "id": 482589675, "node_id": "MDU6SXNzdWU0ODI1ODk2NzU=", "number": 2345, "title": "Can allauth refer to another allauth provider?", "user": {"login": "groundswel", "id": 36755084, "node_id": "MDQ6VXNlcjM2NzU1MDg0", "avatar_url": "https://avatars0.githubusercontent.com/u/36755084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/groundswel", "html_url": "https://github.com/groundswel", "followers_url": "https://api.github.com/users/groundswel/followers", "following_url": "https://api.github.com/users/groundswel/following{/other_user}", "gists_url": "https://api.github.com/users/groundswel/gists{/gist_id}", "starred_url": "https://api.github.com/users/groundswel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/groundswel/subscriptions", "organizations_url": "https://api.github.com/users/groundswel/orgs", "repos_url": "https://api.github.com/users/groundswel/repos", "events_url": "https://api.github.com/users/groundswel/events{/privacy}", "received_events_url": "https://api.github.com/users/groundswel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-20T00:38:37Z", "updated_at": "2019-12-13T20:44:44Z", "closed_at": "2019-12-13T20:44:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can one allauth installation refer to another allauth provider? This will allow to break up a monolithic django application to multiple micro services. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2341", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2341/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2341/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2341/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2341", "id": 480675585, "node_id": "MDU6SXNzdWU0ODA2NzU1ODU=", "number": 2341, "title": "Password Reset form exposes registered E-Mails", "user": {"login": "BernhardPosselt", "id": 195053, "node_id": "MDQ6VXNlcjE5NTA1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/195053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BernhardPosselt", "html_url": "https://github.com/BernhardPosselt", "followers_url": "https://api.github.com/users/BernhardPosselt/followers", "following_url": "https://api.github.com/users/BernhardPosselt/following{/other_user}", "gists_url": "https://api.github.com/users/BernhardPosselt/gists{/gist_id}", "starred_url": "https://api.github.com/users/BernhardPosselt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BernhardPosselt/subscriptions", "organizations_url": "https://api.github.com/users/BernhardPosselt/orgs", "repos_url": "https://api.github.com/users/BernhardPosselt/repos", "events_url": "https://api.github.com/users/BernhardPosselt/events{/privacy}", "received_events_url": "https://api.github.com/users/BernhardPosselt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-14T13:21:04Z", "updated_at": "2019-08-29T21:10:32Z", "closed_at": "2019-08-29T21:10:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current reset form tells you if an address does not exist which is problematic if you are using your E-Mail to log in. By default you should get a message that an E-Mail was sent to that address regardless if the user exists or doesn't.\r\n\r\nWould you be open for accepting a pull request for this issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2340", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2340/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2340/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2340/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2340", "id": 480058637, "node_id": "MDU6SXNzdWU0ODAwNTg2Mzc=", "number": 2340, "title": "Change user Group after successful email confirmation", "user": {"login": "erev0s", "id": 12457993, "node_id": "MDQ6VXNlcjEyNDU3OTkz", "avatar_url": "https://avatars1.githubusercontent.com/u/12457993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erev0s", "html_url": "https://github.com/erev0s", "followers_url": "https://api.github.com/users/erev0s/followers", "following_url": "https://api.github.com/users/erev0s/following{/other_user}", "gists_url": "https://api.github.com/users/erev0s/gists{/gist_id}", "starred_url": "https://api.github.com/users/erev0s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erev0s/subscriptions", "organizations_url": "https://api.github.com/users/erev0s/orgs", "repos_url": "https://api.github.com/users/erev0s/repos", "events_url": "https://api.github.com/users/erev0s/events{/privacy}", "received_events_url": "https://api.github.com/users/erev0s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-13T09:40:31Z", "updated_at": "2019-08-15T09:31:35Z", "closed_at": "2019-08-15T09:31:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking into on how can i move a user to a different group after there is a successful confirmation of the email used. \r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2331", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2331/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2331/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2331/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2331", "id": 470145972, "node_id": "MDU6SXNzdWU0NzAxNDU5NzI=", "number": 2331, "title": "Map 'properties' is allowed not to exist as user information in social login user.", "user": {"login": "TimelyManner", "id": 7133197, "node_id": "MDQ6VXNlcjcxMzMxOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7133197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimelyManner", "html_url": "https://github.com/TimelyManner", "followers_url": "https://api.github.com/users/TimelyManner/followers", "following_url": "https://api.github.com/users/TimelyManner/following{/other_user}", "gists_url": "https://api.github.com/users/TimelyManner/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimelyManner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimelyManner/subscriptions", "organizations_url": "https://api.github.com/users/TimelyManner/orgs", "repos_url": "https://api.github.com/users/TimelyManner/repos", "events_url": "https://api.github.com/users/TimelyManner/events{/privacy}", "received_events_url": "https://api.github.com/users/TimelyManner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-19T05:35:38Z", "updated_at": "2019-12-14T11:27:41Z", "closed_at": "2019-12-14T11:27:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Map 'properties' is allowed not to exist as user information in a social login. I've experienced this case so for a while some users were abandoned ever suffering from the unavailability for Kakao social login.\r\n\r\nhttps://github.com/pennersr/django-allauth/blob/543289e0231244a1a64ed0699470956c396ad68f/allauth/socialaccount/providers/kakao/provider.py#L29\r\n\r\nThis issue has been recognized by the provider, and is guided to use the latest provider's API.  But I think some handling code is still needed for compatibility for the old version of that API.  \r\n\r\nI suggest the changed lines of code below can fix this issue. \r\n\r\n`        if 'properties' in data:\r\n            nickname = data['properties'].get('nickname')\r\n        else:   \r\n            nickname = None`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2327", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2327/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2327/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2327/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2327", "id": 466840136, "node_id": "MDU6SXNzdWU0NjY4NDAxMzY=", "number": 2327, "title": "Greek locale", "user": {"login": "TsimpDim", "id": 26444315, "node_id": "MDQ6VXNlcjI2NDQ0MzE1", "avatar_url": "https://avatars0.githubusercontent.com/u/26444315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TsimpDim", "html_url": "https://github.com/TsimpDim", "followers_url": "https://api.github.com/users/TsimpDim/followers", "following_url": "https://api.github.com/users/TsimpDim/following{/other_user}", "gists_url": "https://api.github.com/users/TsimpDim/gists{/gist_id}", "starred_url": "https://api.github.com/users/TsimpDim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TsimpDim/subscriptions", "organizations_url": "https://api.github.com/users/TsimpDim/orgs", "repos_url": "https://api.github.com/users/TsimpDim/repos", "events_url": "https://api.github.com/users/TsimpDim/events{/privacy}", "received_events_url": "https://api.github.com/users/TsimpDim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-11T11:40:35Z", "updated_at": "2019-12-15T11:55:39Z", "closed_at": "2019-12-15T11:55:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there, we are using `django-allauth` on our project and it is really helpful.\r\n\r\nHowever, we want to use the Greek locale and as of now it seems that the translation (and the whole `.po` file itself) is really sloppy. \r\n\r\nWe already translated `django-rest-auth` so it would be of great help if we translated the `el` locale anew.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2322", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2322/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2322/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2322/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2322", "id": 462730796, "node_id": "MDU6SXNzdWU0NjI3MzA3OTY=", "number": 2322, "title": "Soundcloud no longer uses apps", "user": {"login": "morenoh149", "id": 587438, "node_id": "MDQ6VXNlcjU4NzQzOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/587438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/morenoh149", "html_url": "https://github.com/morenoh149", "followers_url": "https://api.github.com/users/morenoh149/followers", "following_url": "https://api.github.com/users/morenoh149/following{/other_user}", "gists_url": "https://api.github.com/users/morenoh149/gists{/gist_id}", "starred_url": "https://api.github.com/users/morenoh149/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/morenoh149/subscriptions", "organizations_url": "https://api.github.com/users/morenoh149/orgs", "repos_url": "https://api.github.com/users/morenoh149/repos", "events_url": "https://api.github.com/users/morenoh149/events{/privacy}", "received_events_url": "https://api.github.com/users/morenoh149/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 775887513, "node_id": "MDU6TGFiZWw3NzU4ODc1MTM=", "url": "https://api.github.com/repos/pennersr/django-allauth/labels/Help%20wanted", "name": "Help wanted", "color": "7bf2ba", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-01T13:58:41Z", "updated_at": "2020-08-13T15:26:38Z", "closed_at": "2020-08-13T15:26:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following the link in the all-auth docs shows message from Soundcloud.\r\n\r\n```\r\nSoundCloud Application Registration\r\nDue to the high amount of requests recently received, we will no longer be processing API application requests at this time. We are working to re-evaluate our process to make it more efficient.\r\n```\r\nhttps://docs.google.com/forms/d/e/1FAIpQLSfNxc82RJuzC0DnISat7n4H-G7IsPQIdaMpe202iiHZEoso9w/closedform\r\n\r\nshould all-auth change it's soundcloud provider code to use the http api? https://developers.soundcloud.com/docs/api/guide", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2321", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2321/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2321/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2321/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2321", "id": 462286866, "node_id": "MDU6SXNzdWU0NjIyODY4NjY=", "number": 2321, "title": " cannot import name 'ugettext_lazy' from 'allauth.compat'", "user": {"login": "TheGhostDevlopper", "id": 38377774, "node_id": "MDQ6VXNlcjM4Mzc3Nzc0", "avatar_url": "https://avatars0.githubusercontent.com/u/38377774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheGhostDevlopper", "html_url": "https://github.com/TheGhostDevlopper", "followers_url": "https://api.github.com/users/TheGhostDevlopper/followers", "following_url": "https://api.github.com/users/TheGhostDevlopper/following{/other_user}", "gists_url": "https://api.github.com/users/TheGhostDevlopper/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheGhostDevlopper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheGhostDevlopper/subscriptions", "organizations_url": "https://api.github.com/users/TheGhostDevlopper/orgs", "repos_url": "https://api.github.com/users/TheGhostDevlopper/repos", "events_url": "https://api.github.com/users/TheGhostDevlopper/events{/privacy}", "received_events_url": "https://api.github.com/users/TheGhostDevlopper/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-29T09:54:57Z", "updated_at": "2019-12-15T12:01:22Z", "closed_at": "2019-12-15T12:01:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi ,\r\nI am using the exemple of the doc but I have this error .\r\n\r\nFile \"/usr/local/lib/python3.7/site-packages/django/apps/config.py\", line 116, in create\r\n    mod = import_module(mod_path)\r\n  File \"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/macbook/Downloads/django-allauth-master/example/example/demo/apps.py\", line 4, in <module>\r\n    from allauth.compat import ugettext_lazy as _\r\nImportError: cannot import name 'ugettext_lazy' from 'allauth.compat' (/usr/local/lib/python3.7/site-packages/allauth/compat.py)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2319", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2319/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2319/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2319/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2319", "id": 461069602, "node_id": "MDU6SXNzdWU0NjEwNjk2MDI=", "number": 2319, "title": "OAuth 1 callback URIs seem to ignore settings.ACCOUNT_DEFAULT_HTTP_PROTOCOL", "user": {"login": "pacesm", "id": 4050019, "node_id": "MDQ6VXNlcjQwNTAwMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/4050019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pacesm", "html_url": "https://github.com/pacesm", "followers_url": "https://api.github.com/users/pacesm/followers", "following_url": "https://api.github.com/users/pacesm/following{/other_user}", "gists_url": "https://api.github.com/users/pacesm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pacesm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pacesm/subscriptions", "organizations_url": "https://api.github.com/users/pacesm/orgs", "repos_url": "https://api.github.com/users/pacesm/repos", "events_url": "https://api.github.com/users/pacesm/events{/privacy}", "received_events_url": "https://api.github.com/users/pacesm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-26T16:28:22Z", "updated_at": "2019-07-09T18:58:34Z", "closed_at": "2019-07-09T18:58:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\nThe OAuth1 renders absolute callback URLs using the django request ignoring the `settings.ACCOUNT_DEFAULT_HTTP_PROTOCOL` configuration.\r\n\r\nsee https://github.com/pennersr/django-allauth/blob/f70cb3d622f992f15fe9b57098e0b328445b664e/allauth/socialaccount/providers/oauth/client.py#L71\r\n\r\nwhile the OAuth2 callbacks are constructed differently \r\n\r\nhttps://github.com/pennersr/django-allauth/blob/f70cb3d622f992f15fe9b57098e0b328445b664e/allauth/utils.py#L259\r\n\r\nThis leads to inconsistent behavior when running the service behind a reverse proxy. The a OAuth2 use HTTPS as configured in the settings while OAuth1 uses HTTP.\r\n\r\nIt seems to me that both providers should use the same utility method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2316", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2316/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2316/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2316/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2316", "id": 460368900, "node_id": "MDU6SXNzdWU0NjAzNjg5MDA=", "number": 2316, "title": "How to validate extra field of custom user signup", "user": {"login": "gonzaloamadio", "id": 1005027, "node_id": "MDQ6VXNlcjEwMDUwMjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1005027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gonzaloamadio", "html_url": "https://github.com/gonzaloamadio", "followers_url": "https://api.github.com/users/gonzaloamadio/followers", "following_url": "https://api.github.com/users/gonzaloamadio/following{/other_user}", "gists_url": "https://api.github.com/users/gonzaloamadio/gists{/gist_id}", "starred_url": "https://api.github.com/users/gonzaloamadio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gonzaloamadio/subscriptions", "organizations_url": "https://api.github.com/users/gonzaloamadio/orgs", "repos_url": "https://api.github.com/users/gonzaloamadio/repos", "events_url": "https://api.github.com/users/gonzaloamadio/events{/privacy}", "received_events_url": "https://api.github.com/users/gonzaloamadio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-25T11:30:54Z", "updated_at": "2019-07-06T08:33:32Z", "closed_at": "2019-07-06T08:33:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using allauth along with django-rest-auth, because I am using django to build an API. So all my process are requests, no django website.\r\n\r\nI have my user that has an extra field user_type, and it is a required field for the signup.\r\nSo I have overridden the ACCOUNT_ADDAPTER like this\r\n\r\nclass CustomUserAccountAdapter(DefaultAccountAdapter):                 \r\n    \"\"\"Override of save method of django-allauth.                      \r\n                                                                       \r\n    As we have an extra field that is required, and we need to save    \r\n    when we register a new user, we need to override the functionality \r\n    of the DefaultAccountAdapter.                                      \r\n    \"\"\"                                                                \r\n                                                                       \r\n    def save_user(self, request, user, form, commit=True):             \r\n        \"\"\"                                                            \r\n        Saves a new `User` instance using information provided in the  \r\n        signup form.                                                   \r\n        \"\"\"                                                            \r\n        utype = request.data.get('user_type', '')                               \r\n        # As the user_type is required, check it                       \r\n        if not utype:                                                       \r\n            raise ValueError(\"User Type is required\")                  \r\n        user = super().save_user(request, user, form, False)           \r\n        user.user_type = utype                                         \r\n        user.save()                                                    \r\n        return user                                                    \r\n\r\nBut I think it is not the correct way of raising the error, as it fails with the ValueError. And it is not the proper way of getting the response on my API. I should get a Response and not an Exception", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2315", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2315/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2315/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2315/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2315", "id": 459728551, "node_id": "MDU6SXNzdWU0NTk3Mjg1NTE=", "number": 2315, "title": "[apple] Any plans to include Apple's new \"Sign In with Apple\"?", "user": {"login": "eillarra", "id": 514589, "node_id": "MDQ6VXNlcjUxNDU4OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/514589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eillarra", "html_url": "https://github.com/eillarra", "followers_url": "https://api.github.com/users/eillarra/followers", "following_url": "https://api.github.com/users/eillarra/following{/other_user}", "gists_url": "https://api.github.com/users/eillarra/gists{/gist_id}", "starred_url": "https://api.github.com/users/eillarra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eillarra/subscriptions", "organizations_url": "https://api.github.com/users/eillarra/orgs", "repos_url": "https://api.github.com/users/eillarra/repos", "events_url": "https://api.github.com/users/eillarra/events{/privacy}", "received_events_url": "https://api.github.com/users/eillarra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-24T07:16:25Z", "updated_at": "2019-08-05T14:39:57Z", "closed_at": "2019-06-27T20:30:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems it has been designed using OAuth and open standards... so we might be able to include it.\r\n\r\n> The Sign In with Apple REST API is a web service that connects you to Apple's authentication servers. Use this service to onboard new users quickly and securely, allow them to log into your website with their Apple ID, and verify a user session with two-factor authentication.\r\n\r\nReferences:\r\n- <https://developer.apple.com/documentation/signinwithapplerestapi>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2313", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2313/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2313/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2313/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2313", "id": 458851520, "node_id": "MDU6SXNzdWU0NTg4NTE1MjA=", "number": 2313, "title": "Global settings not found", "user": {"login": "amardesi", "id": 5936451, "node_id": "MDQ6VXNlcjU5MzY0NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5936451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amardesi", "html_url": "https://github.com/amardesi", "followers_url": "https://api.github.com/users/amardesi/followers", "following_url": "https://api.github.com/users/amardesi/following{/other_user}", "gists_url": "https://api.github.com/users/amardesi/gists{/gist_id}", "starred_url": "https://api.github.com/users/amardesi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amardesi/subscriptions", "organizations_url": "https://api.github.com/users/amardesi/orgs", "repos_url": "https://api.github.com/users/amardesi/repos", "events_url": "https://api.github.com/users/amardesi/events{/privacy}", "received_events_url": "https://api.github.com/users/amardesi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-20T20:11:24Z", "updated_at": "2019-06-20T21:45:33Z", "closed_at": "2019-06-20T21:45:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django version: 1.11.20\r\n\r\nI've just installed django-allauth. I'm using the **orcid** provider. I'd like to use the sandbox.orcid.org endpoint, but nothing in `SOCIALACCOUNT_PROVIDERS` is being found, so it's defaulting to default domain orcid.org. \r\n\r\nThe issue is that **none** of my `django.conf.settings` have been brought into app_settings\r\n\r\n```\r\n(Pdb) p app_settings.__dict__\r\n{'prefix': 'SOCIALACCOUNT_', '__name__': 'allauth.socialaccount.app_settings'}\r\n```\r\n\r\nI'm not sure why the app doesn't see my global settings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2312", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2312/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2312/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2312/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2312", "id": 455537118, "node_id": "MDU6SXNzdWU0NTU1MzcxMTg=", "number": 2312, "title": "How to get vanityName for linkedin oauth2?", "user": {"login": "csvwolf", "id": 8280645, "node_id": "MDQ6VXNlcjgyODA2NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8280645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csvwolf", "html_url": "https://github.com/csvwolf", "followers_url": "https://api.github.com/users/csvwolf/followers", "following_url": "https://api.github.com/users/csvwolf/following{/other_user}", "gists_url": "https://api.github.com/users/csvwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/csvwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csvwolf/subscriptions", "organizations_url": "https://api.github.com/users/csvwolf/orgs", "repos_url": "https://api.github.com/users/csvwolf/repos", "events_url": "https://api.github.com/users/csvwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/csvwolf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-13T05:07:53Z", "updated_at": "2019-06-27T20:30:45Z", "closed_at": "2019-06-27T20:30:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I set provider as:\r\n\r\n```\r\n    'linkedin_oauth2': {\r\n        'SCOPE': ['r_emailaddress', 'r_liteprofile', 'r_basicprofile'],\r\n        'PROFILE_FIELDS': [\r\n            'id',\r\n            'firstName',\r\n            'lastName',\r\n            'vanityName',\r\n            'picture-url',\r\n            'public-profile-url',\r\n            'profilePicture(displayImage~:playableStreams)',\r\n        ],\r\n        'PROFILEPICTURE': {'display_size_w_h': (400, 400.0)},\r\n    },\r\n```\r\n\r\nBut can't get the vanityName", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2311", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2311/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2311/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2311/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2311", "id": 454077487, "node_id": "MDU6SXNzdWU0NTQwNzc0ODc=", "number": 2311, "title": "Small mistake in WeixinOAuth2ClientMixin", "user": {"login": "dperetti", "id": 845612, "node_id": "MDQ6VXNlcjg0NTYxMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/845612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dperetti", "html_url": "https://github.com/dperetti", "followers_url": "https://api.github.com/users/dperetti/followers", "following_url": "https://api.github.com/users/dperetti/following{/other_user}", "gists_url": "https://api.github.com/users/dperetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dperetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dperetti/subscriptions", "organizations_url": "https://api.github.com/users/dperetti/orgs", "repos_url": "https://api.github.com/users/dperetti/repos", "events_url": "https://api.github.com/users/dperetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dperetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-10T09:25:02Z", "updated_at": "2019-12-14T11:30:11Z", "closed_at": "2019-12-14T11:30:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "`request`, not `self.request` should be used in `WeixinOAuth2ClientMixin.get_client()`.\r\nIt works, but it's inconsistent and requires a workaround if you need to use the mixin in a context where `self.request` is not set.\r\nhttps://github.com/pennersr/django-allauth/blob/41f84f5530b75431cfd4cf2b89cd805ced009e7d/allauth/socialaccount/providers/weixin/views.py#L56", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2310", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2310/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2310/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2310/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2310", "id": 453823212, "node_id": "MDU6SXNzdWU0NTM4MjMyMTI=", "number": 2310, "title": "Socialaccount: App not being set on SocialToken", "user": {"login": "emilepetrone", "id": 202745, "node_id": "MDQ6VXNlcjIwMjc0NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/202745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilepetrone", "html_url": "https://github.com/emilepetrone", "followers_url": "https://api.github.com/users/emilepetrone/followers", "following_url": "https://api.github.com/users/emilepetrone/following{/other_user}", "gists_url": "https://api.github.com/users/emilepetrone/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilepetrone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilepetrone/subscriptions", "organizations_url": "https://api.github.com/users/emilepetrone/orgs", "repos_url": "https://api.github.com/users/emilepetrone/repos", "events_url": "https://api.github.com/users/emilepetrone/events{/privacy}", "received_events_url": "https://api.github.com/users/emilepetrone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-08T18:42:29Z", "updated_at": "2019-06-27T20:40:10Z", "closed_at": "2019-06-27T20:40:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Background**\r\n\r\n- Using Google Auth\r\n- Django 2.0.13 \r\n- Django-allauth 0.39.1\r\n\r\n**Behavior**\r\n* In local development, when a new user clicks on the Google Link, it directs the user to Google auth \r\n* When getting & saving the SocialToken, it errors\r\n\r\n**Where in the code** \r\n\r\n**allauth.socialaccount.models : SocialLogin.save()**\r\n\r\nError:\r\n```\r\nIntegrityError at /accounts/google/login/callback/\r\nnull value in column \"app_id\" violates not-null constraint\r\nDETAIL:  Failing row contains (5, ...\r\n\r\n```\r\n\r\nCode:\r\n```\r\n    def save(self, request, connect=False):\r\n        \"\"\"\r\n        Saves a new account. Note that while the account is new,\r\n        the user may be an existing one (when connecting accounts)\r\n        \"\"\"\r\n        assert not self.is_existing\r\n        user = self.user\r\n        user.save()\r\n        self.account.user = user\r\n        self.account.save()\r\n        if app_settings.STORE_TOKENS and self.token:\r\n            self.token.account = self.account\r\n            self.token.save()  # HERE\r\n```\r\n\r\n**allauth.socialaccount.models: SocialLogin.lookup()**\r\n\r\nError:\r\n```\r\nRelatedObjectDoesNotExist at /accounts/google/login/callback/\r\nSocialToken has no app.\r\n```\r\n\r\nCode:\r\n```\r\n    def lookup(self):\r\n        \"\"\"\r\n        Lookup existing account, if any.\r\n        \"\"\"\r\n        assert not self.is_existing\r\n        try:\r\n            a = SocialAccount.objects.get(provider=self.account.provider,\r\n                                          uid=self.account.uid)\r\n            # Update account\r\n            a.extra_data = self.account.extra_data\r\n            self.account = a\r\n            self.user = self.account.user\r\n            a.save()\r\n            # Update token\r\n            if app_settings.STORE_TOKENS and self.token:\r\n                assert not self.token.pk\r\n                try:\r\n                    t = SocialToken.objects.get(account=self.account,\r\n                                                app=self.token.app)  # HERE\r\n```\r\n\r\n**Desired Behavior**\r\n\r\nIf this is intact a bug, the token.app needs to be set. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2305", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2305/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2305/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2305/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2305", "id": 449897732, "node_id": "MDU6SXNzdWU0NDk4OTc3MzI=", "number": 2305, "title": "[Question] Is the token's scope/permissions stored anywhere?", "user": {"login": "synek", "id": 9436784, "node_id": "MDQ6VXNlcjk0MzY3ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9436784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/synek", "html_url": "https://github.com/synek", "followers_url": "https://api.github.com/users/synek/followers", "following_url": "https://api.github.com/users/synek/following{/other_user}", "gists_url": "https://api.github.com/users/synek/gists{/gist_id}", "starred_url": "https://api.github.com/users/synek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/synek/subscriptions", "organizations_url": "https://api.github.com/users/synek/orgs", "repos_url": "https://api.github.com/users/synek/repos", "events_url": "https://api.github.com/users/synek/events{/privacy}", "received_events_url": "https://api.github.com/users/synek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-29T16:10:38Z", "updated_at": "2019-06-27T20:37:00Z", "closed_at": "2019-06-27T20:36:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "As part of the signup process, my app acquires a social token with simple permissions. Users can activate extra functionality in my app, which requires extra permissions from Spotify.\r\n\r\nI'd like to be able to see which permissions the user's existing token has, so that I can decide if I need to request a new higher-permission token before activating the extra functionality in my app.\r\n\r\nIs the scope of a token stored anywhere? If not then I'd like some advice on how best to extend AllAuth to do it myself. I can work on a PR based on my extension, if it's a useful feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2304", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2304/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2304/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2304/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2304", "id": 449358733, "node_id": "MDU6SXNzdWU0NDkzNTg3MzM=", "number": 2304, "title": "linkedin_oauth2 stopped working", "user": {"login": "fab10m", "id": 3891633, "node_id": "MDQ6VXNlcjM4OTE2MzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3891633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fab10m", "html_url": "https://github.com/fab10m", "followers_url": "https://api.github.com/users/fab10m/followers", "following_url": "https://api.github.com/users/fab10m/following{/other_user}", "gists_url": "https://api.github.com/users/fab10m/gists{/gist_id}", "starred_url": "https://api.github.com/users/fab10m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fab10m/subscriptions", "organizations_url": "https://api.github.com/users/fab10m/orgs", "repos_url": "https://api.github.com/users/fab10m/repos", "events_url": "https://api.github.com/users/fab10m/events{/privacy}", "received_events_url": "https://api.github.com/users/fab10m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-28T16:12:56Z", "updated_at": "2019-05-30T09:21:34Z", "closed_at": "2019-05-30T09:21:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nsince yesterday I can't signin with linkedin connector anymore. I've been using the linkedin_oauth2 provider for about 2 years and I've already:\r\n- done the upgrade to the last release 0.39.1\r\n- checked that my app is verified by linkedin\r\n\r\nThis is the error I get\r\n`{ \"error\": \"invalid_request\", \"error_description\": \"Unable to retrieve access token: appid/redirect uri/code verifier does not match authorization code. Or authorization code expired. Or external member binding exists\" }`\r\n\r\nDoes anyboby have the same issue?\r\n\r\nRegards,\r\nFabio", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2302", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2302/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2302/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2302/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2302", "id": 445402812, "node_id": "MDU6SXNzdWU0NDU0MDI4MTI=", "number": 2302, "title": "How can I receive user data upon successful login?", "user": {"login": "shlomitsur", "id": 742132, "node_id": "MDQ6VXNlcjc0MjEzMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/742132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shlomitsur", "html_url": "https://github.com/shlomitsur", "followers_url": "https://api.github.com/users/shlomitsur/followers", "following_url": "https://api.github.com/users/shlomitsur/following{/other_user}", "gists_url": "https://api.github.com/users/shlomitsur/gists{/gist_id}", "starred_url": "https://api.github.com/users/shlomitsur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shlomitsur/subscriptions", "organizations_url": "https://api.github.com/users/shlomitsur/orgs", "repos_url": "https://api.github.com/users/shlomitsur/repos", "events_url": "https://api.github.com/users/shlomitsur/events{/privacy}", "received_events_url": "https://api.github.com/users/shlomitsur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-17T11:46:36Z", "updated_at": "2019-06-27T20:31:21Z", "closed_at": "2019-06-27T20:31:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently I can pass it in the logged_in.txt and into a messages cookie, I would like to return the user data as a json response.like to return the user data as a json response.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2301", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2301/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2301/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2301/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2301", "id": 445085401, "node_id": "MDU6SXNzdWU0NDUwODU0MDE=", "number": 2301, "title": "GitHub provider: complete_login assumes the request worked", "user": {"login": "peterbe", "id": 26739, "node_id": "MDQ6VXNlcjI2NzM5", "avatar_url": "https://avatars2.githubusercontent.com/u/26739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterbe", "html_url": "https://github.com/peterbe", "followers_url": "https://api.github.com/users/peterbe/followers", "following_url": "https://api.github.com/users/peterbe/following{/other_user}", "gists_url": "https://api.github.com/users/peterbe/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterbe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterbe/subscriptions", "organizations_url": "https://api.github.com/users/peterbe/orgs", "repos_url": "https://api.github.com/users/peterbe/repos", "events_url": "https://api.github.com/users/peterbe/events{/privacy}", "received_events_url": "https://api.github.com/users/peterbe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-16T17:55:26Z", "updated_at": "2019-12-15T16:48:55Z", "closed_at": "2019-12-15T16:48:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "See https://github.com/pennersr/django-allauth/blob/f70cb3d622f992f15fe9b57098e0b328445b664e/allauth/socialaccount/providers/github/views.py#L28-L36\r\n\r\nIt looks like this:\r\n\r\n```python\r\nparams = {'access_token': token.token}\r\nresp = requests.get(self.profile_url, params=params)\r\nextra_data = resp.json()\r\n```\r\n\r\nIf that `requests.get` returns a response whose `status_code` is *not* 200, it won't notice. \r\nIdeally, this should result in some sort of error handling that simply says the login failed. \r\n\r\nAs an immediate step, we should inject a `resp.raise_for_status()` in there. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2300", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2300/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2300/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2300/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2300", "id": 444730360, "node_id": "MDU6SXNzdWU0NDQ3MzAzNjA=", "number": 2300, "title": "linkedin login v2 not working (OAuth2Client)", "user": {"login": "maxim25", "id": 8139830, "node_id": "MDQ6VXNlcjgxMzk4MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8139830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxim25", "html_url": "https://github.com/maxim25", "followers_url": "https://api.github.com/users/maxim25/followers", "following_url": "https://api.github.com/users/maxim25/following{/other_user}", "gists_url": "https://api.github.com/users/maxim25/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxim25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxim25/subscriptions", "organizations_url": "https://api.github.com/users/maxim25/orgs", "repos_url": "https://api.github.com/users/maxim25/repos", "events_url": "https://api.github.com/users/maxim25/events{/privacy}", "received_events_url": "https://api.github.com/users/maxim25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-05-16T02:54:55Z", "updated_at": "2020-02-12T11:01:43Z", "closed_at": "2019-07-09T19:46:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Started getting the following error this month:\r\n\r\nhttp_error_msg 403 Client Error: Forbidden for url: https://api.linkedin.com/v2/me?projection=(id,firstName,lastName)\r\n\r\nUsing django-allauth 0.39.1  \r\n\r\nMy LinkedIn Permissions:\r\nr_emailaddress 3-legged member permission\r\nr_liteprofile 3-legged member permission\r\nw_member_social 3-legged member permission\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2297", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2297/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2297/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2297/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2297", "id": 439620467, "node_id": "MDU6SXNzdWU0Mzk2MjA0Njc=", "number": 2297, "title": "Compatibility with Bootstrap modals", "user": {"login": "alexjayclark", "id": 50060397, "node_id": "MDQ6VXNlcjUwMDYwMzk3", "avatar_url": "https://avatars3.githubusercontent.com/u/50060397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexjayclark", "html_url": "https://github.com/alexjayclark", "followers_url": "https://api.github.com/users/alexjayclark/followers", "following_url": "https://api.github.com/users/alexjayclark/following{/other_user}", "gists_url": "https://api.github.com/users/alexjayclark/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexjayclark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexjayclark/subscriptions", "organizations_url": "https://api.github.com/users/alexjayclark/orgs", "repos_url": "https://api.github.com/users/alexjayclark/repos", "events_url": "https://api.github.com/users/alexjayclark/events{/privacy}", "received_events_url": "https://api.github.com/users/alexjayclark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-02T14:27:32Z", "updated_at": "2019-06-27T20:33:57Z", "closed_at": "2019-06-27T20:33:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've found a great looking package which integrates Django with AJAX-driven forms in Bootstrap 4 modals, but I'm struggling to get it to work with allauth.\r\n\r\nOne example in the modal package documentation uses the default django signup form, which you can see at the live demo here: https://github.com/trco/django-bootstrap-modal-forms\r\n\r\nI've tried to copy the package's signup example by substituting out the default signup form with allauth's signup form, but with no luck.\r\n\r\nI thought the issue must be in part because the default signup form is a ModelForm, while allauth's isn't.\r\n\r\nSo I had a go at turning the django allauth signup form into a ModelForm and then figuring out if there's a way to override the allauth signup form save method but, again, no luck. \r\n\r\nHere's some of my code plus the package's mixin and the allauth signup form save method - any ideas how allauth could be integrated with this package, if at all?\r\n\r\n`\r\n# forms.py\r\n\r\n    from bootstrap_modal_forms.mixins import PopRequestMixin, CreateUpdateAjaxMixin\r\n    from allauth.account.forms import SignupForm\r\n\r\n    class CustomSignupForm(PopRequestMixin, CreateUpdateAjaxMixin, SignupForm, forms.ModelForm):\r\n\r\n        class Meta:\r\n            model = CustomUser\r\n            fields = ('username', 'email')\r\n\r\n# views.py\r\n\r\n    from bootstrap_modal_forms.generic import BSModalCreateView\r\n\r\n    class signup(BSModalCreateView):\r\n        form_class = CustomSignupForm\r\n        template_name = 'users/signup2.html'\r\n        success_message = 'Success: Sign up succeeded. You can now Log in.'\r\n        success_url = reverse_lazy('test')\r\n\r\n# modal package mixins\r\n\r\n    class CreateUpdateAjaxMixin(object):\r\n        \"\"\"\r\n        Mixin which passes or saves object based on request type.\r\n        \"\"\"\r\n\r\n        def save(self, commit=True):\r\n            if not self.request.is_ajax():\r\n                instance = super(CreateUpdateAjaxMixin, self).save(commit=commit)\r\n            else:\r\n                instance = super(CreateUpdateAjaxMixin, self).save(commit=False)\r\n            return instance\r\n\r\n# allauth signup save method\r\n\r\n    def save(self, request):\r\n            adapter = get_adapter(request)\r\n            user = adapter.new_user(request)\r\n            adapter.save_user(request, user, self)\r\n            self.custom_signup(request, user)\r\n            # TODO: Move into adapter `save_user` ?\r\n            setup_user_email(request, user, [])\r\n            return user\r\n\r\n`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2296", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2296/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2296/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2296/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2296", "id": 439167224, "node_id": "MDU6SXNzdWU0MzkxNjcyMjQ=", "number": 2296, "title": "Passwords not hashed", "user": {"login": "milossh", "id": 164223, "node_id": "MDQ6VXNlcjE2NDIyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/164223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milossh", "html_url": "https://github.com/milossh", "followers_url": "https://api.github.com/users/milossh/followers", "following_url": "https://api.github.com/users/milossh/following{/other_user}", "gists_url": "https://api.github.com/users/milossh/gists{/gist_id}", "starred_url": "https://api.github.com/users/milossh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milossh/subscriptions", "organizations_url": "https://api.github.com/users/milossh/orgs", "repos_url": "https://api.github.com/users/milossh/repos", "events_url": "https://api.github.com/users/milossh/events{/privacy}", "received_events_url": "https://api.github.com/users/milossh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-01T13:38:34Z", "updated_at": "2019-06-27T20:33:16Z", "closed_at": "2019-06-27T20:33:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Django AllAuth for my social login. I don't have custom User signup form, but I do use custom User model. Here's my user model:\r\n\r\n```python\r\nclass User(AbstractUser):\r\n    is_candidate = models.BooleanField(default=True)\r\n    is_employer = models.BooleanField(default=False)\r\n    is_admin = models.BooleanField(default=False)\r\n\r\n    username = models.CharField(max_length=40, unique=False, default='')\r\n\r\n    first_name = models.CharField(_(\"Ime\"), max_length=50, null=True)\r\n    last_name = models.CharField(_(\"Prezime\"), max_length=50, null=True)\r\n\r\n    mobile =  models.CharField(_(\"Telefon\"), max_length=20,null=True, blank=True, unique=True)\r\n    address = models.CharField(_(\"Adresa\"), max_length=250, null=True, blank=True)\r\n\r\n    def __str__(self):\r\n        return self.email\r\n```\r\n\r\nNow, after getting errors that user/password combo on login is not correct for any and all users I tried, I inspected database and noticed that passwords for users registered are not hashed at all. Note that passwords for superusers, the ones I create with _python manage.py createsuperuser_, are hashed properly.\r\n\r\nSo, after Googling around, I found that I need to override AllAuth's `save_user()` method, so I've set `ACCOUNT_ADAPTER = 'core.social_adapter.UserAccountAdapter'` in my **settings.py**, and added following code to **myproject/core/social_adapter.py**:\r\n\r\n```python\r\nclass UserAccountAdapter(DefaultAccountAdapter):\r\n    print(\"using account adapter\")\r\n    def save_user(self, request, user, form, commit=True):\r\n        user = super(UserAccountAdapter, self).save_user(request, user, form, commit=False)\r\n        user.is_candidate = True\r\n        user.password = makepassword( form.cleaned_data['password'] )\r\n        print('in custom adapter save_user method')\r\n        print(user.password)\r\n        user.save()\r\n        return user\r\n```\r\n\r\nThis, however, didn't help at all. Moreover, said `save_user` method doesn't seem to be used at all, as I only get \"using account adapter\" printed in console.\r\n\r\nDid I miss something, or I got this process all wrong now?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2294", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2294/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2294/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2294/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2294", "id": 438402825, "node_id": "MDU6SXNzdWU0Mzg0MDI4MjU=", "number": 2294, "title": "Disable email management", "user": {"login": "FranciscoPinto", "id": 251423, "node_id": "MDQ6VXNlcjI1MTQyMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/251423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FranciscoPinto", "html_url": "https://github.com/FranciscoPinto", "followers_url": "https://api.github.com/users/FranciscoPinto/followers", "following_url": "https://api.github.com/users/FranciscoPinto/following{/other_user}", "gists_url": "https://api.github.com/users/FranciscoPinto/gists{/gist_id}", "starred_url": "https://api.github.com/users/FranciscoPinto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FranciscoPinto/subscriptions", "organizations_url": "https://api.github.com/users/FranciscoPinto/orgs", "repos_url": "https://api.github.com/users/FranciscoPinto/repos", "events_url": "https://api.github.com/users/FranciscoPinto/events{/privacy}", "received_events_url": "https://api.github.com/users/FranciscoPinto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-29T16:32:07Z", "updated_at": "2019-04-29T18:09:16Z", "closed_at": "2019-04-29T18:07:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThanks for the great app. I'm wondering what The Right Way\u2122\ufe0f to disable email management is. Some context: accounts are created on behalf of users, and they should stick to their (institutional) email address.\r\n\r\nShould I just override the templates and remove `accounts/email` from `allauth.urls` or is there a more elegant way?\r\n\r\nCheers & thanks once more!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2282", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2282/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2282/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2282/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2282", "id": 437397868, "node_id": "MDU6SXNzdWU0MzczOTc4Njg=", "number": 2282, "title": "Patreon connection works only with their API v1", "user": {"login": "Bloodmallet", "id": 9075987, "node_id": "MDQ6VXNlcjkwNzU5ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/9075987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bloodmallet", "html_url": "https://github.com/Bloodmallet", "followers_url": "https://api.github.com/users/Bloodmallet/followers", "following_url": "https://api.github.com/users/Bloodmallet/following{/other_user}", "gists_url": "https://api.github.com/users/Bloodmallet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bloodmallet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bloodmallet/subscriptions", "organizations_url": "https://api.github.com/users/Bloodmallet/orgs", "repos_url": "https://api.github.com/users/Bloodmallet/repos", "events_url": "https://api.github.com/users/Bloodmallet/events{/privacy}", "received_events_url": "https://api.github.com/users/Bloodmallet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-25T21:07:03Z", "updated_at": "2019-05-23T21:28:14Z", "closed_at": "2019-04-25T21:19:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Greetings,\r\nconnecting to Patreon only works with their v1 API. It would be great, if that could be mentioned in the docs: https://django-allauth.readthedocs.io/en/latest/providers.html#patreon", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2278", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2278/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2278/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2278/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2278", "id": 437109388, "node_id": "MDU6SXNzdWU0MzcxMDkzODg=", "number": 2278, "title": "convert http to https in account_confirm_email in django rest auth??", "user": {"login": "hemanth-sp", "id": 24698571, "node_id": "MDQ6VXNlcjI0Njk4NTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/24698571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hemanth-sp", "html_url": "https://github.com/hemanth-sp", "followers_url": "https://api.github.com/users/hemanth-sp/followers", "following_url": "https://api.github.com/users/hemanth-sp/following{/other_user}", "gists_url": "https://api.github.com/users/hemanth-sp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hemanth-sp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hemanth-sp/subscriptions", "organizations_url": "https://api.github.com/users/hemanth-sp/orgs", "repos_url": "https://api.github.com/users/hemanth-sp/repos", "events_url": "https://api.github.com/users/hemanth-sp/events{/privacy}", "received_events_url": "https://api.github.com/users/hemanth-sp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-25T09:53:06Z", "updated_at": "2019-04-26T01:11:14Z", "closed_at": "2019-04-25T21:20:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "i am using `path('rest-auth/registration/', include('rest_auth.registration.urls')),` it send email to user  http://www.v...... like this but i need https in production also it uses http instead of https", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2277", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2277/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2277/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2277/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2277", "id": 436335440, "node_id": "MDU6SXNzdWU0MzYzMzU0NDA=", "number": 2277, "title": "Custom Password Reset form: save() takes 1 positional argument but 2 were given", "user": {"login": "Danos2000", "id": 12801735, "node_id": "MDQ6VXNlcjEyODAxNzM1", "avatar_url": "https://avatars0.githubusercontent.com/u/12801735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Danos2000", "html_url": "https://github.com/Danos2000", "followers_url": "https://api.github.com/users/Danos2000/followers", "following_url": "https://api.github.com/users/Danos2000/following{/other_user}", "gists_url": "https://api.github.com/users/Danos2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/Danos2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Danos2000/subscriptions", "organizations_url": "https://api.github.com/users/Danos2000/orgs", "repos_url": "https://api.github.com/users/Danos2000/repos", "events_url": "https://api.github.com/users/Danos2000/events{/privacy}", "received_events_url": "https://api.github.com/users/Danos2000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-23T18:45:28Z", "updated_at": "2019-04-30T14:05:58Z", "closed_at": "2019-04-26T06:33:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using allauth 0.38.0 and Django 2.1.7\r\n\r\nI've defined a couple of custom forms as described in the docs (to add ReCaptcha). In **forms.py**:\r\n\r\n```\r\nfrom allauth.account.forms import ChangePasswordForm, ResetPasswordForm\r\n\r\nclass CustomChangePasswordForm(ChangePasswordForm):\r\n    captcha = ReCaptchaField()\r\n    def save(self):\r\n        super(CustomChangePasswordForm, self).save()\r\n\r\nclass CustomResetPasswordForm(ResetPasswordForm):\r\n    captcha = ReCaptchaField()\r\n    def save(self):\r\n        email_address = super(CustomResetPasswordForm, self).save()\r\n        return email_address\r\n\r\n```\r\n\r\nand in **settings.py**:\r\n\r\n```\r\nACCOUNT_FORMS = {'change_password':'myapp.forms.CustomChangePasswordForm',\r\n                 'reset_password':'myapp.forms.CustomResetPasswordForm',\r\n}\r\n```\r\n\r\nThe change password form works as expected. The reset password form, however, gives the following error:\r\n\r\n```\r\nTypeError at /accounts/password/reset/\r\nsave() takes 1 positional argument but 2 were given\r\n```\r\n\r\nWith the following stack trace:\r\n\r\n```\r\nDjango Version: 2.1.7\r\nPython Version: 3.7.3\r\n\r\nTraceback:\r\n\r\nFile \"/home/corndog/webapps/test_phagesdb2/lib/python3.7/Django-2.1.7-py3.7.egg/django/core/handlers/exception.py\" in inner\r\n  34.             response = get_response(request)\r\n\r\nFile \"/home/corndog/webapps/test_phagesdb2/lib/python3.7/Django-2.1.7-py3.7.egg/django/core/handlers/base.py\" in _get_response\r\n  126.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/home/corndog/webapps/test_phagesdb2/lib/python3.7/Django-2.1.7-py3.7.egg/django/core/handlers/base.py\" in _get_response\r\n  124.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/home/corndog/webapps/test_phagesdb2/lib/python3.7/Django-2.1.7-py3.7.egg/django/views/generic/base.py\" in view\r\n  68.             return self.dispatch(request, *args, **kwargs)\r\n\r\nFile \"/home/corndog/webapps/test_phagesdb2/lib/python3.7/Django-2.1.7-py3.7.egg/django/views/generic/base.py\" in dispatch\r\n  88.         return handler(request, *args, **kwargs)\r\n\r\nFile \"/home/corndog/lib/python3.7/allauth/account/views.py\" in post\r\n  103.             response = self.form_valid(form)\r\n\r\nFile \"/home/corndog/lib/python3.7/allauth/account/views.py\" in form_valid\r\n  644.         form.save(self.request)\r\n\r\nException Type: TypeError at /accounts/password/reset/\r\nException Value: save() takes 1 positional argument but 2 were given\r\n\r\n```\r\n\r\nAny idea why this is not working for the Reset form but is working for the Change form? \r\n\r\n(I've tried removing the recaptcha field and it still has the same error, despite only having the text [from the docs here](https://django-allauth.readthedocs.io/en/latest/forms.html#reset-password-allauth-account-forms-resetpasswordform).)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2276", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2276/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2276/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2276/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2276", "id": 435935600, "node_id": "MDU6SXNzdWU0MzU5MzU2MDA=", "number": 2276, "title": " Object of type PngImageFile is not JSON serializable", "user": {"login": "Antonino22", "id": 41381112, "node_id": "MDQ6VXNlcjQxMzgxMTEy", "avatar_url": "https://avatars3.githubusercontent.com/u/41381112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Antonino22", "html_url": "https://github.com/Antonino22", "followers_url": "https://api.github.com/users/Antonino22/followers", "following_url": "https://api.github.com/users/Antonino22/following{/other_user}", "gists_url": "https://api.github.com/users/Antonino22/gists{/gist_id}", "starred_url": "https://api.github.com/users/Antonino22/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Antonino22/subscriptions", "organizations_url": "https://api.github.com/users/Antonino22/orgs", "repos_url": "https://api.github.com/users/Antonino22/repos", "events_url": "https://api.github.com/users/Antonino22/events{/privacy}", "received_events_url": "https://api.github.com/users/Antonino22/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-22T23:37:38Z", "updated_at": "2019-12-15T16:51:14Z", "closed_at": "2019-12-15T16:51:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Im trying to do an image overlay. Im using satellite data to study a phenomenon over Argentina, but I really wanted to use the interactive map through folium. So far, when creating an image, Im getting an output. But, when I try to overly the satellite image on to base map, im getting an error code:  Object of type PngImageFile is not JSON serializable. I don't have a clue of how to fix it.\r\n\r\nimport netCDF4\r\nimport matplotlib\r\nmatplotlib.use('Agg')\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport os,errno\r\nimport glob\r\nimport shutil\r\n\r\n\r\ndirectory1 = '/Volumes/Anthonys_backup/Masters_Thesis/Satellite_Data/new/C13/*'\r\n\r\nlistofallthefiles = glob.glob(directory1)\r\n\r\n\r\n    \r\nf = netCDF4.Dataset(listofallthefiles[0],'r') #f is like a dataframe in pandas... but it's better because netcdf\r\n\r\ndata_var = f.variables['CMI'][:]\r\na = data_var\r\n\r\nxa = f.variables['x'][:]\r\nya = f.variables['y'][:]\r\n\r\n#print(\"satellite height\", f.variables['nominal_satellite_height'][0])\r\nxa = xa*35785831\r\nya = ya*35785831\r\n\r\nimport cartopy.crs as ccrs\r\n\r\nglobe = ccrs.Globe(semimajor_axis=6378137.,semiminor_axis=6356752.)\r\n\r\nproj = ccrs.Geostationary(central_longitude=f.variables['nominal_satellite_subpoint_lon'][0],\r\n                                satellite_height=f.variables['nominal_satellite_height'][0] * 1000,\r\n                                globe=globe,sweep_axis='x')\r\n\r\nimage_rows=f.dimensions[\"y\"].size\r\nimage_columns=f.dimensions[\"x\"].size\r\n#namer_image_crop_top=3000\r\n#namer_image_crop_bottom=-100\r\n#namer_image_crop_left=2000\r\n#namer_image_crop_right=-700\r\n\r\nnamer_image_size_y=(image_rows)\r\nnamer_image_size_x=(image_columns)\r\n\r\nprint(\"namer image size\")\r\nprint(namer_image_size_x, namer_image_size_y)\r\n\r\nnamer_image_size_x=15.1\r\nnamer_image_size_y=12.6\r\n\r\nfig = plt.figure(figsize=(namer_image_size_x,namer_image_size_y),dpi=80.)\r\n\r\nax = fig.add_subplot(1, 1, 1, projection=proj)\r\nax.outline_patch.set_edgecolor('none')\r\n\r\n\r\nimport matplotlib as mpl\r\n\r\ncdict = {'red': ((0.0, 0.0, 0.0),\r\n                     (.001, 1.00, 1.00),\r\n                     (.107, 1.00, 1.00),\r\n                     (.113, 0.498, 0.498),\r\n                     (.173, 1.00, 1.00),\r\n                     (.179, 0.902, 0.902),\r\n                     (.227, 0.102, 0.102),\r\n                     (.233, 0.00, 0.00),\r\n                     (.287, 0.902, 0.902),\r\n                     (.293, 1.00, 1.00),\r\n                     (.346, 1.00, 1.00),\r\n                     (.352, 1.00, 1.00),\r\n                     (.406, 0.101, 0.101),\r\n                     (.412, 0.00, 0.00),\r\n                     (.481, 0.00, 0.00),\r\n                     (.484, 0.00, 0.00),\r\n                     (.543, 0.00, 0.00),\r\n                     (.546, 0.773, 0.773),\r\n                     (.994, 0.012, 0.012),\r\n                     (.997, 0.004, 0.004),\r\n                     (1.0, 0.0, 0.0)),\r\n             'green': ((0.0, 0.0, 0.0),\r\n                     (.001, 1.00, 1.00),\r\n                     (.107, 1.00, 1.00),\r\n                     (.113, 0.00, 0.00),\r\n                     (.173, 0.498, 0.498),\r\n                     (.179, 0.902, 0.902),\r\n                     (.227, 0.102, 0.102),\r\n                     (.233, 0.00, 0.00),\r\n                     (.287, 0.00, 0.00),\r\n                     (.293, 0.00, 0.00),\r\n                     (.346, 0.902, 0.902),\r\n                     (.352, 1.00, 1.00),\r\n                     (.406, 1.00, 1.00),\r\n                     (.412, 1.00, 1.00),\r\n                     (.481, 0.00, 0.00),\r\n                     (.484, 0.00, 0.00),\r\n                     (.543, 1.00, 1.00),\r\n                     (.546, 0.773, 0.773),\r\n                     (.994, 0.012, 0.012),\r\n                     (.997, 0.004, 0.004),\r\n                     (1.0, 0.0, 0.0)),\r\n             'blue': ((0.0, 0.00, 0.00),\r\n                     (.001, 1.00, 1.00),\r\n                     (.107, 0.00, 0.00),\r\n                     (.113, 0.498, 0.498),\r\n                     (.173, 0.786, 0.786),\r\n                     (.179, 0.902, 0.902),\r\n                     (.227, 0.102, 0.102),\r\n                     (.233, 0.00, 0.00),\r\n                     (.287, 0.00, 0.00),\r\n                     (.293, 0.00, 0.00),\r\n                     (.346, 0.00, 0.00),\r\n                     (.352, 0.00, 0.00),\r\n                     (.406, 0.00, 0.00),\r\n                     (.412, 0.00, 0.00),\r\n                     (.481, 0.451, 0.451),\r\n                     (.484, 0.451, 0.451),\r\n                     (.543, 1.00, 1.00),\r\n                     (.546, 0.773, 0.773),\r\n                     (.994, 0.012, 0.012),\r\n                     (.997, 0.004, 0.004),\r\n                      (1.0, 0.0, 0.0))}\r\n\r\n\r\nmy_cmap = mpl.colors.LinearSegmentedColormap('my_colormap',cdict,2048)\r\n\r\nim = ax.imshow(a[namer_image_crop_top:namer_image_crop_bottom,namer_image_crop_left:namer_image_crop_right], extent=(xa[namer_image_crop_left],xa[namer_image_crop_right],ya[namer_image_crop_bottom],ya[namer_image_crop_top]), origin='upper',cmap=my_cmap, vmin=162., vmax=330.)\r\n\r\nax.coastlines(resolution='50m', color='green')\r\n\r\n\r\nimport cartopy.feature as cfeat\r\n    \r\n# Add country borders with a thick line.\r\nax.add_feature(cfeat.BORDERS, linewidth=1, edgecolor='green')\r\n\r\n# Set up a feature for the state/province lines. Tell cartopy not to fill in the polygons\r\nstates_provinces = cfeat.NaturalEarthFeature(category='cultural',\r\n                                                 name='admin_1_states_provinces_lines',\r\n                                                 scale='10m',\r\n                                                 facecolor='none', edgecolor='red')\r\n\r\n# Add the feature with dotted lines, denoted by ':'\r\nax.add_feature(states_provinces, linestyle=\"solid\", linewidth=2)\r\n\r\n\r\n# axes for wi\r\ncbaxes1 = fig.add_axes([0.135,0.12,0.755,0.02])\r\ncbar1 = fig.colorbar(im, cax=cbaxes1, orientation='horizontal')\r\nfont_size = 14\r\ncbar1.ax.tick_params(labelsize=font_size, labelcolor='yellow')\r\ncbar1.ax.xaxis.set_ticks_position('top')\r\ncbar1.ax.xaxis.set_label_position('top')\r\n    \r\n#Add's a dot on top of Cordoba\r\nco_lat, co_lon = -31.416016, -64.188929\r\nax.plot([co_lon], [co_lat], color='white', linewidth=.5, marker='o', transform=ccrs.Geodetic(),)\r\n\r\n\r\nimport datetime\r\n    \r\ntime_var = f.time_coverage_start\r\niyear = time_var[0:4]\r\nprint(\"iyear \",iyear)\r\nimonth = time_var[5:7]\r\nprint(\"imonth \",imonth)\r\n    \r\nimport calendar\r\n    \r\ncmonth = calendar.month_abbr[int(imonth)]\r\nprint(\"cmonth \",cmonth)\r\niday = time_var[8:10]\r\nprint(\"iday \",iday)\r\nitime = time_var[11:19]\r\nitimehr = time_var[11:13]\r\nitimemn = time_var[14:16]\r\n\r\nctime_string = iyear +' '+cmonth+' '+iday+'  '+itime+' GMT'\r\nctime_file_string = iyear + imonth + iday + itimehr + itimemn\r\n\r\nfilestring = \"C13_\" + iyear + imonth + iday + \"_\" + itimehr + itimemn + \".jpg\"\r\ntime_string = 'GOES-16 Band 13\\n\"Clean\" LW IR Window\\n%s '%ctime_string\r\n\r\n\r\nfrom matplotlib import patheffects\r\n    \r\n    \r\n#Text on top left corner \r\noutline_effect = [patheffects.withStroke(linewidth=2, foreground='black')]\r\ntext = ax.text(0.005, 0.90, time_string,\r\n        horizontalalignment='left', transform = ax.transAxes,\r\n        color='yellow', fontsize='small', weight='bold')\r\ntext.set_path_effects(outline_effect)\r\n    \r\n    \r\n#Text on top of Cordoba \r\ntext2 =  ax.text(co_lon +1.5 , co_lat +1 , 'Cordoba', color='yellow', weight='bold', \r\n                     horizontalalignment='right', transform=ccrs.Geodetic())\r\n    \r\ntext2.set_path_effects(outline_effect)\r\n\r\n\r\nfrom PIL import Image\r\n\r\nfig.savefig('GS.png', transparent=True)\r\n\r\nimg = Image.open(\"GS.png\")\r\n\r\n\r\nimport folium\r\nfrom folium import plugins\r\n\r\n\r\nm = folium.Map(location=[-31.416016, -64.188929],  tiles = 'Stamen Terrain')\r\n\r\nfolium.raster_layers.ImageOverlay(img,\r\n                     [[ya.min(), xa.min()], [ya.max(), xa.max()]],\r\n                     opacity=0.5).add_to(mapa)\r\n\r\nmapa", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2274", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2274/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2274/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2274/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2274", "id": 435481236, "node_id": "MDU6SXNzdWU0MzU0ODEyMzY=", "number": 2274, "title": "OpenID: Invalid base64-encoded string", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-21T06:48:31Z", "updated_at": "2019-04-26T08:56:35Z", "closed_at": "2019-04-26T08:56:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am getting the following error when trying to login/signup with OpenID:\r\n\r\n> Error at /accounts/openid/login/\r\n> Invalid base64-encoded string: number of data characters (29) cannot be 1 more than a multiple of 4\r\n\r\nThe problem appears to be that the secret (bytes) gets saved via `str()` into the OpenIDStore (as `b'Ks\u2026k8=\\n'`), which then fails with decodestring in allauth/socialaccount/providers/openid/utils.py in getAssociation:\r\n\r\n```\r\n> \u2026/django-allauth/allauth/socialaccount/providers/openid/utils.py(85)\r\n\r\n  72         def storeAssociation(self, server_url, assoc=None):\r\n  73             __import__('pdb').set_trace()\r\n  74             try:\r\n  75                 secret = base64.encodebytes(assoc.secret)\r\n  76             except AttributeError:\r\n  77                 # Python 2.x compat\r\n  78                 secret = base64.encodestring(assoc.secret)\r\n  79             OpenIDStore.objects.create(\r\n  80                 server_url=server_url,\r\n  81                 handle=assoc.handle,\r\n  82                 secret=secret,\r\n  83                 issued=assoc.issued,\r\n  84                 lifetime=assoc.lifetime,\r\n  85  ->             assoc_type=assoc.assoc_type\r\n  86             )\r\n return None\r\n(Pdb++) OpenIDStore.objects.get()\r\n<OpenIDStore: https://openid.indieauth.com/openid>\r\n(Pdb++) OpenIDStore.objects.get().secret\r\n\"b'T\u2026\\\\n'\"\r\n```\r\n\r\nThis changed in Django 2.0, where previously `force_text` would decode the bytes into a string (in TextField), but now `str()` is used: https://github.com/django/django/blob/ba2057910644d3255a6283a16ceefbd0fceedafc/docs/releases/2.0.txt#L341-L359\r\n\r\nRelated commit: https://github.com/django/django/commit/301de774c21d055e9e5a7073e5bffdb52bc71079", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2273", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2273/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2273/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2273/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2273", "id": 435423706, "node_id": "MDU6SXNzdWU0MzU0MjM3MDY=", "number": 2273, "title": "Django authentication emails not working + pass reset brings error 111 ", "user": {"login": "biinOnline", "id": 45507531, "node_id": "MDQ6VXNlcjQ1NTA3NTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/45507531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/biinOnline", "html_url": "https://github.com/biinOnline", "followers_url": "https://api.github.com/users/biinOnline/followers", "following_url": "https://api.github.com/users/biinOnline/following{/other_user}", "gists_url": "https://api.github.com/users/biinOnline/gists{/gist_id}", "starred_url": "https://api.github.com/users/biinOnline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/biinOnline/subscriptions", "organizations_url": "https://api.github.com/users/biinOnline/orgs", "repos_url": "https://api.github.com/users/biinOnline/repos", "events_url": "https://api.github.com/users/biinOnline/events{/privacy}", "received_events_url": "https://api.github.com/users/biinOnline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-20T17:56:48Z", "updated_at": "2019-04-25T21:21:20Z", "closed_at": "2019-04-25T21:21:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Not sure if you can assist, but i see you commented on password reset. Challenge i'm having is users of my app cannot receive authentication emails, although they can log in successfully. Also password reset isn't working. I get a connection refused errorno 111.\r\n\r\nCan you help or show me who I can raise this issue with? Below is the traceback:\r\n\r\nEnvironment:\r\n\r\nRequest Method: POST\r\n\r\nDjango Version: 1.10.6\r\nPython Version: 3.6.6\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n'django.contrib.auth',\r\n'django.contrib.contenttypes',\r\n'django.contrib.sessions',\r\n'django.contrib.messages',\r\n'django.contrib.staticfiles',\r\n'authtools',\r\n'crispy_forms',\r\n'easy_thumbnails',\r\n'django_admin_bootstrapped',\r\n'profiles',\r\n'accounts',\r\n'debug_toolbar',\r\n'pagedown',\r\nInstalled Middleware:\r\n['django.middleware.security.SecurityMiddleware',\r\n'django.contrib.sessions.middleware.SessionMiddleware',\r\n'django.middleware.common.CommonMiddleware',\r\n'django.middleware.csrf.CsrfViewMiddleware',\r\n'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n'django.contrib.messages.middleware.MessageMiddleware',\r\n'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n'debug_toolbar.middleware.DebugToolbarMiddleware']\r\n\r\nTraceback:\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/core/handlers/exception.py\" in inner\r\n42. response = get_response(request)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n187. response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/core/handlers/base.py\" in _get_response\r\n185. response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/utils/decorators.py\" in _wrapped_view\r\n149. response = view_func(request, *args, **kwargs)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/views/generic/base.py\" in view\r\n68. return self.dispatch(request, *args, **kwargs)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/views/generic/base.py\" in dispatch\r\n88. return handler(request, *args, **kwargs)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/views/generic/edit.py\" in post\r\n183. return self.form_valid(form)\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/authtools/views.py\" in form_valid\r\n239. html_email_template_name=self.html_email_template_name,\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/contrib/auth/forms.py\" in save\r\n291. user.email, html_email_template_name=html_email_template_name,\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/contrib/auth/forms.py\" in send_mail\r\n247. email_message.send()\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/core/mail/message.py\" in send\r\n342. return self.get_connection(fail_silently).send_messages([self])\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/core/mail/backends/smtp.py\" in send_messages\r\n100. new_conn_created = self.open()\r\n\r\nFile \"/home/biin/.virtualenvs/django11/lib/python3.6/site-packages/django/core/mail/backends/smtp.py\" in open\r\n58. self.connection = connection_class(self.host, self.port, **connection_params)\r\n\r\nFile \"/usr/lib/python3.6/smtplib.py\" in init\r\n251. (code, msg) = self.connect(host, port)\r\n\r\nFile \"/usr/lib/python3.6/smtplib.py\" in connect\r\n336. self.sock = self._get_socket(host, port, self.timeout)\r\n\r\nFile \"/usr/lib/python3.6/smtplib.py\" in _get_socket\r\n307. self.source_address)\r\n\r\nFile \"/usr/lib/python3.6/socket.py\" in create_connection\r\n724. raise err\r\n\r\nFile \"/usr/lib/python3.6/socket.py\" in create_connection\r\n713. sock.connect(sa)\r\n\r\nException Type: ConnectionRefusedError at /password-reset/\r\nException Value: [Errno 111] Connection refused", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2272", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2272/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2272/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2272/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2272", "id": 435403845, "node_id": "MDU6SXNzdWU0MzU0MDM4NDU=", "number": 2272, "title": "Linkedin signup issue", "user": {"login": "mrsdz", "id": 18589581, "node_id": "MDQ6VXNlcjE4NTg5NTgx", "avatar_url": "https://avatars3.githubusercontent.com/u/18589581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrsdz", "html_url": "https://github.com/mrsdz", "followers_url": "https://api.github.com/users/mrsdz/followers", "following_url": "https://api.github.com/users/mrsdz/following{/other_user}", "gists_url": "https://api.github.com/users/mrsdz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrsdz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrsdz/subscriptions", "organizations_url": "https://api.github.com/users/mrsdz/orgs", "repos_url": "https://api.github.com/users/mrsdz/repos", "events_url": "https://api.github.com/users/mrsdz/events{/privacy}", "received_events_url": "https://api.github.com/users/mrsdz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-20T14:14:29Z", "updated_at": "2019-12-15T19:53:17Z", "closed_at": "2019-12-15T19:53:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, when I sign up with linkedin, if the user already exists with another provider, sign up flow stuck on `/accounts/social/signup/`.\r\n\r\nMy settings:\r\n```python\r\nSOCIALACCOUNT_PROVIDERS = {\r\n    'linkedin': {\r\n        'SCOPE': [\r\n            'r_basicprofile',\r\n            'r_emailaddress'\r\n        ],\r\n        'PROFILE_FIELDS': [\r\n            'id',\r\n            'first-name',\r\n            'last-name',\r\n            'email-address',\r\n            'picture-url',\r\n            'public-profile-url',\r\n            'gender',\r\n            'birthday'\r\n        ],\r\n        'HEADERS': {\r\n            'x-li-src': 'msdk'\r\n        }\r\n    }\r\n}\r\n\r\nAUTHENTICATION_BACKENDS = [\r\n    'django.contrib.auth.backends.ModelBackend',\r\n    'allauth.account.auth_backends.AuthenticationBackend',\r\n]\r\n\r\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\r\nACCOUNT_EMAIL_REQUIRED = True\r\nACCOUNT_EMAIL_VERIFICATION = \"none\"\r\nACCOUNT_LOGIN_ATTEMPTS_LIMIT = 10\r\nACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 86400\r\nACCOUNT_LOGOUT_REDIRECT_URL = '/'\r\nLOGIN_REDIRECT_URL = '/'\r\nAUTH_USER_MODEL = 'profile.CustomUSER'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pennersr/django-allauth/issues/2269", "repository_url": "https://api.github.com/repos/pennersr/django-allauth", "labels_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2269/labels{/name}", "comments_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2269/comments", "events_url": "https://api.github.com/repos/pennersr/django-allauth/issues/2269/events", "html_url": "https://github.com/pennersr/django-allauth/issues/2269", "id": 434216167, "node_id": "MDU6SXNzdWU0MzQyMTYxNjc=", "number": 2269, "title": "SocialAccount model's is_existing should always return a boolean", "user": {"login": "horida", "id": 13470421, "node_id": "MDQ6VXNlcjEzNDcwNDIx", "avatar_url": "https://avatars1.githubusercontent.com/u/13470421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/horida", "html_url": "https://github.com/horida", "followers_url": "https://api.github.com/users/horida/followers", "following_url": "https://api.github.com/users/horida/following{/other_user}", "gists_url": "https://api.github.com/users/horida/gists{/gist_id}", "starred_url": "https://api.github.com/users/horida/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/horida/subscriptions", "organizations_url": "https://api.github.com/users/horida/orgs", "repos_url": "https://api.github.com/users/horida/repos", "events_url": "https://api.github.com/users/horida/events{/privacy}", "received_events_url": "https://api.github.com/users/horida/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-17T10:47:19Z", "updated_at": "2019-04-29T14:38:10Z", "closed_at": "2019-04-26T11:04:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, the property `is_existing` of the SocialAccount model returns None or a primary key, which is misleading given the name of the property.\r\n\r\nBetter return a `return self.account.pk is not None`\r\n\r\nSee: https://github.com/pennersr/django-allauth/blob/master/allauth/socialaccount/models.py#L245", "performed_via_github_app": null, "score": 1.0}]}