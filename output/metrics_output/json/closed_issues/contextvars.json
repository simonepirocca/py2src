{"total_count": 7, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/MagicStack/contextvars/issues/14", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/14/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/14/events", "html_url": "https://github.com/MagicStack/contextvars/issues/14", "id": 616486808, "node_id": "MDU6SXNzdWU2MTY0ODY4MDg=", "number": 14, "title": "contextvar with asyncio wait_for", "user": {"login": "snirzango", "id": 28483526, "node_id": "MDQ6VXNlcjI4NDgzNTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/28483526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snirzango", "html_url": "https://github.com/snirzango", "followers_url": "https://api.github.com/users/snirzango/followers", "following_url": "https://api.github.com/users/snirzango/following{/other_user}", "gists_url": "https://api.github.com/users/snirzango/gists{/gist_id}", "starred_url": "https://api.github.com/users/snirzango/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snirzango/subscriptions", "organizations_url": "https://api.github.com/users/snirzango/orgs", "repos_url": "https://api.github.com/users/snirzango/repos", "events_url": "https://api.github.com/users/snirzango/events{/privacy}", "received_events_url": "https://api.github.com/users/snirzango/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-12T09:02:24Z", "updated_at": "2020-05-13T18:35:17Z", "closed_at": "2020-05-13T18:35:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\nI\u2019m trying to build webserver with the following requirements: 1. limit the handle time of single request with timeout. 2. saving the context of each requests for reporting some additional information to 3rd party, after returning response to the client (to minimize the request latency).\r\ncontextvars file\r\n```\r\nfrom contextvars import ContextVar\r\nuid_ctx_var = ContextVar('uid', default='')\r\n```\r\nwebserver\r\n```\r\nimport tornado.ioloop\r\nimport tornado.web\r\nfrom my_main import do_somthing\r\nfrom context_vars import uid_ctx_var\r\nfrom contextvars import copy_context\r\nfrom asyncio import wait_for\r\nfrom tornado.ioloop import IOLoop\r\nclass MainHandler(tornado.web.RequestHandler):\r\n    async def get(self):\r\n        uid = int(self.request.query_arguments.get('user')[0])\r\n        req_num = int(self.request.query_arguments.get('user')[0])\r\n        fallback_timeout = 1000\r\n        ctx = contextWithTimeout.copy_context()\r\n        loop = IOLoop.current()\r\n        # await ctx.run(do_somthing, uid, req_num) option 1\r\n        # res = await ctx.run(wait_for(do_somthing(uid, req_num), fallback_timeout)) option 2\r\n        self.finish('im done')\r\n        print('after finish', uid_ctx_var.get())\r\n        # self.write('asd')\r\ndef make_app():\r\n    return tornado.web.Application([\r\n        (r\"/\", MainHandler),\r\n    ])\r\nif __name__ == \"__main__\":\r\n    app = make_app()\r\n    app.listen(8888)\r\n    tornado.ioloop.IOLoop.current().start()\r\n```\r\nmethods file\r\n```\r\nfrom tornado.gen import sleep\r\nfrom context_vars import uid_ctx_var\r\nasync def do_somthing(uid, req_num):\r\n    uid_ctx_var.set(uid)\r\n    print('out of asyncfunc1 A uid: {} req_num: {}'.format(uid_ctx_var.get(), req_num))\r\n    var = await asyncfunc1(req_num)\r\n    await sleep(5 - req_num)\r\n    my_uid = uid_ctx_var.get()\r\n    print('out of asyncfunc1 B uid: {} req_num: {}'.format(my_uid, req_num))\r\n    return {\r\n        'this': 'that'\r\n    }\r\nasync def asyncfunc1(req_num):\r\n    my_uid = uid_ctx_var.get()\r\n    print('inside asyncfunc1 A uid: {} req_num: {}'.format(my_uid, req_num))\r\n    await sleep(5 - 2*req_num)\r\n    uid_ctx_var.set(-req_num)\r\n    print('inside asyncfunc1 B uid: {} req_num: {}'.format(uid_ctx_var.get(), req_num))\r\n```\r\nsend requests script\r\n```\r\nimport threading\r\nimport grequests\r\nimport time\r\nimport threading\r\n# Number of parallel threads\r\nimport requests\r\nlock = threading.Semaphore(2)\r\ndef parse(url):\r\n    print ('getting info', url)\r\n    requests.get(url)\r\n    lock.release()\r\ndef parse_pool():\r\n    list_of_urls = [\r\n        'http://localhost:8888/?user={}'.format(i) for i in range(3)\r\n    ]\r\n    thread_pool = []\r\n    for url in list_of_urls:\r\n        thread = threading.Thread(target=parse, args=(url,))\r\n        thread_pool.append(thread)\r\n        thread.start()\r\n        lock.acquire()\r\n    for thread in thread_pool:\r\n        thread.join()\r\n    print ('done')\r\nparse_pool()\r\n```\r\n -------------------------------------------------------------------------------------\r\nafter running with option 1(await ctx.run(do_somthing, uid, req_num)) we get :\r\n```\r\nout of asyncfunc1 A uid: 1 req_num: 1\r\ninside asyncfunc1 A uid: 1 req_num: 1\r\nout of asyncfunc1 A uid: 0 req_num: 0\r\ninside asyncfunc1 A uid: 0 req_num: 0\r\nout of asyncfunc1 A uid: 2 req_num: 2\r\ninside asyncfunc1 A uid: 2 req_num: 2\r\ninside asyncfunc1 B uid: -2 req_num: 2\r\ninside asyncfunc1 B uid: -1 req_num: 1\r\nout of asyncfunc1 B uid: -2 req_num: 2\r\nafter finish -2\r\ninside asyncfunc1 B uid: 0 req_num: 0\r\nout of asyncfunc1 B uid: -1 req_num: 1\r\nafter finish -1\r\nout of asyncfunc1 B uid: 0 req_num: 0\r\nafter finish 0\r\n```\r\nwhich is the desirable outcome\r\nbut once we use option 2 with wait_for (res = await ctx.run(wait_for(do_somthing(uid, req_num), fallback_timeout))) we get:\r\n```\r\nout of asyncfunc1 A uid: 2 req_num: 2\r\ninside asyncfunc1 A uid: 2 req_num: 2\r\nout of asyncfunc1 A uid: 1 req_num: 1\r\ninside asyncfunc1 A uid: 1 req_num: 1\r\nout of asyncfunc1 A uid: 0 req_num: 0\r\ninside asyncfunc1 A uid: 0 req_num: 0\r\ninside asyncfunc1 B uid: -2 req_num: 2\r\ninside asyncfunc1 B uid: -1 req_num: 1\r\nout of asyncfunc1 B uid: -2 req_num: 2\r\nafter finish\r\ninside asyncfunc1 B uid: 0 req_num: 0\r\nout of asyncfunc1 B uid: -1 req_num: 1\r\nafter finish\r\nout of asyncfunc1 B uid: 0 req_num: 0\r\nafter finish\r\n```\r\nas you can see the context changes dose not apply, as we understand wait_for is changing the context\r\nis there any other way to do it?\r\nI\u2019ll be happy to get different ideas to tackle this problem\u2026", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/contextvars/issues/13", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/13/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/13/events", "html_url": "https://github.com/MagicStack/contextvars/issues/13", "id": 547993047, "node_id": "MDU6SXNzdWU1NDc5OTMwNDc=", "number": 13, "title": "aiohttp leaks ContextVar changes despite ctx = context_copy(); ctx.run()", "user": {"login": "mistotebe", "id": 1913139, "node_id": "MDQ6VXNlcjE5MTMxMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1913139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mistotebe", "html_url": "https://github.com/mistotebe", "followers_url": "https://api.github.com/users/mistotebe/followers", "following_url": "https://api.github.com/users/mistotebe/following{/other_user}", "gists_url": "https://api.github.com/users/mistotebe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mistotebe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mistotebe/subscriptions", "organizations_url": "https://api.github.com/users/mistotebe/orgs", "repos_url": "https://api.github.com/users/mistotebe/repos", "events_url": "https://api.github.com/users/mistotebe/events{/privacy}", "received_events_url": "https://api.github.com/users/mistotebe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-10T10:20:27Z", "updated_at": "2020-01-14T05:59:35Z", "closed_at": "2020-01-10T19:35:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Potentially related to #2.\r\n\r\nTake the following code:\r\n```python3\r\n#!/usr/bin/env python3\r\n\r\nfrom aiohttp import web\r\nimport contextvars\r\nimport functools\r\n\r\nvariable = contextvars.ContextVar('variable')\r\nvariable.set(False)\r\n\r\n\r\ndef with_context(f):\r\n    @functools.wraps(f)\r\n    def wrapper(*args, **kwargs):\r\n        ctx = contextvars.copy_context()\r\n        return ctx.run(f, *args, **kwargs)\r\n    return wrapper\r\n\r\n\r\n@with_context\r\nasync def handler(request):\r\n    before = variable.get()\r\n\r\n    if request.method == 'GET':\r\n        variable.set(True)\r\n\r\n    after = variable.get()\r\n    return web.json_response({'before': before, 'after': after})\r\n\r\n\r\ndef main():\r\n    app = web.Application()\r\n\r\n    app.router.add_get('/action', handler)\r\n    app.router.add_post('/action', handler)\r\n\r\n    web.run_app(app, host='localhost', port=12345)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n```\r\n\r\nIn 3.7 contextvars (stdlib implementation), GET requests do not interfere with `variable` (even if the decorator is not present). In 3.6 with contextvars 2.4, the change to `variable` leaks out, regardless of whether `handler` is decorated.\r\n\r\nWhy does `ctx.run()` not protect the top-level context from changes?\r\n\r\nIs there a workaround?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/contextvars/issues/10", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/10/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/10/events", "html_url": "https://github.com/MagicStack/contextvars/issues/10", "id": 349641334, "node_id": "MDU6SXNzdWUzNDk2NDEzMzQ=", "number": 10, "title": "Add Type Hints to TypeShed", "user": {"login": "stevenjackson121", "id": 8807107, "node_id": "MDQ6VXNlcjg4MDcxMDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8807107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenjackson121", "html_url": "https://github.com/stevenjackson121", "followers_url": "https://api.github.com/users/stevenjackson121/followers", "following_url": "https://api.github.com/users/stevenjackson121/following{/other_user}", "gists_url": "https://api.github.com/users/stevenjackson121/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenjackson121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenjackson121/subscriptions", "organizations_url": "https://api.github.com/users/stevenjackson121/orgs", "repos_url": "https://api.github.com/users/stevenjackson121/repos", "events_url": "https://api.github.com/users/stevenjackson121/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenjackson121/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-10T20:05:00Z", "updated_at": "2018-08-14T17:09:49Z", "closed_at": "2018-08-14T17:09:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [typeshed](https://github.com/python/typeshed) repo ([explained here](https://www.python.org/dev/peps/pep-0484/#the-typeshed-repo)) contains a stub for `contextvars` in 3.7, but does not contain stubs for this backport. \r\n\r\nThis causes tools like `mypy` and `PyCharm` to fail to notice typing errors that are caught when using the builtin `3.7` version, as in the following example:\r\n\r\n```\r\nint_var: MyContextVar[int] = ContextVar('int_var', default=42)\r\n\r\nint_var.set('')  # caught by mypy in 3.7, not caught by backport\r\n```\r\n\r\nIt seems like it could be as simple as copying the [stub for the builtin](https://github.com/python/typeshed/blob/master/stdlib/3.7/contextvars.pyi) to the `third-party` directory, but because of the policy outlined [here](https://github.com/python/typeshed/blob/master/CONTRIBUTING.md#adding-a-new-library), no one can do this without your explicit agreement.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/contextvars/issues/8", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/8/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/8/events", "html_url": "https://github.com/MagicStack/contextvars/issues/8", "id": 345846191, "node_id": "MDU6SXNzdWUzNDU4NDYxOTE=", "number": 8, "title": "Loosen the version requirement on the \"immutables\" dependency", "user": {"login": "catern", "id": 5394722, "node_id": "MDQ6VXNlcjUzOTQ3MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5394722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catern", "html_url": "https://github.com/catern", "followers_url": "https://api.github.com/users/catern/followers", "following_url": "https://api.github.com/users/catern/following{/other_user}", "gists_url": "https://api.github.com/users/catern/gists{/gist_id}", "starred_url": "https://api.github.com/users/catern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catern/subscriptions", "organizations_url": "https://api.github.com/users/catern/orgs", "repos_url": "https://api.github.com/users/catern/repos", "events_url": "https://api.github.com/users/catern/events{/privacy}", "received_events_url": "https://api.github.com/users/catern/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-30T16:58:31Z", "updated_at": "2019-04-01T14:38:43Z", "closed_at": "2019-04-01T14:38:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Next time the version bumps, could you depend on immutables >= 0.6 or something? That would be nice, it would allow me to upgrade immutables without having to mess with contextvars.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/contextvars/issues/6", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/6/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/6/events", "html_url": "https://github.com/MagicStack/contextvars/issues/6", "id": 322303112, "node_id": "MDU6SXNzdWUzMjIzMDMxMTI=", "number": 6, "title": "Mark release-commits with tags to facilitate comparisons for changes", "user": {"login": "ankostis", "id": 501585, "node_id": "MDQ6VXNlcjUwMTU4NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/501585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ankostis", "html_url": "https://github.com/ankostis", "followers_url": "https://api.github.com/users/ankostis/followers", "following_url": "https://api.github.com/users/ankostis/following{/other_user}", "gists_url": "https://api.github.com/users/ankostis/gists{/gist_id}", "starred_url": "https://api.github.com/users/ankostis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ankostis/subscriptions", "organizations_url": "https://api.github.com/users/ankostis/orgs", "repos_url": "https://api.github.com/users/ankostis/repos", "events_url": "https://api.github.com/users/ankostis/events{/privacy}", "received_events_url": "https://api.github.com/users/ankostis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-11T13:46:33Z", "updated_at": "2018-07-30T15:45:09Z", "closed_at": "2018-07-30T15:45:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to add tags to the specific release-commits,\r\nso as to be visible in https://github.com/MagicStack/contextvars/releases GH page,\r\nand facilitate comparisons among releases?\r\nThis is more important for this project since it lacks a CHANGES file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/contextvars/issues/3", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/3/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/3/events", "html_url": "https://github.com/MagicStack/contextvars/issues/3", "id": 318623829, "node_id": "MDU6SXNzdWUzMTg2MjM4Mjk=", "number": 3, "title": "Use immutables", "user": {"login": "fantix", "id": 1751601, "node_id": "MDQ6VXNlcjE3NTE2MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1751601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fantix", "html_url": "https://github.com/fantix", "followers_url": "https://api.github.com/users/fantix/followers", "following_url": "https://api.github.com/users/fantix/following{/other_user}", "gists_url": "https://api.github.com/users/fantix/gists{/gist_id}", "starred_url": "https://api.github.com/users/fantix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fantix/subscriptions", "organizations_url": "https://api.github.com/users/fantix/orgs", "repos_url": "https://api.github.com/users/fantix/repos", "events_url": "https://api.github.com/users/fantix/events{/privacy}", "received_events_url": "https://api.github.com/users/fantix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-28T10:29:58Z", "updated_at": "2018-05-02T16:54:21Z", "closed_at": "2018-05-02T16:54:21Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "As I can see project immutables was created after project contextvars, so I guess you haven't got time to make contextvars use immutables. If that's expected, I may be able to help with that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/contextvars/issues/1", "repository_url": "https://api.github.com/repos/MagicStack/contextvars", "labels_url": "https://api.github.com/repos/MagicStack/contextvars/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/contextvars/issues/1/comments", "events_url": "https://api.github.com/repos/MagicStack/contextvars/issues/1/events", "html_url": "https://github.com/MagicStack/contextvars/issues/1", "id": 312455343, "node_id": "MDU6SXNzdWUzMTI0NTUzNDM=", "number": 1, "title": "support for python 2.7 and 3.4?", "user": {"login": "RonnyPfannschmidt", "id": 156838, "node_id": "MDQ6VXNlcjE1NjgzOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/156838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonnyPfannschmidt", "html_url": "https://github.com/RonnyPfannschmidt", "followers_url": "https://api.github.com/users/RonnyPfannschmidt/followers", "following_url": "https://api.github.com/users/RonnyPfannschmidt/following{/other_user}", "gists_url": "https://api.github.com/users/RonnyPfannschmidt/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonnyPfannschmidt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonnyPfannschmidt/subscriptions", "organizations_url": "https://api.github.com/users/RonnyPfannschmidt/orgs", "repos_url": "https://api.github.com/users/RonnyPfannschmidt/repos", "events_url": "https://api.github.com/users/RonnyPfannschmidt/events{/privacy}", "received_events_url": "https://api.github.com/users/RonnyPfannschmidt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-09T09:21:36Z", "updated_at": "2018-05-02T16:59:58Z", "closed_at": "2018-05-02T16:55:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, i was just evaluating this package as means to generalize some older unfortunate code into something nicer\r\n\r\nunfortunately i have to support python 2.7 and 3.4 for a while longer", "performed_via_github_app": null, "score": 1.0}]}