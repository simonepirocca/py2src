{"total_count": 103, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/getsentry/responses/issues/337", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/337/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/337/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/337/events", "html_url": "https://github.com/getsentry/responses/issues/337", "id": 656754728, "node_id": "MDU6SXNzdWU2NTY3NTQ3Mjg=", "number": 337, "title": "Record and replay", "user": {"login": "punya", "id": 277514, "node_id": "MDQ6VXNlcjI3NzUxNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/277514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/punya", "html_url": "https://github.com/punya", "followers_url": "https://api.github.com/users/punya/followers", "following_url": "https://api.github.com/users/punya/following{/other_user}", "gists_url": "https://api.github.com/users/punya/gists{/gist_id}", "starred_url": "https://api.github.com/users/punya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/punya/subscriptions", "organizations_url": "https://api.github.com/users/punya/orgs", "repos_url": "https://api.github.com/users/punya/repos", "events_url": "https://api.github.com/users/punya/events{/privacy}", "received_events_url": "https://api.github.com/users/punya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-14T16:48:06Z", "updated_at": "2020-07-16T01:23:45Z", "closed_at": "2020-07-16T01:23:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, `responses` can be configured *either* to pass-through a certain request to a real server, *or* to plug in a canned (customizable) response. Could there be an additional mode that captures the real server responses at development time, but then re-uses those recorded responses when running automated tests (e.g. in CI)? This is similar to how snapshot tests work.\r\n\r\nSuch a feature could be helpful when the real server is unsuitable for automated testing because of credentials, performance, cost, or rate limits.\r\n\r\nIf there is interest, I'd be happy to help implement this if I can get some pointers \ud83d\ude04 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/328", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/328/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/328/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/328/events", "html_url": "https://github.com/getsentry/responses/issues/328", "id": 636849391, "node_id": "MDU6SXNzdWU2MzY4NDkzOTE=", "number": 328, "title": "Release a new version", "user": {"login": "danihodovic", "id": 5557301, "node_id": "MDQ6VXNlcjU1NTczMDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5557301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danihodovic", "html_url": "https://github.com/danihodovic", "followers_url": "https://api.github.com/users/danihodovic/followers", "following_url": "https://api.github.com/users/danihodovic/following{/other_user}", "gists_url": "https://api.github.com/users/danihodovic/gists{/gist_id}", "starred_url": "https://api.github.com/users/danihodovic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danihodovic/subscriptions", "organizations_url": "https://api.github.com/users/danihodovic/orgs", "repos_url": "https://api.github.com/users/danihodovic/repos", "events_url": "https://api.github.com/users/danihodovic/events{/privacy}", "received_events_url": "https://api.github.com/users/danihodovic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-11T09:04:26Z", "updated_at": "2020-06-12T02:24:23Z", "closed_at": "2020-06-12T02:24:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This morning I attempted to use `responses.assert_call_count()` only to realize it's not in the upstream pip version.\r\n\r\nCould we release a new version to pip so that we're not required to install from git?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/326", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/326/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/326/events", "html_url": "https://github.com/getsentry/responses/issues/326", "id": 636480619, "node_id": "MDU6SXNzdWU2MzY0ODA2MTk=", "number": 326, "title": "test_arbitrary_status_code fails with py3.9", "user": {"login": "mgorny", "id": 110765, "node_id": "MDQ6VXNlcjExMDc2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/110765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgorny", "html_url": "https://github.com/mgorny", "followers_url": "https://api.github.com/users/mgorny/followers", "following_url": "https://api.github.com/users/mgorny/following{/other_user}", "gists_url": "https://api.github.com/users/mgorny/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgorny/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgorny/subscriptions", "organizations_url": "https://api.github.com/users/mgorny/orgs", "repos_url": "https://api.github.com/users/mgorny/repos", "events_url": "https://api.github.com/users/mgorny/events{/privacy}", "received_events_url": "https://api.github.com/users/mgorny/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-10T19:07:22Z", "updated_at": "2020-06-12T02:24:09Z", "closed_at": "2020-06-12T02:24:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "```pytb\r\n$ tox -e py39\r\nGLOB sdist-make: /tmp/responses/setup.py\r\npy39 inst-nodeps: /tmp/responses/.tox/.tmp/package/1/responses-0.10.15.dev0.zip\r\npy39 installed: attrs==19.3.0,certifi==2020.4.5.2,chardet==3.0.4,coverage==4.5.4,flake8==3.8.3,idna==2.9,mccabe==0.6.1,more-itertools==8.3.0,packaging==20.4,pluggy==0.13.1,py==1.8.1,pycodestyle==2.6.0,pyflakes==2.2.0,pyparsing==2.4.7,pytest==5.4.3,pytest-cov==2.9.0,pytest-localserver==0.5.0,requests==2.23.0,responses @ file:///tmp/responses/.tox/.tmp/package/1/responses-0.10.15.dev0.zip,six==1.15.0,urllib3==1.25.9,wcwidth==0.2.4,Werkzeug==1.0.1\r\npy39 run-test-pre: PYTHONHASHSEED='3524717445'\r\npy39 run-test: commands[0] | pytest . --cov responses --cov-report term-missing\r\n=============================================================== test session starts ===============================================================\r\nplatform linux -- Python 3.9.0b3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1\r\ncachedir: .tox/py39/.pytest_cache\r\nrootdir: /tmp/responses, inifile: setup.cfg\r\nplugins: localserver-0.5.0, cov-2.9.0\r\ncollected 67 items                                                                                                                                \r\n\r\ntest_responses.py .........................F.........................................                                                       [100%]\r\n\r\n==================================================================== FAILURES =====================================================================\r\n___________________________________________________________ test_arbitrary_status_code ____________________________________________________________\r\ntest_responses.py:404: in test_arbitrary_status_code\r\n    run()\r\n<string>:3: in wrapper\r\n    ???\r\ntest_responses.py:402: in run\r\n    assert resp.reason is None\r\nE   assert \"I'm a Teapot\" is None\r\nE    +  where \"I'm a Teapot\" = <Response [418]>.reason\r\n\r\n----------- coverage: platform linux, python 3.9.0-beta-3 ------------\r\nName           Stmts   Miss  Cover   Missing\r\n--------------------------------------------\r\nresponses.py     393     31    92%   19-20, 24-25, 28-29, 32-33, 38-41, 47-48, 88, 98-104, 113, 125-129, 144-151, 290, 314\r\n\r\n============================================================= short test summary info =============================================================\r\nFAILED test_responses.py::test_arbitrary_status_code - assert \"I'm a Teapot\" is None\r\n========================================================== 1 failed, 66 passed in 1.31s ===========================================================\r\nERROR: InvocationError for command /tmp/responses/.tox/py39/bin/pytest . --cov responses --cov-report term-missing (exited with code 1)\r\n_____________________________________________________________________ summary _____________________________________________________________________\r\nERROR:   py39: commands failed\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/325", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/325/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/325/events", "html_url": "https://github.com/getsentry/responses/issues/325", "id": 632457068, "node_id": "MDU6SXNzdWU2MzI0NTcwNjg=", "number": 325, "title": "Headers aren't added to response", "user": {"login": "XenGi", "id": 1043980, "node_id": "MDQ6VXNlcjEwNDM5ODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1043980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XenGi", "html_url": "https://github.com/XenGi", "followers_url": "https://api.github.com/users/XenGi/followers", "following_url": "https://api.github.com/users/XenGi/following{/other_user}", "gists_url": "https://api.github.com/users/XenGi/gists{/gist_id}", "starred_url": "https://api.github.com/users/XenGi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XenGi/subscriptions", "organizations_url": "https://api.github.com/users/XenGi/orgs", "repos_url": "https://api.github.com/users/XenGi/repos", "events_url": "https://api.github.com/users/XenGi/events{/privacy}", "received_events_url": "https://api.github.com/users/XenGi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-06T13:17:31Z", "updated_at": "2020-06-10T23:54:33Z", "closed_at": "2020-06-10T23:54:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Ahoi,\r\n\r\nI'm trying to add headers to a response but can't figure out why it doesn't work. I tried these ways:\r\n\r\n```python\r\nurl = 'https://example.com/?cursor='\r\nresp_body = [{'foo': 'bar'}, ]\r\n\r\nresponses.add(\r\n    responses.Response(\r\n        method='GET',\r\n        url=url,\r\n        json=resp_body,\r\n        status=200,\r\n        headers={\r\n            'Link': f'<{ url }>; rel=\"first\", <{ url }next_cursor>; rel=\"next\"'\r\n        },\r\n        content_type='application/json'\r\n    )\r\n)\r\nresponses.add(\r\n    responses.GET,\r\n    url=f'{ url }next_cursor',\r\n    json=resp_body,\r\n    adding_headers={\r\n        'Link': f'<{ url }>; rel=\"first\", <{ url }prev_cursor>; rel=\"prev\"'\r\n    },\r\n    status=200\r\n)\r\n```\r\n\r\nIn both cases the response returned in the code has only 1 header which is `{'Content-Type': 'application/json'}`. Am I doing something wrong?\r\n\r\nI stepped through the responses code with a debugger and everything seems to work fine. The Response object gets created with the right headers but when the requests module is called it doesn't get them back.\r\n\r\nhere are my versions:\r\n- Python: 3.8.3\r\n- pytest: 5.4.3\r\n- requests: 2.23.0\r\n- responses: 0.10.14", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/324", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/324/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/324/events", "html_url": "https://github.com/getsentry/responses/issues/324", "id": 623917558, "node_id": "MDU6SXNzdWU2MjM5MTc1NTg=", "number": 324, "title": "mock requests.ConnectionError, assert function result", "user": {"login": "Mooreel", "id": 1982509, "node_id": "MDQ6VXNlcjE5ODI1MDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1982509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mooreel", "html_url": "https://github.com/Mooreel", "followers_url": "https://api.github.com/users/Mooreel/followers", "following_url": "https://api.github.com/users/Mooreel/following{/other_user}", "gists_url": "https://api.github.com/users/Mooreel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mooreel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mooreel/subscriptions", "organizations_url": "https://api.github.com/users/Mooreel/orgs", "repos_url": "https://api.github.com/users/Mooreel/repos", "events_url": "https://api.github.com/users/Mooreel/events{/privacy}", "received_events_url": "https://api.github.com/users/Mooreel/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106764, "node_id": "MDU6TGFiZWw2NjEwNjc2NA==", "url": "https://api.github.com/repos/getsentry/responses/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-24T18:23:21Z", "updated_at": "2020-05-29T13:56:42Z", "closed_at": "2020-05-29T13:56:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function that returns `False `if a `requests.ConnectionError` occurred. How can I test the result of the function in case this exception happens?\r\n\r\nThe following test fails with the Exception rather than asserting that the function should return `False`\r\n\r\n```\r\n@responses.activate\r\ndef test_get_system_mem_failure(self):\r\n    responses.add(responses.GET,\"https://myapi.com/api\",\r\n        body=Exception(requests.ConnectionError))\r\n    with pytest.raises(requests.ConnectionError):\r\n        self.assertEqual(sm.get_system_mem(),False)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/323", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/323/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/323/events", "html_url": "https://github.com/getsentry/responses/issues/323", "id": 601919890, "node_id": "MDU6SXNzdWU2MDE5MTk4OTA=", "number": 323, "title": "Request query string params aren't parsed correctly when a path is used", "user": {"login": "samdbmg", "id": 408983, "node_id": "MDQ6VXNlcjQwODk4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/408983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samdbmg", "html_url": "https://github.com/samdbmg", "followers_url": "https://api.github.com/users/samdbmg/followers", "following_url": "https://api.github.com/users/samdbmg/following{/other_user}", "gists_url": "https://api.github.com/users/samdbmg/gists{/gist_id}", "starred_url": "https://api.github.com/users/samdbmg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samdbmg/subscriptions", "organizations_url": "https://api.github.com/users/samdbmg/orgs", "repos_url": "https://api.github.com/users/samdbmg/repos", "events_url": "https://api.github.com/users/samdbmg/events{/privacy}", "received_events_url": "https://api.github.com/users/samdbmg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-17T11:53:25Z", "updated_at": "2020-04-21T19:10:12Z", "closed_at": "2020-04-21T19:10:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen mocking an endpoint that includes a path, it looks like the path isn't stripped off when parsing query string parameters into `responses.calls[0].request.params`.\r\n\r\n**Minimal example**\r\n```python\r\nimport responses\r\nimport requests\r\n\r\nwith responses.RequestsMock() as req_mock:\r\n    req_mock.add(responses.GET, 'http://example.com/bar/baz',\r\n                 json={}, status=200)\r\n\r\n    req_params = {\"param1\": \"val1\", \"param2\": 2}\r\n    resp = requests.get('http://example.com/bar/baz', params=req_params)\r\n\r\n    print(\"Got params {}\".format(req_mock.calls[0].request.params))\r\n    assert req_mock.calls[0].request.params == req_params\r\n```\r\n\r\n**Expected behaviour**\r\n```console\r\nsamn@rd:~$ python3 tests/test_responses_bug.py \r\nGot params {'param1': 'val1', 'param2': '2'}\r\n```\r\n\r\n**Actual behaviour**\r\n```console\r\nsamn@rd:~$ python3 tests/test_responses_bug.py \r\nGot params {'/bar/baz?param1': 'val1', 'param2': '2'}\r\nTraceback (most recent call last):\r\n  File \"tests/test_responses_bug.py\", line 13, in <module>\r\n    assert req_mock.calls[0].request.params == req_params\r\nAssertionError\r\n```\r\n\r\nI think the fix is to change https://github.com/getsentry/responses/blob/master/responses.py#L625 to something like:\r\n```python\r\nquery_string = urlparse(request.path_url).query\r\nrequest.params = dict(parse_qsl(query_string))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/310", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/310/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/310/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/310/events", "html_url": "https://github.com/getsentry/responses/issues/310", "id": 589419169, "node_id": "MDU6SXNzdWU1ODk0MTkxNjk=", "number": 310, "title": "CallbackResponse is deleted when there is more than one match with a HTTP request", "user": {"login": "alanoe", "id": 6615847, "node_id": "MDQ6VXNlcjY2MTU4NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6615847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanoe", "html_url": "https://github.com/alanoe", "followers_url": "https://api.github.com/users/alanoe/followers", "following_url": "https://api.github.com/users/alanoe/following{/other_user}", "gists_url": "https://api.github.com/users/alanoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanoe/subscriptions", "organizations_url": "https://api.github.com/users/alanoe/orgs", "repos_url": "https://api.github.com/users/alanoe/repos", "events_url": "https://api.github.com/users/alanoe/events{/privacy}", "received_events_url": "https://api.github.com/users/alanoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-27T21:21:05Z", "updated_at": "2020-03-30T01:34:51Z", "closed_at": "2020-03-30T01:34:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Although it has a confusing name, the internal _matches list keeps the list of registered (URL,method) tuples which must be mocked (aka CallbackResponses). Each element of this list is added by calling addCalback() and should never be automatically removed. \r\n\r\nHowever, this is exactly what is done\r\nin https://github.com/getsentry/responses/blob/bda22ade2b263ed8706e277664d95137d690c728/responses.py#L629 , if the URL regex and method of more than one CallbackResponse matches the URL and method of a HTTP request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/307", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/307/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/307/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/307/events", "html_url": "https://github.com/getsentry/responses/issues/307", "id": 570253312, "node_id": "MDU6SXNzdWU1NzAyNTMzMTI=", "number": 307, "title": "0.10.10 not up on PyPl", "user": {"login": "incidentist", "id": 587244, "node_id": "MDQ6VXNlcjU4NzI0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/587244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/incidentist", "html_url": "https://github.com/incidentist", "followers_url": "https://api.github.com/users/incidentist/followers", "following_url": "https://api.github.com/users/incidentist/following{/other_user}", "gists_url": "https://api.github.com/users/incidentist/gists{/gist_id}", "starred_url": "https://api.github.com/users/incidentist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/incidentist/subscriptions", "organizations_url": "https://api.github.com/users/incidentist/orgs", "repos_url": "https://api.github.com/users/incidentist/repos", "events_url": "https://api.github.com/users/incidentist/events{/privacy}", "received_events_url": "https://api.github.com/users/incidentist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-25T01:38:35Z", "updated_at": "2020-03-01T03:34:01Z", "closed_at": "2020-02-25T17:04:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to install 0.10.10 and it can't find that version. It is not listed on PyPl either: https://pypi.org/project/responses/#description\r\n\r\n```\r\nERROR: Could not find a version that satisfies the requirement responses~=0.10.10 (from -r requirements.txt (line 33)) (from versions: 0.1.0, 0.1.1, 0.2.0, 0.2.1, 0.2.2, 0.3.0, 0.4.0, 0.5.0, 0.5.1, 0.6.0, 0.6.1, 0.6.2, 0.7.0, 0.8.0, 0.8.1, 0.9.0, 0.10.0, 0.10.1, 0.10.2, 0.10.3, 0.10.4, 0.10.5, 0.10.6, 0.10.7, 0.10.8, 0.10.9)\r\nERROR: No matching distribution found for responses~=0.10.10 (from -r requirements.txt (line 33))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/306", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/306/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/306/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/306/events", "html_url": "https://github.com/getsentry/responses/issues/306", "id": 569968425, "node_id": "MDU6SXNzdWU1Njk5Njg0MjU=", "number": 306, "title": "Regression between 0.10.7 and 0.10.8", "user": {"login": "kvdveer", "id": 419433, "node_id": "MDQ6VXNlcjQxOTQzMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/419433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvdveer", "html_url": "https://github.com/kvdveer", "followers_url": "https://api.github.com/users/kvdveer/followers", "following_url": "https://api.github.com/users/kvdveer/following{/other_user}", "gists_url": "https://api.github.com/users/kvdveer/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvdveer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvdveer/subscriptions", "organizations_url": "https://api.github.com/users/kvdveer/orgs", "repos_url": "https://api.github.com/users/kvdveer/repos", "events_url": "https://api.github.com/users/kvdveer/events{/privacy}", "received_events_url": "https://api.github.com/users/kvdveer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-24T16:24:23Z", "updated_at": "2020-03-03T02:47:17Z", "closed_at": "2020-03-03T02:47:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Minimal reproduction:\r\n```\r\nimport responses\r\nimport requests\r\n\r\n\r\n@responses.activate\r\ndef test_it():\r\n    \r\n    def request_callback(request):\r\n        return (\r\n            200,\r\n            [('Content-Type', 'application/json')],\r\n            b'foo',\r\n        )\r\n\r\n    responses.add_callback('GET', 'http://mockhost/.foo', callback=request_callback)\r\n    resp = requests.get('http://mockhost/.foo')\r\n    assert resp.headers['content-type'] == 'application/json'\r\n```\r\n\r\nThis test succeeds on 0.10.7, and fails on 0.10.8.\r\n\r\nThis may be the root cause behind #292, but that ticket contains insufficient details to confirm this suspicion, so I created a new ticket instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/304", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/304/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/304/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/304/events", "html_url": "https://github.com/getsentry/responses/issues/304", "id": 555797723, "node_id": "MDU6SXNzdWU1NTU3OTc3MjM=", "number": 304, "title": "AttributeError when trying to use responses", "user": {"login": "XenGi", "id": 1043980, "node_id": "MDQ6VXNlcjEwNDM5ODA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1043980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XenGi", "html_url": "https://github.com/XenGi", "followers_url": "https://api.github.com/users/XenGi/followers", "following_url": "https://api.github.com/users/XenGi/following{/other_user}", "gists_url": "https://api.github.com/users/XenGi/gists{/gist_id}", "starred_url": "https://api.github.com/users/XenGi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XenGi/subscriptions", "organizations_url": "https://api.github.com/users/XenGi/orgs", "repos_url": "https://api.github.com/users/XenGi/repos", "events_url": "https://api.github.com/users/XenGi/events{/privacy}", "received_events_url": "https://api.github.com/users/XenGi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-27T19:56:18Z", "updated_at": "2020-01-27T20:03:00Z", "closed_at": "2020-01-27T20:03:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ python -V\r\nPython 3.8.1\r\n```\r\n\r\n```\r\n$ pip freeze\r\nattrs==19.3.0\r\ncertifi==2019.11.28\r\nchardet==3.0.4\r\nidna==2.8\r\nmore-itertools==8.1.0\r\npackaging==20.1\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.6\r\npytest==5.3.4\r\nrequests==2.22.0\r\nresponses==0.10.9\r\nsix==1.14.0\r\nurllib3==1.25.8\r\nwcwidth==0.1.8\r\n```\r\n\r\n`account.py`:\r\n```python\r\nfrom typing import Dict\r\n\r\nimport requests\r\n\r\n\r\ndef obtain_captcha() -> Dict:\r\n    \"\"\"\r\n    Gets a captcha from desec API.\r\n\r\n    :return:\r\n    \"\"\"\r\n    r = requests.post('https://desec.io/api/v1/captcha/')\r\n    if r.status_code == 200:\r\n        return r.json()\r\n    else:\r\n        raise Exception('Couldn\\'t retrieve captcha')\r\n```\r\n\r\n`test_account.py`:\r\n```python\r\nimport responses\r\n\r\nfrom desec_dns_cli.account import obtain_captcha\r\n\r\n@responses.activate\r\ndef test_optain_captcha():\r\n    json = {'id': 'foo', 'challenge': 'bar'},\r\n    url = 'https://desec.io/api/v1/captcha/',\r\n    responses.add(\r\n        method=responses.POST,\r\n        url=url,\r\n        json=json,\r\n        status=200\r\n    )\r\n\r\n    resp = obtain_captcha()\r\n\r\n    assert resp == json\r\n    assert responses.calls[0].request.url == url\r\n    assert responses.calls[0].response.text == str(json)\r\n```\r\n\r\n```\r\n$ pytest\r\n=== test session starts ===\r\nplatform linux -- Python 3.8.1, pytest-5.3.4, py-1.8.1, pluggy-0.13.1\r\nrootdir: /home/xengi/projects/desec-dns-cli\r\ncollected 1 item                                                                         \r\n\r\ntests/test_account.py F                                                            [100%]\r\n=== FAILURES ===\r\n___ test_optain_captcha ___\r\n    @responses.activate\r\n    def test_optain_captcha():\r\n        json = {'id': 'foo', 'challenge': 'bar'},\r\n        url = 'https://desec.io/api/v1/captcha/',\r\n>       responses.add(\r\n            method=responses.POST,\r\n            url=url,\r\n            json=json,\r\n            status=200\r\n        )\r\ntests/test_account.py:9:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../../.pyvenvs/desec-dns-cli/lib/python3.8/site-packages/responses.py:526: in add\r\n    self._matches.append(Response(method=method, url=url, body=body, **kwargs))\r\n../../.pyvenvs/desec-dns-cli/lib/python3.8/site-packages/responses.py:369: in __init__\r\n    super(Response, self).__init__(method, url, **kwargs)\r\n../../.pyvenvs/desec-dns-cli/lib/python3.8/site-packages/responses.py:242: in __init__\r\n    self.match_querystring = self._should_match_querystring(match_querystring)\r\n../../.pyvenvs/desec-dns-cli/lib/python3.8/site-packages/responses.py:293: in _should_match_querystring\r\n    return bool(urlparse(self.url).query)\r\n/usr/lib64/python3.8/urllib/parse.py:372: in urlparse\r\n    url, scheme, _coerce_result = _coerce_args(url, scheme)\r\n/usr/lib64/python3.8/urllib/parse.py:124: in _coerce_args\r\n    return _decode_args(args) + (_encode_result,)\r\n/usr/lib64/python3.8/urllib/parse.py:108: in _decode_args\r\n    return tuple(x.decode(encoding, errors) if x else '' for x in args)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n.0 = <tuple_iterator object at 0x7f4d9c700670>\r\n\r\n>   return tuple(x.decode(encoding, errors) if x else '' for x in args)\r\nE   AttributeError: 'tuple' object has no attribute 'decode'\r\n\r\n/usr/lib64/python3.8/urllib/parse.py:108: AttributeError\r\n=== 1 failed in 0.15s ===\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/297", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/297/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/297/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/297/events", "html_url": "https://github.com/getsentry/responses/issues/297", "id": 550328521, "node_id": "MDU6SXNzdWU1NTAzMjg1MjE=", "number": 297, "title": "RequestsMock._on_request misses calls if callback raises BaseException", "user": {"login": "ulope", "id": 55078, "node_id": "MDQ6VXNlcjU1MDc4", "avatar_url": "https://avatars0.githubusercontent.com/u/55078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ulope", "html_url": "https://github.com/ulope", "followers_url": "https://api.github.com/users/ulope/followers", "following_url": "https://api.github.com/users/ulope/following{/other_user}", "gists_url": "https://api.github.com/users/ulope/gists{/gist_id}", "starred_url": "https://api.github.com/users/ulope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ulope/subscriptions", "organizations_url": "https://api.github.com/users/ulope/orgs", "repos_url": "https://api.github.com/users/ulope/repos", "events_url": "https://api.github.com/users/ulope/events{/privacy}", "received_events_url": "https://api.github.com/users/ulope/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-15T17:30:15Z", "updated_at": "2020-01-28T02:20:50Z", "closed_at": "2020-01-28T02:20:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In case a `BaseException` (or a subclass) is raised in the `get_response()` method of a match object (e.g. in a callback) the call accounting isn't updated for that call.\r\n\r\nThis then leads to test failures due to `Not all requests have been executed`.\r\n\r\nThe reason is that only `Exception`s are expected:\r\nhttps://github.com/getsentry/responses/blob/8b0b9c1883c1242246af3dd535df79bfb071732a/responses.py#L642-L648\r\n\r\nI noticed this in the context of `gevent` and its `Timeout` feature which raises an exception inherited from `BaseException`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/292", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/292/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/292/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/292/events", "html_url": "https://github.com/getsentry/responses/issues/292", "id": 544861156, "node_id": "MDU6SXNzdWU1NDQ4NjExNTY=", "number": 292, "title": "getting an error in version 0.10.9 which is solved if I downgrade to 0.10.7", "user": {"login": "prakashselvam", "id": 14314895, "node_id": "MDQ6VXNlcjE0MzE0ODk1", "avatar_url": "https://avatars0.githubusercontent.com/u/14314895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prakashselvam", "html_url": "https://github.com/prakashselvam", "followers_url": "https://api.github.com/users/prakashselvam/followers", "following_url": "https://api.github.com/users/prakashselvam/following{/other_user}", "gists_url": "https://api.github.com/users/prakashselvam/gists{/gist_id}", "starred_url": "https://api.github.com/users/prakashselvam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prakashselvam/subscriptions", "organizations_url": "https://api.github.com/users/prakashselvam/orgs", "repos_url": "https://api.github.com/users/prakashselvam/repos", "events_url": "https://api.github.com/users/prakashselvam/events{/privacy}", "received_events_url": "https://api.github.com/users/prakashselvam/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-01-03T05:56:05Z", "updated_at": "2020-08-11T02:44:20Z", "closed_at": "2020-08-11T02:44:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "self = <RequestsCookieJar[]>, response = <requests.cookies.MockResponse object at 0x7f45f4e76f60>, request = <requests.cookies.MockRequest object at 0x7f45f4e76e48>\r\n\r\n    def make_cookies(self, response, request):\r\n        \"\"\"Return sequence of Cookie objects extracted from response object.\"\"\"\r\n        # get cookie-attributes for RFC 2965 and Netscape protocols\r\n        headers = response.info()\r\n>       rfc2965_hdrs = headers.get_all(\"Set-Cookie2\", [])\r\nE       AttributeError: 'HTTPHeaderDict' object has no attribute 'get_all'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/290", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/290/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/290/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/290/events", "html_url": "https://github.com/getsentry/responses/issues/290", "id": 539088021, "node_id": "MDU6SXNzdWU1MzkwODgwMjE=", "number": 290, "title": "0.10.8 release adds \"text/plain\" content type to the headers", "user": {"login": "cverna", "id": 7237866, "node_id": "MDQ6VXNlcjcyMzc4NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/7237866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cverna", "html_url": "https://github.com/cverna", "followers_url": "https://api.github.com/users/cverna/followers", "following_url": "https://api.github.com/users/cverna/following{/other_user}", "gists_url": "https://api.github.com/users/cverna/gists{/gist_id}", "starred_url": "https://api.github.com/users/cverna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cverna/subscriptions", "organizations_url": "https://api.github.com/users/cverna/orgs", "repos_url": "https://api.github.com/users/cverna/repos", "events_url": "https://api.github.com/users/cverna/events{/privacy}", "received_events_url": "https://api.github.com/users/cverna/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-12-17T14:07:27Z", "updated_at": "2019-12-20T01:50:24Z", "closed_at": "2019-12-20T01:50:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some tests that started to break with the 0.10.8 release. This release happens the \"text/plain\" content-type to my responses.\r\nAt the time to register the callback I do not know which content-type I ll need to return, the content type is populated during the execution of the callback. Responses seems to extend the headers with the default value \"text/plain\" instead of replacing it by the headers created during the callback.\r\n\r\nTests https://github.com/fedora-infra/bodhi/blob/develop/bodhi/tests/server/scripts/test_skopeo_lite.py#L170", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/289", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/289/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/289/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/289/events", "html_url": "https://github.com/getsentry/responses/issues/289", "id": 537293879, "node_id": "MDU6SXNzdWU1MzcyOTM4Nzk=", "number": 289, "title": "responses 0.10.8 introduces an implicit dependency on urllib3>=1.23", "user": {"login": "ksolan", "id": 2507804, "node_id": "MDQ6VXNlcjI1MDc4MDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2507804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksolan", "html_url": "https://github.com/ksolan", "followers_url": "https://api.github.com/users/ksolan/followers", "following_url": "https://api.github.com/users/ksolan/following{/other_user}", "gists_url": "https://api.github.com/users/ksolan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksolan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksolan/subscriptions", "organizations_url": "https://api.github.com/users/ksolan/orgs", "repos_url": "https://api.github.com/users/ksolan/repos", "events_url": "https://api.github.com/users/ksolan/events{/privacy}", "received_events_url": "https://api.github.com/users/ksolan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-12-13T01:03:44Z", "updated_at": "2019-12-20T01:50:22Z", "closed_at": "2019-12-20T01:50:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "responses 0.10.8 introduces these blocks:\r\nhttps://github.com/getsentry/responses/blob/2d5d9f5ec33f168f097bb92f99243f18f264184c/responses.py#L382-L386\r\n\r\nThe `msg` param was not introduced until urllib3 1.23. \r\n\r\n`requests` itself permits any `urllib3>=1.21.1,<1.26,!=1.25.0,!=1.25.1`. If `responses` is run in an env with `urllib3<1.23`, this error gets thrown: \r\n```\r\n    def get_response(self, request):\r\n        if self.body and isinstance(self.body, Exception):\r\n            raise self.body\r\n    \r\n        headers = self.get_headers()\r\n        status = self.status\r\n        body = _handle_body(self.body)\r\n    \r\n        # The requests library's cookie handling depends on the response object\r\n        # having an original response object with the headers as the `msg`, so\r\n        # we give it what it needs.\r\n        orig_response = HTTPResponse(\r\n            body=body,  # required to avoid \"ValueError: Unable to determine whether fp is closed.\"\r\n            msg=headers,\r\n>           preload_content=False,\r\n        )\r\nE       TypeError: __init__() got an unexpected keyword argument 'msg'\r\n```\r\n\r\nPerhaps these new blocks can be modified to avoid `msg`? ~~Or a hard requirement for urllib3>=1.23 could be added to the responses setup.py?~~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/287", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/287/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/287/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/287/events", "html_url": "https://github.com/getsentry/responses/issues/287", "id": 523905672, "node_id": "MDU6SXNzdWU1MjM5MDU2NzI=", "number": 287, "title": "How to verify that response is never called without triggering AssertionError: Not all requests have been executed?", "user": {"login": "pgodzin", "id": 4601840, "node_id": "MDQ6VXNlcjQ2MDE4NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4601840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pgodzin", "html_url": "https://github.com/pgodzin", "followers_url": "https://api.github.com/users/pgodzin/followers", "following_url": "https://api.github.com/users/pgodzin/following{/other_user}", "gists_url": "https://api.github.com/users/pgodzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pgodzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pgodzin/subscriptions", "organizations_url": "https://api.github.com/users/pgodzin/orgs", "repos_url": "https://api.github.com/users/pgodzin/repos", "events_url": "https://api.github.com/users/pgodzin/events{/privacy}", "received_events_url": "https://api.github.com/users/pgodzin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-16T22:45:51Z", "updated_at": "2019-11-17T15:37:25Z", "closed_at": "2019-11-17T15:37:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to verify in a test that a request is never even made:\r\n\r\n```\r\nrsps.add(responses.GET, video_segments_url, json={}, status=200)\r\n...\r\nassert len(rsps.calls) == 0\r\n```\r\nHowever, at the end of the test, the responses library throws `AssertionError: Not all requests have been executed` since the added response was never called.\r\n\r\nIs there a good way to clear the list of responses expected to be executed to avoid the AssertionError?  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/277", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/277/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/277/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/277/events", "html_url": "https://github.com/getsentry/responses/issues/277", "id": 495269407, "node_id": "MDU6SXNzdWU0OTUyNjk0MDc=", "number": 277, "title": "\"clear\" mentioned in docs, but doesn't exist", "user": {"login": "JoelBennett", "id": 3631501, "node_id": "MDQ6VXNlcjM2MzE1MDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3631501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelBennett", "html_url": "https://github.com/JoelBennett", "followers_url": "https://api.github.com/users/JoelBennett/followers", "following_url": "https://api.github.com/users/JoelBennett/following{/other_user}", "gists_url": "https://api.github.com/users/JoelBennett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelBennett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelBennett/subscriptions", "organizations_url": "https://api.github.com/users/JoelBennett/orgs", "repos_url": "https://api.github.com/users/JoelBennett/repos", "events_url": "https://api.github.com/users/JoelBennett/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelBennett/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-18T14:38:20Z", "updated_at": "2019-09-19T01:35:27Z", "closed_at": "2019-09-19T01:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "The readme mentions the following:\r\n\r\n```Finally, ``clear`` will reset all registered responses.```\r\n\r\nHowever there's no actual corresponding \"clear\" function defined anywhere in the project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/271", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/271/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/271/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/271/events", "html_url": "https://github.com/getsentry/responses/issues/271", "id": 457072757, "node_id": "MDU6SXNzdWU0NTcwNzI3NTc=", "number": 271, "title": "Feature Request: Return requested params in responses.calls[].request", "user": {"login": "aneuway2", "id": 23339146, "node_id": "MDQ6VXNlcjIzMzM5MTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/23339146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aneuway2", "html_url": "https://github.com/aneuway2", "followers_url": "https://api.github.com/users/aneuway2/followers", "following_url": "https://api.github.com/users/aneuway2/following{/other_user}", "gists_url": "https://api.github.com/users/aneuway2/gists{/gist_id}", "starred_url": "https://api.github.com/users/aneuway2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aneuway2/subscriptions", "organizations_url": "https://api.github.com/users/aneuway2/orgs", "repos_url": "https://api.github.com/users/aneuway2/repos", "events_url": "https://api.github.com/users/aneuway2/events{/privacy}", "received_events_url": "https://api.github.com/users/aneuway2/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106762, "node_id": "MDU6TGFiZWw2NjEwNjc2Mg==", "url": "https://api.github.com/repos/getsentry/responses/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-17T17:54:43Z", "updated_at": "2020-01-30T15:33:08Z", "closed_at": "2020-01-30T15:33:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to as discussed in #148 , when using the params parameter in requests, I need to set `match_querystring=False` to ignore the query string:\r\n\r\n```\r\nresponses.add(\r\n    method=responses.GET,\r\n    url=\"http://example.com?hello=world,\r\n    json={\"response\": \"response\"},\r\n    status=200,\r\n    match_querystring=False,\r\n)\r\nreq = requests.get('http://example.com', params={\"hello\": \"world\"})\r\n```\r\n\r\nThis returns a list of calls where I can get the requested URL:\r\n```\r\nprint(requests.calls[0].request.url)\r\n> http://example.com\r\n```\r\n\r\nHowever, theres no way to see what the original params passed in the original `request`. It would be nice to be able to also do something like the following so that I can very what the parameters are that were passed in the request:\r\n\r\n```\r\nprint(requests.calls[0].request.params)\r\n> {\"hello\": \"world\"}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/270", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/270/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/270/events", "html_url": "https://github.com/getsentry/responses/issues/270", "id": 453794954, "node_id": "MDU6SXNzdWU0NTM3OTQ5NTQ=", "number": 270, "title": "assert not printing to console", "user": {"login": "quangas", "id": 16985574, "node_id": "MDQ6VXNlcjE2OTg1NTc0", "avatar_url": "https://avatars1.githubusercontent.com/u/16985574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quangas", "html_url": "https://github.com/quangas", "followers_url": "https://api.github.com/users/quangas/followers", "following_url": "https://api.github.com/users/quangas/following{/other_user}", "gists_url": "https://api.github.com/users/quangas/gists{/gist_id}", "starred_url": "https://api.github.com/users/quangas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quangas/subscriptions", "organizations_url": "https://api.github.com/users/quangas/orgs", "repos_url": "https://api.github.com/users/quangas/repos", "events_url": "https://api.github.com/users/quangas/events{/privacy}", "received_events_url": "https://api.github.com/users/quangas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-08T13:38:43Z", "updated_at": "2019-06-08T16:33:44Z", "closed_at": "2019-06-08T16:33:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running python 3.7.2 with a following sample:\r\n\r\n```\r\nimport responses\r\nimport requests\r\n\r\n@responses.activate\r\ndef test_simple():\r\n  responses.add(responses.GET, 'http://twitter.com/api/1/foobar', json={'error': 'not found'}, status=404)\r\n\r\n  resp = requests.get('http://twitter.com/api/1/foobar')\r\n\r\n  assert resp.json() == {\"error\": \"not found\"}\r\n\r\n  assert len(responses.calls) == 1\r\n  assert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'\r\n  assert responses.calls[0].response.text == '{\"error\": \"not found\"}'\r\n\r\ntest_simple()\r\n```\r\n\r\nNothing is printed to the console, any ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/265", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/265/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/265/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/265/events", "html_url": "https://github.com/getsentry/responses/issues/265", "id": 428957101, "node_id": "MDU6SXNzdWU0Mjg5NTcxMDE=", "number": 265, "title": "Docker API Connection refused when running pytest", "user": {"login": "vkartik97", "id": 3920286, "node_id": "MDQ6VXNlcjM5MjAyODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3920286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vkartik97", "html_url": "https://github.com/vkartik97", "followers_url": "https://api.github.com/users/vkartik97/followers", "following_url": "https://api.github.com/users/vkartik97/following{/other_user}", "gists_url": "https://api.github.com/users/vkartik97/gists{/gist_id}", "starred_url": "https://api.github.com/users/vkartik97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vkartik97/subscriptions", "organizations_url": "https://api.github.com/users/vkartik97/orgs", "repos_url": "https://api.github.com/users/vkartik97/repos", "events_url": "https://api.github.com/users/vkartik97/events{/privacy}", "received_events_url": "https://api.github.com/users/vkartik97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-03T20:21:34Z", "updated_at": "2019-04-05T17:46:16Z", "closed_at": "2019-04-05T17:46:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working on an application where I am using Docker to push and image:\r\n```python\r\n    .\r\n    .\r\n    .\r\n    docker_client = docker.from_env()\r\n    a = docker_client.containers.list()                 #Error on this line\r\n```\r\nI am getting \r\n```\r\n<Result ConnectionError('Connection refused: GET http+docker://localhost/v1.35/containers/json?limit=-1&all=0&size=0&trunc_cmd=0',)>.exit_code\r\n```\r\n when running \r\n```sh\r\n$ py.test -s --cov . --cov-config .coveragerc\r\n```\r\nbut is working perfectly when executing using `$ python file.py`\r\n\r\nThis issue seems due to using responses in tests.\r\nHow do I add exception to all requests to `http+docker`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/264", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/264/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/264/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/264/events", "html_url": "https://github.com/getsentry/responses/issues/264", "id": 425558308, "node_id": "MDU6SXNzdWU0MjU1NTgzMDg=", "number": 264, "title": "ability to pass a regex to add_passthru ", "user": {"login": "cleder", "id": 1218010, "node_id": "MDQ6VXNlcjEyMTgwMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1218010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cleder", "html_url": "https://github.com/cleder", "followers_url": "https://api.github.com/users/cleder/followers", "following_url": "https://api.github.com/users/cleder/following{/other_user}", "gists_url": "https://api.github.com/users/cleder/gists{/gist_id}", "starred_url": "https://api.github.com/users/cleder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cleder/subscriptions", "organizations_url": "https://api.github.com/users/cleder/orgs", "repos_url": "https://api.github.com/users/cleder/repos", "events_url": "https://api.github.com/users/cleder/events{/privacy}", "received_events_url": "https://api.github.com/users/cleder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106762, "node_id": "MDU6TGFiZWw2NjEwNjc2Mg==", "url": "https://api.github.com/repos/getsentry/responses/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-26T17:40:13Z", "updated_at": "2020-01-21T17:03:04Z", "closed_at": "2020-01-21T17:03:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "e.g:\r\n`responses.add_passthru(re.compile(r'http(s?):\\/\\/(\\w+)(:*)(\\d*)\\/api\\/v1\\/activities\\/'))` \r\nso that calls to any domain[:port] with this request path may call the upstream server.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/263", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/263/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/263/events", "html_url": "https://github.com/getsentry/responses/issues/263", "id": 424043188, "node_id": "MDU6SXNzdWU0MjQwNDMxODg=", "number": 263, "title": "RequestsMock has no attribute replace on python 3.6", "user": {"login": "j-elmer123", "id": 8566597, "node_id": "MDQ6VXNlcjg1NjY1OTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/8566597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-elmer123", "html_url": "https://github.com/j-elmer123", "followers_url": "https://api.github.com/users/j-elmer123/followers", "following_url": "https://api.github.com/users/j-elmer123/following{/other_user}", "gists_url": "https://api.github.com/users/j-elmer123/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-elmer123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-elmer123/subscriptions", "organizations_url": "https://api.github.com/users/j-elmer123/orgs", "repos_url": "https://api.github.com/users/j-elmer123/repos", "events_url": "https://api.github.com/users/j-elmer123/events{/privacy}", "received_events_url": "https://api.github.com/users/j-elmer123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-22T04:34:43Z", "updated_at": "2019-03-23T03:52:55Z", "closed_at": "2019-03-23T03:52:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why `RequestsMock` has less attributes and doesn't have attribute `replace` in python 3.6?\r\n\r\n`RequestsMock` attributes on python 2.7\r\n```shell\r\n['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', '__class__', '__delattr__', '__dict__', '__doc__', '__enter__', '__exit__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_calls', '_find_match', '_matches', '_on_request', '_patcher', 'activate', 'add', 'add_callback', 'add_passthru', 'assert_all_requests_are_fired', 'calls', 'passthru_prefixes', 'remove', 'replace', 'reset', 'response_callback', 'start', 'stop', 'target']\r\n```\r\n\r\n`RequestsMock` attributes on python 3.6\r\n```shell\r\n['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_calls', '_find_match', '_has_strict_url_match', '_has_url_match', '_on_request', '_patcher', '_urls', 'activate', 'add', 'add_callback', 'assert_all_requests_are_fired', 'calls', 'reset', 'start', 'stop']\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/258", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/258/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/258/events", "html_url": "https://github.com/getsentry/responses/issues/258", "id": 413615771, "node_id": "MDU6SXNzdWU0MTM2MTU3NzE=", "number": 258, "title": "CHANGES file missing release notes for 0.10.5", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-02-22T23:15:07Z", "updated_at": "2019-03-15T02:23:04Z", "closed_at": "2019-03-15T02:23:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just FYI.  :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/257", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/257/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/257/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/257/events", "html_url": "https://github.com/getsentry/responses/issues/257", "id": 410466980, "node_id": "MDU6SXNzdWU0MTA0NjY5ODA=", "number": 257, "title": "Support urllib3 stand alone?", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-14T19:58:29Z", "updated_at": "2019-02-22T23:16:25Z", "closed_at": "2019-02-22T23:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would you be interested in accepting a patch so that responses would work with urllib3 stand-alone?  I realize #226 got closed, but I see that supporting urllib3 by itself doesn't actually look that hard:\r\n\r\nhttps://github.com/venmo/responses/commits/urllib-support\r\nhttps://github.com/florentx/urllib3-mock\r\n\r\nAs I'm going to need to do some work to support this for a customer, if you are open to it, I'd be happy to submit a PR for support so I don't have to continue rebasing against responses.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/256", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/256/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/256/events", "html_url": "https://github.com/getsentry/responses/issues/256", "id": 408503273, "node_id": "MDU6SXNzdWU0MDg1MDMyNzM=", "number": 256, "title": "test_responses.py should not be in py_modules", "user": {"login": "jayvdb", "id": 15092, "node_id": "MDQ6VXNlcjE1MDky", "avatar_url": "https://avatars1.githubusercontent.com/u/15092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayvdb", "html_url": "https://github.com/jayvdb", "followers_url": "https://api.github.com/users/jayvdb/followers", "following_url": "https://api.github.com/users/jayvdb/following{/other_user}", "gists_url": "https://api.github.com/users/jayvdb/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayvdb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayvdb/subscriptions", "organizations_url": "https://api.github.com/users/jayvdb/orgs", "repos_url": "https://api.github.com/users/jayvdb/repos", "events_url": "https://api.github.com/users/jayvdb/events{/privacy}", "received_events_url": "https://api.github.com/users/jayvdb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-10T05:36:04Z", "updated_at": "2019-03-11T00:52:37Z", "closed_at": "2019-03-11T00:52:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "test_responses.py was added to py_modules to solve #98 , but it should have instead been added to MANIFEST.in , as the test module is not needed to use `responses`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/252", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/252/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/252/events", "html_url": "https://github.com/getsentry/responses/issues/252", "id": 401730064, "node_id": "MDU6SXNzdWU0MDE3MzAwNjQ=", "number": 252, "title": "View/modify registered responses?", "user": {"login": "ptink", "id": 5045679, "node_id": "MDQ6VXNlcjUwNDU2Nzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/5045679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptink", "html_url": "https://github.com/ptink", "followers_url": "https://api.github.com/users/ptink/followers", "following_url": "https://api.github.com/users/ptink/following{/other_user}", "gists_url": "https://api.github.com/users/ptink/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptink/subscriptions", "organizations_url": "https://api.github.com/users/ptink/orgs", "repos_url": "https://api.github.com/users/ptink/repos", "events_url": "https://api.github.com/users/ptink/events{/privacy}", "received_events_url": "https://api.github.com/users/ptink/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106764, "node_id": "MDU6TGFiZWw2NjEwNjc2NA==", "url": "https://api.github.com/repos/getsentry/responses/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-22T11:55:39Z", "updated_at": "2019-01-22T15:14:31Z", "closed_at": "2019-01-22T15:13:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the sense that I'm not using the library correctly but I have a list of several \"default\" responses that I want to be registered for most test cases. I'm using the `ResponsesMixin` from [here](https://github.com/getsentry/responses/issues/31) but this comes with its own set of issues for example if I want to override just one of the registered responses for a test there doesn't seem to be a good way to do that- also I could not find a way to inspect the list of all currently registered responses inside a test.\r\n\r\nIs this sort of behavior outside the scope of this project or is it possible and the documentation could be expanded to include this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/242", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/242/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/242/events", "html_url": "https://github.com/getsentry/responses/issues/242", "id": 392330292, "node_id": "MDU6SXNzdWUzOTIzMzAyOTI=", "number": 242, "title": "Documentation update; dynamic URLs", "user": {"login": "r0fls", "id": 1858004, "node_id": "MDQ6VXNlcjE4NTgwMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1858004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r0fls", "html_url": "https://github.com/r0fls", "followers_url": "https://api.github.com/users/r0fls/followers", "following_url": "https://api.github.com/users/r0fls/following{/other_user}", "gists_url": "https://api.github.com/users/r0fls/gists{/gist_id}", "starred_url": "https://api.github.com/users/r0fls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r0fls/subscriptions", "organizations_url": "https://api.github.com/users/r0fls/orgs", "repos_url": "https://api.github.com/users/r0fls/repos", "events_url": "https://api.github.com/users/r0fls/events{/privacy}", "received_events_url": "https://api.github.com/users/r0fls/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106764, "node_id": "MDU6TGFiZWw2NjEwNjc2NA==", "url": "https://api.github.com/repos/getsentry/responses/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-18T20:50:51Z", "updated_at": "2018-12-21T02:14:40Z", "closed_at": "2018-12-21T02:14:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't see anything about handling dynamic URLs in the documentation. Is that supported? For example, in the Gitlab API endpoint here the `:id` is dynamic:\r\n\r\n```\r\nhttps://gitlab.example.com/api/v4/groups/:id/members\r\n```\r\n\r\nWill I just need to hardcode something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/236", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/236/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/236/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/236/events", "html_url": "https://github.com/getsentry/responses/issues/236", "id": 388350114, "node_id": "MDU6SXNzdWUzODgzNTAxMTQ=", "number": 236, "title": "Feature Request: add 'assert_any_call', 'assert_called_once', ... helper methods", "user": {"login": "bcollazo", "id": 982382, "node_id": "MDQ6VXNlcjk4MjM4Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/982382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcollazo", "html_url": "https://github.com/bcollazo", "followers_url": "https://api.github.com/users/bcollazo/followers", "following_url": "https://api.github.com/users/bcollazo/following{/other_user}", "gists_url": "https://api.github.com/users/bcollazo/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcollazo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcollazo/subscriptions", "organizations_url": "https://api.github.com/users/bcollazo/orgs", "repos_url": "https://api.github.com/users/bcollazo/repos", "events_url": "https://api.github.com/users/bcollazo/events{/privacy}", "received_events_url": "https://api.github.com/users/bcollazo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106762, "node_id": "MDU6TGFiZWw2NjEwNjc2Mg==", "url": "https://api.github.com/repos/getsentry/responses/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-06T18:55:33Z", "updated_at": "2020-05-26T18:55:01Z", "closed_at": "2020-05-26T18:55:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now, to assert calls were made as expected one must explicitly state the _index_ of the call.\r\n```\r\nassert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'\r\nassert responses.calls[0].response.text == '{\"error\": \"not found\"}'\r\n```\r\n\r\nThis can make for brittle tests, since sometimes the _order_ in which calls are made doesn't really matter. \r\n\r\nIt'd be nice if the library provided methods like mock's [assert_any_call](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_any_call), [assert_called_once](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once), ... so that one can write tests that do not depend in the _order_ in which calls are made (implementation details).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/234", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/234/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/234/events", "html_url": "https://github.com/getsentry/responses/issues/234", "id": 387911631, "node_id": "MDU6SXNzdWUzODc5MTE2MzE=", "number": 234, "title": "callback results are not unpacked prior to checking for exception bodies", "user": {"login": "jsirois", "id": 157586, "node_id": "MDQ6VXNlcjE1NzU4Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/157586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsirois", "html_url": "https://github.com/jsirois", "followers_url": "https://api.github.com/users/jsirois/followers", "following_url": "https://api.github.com/users/jsirois/following{/other_user}", "gists_url": "https://api.github.com/users/jsirois/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsirois/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsirois/subscriptions", "organizations_url": "https://api.github.com/users/jsirois/orgs", "repos_url": "https://api.github.com/users/jsirois/repos", "events_url": "https://api.github.com/users/jsirois/events{/privacy}", "received_events_url": "https://api.github.com/users/jsirois/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-05T19:33:56Z", "updated_at": "2018-12-11T23:58:18Z", "closed_at": "2018-12-11T23:58:18Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This means the way to mock an error for a callback differs from the way to mock andd error for standard use. Presumably this is not desired - it is not documented at any rate.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/233", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/233/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/233/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/233/events", "html_url": "https://github.com/getsentry/responses/issues/233", "id": 381657946, "node_id": "MDU6SXNzdWUzODE2NTc5NDY=", "number": 233, "title": "\"%2E\" in url leads to ConnectionError", "user": {"login": "kelvan", "id": 611853, "node_id": "MDQ6VXNlcjYxMTg1Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/611853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kelvan", "html_url": "https://github.com/kelvan", "followers_url": "https://api.github.com/users/kelvan/followers", "following_url": "https://api.github.com/users/kelvan/following{/other_user}", "gists_url": "https://api.github.com/users/kelvan/gists{/gist_id}", "starred_url": "https://api.github.com/users/kelvan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kelvan/subscriptions", "organizations_url": "https://api.github.com/users/kelvan/orgs", "repos_url": "https://api.github.com/users/kelvan/repos", "events_url": "https://api.github.com/users/kelvan/events{/privacy}", "received_events_url": "https://api.github.com/users/kelvan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2018-11-16T15:57:02Z", "updated_at": "2018-12-17T19:39:19Z", "closed_at": "2018-12-17T19:39:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems responses and requests do unescaping differently", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/232", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/232/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/232/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/232/events", "html_url": "https://github.com/getsentry/responses/issues/232", "id": 381223335, "node_id": "MDU6SXNzdWUzODEyMjMzMzU=", "number": 232, "title": "Cannot get dynamic response to work", "user": {"login": "pcolmer", "id": 1979931, "node_id": "MDQ6VXNlcjE5Nzk5MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1979931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcolmer", "html_url": "https://github.com/pcolmer", "followers_url": "https://api.github.com/users/pcolmer/followers", "following_url": "https://api.github.com/users/pcolmer/following{/other_user}", "gists_url": "https://api.github.com/users/pcolmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcolmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcolmer/subscriptions", "organizations_url": "https://api.github.com/users/pcolmer/orgs", "repos_url": "https://api.github.com/users/pcolmer/repos", "events_url": "https://api.github.com/users/pcolmer/events{/privacy}", "received_events_url": "https://api.github.com/users/pcolmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-15T15:51:50Z", "updated_at": "2019-02-11T08:48:59Z", "closed_at": "2019-02-11T08:48:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to write a test for the following piece of code:\r\n\r\n    def process_mfa_totp(self, endpoint, url, statetoken):\r\n        totp_response = self._requests_session.post(\r\n            url,\r\n            headers={'Content-Type': 'application/json',\r\n                     'Accept': 'application/json'},\r\n            data=json.dumps({'stateToken': statetoken,\r\n                             'passCode': response})\r\n        )\r\n        totp_parsed = json.loads(totp_response.text)\r\n\r\nwhere self._requests_session = requests_session. The above is only a small part of the code to highlight the problem I'm having.\r\n\r\nHere is the start of my test code:\r\n\r\n    @responses.activate\r\n    def test_process_mfa_totp():\r\n        def post_callback(request):\r\n            payload = json.loads(request.body)\r\n            assert payload[\"stateToken\"] == \"statetoken\"\r\n            assert payload[\"passCode\"] == \"123456\"\r\n            resp_body = {'sessionToken': \"sessiontoken\"}\r\n            return (200, {}, json.dumps(resp_body))\r\n\r\n        responses.add_callback(\r\n            responses.POST, \"http://url\",\r\n            callback=post_callback,\r\n            content_type=\"application/json\"\r\n        )\r\n\r\n        process_mfa_totp(\"endpoint\", \"http://url\", \"statetoken\")\r\n\r\nHowever, when I then call the code under test, the `json.loads` statement fails with `TypeError: the JSON object must be str, bytes or bytearray, not 'Mock'`.\r\n\r\nI'm concerned that my callback code isn't actually being called. For example, if I put:\r\n\r\n    assert True == False\r\n\r\nin the callback, it doesn't fail at that point.\r\n\r\nWhat am I misunderstanding?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/230", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/230/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/230/events", "html_url": "https://github.com/getsentry/responses/issues/230", "id": 379948981, "node_id": "MDU6SXNzdWUzNzk5NDg5ODE=", "number": 230, "title": "Regression in 0.10.3: SyntaxError during @responses.activate", "user": {"login": "PiDelport", "id": 630271, "node_id": "MDQ6VXNlcjYzMDI3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/630271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PiDelport", "html_url": "https://github.com/PiDelport", "followers_url": "https://api.github.com/users/PiDelport/followers", "following_url": "https://api.github.com/users/PiDelport/following{/other_user}", "gists_url": "https://api.github.com/users/PiDelport/gists{/gist_id}", "starred_url": "https://api.github.com/users/PiDelport/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PiDelport/subscriptions", "organizations_url": "https://api.github.com/users/PiDelport/orgs", "repos_url": "https://api.github.com/users/PiDelport/repos", "events_url": "https://api.github.com/users/PiDelport/events{/privacy}", "received_events_url": "https://api.github.com/users/PiDelport/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 66106760, "node_id": "MDU6TGFiZWw2NjEwNjc2MA==", "url": "https://api.github.com/repos/getsentry/responses/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-11-12T20:56:31Z", "updated_at": "2018-11-15T02:25:37Z", "closed_at": "2018-11-15T02:25:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Upgrading responses from 0.10.2 to 0.10.3 causes pytest's test discovery to fail with the following error:\r\n\r\n```\r\n==================================== ERRORS ====================================\r\n_____________________ ERROR collecting tests/test_foo.py ______________________\r\n\u2026/python3.6/site-packages/_pytest/python.py:450: in _importtestmodule\r\n    mod = self.fspath.pyimport(ensuresyspath=importmode)\r\n\u2026/python3.6/site-packages/py/_path/local.py:668: in pyimport\r\n    __import__(modname)\r\n<frozen importlib._bootstrap>:971: in _find_and_load\r\n    ???\r\n<frozen importlib._bootstrap>:955: in _find_and_load_unlocked\r\n    ???\r\n<frozen importlib._bootstrap>:656: in _load_unlocked\r\n    ???\r\n<frozen importlib._bootstrap>:626: in _load_backward_compatible\r\n    ???\r\n\u2026/python3.6/site-packages/_pytest/assertion/rewrite.py:294: in load_module\r\n    six.exec_(co, mod.__dict__)\r\ntests/test_foo.py:1234: in <module>\r\n    class TestFoo(TestCase):\r\ntests/test_foo.py:1345: in TestFoo\r\n    def test_foo(self) -> None:\r\n\u2026/python3.6/site-packages/responses.py:553: in activate\r\n    return get_wrapped(func, self)\r\n\u2026/python3.6/site-packages/responses.py:158: in get_wrapped\r\n    evaldict,\r\nE     File \"<string>\", line 3\r\nE       return func(self) -> None\r\nE                          ^\r\nE   SyntaxError: invalid syntax\r\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\r\n=========================== 1 error in 6.21 seconds ============================\r\n```\r\n\r\nReverting back to 0.10.2 avoids the error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/226", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/226/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/226/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/226/events", "html_url": "https://github.com/getsentry/responses/issues/226", "id": 374409007, "node_id": "MDU6SXNzdWUzNzQ0MDkwMDc=", "number": 226, "title": "Usage with urllib3", "user": {"login": "POD666", "id": 5798108, "node_id": "MDQ6VXNlcjU3OTgxMDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5798108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/POD666", "html_url": "https://github.com/POD666", "followers_url": "https://api.github.com/users/POD666/followers", "following_url": "https://api.github.com/users/POD666/following{/other_user}", "gists_url": "https://api.github.com/users/POD666/gists{/gist_id}", "starred_url": "https://api.github.com/users/POD666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/POD666/subscriptions", "organizations_url": "https://api.github.com/users/POD666/orgs", "repos_url": "https://api.github.com/users/POD666/repos", "events_url": "https://api.github.com/users/POD666/events{/privacy}", "received_events_url": "https://api.github.com/users/POD666/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-26T14:27:49Z", "updated_at": "2018-10-26T16:25:27Z", "closed_at": "2018-10-26T16:25:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a package generated by [openapi-generator](https://github.com/OpenAPITools/openapi-generator). It [uses](https://github.com/OpenAPITools/openapi-generator/blob/master/samples/client/petstore/python/petstore_api/rest.py#L97) urllib3 to make requests.\r\nI have tried to specify target for `RequestsMock`:\r\n```\r\n...\r\nwith responses.RequestsMock(target=\"urllib3.PoolManager.request\") as rsps:\r\n    rsps.add(responses.GET, settings.DOCSTORE_URL + '/doc/fake_id/', json=resp_body)\r\n    ...\r\n```\r\nBut it fails with the following error:\r\n```\r\n...\r\nadapter = <urllib3.poolmanager.PoolManager object at 0x7f7d11d525c0>, request = 'GET', a = ('http://host.docker.internal:8081/doc/fake_id/',)\r\nkwargs = {'fields': [], 'headers': {'Accept': '*/*', 'Content-Type': 'application/json', 'User-Agent': 'OpenAPI-Generator/1.0.0/python'}, 'preload_content': True, 'timeout': None}\r\n\r\n    def unbound_on_send(adapter, request, *a, **kwargs):\r\n>       return self._on_request(adapter, request, *a, **kwargs)\r\nE       TypeError: _on_request() takes 3 positional arguments but 4 were given\r\n\r\n/usr/local/lib/python3.6/site-packages/responses.py:600: TypeError\r\n```\r\nAny suggestions?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/225", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/225/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/225/events", "html_url": "https://github.com/getsentry/responses/issues/225", "id": 373293357, "node_id": "MDU6SXNzdWUzNzMyOTMzNTc=", "number": 225, "title": "Update ConnectionError message to mention that the error is from Responses", "user": {"login": "danielcompton", "id": 811954, "node_id": "MDQ6VXNlcjgxMTk1NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/811954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcompton", "html_url": "https://github.com/danielcompton", "followers_url": "https://api.github.com/users/danielcompton/followers", "following_url": "https://api.github.com/users/danielcompton/following{/other_user}", "gists_url": "https://api.github.com/users/danielcompton/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcompton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcompton/subscriptions", "organizations_url": "https://api.github.com/users/danielcompton/orgs", "repos_url": "https://api.github.com/users/danielcompton/repos", "events_url": "https://api.github.com/users/danielcompton/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcompton/received_events", "type": "User", "site_admin": true}, "labels": [{"id": 66106762, "node_id": "MDU6TGFiZWw2NjEwNjc2Mg==", "url": "https://api.github.com/repos/getsentry/responses/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-24T03:49:18Z", "updated_at": "2019-02-25T02:03:38Z", "closed_at": "2019-02-25T02:03:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Similar to https://github.com/getsentry/responses/issues/77#issue-97890919, I had a confusing debugging session coming into a project that was using Responses. I was getting ConnectionError messages and found it difficult to work out what was wrong. It could be really useful to provide a custom error message in the ConnectionError that says something like \"ConnectionError: tried to request a URL that doesn't have a Responses mock\".\r\n\r\nI'm not really familiar with the library, so I'm not sure if this exact message makes sense, but I think something like this could be quite helpful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/219", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/219/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/219/events", "html_url": "https://github.com/getsentry/responses/issues/219", "id": 371599979, "node_id": "MDU6SXNzdWUzNzE1OTk5Nzk=", "number": 219, "title": "Wheel missing for responses 0.10.0", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-18T15:57:18Z", "updated_at": "2018-10-18T17:53:27Z", "closed_at": "2018-10-18T17:53:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nThe new 0.10.0 release is currently published as just an sdist:\r\nhttps://pypi.org/project/responses/0.10.0/#files\r\n\r\n...compared to 0.9.0, which was available as both an sdist and a wheel:\r\nhttps://pypi.org/project/responses/0.9.0/#files\r\n\r\n@markstory, please could the wheel be published too?\r\nie: Repeating the same publish step, except this time using the `bdist_wheel` command rather than `sdist`.\r\n\r\nMany thanks :-)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/217", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/217/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/217/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/217/events", "html_url": "https://github.com/getsentry/responses/issues/217", "id": 363280240, "node_id": "MDU6SXNzdWUzNjMyODAyNDA=", "number": 217, "title": "Mocked responses are not persisted beyond setUp", "user": {"login": "brianbao", "id": 7892284, "node_id": "MDQ6VXNlcjc4OTIyODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/7892284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianbao", "html_url": "https://github.com/brianbao", "followers_url": "https://api.github.com/users/brianbao/followers", "following_url": "https://api.github.com/users/brianbao/following{/other_user}", "gists_url": "https://api.github.com/users/brianbao/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianbao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianbao/subscriptions", "organizations_url": "https://api.github.com/users/brianbao/orgs", "repos_url": "https://api.github.com/users/brianbao/repos", "events_url": "https://api.github.com/users/brianbao/events{/privacy}", "received_events_url": "https://api.github.com/users/brianbao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-24T19:05:33Z", "updated_at": "2018-09-24T19:24:29Z", "closed_at": "2018-09-24T19:24:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Any responses mocked in the `setUp` of a Python `TestCase` doesn't persist to tests within the same class. Not sure if this is supposed to happen, but it would be nice to have this feature as a class of tests I run might hit the same API endpoint, for example fetching a token.\r\n\r\nA basic example:\r\n\r\n```\r\nfrom unittest import TestCase\r\n\r\nimport responses\r\nimport requests\r\n\r\nclass Test(TestCase):\r\n    @responses.activate\r\n    def setUp(self):\r\n        responses.add(responses.GET, 'http://twitter.com/api/1/foobar',\r\n                      json={'error': 'not found'}, status=404)\r\n\r\n    @responses.activate\r\n    def test_simple(self):\r\n        resp = requests.get('http://twitter.com/api/1/foobar')\r\n        assert resp.json() == {\"error\": \"not found\"}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\nConnectionError: Connection refused: GET http://twitter.com/api/1/foobar\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/216", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/216/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/216/events", "html_url": "https://github.com/getsentry/responses/issues/216", "id": 361203780, "node_id": "MDU6SXNzdWUzNjEyMDM3ODA=", "number": 216, "title": "Python 3.7: DeprecationWarning from collections ", "user": {"login": "kbakk", "id": 24817039, "node_id": "MDQ6VXNlcjI0ODE3MDM5", "avatar_url": "https://avatars0.githubusercontent.com/u/24817039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbakk", "html_url": "https://github.com/kbakk", "followers_url": "https://api.github.com/users/kbakk/followers", "following_url": "https://api.github.com/users/kbakk/following{/other_user}", "gists_url": "https://api.github.com/users/kbakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbakk/subscriptions", "organizations_url": "https://api.github.com/users/kbakk/orgs", "repos_url": "https://api.github.com/users/kbakk/repos", "events_url": "https://api.github.com/users/kbakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kbakk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-18T09:00:49Z", "updated_at": "2018-10-21T00:46:54Z", "closed_at": "2018-10-21T00:46:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seeing warnings when importing responses in Python 3.7:\r\n\r\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import namedtuple, Sequence, Sized\r\n\r\nA cookies deprecation warning is shown as well, it has been reported earlier in https://github.com/getsentry/responses/issues/186.\r\n\r\n**Steps to reproduce**\r\n\r\nCreate file test_responses.py:\r\n```python\r\nimport warnings\r\nwarnings.filterwarnings(module='.*', action='default')\r\nimport responses\r\n\r\n```\r\n\r\nWith Python 3.7 execute the file and notice the output:\r\n\r\n```\r\n$ python -V\r\nPython 3.7.0\r\n$ python tests/test_responses.py\r\n/Users/kristofferb/.testvenv/py37responses/lib/python3.7/site-packages/responses.py:11: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  from collections import namedtuple, Sequence, Sized\r\n/Users/kristofferb/.testvenv/py37responses/lib/python3.7/site-packages/cookies.py:312: DeprecationWarning: Flags not at the start of the expression '(?ix)  # Case-insens' (truncated)\r\n  ATTR_RE = re.compile(ATTR)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/211", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/211/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/211/events", "html_url": "https://github.com/getsentry/responses/issues/211", "id": 345194991, "node_id": "MDU6SXNzdWUzNDUxOTQ5OTE=", "number": 211, "title": "Response with query string, but match_querystring=False should raise a warning", "user": {"login": "rbu", "id": 65913, "node_id": "MDQ6VXNlcjY1OTEz", "avatar_url": "https://avatars2.githubusercontent.com/u/65913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbu", "html_url": "https://github.com/rbu", "followers_url": "https://api.github.com/users/rbu/followers", "following_url": "https://api.github.com/users/rbu/following{/other_user}", "gists_url": "https://api.github.com/users/rbu/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbu/subscriptions", "organizations_url": "https://api.github.com/users/rbu/orgs", "repos_url": "https://api.github.com/users/rbu/repos", "events_url": "https://api.github.com/users/rbu/events{/privacy}", "received_events_url": "https://api.github.com/users/rbu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-27T11:41:57Z", "updated_at": "2018-08-03T12:40:56Z", "closed_at": "2018-08-03T12:40:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Problem\r\nI've debugged an unrelated part of the an application for hours before noticing that mocked responses were matched unexpectedly, due to me not seeing the default `match_querystring=False`. A naive test case might do something like this:\r\n\r\n```py\r\n$ python\r\nPython 3.6.6 (default, Jul 19 2018, 14:25:17) \r\n[GCC 8.1.1 20180712 (Red Hat 8.1.1-5)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import responses\r\n>>> import requests\r\n>>> \r\n>>> responses.start()\r\n>>> \r\n>>> responses.add(responses.GET, \"https://example.com/api?endpoint=1\",\r\n...     json={'endpoint': 1}\r\n... )\r\n>>> responses.add(responses.GET, \"https://example.com/api?endpoint=2\",\r\n...     json={'endpoint': 2}\r\n... )\r\n>>> \r\n>>> requests.get('https://example.com/api?endpoint=2').content\r\nb'{\"endpoint\": 1}'\r\n>>> requests.get('https://example.com/api?endpoint=1').content\r\nb'{\"endpoint\": 2}'\r\n>>> \r\n```\r\n\r\n## Proposal\r\nWhile I'd prefer the default for `match_querystring` to be changed, I'd propose responses throws a `RuntimeWarning` when a response is added that contains a query string without setting `match_querystring` explicitly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/206", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/206/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/206/events", "html_url": "https://github.com/getsentry/responses/issues/206", "id": 320603768, "node_id": "MDU6SXNzdWUzMjA2MDM3Njg=", "number": 206, "title": "Feature idea: snapshots", "user": {"login": "HeyHugo", "id": 1010517, "node_id": "MDQ6VXNlcjEwMTA1MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1010517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeyHugo", "html_url": "https://github.com/HeyHugo", "followers_url": "https://api.github.com/users/HeyHugo/followers", "following_url": "https://api.github.com/users/HeyHugo/following{/other_user}", "gists_url": "https://api.github.com/users/HeyHugo/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeyHugo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeyHugo/subscriptions", "organizations_url": "https://api.github.com/users/HeyHugo/orgs", "repos_url": "https://api.github.com/users/HeyHugo/repos", "events_url": "https://api.github.com/users/HeyHugo/events{/privacy}", "received_events_url": "https://api.github.com/users/HeyHugo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-06T15:49:17Z", "updated_at": "2018-05-06T16:12:22Z", "closed_at": "2018-05-06T16:12:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, what do you think about a response snapshot feature?\r\n\r\nRougly it could work something like this:\r\n```python\r\nresponses.add_snapshot(\r\n    responses.GET,\r\n    'http://twitter.com/api/1/foobar',\r\n    cache_path='optional/path/to/cached/response'\r\n)\r\n```\r\n\r\nFirst time it would make a real request and save the response to a file in the tests folder (or optionally some other path). Subsequent calls would use the cached response.\r\n\r\nI'm not sure if there is some response info that would be hard to store, or something else I'm not thinking of otherwise I think this could enable some lazy testing \ud83d\ude0e ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/205", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/205/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/205/events", "html_url": "https://github.com/getsentry/responses/issues/205", "id": 320536160, "node_id": "MDU6SXNzdWUzMjA1MzYxNjA=", "number": 205, "title": "GitHub's latest release points to 0.6.0, even though 0.9.0 is the latest release", "user": {"login": "mingwandroid", "id": 1042804, "node_id": "MDQ6VXNlcjEwNDI4MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1042804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mingwandroid", "html_url": "https://github.com/mingwandroid", "followers_url": "https://api.github.com/users/mingwandroid/followers", "following_url": "https://api.github.com/users/mingwandroid/following{/other_user}", "gists_url": "https://api.github.com/users/mingwandroid/gists{/gist_id}", "starred_url": "https://api.github.com/users/mingwandroid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mingwandroid/subscriptions", "organizations_url": "https://api.github.com/users/mingwandroid/orgs", "repos_url": "https://api.github.com/users/mingwandroid/repos", "events_url": "https://api.github.com/users/mingwandroid/events{/privacy}", "received_events_url": "https://api.github.com/users/mingwandroid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-05T19:40:47Z", "updated_at": "2018-05-06T23:14:13Z", "closed_at": "2018-05-06T23:14:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/200", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/200/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/200/events", "html_url": "https://github.com/getsentry/responses/issues/200", "id": 312122422, "node_id": "MDU6SXNzdWUzMTIxMjI0MjI=", "number": 200, "title": "Multiple of the same headers not handled, nor cookies", "user": {"login": "cgthayer", "id": 265677, "node_id": "MDQ6VXNlcjI2NTY3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/265677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgthayer", "html_url": "https://github.com/cgthayer", "followers_url": "https://api.github.com/users/cgthayer/followers", "following_url": "https://api.github.com/users/cgthayer/following{/other_user}", "gists_url": "https://api.github.com/users/cgthayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgthayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgthayer/subscriptions", "organizations_url": "https://api.github.com/users/cgthayer/orgs", "repos_url": "https://api.github.com/users/cgthayer/repos", "events_url": "https://api.github.com/users/cgthayer/events{/privacy}", "received_events_url": "https://api.github.com/users/cgthayer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-06T21:19:55Z", "updated_at": "2019-12-12T16:26:10Z", "closed_at": "2019-12-12T16:26:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Wanted to mock a situation where I get back a few cookies, however this isn't possible because the headers arg is a dict (only one key allowed). It's typical to get multiple headers for the same name such as 'Set-Cookie' in my case.\r\n\r\nA couple solutions come to mind (a) for cookies use the RequestsCookieJar (b) allow the values for the headers dict to be a list of strings instead of just a string (which would work for all headers, not just cookies).\r\n\r\nThanks,\r\n\r\nSomewhat related\r\n* https://github.com/getsentry/responses/issues/120\r\n* https://github.com/getsentry/responses/issues/68\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/195", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/195/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/195/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/195/events", "html_url": "https://github.com/getsentry/responses/issues/195", "id": 310620453, "node_id": "MDU6SXNzdWUzMTA2MjA0NTM=", "number": 195, "title": "3.7 incompatibility", "user": {"login": "ewdurbin", "id": 1200832, "node_id": "MDQ6VXNlcjEyMDA4MzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1200832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ewdurbin", "html_url": "https://github.com/ewdurbin", "followers_url": "https://api.github.com/users/ewdurbin/followers", "following_url": "https://api.github.com/users/ewdurbin/following{/other_user}", "gists_url": "https://api.github.com/users/ewdurbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ewdurbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ewdurbin/subscriptions", "organizations_url": "https://api.github.com/users/ewdurbin/orgs", "repos_url": "https://api.github.com/users/ewdurbin/repos", "events_url": "https://api.github.com/users/ewdurbin/events{/privacy}", "received_events_url": "https://api.github.com/users/ewdurbin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-02T21:38:52Z", "updated_at": "2018-04-04T16:13:14Z", "closed_at": "2018-04-04T16:13:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.7 changes the name of `re._pattern_type` which is used in a few places, see https://github.com/python/cpython/pull/1646 `re.Pattern` is the new equivalent.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/191", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/191/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/191/events", "html_url": "https://github.com/getsentry/responses/issues/191", "id": 298888403, "node_id": "MDU6SXNzdWUyOTg4ODg0MDM=", "number": 191, "title": "new release?", "user": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-21T09:03:44Z", "updated_at": "2018-11-15T02:29:42Z", "closed_at": "2018-11-15T02:29:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nare there any plans for a new release?\r\n\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/188", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/188/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/188/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/188/events", "html_url": "https://github.com/getsentry/responses/issues/188", "id": 298127946, "node_id": "MDU6SXNzdWUyOTgxMjc5NDY=", "number": 188, "title": "Unable to intercept vendored requests", "user": {"login": "wimglenn", "id": 6615374, "node_id": "MDQ6VXNlcjY2MTUzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6615374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wimglenn", "html_url": "https://github.com/wimglenn", "followers_url": "https://api.github.com/users/wimglenn/followers", "following_url": "https://api.github.com/users/wimglenn/following{/other_user}", "gists_url": "https://api.github.com/users/wimglenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/wimglenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wimglenn/subscriptions", "organizations_url": "https://api.github.com/users/wimglenn/orgs", "repos_url": "https://api.github.com/users/wimglenn/repos", "events_url": "https://api.github.com/users/wimglenn/events{/privacy}", "received_events_url": "https://api.github.com/users/wimglenn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-18T23:07:19Z", "updated_at": "2019-11-23T03:31:37Z", "closed_at": "2018-03-14T17:02:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The path to the requests adapter is [hardcoded](https://github.com/getsentry/responses/blob/11e870728a30ca31885373bcbacb11fc32783a4d/responses.py#L564):\r\n\r\n    self._patcher = mock.patch('requests.adapters.HTTPAdapter.send',\r\n                               unbound_on_send)\r\n\r\nHowever many projects vendor `requests`, and so their network activity just flies straight past the `RequestsMock` unnoticed.  To give an example, pip uses a vendored requests session and responses can not mock it out unless source code is modified with the correct mock location:\r\n\r\n    self._patcher = mock.patch('pip._vendor.requests.adapters.HTTPAdapter.send',\r\n                               unbound_on_send)\r\n\r\nCould you add the requests path as configurable in the public API somehow?  Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/186", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/186/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/186/events", "html_url": "https://github.com/getsentry/responses/issues/186", "id": 280138350, "node_id": "MDU6SXNzdWUyODAxMzgzNTA=", "number": 186, "title": "cookies pkg has a deprecation warning", "user": {"login": "bcail", "id": 2394596, "node_id": "MDQ6VXNlcjIzOTQ1OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2394596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcail", "html_url": "https://github.com/bcail", "followers_url": "https://api.github.com/users/bcail/followers", "following_url": "https://api.github.com/users/bcail/following{/other_user}", "gists_url": "https://api.github.com/users/bcail/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcail/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcail/subscriptions", "organizations_url": "https://api.github.com/users/bcail/orgs", "repos_url": "https://api.github.com/users/bcail/repos", "events_url": "https://api.github.com/users/bcail/events{/privacy}", "received_events_url": "https://api.github.com/users/bcail/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-07T13:55:26Z", "updated_at": "2018-10-17T21:16:11Z", "closed_at": "2018-10-17T21:16:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you run a test script that just does \"import responses\" with the -Werror option, a DeprecationWarning exception is raised from the cookies package.\r\n\r\nI'm not sure the cookies package is really maintained anymore (last commit in Sep 2014): https://gitlab.com/sashahart/cookies/commits/master. Maybe the biscuits pkg would be helpful? https://gitlab.com/sashahart/cookies/issues/4#note_50409121.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/185", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/185/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/185/events", "html_url": "https://github.com/getsentry/responses/issues/185", "id": 276558303, "node_id": "MDU6SXNzdWUyNzY1NTgzMDM=", "number": 185, "title": "Regex as url not working", "user": {"login": "hussaintamboli", "id": 2324958, "node_id": "MDQ6VXNlcjIzMjQ5NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2324958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hussaintamboli", "html_url": "https://github.com/hussaintamboli", "followers_url": "https://api.github.com/users/hussaintamboli/followers", "following_url": "https://api.github.com/users/hussaintamboli/following{/other_user}", "gists_url": "https://api.github.com/users/hussaintamboli/gists{/gist_id}", "starred_url": "https://api.github.com/users/hussaintamboli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hussaintamboli/subscriptions", "organizations_url": "https://api.github.com/users/hussaintamboli/orgs", "repos_url": "https://api.github.com/users/hussaintamboli/repos", "events_url": "https://api.github.com/users/hussaintamboli/events{/privacy}", "received_events_url": "https://api.github.com/users/hussaintamboli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-24T09:26:29Z", "updated_at": "2017-11-24T09:52:38Z", "closed_at": "2017-11-24T09:52:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nimport requests\r\nimport responses\r\n\r\nresponses.add(responses.GET, r\".*\", json={}, status=200)\r\n# tried this also\r\nresponses.add(responses.Response(\r\n    method=\"GET\",\r\n    url=r\".*\",\r\n    json={},\r\n    status=200\r\n))\r\n\r\n@responses.activate\r\ndef get_data():\r\n    requests.get(\"http://TBD\")\r\n\r\n```\r\n\r\nInstead of passing, this gives an error\r\n\r\n`ConnectionError: Connection refused: GET http://TBD`\r\n\r\nDid I miss something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/182", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/182/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/182/events", "html_url": "https://github.com/getsentry/responses/issues/182", "id": 271279225, "node_id": "MDU6SXNzdWUyNzEyNzkyMjU=", "number": 182, "title": "Comparison/join efforts with requests_mock", "user": {"login": "a3kov", "id": 813860, "node_id": "MDQ6VXNlcjgxMzg2MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/813860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a3kov", "html_url": "https://github.com/a3kov", "followers_url": "https://api.github.com/users/a3kov/followers", "following_url": "https://api.github.com/users/a3kov/following{/other_user}", "gists_url": "https://api.github.com/users/a3kov/gists{/gist_id}", "starred_url": "https://api.github.com/users/a3kov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a3kov/subscriptions", "organizations_url": "https://api.github.com/users/a3kov/orgs", "repos_url": "https://api.github.com/users/a3kov/repos", "events_url": "https://api.github.com/users/a3kov/events{/privacy}", "received_events_url": "https://api.github.com/users/a3kov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-05T14:03:34Z", "updated_at": "2017-11-10T20:10:39Z", "closed_at": "2017-11-05T18:18:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's a similar library in openstack which has similar features and purpose https://github.com/openstack/requests-mock\r\nI wasn't able to find any comparison between the two, and its possible the projects duplicate each other's efforts. Would be nice to have a guide to make a decision between them, if there are any significant differences etc", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/175", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/175/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/175/events", "html_url": "https://github.com/getsentry/responses/issues/175", "id": 262671432, "node_id": "MDU6SXNzdWUyNjI2NzE0MzI=", "number": 175, "title": "Issues with Unicode in path", "user": {"login": "loganrosen", "id": 512317, "node_id": "MDQ6VXNlcjUxMjMxNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/512317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/loganrosen", "html_url": "https://github.com/loganrosen", "followers_url": "https://api.github.com/users/loganrosen/followers", "following_url": "https://api.github.com/users/loganrosen/following{/other_user}", "gists_url": "https://api.github.com/users/loganrosen/gists{/gist_id}", "starred_url": "https://api.github.com/users/loganrosen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/loganrosen/subscriptions", "organizations_url": "https://api.github.com/users/loganrosen/orgs", "repos_url": "https://api.github.com/users/loganrosen/repos", "events_url": "https://api.github.com/users/loganrosen/events{/privacy}", "received_events_url": "https://api.github.com/users/loganrosen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-04T05:33:43Z", "updated_at": "2017-10-11T23:24:47Z", "closed_at": "2017-10-11T23:24:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw that you fixed #153 by handling Unicode characters in the querystring, but there still appear to be issues when said Unicode characters are in the URL path itself. If you pass a mock URL with a Unicode character in it to Responses and then request the same URL via Requests, you get a connection refused error.\r\n\r\n[This is the line](https://github.com/getsentry/responses/blob/master/responses.py#L166) where it fails, when I stepped through the debugger.\r\n\r\nI'm using Python 2.7.13 and Responses 0.8.0. Please let me know if I need to clarify this issue. Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/172", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/172/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/172/events", "html_url": "https://github.com/getsentry/responses/issues/172", "id": 248924038, "node_id": "MDU6SXNzdWUyNDg5MjQwMzg=", "number": 172, "title": "Missing git tag for 0.7.0 release", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-09T05:53:55Z", "updated_at": "2017-08-09T17:45:01Z", "closed_at": "2017-08-09T17:45:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to keep PyPI releases and git tags in sync :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/169", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/169/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/169/events", "html_url": "https://github.com/getsentry/responses/issues/169", "id": 248846190, "node_id": "MDU6SXNzdWUyNDg4NDYxOTA=", "number": 169, "title": "Possible issue with changes to url matching in 0.6.2", "user": {"login": "dcramer", "id": 23610, "node_id": "MDQ6VXNlcjIzNjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/23610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcramer", "html_url": "https://github.com/dcramer", "followers_url": "https://api.github.com/users/dcramer/followers", "following_url": "https://api.github.com/users/dcramer/following{/other_user}", "gists_url": "https://api.github.com/users/dcramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcramer/subscriptions", "organizations_url": "https://api.github.com/users/dcramer/orgs", "repos_url": "https://api.github.com/users/dcramer/repos", "events_url": "https://api.github.com/users/dcramer/events{/privacy}", "received_events_url": "https://api.github.com/users/dcramer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-08T21:05:20Z", "updated_at": "2017-08-08T21:15:16Z", "closed_at": "2017-08-08T21:15:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "https://travis-ci.org/getsentry/sentry/jobs/262349062\r\n\r\nIt's possible this is just a bug with Sentry's tests, though I have a hard time seeing how.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/167", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/167/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/167/events", "html_url": "https://github.com/getsentry/responses/issues/167", "id": 248649509, "node_id": "MDU6SXNzdWUyNDg2NDk1MDk=", "number": 167, "title": "Multiple responses for same url is broken with v0.6.1", "user": {"login": "naveens", "id": 1046555, "node_id": "MDQ6VXNlcjEwNDY1NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1046555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naveens", "html_url": "https://github.com/naveens", "followers_url": "https://api.github.com/users/naveens/followers", "following_url": "https://api.github.com/users/naveens/following{/other_user}", "gists_url": "https://api.github.com/users/naveens/gists{/gist_id}", "starred_url": "https://api.github.com/users/naveens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naveens/subscriptions", "organizations_url": "https://api.github.com/users/naveens/orgs", "repos_url": "https://api.github.com/users/naveens/repos", "events_url": "https://api.github.com/users/naveens/events{/privacy}", "received_events_url": "https://api.github.com/users/naveens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-08T09:11:22Z", "updated_at": "2017-08-08T11:17:24Z", "closed_at": "2017-08-08T11:17:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ cat /tmp/test.py \r\nimport responses\r\nimport requests\r\n\r\n\r\n@responses.activate\r\ndef test_my_api():\r\n    with responses.RequestsMock(assert_all_requests_are_fired=True) as rsps:\r\n        #import pdb; pdb.set_trace()\r\n        rsps.add(responses.GET, 'http://twitter.com/api/1/foobar', status=500)\r\n        rsps.add(responses.GET, 'http://twitter.com/api/1/foobar',\r\n                 body='{}', status=200,\r\n                 content_type='application/json')\r\n\r\n        resp = requests.get('http://twitter.com/api/1/foobar')\r\n        assert resp.status_code == 500\r\n        resp = requests.get('http://twitter.com/api/1/foobar')\r\n        assert resp.status_code == 200\r\n\r\ntest_my_api()\r\n\r\n$ python /tmp/test.py \r\nTraceback (most recent call last):\r\n  File \"/tmp/test.py\", line 19, in <module>\r\n    test_my_api()\r\n  File \"<string>\", line 3, in wrapper\r\n  File \"/tmp/test.py\", line 17, in test_my_api\r\n    assert resp.status_code == 200\r\nAssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/162", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/162/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/162/events", "html_url": "https://github.com/getsentry/responses/issues/162", "id": 247959801, "node_id": "MDU6SXNzdWUyNDc5NTk4MDE=", "number": 162, "title": " `AssertionError: Not all requests have been executed` for exception responses in 0.6.1", "user": {"login": "bartekwojcicki", "id": 5853558, "node_id": "MDQ6VXNlcjU4NTM1NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5853558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bartekwojcicki", "html_url": "https://github.com/bartekwojcicki", "followers_url": "https://api.github.com/users/bartekwojcicki/followers", "following_url": "https://api.github.com/users/bartekwojcicki/following{/other_user}", "gists_url": "https://api.github.com/users/bartekwojcicki/gists{/gist_id}", "starred_url": "https://api.github.com/users/bartekwojcicki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bartekwojcicki/subscriptions", "organizations_url": "https://api.github.com/users/bartekwojcicki/orgs", "repos_url": "https://api.github.com/users/bartekwojcicki/repos", "events_url": "https://api.github.com/users/bartekwojcicki/events{/privacy}", "received_events_url": "https://api.github.com/users/bartekwojcicki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-08-04T10:00:57Z", "updated_at": "2017-08-04T16:57:50Z", "closed_at": "2017-08-04T16:57:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "In responses 0.6.1 calls that return exception are not counted, resulting in `AssertionError: Not all requests have been executed`\r\n\r\n```python\r\nwith responses.RequestsMock() as rsps:\r\n     rsps.add(responses.POST, url, body=ReadTimeout())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/161", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/161/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/161/events", "html_url": "https://github.com/getsentry/responses/issues/161", "id": 247859465, "node_id": "MDU6SXNzdWUyNDc4NTk0NjU=", "number": 161, "title": "Multiple responses not working in 0.6.1", "user": {"login": "juve", "id": 201949, "node_id": "MDQ6VXNlcjIwMTk0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/201949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/juve", "html_url": "https://github.com/juve", "followers_url": "https://api.github.com/users/juve/followers", "following_url": "https://api.github.com/users/juve/following{/other_user}", "gists_url": "https://api.github.com/users/juve/gists{/gist_id}", "starred_url": "https://api.github.com/users/juve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/juve/subscriptions", "organizations_url": "https://api.github.com/users/juve/orgs", "repos_url": "https://api.github.com/users/juve/repos", "events_url": "https://api.github.com/users/juve/events{/privacy}", "received_events_url": "https://api.github.com/users/juve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-03T23:02:59Z", "updated_at": "2017-08-07T16:56:52Z", "closed_at": "2017-08-07T16:56:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "In 0.6.1 it seems that adding multiple responses no longer works.\r\n\r\nUsing the multiple responses example from the README:\r\n```\r\n$ cat test.py\r\nimport responses\r\nimport requests\r\n\r\nwith responses.RequestsMock(assert_all_requests_are_fired=True) as rsps:\r\n    rsps.add(responses.GET, 'http://twitter.com/api/1/foobar', status=500)\r\n    rsps.add(responses.GET, 'http://twitter.com/api/1/foobar',\r\n    \t body='{}', status=200,\r\n    \t content_type='application/json')\r\n\r\n    resp = requests.get('http://twitter.com/api/1/foobar')\r\n    assert resp.status_code == 500\r\n    resp = requests.get('http://twitter.com/api/1/foobar')\r\n    assert resp.status_code == 200\r\n$ pip install responses==0.6.0\r\n...\r\n$ python test.py\r\n$ pip install responses==0.6.1\r\n...\r\n$ python test.py\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 14, in <module>\r\n    assert resp.status_code == 200\r\nAssertionError\r\n```\r\n\r\nSeems to keep returning the first response.\r\n\r\nThis is on Ubuntu 16.04, Python 2.7.12", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/159", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/159/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/159/events", "html_url": "https://github.com/getsentry/responses/issues/159", "id": 247687178, "node_id": "MDU6SXNzdWUyNDc2ODcxNzg=", "number": 159, "title": "Upgrading to 0.6.0 results in \"unexpected keyword argument 'adding_headers'\"", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-08-03T12:16:25Z", "updated_at": "2017-08-03T18:39:26Z", "closed_at": "2017-08-03T18:20:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nUpgrading from responses 0.5.1 to 0.6.0 results in the following for us:\r\n```\r\nTypeError: __init__() got an unexpected keyword argument 'adding_headers'\r\n```\r\n\r\nWas this breakage expected? It was just surprising to us given this wasn't a major version bump and the removal isn't mentioned in the release notes.\r\n\r\nMany thanks :-)\r\n\r\nTravis log:\r\nhttps://travis-ci.org/mozilla/treeherder/jobs/260556107#L773\r\n\r\nUsage of `adding_headers`:\r\nhttps://github.com/mozilla/treeherder/blob/aff2152a810b5d68d17252669185aca9f34d28bd/tests/test_utils.py#L260-L262", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/158", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/158/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/158/events", "html_url": "https://github.com/getsentry/responses/issues/158", "id": 247509310, "node_id": "MDU6SXNzdWUyNDc1MDkzMTA=", "number": 158, "title": "KeyError exception for mock response with status=422", "user": {"login": "dmulter", "id": 411993, "node_id": "MDQ6VXNlcjQxMTk5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/411993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmulter", "html_url": "https://github.com/dmulter", "followers_url": "https://api.github.com/users/dmulter/followers", "following_url": "https://api.github.com/users/dmulter/following{/other_user}", "gists_url": "https://api.github.com/users/dmulter/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmulter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmulter/subscriptions", "organizations_url": "https://api.github.com/users/dmulter/orgs", "repos_url": "https://api.github.com/users/dmulter/repos", "events_url": "https://api.github.com/users/dmulter/events{/privacy}", "received_events_url": "https://api.github.com/users/dmulter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-02T20:18:04Z", "updated_at": "2017-08-04T17:27:31Z", "closed_at": "2017-08-04T17:27:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Mocking a response with a return status of 422 causes a KeyError exception with the latest version of Responses 0.6.0:\r\n\r\n```bash\r\nFile \"/project_foo/.virtualenv/lib/python2.7/site-packages/responses.py\", line 234, in get_response\r\n    reason=six.moves.http_client.responses[status],\r\nKeyError: 422\r\n```\r\n\r\nNote that line 235 and 267 get friendly HTTP status code text for the status value, but the following Python code fails with KeyError:\r\n\r\n```python\r\nimport six\r\nsix.moves.http_client.responses[422]\r\n```\r\n\r\nShould probably generically handle all status values that aren't available for text mapping. This is currently breaking a number of my tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/156", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/156/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/156/events", "html_url": "https://github.com/getsentry/responses/issues/156", "id": 245750750, "node_id": "MDU6SXNzdWUyNDU3NTA3NTA=", "number": 156, "title": "Unexpected behavior with `match_querystring`", "user": {"login": "bcongdon", "id": 706257, "node_id": "MDQ6VXNlcjcwNjI1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/706257?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcongdon", "html_url": "https://github.com/bcongdon", "followers_url": "https://api.github.com/users/bcongdon/followers", "following_url": "https://api.github.com/users/bcongdon/following{/other_user}", "gists_url": "https://api.github.com/users/bcongdon/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcongdon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcongdon/subscriptions", "organizations_url": "https://api.github.com/users/bcongdon/orgs", "repos_url": "https://api.github.com/users/bcongdon/repos", "events_url": "https://api.github.com/users/bcongdon/events{/privacy}", "received_events_url": "https://api.github.com/users/bcongdon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-26T14:56:36Z", "updated_at": "2017-08-08T17:18:49Z", "closed_at": "2017-08-08T17:18:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm noticing some strange behaviour in 0.6.0 with `match_querystring`. Here is a minimal working example.\r\n\r\nIn some tests that I write, I want to have URLs that support requests with and without querystring arguments. I was able to do this in 0.5.1, but it seems to not be possible in 0.6.0.\r\n\r\nI have limited experience with `responses`, so let me know if this is intended behaviour.\r\n\r\n```python\r\nimport responses\r\nimport requests\r\n\r\n\r\n@responses.activate\r\ndef test_querystring_without_match():\r\n    responses.add(responses.GET, 'http://foo.com', body='bar')\r\n    responses.add(responses.GET, 'http://foo.com?query=foo', body='baz', match_querystring=True)\r\n    print requests.get('http://foo.com').content  # prints 'bar'\r\n    print requests.get('http://foo.com?query=foo').content  # prints 'bar', but I would expect 'baz'\r\n\r\n\r\n@responses.activate\r\ndef test_querystring_with_match():\r\n    responses.add(responses.GET, 'http://foo.com', body='bar', match_querystring=True)\r\n    responses.add(responses.GET, 'http://foo.com?query=foo', body='baz', match_querystring=True)\r\n    print requests.get('http://foo.com').content  # prints 'baz', but I would expect 'bar'\r\n    print requests.get('http://foo.com?query=foo').content  # prints 'baz'\r\n\r\ntest_querystring_without_match()\r\ntest_querystring_with_match()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/153", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/153/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/153/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/153/events", "html_url": "https://github.com/getsentry/responses/issues/153", "id": 244891767, "node_id": "MDU6SXNzdWUyNDQ4OTE3Njc=", "number": 153, "title": "Connection refused when url contain chinese", "user": {"login": "chyroc", "id": 15604894, "node_id": "MDQ6VXNlcjE1NjA0ODk0", "avatar_url": "https://avatars3.githubusercontent.com/u/15604894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chyroc", "html_url": "https://github.com/chyroc", "followers_url": "https://api.github.com/users/chyroc/followers", "following_url": "https://api.github.com/users/chyroc/following{/other_user}", "gists_url": "https://api.github.com/users/chyroc/gists{/gist_id}", "starred_url": "https://api.github.com/users/chyroc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chyroc/subscriptions", "organizations_url": "https://api.github.com/users/chyroc/orgs", "repos_url": "https://api.github.com/users/chyroc/repos", "events_url": "https://api.github.com/users/chyroc/events{/privacy}", "received_events_url": "https://api.github.com/users/chyroc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-23T06:23:11Z", "updated_at": "2017-07-26T02:04:40Z", "closed_at": "2017-07-25T21:43:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom __future__ import (absolute_import, unicode_literals, print_function)\r\n\r\nimport responses\r\nimport requests\r\n\r\n\r\n@responses.activate\r\ndef test_mock():\r\n    # url = 'http://example.com/test'\r\n    # return True\r\n\r\n    url = 'http://example.com/test?type=2&ie=utf8&query=ascii'\r\n    # if add `match_querystring=True`, return True, else Connection refused\r\n\r\n    # url = 'http://example.com/test?type=2&ie=utf8&query=%E6%B1%89%E5%AD%97'\r\n    # always Connection refused\r\n\r\n    # url = 'http://example.com/test?type=2&ie=utf8&query=\u6c49\u5b57'\r\n    # always Connection refused\r\n    \r\n    responses.add(responses.GET, url, body='ssdjafklsj', match_querystring=True)\r\n\r\n    r = requests.get(url)\r\n\r\n    print(r.ok)\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_mock()\r\n```\r\n\r\nso , how can i solve the problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/148", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/148/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/148/events", "html_url": "https://github.com/getsentry/responses/issues/148", "id": 226602073, "node_id": "MDU6SXNzdWUyMjY2MDIwNzM=", "number": 148, "title": "responses.add can't mock requests.get(url, params=payload)", "user": {"login": "ymotongpoo", "id": 145104, "node_id": "MDQ6VXNlcjE0NTEwNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/145104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ymotongpoo", "html_url": "https://github.com/ymotongpoo", "followers_url": "https://api.github.com/users/ymotongpoo/followers", "following_url": "https://api.github.com/users/ymotongpoo/following{/other_user}", "gists_url": "https://api.github.com/users/ymotongpoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/ymotongpoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ymotongpoo/subscriptions", "organizations_url": "https://api.github.com/users/ymotongpoo/orgs", "repos_url": "https://api.github.com/users/ymotongpoo/repos", "events_url": "https://api.github.com/users/ymotongpoo/events{/privacy}", "received_events_url": "https://api.github.com/users/ymotongpoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-05T15:05:37Z", "updated_at": "2017-07-25T21:10:19Z", "closed_at": "2017-07-25T21:10:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "my main code uses `requests.get(url, params=payload)` to access the API with URL parameters, and my test code tried to mock the request with the following code, but it failed with `239: ConnectionError`.\r\n\r\nTest code:\r\n```\r\n    @responses.activate\r\n    @pytest.mark.parametrize(\"test_input, expected\", [\r\n        ('https://example.com/', '0')\r\n    ])\r\n    def test_no_bookmark(self, target, test_input, expected):\r\n        request_url = API_ENDPOINT + '?' + urlencode({'url': test_input})\r\n        responses.add(responses.GET, request_url,\r\n                      status=200, content_type='text/plain')\r\n        result = target(test_input)\r\n        assert result == expected\r\n```\r\n\r\nand error message:\r\n```\r\nself = <tests.test_plugins.test_bot.Test_get_api object at 0x1085bf550>, target = <function get_api at 0x1084aa598>, test_input = 'https://example.com/', expected = 0\r\n\r\n    @responses.activate\r\n    @pytest.mark.parametrize(\"test_input, expected\", [\r\n        ('https://example.com/', 0)\r\n    ])\r\n    def test_no_bookmark(self, target, test_input, expected):\r\n        request_url = API_ENDPOINT + \\\r\n            '?' + urlencode({'url': test_input})\r\n        responses.add(responses.GET, request_url,\r\n                      status=200, content_type='text/plain')\r\n>       result = target(test_input)\r\n\r\ntests/test_plugins/test_bot.py:161:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\nplugins/bot.py:152: in get_api\r\n    resp = requests.get(API_ENDPOINT, params=payload)\r\n../../../python/pyspabot/lib/python3.5/site-packages/requests/api.py:70: in get\r\n    return request('get', url, params=params, **kwargs)\r\n../../../python/pyspabot/lib/python3.5/site-packages/requests/api.py:56: in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n../../../python/pyspabot/lib/python3.5/site-packages/requests/sessions.py:488: in request\r\n    resp = self.send(prep, **send_kwargs)\r\n../../../python/pyspabot/lib/python3.5/site-packages/requests/sessions.py:609: in send\r\n    r = adapter.send(request, **kwargs)\r\n../../../python/pyspabot/lib/python3.5/site-packages/responses.py:294: in unbound_on_send\r\n    return self._on_request(adapter, request, *a, **kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <responses.RequestsMock object at 0x108323668>, adapter = <requests.adapters.HTTPAdapter object at 0x1085bfb38>, request = <PreparedRequest [GET]>\r\nkwargs = {'cert': None, 'proxies': OrderedDict(), 'stream': False, 'timeout': None, ...}, match = None, error_msg = 'Connection refused: GET http://api.foo.com/?url=https%3A%2F%2Fexample.com%2F'\r\nresponse = ConnectionError('Connection refused: GET http://api.foo.com/?url=https%3A%2F%2Fexample.com%2F',)\r\n\r\n    def _on_request(self, adapter, request, **kwargs):\r\n        match = self._find_match(request)\r\n        # TODO(dcramer): find the correct class for this\r\n        if match is None:\r\n            error_msg = 'Connection refused: {0} {1}'.format(request.method,\r\n                                                             request.url)\r\n            response = ConnectionError(error_msg)\r\n            response.request = request\r\n\r\n            self._calls.add(request, response)\r\n>           raise response\r\nE           requests.exceptions.ConnectionError: Connection refused: GET http://api.foo.com/?url=https%3A%2F%2Fexample.com%2F\r\n\r\n../../../python/pyspabot/lib/python3.5/site-packages/responses.py:239: ConnectionError\r\n```\r\n\r\nAnd I tried eliminating URL parameters in `responses.add()` in the test code, i.e.:\r\n```\r\n    @responses.activate\r\n    @pytest.mark.parametrize(\"test_input, expected\", [\r\n        ('https://example.com/', '0')\r\n    ])\r\n    def test_no_bookmark(self, target, test_input, expected):\r\n        responses.add(responses.GET, API_ENDPOINT,\r\n                      status=200, content_type='text/plain')\r\n        result = target(test_input)\r\n        assert result == expected\r\n```\r\n\r\nThis made the test passed. I think `responses.add()` is not handling `params` variables in `requests.get()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/146", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/146/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/146/events", "html_url": "https://github.com/getsentry/responses/issues/146", "id": 221267746, "node_id": "MDU6SXNzdWUyMjEyNjc3NDY=", "number": 146, "title": "empty json body ignored", "user": {"login": "davidhyman", "id": 5198267, "node_id": "MDQ6VXNlcjUxOTgyNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5198267?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidhyman", "html_url": "https://github.com/davidhyman", "followers_url": "https://api.github.com/users/davidhyman/followers", "following_url": "https://api.github.com/users/davidhyman/following{/other_user}", "gists_url": "https://api.github.com/users/davidhyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidhyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidhyman/subscriptions", "organizations_url": "https://api.github.com/users/davidhyman/orgs", "repos_url": "https://api.github.com/users/davidhyman/repos", "events_url": "https://api.github.com/users/davidhyman/events{/privacy}", "received_events_url": "https://api.github.com/users/davidhyman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-12T13:46:20Z", "updated_at": "2017-07-25T21:10:56Z", "closed_at": "2017-07-25T21:10:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Setting an empty json object (which is valid json) is not parsed as json by responses:\r\n```\r\nresponses.add(\r\n            responses.POST,\r\n            url,\r\n            json={},\r\n            status=201\r\n        )\r\n```\r\nIn `responses.RequestsMock.add`:\r\n```\r\n        # if we were passed a `json` argument,\r\n        # override the body and content_type\r\n        if json:\r\n            body = json_module.dumps(json)\r\n            content_type = 'application/json'\r\n```\r\nShould probably be:\r\n```\r\n        # if we were passed a `json` argument,\r\n        # override the body and content_type\r\n        if json is not None:\r\n            body = json_module.dumps(json)\r\n            content_type = 'application/json'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/140", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/140/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/140/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/140/events", "html_url": "https://github.com/getsentry/responses/issues/140", "id": 209612286, "node_id": "MDU6SXNzdWUyMDk2MTIyODY=", "number": 140, "title": "adding_headers doc.", "user": {"login": "qdamian", "id": 5003092, "node_id": "MDQ6VXNlcjUwMDMwOTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5003092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qdamian", "html_url": "https://github.com/qdamian", "followers_url": "https://api.github.com/users/qdamian/followers", "following_url": "https://api.github.com/users/qdamian/following{/other_user}", "gists_url": "https://api.github.com/users/qdamian/gists{/gist_id}", "starred_url": "https://api.github.com/users/qdamian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qdamian/subscriptions", "organizations_url": "https://api.github.com/users/qdamian/orgs", "repos_url": "https://api.github.com/users/qdamian/repos", "events_url": "https://api.github.com/users/qdamian/events{/privacy}", "received_events_url": "https://api.github.com/users/qdamian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-22T23:14:26Z", "updated_at": "2017-07-25T21:35:34Z", "closed_at": "2017-07-25T21:35:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nCongrats on this library.\r\nIt took me a while to find adding_headers. Tried 'headers' first but wasn't there.\r\nPlease add it to the documentation.\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/137", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/137/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/137/events", "html_url": "https://github.com/getsentry/responses/issues/137", "id": 206938079, "node_id": "MDU6SXNzdWUyMDY5MzgwNzk=", "number": 137, "title": "Get last payload sent to request", "user": {"login": "kientran", "id": 79308, "node_id": "MDQ6VXNlcjc5MzA4", "avatar_url": "https://avatars0.githubusercontent.com/u/79308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kientran", "html_url": "https://github.com/kientran", "followers_url": "https://api.github.com/users/kientran/followers", "following_url": "https://api.github.com/users/kientran/following{/other_user}", "gists_url": "https://api.github.com/users/kientran/gists{/gist_id}", "starred_url": "https://api.github.com/users/kientran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kientran/subscriptions", "organizations_url": "https://api.github.com/users/kientran/orgs", "repos_url": "https://api.github.com/users/kientran/repos", "events_url": "https://api.github.com/users/kientran/events{/privacy}", "received_events_url": "https://api.github.com/users/kientran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-11T00:09:09Z", "updated_at": "2017-02-13T03:54:30Z", "closed_at": "2017-02-13T03:54:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are trying to verify that the POST payload submitted to a request is valid.  Is there any method available to that will return the submitted payload?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/134", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/134/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/134/events", "html_url": "https://github.com/getsentry/responses/issues/134", "id": 197833398, "node_id": "MDU6SXNzdWUxOTc4MzMzOTg=", "number": 134, "title": "PY3.5: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead", "user": {"login": "bluefish6", "id": 3324881, "node_id": "MDQ6VXNlcjMzMjQ4ODE=", "avatar_url": "https://avatars3.githubusercontent.com/u/3324881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluefish6", "html_url": "https://github.com/bluefish6", "followers_url": "https://api.github.com/users/bluefish6/followers", "following_url": "https://api.github.com/users/bluefish6/following{/other_user}", "gists_url": "https://api.github.com/users/bluefish6/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluefish6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluefish6/subscriptions", "organizations_url": "https://api.github.com/users/bluefish6/orgs", "repos_url": "https://api.github.com/users/bluefish6/repos", "events_url": "https://api.github.com/users/bluefish6/events{/privacy}", "received_events_url": "https://api.github.com/users/bluefish6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-28T10:46:30Z", "updated_at": "2018-11-08T15:03:10Z", "closed_at": "2018-11-08T15:03:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "While running responses in Python 3.5 environment, I can see now a DeprecationWarning.\r\n\r\n```\r\nDeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n```\r\n\r\nI know this is not critical at the moment, but may be a major issue in the future when Python 3.6 will be more popular (stable 3.6.0 release is available since 23.12.2016).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/133", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/133/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/133/events", "html_url": "https://github.com/getsentry/responses/issues/133", "id": 196944230, "node_id": "MDU6SXNzdWUxOTY5NDQyMzA=", "number": 133, "title": "Please release to PyPi", "user": {"login": "nessita", "id": 124304, "node_id": "MDQ6VXNlcjEyNDMwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/124304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nessita", "html_url": "https://github.com/nessita", "followers_url": "https://api.github.com/users/nessita/followers", "following_url": "https://api.github.com/users/nessita/following{/other_user}", "gists_url": "https://api.github.com/users/nessita/gists{/gist_id}", "starred_url": "https://api.github.com/users/nessita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nessita/subscriptions", "organizations_url": "https://api.github.com/users/nessita/orgs", "repos_url": "https://api.github.com/users/nessita/repos", "events_url": "https://api.github.com/users/nessita/events{/privacy}", "received_events_url": "https://api.github.com/users/nessita/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-12-21T14:21:27Z", "updated_at": "2017-09-14T16:08:36Z", "closed_at": "2017-09-14T16:08:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm looking forward to many of the fixes in master that are not in the released version 0.5.1.\r\nIs there any chance you could release a new point release soon?\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/130", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/130/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/130/events", "html_url": "https://github.com/getsentry/responses/issues/130", "id": 192059983, "node_id": "MDU6SXNzdWUxOTIwNTk5ODM=", "number": 130, "title": "Reason is missing", "user": {"login": "whs", "id": 345483, "node_id": "MDQ6VXNlcjM0NTQ4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/345483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whs", "html_url": "https://github.com/whs", "followers_url": "https://api.github.com/users/whs/followers", "following_url": "https://api.github.com/users/whs/following{/other_user}", "gists_url": "https://api.github.com/users/whs/gists{/gist_id}", "starred_url": "https://api.github.com/users/whs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whs/subscriptions", "organizations_url": "https://api.github.com/users/whs/orgs", "repos_url": "https://api.github.com/users/whs/repos", "events_url": "https://api.github.com/users/whs/events{/privacy}", "received_events_url": "https://api.github.com/users/whs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-28T17:01:22Z", "updated_at": "2016-12-15T12:52:44Z", "closed_at": "2016-12-15T12:52:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The field [reason](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.reason) is missing from the mocked request. It is usually set to HTTP status code's readable name (eg. \"OK\" \"Not Found\")\r\n\r\nThis make some libraries, like [requests_toolbelt dumping](https://toolbelt.readthedocs.io/en/latest/dumputils.html) unhappy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/125", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/125/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/125/events", "html_url": "https://github.com/getsentry/responses/issues/125", "id": 174796753, "node_id": "MDU6SXNzdWUxNzQ3OTY3NTM=", "number": 125, "title": "raise_for_status does not raise", "user": {"login": "nsmgr8", "id": 19872, "node_id": "MDQ6VXNlcjE5ODcy", "avatar_url": "https://avatars1.githubusercontent.com/u/19872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nsmgr8", "html_url": "https://github.com/nsmgr8", "followers_url": "https://api.github.com/users/nsmgr8/followers", "following_url": "https://api.github.com/users/nsmgr8/following{/other_user}", "gists_url": "https://api.github.com/users/nsmgr8/gists{/gist_id}", "starred_url": "https://api.github.com/users/nsmgr8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nsmgr8/subscriptions", "organizations_url": "https://api.github.com/users/nsmgr8/orgs", "repos_url": "https://api.github.com/users/nsmgr8/repos", "events_url": "https://api.github.com/users/nsmgr8/events{/privacy}", "received_events_url": "https://api.github.com/users/nsmgr8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-02T16:17:30Z", "updated_at": "2016-09-05T09:53:21Z", "closed_at": "2016-09-05T09:53:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following code:\n\n`def get_url():`\n  `resp = reqeusts.get(url)`\n  `resp.raise_for_status()`\n\nwhich I am trying to test with:\n\n`wtih self.assertRaises(AssertionError):`\n`with responses.mock as rsps:`\n`rsps.add(responses.GET, url, status=404)`\n`get_url()`\n\nThis does not pass and says `AssertoinError: not raised`.\n\n`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/124", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/124/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/124/events", "html_url": "https://github.com/getsentry/responses/issues/124", "id": 172982527, "node_id": "MDU6SXNzdWUxNzI5ODI1Mjc=", "number": 124, "title": "README should contain pip install info", "user": {"login": "augustjd", "id": 3535840, "node_id": "MDQ6VXNlcjM1MzU4NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3535840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/augustjd", "html_url": "https://github.com/augustjd", "followers_url": "https://api.github.com/users/augustjd/followers", "following_url": "https://api.github.com/users/augustjd/following{/other_user}", "gists_url": "https://api.github.com/users/augustjd/gists{/gist_id}", "starred_url": "https://api.github.com/users/augustjd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/augustjd/subscriptions", "organizations_url": "https://api.github.com/users/augustjd/orgs", "repos_url": "https://api.github.com/users/augustjd/repos", "events_url": "https://api.github.com/users/augustjd/events{/privacy}", "received_events_url": "https://api.github.com/users/augustjd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-24T15:24:00Z", "updated_at": "2018-10-12T01:43:02Z", "closed_at": "2018-10-12T01:43:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Small point, but it would be nice to know that `pip install responses` does install the right library from the README. Put it right at the top of the README like other libraries.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/120", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/120/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/120/events", "html_url": "https://github.com/getsentry/responses/issues/120", "id": 166158515, "node_id": "MDU6SXNzdWUxNjYxNTg1MTU=", "number": 120, "title": "Cookies are not mocked correctly", "user": {"login": "badp", "id": 159451, "node_id": "MDQ6VXNlcjE1OTQ1MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/159451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badp", "html_url": "https://github.com/badp", "followers_url": "https://api.github.com/users/badp/followers", "following_url": "https://api.github.com/users/badp/following{/other_user}", "gists_url": "https://api.github.com/users/badp/gists{/gist_id}", "starred_url": "https://api.github.com/users/badp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badp/subscriptions", "organizations_url": "https://api.github.com/users/badp/orgs", "repos_url": "https://api.github.com/users/badp/repos", "events_url": "https://api.github.com/users/badp/events{/privacy}", "received_events_url": "https://api.github.com/users/badp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-18T18:20:10Z", "updated_at": "2019-12-12T16:27:12Z", "closed_at": "2019-12-12T16:27:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that there are a few problems with the way cookies are handled by `responses`; in particular it seems that the library tries to parse cookies attributes as if they were standalone cookies. Cookies in headers are not `'; '` separated; `'; '` separates the various cookie attributes.\n\nI do understand that the only time you make this assumption is [in your tests](https://github.com/getsentry/responses/blob/dc0578d208289e8a8471a9356f91e85acf6c7c03/test_responses.py#L309), and the bug might instead be in `cookies.Cookies`, but the behaviour is still incorrect :(\n\n```\n$ pip freeze | grep -P 'responses|requests'\nrequests==2.10.0\nresponses==0.5.1\n$ curl -s -D - 'http://stackoverflow.com' -o /dev/null | grep Set-Cookie\nSet-Cookie: prov=c83dc7dc-e0b9-xxxx-xxxx-xxxxxxxxxxxx; domain=.stackoverflow.com; expires=Fri, 01-Jan-2055 00:00:00 GMT; path=/; HttpOnly\n$ ipython3\nPython 3.5.2 (default, Jul  5 2016, 12:43:10) \nIn [1]: import requests, responses\nIn [2]: @responses.activate\ndef test(): #I'm removing a number of attributes here that would otherwise result in an exception\n  responses.add(responses.GET, 'http://stackoverflow.com', adding_headers={'Set-Cookie': 'prov=c83dc7dc-e0b9-xxxx-xxxx-xxxxxxxxxxxx; domain=.stackoverflow.com; path=/'})\n  return requests.get('http://stackoverflow.com').cookies\nIn [3]: cookies = test()\nIn [4]: dict(cookies)\nOut[4]: \n{'domain': '.stackoverflow.com',\n 'path': '/',\n 'prov': 'c83dc7dc-e0b9-xxxx-xxxx-xxxxxxxxxxxx'}\n```\n\n`requests` OTOH seems able to deal with those headers correctly:\n\n```\nIn [5]: requests.get('http://stackoverflow.com').cookies\nOut[5]: <RequestsCookieJar[Cookie(version=0, name='prov', value='daffeca7-75ea-xxxx-xxxx-xxxxxxxxxxxx', port=None, port_specified=False, domain='.stackoverflow.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=2682374400, discard=False, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)]>\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/119", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/119/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/119/events", "html_url": "https://github.com/getsentry/responses/issues/119", "id": 164735605, "node_id": "MDU6SXNzdWUxNjQ3MzU2MDU=", "number": 119, "title": "PyCharm warning: Cannot find some references", "user": {"login": "objque", "id": 7000585, "node_id": "MDQ6VXNlcjcwMDA1ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7000585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/objque", "html_url": "https://github.com/objque", "followers_url": "https://api.github.com/users/objque/followers", "following_url": "https://api.github.com/users/objque/following{/other_user}", "gists_url": "https://api.github.com/users/objque/gists{/gist_id}", "starred_url": "https://api.github.com/users/objque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/objque/subscriptions", "organizations_url": "https://api.github.com/users/objque/orgs", "repos_url": "https://api.github.com/users/objque/repos", "events_url": "https://api.github.com/users/objque/events{/privacy}", "received_events_url": "https://api.github.com/users/objque/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-07-10T21:38:53Z", "updated_at": "2019-11-25T16:01:58Z", "closed_at": "2019-11-25T16:01:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI write my tests in PyCharm with responses 2.5.1 (python27) and pycharm highlights some objects of library such as method of request, activate method, add mock.\n\nIf I am run the tests, then all tests are performed successfully. But this highlights is distracting me.\nSomeone faced with it?\n\n![image](https://cloud.githubusercontent.com/assets/7000585/16716228/39b26e36-46ff-11e6-9d94-6e638ea4500d.png)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/106", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/106/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/106/events", "html_url": "https://github.com/getsentry/responses/issues/106", "id": 144636586, "node_id": "MDU6SXNzdWUxNDQ2MzY1ODY=", "number": 106, "title": "Integration with Flask (and Werkzeug)", "user": {"login": "adamtheturtle", "id": 797801, "node_id": "MDQ6VXNlcjc5NzgwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/797801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamtheturtle", "html_url": "https://github.com/adamtheturtle", "followers_url": "https://api.github.com/users/adamtheturtle/followers", "following_url": "https://api.github.com/users/adamtheturtle/following{/other_user}", "gists_url": "https://api.github.com/users/adamtheturtle/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamtheturtle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamtheturtle/subscriptions", "organizations_url": "https://api.github.com/users/adamtheturtle/orgs", "repos_url": "https://api.github.com/users/adamtheturtle/repos", "events_url": "https://api.github.com/users/adamtheturtle/events{/privacy}", "received_events_url": "https://api.github.com/users/adamtheturtle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-03-30T15:55:19Z", "updated_at": "2020-01-20T11:30:20Z", "closed_at": "2020-01-20T11:30:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nThanks for the project!\n\nI did something which I think is pretty cool using `responses` (don't let me know if you think that it isn't cool).\n\nI'll post it here in case you think that it is something which I should document / factor out / whatever.\n\nhttps://github.com/jenca-cloud/jenca-authentication/blob/master/authentication/tests/test_authentication.py#L36\n\nThe code around there takes API requests and converts them to requests to a `werkzeug.test.Client` app, which is what is used for Flask application testing.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/102", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/102/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/102/events", "html_url": "https://github.com/getsentry/responses/issues/102", "id": 131987555, "node_id": "MDU6SXNzdWUxMzE5ODc1NTU=", "number": 102, "title": "Documentation misleading regarding default behaviour of assert_all_requests_are_fired", "user": {"login": "inglesp", "id": 28734, "node_id": "MDQ6VXNlcjI4NzM0", "avatar_url": "https://avatars1.githubusercontent.com/u/28734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inglesp", "html_url": "https://github.com/inglesp", "followers_url": "https://api.github.com/users/inglesp/followers", "following_url": "https://api.github.com/users/inglesp/following{/other_user}", "gists_url": "https://api.github.com/users/inglesp/gists{/gist_id}", "starred_url": "https://api.github.com/users/inglesp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inglesp/subscriptions", "organizations_url": "https://api.github.com/users/inglesp/orgs", "repos_url": "https://api.github.com/users/inglesp/repos", "events_url": "https://api.github.com/users/inglesp/events{/privacy}", "received_events_url": "https://api.github.com/users/inglesp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-02-07T17:18:36Z", "updated_at": "2016-02-09T08:13:23Z", "closed_at": "2016-02-09T08:13:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The README says \"By default Responses will raise an assertion error if a url was registered but not accessed\".  However, this is not true if responses is not used as a context manager.  See https://github.com/getsentry/responses/blob/master/responses.py#L308.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/98", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/98/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/98/events", "html_url": "https://github.com/getsentry/responses/issues/98", "id": 128655928, "node_id": "MDU6SXNzdWUxMjg2NTU5Mjg=", "number": 98, "title": "pypi is missing  test_responses.py file", "user": {"login": "Germano0", "id": 5477747, "node_id": "MDQ6VXNlcjU0Nzc3NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5477747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Germano0", "html_url": "https://github.com/Germano0", "followers_url": "https://api.github.com/users/Germano0/followers", "following_url": "https://api.github.com/users/Germano0/following{/other_user}", "gists_url": "https://api.github.com/users/Germano0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Germano0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Germano0/subscriptions", "organizations_url": "https://api.github.com/users/Germano0/orgs", "repos_url": "https://api.github.com/users/Germano0/repos", "events_url": "https://api.github.com/users/Germano0/events{/privacy}", "received_events_url": "https://api.github.com/users/Germano0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-25T22:17:32Z", "updated_at": "2016-01-25T22:35:21Z", "closed_at": "2016-01-25T22:34:36Z", "author_association": "NONE", "active_lock_reason": null, "body": " test_responses.py file is missing in pypi 0.5.1 release\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/97", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/97/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/97/events", "html_url": "https://github.com/getsentry/responses/issues/97", "id": 128634360, "node_id": "MDU6SXNzdWUxMjg2MzQzNjA=", "number": 97, "title": "pypi 0.5.0 release misses LICENSE file", "user": {"login": "Germano0", "id": 5477747, "node_id": "MDQ6VXNlcjU0Nzc3NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5477747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Germano0", "html_url": "https://github.com/Germano0", "followers_url": "https://api.github.com/users/Germano0/followers", "following_url": "https://api.github.com/users/Germano0/following{/other_user}", "gists_url": "https://api.github.com/users/Germano0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Germano0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Germano0/subscriptions", "organizations_url": "https://api.github.com/users/Germano0/orgs", "repos_url": "https://api.github.com/users/Germano0/repos", "events_url": "https://api.github.com/users/Germano0/events{/privacy}", "received_events_url": "https://api.github.com/users/Germano0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-01-25T20:47:00Z", "updated_at": "2016-01-25T20:51:59Z", "closed_at": "2016-01-25T20:50:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I submitted python-responses to the Fedora Review Process in order to let responses be available in Fedora repositories.\nI noticed that the pypi release (0.5.0) misses the LICENSE file\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/95", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/95/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/95/events", "html_url": "https://github.com/getsentry/responses/issues/95", "id": 126414521, "node_id": "MDU6SXNzdWUxMjY0MTQ1MjE=", "number": 95, "title": "reponses requires coverage < 4.0.0 but many systems ships coverage >= 4.0.0", "user": {"login": "Germano0", "id": 5477747, "node_id": "MDQ6VXNlcjU0Nzc3NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5477747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Germano0", "html_url": "https://github.com/Germano0", "followers_url": "https://api.github.com/users/Germano0/followers", "following_url": "https://api.github.com/users/Germano0/following{/other_user}", "gists_url": "https://api.github.com/users/Germano0/gists{/gist_id}", "starred_url": "https://api.github.com/users/Germano0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Germano0/subscriptions", "organizations_url": "https://api.github.com/users/Germano0/orgs", "repos_url": "https://api.github.com/users/Germano0/repos", "events_url": "https://api.github.com/users/Germano0/events{/privacy}", "received_events_url": "https://api.github.com/users/Germano0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-01-13T13:07:18Z", "updated_at": "2016-01-22T19:55:28Z", "closed_at": "2016-01-13T18:55:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am following a procedure that will bring responses inside official Fedora repositories.\n[responses](https://github.com/getsentry/responses/blob/master/setup.py#L33) needs coverage < 4.0.0 but Fedora 23 ships coverage 4.0.3, so during RPM package creation, when the system runs checks/tests I obtain errors\n\n``` bash\nTraceback (most recent call last):\n  File \"setup.py\", line 94, in <module>\n    'Topic :: Software Development'\n  File \"/usr/lib64/python3.4/distutils/core.py\", line 148, in setup\n    dist.run_commands()\n  File \"/usr/lib64/python3.4/distutils/dist.py\", line 955, in run_commands\n    self.run_command(cmd)\n  File \"/usr/lib64/python3.4/distutils/dist.py\", line 974, in run_command\n    cmd_obj.run()\n  File \"/usr/lib/python3.4/site-packages/setuptools/command/test.py\", line 134, in run\n    self.distribution.fetch_build_eggs(self.distribution.tests_require)\n  File \"/usr/lib/python3.4/site-packages/setuptools/dist.py\", line 313, in fetch_build_eggs\n    replace_conflicting=True,\n  File \"/usr/lib/python3.4/site-packages/pkg_resources/__init__.py\", line 836, in resolve\n    dist = best[req.key] = env.best_match(req, ws, installer)\n  File \"/usr/lib/python3.4/site-packages/pkg_resources/__init__.py\", line 1074, in best_match\n    dist = working_set.find(req)\n  File \"/usr/lib/python3.4/site-packages/pkg_resources/__init__.py\", line 711, in find\n    raise VersionConflict(dist, req)\npkg_resources.VersionConflict: (coverage 4.0.3 (/usr/lib64/python3.4/site-packages), Requirement.parse('coverage<4.0.0,>=3.7.1'))\n```\n\nIs there anything we can do?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/91", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/91/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/91/events", "html_url": "https://github.com/getsentry/responses/issues/91", "id": 118088917, "node_id": "MDU6SXNzdWUxMTgwODg5MTc=", "number": 91, "title": "Context do not split with py.test", "user": {"login": "item4", "id": 559952, "node_id": "MDQ6VXNlcjU1OTk1Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/559952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/item4", "html_url": "https://github.com/item4", "followers_url": "https://api.github.com/users/item4/followers", "following_url": "https://api.github.com/users/item4/following{/other_user}", "gists_url": "https://api.github.com/users/item4/gists{/gist_id}", "starred_url": "https://api.github.com/users/item4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/item4/subscriptions", "organizations_url": "https://api.github.com/users/item4/orgs", "repos_url": "https://api.github.com/users/item4/repos", "events_url": "https://api.github.com/users/item4/events{/privacy}", "received_events_url": "https://api.github.com/users/item4/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-11-20T17:36:38Z", "updated_at": "2015-11-20T20:07:14Z", "closed_at": "2015-11-20T18:30:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I will show you real my codes because I **do not know** how I can reproduce this bugs in simple case.\n## 1. order of test\n\nIf I change order of [test_too_many_login_tried](https://github.com/item4/ugoira/blob/master/tests/cli_test.py#L40) and [test_invalid_password](https://github.com/item4/ugoira/blob/httpretty/tests/cli_test.py#L82) each other, this test will be broken because `test_too_many_login_tried`'s `'https://www.secure.pixiv.net/login.php'` access must going to `'https://example.com/'` in test `test_invalid_password`.\n## 2. toss and toss and toss again\n\nIn [test_login_valid](https://github.com/item4/ugoira/blob/master/tests/lib_test.py#L11), I must insert this.\n\n``` py3\n     responses.add(**{\n            'method': responses.POST,\n            'url': 'http://example.com',\n            'body': '????',\n            'content_type': 'text/html; charset=utf-8',\n            'status': 301,\n            'adding_headers': {\n                'Location': 'http://www.pixiv.net/'\n            },\n        })\n```\n\nIf I remove it, test will be broken. `'http://example.com'` mentioned in before test, [cli_test.py](https://github.com/item4/ugoira/blob/master/tests/cli_test.py)\n\n---\n\nWhat the hell?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/90", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/90/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/90/events", "html_url": "https://github.com/getsentry/responses/issues/90", "id": 113009256, "node_id": "MDU6SXNzdWUxMTMwMDkyNTY=", "number": 90, "title": "Python 3.6-dev compability", "user": {"login": "jsstylos", "id": 5844820, "node_id": "MDQ6VXNlcjU4NDQ4MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5844820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsstylos", "html_url": "https://github.com/jsstylos", "followers_url": "https://api.github.com/users/jsstylos/followers", "following_url": "https://api.github.com/users/jsstylos/following{/other_user}", "gists_url": "https://api.github.com/users/jsstylos/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsstylos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsstylos/subscriptions", "organizations_url": "https://api.github.com/users/jsstylos/orgs", "repos_url": "https://api.github.com/users/jsstylos/repos", "events_url": "https://api.github.com/users/jsstylos/events{/privacy}", "received_events_url": "https://api.github.com/users/jsstylos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-10-23T12:23:34Z", "updated_at": "2018-11-15T02:30:41Z", "closed_at": "2018-11-15T02:30:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Use of `getargspec` causes test cases that use responses to fail:\n\n`3.6-dev/lib/python3.6/site-packages/responses.py:65: in get_wrapped\n    args, a, kw, defaults = inspect.getargspec(func)\nE   AttributeError: module 'inspect' has no attribute 'getargspec'`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/81", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/81/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/81/events", "html_url": "https://github.com/getsentry/responses/issues/81", "id": 104686029, "node_id": "MDU6SXNzdWUxMDQ2ODYwMjk=", "number": 81, "title": "CHANGES needs to be updated for 0.5.0", "user": {"login": "singingwolfboy", "id": 132355, "node_id": "MDQ6VXNlcjEzMjM1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/132355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/singingwolfboy", "html_url": "https://github.com/singingwolfboy", "followers_url": "https://api.github.com/users/singingwolfboy/followers", "following_url": "https://api.github.com/users/singingwolfboy/following{/other_user}", "gists_url": "https://api.github.com/users/singingwolfboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/singingwolfboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/singingwolfboy/subscriptions", "organizations_url": "https://api.github.com/users/singingwolfboy/orgs", "repos_url": "https://api.github.com/users/singingwolfboy/repos", "events_url": "https://api.github.com/users/singingwolfboy/events{/privacy}", "received_events_url": "https://api.github.com/users/singingwolfboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-09-03T12:57:29Z", "updated_at": "2016-01-30T16:24:10Z", "closed_at": "2016-01-30T16:24:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/80", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/80/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/80/events", "html_url": "https://github.com/getsentry/responses/issues/80", "id": 101998238, "node_id": "MDU6SXNzdWUxMDE5OTgyMzg=", "number": 80, "title": "Sessions lose cookies", "user": {"login": "FodT", "id": 5888989, "node_id": "MDQ6VXNlcjU4ODg5ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5888989?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FodT", "html_url": "https://github.com/FodT", "followers_url": "https://api.github.com/users/FodT/followers", "following_url": "https://api.github.com/users/FodT/following{/other_user}", "gists_url": "https://api.github.com/users/FodT/gists{/gist_id}", "starred_url": "https://api.github.com/users/FodT/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FodT/subscriptions", "organizations_url": "https://api.github.com/users/FodT/orgs", "repos_url": "https://api.github.com/users/FodT/repos", "events_url": "https://api.github.com/users/FodT/events{/privacy}", "received_events_url": "https://api.github.com/users/FodT/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-08-19T21:03:25Z", "updated_at": "2019-12-12T16:26:58Z", "closed_at": "2019-12-12T16:26:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \n\nIt seems that there's a problem with the mocked HTTP requests returned when using a session - the session cookie is returned in the response object, but does not get set in the session.\n\nI am pretty sure it's down to the extract_cookies_to_jar function in cookielib/cookies.py:\n\n``` python\ndef extract_cookies_to_jar(jar, request, response):\n    \"\"\"Extract the cookies from the response into a CookieJar.\n\n    :param jar: cookielib.CookieJar (not necessarily a RequestsCookieJar)\n    :param request: our own requests.Request object\n    :param response: urllib3.HTTPResponse object\n    \"\"\"\n    if not (hasattr(response, '_original_response') and\n            response._original_response):\n        return\n    # the _original_response field is the wrapped httplib.HTTPResponse object,\n    req = MockRequest(request)\n    # pull out the HTTPMessage with the headers and put it in the mock:\n    res = MockResponse(response._original_response.msg)\n    jar.extract_cookies(res, req)\n```\n\nThe _original_response attribute is missing from the mocked HTTPResponse, so no cookies get pulled out into the jar. \nI'm trying to come up with a solution and if I do I'll post here, but I should thought I'd let the community at large know. Perhaps I'm doing something silly :-)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/79", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/79/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/79/events", "html_url": "https://github.com/getsentry/responses/issues/79", "id": 101688548, "node_id": "MDU6SXNzdWUxMDE2ODg1NDg=", "number": 79, "title": "Feature request: easy assertions on post data", "user": {"login": "alexpdp7", "id": 1150630, "node_id": "MDQ6VXNlcjExNTA2MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/1150630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexpdp7", "html_url": "https://github.com/alexpdp7", "followers_url": "https://api.github.com/users/alexpdp7/followers", "following_url": "https://api.github.com/users/alexpdp7/following{/other_user}", "gists_url": "https://api.github.com/users/alexpdp7/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexpdp7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexpdp7/subscriptions", "organizations_url": "https://api.github.com/users/alexpdp7/orgs", "repos_url": "https://api.github.com/users/alexpdp7/repos", "events_url": "https://api.github.com/users/alexpdp7/events{/privacy}", "received_events_url": "https://api.github.com/users/alexpdp7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-08-18T15:54:06Z", "updated_at": "2018-06-26T17:42:03Z", "closed_at": "2018-06-26T17:42:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\n@responses.activate\ndef foo():\n        responses.add(responses.POST, 'http://foo.bar')\n        requests.post('http://foo.bar', {'qux': 'quux'})\n```\n\nI would like to assert that I've posted qux=quux, but doing this completely well is uncomfortable (esp. if you want to be py2-3 compatible).\n\nIdeally, I would like to do:\n\n``` python\nassert responses.calls[0].data = {'qux': 'quux'}\n```\n\nor something equivalent.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/78", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/78/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/78/events", "html_url": "https://github.com/getsentry/responses/issues/78", "id": 99529463, "node_id": "MDU6SXNzdWU5OTUyOTQ2Mw==", "number": 78, "title": "Querystring not matched", "user": {"login": "dgouldin", "id": 55577, "node_id": "MDQ6VXNlcjU1NTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/55577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgouldin", "html_url": "https://github.com/dgouldin", "followers_url": "https://api.github.com/users/dgouldin/followers", "following_url": "https://api.github.com/users/dgouldin/following{/other_user}", "gists_url": "https://api.github.com/users/dgouldin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgouldin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgouldin/subscriptions", "organizations_url": "https://api.github.com/users/dgouldin/orgs", "repos_url": "https://api.github.com/users/dgouldin/repos", "events_url": "https://api.github.com/users/dgouldin/events{/privacy}", "received_events_url": "https://api.github.com/users/dgouldin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-06T21:32:27Z", "updated_at": "2015-08-06T22:11:07Z", "closed_at": "2015-08-06T22:11:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using requests 2.7.0 and responses 0.4.0, it doesn't look like responses is correctly matching querystrings. Example:\n\n``` python\nimport requests\nimport responses\n\nwith responses.RequestsMock(assert_all_requests_are_fired=False) as rsps:\n    url = 'http://example.com/foo?bar=1'\n    rsps.add(responses.GET, url, status=200)\n\n    # raises ConnectionError\n    requests.get(url)\n```\n\nThe example works if you remove the querystring from the url.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/68", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/68/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/68/events", "html_url": "https://github.com/getsentry/responses/issues/68", "id": 79634047, "node_id": "MDU6SXNzdWU3OTYzNDA0Nw==", "number": 68, "title": "headers parameter for responses.add", "user": {"login": "hfaran", "id": 2450496, "node_id": "MDQ6VXNlcjI0NTA0OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2450496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hfaran", "html_url": "https://github.com/hfaran", "followers_url": "https://api.github.com/users/hfaran/followers", "following_url": "https://api.github.com/users/hfaran/following{/other_user}", "gists_url": "https://api.github.com/users/hfaran/gists{/gist_id}", "starred_url": "https://api.github.com/users/hfaran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hfaran/subscriptions", "organizations_url": "https://api.github.com/users/hfaran/orgs", "repos_url": "https://api.github.com/users/hfaran/repos", "events_url": "https://api.github.com/users/hfaran/events{/privacy}", "received_events_url": "https://api.github.com/users/hfaran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-22T22:24:41Z", "updated_at": "2020-05-26T18:55:56Z", "closed_at": "2020-05-26T18:55:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible for `responses.add` to support a `headers` parameter? Having to create a callback just to add headers seems a bit more work than it should be.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/66", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/66/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/66/events", "html_url": "https://github.com/getsentry/responses/issues/66", "id": 79349513, "node_id": "MDU6SXNzdWU3OTM0OTUxMw==", "number": 66, "title": "Requests 1.0 Support", "user": {"login": "dcramer", "id": 23610, "node_id": "MDQ6VXNlcjIzNjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/23610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcramer", "html_url": "https://github.com/dcramer", "followers_url": "https://api.github.com/users/dcramer/followers", "following_url": "https://api.github.com/users/dcramer/following{/other_user}", "gists_url": "https://api.github.com/users/dcramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcramer/subscriptions", "organizations_url": "https://api.github.com/users/dcramer/orgs", "repos_url": "https://api.github.com/users/dcramer/repos", "events_url": "https://api.github.com/users/dcramer/events{/privacy}", "received_events_url": "https://api.github.com/users/dcramer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-22T08:21:31Z", "updated_at": "2015-05-22T08:24:24Z", "closed_at": "2015-05-22T08:24:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Do we want to attempt this? It is broken right now, but I'm honestly not under the belief it's worth the effort.\n\nRefs #54\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/61", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/61/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/61/events", "html_url": "https://github.com/getsentry/responses/issues/61", "id": 76319660, "node_id": "MDU6SXNzdWU3NjMxOTY2MA==", "number": 61, "title": "TypeError: _wrapper_() takes no arguments (1 given)", "user": {"login": "shearichard", "id": 403435, "node_id": "MDQ6VXNlcjQwMzQzNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/403435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shearichard", "html_url": "https://github.com/shearichard", "followers_url": "https://api.github.com/users/shearichard/followers", "following_url": "https://api.github.com/users/shearichard/following{/other_user}", "gists_url": "https://api.github.com/users/shearichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/shearichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shearichard/subscriptions", "organizations_url": "https://api.github.com/users/shearichard/orgs", "repos_url": "https://api.github.com/users/shearichard/repos", "events_url": "https://api.github.com/users/shearichard/events{/privacy}", "received_events_url": "https://api.github.com/users/shearichard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-14T10:51:10Z", "updated_at": "2015-05-15T02:09:03Z", "closed_at": "2015-05-15T02:09:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using responses 0.3.0 in Python 3.4.0 (pip installed from pypi). \n\nI've got a problem that I don't know how to progress so if there's anyone who would offer a comment or some guidance I'd be grateful.\n\nWhen trying to do a basic test I'm getting an error message \n`TypeError: _wrapper_() takes no arguments (1 given)`.\n\nThe problem is, I believed, related to the point responses.update_wrapper() when this code \n\nsix.exec_(_wrapper_template % ctx, evaldict)\n\nis executed but I can't see how my code differs from the examples shown elsewhere.\n\nThe variables ctx and evaldict look like this \n\n(Pdb) evaldict\n{'tgt_func': <function RequestsMock.activate.<locals>.wrapped at 0x2afe2ed649d8>}\n(Pdb) ctx\n{'signature': '', 'tgt_func': 'tgt_func'}\n\nMy test looks like this \n\n```\nclass TestKlimneinates(unittest.TestCase):\n\n    def setUp(self):\n        pass\n\n    @responses.activate\n    def test_use_of_responses():\n        responses.add(responses.GET, 'http://twitter.com/api/1/foobar',\n                   body='{\"error\": \"not found\"}', status=404,\n                   content_type='application/json')\n\n        resp = requests.get('http://twitter.com/api/1/foobar')\n\n        assert resp.json() == {\"error\": \"not found\"}\n\n        assert len(responses.calls) == 1\n        assert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'\n        assert responses.calls[0].response.text == '{\"error\": \"not found\"}'\n\n\n    def tearDown(self):\n        pass\n\nif __name__ == '__main__':\n    unittest.main(module=\"test_klimneinates\")\n```\n\nAnd the output of the tests look like this .\n\n```\n(klimneclient)rshea@jaffa:~/dev/klimneinates-python-client/python-client> make test\npython setup.py test\nrunning test\nrunning egg_info\nwriting dependency_links to klimneinates.egg-info/dependency_links.txt\nwriting klimneinates.egg-info/PKG-INFO\nwriting top-level names to klimneinates.egg-info/top_level.txt\nreading manifest file 'klimneinates.egg-info/SOURCES.txt'\nwriting manifest file 'klimneinates.egg-info/SOURCES.txt'\nrunning build_ext\ntest_use_of_responses (tests.test_klimneinates.TestKlimneinates) ... ERROR\n\n======================================================================\nERROR: test_use_of_responses (tests.test_klimneinates.TestKlimneinates)\n----------------------------------------------------------------------\nTypeError: _wrapper_() takes no arguments (1 given)\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (errors=1)\n```\n\nAll suggestions or comments would be welcome.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/60", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/60/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/60/events", "html_url": "https://github.com/getsentry/responses/issues/60", "id": 72495777, "node_id": "MDU6SXNzdWU3MjQ5NTc3Nw==", "number": 60, "title": "Mocking a connection error", "user": {"login": "hughes", "id": 775741, "node_id": "MDQ6VXNlcjc3NTc0MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/775741?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hughes", "html_url": "https://github.com/hughes", "followers_url": "https://api.github.com/users/hughes/followers", "following_url": "https://api.github.com/users/hughes/following{/other_user}", "gists_url": "https://api.github.com/users/hughes/gists{/gist_id}", "starred_url": "https://api.github.com/users/hughes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hughes/subscriptions", "organizations_url": "https://api.github.com/users/hughes/orgs", "repos_url": "https://api.github.com/users/hughes/repos", "events_url": "https://api.github.com/users/hughes/events{/privacy}", "received_events_url": "https://api.github.com/users/hughes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-01T18:48:40Z", "updated_at": "2015-05-01T19:10:06Z", "closed_at": "2015-05-01T19:10:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could I use responses to mock when a server is completely unavailable?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/58", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/58/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/58/events", "html_url": "https://github.com/getsentry/responses/issues/58", "id": 71288430, "node_id": "MDU6SXNzdWU3MTI4ODQzMA==", "number": 58, "title": "Plans for a 0.4.0 release?", "user": {"login": "jhermann", "id": 1068245, "node_id": "MDQ6VXNlcjEwNjgyNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1068245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhermann", "html_url": "https://github.com/jhermann", "followers_url": "https://api.github.com/users/jhermann/followers", "following_url": "https://api.github.com/users/jhermann/following{/other_user}", "gists_url": "https://api.github.com/users/jhermann/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhermann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhermann/subscriptions", "organizations_url": "https://api.github.com/users/jhermann/orgs", "repos_url": "https://api.github.com/users/jhermann/repos", "events_url": "https://api.github.com/users/jhermann/events{/privacy}", "received_events_url": "https://api.github.com/users/jhermann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-27T13:43:04Z", "updated_at": "2015-05-27T13:58:42Z", "closed_at": "2015-05-27T13:58:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I ran into the problem that the context manager doesn't work in the current release version (0.3.0) and had to dig into the sources. Any plans on the next release? Anything we can help with?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/57", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/57/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/57/events", "html_url": "https://github.com/getsentry/responses/issues/57", "id": 69247996, "node_id": "MDU6SXNzdWU2OTI0Nzk5Ng==", "number": 57, "title": "Problems with url's that contain '?'", "user": {"login": "victorevector", "id": 10040882, "node_id": "MDQ6VXNlcjEwMDQwODgy", "avatar_url": "https://avatars1.githubusercontent.com/u/10040882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victorevector", "html_url": "https://github.com/victorevector", "followers_url": "https://api.github.com/users/victorevector/followers", "following_url": "https://api.github.com/users/victorevector/following{/other_user}", "gists_url": "https://api.github.com/users/victorevector/gists{/gist_id}", "starred_url": "https://api.github.com/users/victorevector/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victorevector/subscriptions", "organizations_url": "https://api.github.com/users/victorevector/orgs", "repos_url": "https://api.github.com/users/victorevector/repos", "events_url": "https://api.github.com/users/victorevector/events{/privacy}", "received_events_url": "https://api.github.com/users/victorevector/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-04-18T00:44:17Z", "updated_at": "2016-08-22T02:30:44Z", "closed_at": "2015-04-21T18:58:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everybody,\n\nI've written up a test that only fails when a '?' is present in the url. The url in question (and used by both Requests and Responses) is \"https://api.23andme.com/1/demo/genotypes/c4480ba411939067/?locations=rs3094315\". I've ran the test twice. Once with the '?' available to both requests and responses and another with the '?' omitted from the url. The former failed whereas the latter passed.\n\nAny insight into what the problem may be? I have pasted both the test method and the interpreter's error message below. One thing I've noticed in the error message is that Responses's '_find_match' method isn't being called. I'm not sure if that's of any importance...\n\nTest method in question:\n\n```\n@responses.activate\ndef test_get_genotype_with_valid_profile_id_and_valid_locations_as_method_arguments(self):\n    json_response = '{ \"i3000001\": \"II\", \"rs3094315\": \"AA\", \"id\": \"c4480ba411939067\"}'\n    profile_id = \"c4480ba411939067\"\n    locations = \"rs3094315\"\n    url = \"https://api.23andme.com/1/demo/genotypes/{}/?locations={}\".format(profile_id, locations) \n    responses.add(responses.GET,\n        url,\n        body = json_response,\n        content_type ='application/json',\n        status = 200\n        )\n    client = Client._23AndMeClient('89822b93d2')\n    expected_json_response = json.loads(json_response)\n    self.assertEqual(client.get_genotype(profile_id= profile_id, locations=locations), expected_json_response ) \n```\n\nError Message:\n\n```\nERROR: test_get_genotype_with_valid_profile_id_and_valid_locations_as_method_arguments (api.tests.ClientTestCase)\nTraceback (most recent call last):\nFile \"<string>\", line 2, in _wrapper_\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/responses.py\", line 167, in wrapped\nreturn func(*args, **kwargs)\nFile \"/Users/victorestebanfimbres/django_workspace/andMe/api/tests.py\", line 89, in test_get_genotype_with_valid_profile_id_and_valid_locations_as_method_arguments\nself.assertEqual(client.get_genotype(profile_id= profile_id, locations=locations), expected_json_response )\nFile \"/Users/victorestebanfimbres/django_workspace/andMe/api/Client.py\", line 59, in get_genotype\nreturn self._get_resource('demo/genotypes/{}/?locations={}'.format(profile_id, locations) )\nFile \"/Users/victorestebanfimbres/django_workspace/andMe/api/Client.py\", line 50, in _get_resource\nresponse = requests.get(url, headers= headers, verify = False)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/requests/api.py\", line 55, in get\nreturn request('get', url, **kwargs)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/requests/api.py\", line 44, in request\nreturn session.request(method=method, url=url, **kwargs)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/requests/sessions.py\", line 383, in request\nresp = self.send(prep, **send_kwargs)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/responses.py\", line 263, in unbound_on_send\nreturn self._on_request(session, requests, *a, **kwargs)\nFile \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/responses.py\", line 219, in _on_request\nraise response\nConnectionError: Connection refused: https://api.23andme.com/1/demo/genotypes/c4480ba411939067/?locations=rs3094315\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/54", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/54/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/54/events", "html_url": "https://github.com/getsentry/responses/issues/54", "id": 66329224, "node_id": "MDU6SXNzdWU2NjMyOTIyNA==", "number": 54, "title": "Tests failed with Requests 1.2.3", "user": {"login": "curtisforrester", "id": 5033139, "node_id": "MDQ6VXNlcjUwMzMxMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5033139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/curtisforrester", "html_url": "https://github.com/curtisforrester", "followers_url": "https://api.github.com/users/curtisforrester/followers", "following_url": "https://api.github.com/users/curtisforrester/following{/other_user}", "gists_url": "https://api.github.com/users/curtisforrester/gists{/gist_id}", "starred_url": "https://api.github.com/users/curtisforrester/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/curtisforrester/subscriptions", "organizations_url": "https://api.github.com/users/curtisforrester/orgs", "repos_url": "https://api.github.com/users/curtisforrester/repos", "events_url": "https://api.github.com/users/curtisforrester/events{/privacy}", "received_events_url": "https://api.github.com/users/curtisforrester/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-04T15:06:51Z", "updated_at": "2015-05-22T08:21:38Z", "closed_at": "2015-05-22T08:21:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Might need to update the readme to refine the version requirements.\n\nI had an older version of requests installed in my virtual env and the tests failed (example of fail below). However, upgrading to latest 2.6 requests resolved the issue. \n\n================================== FAILURES ===================================\n________________________________ test_response ________________________________\ntest_responses.py:42: in test_response\n    run()\n<string>:3: in wrapper\n    ???\ntest_responses.py:30: in run\n    resp = requests.get('http://example.com')\n....\\pyVirtCTRAQ\\lib\\site-packages\\requests\\api.py:55: in get\n    return request('get', url, *_kwargs)\n....\\pyVirtCTRAQ\\lib\\site-packages\\requests\\api.py:44: in request\n    return session.request(method=method, url=url, *_kwargs)\n....\\pyVirtCTRAQ\\lib\\site-packages\\requests\\sessions.py:335: in request\n    resp = self.send(prep, *_send_kwargs)\nresponses.py:265: in unbound_on_send\n    return self._on_request(session, requests, *a, *_kwargs)\nresponses.py:242: in _on_request\n    response = adapter.build_response(request, response)\n....\\pyVirtCTRAQ\\lib\\site-packages\\requests\\adapters.py:176: in build_response\n    extract_cookies_to_jar(response.cookies, req, resp)\n....\\pyVirtCTRAQ\\lib\\site-packages\\requests\\cookies.py:108: in extract_cookies_to_jar\n    res = MockResponse(response._original_response.msg)\nE   AttributeError: 'NoneType' object has no attribute 'msg'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/53", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/53/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/53/events", "html_url": "https://github.com/getsentry/responses/issues/53", "id": 65437573, "node_id": "MDU6SXNzdWU2NTQzNzU3Mw==", "number": 53, "title": "Getting 'AssertionError: Not all requests has been executed' in my custom mocker code", "user": {"login": "hussaintamboli", "id": 2324958, "node_id": "MDQ6VXNlcjIzMjQ5NTg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2324958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hussaintamboli", "html_url": "https://github.com/hussaintamboli", "followers_url": "https://api.github.com/users/hussaintamboli/followers", "following_url": "https://api.github.com/users/hussaintamboli/following{/other_user}", "gists_url": "https://api.github.com/users/hussaintamboli/gists{/gist_id}", "starred_url": "https://api.github.com/users/hussaintamboli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hussaintamboli/subscriptions", "organizations_url": "https://api.github.com/users/hussaintamboli/orgs", "repos_url": "https://api.github.com/users/hussaintamboli/repos", "events_url": "https://api.github.com/users/hussaintamboli/events{/privacy}", "received_events_url": "https://api.github.com/users/hussaintamboli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-31T12:18:16Z", "updated_at": "2015-03-31T12:59:44Z", "closed_at": "2015-03-31T12:59:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "`responses` work for below example\n\n```\n# mocked1.py\nimport responses\nimport requests\n\ndef test_my_api():\n    with responses.RequestsMock() as rsps:\n        rsps.add(responses.GET, 'http://twitter.com/api/1/foobar',\n             body='ok', status=200,\n             content_type='application/json')\n        resp = requests.get('http://twitter.com/api/1/foobar')\n        assert resp.text == 'ok'\n        assert resp.status_code == '200'\n\ntest_my_api()\n```\n\nI can see that `requests` was mocked.\n\nBut when I modify the code like below \n\n```\n# mocked2.py\nimport responses\nimport requests\n\ndef api_call():\n    resp = requests.get('http://twitter.com/api/1/foobar')\n    return resp\n\ndef test_my_api():\n    with responses.RequestsMock() as rsps:\n        rsps.add(responses.GET, 'http://twitter.com/api/1/foobar',\n             body='ok', status=200,\n             content_type='application/json')\n        assert resp.text == 'ok'\n        assert resp.status_code == '200'\n\ntest_my_api()\n```\n\nI get an error saying\n\n```\nAssertionError: Not all requests has been executed [(u'GET', 'http://twitter.com/api/1/foobar')]\n```\n\nWhat is going on? Am I doing something wrong?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/50", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/50/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/50/events", "html_url": "https://github.com/getsentry/responses/issues/50", "id": 58614736, "node_id": "MDU6SXNzdWU1ODYxNDczNg==", "number": 50, "title": "Transfer repo to dcramer", "user": {"login": "dustinfarris", "id": 1087165, "node_id": "MDQ6VXNlcjEwODcxNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1087165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dustinfarris", "html_url": "https://github.com/dustinfarris", "followers_url": "https://api.github.com/users/dustinfarris/followers", "following_url": "https://api.github.com/users/dustinfarris/following{/other_user}", "gists_url": "https://api.github.com/users/dustinfarris/gists{/gist_id}", "starred_url": "https://api.github.com/users/dustinfarris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dustinfarris/subscriptions", "organizations_url": "https://api.github.com/users/dustinfarris/orgs", "repos_url": "https://api.github.com/users/dustinfarris/repos", "events_url": "https://api.github.com/users/dustinfarris/events{/privacy}", "received_events_url": "https://api.github.com/users/dustinfarris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-02-23T16:59:06Z", "updated_at": "2015-03-06T02:28:58Z", "closed_at": "2015-03-06T01:47:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would love to see this project maintained by someone\u2014preferably by the guy who wrote it.\n\n/cc @dcramer \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/47", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/47/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/47/events", "html_url": "https://github.com/getsentry/responses/issues/47", "id": 57571196, "node_id": "MDU6SXNzdWU1NzU3MTE5Ng==", "number": 47, "title": "Provide a py.test fixture in addition to the decorator ", "user": {"login": "ThiefMaster", "id": 179599, "node_id": "MDQ6VXNlcjE3OTU5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/179599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThiefMaster", "html_url": "https://github.com/ThiefMaster", "followers_url": "https://api.github.com/users/ThiefMaster/followers", "following_url": "https://api.github.com/users/ThiefMaster/following{/other_user}", "gists_url": "https://api.github.com/users/ThiefMaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThiefMaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThiefMaster/subscriptions", "organizations_url": "https://api.github.com/users/ThiefMaster/orgs", "repos_url": "https://api.github.com/users/ThiefMaster/repos", "events_url": "https://api.github.com/users/ThiefMaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ThiefMaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2015-02-13T08:16:39Z", "updated_at": "2018-10-22T18:11:03Z", "closed_at": "2018-10-22T18:11:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using py.test for tests it's usually nicer to activate features like this using a fixture. The usage with the fixture (assuming it's named `responses`) could be like this:\n\n``` python\ndef test_my_api(responses):\n    responses.add(responses.GET, 'http://twitter.com/api/1/foobar',\n                  body='{\"error\": \"not found\"}', status=404,\n                  content_type='application/json')\n\n    # ...\n```\n\nI.e. instead of the decorator you'd use a `responses` fixture and instead of calling `add` as a global from the imported module (if you register it as a pytest plugin the user doesn't need to import it at all) you'd call it on the object returned by the fixture function (which could simple be the module `responses`, but a wrapper would be cleaner of course).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/41", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/41/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/41/events", "html_url": "https://github.com/getsentry/responses/issues/41", "id": 49786567, "node_id": "MDU6SXNzdWU0OTc4NjU2Nw==", "number": 41, "title": "Improve public symbol exposure routine", "user": {"login": "saaj", "id": 5774272, "node_id": "MDQ6VXNlcjU3NzQyNzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5774272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaj", "html_url": "https://github.com/saaj", "followers_url": "https://api.github.com/users/saaj/followers", "following_url": "https://api.github.com/users/saaj/following{/other_user}", "gists_url": "https://api.github.com/users/saaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaj/subscriptions", "organizations_url": "https://api.github.com/users/saaj/orgs", "repos_url": "https://api.github.com/users/saaj/repos", "events_url": "https://api.github.com/users/saaj/events{/privacy}", "received_events_url": "https://api.github.com/users/saaj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-11-22T12:25:28Z", "updated_at": "2014-11-22T20:44:08Z", "closed_at": "2014-11-22T20:42:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n# expose default mock namespace\nmock = _default_mock = RequestsMock()\n__all__ = []\nfor __attr in (a for a in dir(_default_mock) if not a.startswith('_')):\n    __all__.append(__attr)\n    globals()[__attr] = getattr(_default_mock, __attr)\n```\n\nThis is an unpythonic ugly hack. More to say this may threaten your health if BDFL will ever cast an eye over it while still working at Dropbox ;-)\n\nSeriously, if you would like to have a public API of functions, use functions in the module and KISS. Otherwise take a look at HTTPretty that you were inspired by, on how to properly implement such API. Current implementation, besides being a bad example from allegedly python-friendly company's account, makes it harder to extend the library (see #40) and complicates code analysis (e.g. auto-completion).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/37", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/37/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/37/events", "html_url": "https://github.com/getsentry/responses/issues/37", "id": 45380255, "node_id": "MDU6SXNzdWU0NTM4MDI1NQ==", "number": 37, "title": "add_callback should not indistinguishably encode body into utf-8", "user": {"login": "cournape", "id": 25111, "node_id": "MDQ6VXNlcjI1MTEx", "avatar_url": "https://avatars1.githubusercontent.com/u/25111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cournape", "html_url": "https://github.com/cournape", "followers_url": "https://api.github.com/users/cournape/followers", "following_url": "https://api.github.com/users/cournape/following{/other_user}", "gists_url": "https://api.github.com/users/cournape/gists{/gist_id}", "starred_url": "https://api.github.com/users/cournape/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cournape/subscriptions", "organizations_url": "https://api.github.com/users/cournape/orgs", "repos_url": "https://api.github.com/users/cournape/repos", "events_url": "https://api.github.com/users/cournape/events{/privacy}", "received_events_url": "https://api.github.com/users/cournape/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-09T15:29:30Z", "updated_at": "2014-10-13T12:33:38Z", "closed_at": "2014-10-13T12:33:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`responses.add_callback` mode behaves differently than `responses.add` here. The former should use something like https://github.com/dropbox/responses/blob/master/responses.py#L192, as one cannot currently mock e.g. `application/octet-stream`-type of response using callback mode.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/34", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/34/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/34/events", "html_url": "https://github.com/getsentry/responses/issues/34", "id": 44069027, "node_id": "MDU6SXNzdWU0NDA2OTAyNw==", "number": 34, "title": "New PyPI Release Needed", "user": {"login": "rhgrant10", "id": 1757518, "node_id": "MDQ6VXNlcjE3NTc1MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1757518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhgrant10", "html_url": "https://github.com/rhgrant10", "followers_url": "https://api.github.com/users/rhgrant10/followers", "following_url": "https://api.github.com/users/rhgrant10/following{/other_user}", "gists_url": "https://api.github.com/users/rhgrant10/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhgrant10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhgrant10/subscriptions", "organizations_url": "https://api.github.com/users/rhgrant10/orgs", "repos_url": "https://api.github.com/users/rhgrant10/repos", "events_url": "https://api.github.com/users/rhgrant10/events{/privacy}", "received_events_url": "https://api.github.com/users/rhgrant10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-09-26T14:43:32Z", "updated_at": "2014-10-13T13:02:02Z", "closed_at": "2014-10-13T13:02:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, really love the work! But unfortunately, one of the best features (URL regex matching) isn't in the latest PyPI release (v0.2.2)! So my Travis-CI configuration has to fetch a tarball of your master branch from GitHub, untar it, and `pip install .` it (from the directory). Any word on when `pip install responses` will come with support for regex matching URLs?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/29", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/29/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/29/events", "html_url": "https://github.com/getsentry/responses/issues/29", "id": 42115147, "node_id": "MDU6SXNzdWU0MjExNTE0Nw==", "number": 29, "title": "Using responses to mock a requests.get from a different object", "user": {"login": "kura", "id": 109507, "node_id": "MDQ6VXNlcjEwOTUwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/109507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kura", "html_url": "https://github.com/kura", "followers_url": "https://api.github.com/users/kura/followers", "following_url": "https://api.github.com/users/kura/following{/other_user}", "gists_url": "https://api.github.com/users/kura/gists{/gist_id}", "starred_url": "https://api.github.com/users/kura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kura/subscriptions", "organizations_url": "https://api.github.com/users/kura/orgs", "repos_url": "https://api.github.com/users/kura/repos", "events_url": "https://api.github.com/users/kura/events{/privacy}", "received_events_url": "https://api.github.com/users/kura/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-09-06T11:58:15Z", "updated_at": "2015-04-17T09:17:37Z", "closed_at": "2014-09-06T11:59:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a class that sets up and handles HTTP requests for me\n\n``` python\nclass Client(object):\n    api_base = \"https://api.digitalocean.com/v2/\"\n\n    def get(self, url):\n        r = requests.get(\"{0}{1}\".format(self.api_base, url))\n        r.raise_for_status()\n        return json.loads(r.text)\n```\n\nWhich is called similar to this\n\n``` python\ncli = Client()\nprint cli.get(\"test\")\n```\n\nWhen I try to use this from within a TestCase via nosetests I get a 404 error from requests and it actually does the HTTP request to get that error, instead of using the mocked content from responses.\n\n``` python\nclass TestClient(unittest.TestCase):\n\n    @responses.activate\n    def test_get_json(self):\n        url = \"https://api.digitalocean.com/v2/kura\"\n        responses.add(responses.GET, url,\n                      body='{\"message\": \"something\"}', status=200,\n                      content_type=\"application/json\")\n        j = self.cli.get(\"kura\")\n        self.assertEquals(j['message'], \"something\")\n```\n\nThis is the final HTTPError exception that is triggered.\n\n``` python\nTraceback (most recent call last):\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/responses.py\", line 118, in wrapped\n    return func(*args, **kwargs)\n  File \"/home/kura/workspace/batfish/tests/test_client.py\", line 50, in test_get_json\n    j = self.cli.get(uri)\n  File \"/home/kura/workspace/batfish/batfish/client.py\", line 81, in get\n    r = requests.get(\"{0}{1}\".format(self.api_base, url), headers=headers)\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/requests/api.py\", line 55, in get\n    return request('get', url, **kwargs)\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/requests/api.py\", line 44, in request\n    return session.request(method=method, url=url, **kwargs)\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/requests/sessions.py\", line 456, in request\n    resp = self.send(prep, **send_kwargs)\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/responses.py\", line 163, in _on_request\n    raise response\nConnectionError: Connection refused: https://api.digitalocean.com/v2/kura/\n```\n\nAs you can see, this is actually sending the request off to the server, rather than serving up the mocked response.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/28", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/28/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/28/events", "html_url": "https://github.com/getsentry/responses/issues/28", "id": 42115075, "node_id": "MDU6SXNzdWU0MjExNTA3NQ==", "number": 28, "title": "Using responses with `raise_for_status()`", "user": {"login": "kura", "id": 109507, "node_id": "MDQ6VXNlcjEwOTUwNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/109507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kura", "html_url": "https://github.com/kura", "followers_url": "https://api.github.com/users/kura/followers", "following_url": "https://api.github.com/users/kura/following{/other_user}", "gists_url": "https://api.github.com/users/kura/gists{/gist_id}", "starred_url": "https://api.github.com/users/kura/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kura/subscriptions", "organizations_url": "https://api.github.com/users/kura/orgs", "repos_url": "https://api.github.com/users/kura/repos", "events_url": "https://api.github.com/users/kura/events{/privacy}", "received_events_url": "https://api.github.com/users/kura/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-09-06T11:53:38Z", "updated_at": "2014-09-06T11:56:55Z", "closed_at": "2014-09-06T11:56:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a class that sets up and handles HTTP requests for me\n\n``` python\nclass Client(object):\n    api_base = \"https://api.digitalocean.com/v2/\"\n\n    def get(self, url):\n        r = requests.get(\"{0}{1}\".format(self.api_base, url))\n        r.raise_for_status()\n        return json.loads(r.text)\n```\n\nWhich is called similar to this\n\n``` python\ncli = Client()\nprint cli.get(\"test\")\n```\n\nWhen I try to use this from within a TestCase via nosetests I get a 404 error from requests and it actually does the HTTP request to get that error, instead of using the mocked content from responses.\n\n``` python\nclass TestClient(unittest.TestCase):\n\n    @responses.activate\n    def test_get_json(self):\n        url = \"https://api.digitalocean.com/v2/kura\"\n        responses.add(responses.GET, url,\n                      body='{\"message\": \"something\"}', status=200,\n                      content_type=\"application/json\")\n        j = self.cli.get(\"kura\")\n        self.assertEquals(j['message'], \"something\")\n```\n\nThis is the final HTTPError exception that is triggered.\n\n``` python\nTraceback (most recent call last):\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/responses.py\", line 118, in wrapped\n    return func(*args, **kwargs)\n  File \"/home/kura/workspace/batfish/tests/test_client.py\", line 20, in test_my_api\n    resp = self.cli.get('kura')\n  File \"/home/kura/workspace/batfish/batfish/client.py\", line 83, in get\n    r.raise_for_status()\n  File \"/home/kura/.virtualenvs/batfish-python2.7/local/lib/python2.7/site-packages/requests/models.py\", line 795, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nHTTPError: 404 Client Error: None\n```\n\nIt seems this issue is due to me using `raise_for_status()`, what is the correct way to deal with this when using responses?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/27", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/27/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/27/events", "html_url": "https://github.com/getsentry/responses/issues/27", "id": 41389285, "node_id": "MDU6SXNzdWU0MTM4OTI4NQ==", "number": 27, "title": "Readme Example Fails on Python 3.4.0", "user": {"login": "rhgrant10", "id": 1757518, "node_id": "MDQ6VXNlcjE3NTc1MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1757518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhgrant10", "html_url": "https://github.com/rhgrant10", "followers_url": "https://api.github.com/users/rhgrant10/followers", "following_url": "https://api.github.com/users/rhgrant10/following{/other_user}", "gists_url": "https://api.github.com/users/rhgrant10/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhgrant10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhgrant10/subscriptions", "organizations_url": "https://api.github.com/users/rhgrant10/orgs", "repos_url": "https://api.github.com/users/rhgrant10/repos", "events_url": "https://api.github.com/users/rhgrant10/events{/privacy}", "received_events_url": "https://api.github.com/users/rhgrant10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-08-28T13:24:19Z", "updated_at": "2018-11-15T02:32:14Z", "closed_at": "2018-11-15T02:32:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems as though the content it returned as bytes, which are apparently not equal to strings.\n\n``` python\nPython 3.4.0 (default, Apr 11 2014, 13:05:11) \n[GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> import responses\n>>> \n>>> @responses.activate\n... def test_my_api():\n...     content = '{\"error\": \"not found\"}'\n...     responses.add(responses.GET, 'http://twitter.com/api/1/foobar',\n...                   body=content, status=404,\n...                   content_type='application/json')\n...     resp = requests.get('http://twitter.com/api/1/foobar')\n...     print(\"Asserting json output\")\n...     assert resp.json() == {\"error\": \"not found\"}\n...     print(\"Asserting call count\")\n...     assert len(responses.calls) == 1\n...     print(\"Asserting first call request url\")\n...     assert responses.calls[0].request.url == 'http://twitter.com/api/1/foobar'\n...     print(\"Asserting first call response content\")\n...     try:\n...         assert responses.calls[0].response.content == content\n...     except Exception:\n...         print(\"ASSERTION FAILED!\")\n...         print(\"Asserted content: {}\".format(content))\n...         print(\"Actual content: {}\".format(responses.calls[0].response.content))\n...     else:\n...         print(\"\\nAll assertions successful!\")\n... \n>>> test_my_api()\nAsserting json output\nAsserting call count\nAsserting first call request url\nAsserting first call response content\nASSERTION FAILED!\nAsserted content: {\"error\": \"not found\"}\nActual content: b'{\"error\": \"not found\"}'\n>>> \n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/23", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/23/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/23/events", "html_url": "https://github.com/getsentry/responses/issues/23", "id": 37510112, "node_id": "MDU6SXNzdWUzNzUxMDExMg==", "number": 23, "title": "[feature request] Support for mocking authentication", "user": {"login": "rshipp", "id": 1382374, "node_id": "MDQ6VXNlcjEzODIzNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1382374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rshipp", "html_url": "https://github.com/rshipp", "followers_url": "https://api.github.com/users/rshipp/followers", "following_url": "https://api.github.com/users/rshipp/following{/other_user}", "gists_url": "https://api.github.com/users/rshipp/gists{/gist_id}", "starred_url": "https://api.github.com/users/rshipp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rshipp/subscriptions", "organizations_url": "https://api.github.com/users/rshipp/orgs", "repos_url": "https://api.github.com/users/rshipp/repos", "events_url": "https://api.github.com/users/rshipp/events{/privacy}", "received_events_url": "https://api.github.com/users/rshipp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-07-09T21:24:00Z", "updated_at": "2014-07-13T16:50:58Z", "closed_at": "2014-07-12T18:06:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know how difficult this would be to implement, but support for mocking some of request's [authentication](http://docs.python-requests.org/en/latest/user/authentication/) methods would be awesome.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/20", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/20/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/20/events", "html_url": "https://github.com/getsentry/responses/issues/20", "id": 35240049, "node_id": "MDU6SXNzdWUzNTI0MDA0OQ==", "number": 20, "title": "[feature request] Support for regex url matching", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2014-06-08T16:15:13Z", "updated_at": "2014-10-13T12:37:48Z", "closed_at": "2014-10-13T12:37:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Something along the lines of:\n\n``` python\n# ...\nresponses.add_pattern(\n    responses.GET, \n    r'(.*\\.)?dropbox\\.com$', \n    body='Welcome', \n    status=200\n)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/19", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/19/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/19/events", "html_url": "https://github.com/getsentry/responses/issues/19", "id": 35218516, "node_id": "MDU6SXNzdWUzNTIxODUxNg==", "number": 19, "title": "Documentation", "user": {"login": "AutomatedTester", "id": 128518, "node_id": "MDQ6VXNlcjEyODUxOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/128518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AutomatedTester", "html_url": "https://github.com/AutomatedTester", "followers_url": "https://api.github.com/users/AutomatedTester/followers", "following_url": "https://api.github.com/users/AutomatedTester/following{/other_user}", "gists_url": "https://api.github.com/users/AutomatedTester/gists{/gist_id}", "starred_url": "https://api.github.com/users/AutomatedTester/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AutomatedTester/subscriptions", "organizations_url": "https://api.github.com/users/AutomatedTester/orgs", "repos_url": "https://api.github.com/users/AutomatedTester/repos", "events_url": "https://api.github.com/users/AutomatedTester/events{/privacy}", "received_events_url": "https://api.github.com/users/AutomatedTester/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-06-07T21:06:35Z", "updated_at": "2018-11-15T02:31:16Z", "closed_at": "2018-11-15T02:31:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would be super helpful ;)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/17", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/17/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/17/events", "html_url": "https://github.com/getsentry/responses/issues/17", "id": 33393082, "node_id": "MDU6SXNzdWUzMzM5MzA4Mg==", "number": 17, "title": "Chance of annointing 0.2.1?", "user": {"login": "dfc", "id": 129725, "node_id": "MDQ6VXNlcjEyOTcyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/129725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfc", "html_url": "https://github.com/dfc", "followers_url": "https://api.github.com/users/dfc/followers", "following_url": "https://api.github.com/users/dfc/following{/other_user}", "gists_url": "https://api.github.com/users/dfc/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfc/subscriptions", "organizations_url": "https://api.github.com/users/dfc/orgs", "repos_url": "https://api.github.com/users/dfc/repos", "events_url": "https://api.github.com/users/dfc/events{/privacy}", "received_events_url": "https://api.github.com/users/dfc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-05-13T12:26:31Z", "updated_at": "2014-05-13T18:26:47Z", "closed_at": "2014-05-13T18:26:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you bump the version number so that the fix from #12 gets propagated out to the world? I keep having to monkey patch things when things tests fail under debian.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/14", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/14/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/14/events", "html_url": "https://github.com/getsentry/responses/issues/14", "id": 32543361, "node_id": "MDU6SXNzdWUzMjU0MzM2MQ==", "number": 14, "title": "responses.activate breaks pytest fixture", "user": {"login": "l0kix2", "id": 578057, "node_id": "MDQ6VXNlcjU3ODA1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/578057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l0kix2", "html_url": "https://github.com/l0kix2", "followers_url": "https://api.github.com/users/l0kix2/followers", "following_url": "https://api.github.com/users/l0kix2/following{/other_user}", "gists_url": "https://api.github.com/users/l0kix2/gists{/gist_id}", "starred_url": "https://api.github.com/users/l0kix2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l0kix2/subscriptions", "organizations_url": "https://api.github.com/users/l0kix2/orgs", "repos_url": "https://api.github.com/users/l0kix2/repos", "events_url": "https://api.github.com/users/l0kix2/events{/privacy}", "received_events_url": "https://api.github.com/users/l0kix2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-04-30T15:11:34Z", "updated_at": "2014-11-30T19:32:18Z", "closed_at": "2014-11-30T19:32:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that decorator `responses.activate` that uses `functools.wraps` breaks pytest fixture passing into test function argument. \n\nNot sure what function params are not copied into wrapper, but at SO i found answer, that said decorator package does same stuff better.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/getsentry/responses/issues/11", "repository_url": "https://api.github.com/repos/getsentry/responses", "labels_url": "https://api.github.com/repos/getsentry/responses/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/getsentry/responses/issues/11/comments", "events_url": "https://api.github.com/repos/getsentry/responses/issues/11/events", "html_url": "https://github.com/getsentry/responses/issues/11", "id": 29039043, "node_id": "MDU6SXNzdWUyOTAzOTA0Mw==", "number": 11, "title": "Expose hidden _start() and _stop() methods", "user": {"login": "johtso", "id": 830800, "node_id": "MDQ6VXNlcjgzMDgwMA==", "avatar_url": "https://avatars1.githubusercontent.com/u/830800?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johtso", "html_url": "https://github.com/johtso", "followers_url": "https://api.github.com/users/johtso/followers", "following_url": "https://api.github.com/users/johtso/following{/other_user}", "gists_url": "https://api.github.com/users/johtso/gists{/gist_id}", "starred_url": "https://api.github.com/users/johtso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johtso/subscriptions", "organizations_url": "https://api.github.com/users/johtso/orgs", "repos_url": "https://api.github.com/users/johtso/repos", "events_url": "https://api.github.com/users/johtso/events{/privacy}", "received_events_url": "https://api.github.com/users/johtso/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-03-09T08:13:40Z", "updated_at": "2014-04-24T20:20:30Z", "closed_at": "2014-04-24T20:20:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the only way to initialise the mocking is to use the decorator. It would be good if it was also possible to use the start and stop methods explicitly in setup/teardown logic.\n", "performed_via_github_app": null, "score": 1.0}]}