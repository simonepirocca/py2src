{"total_count": 100, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/eliben/pyelftools/issues/329", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/329/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/329/events", "html_url": "https://github.com/eliben/pyelftools/issues/329", "id": 665140773, "node_id": "MDU6SXNzdWU2NjUxNDA3NzM=", "number": 329, "title": "Offset issue parsing child by iter_DIE_children", "user": {"login": "Merzhin79", "id": 68738994, "node_id": "MDQ6VXNlcjY4NzM4OTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/68738994?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Merzhin79", "html_url": "https://github.com/Merzhin79", "followers_url": "https://api.github.com/users/Merzhin79/followers", "following_url": "https://api.github.com/users/Merzhin79/following{/other_user}", "gists_url": "https://api.github.com/users/Merzhin79/gists{/gist_id}", "starred_url": "https://api.github.com/users/Merzhin79/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Merzhin79/subscriptions", "organizations_url": "https://api.github.com/users/Merzhin79/orgs", "repos_url": "https://api.github.com/users/Merzhin79/repos", "events_url": "https://api.github.com/users/Merzhin79/events{/privacy}", "received_events_url": "https://api.github.com/users/Merzhin79/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-24T12:38:58Z", "updated_at": "2020-07-24T15:42:01Z", "closed_at": "2020-07-24T15:42:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got an error in \"iter_DIE_children\" in one of my ELF when parsing a compilation UNIT. The error is on the offset of DW_AT_sibling of one of the child (DW_TAG_lexical_block in the example but can be other DIE type but not all DIE).\r\n\r\nI got this when cur_offset is computed in \"iter_DIE_children\" as \"DW_AT_sibling\" exist (cur_offset = sibling.value + self.cu_offset):\r\n\r\nDIE DW_TAG_lexical_block, size=13, has_children=True\r\n    |DW_AT_sibling     :  AttributeValue(name='DW_AT_sibling', form='DW_FORM_ref_addr', value=970, raw_value=970, offset=939)\r\n\r\n==> In above exemple when we look at the sibling, we see: \r\n- value=970\r\n- offset=939\r\nAnd so cur_offset is computed to 970 + 939 but this is an error here as the offset of sibling is in fact 970 (no need to make the addition). But on other DIE the addition need to be done to retrieve the offset.\r\n\r\nIt seems that I got:\r\n- some die where cur_offset shall be equal to sibling.value\r\n- some other die where cur_offset shall be equal to sibling.value + self.cu_offset\r\n\r\nHere I don't know if the issue is in the ELF or in pyelftools itself ? After for the ELF, I use a commercial compiler/linker so I think DWARF information should be correct.\r\nI extract the DWARF by using objdump and on this DIE, the offset are correct.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/320", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/320/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/320/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/320/events", "html_url": "https://github.com/eliben/pyelftools/issues/320", "id": 634743126, "node_id": "MDU6SXNzdWU2MzQ3NDMxMjY=", "number": 320, "title": "Unknown CFI opcode", "user": {"login": "bin2415", "id": 10161265, "node_id": "MDQ6VXNlcjEwMTYxMjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/10161265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bin2415", "html_url": "https://github.com/bin2415", "followers_url": "https://api.github.com/users/bin2415/followers", "following_url": "https://api.github.com/users/bin2415/following{/other_user}", "gists_url": "https://api.github.com/users/bin2415/gists{/gist_id}", "starred_url": "https://api.github.com/users/bin2415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bin2415/subscriptions", "organizations_url": "https://api.github.com/users/bin2415/orgs", "repos_url": "https://api.github.com/users/bin2415/repos", "events_url": "https://api.github.com/users/bin2415/events{/privacy}", "received_events_url": "https://api.github.com/users/bin2415/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T16:01:00Z", "updated_at": "2020-06-08T16:58:07Z", "closed_at": "2020-06-08T16:58:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to parse \"eh_frame\" section by elftools, but I got below error:\r\n\r\n```\r\nUnknown CFI opcode: 0x2e\r\n```\r\n\r\nMy code to parse `eh_frame` is shown as below:\r\n\r\n```python\r\n with open(binary, 'rb') as elf_binary:\r\n        elf = ELFFile(elf_binary)\r\n        dwarf_sec = elf.get_dwarf_info()\r\n\r\n        if not dwarf_sec.has_EH_CFI():\r\n            return\r\n\r\n        try:\r\n            for entry in dwarf_sec.EH_CFI_entries():\r\n\r\n                if not isinstance(entry, ZERO):\r\n                    # do something\r\n        except elftools.common.exceptions.DWARFError as ex:\r\n            logging.error(\"Decodding error! %s \" % str(ex))\r\n```\r\n\r\nThe binary file is attached.\r\n[ld.gold.strip.zip](https://github.com/eliben/pyelftools/files/4747121/ld.gold.strip.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/316", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/316/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/316/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/316/events", "html_url": "https://github.com/eliben/pyelftools/issues/316", "id": 627852350, "node_id": "MDU6SXNzdWU2Mjc4NTIzNTA=", "number": 316, "title": "Question about editing ELF DWARF section", "user": {"login": "daravi", "id": 8097140, "node_id": "MDQ6VXNlcjgwOTcxNDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/8097140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daravi", "html_url": "https://github.com/daravi", "followers_url": "https://api.github.com/users/daravi/followers", "following_url": "https://api.github.com/users/daravi/following{/other_user}", "gists_url": "https://api.github.com/users/daravi/gists{/gist_id}", "starred_url": "https://api.github.com/users/daravi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daravi/subscriptions", "organizations_url": "https://api.github.com/users/daravi/orgs", "repos_url": "https://api.github.com/users/daravi/repos", "events_url": "https://api.github.com/users/daravi/events{/privacy}", "received_events_url": "https://api.github.com/users/daravi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T00:05:07Z", "updated_at": "2020-06-01T13:01:43Z", "closed_at": "2020-06-01T13:01:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any plan to support editing the dwarf information similar to what `debugedit` does? \r\n\r\nIf not what would be required to achieve that?\r\n\r\nAre there any other libraries (in any language) that you are aware of that allow editing of source path information of ELF/DWARF files?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/302", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/302/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/302/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/302/events", "html_url": "https://github.com/eliben/pyelftools/issues/302", "id": 581888193, "node_id": "MDU6SXNzdWU1ODE4ODgxOTM=", "number": 302, "title": "Same attribute twice in the DIE", "user": {"login": "sevaa", "id": 5807738, "node_id": "MDQ6VXNlcjU4MDc3Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5807738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sevaa", "html_url": "https://github.com/sevaa", "followers_url": "https://api.github.com/users/sevaa/followers", "following_url": "https://api.github.com/users/sevaa/following{/other_user}", "gists_url": "https://api.github.com/users/sevaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/sevaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sevaa/subscriptions", "organizations_url": "https://api.github.com/users/sevaa/orgs", "repos_url": "https://api.github.com/users/sevaa/repos", "events_url": "https://api.github.com/users/sevaa/events{/privacy}", "received_events_url": "https://api.github.com/users/sevaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-16T00:17:39Z", "updated_at": "2020-03-18T21:59:55Z", "closed_at": "2020-03-18T21:59:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Take a look at the abbrev section of  test/testfiles_for_unittests/dwarf_gnuops1.o in master, declaration 272. According to readelf, it goes:\r\n\r\n>    272      DW_TAG_subprogram    [no children]\r\n>     DW_AT_external     DW_FORM_flag_present\r\n>     DW_AT_declaration  DW_FORM_flag_present\r\n>     **DW_AT_linkage_name DW_FORM_strp**\r\n>     DW_AT_name         DW_FORM_strp\r\n>     DW_AT_decl_file    DW_FORM_data1\r\n>     DW_AT_decl_line    DW_FORM_data1\r\n>     **DW_AT_linkage_name DW_FORM_strp**\r\n>     DW_AT value: 0     DW_FORM value: 0\r\n\r\n`DW_AT_linkage_name` is present twice. Found a couple of DIEs with that declaraion - the value of `linkage_name` is identical in both places.\r\n\r\n`Readelf` has no problem with that, pyelftools presumes unique attribute names.\r\n\r\n---\r\n\r\nThe DWARF in the file is v4. This is a violation of the DWARF standard v4 section 2.2:\r\n\r\n>No more than one attribute with a given name may appear in any debugging information entry.\r\n\r\nThere was a similar bug recorded for GCC: https://gcc.gnu.org/legacy-ml/gcc-bugs/2016-10/msg02517.html . So this looks like a compiler bug too. Still, it would break the idea of testing against readelf. I'll see if I can create a bug for GCC.\r\n\r\nEDIT: on a later version of Debian, it doesn't reproduce. Guess they've fixed some time in the middle.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/301", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/301/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/301/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/301/events", "html_url": "https://github.com/eliben/pyelftools/issues/301", "id": 581747464, "node_id": "MDU6SXNzdWU1ODE3NDc0NjQ=", "number": 301, "title": "run_readelf_tests doesn't catch expression parsing mismatches", "user": {"login": "sevaa", "id": 5807738, "node_id": "MDQ6VXNlcjU4MDc3Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5807738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sevaa", "html_url": "https://github.com/sevaa", "followers_url": "https://api.github.com/users/sevaa/followers", "following_url": "https://api.github.com/users/sevaa/following{/other_user}", "gists_url": "https://api.github.com/users/sevaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/sevaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sevaa/subscriptions", "organizations_url": "https://api.github.com/users/sevaa/orgs", "repos_url": "https://api.github.com/users/sevaa/repos", "events_url": "https://api.github.com/users/sevaa/events{/privacy}", "received_events_url": "https://api.github.com/users/sevaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-15T17:02:51Z", "updated_at": "2020-03-15T21:27:36Z", "closed_at": "2020-03-15T21:27:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "While debugging support for `DW_OP_GNU_entry_value`, I've run the readelf test on my sample file. The test reported a match on `--debug-dump=info`. Meanwhile, the line with the opcode in question goes\r\n\r\n`<3a683>   DW_AT_GNU_call_site_value: 3 byte block: f3 1 55 \t(DW_OP_GNU_entry_value: (DW_OP_reg5 (rdi)))`\r\n\r\nin the proper `readelf` output, and\r\n\r\n`<3a683>   DW_AT_GNU_call_site_value: 3 byte block: f3 1 55 \t(<unknown DW_OP_GNU_entry_value>)`\r\n\r\nin the pyelftools' readelf.py output. The test runner script didn't catch the discrepancy.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/298", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/298/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/298/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/298/events", "html_url": "https://github.com/eliben/pyelftools/issues/298", "id": 580605699, "node_id": "MDU6SXNzdWU1ODA2MDU2OTk=", "number": 298, "title": "Refactor dwarf_expr parsing", "user": {"login": "eliben", "id": 1130906, "node_id": "MDQ6VXNlcjExMzA5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1130906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliben", "html_url": "https://github.com/eliben", "followers_url": "https://api.github.com/users/eliben/followers", "following_url": "https://api.github.com/users/eliben/following{/other_user}", "gists_url": "https://api.github.com/users/eliben/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliben/subscriptions", "organizations_url": "https://api.github.com/users/eliben/orgs", "repos_url": "https://api.github.com/users/eliben/repos", "events_url": "https://api.github.com/users/eliben/events{/privacy}", "received_events_url": "https://api.github.com/users/eliben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "eliben", "id": 1130906, "node_id": "MDQ6VXNlcjExMzA5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1130906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliben", "html_url": "https://github.com/eliben", "followers_url": "https://api.github.com/users/eliben/followers", "following_url": "https://api.github.com/users/eliben/following{/other_user}", "gists_url": "https://api.github.com/users/eliben/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliben/subscriptions", "organizations_url": "https://api.github.com/users/eliben/orgs", "repos_url": "https://api.github.com/users/eliben/repos", "events_url": "https://api.github.com/users/eliben/events{/privacy}", "received_events_url": "https://api.github.com/users/eliben/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "eliben", "id": 1130906, "node_id": "MDQ6VXNlcjExMzA5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1130906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliben", "html_url": "https://github.com/eliben", "followers_url": "https://api.github.com/users/eliben/followers", "following_url": "https://api.github.com/users/eliben/following{/other_user}", "gists_url": "https://api.github.com/users/eliben/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliben/subscriptions", "organizations_url": "https://api.github.com/users/eliben/orgs", "repos_url": "https://api.github.com/users/eliben/repos", "events_url": "https://api.github.com/users/eliben/events{/privacy}", "received_events_url": "https://api.github.com/users/eliben/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-03-13T13:36:31Z", "updated_at": "2020-03-14T12:53:19Z", "closed_at": "2020-03-14T12:53:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As #284 points out, the current parsing is inflexible and hard to extend for nested expressions.\r\n\r\nRefactor the parsing to make it easier to extend. It's OK to change the public API as long as it would be easy to convert to.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/288", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/288/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/288/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/288/events", "html_url": "https://github.com/eliben/pyelftools/issues/288", "id": 565702930, "node_id": "MDU6SXNzdWU1NjU3MDI5MzA=", "number": 288, "title": "off-by-one parsing eh_frame", "user": {"login": "rhelmot", "id": 2498805, "node_id": "MDQ6VXNlcjI0OTg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2498805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhelmot", "html_url": "https://github.com/rhelmot", "followers_url": "https://api.github.com/users/rhelmot/followers", "following_url": "https://api.github.com/users/rhelmot/following{/other_user}", "gists_url": "https://api.github.com/users/rhelmot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhelmot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhelmot/subscriptions", "organizations_url": "https://api.github.com/users/rhelmot/orgs", "repos_url": "https://api.github.com/users/rhelmot/repos", "events_url": "https://api.github.com/users/rhelmot/events{/privacy}", "received_events_url": "https://api.github.com/users/rhelmot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-15T05:59:02Z", "updated_at": "2020-03-10T13:12:14Z", "closed_at": "2020-03-10T13:12:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When enumerating `elffile.get_dwarf_info().EH_CFI_entries()` for \r\n[this file](https://github.com/eliben/pyelftools/files/4207796/in.acng.gz), the following error occurs:\r\n\r\n```\r\napt-cacher-ng_2-2_mips64el.deb.data/usr/lib/apt-cacher-ng/in.acng\r\nTraceback (most recent call last):\r\n  File \"/home/audrey/angr/pyelftools/elftools/construct/core.py\", line 351, in _parse\r\n    return self.packer.unpack(_read_stream(stream, self.length))[0]\r\n  File \"/home/audrey/angr/pyelftools/elftools/construct/core.py\", line 293, in _read_stream\r\n    raise FieldError(\"expected %d, found %d\" % (length, len(data)))\r\nelftools.construct.core.FieldError: expected 4, found 3\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/audrey/angr/pyelftools/elftools/common/utils.py\", line 40, in struct_parse\r\n    return struct.parse_stream(stream)\r\n  File \"/home/audrey/angr/pyelftools/elftools/construct/core.py\", line 190, in parse_stream\r\n    return self._parse(stream, Container())\r\n  File \"/home/audrey/angr/pyelftools/elftools/construct/core.py\", line 353, in _parse\r\n    raise FieldError(ex)\r\nelftools.construct.core.FieldError: expected 4, found 3\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./try_load.py\", line 14, in <module>\r\n    angr.Project(filename, auto_load_libs=False)\r\n  File \"/home/audrey/angr/angr/angr/project.py\", line 129, in __init__\r\n    self.loader = cle.Loader(self.filename, concrete_target=concrete_target, **load_options)\r\n  File \"/home/audrey/angr/cle/cle/loader.py\", line 134, in __init__\r\n    self.initial_load_objects = self._internal_load(main_binary, *preload_libs, *force_load_libs, preloading=(main_binary, *preload_libs))\r\n  File \"/home/audrey/angr/cle/cle/loader.py\", line 655, in _internal_load\r\n    obj = self._load_object_isolated(main_spec)\r\n  File \"/home/audrey/angr/cle/cle/loader.py\", line 813, in _load_object_isolated\r\n    return backend_cls(full_spec, is_main_bin=self.main_object is None, loader=self, **options)\r\n  File \"/home/audrey/angr/cle/cle/backends/elf/elf.py\", line 146, in __init__\r\n    self._load_function_hints_from_fde(dwarf)\r\n  File \"/home/audrey/angr/cle/cle/backends/elf/elf.py\", line 446, in _load_function_hints_from_fde\r\n    for entry in dwarf.EH_CFI_entries():\r\n  File \"/home/audrey/angr/pyelftools/elftools/dwarf/dwarfinfo.py\", line 191, in EH_CFI_entries\r\n    return cfi.get_entries()\r\n  File \"/home/audrey/angr/pyelftools/elftools/dwarf/callframe.py\", line 71, in get_entries\r\n    self.entries = self._parse_entries()\r\n  File \"/home/audrey/angr/pyelftools/elftools/dwarf/callframe.py\", line 80, in _parse_entries\r\n    entries.append(self._parse_entry_at(offset))\r\n  File \"/home/audrey/angr/pyelftools/elftools/dwarf/callframe.py\", line 93, in _parse_entry_at\r\n    self.base_structs.Dwarf_uint32(''), self.stream, offset)\r\n  File \"/home/audrey/angr/pyelftools/elftools/common/utils.py\", line 42, in struct_parse\r\n    raise ELFParseError(str(e))\r\nelftools.common.exceptions.ELFParseError: expected 4, found 3\r\n```\r\n\r\nwhen I try to go in and debug the issue, I find that at the time of the crash, the stream points to offset 0x1e1 in the section, and `readelf --debug-dump=frames` shows:\r\n\r\n```\r\n<...snip>\r\n\r\n00000188 0000000000000054 00000024 FDE cie=00000168 pc=0000000000001100..0000000000001848\r\n  Augmentation data:     08 00 02 00 00 00 00 00\r\n  DW_CFA_advance_loc: 4 to 0000000000001104\r\n  DW_CFA_def_cfa_offset: 1984\r\n  DW_CFA_advance_loc: 4 to 0000000000001108\r\n  DW_CFA_offset: r28 at cfa-24\r\n  DW_CFA_advance_loc: 16 to 0000000000001118\r\n  DW_CFA_offset: r16 at cfa-88\r\n  DW_CFA_advance_loc: 20 to 000000000000112c\r\n  DW_CFA_offset: r18 at cfa-72\r\n  DW_CFA_offset: r17 at cfa-80\r\n  DW_CFA_advance_loc: 44 to 0000000000001158\r\n  DW_CFA_offset: r31 at cfa-8\r\n  DW_CFA_offset: r20 at cfa-56\r\n  DW_CFA_offset: r19 at cfa-64\r\n  DW_CFA_offset: r30 at cfa-16\r\n  DW_CFA_offset: r23 at cfa-32\r\n  DW_CFA_offset: r22 at cfa-40\r\n  DW_CFA_offset: r21 at cfa-48\r\n  DW_CFA_advance_loc2: 264 to 0000000000001260\r\n  DW_CFA_remember_state\r\n  DW_CFA_def_cfa_offset: 0\r\n  DW_CFA_restore: r16\r\n  DW_CFA_restore: r17\r\n  DW_CFA_restore: r18\r\n  DW_CFA_restore: r19\r\n  DW_CFA_restore: r20\r\n  DW_CFA_restore: r21\r\n  DW_CFA_restore: r22\r\n  DW_CFA_restore: r23\r\n  DW_CFA_restore: r28\r\n  DW_CFA_restore: r30\r\n  DW_CFA_restore: r31\r\n  DW_CFA_restore_state\r\n  DW_CFA_nop\r\n  DW_CFA_nop\r\n  DW_CFA_nop\r\n  DW_CFA_nop\r\n  DW_CFA_nop\r\n  DW_CFA_nop\r\n  DW_CFA_nop\r\n\r\n000001e0 ZERO terminator\r\n```\r\n\r\nSo the parser got off-by-one at some point and now can't read the EOF marker. I verified that it correctly starts parsing an entity at 0x188, and reads an even amount for the augmentation data length, but after reading the augmentation data length the stream is seeked to an odd offset, such that the odd offset + the read length == 0x1e0. I suspect that this is because `CallFrameInfo._read_augmentation_data`'s use of a uleb128 to unpack the length is incorrect, but I have so little insight into how this stuff is supposed to work that I can't think of where to check that.\r\n\r\nI can tell that when `end_offset` is computed in `_parse_entry_at`, that value _is_ correct, 0x1e0. Should there be an assertion there that it's equal to `self.stream.tell()`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/283", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/283/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/283/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/283/events", "html_url": "https://github.com/eliben/pyelftools/issues/283", "id": 561327650, "node_id": "MDU6SXNzdWU1NjEzMjc2NTA=", "number": 283, "title": "Proposal: An API for getting the filename of line-program entry members", "user": {"login": "woodruffw", "id": 3059210, "node_id": "MDQ6VXNlcjMwNTkyMTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3059210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woodruffw", "html_url": "https://github.com/woodruffw", "followers_url": "https://api.github.com/users/woodruffw/followers", "following_url": "https://api.github.com/users/woodruffw/following{/other_user}", "gists_url": "https://api.github.com/users/woodruffw/gists{/gist_id}", "starred_url": "https://api.github.com/users/woodruffw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woodruffw/subscriptions", "organizations_url": "https://api.github.com/users/woodruffw/orgs", "repos_url": "https://api.github.com/users/woodruffw/repos", "events_url": "https://api.github.com/users/woodruffw/events{/privacy}", "received_events_url": "https://api.github.com/users/woodruffw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-06T23:19:38Z", "updated_at": "2020-02-07T15:00:30Z", "closed_at": "2020-02-07T14:37:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Getting the filename associated with a line-program entry member is currently a little tedious:\r\n\r\n1. Grab the file index (`lpe.state.file`)\r\n2. Look up the file entry in the line program header\r\n3. Look up the directory index in the file entry\r\n4. Join the resolved directory to the basename in the file entry\r\n\r\nThis could be provided with relatively few changes on the `LineProgram` class, like so:\r\n\r\n```python\r\nlp = LineProgram(...)\r\nlpe = lp.get_entries()[0]\r\nfilename = lp.entry_filename(lpe)\r\n```\r\n\r\nThoughts? I'd be happy to contribute this feature.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/278", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/278/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/278/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/278/events", "html_url": "https://github.com/eliben/pyelftools/issues/278", "id": 560903746, "node_id": "MDU6SXNzdWU1NjA5MDM3NDY=", "number": 278, "title": "Missing import", "user": {"login": "RamiRosenbaum", "id": 24232293, "node_id": "MDQ6VXNlcjI0MjMyMjkz", "avatar_url": "https://avatars1.githubusercontent.com/u/24232293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RamiRosenbaum", "html_url": "https://github.com/RamiRosenbaum", "followers_url": "https://api.github.com/users/RamiRosenbaum/followers", "following_url": "https://api.github.com/users/RamiRosenbaum/following{/other_user}", "gists_url": "https://api.github.com/users/RamiRosenbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/RamiRosenbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RamiRosenbaum/subscriptions", "organizations_url": "https://api.github.com/users/RamiRosenbaum/orgs", "repos_url": "https://api.github.com/users/RamiRosenbaum/repos", "events_url": "https://api.github.com/users/RamiRosenbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/RamiRosenbaum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-06T10:04:00Z", "updated_at": "2020-03-06T14:00:28Z", "closed_at": "2020-03-06T14:00:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "In construct_utils.py, missing import of **SizeofError**:\r\n`from ..construct import (\r\n    Subconstruct, ConstructError, ArrayError, Adapter, Field, RepeatUntil,\r\n    Rename, SizeofError\r\n    )\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/274", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/274/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/274/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/274/events", "html_url": "https://github.com/eliben/pyelftools/issues/274", "id": 559285724, "node_id": "MDU6SXNzdWU1NTkyODU3MjQ=", "number": 274, "title": "False positive on LocationParser.attribute_has_location", "user": {"login": "sevaa", "id": 5807738, "node_id": "MDQ6VXNlcjU4MDc3Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5807738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sevaa", "html_url": "https://github.com/sevaa", "followers_url": "https://api.github.com/users/sevaa/followers", "following_url": "https://api.github.com/users/sevaa/following{/other_user}", "gists_url": "https://api.github.com/users/sevaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/sevaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sevaa/subscriptions", "organizations_url": "https://api.github.com/users/sevaa/orgs", "repos_url": "https://api.github.com/users/sevaa/repos", "events_url": "https://api.github.com/users/sevaa/events{/privacy}", "received_events_url": "https://api.github.com/users/sevaa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-03T19:29:46Z", "updated_at": "2020-03-07T14:05:03Z", "closed_at": "2020-03-07T14:05:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "LocationParser.attribute_has_location() returning `True` doesn't guarantee that the attribute has a location that can be parsed with LocationParser. I'm currently looking at a v2 file from Android NDK with the following DIE:\r\n\r\n>  <2><a73e>: Abbrev Number: 75 (DW_TAG_member)\r\n>     <a73f>   DW_AT_name        : (indirect string, offset: 0x394c): FL_FOO\r\n>     <a743>   DW_AT_decl_file   : 23\r\n>     <a744>   DW_AT_decl_line   : 22\r\n>     <a745>   DW_AT_type        : <0x5256>\r\n>     <a749>   DW_AT_external    : 1\r\n>     <a74a>   DW_AT_declaration : 1\r\n>     <a74b>   **DW_AT_const_value (DW_FORM_data4) : 0x40000000**\r\n> \r\n\r\n`attribute_has_location()` returns `true` for the `DW_AT_const_value` attribute. It's clearly not a location pointer.\r\n\r\nThe parent of that goes:\r\n\r\n>  <1><a720>: Abbrev Number: 3 (DW_TAG_structure_type)\r\n>     <a721>   DW_AT_name        : (indirect string, offset: 0x34f0): CMyClass\r\n>     <a725>   DW_AT_byte_size   : 40\r\n>     <a726>   DW_AT_decl_file   : 23\r\n>     <a727>   DW_AT_decl_line   : 17\r\n>     <a728>   DW_AT_sibling     : <0xa7b5>\r\n\r\nThe corresponding code item in a C++ source is a class level static const int:\r\n\r\nstruct CMyClass\r\n{\r\n    static const int FL_FOO = 0x40000000;\r\n}\r\n\r\n0x4 is clearly not a location code. Maybe some careful parsing of the spec is in order?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/270", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/270/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/270/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/270/events", "html_url": "https://github.com/eliben/pyelftools/issues/270", "id": 557033674, "node_id": "MDU6SXNzdWU1NTcwMzM2NzQ=", "number": 270, "title": "Change relocate_dwarf_sections default value", "user": {"login": "mephi42", "id": 662616, "node_id": "MDQ6VXNlcjY2MjYxNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/662616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mephi42", "html_url": "https://github.com/mephi42", "followers_url": "https://api.github.com/users/mephi42/followers", "following_url": "https://api.github.com/users/mephi42/following{/other_user}", "gists_url": "https://api.github.com/users/mephi42/gists{/gist_id}", "starred_url": "https://api.github.com/users/mephi42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mephi42/subscriptions", "organizations_url": "https://api.github.com/users/mephi42/orgs", "repos_url": "https://api.github.com/users/mephi42/repos", "events_url": "https://api.github.com/users/mephi42/events{/privacy}", "received_events_url": "https://api.github.com/users/mephi42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-29T18:17:44Z", "updated_at": "2020-02-04T14:26:00Z", "closed_at": "2020-02-04T14:25:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "My linux kernel debug info (Fedora 31, 5.4.13-201.fc31.x86_64) must not\r\nbe relocated, since its `e_type` is `ET_EXEC`, not `ET_REL`. Despite\r\nthat and for whatever reason, the relocation section for `.debug_info`\r\nis present and contains completely bogus information.\r\n\r\nBecause of that, when using `get_dwarf_info()` I get e.g. incorrect\r\nsymbol names. As a workaround I now use\r\n`get_dwarf_info(relocate_dwarf_sections=False)`, but it would be great\r\nif default functioned correctly.\r\n\r\nSo I propose to change the default `relocate_dwarf_sections` value from\r\n`True` to `None`, where `None` would mean \"autodetect based on `e_type`\r\nvalue\".\r\n\r\nDoes that make sense?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/263", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/263/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/263/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/263/events", "html_url": "https://github.com/eliben/pyelftools/issues/263", "id": 552538480, "node_id": "MDU6SXNzdWU1NTI1Mzg0ODA=", "number": 263, "title": "section_in_segment() logic contradicts comment", "user": {"login": "jameshippisley", "id": 14355564, "node_id": "MDQ6VXNlcjE0MzU1NTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/14355564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jameshippisley", "html_url": "https://github.com/jameshippisley", "followers_url": "https://api.github.com/users/jameshippisley/followers", "following_url": "https://api.github.com/users/jameshippisley/following{/other_user}", "gists_url": "https://api.github.com/users/jameshippisley/gists{/gist_id}", "starred_url": "https://api.github.com/users/jameshippisley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jameshippisley/subscriptions", "organizations_url": "https://api.github.com/users/jameshippisley/orgs", "repos_url": "https://api.github.com/users/jameshippisley/repos", "events_url": "https://api.github.com/users/jameshippisley/events{/privacy}", "received_events_url": "https://api.github.com/users/jameshippisley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-20T22:42:05Z", "updated_at": "2020-02-04T13:30:09Z", "closed_at": "2020-02-04T13:30:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't really understand the elf internals, but I was having an issue with a section not showing up in my elffile, and I tracked it down to this section of code:\r\n\r\nhttps://github.com/eliben/pyelftools/blob/a347dbfab622ab98d9747d862ade9e6b6fd9425c/elftools/elf/segments.py#L43-L47\r\n\r\nAssuming the logic of the comment is correct, then I think it should be  \"segtype **not** in ('PT_TLS', 'PT_GNU_RELR0', 'PT_LOAD')\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/261", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/261/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/261/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/261/events", "html_url": "https://github.com/eliben/pyelftools/issues/261", "id": 548170130, "node_id": "MDU6SXNzdWU1NDgxNzAxMzA=", "number": 261, "title": "Fixed some gaps, but the test files are not for publishing", "user": {"login": "sevaa", "id": 5807738, "node_id": "MDQ6VXNlcjU4MDc3Mzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5807738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sevaa", "html_url": "https://github.com/sevaa", "followers_url": "https://api.github.com/users/sevaa/followers", "following_url": "https://api.github.com/users/sevaa/following{/other_user}", "gists_url": "https://api.github.com/users/sevaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/sevaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sevaa/subscriptions", "organizations_url": "https://api.github.com/users/sevaa/orgs", "repos_url": "https://api.github.com/users/sevaa/repos", "events_url": "https://api.github.com/users/sevaa/events{/privacy}", "received_events_url": "https://api.github.com/users/sevaa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-10T16:23:09Z", "updated_at": "2020-02-04T14:15:26Z", "closed_at": "2020-02-04T14:15:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I've been using elftools to parse DWARF information in a certain Android codebase. Found some gaps in functionality (unsupported expression opcodes), fixed them in my fork. I wanted to submit a pull request for the fixes. There is a unit test for the fixes, but the SO files it works against are not to be published on Github. Advice?\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/260", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/260/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/260/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/260/events", "html_url": "https://github.com/eliben/pyelftools/issues/260", "id": 538994992, "node_id": "MDU6SXNzdWU1Mzg5OTQ5OTI=", "number": 260, "title": "test/testfiles_for_unittests/empty_pubtypes/ directory missing from 0.26 tarball", "user": {"login": "rathann", "id": 5873507, "node_id": "MDQ6VXNlcjU4NzM1MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5873507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rathann", "html_url": "https://github.com/rathann", "followers_url": "https://api.github.com/users/rathann/followers", "following_url": "https://api.github.com/users/rathann/following{/other_user}", "gists_url": "https://api.github.com/users/rathann/gists{/gist_id}", "starred_url": "https://api.github.com/users/rathann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rathann/subscriptions", "organizations_url": "https://api.github.com/users/rathann/orgs", "repos_url": "https://api.github.com/users/rathann/repos", "events_url": "https://api.github.com/users/rathann/events{/privacy}", "received_events_url": "https://api.github.com/users/rathann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-17T11:04:17Z", "updated_at": "2020-02-04T14:22:00Z", "closed_at": "2020-02-04T14:22:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "`test/testfiles_for_unittests/empty_pubtypes/` is missing from 0.26 [release tarball on pythonhosted.org](https://files.pythonhosted.org/packages/source/p/pyelftools/pyelftools-0.26.tar.gz). It seems to be there on github releases tab, though.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/258", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/258/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/258/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/258/events", "html_url": "https://github.com/eliben/pyelftools/issues/258", "id": 537900223, "node_id": "MDU6SXNzdWU1Mzc5MDAyMjM=", "number": 258, "title": "Fix simple typo: wether -> whether", "user": {"login": "timgates42", "id": 47873678, "node_id": "MDQ6VXNlcjQ3ODczNjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/47873678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timgates42", "html_url": "https://github.com/timgates42", "followers_url": "https://api.github.com/users/timgates42/followers", "following_url": "https://api.github.com/users/timgates42/following{/other_user}", "gists_url": "https://api.github.com/users/timgates42/gists{/gist_id}", "starred_url": "https://api.github.com/users/timgates42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timgates42/subscriptions", "organizations_url": "https://api.github.com/users/timgates42/orgs", "repos_url": "https://api.github.com/users/timgates42/repos", "events_url": "https://api.github.com/users/timgates42/events{/privacy}", "received_events_url": "https://api.github.com/users/timgates42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-14T11:09:39Z", "updated_at": "2019-12-16T13:23:10Z", "closed_at": "2019-12-16T13:23:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is a small typo in scripts/readelf.py.\nShould read `whether` rather than `wether`.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/256", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/256/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/256/events", "html_url": "https://github.com/eliben/pyelftools/issues/256", "id": 534761079, "node_id": "MDU6SXNzdWU1MzQ3NjEwNzk=", "number": 256, "title": "release 0.26 tag and tarball missing", "user": {"login": "rathann", "id": 5873507, "node_id": "MDQ6VXNlcjU4NzM1MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5873507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rathann", "html_url": "https://github.com/rathann", "followers_url": "https://api.github.com/users/rathann/followers", "following_url": "https://api.github.com/users/rathann/following{/other_user}", "gists_url": "https://api.github.com/users/rathann/gists{/gist_id}", "starred_url": "https://api.github.com/users/rathann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rathann/subscriptions", "organizations_url": "https://api.github.com/users/rathann/orgs", "repos_url": "https://api.github.com/users/rathann/repos", "events_url": "https://api.github.com/users/rathann/events{/privacy}", "received_events_url": "https://api.github.com/users/rathann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-09T08:09:51Z", "updated_at": "2019-12-09T13:23:43Z", "closed_at": "2019-12-09T13:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "0.26 was released on pypi as a binary wheel only. There's no corresponding source tarball either on pypi or github. Please provide one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/255", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/255/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/255/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/255/events", "html_url": "https://github.com/eliben/pyelftools/issues/255", "id": 533121778, "node_id": "MDU6SXNzdWU1MzMxMjE3Nzg=", "number": 255, "title": "Does pyelftools support parallelism", "user": {"login": "trevorwhitaker", "id": 19629185, "node_id": "MDQ6VXNlcjE5NjI5MTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/19629185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trevorwhitaker", "html_url": "https://github.com/trevorwhitaker", "followers_url": "https://api.github.com/users/trevorwhitaker/followers", "following_url": "https://api.github.com/users/trevorwhitaker/following{/other_user}", "gists_url": "https://api.github.com/users/trevorwhitaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/trevorwhitaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trevorwhitaker/subscriptions", "organizations_url": "https://api.github.com/users/trevorwhitaker/orgs", "repos_url": "https://api.github.com/users/trevorwhitaker/repos", "events_url": "https://api.github.com/users/trevorwhitaker/events{/privacy}", "received_events_url": "https://api.github.com/users/trevorwhitaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-05T04:47:54Z", "updated_at": "2019-12-09T13:26:54Z", "closed_at": "2019-12-09T13:26:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a ELF file with about 1300 CUs in it. I want to pull specific information about the dies in each CU into a db. If I just iterate through the CUs, it takes about 6 hours to process everything.\r\n\r\nIs it possible to split this processing into x number of threads to try to speed up the process? I assume there would be no issue as all threads would just be reading from the ELF file, correct? Is there some internal mechanism in pyelftools that would prevent me from processing in multiple threads?\r\n\r\nMy workflow is as follow:\r\n\r\nDriver:\r\n1) Create n worker threads\r\n2) start n worker threads\r\n3) wait for all worker threads to finish\r\n\r\nWorker:\r\n1) open elf file\r\n2) get dwarf info\r\n3) iterate through CUs and only process every nth CU\r\n\r\nDoing this now is not speeding up processing like I would have thought it would so I'm wondering if there is anything in pyelftools that prevents me from parallelizing this? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/254", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/254/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/254/events", "html_url": "https://github.com/eliben/pyelftools/issues/254", "id": 532777314, "node_id": "MDU6SXNzdWU1MzI3NzczMTQ=", "number": 254, "title": "can i get structure member name and address using this tool?", "user": {"login": "hehenihao", "id": 7553566, "node_id": "MDQ6VXNlcjc1NTM1NjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7553566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hehenihao", "html_url": "https://github.com/hehenihao", "followers_url": "https://api.github.com/users/hehenihao/followers", "following_url": "https://api.github.com/users/hehenihao/following{/other_user}", "gists_url": "https://api.github.com/users/hehenihao/gists{/gist_id}", "starred_url": "https://api.github.com/users/hehenihao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hehenihao/subscriptions", "organizations_url": "https://api.github.com/users/hehenihao/orgs", "repos_url": "https://api.github.com/users/hehenihao/repos", "events_url": "https://api.github.com/users/hehenihao/events{/privacy}", "received_events_url": "https://api.github.com/users/hehenihao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-12-04T15:58:12Z", "updated_at": "2019-12-18T15:05:35Z", "closed_at": "2019-12-18T15:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "i want to get the structure member name and address, for example\r\n```c\r\ntypedef struct node1{\r\n  uint32_t value;\r\n} Node_t1;\r\n\r\ntypedef struct node2{\r\n  uint32_t id;\r\n  Node_t1 t1;\r\n} Node_t2;\r\n\r\nNode_t2 node_t2;\r\n```\r\nthe results i want to get as below\r\n```\r\nnode_t2.id   address1\r\nnode_t2.t1.value   address2\r\n```\r\ncan someone show me an example?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/251", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/251/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/251/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/251/events", "html_url": "https://github.com/eliben/pyelftools/issues/251", "id": 528095320, "node_id": "MDU6SXNzdWU1MjgwOTUzMjA=", "number": 251, "title": "DeprecationWarning in elftools/construct/lib/container.py:5", "user": {"login": "sabgit", "id": 29819710, "node_id": "MDQ6VXNlcjI5ODE5NzEw", "avatar_url": "https://avatars1.githubusercontent.com/u/29819710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sabgit", "html_url": "https://github.com/sabgit", "followers_url": "https://api.github.com/users/sabgit/followers", "following_url": "https://api.github.com/users/sabgit/following{/other_user}", "gists_url": "https://api.github.com/users/sabgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/sabgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sabgit/subscriptions", "organizations_url": "https://api.github.com/users/sabgit/orgs", "repos_url": "https://api.github.com/users/sabgit/repos", "events_url": "https://api.github.com/users/sabgit/events{/privacy}", "received_events_url": "https://api.github.com/users/sabgit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-25T13:41:53Z", "updated_at": "2019-12-05T16:52:35Z", "closed_at": "2019-12-02T13:25:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hitting the following warning using `pyelftools==0.25`\r\n```\r\n/tmp/pyenv/lib/python3.7/site-packages/elftools/construct/lib/container.py:5: \r\nDeprecationWarning: Using or importing the ABCs from 'collections' instead of \r\nfrom 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working\r\n  from collections import MutableMapping\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/250", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/250/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/250/events", "html_url": "https://github.com/eliben/pyelftools/issues/250", "id": 524082383, "node_id": "MDU6SXNzdWU1MjQwODIzODM=", "number": 250, "title": "How to get the full file path from DW_AT_decl_file", "user": {"login": "trevorwhitaker", "id": 19629185, "node_id": "MDQ6VXNlcjE5NjI5MTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/19629185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trevorwhitaker", "html_url": "https://github.com/trevorwhitaker", "followers_url": "https://api.github.com/users/trevorwhitaker/followers", "following_url": "https://api.github.com/users/trevorwhitaker/following{/other_user}", "gists_url": "https://api.github.com/users/trevorwhitaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/trevorwhitaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trevorwhitaker/subscriptions", "organizations_url": "https://api.github.com/users/trevorwhitaker/orgs", "repos_url": "https://api.github.com/users/trevorwhitaker/repos", "events_url": "https://api.github.com/users/trevorwhitaker/events{/privacy}", "received_events_url": "https://api.github.com/users/trevorwhitaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-18T01:11:41Z", "updated_at": "2019-11-18T20:12:54Z", "closed_at": "2019-11-18T20:12:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't seem to figure this out. I know the DW_AT_decl_file is 1 which I need to lookup in some array but I can't find where that array is. I can get the file name from the line program header but I can't find the full path. I know it exists somewhere in the ELF file since dwarfdump shows the full file path. How do I get this info in pyelftools?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/243", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/243/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/243/events", "html_url": "https://github.com/eliben/pyelftools/issues/243", "id": 502212026, "node_id": "MDU6SXNzdWU1MDIyMTIwMjY=", "number": 243, "title": "Customize the ELF and Write it ?", "user": {"login": "NikosDelijohn", "id": 17165298, "node_id": "MDQ6VXNlcjE3MTY1Mjk4", "avatar_url": "https://avatars0.githubusercontent.com/u/17165298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NikosDelijohn", "html_url": "https://github.com/NikosDelijohn", "followers_url": "https://api.github.com/users/NikosDelijohn/followers", "following_url": "https://api.github.com/users/NikosDelijohn/following{/other_user}", "gists_url": "https://api.github.com/users/NikosDelijohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/NikosDelijohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NikosDelijohn/subscriptions", "organizations_url": "https://api.github.com/users/NikosDelijohn/orgs", "repos_url": "https://api.github.com/users/NikosDelijohn/repos", "events_url": "https://api.github.com/users/NikosDelijohn/events{/privacy}", "received_events_url": "https://api.github.com/users/NikosDelijohn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-03T17:59:28Z", "updated_at": "2019-10-04T08:34:01Z", "closed_at": "2019-10-04T02:26:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\n\r\nI just wanted to ask,\r\n\r\nIs it possible to customize bits and bytes of the ELF file and then produce an altered - change version of it ?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/241", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/241/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/241/events", "html_url": "https://github.com/eliben/pyelftools/issues/241", "id": 496761277, "node_id": "MDU6SXNzdWU0OTY3NjEyNzc=", "number": 241, "title": "DW_AT_specification for DW_TAG_variable has the same value for all offsets", "user": {"login": "sagiben", "id": 1609559, "node_id": "MDQ6VXNlcjE2MDk1NTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1609559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagiben", "html_url": "https://github.com/sagiben", "followers_url": "https://api.github.com/users/sagiben/followers", "following_url": "https://api.github.com/users/sagiben/following{/other_user}", "gists_url": "https://api.github.com/users/sagiben/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagiben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagiben/subscriptions", "organizations_url": "https://api.github.com/users/sagiben/orgs", "repos_url": "https://api.github.com/users/sagiben/repos", "events_url": "https://api.github.com/users/sagiben/events{/privacy}", "received_events_url": "https://api.github.com/users/sagiben/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-22T10:42:13Z", "updated_at": "2020-02-05T19:51:31Z", "closed_at": "2020-02-05T19:51:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have the following simple code, I have 4 compilation units : func1.c, func2.c, func3.c, main.c\r\nfunc1.c : \r\n```\r\nextern int result1;\r\nint result1 = 1;\r\n```\r\n\r\nfunc2,c : \r\n```\r\nextern int result2;\r\nint result2 = 2;\r\n```\r\n\r\nfunc3.c : \r\n```\r\nextern int result3;\r\nint result3 = 3;\r\n```\r\nmain.c\r\n```\r\nextern int result1;\r\nextern int result2;\r\nextern int result3;\r\n\r\nint main()\r\n{\r\n    return result1 + result2 + result3;\r\n}\r\n```\r\n\r\nusing readelf, from binutils, for dumping some dwarf info I get the following for each result* variable : \r\n```\r\n <1><21>: Abbrev Number: 2 (DW_TAG_variable)\r\n    <22>   DW_AT_name        : (indirect string, offset: 0x213e): result1\r\n    <26>   DW_AT_decl_file   : 1\r\n    <27>   DW_AT_decl_line   : 1\r\n    <28>   DW_AT_type        : <0x2c>\r\n    <2c>   DW_AT_external    : 1\r\n    <2c>   DW_AT_declaration : 1\r\n <1><2c>: Abbrev Number: 3 (DW_TAG_base_type)\r\n    <2d>   DW_AT_byte_size   : 4\r\n    <2e>   DW_AT_encoding    : 5        (signed)\r\n    <2f>   DW_AT_name        : int\r\n <1><33>: Abbrev Number: 4 (DW_TAG_variable)\r\n    <34>   DW_AT_specification: <0x21>\r\n    <38>   DW_AT_decl_line   : 3\r\n    <39>   DW_AT_location    : 9 byte block: 3 10 10 20 0 0 0 0 0       (DW_OP_addr: 201010)\r\n...\r\n <1><65>: Abbrev Number: 2 (DW_TAG_variable)\r\n    <66>   DW_AT_name        : (indirect string, offset: 0x268c): result2\r\n    <6a>   DW_AT_decl_file   : 1\r\n    <6b>   DW_AT_decl_line   : 1\r\n    <6c>   DW_AT_type        : <0x70>\r\n    <70>   DW_AT_external    : 1\r\n    <70>   DW_AT_declaration : 1\r\n <1><70>: Abbrev Number: 3 (DW_TAG_base_type)\r\n    <71>   DW_AT_byte_size   : 4\r\n    <72>   DW_AT_encoding    : 5        (signed)\r\n    <73>   DW_AT_name        : int\r\n <1><77>: Abbrev Number: 4 (DW_TAG_variable)\r\n    <78>   DW_AT_specification: <0x65>\r\n    <7c>   DW_AT_decl_line   : 3\r\n    <7d>   DW_AT_location    : 9 byte block: 3 14 10 20 0 0 0 0 0       (DW_OP_addr: 201014)\r\n...\r\n <1><a9>: Abbrev Number: 2 (DW_TAG_variable)\r\n    <aa>   DW_AT_name        : (indirect string, offset: 0x269c): result3\r\n    <ae>   DW_AT_decl_file   : 1\r\n    <af>   DW_AT_decl_line   : 1\r\n    <b0>   DW_AT_type        : <0xb4>\r\n    <b4>   DW_AT_external    : 1\r\n    <b4>   DW_AT_declaration : 1\r\n <1><b4>: Abbrev Number: 3 (DW_TAG_base_type)\r\n    <b5>   DW_AT_byte_size   : 4\r\n    <b6>   DW_AT_encoding    : 5        (signed)\r\n    <b7>   DW_AT_name        : int\r\n <1><bb>: Abbrev Number: 4 (DW_TAG_variable)\r\n    <bc>   DW_AT_specification: <0xa9>\r\n    <c0>   DW_AT_decl_line   : 3\r\n    <c1>   DW_AT_location    : 9 byte block: 3 18 10 20 0 0 0 0 0       (DW_OP_addr: 201018)\r\n``` \r\n\r\nThe value of _DW_AT_specification_ for each variable points to the corresponding DIE offset\r\nbut when using pyelftools example code _dwarf_location_info.py_ DW_AT_specification value is the same for all 3 tags (I added a print statement to print DW_AT_specification attribute) : \r\n```\r\n\r\nProcessing file: ./a.out\r\n  Found a compile unit at offset 0, length 64\r\n   DIE DW_TAG_variable. attr DW_AT_location.\r\nAttributeValue(name='DW_AT_specification', form='DW_FORM_ref4', value=33, raw_value=33, offset=52)\r\n      (DW_OP_addr: 201010)\r\n  Found a compile unit at offset 68, length 64\r\n   DIE DW_TAG_variable. attr DW_AT_location.\r\nAttributeValue(name='DW_AT_specification', form='DW_FORM_ref4', value=33, raw_value=33, offset=120)\r\n      (DW_OP_addr: 201014)\r\n  Found a compile unit at offset 136, length 64\r\n   DIE DW_TAG_variable. attr DW_AT_location.\r\nAttributeValue(name='DW_AT_specification', form='DW_FORM_ref4', value=33, raw_value=33, offset=188)\r\n      (DW_OP_addr: 201018)\r\n  Found a compile unit at offset 204, length 115\r\n   DIE DW_TAG_subprogram. attr DW_AT_frame_base.\r\n      (DW_OP_call_frame_cfa)\r\n```\r\nThe value for each offset is 33 when the real values are 33, 101, 169", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/238", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/238/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/238/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/238/events", "html_url": "https://github.com/eliben/pyelftools/issues/238", "id": 481502461, "node_id": "MDU6SXNzdWU0ODE1MDI0NjE=", "number": 238, "title": "is there a way we can know the size of array declared with \"extern type array[]\" with pyelftools ", "user": {"login": "wentongwu", "id": 48015629, "node_id": "MDQ6VXNlcjQ4MDE1NjI5", "avatar_url": "https://avatars1.githubusercontent.com/u/48015629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wentongwu", "html_url": "https://github.com/wentongwu", "followers_url": "https://api.github.com/users/wentongwu/followers", "following_url": "https://api.github.com/users/wentongwu/following{/other_user}", "gists_url": "https://api.github.com/users/wentongwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/wentongwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wentongwu/subscriptions", "organizations_url": "https://api.github.com/users/wentongwu/orgs", "repos_url": "https://api.github.com/users/wentongwu/repos", "events_url": "https://api.github.com/users/wentongwu/events{/privacy}", "received_events_url": "https://api.github.com/users/wentongwu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-16T08:30:47Z", "updated_at": "2020-05-21T18:24:43Z", "closed_at": "2020-05-21T18:24:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way that we can know the size of array declared with \"extern type array[]\" in file example.h and defined with \"type array[ARRAY_SIZE]\" in example.c, and example.c will include example.h. With pyelftools, I analyze all the attributes of array, still can't find the way to calculate the size of array, so is this a bug or I miss someting? Thanks for the help!\r\n\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/235", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/235/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/235/events", "html_url": "https://github.com/eliben/pyelftools/issues/235", "id": 472106837, "node_id": "MDU6SXNzdWU0NzIxMDY4Mzc=", "number": 235, "title": "Deprecation warning in Python 3.7 on elftools\\dwarf\\namelut.py", "user": {"login": "DraceaAlexandra", "id": 50658273, "node_id": "MDQ6VXNlcjUwNjU4Mjcz", "avatar_url": "https://avatars0.githubusercontent.com/u/50658273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DraceaAlexandra", "html_url": "https://github.com/DraceaAlexandra", "followers_url": "https://api.github.com/users/DraceaAlexandra/followers", "following_url": "https://api.github.com/users/DraceaAlexandra/following{/other_user}", "gists_url": "https://api.github.com/users/DraceaAlexandra/gists{/gist_id}", "starred_url": "https://api.github.com/users/DraceaAlexandra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DraceaAlexandra/subscriptions", "organizations_url": "https://api.github.com/users/DraceaAlexandra/orgs", "repos_url": "https://api.github.com/users/DraceaAlexandra/repos", "events_url": "https://api.github.com/users/DraceaAlexandra/events{/privacy}", "received_events_url": "https://api.github.com/users/DraceaAlexandra/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-24T06:41:48Z", "updated_at": "2019-10-05T13:15:59Z", "closed_at": "2019-10-05T13:15:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is the extended message:\r\nelftools\\dwarf\\namelut.py:19: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n    class NameLUT(collections.Mapping):\r\n\r\nI've seen that something similar was fixed: https://github.com/eliben/pyelftools/pull/231, but some models failed to be updated also.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/229", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/229/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/229/events", "html_url": "https://github.com/eliben/pyelftools/issues/229", "id": 456063635, "node_id": "MDU6SXNzdWU0NTYwNjM2MzU=", "number": 229, "title": "Does it support ELF editing?", "user": {"login": "CaledoniaProject", "id": 1357701, "node_id": "MDQ6VXNlcjEzNTc3MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1357701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaledoniaProject", "html_url": "https://github.com/CaledoniaProject", "followers_url": "https://api.github.com/users/CaledoniaProject/followers", "following_url": "https://api.github.com/users/CaledoniaProject/following{/other_user}", "gists_url": "https://api.github.com/users/CaledoniaProject/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaledoniaProject/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaledoniaProject/subscriptions", "organizations_url": "https://api.github.com/users/CaledoniaProject/orgs", "repos_url": "https://api.github.com/users/CaledoniaProject/repos", "events_url": "https://api.github.com/users/CaledoniaProject/events{/privacy}", "received_events_url": "https://api.github.com/users/CaledoniaProject/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-14T05:13:13Z", "updated_at": "2019-06-17T12:14:46Z", "closed_at": "2019-06-15T13:44:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to parse an ELF, modify the header fields an export the new ELF with pyelftools? Can you add some example code?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/228", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/228/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/228/events", "html_url": "https://github.com/eliben/pyelftools/issues/228", "id": 452719010, "node_id": "MDU6SXNzdWU0NTI3MTkwMTA=", "number": 228, "title": "Simple example for reading string literals based  on address", "user": {"login": "AndyP1", "id": 12736113, "node_id": "MDQ6VXNlcjEyNzM2MTEz", "avatar_url": "https://avatars0.githubusercontent.com/u/12736113?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndyP1", "html_url": "https://github.com/AndyP1", "followers_url": "https://api.github.com/users/AndyP1/followers", "following_url": "https://api.github.com/users/AndyP1/following{/other_user}", "gists_url": "https://api.github.com/users/AndyP1/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndyP1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndyP1/subscriptions", "organizations_url": "https://api.github.com/users/AndyP1/orgs", "repos_url": "https://api.github.com/users/AndyP1/repos", "events_url": "https://api.github.com/users/AndyP1/events{/privacy}", "received_events_url": "https://api.github.com/users/AndyP1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-05T21:10:55Z", "updated_at": "2019-06-06T19:11:28Z", "closed_at": "2019-06-06T19:11:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Add simple example for reading string literals from address.\r\nI have some experience of elf files and have logging mechanism which passes the pointer to the string literal.\r\nAn example of how to read the string from the elf based on the address would help clarify how to use the pyelftools.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/227", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/227/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/227/events", "html_url": "https://github.com/eliben/pyelftools/issues/227", "id": 442663527, "node_id": "MDU6SXNzdWU0NDI2NjM1Mjc=", "number": 227, "title": "Simple example for reading content of static variables", "user": {"login": "dkuschmierz", "id": 32884309, "node_id": "MDQ6VXNlcjMyODg0MzA5", "avatar_url": "https://avatars3.githubusercontent.com/u/32884309?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkuschmierz", "html_url": "https://github.com/dkuschmierz", "followers_url": "https://api.github.com/users/dkuschmierz/followers", "following_url": "https://api.github.com/users/dkuschmierz/following{/other_user}", "gists_url": "https://api.github.com/users/dkuschmierz/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkuschmierz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkuschmierz/subscriptions", "organizations_url": "https://api.github.com/users/dkuschmierz/orgs", "repos_url": "https://api.github.com/users/dkuschmierz/repos", "events_url": "https://api.github.com/users/dkuschmierz/events{/privacy}", "received_events_url": "https://api.github.com/users/dkuschmierz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-10T11:06:27Z", "updated_at": "2020-02-04T14:26:25Z", "closed_at": "2020-02-04T14:26:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\ni'm new the pyelftools and wanted to ask you guys, if somebody can give an example how to parse the content in an elf-File for a static variables.\r\n\r\nFor example I have a static uint32_t timestamp = 0x1234; in my code, how can I read out the address and the initial value of that variable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/224", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/224/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/224/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/224/events", "html_url": "https://github.com/eliben/pyelftools/issues/224", "id": 435369079, "node_id": "MDU6SXNzdWU0MzUzNjkwNzk=", "number": 224, "title": "errow while building", "user": {"login": "AliRazaManzoor", "id": 23319001, "node_id": "MDQ6VXNlcjIzMzE5MDAx", "avatar_url": "https://avatars1.githubusercontent.com/u/23319001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AliRazaManzoor", "html_url": "https://github.com/AliRazaManzoor", "followers_url": "https://api.github.com/users/AliRazaManzoor/followers", "following_url": "https://api.github.com/users/AliRazaManzoor/following{/other_user}", "gists_url": "https://api.github.com/users/AliRazaManzoor/gists{/gist_id}", "starred_url": "https://api.github.com/users/AliRazaManzoor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AliRazaManzoor/subscriptions", "organizations_url": "https://api.github.com/users/AliRazaManzoor/orgs", "repos_url": "https://api.github.com/users/AliRazaManzoor/repos", "events_url": "https://api.github.com/users/AliRazaManzoor/events{/privacy}", "received_events_url": "https://api.github.com/users/AliRazaManzoor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-20T08:03:26Z", "updated_at": "2019-04-20T13:08:32Z", "closed_at": "2019-04-20T12:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "debian@debian:~/Desktop/temp/elf_purser/pyelftools-master$ python setup.py install\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 10, in <module>\r\n    from setuptools import setup\r\nImportError: No module named setuptools", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/222", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/222/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/222/events", "html_url": "https://github.com/eliben/pyelftools/issues/222", "id": 434012971, "node_id": "MDU6SXNzdWU0MzQwMTI5NzE=", "number": 222, "title": "Expose public objects in namespace", "user": {"login": "binaryflesh", "id": 23250905, "node_id": "MDQ6VXNlcjIzMjUwOTA1", "avatar_url": "https://avatars3.githubusercontent.com/u/23250905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/binaryflesh", "html_url": "https://github.com/binaryflesh", "followers_url": "https://api.github.com/users/binaryflesh/followers", "following_url": "https://api.github.com/users/binaryflesh/following{/other_user}", "gists_url": "https://api.github.com/users/binaryflesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/binaryflesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/binaryflesh/subscriptions", "organizations_url": "https://api.github.com/users/binaryflesh/orgs", "repos_url": "https://api.github.com/users/binaryflesh/repos", "events_url": "https://api.github.com/users/binaryflesh/events{/privacy}", "received_events_url": "https://api.github.com/users/binaryflesh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-16T22:28:53Z", "updated_at": "2019-04-19T16:11:39Z", "closed_at": "2019-04-19T16:11:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "In [This use case](https://github.com/trailofbits/manticore/blob/master/manticore/binary/binary.py) in order to import ELFFile, you must either do this or `from elftools.elf import elffile #elffile.ELFFile`. Neither or which are absolute imports to the object in question. This issue highlights the `__init__.py` file not being utilized in a featured use case. Ideally all packages should have an `__all__` variable denoting what `from . import *` imports and take advantage of the namespace, e.g. adding `from .elffile import ELFFile`  to `elftools.elf.__init__.py` would make the following legal: ` from elftools.elf import ELFFile`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/218", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/218/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/218/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/218/events", "html_url": "https://github.com/eliben/pyelftools/issues/218", "id": 412817285, "node_id": "MDU6SXNzdWU0MTI4MTcyODU=", "number": 218, "title": "DynamicSegment.iter_symbols() might terminate early", "user": {"login": "rupran", "id": 6428272, "node_id": "MDQ6VXNlcjY0MjgyNzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/6428272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rupran", "html_url": "https://github.com/rupran", "followers_url": "https://api.github.com/users/rupran/followers", "following_url": "https://api.github.com/users/rupran/following{/other_user}", "gists_url": "https://api.github.com/users/rupran/gists{/gist_id}", "starred_url": "https://api.github.com/users/rupran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rupran/subscriptions", "organizations_url": "https://api.github.com/users/rupran/orgs", "repos_url": "https://api.github.com/users/rupran/repos", "events_url": "https://api.github.com/users/rupran/events{/privacy}", "received_events_url": "https://api.github.com/users/rupran/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-21T09:06:24Z", "updated_at": "2019-03-19T01:48:19Z", "closed_at": "2019-03-19T01:48:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The following code in DynamicSegment.iter_symbols() might return a too low number of entries for the dynamic symbol table.\r\n https://github.com/eliben/pyelftools/blob/60319cbb9d469e8d7c56e8f85dd55294c0ce4f62/elftools/elf/dynamic.py#L204-L224\r\n\r\nIt tries to find the next pointer bigger than the beginning of the symbol table (indicated by the 'DT_SYMTAB' dynamic tag) and uses it as the end of the table. For shared libraries or PIE executables with a load offset of 0, **pointers** to e.g. 'DT_SYMTAB' are something like 0x380 which is in a range where tags like 'DT_STRSZ' or 'DT_RELASZ' have their **value**. However, this code does not make any distinction between value and pointer tags (and it seems there is no generic way to do so anyway) so it might use a size value as the (wrong) end of the symbol table.\r\n\r\nOther projects (such as https://github.com/chromium/crashpad) use the information in 'DT_HASH' or 'DT_GNU_HASH' to compute the number of elements in the symbol table as every symbol has a hash associated to it (see the change set introducing this at https://github.com/chromium/crashpad/commit/1f1657d573c789aa36b6022440e34d9ec30d894c)\r\n\r\nShould I implement something similar here as well? Additionally, we might also want to provide a DynamicSegment.get_symbol(n) function similar to the regular symbol table.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/213", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/213/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/213/events", "html_url": "https://github.com/eliben/pyelftools/issues/213", "id": 398259607, "node_id": "MDU6SXNzdWUzOTgyNTk2MDc=", "number": 213, "title": "Publish the source of sample_exe64.elf", "user": {"login": "Gu1nness", "id": 17551419, "node_id": "MDQ6VXNlcjE3NTUxNDE5", "avatar_url": "https://avatars2.githubusercontent.com/u/17551419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gu1nness", "html_url": "https://github.com/Gu1nness", "followers_url": "https://api.github.com/users/Gu1nness/followers", "following_url": "https://api.github.com/users/Gu1nness/following{/other_user}", "gists_url": "https://api.github.com/users/Gu1nness/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gu1nness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gu1nness/subscriptions", "organizations_url": "https://api.github.com/users/Gu1nness/orgs", "repos_url": "https://api.github.com/users/Gu1nness/repos", "events_url": "https://api.github.com/users/Gu1nness/events{/privacy}", "received_events_url": "https://api.github.com/users/Gu1nness/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-11T11:58:09Z", "updated_at": "2019-01-11T13:29:44Z", "closed_at": "2019-01-11T13:29:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirst of all, thanks for your awesome work!\r\n\r\nI think it would be interesting to publish the source of the file [sample_exe64.elf](https://github.com/eliben/pyelftools/commits/master/examples/sample_exe64.elf) in order to be able to compile it with different compilers and different DWARF versions.\r\nI'm currently extending the tests [dwarf_location_list](https://github.com/eliben/pyelftools/blob/master/examples/dwarf_location_lists.py) and [dwarf_range_list](https://github.com/eliben/pyelftools/blob/master/examples/dwarf_range_lists.py) to add support to DWARF4 and in order to add the tests, it would be awesome to have a sample file with each version !\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/205", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/205/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/205/events", "html_url": "https://github.com/eliben/pyelftools/issues/205", "id": 382869851, "node_id": "MDU6SXNzdWUzODI4Njk4NTE=", "number": 205, "title": "What's the vendor abbreviation do we use for vendor-specific functions and definitions?", "user": {"login": "andreil99", "id": 34638941, "node_id": "MDQ6VXNlcjM0NjM4OTQx", "avatar_url": "https://avatars0.githubusercontent.com/u/34638941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreil99", "html_url": "https://github.com/andreil99", "followers_url": "https://api.github.com/users/andreil99/followers", "following_url": "https://api.github.com/users/andreil99/following{/other_user}", "gists_url": "https://api.github.com/users/andreil99/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreil99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreil99/subscriptions", "organizations_url": "https://api.github.com/users/andreil99/orgs", "repos_url": "https://api.github.com/users/andreil99/repos", "events_url": "https://api.github.com/users/andreil99/events{/privacy}", "received_events_url": "https://api.github.com/users/andreil99/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-20T22:13:51Z", "updated_at": "2018-11-20T22:16:27Z", "closed_at": "2018-11-20T22:15:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to register a particular vendor_id in a central location?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/201", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/201/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/201/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/201/events", "html_url": "https://github.com/eliben/pyelftools/issues/201", "id": 368761286, "node_id": "MDU6SXNzdWUzNjg3NjEyODY=", "number": 201, "title": "Support for .debug_pubtypes and .debug_pubnames?", "user": {"login": "rvijayc", "id": 44033253, "node_id": "MDQ6VXNlcjQ0MDMzMjUz", "avatar_url": "https://avatars1.githubusercontent.com/u/44033253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rvijayc", "html_url": "https://github.com/rvijayc", "followers_url": "https://api.github.com/users/rvijayc/followers", "following_url": "https://api.github.com/users/rvijayc/following{/other_user}", "gists_url": "https://api.github.com/users/rvijayc/gists{/gist_id}", "starred_url": "https://api.github.com/users/rvijayc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rvijayc/subscriptions", "organizations_url": "https://api.github.com/users/rvijayc/orgs", "repos_url": "https://api.github.com/users/rvijayc/repos", "events_url": "https://api.github.com/users/rvijayc/events{/privacy}", "received_events_url": "https://api.github.com/users/rvijayc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 42772928, "node_id": "MDU6TGFiZWw0Mjc3MjkyOA==", "url": "https://api.github.com/repos/eliben/pyelftools/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-10T16:59:53Z", "updated_at": "2018-12-24T14:02:09Z", "closed_at": "2018-12-24T14:02:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, \r\n\r\nFirst of all, this is an incredibly useful tool that I've used to augment and automate many debug tasks. Thanks a lot for developing what I know of as the only Python-only framework for DWARF parsing. \r\n\r\nThe one problem that I frequently face is the need to parse the entire ELF on start-up in order to generate indexing information for faster look-up based on three criteria - variable or function name, a type name (struct/enum etc.,), and address. I used to do this by manually walking the entire ELF and storing CU/DIE offsets as a function of names and addresses and types. This is quite time consuming especially when it comes to recursively parsing all the possible type definitions defined in the ELF.\r\n\r\nI just recently learned that the DWARF format provides support for .debug_aranges, .debug_pubnames and .debug_pubtypes that pretty eliminates the need for the indexing that I am doing (as they already are the indexes that I need). Unfortunately, while .debug_aranges is supported, the other two (pubnames and pubtypes) aren't yet supported in pyelftools. \r\n\r\nI am wondering if there is a plan to add support for .debug_pubtypes and .debug_pubnames in the near future. If not, there is any other alternative to indexing the entire ELF for faster lookup?\r\n\r\nThanks,\r\nVijay.\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/199", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/199/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/199/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/199/events", "html_url": "https://github.com/eliben/pyelftools/issues/199", "id": 362789996, "node_id": "MDU6SXNzdWUzNjI3ODk5OTY=", "number": 199, "title": "The v0.24 Release Tarball has Changed", "user": {"login": "nategraff-sifive", "id": 40771426, "node_id": "MDQ6VXNlcjQwNzcxNDI2", "avatar_url": "https://avatars1.githubusercontent.com/u/40771426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nategraff-sifive", "html_url": "https://github.com/nategraff-sifive", "followers_url": "https://api.github.com/users/nategraff-sifive/followers", "following_url": "https://api.github.com/users/nategraff-sifive/following{/other_user}", "gists_url": "https://api.github.com/users/nategraff-sifive/gists{/gist_id}", "starred_url": "https://api.github.com/users/nategraff-sifive/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nategraff-sifive/subscriptions", "organizations_url": "https://api.github.com/users/nategraff-sifive/orgs", "repos_url": "https://api.github.com/users/nategraff-sifive/repos", "events_url": "https://api.github.com/users/nategraff-sifive/events{/privacy}", "received_events_url": "https://api.github.com/users/nategraff-sifive/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-21T22:11:11Z", "updated_at": "2018-09-27T12:06:07Z", "closed_at": "2018-09-27T12:06:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently noticed that the [v0.24 release](https://github.com/eliben/pyelftools/releases/tag/v0.24)'s tarball has changed size and checksum.\r\n\r\nThe v0.24.tar.gz file used to have the following properties:\r\n```\r\nsize: 411874\r\nsha512sum: 5169617f9a8446ffc21dfc44ee185a388c8945a0296bdc6752483b0756888dccb10e3ee88e529d101cf31a4595de924b5c95f5459d5ee4448f57c0c4f2c56887\r\n```\r\n\r\nThe file now has these properties:\r\n```\r\nsize: 600985\r\nsha512sum: 5f02018b3c1c6da55c762e4e7a0eb9d5c9d2af542779dbcda231f563eb93565a0b5bd520ab5a4e07b26958122abeea1e76ee8609e4941ac38289adacea50910f\r\n```\r\n\r\nThe old properties are corroborated by [the Gentoo package manifest](https://gitweb.gentoo.org/repo/gentoo.git/tree/dev-python/pyelftools/Manifest) and by downloading the mirror of the release [from PyPI](https://pypi.org/project/pyelftools/0.24/#files).\r\n\r\nI'm filing an issue because this is rather strange and I wanted to find out if the pyelftools maintainers happen to know what might have happened here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/198", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/198/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/198/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/198/events", "html_url": "https://github.com/eliben/pyelftools/issues/198", "id": 361477235, "node_id": "MDU6SXNzdWUzNjE0NzcyMzU=", "number": 198, "title": "Unable to find DynamicSection (.dynamic) for certain binaries (e.g. \"fsf-merkle.so\")", "user": {"login": "vk036968", "id": 38704714, "node_id": "MDQ6VXNlcjM4NzA0NzE0", "avatar_url": "https://avatars1.githubusercontent.com/u/38704714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vk036968", "html_url": "https://github.com/vk036968", "followers_url": "https://api.github.com/users/vk036968/followers", "following_url": "https://api.github.com/users/vk036968/following{/other_user}", "gists_url": "https://api.github.com/users/vk036968/gists{/gist_id}", "starred_url": "https://api.github.com/users/vk036968/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vk036968/subscriptions", "organizations_url": "https://api.github.com/users/vk036968/orgs", "repos_url": "https://api.github.com/users/vk036968/repos", "events_url": "https://api.github.com/users/vk036968/events{/privacy}", "received_events_url": "https://api.github.com/users/vk036968/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-18T20:46:59Z", "updated_at": "2018-09-18T20:53:53Z", "closed_at": "2018-09-18T20:53:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "nevermind", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/197", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/197/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/197/events", "html_url": "https://github.com/eliben/pyelftools/issues/197", "id": 360840153, "node_id": "MDU6SXNzdWUzNjA4NDAxNTM=", "number": 197, "title": "Elf Dwarf inconsistency in thumb mode", "user": {"login": "Ka6aSH", "id": 5237891, "node_id": "MDQ6VXNlcjUyMzc4OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/5237891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ka6aSH", "html_url": "https://github.com/Ka6aSH", "followers_url": "https://api.github.com/users/Ka6aSH/followers", "following_url": "https://api.github.com/users/Ka6aSH/following{/other_user}", "gists_url": "https://api.github.com/users/Ka6aSH/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ka6aSH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ka6aSH/subscriptions", "organizations_url": "https://api.github.com/users/Ka6aSH/orgs", "repos_url": "https://api.github.com/users/Ka6aSH/repos", "events_url": "https://api.github.com/users/Ka6aSH/events{/privacy}", "received_events_url": "https://api.github.com/users/Ka6aSH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-17T12:13:35Z", "updated_at": "2019-07-23T15:20:24Z", "closed_at": "2019-07-23T15:18:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I faced with some kind of inconsistency between elf and dwarf representation in the library. The following code is compiled with `arm-none-eabi-gcc main.c -mthumb -nostdlib -g`:\r\n```c\r\nint main(int argc, char *argv[]) { \r\n    return argc;                   \r\n}                                  \r\n```\r\nThen I have the following script:\r\n```python\r\n#!/usr/bin/env python3\r\n\r\nimport sys \r\nfrom elftools.elf.elffile import ELFFile\r\nfrom elftools.elf.sections import SymbolTableSection\r\n\r\nwith open(sys.argv[1], 'rb') as f:                                                                                                                                                                                                                                              \r\n    elffile = ELFFile(f)\r\n    dwarfinfo = elffile.get_dwarf_info()\r\n\r\n    for cu in dwarfinfo.iter_CUs():\r\n        for die in cu.iter_DIEs():\r\n            print(die)\r\n\r\n    symbol_tables = [s for s in elffile.iter_sections()\r\n            if isinstance(s, SymbolTableSection)]\r\n\r\n    for section in symbol_tables:\r\n        for symbol in section.iter_symbols():\r\n            print(symbol.name, symbol['st_value'])\r\n```\r\nAnd the partial output is:\r\n```\r\nDIE DW_TAG_subprogram, size=26, has_chidren=True\r\n    |DW_AT_external    :  AttributeValue(name='DW_AT_external', form='DW_FORM_flag_present', value=b'', raw_value=b'', offset=38)\r\n    |DW_AT_name        :  AttributeValue(name='DW_AT_name', form='DW_FORM_strp', value=b'main', raw_value=5, offset=38)\r\n    |DW_AT_decl_file   :  AttributeValue(name='DW_AT_decl_file', form='DW_FORM_data1', value=1, raw_value=1, offset=42)\r\n    |DW_AT_decl_line   :  AttributeValue(name='DW_AT_decl_line', form='DW_FORM_data1', value=1, raw_value=1, offset=43)\r\n    |DW_AT_decl_column :  AttributeValue(name='DW_AT_decl_column', form='DW_FORM_data1', value=5, raw_value=5, offset=44)\r\n    |DW_AT_prototyped  :  AttributeValue(name='DW_AT_prototyped', form='DW_FORM_flag_present', value=b'', raw_value=b'', offset=45)\r\n    |DW_AT_type        :  AttributeValue(name='DW_AT_type', form='DW_FORM_ref4', value=94, raw_value=94, offset=45)\r\n    |DW_AT_low_pc      :  AttributeValue(name='DW_AT_low_pc', form='DW_FORM_addr', value=32768, raw_value=32768, offset=49)\r\n    |DW_AT_high_pc     :  AttributeValue(name='DW_AT_high_pc', form='DW_FORM_data4', value=24, raw_value=24, offset=53)\r\n    |DW_AT_frame_base  :  AttributeValue(name='DW_AT_frame_base', form='DW_FORM_exprloc', value=[156], raw_value=[156], offset=57)\r\n    |DW_AT_GNU_all_call_sites:  AttributeValue(name='DW_AT_GNU_all_call_sites', form='DW_FORM_flag_present', value=b'', raw_value=b'', offset=59)\r\n    |DW_AT_sibling     :  AttributeValue(name='DW_AT_sibling', form='DW_FORM_ref4', value=94, raw_value=94, offset=59)\r\n...\r\nmain 32769\r\n```\r\nAs you can see, there is a difference in the address assigned to symbol `main` in elf (`32769`) and dwarf (`32768`) forms. The least significant bit is used to indicate which mode a function uses: thumb or arm.\r\nDoes the library support these cases or maybe have some auxiliary functions that could make the consistency between dwarf and elf representations?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/189", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/189/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/189/events", "html_url": "https://github.com/eliben/pyelftools/issues/189", "id": 320967107, "node_id": "MDU6SXNzdWUzMjA5NjcxMDc=", "number": 189, "title": "Expand DT_FLAGS or provide flags enum", "user": {"login": "yugr", "id": 1101391, "node_id": "MDQ6VXNlcjExMDEzOTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1101391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yugr", "html_url": "https://github.com/yugr", "followers_url": "https://api.github.com/users/yugr/followers", "following_url": "https://api.github.com/users/yugr/following{/other_user}", "gists_url": "https://api.github.com/users/yugr/gists{/gist_id}", "starred_url": "https://api.github.com/users/yugr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yugr/subscriptions", "organizations_url": "https://api.github.com/users/yugr/orgs", "repos_url": "https://api.github.com/users/yugr/repos", "events_url": "https://api.github.com/users/yugr/events{/privacy}", "received_events_url": "https://api.github.com/users/yugr/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 42772928, "node_id": "MDU6TGFiZWw0Mjc3MjkyOA==", "url": "https://api.github.com/repos/eliben/pyelftools/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-07T21:37:58Z", "updated_at": "2018-10-04T12:15:50Z", "closed_at": "2018-10-04T12:15:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "`DT_FLAGS` dynamic tag is a bitmask which may contain any combination of `DF_ORIGIN`, `DF_SYMBOLIC`, etc. flags. Would be nice if pyelftools expanded `DT_FLAGS` to a set of flags or at least provided enum with values of flags.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/187", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/187/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/187/events", "html_url": "https://github.com/eliben/pyelftools/issues/187", "id": 306788162, "node_id": "MDU6SXNzdWUzMDY3ODgxNjI=", "number": 187, "title": "re-add support for initializing sections with an explicit stream", "user": {"login": "rhelmot", "id": 2498805, "node_id": "MDQ6VXNlcjI0OTg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2498805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhelmot", "html_url": "https://github.com/rhelmot", "followers_url": "https://api.github.com/users/rhelmot/followers", "following_url": "https://api.github.com/users/rhelmot/following{/other_user}", "gists_url": "https://api.github.com/users/rhelmot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhelmot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhelmot/subscriptions", "organizations_url": "https://api.github.com/users/rhelmot/orgs", "repos_url": "https://api.github.com/users/rhelmot/repos", "events_url": "https://api.github.com/users/rhelmot/events{/privacy}", "received_events_url": "https://api.github.com/users/rhelmot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-03-20T09:33:15Z", "updated_at": "2018-03-21T23:57:36Z", "closed_at": "2018-03-21T23:57:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "somewhere between 0.24 and now, the Section constructors had their stream argument removed, and the stream is now grabbed from the reader. I would like the ability to pass in an explicit stream to use besides the one in the reader.\r\n\r\nThe rationale for this is that when trying to analyze binaries robustly, section data is not actually considered by loaders and is thus a potential wedge for malicious actors to confuse analysis tools by providing misleading data. Instead, we want to use just the program headers (segments) for loading. This means getting the string tables/relocations/etc out of the PT_DYNAMIC segment instead of the section table. However, entries in PT_DYNAMIC provide their addresses in terms of _how they look when actually mapped into an address space_. In our application, we're already constructing the loaded binary into an address space object which supports the python stream interface, so instead of trying to translate the address back into an offset into the binary by checking each of the PT_LOADs again, we used to be able to just provide our copy of the address space directly to a RelocationSection object to be able to read out the relocations, for example.\r\n\r\nIf you think this is an ok change, I can do it pretty easily.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/185", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/185/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/185/events", "html_url": "https://github.com/eliben/pyelftools/issues/185", "id": 303918534, "node_id": "MDU6SXNzdWUzMDM5MTg1MzQ=", "number": 185, "title": "Release 1.6.0 unbundle_nbi subprocess.Popen environment missing", "user": {"login": "SkyLeach", "id": 940228, "node_id": "MDQ6VXNlcjk0MDIyOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/940228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkyLeach", "html_url": "https://github.com/SkyLeach", "followers_url": "https://api.github.com/users/SkyLeach/followers", "following_url": "https://api.github.com/users/SkyLeach/following{/other_user}", "gists_url": "https://api.github.com/users/SkyLeach/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkyLeach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkyLeach/subscriptions", "organizations_url": "https://api.github.com/users/SkyLeach/orgs", "repos_url": "https://api.github.com/users/SkyLeach/repos", "events_url": "https://api.github.com/users/SkyLeach/events{/privacy}", "received_events_url": "https://api.github.com/users/SkyLeach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-09T17:27:38Z", "updated_at": "2018-03-09T17:28:30Z", "closed_at": "2018-03-09T17:28:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Insufficient testing.  Apparently the user environment is not being passed to subprocess.Popen (copied from `bintools/unbundleNX9K.py`) which makes the shebang in disNBI fail to find perl:\r\n\r\n```\r\nINFO:imgunbundler.unbundlers.unbundle_nbi:Extracting files from /data/magregor-specialtest/nxos.7.0.3.IHD8.0.397.bin to /data/output/magregor ...\r\nERROR:imgunbundler.unbundlers.unbundle_nbi:DISNBI return code 127:\r\n/usr/bin/env: \u2018perl -w\u2019: No such file or directory\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/unbundlers/unbundle_nbi.py\", line 86, in unbundle\r\n    raise ImgunbundleInternalError(errmsg)\r\nImgunbundleInternalError: DISNBI return code 127:\r\n/usr/bin/env: \u2018perl -w\u2019: No such file or directory\r\n\r\n\r\nERROR:imgunbundler.unbundlers.unbundle_generic:Problem with <imgunbundler.unbundlers.unbundle_nbi.unbundle_nbi object at 0x7fe66b478610>\r\nTraceback (most recent call last):\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/unbundlers/unbundle_generic.py\", line 210, in unbundle_worker\r\n    result = unbundler_instance.unbundle(fileobj)\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/unbundlers/unbundle_nbi.py\", line 92, in unbundle\r\n    raise ImgunbundleInternalError(e.message)\r\nImgunbundleInternalError: DISNBI return code 127:\r\n/usr/bin/env: \u2018perl -w\u2019: No such file or directory\r\n\r\n\r\nDISNBI return code 127:\r\n/usr/bin/env: \u2018perl -w\u2019: No such file or directory\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/magregor/.virtualenvs/imgunbundler/bin/imgunbundle\", line 11, in <module>\r\n    load_entry_point('imgunbundler', 'console_scripts', 'imgunbundle')()\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/imgunbundle.py\", line 290, in main\r\n    run(imgfile, outdir)\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/imgunbundle.py\", line 90, in run\r\n    first_unbundler.unbundle_generic(fileobj, 0, **kwargs)\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/unbundlers/unbundle_generic.py\", line 327, in unbundle_generic\r\n    is_bundle = self.unbundle_worker(fileobj, **kwargs)\r\n  File \"/home/magregor/src/imgunbundle/imgunbundler/unbundlers/unbundle_generic.py\", line 218, in unbundle_worker\r\n    raise errorcodes.ImgunbundleInternalError(str(e))\r\nimgunbundler.errorcodes.ImgunbundleInternalError: DISNBI return code 127:\r\n/usr/bin/env: \u2018perl -w\u2019: No such file or directory\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/181", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/181/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/181/events", "html_url": "https://github.com/eliben/pyelftools/issues/181", "id": 297590130, "node_id": "MDU6SXNzdWUyOTc1OTAxMzA=", "number": 181, "title": "Q: EM_BLAFKIN vs EM_BLACKFIN", "user": {"login": "umlaeute", "id": 214034, "node_id": "MDQ6VXNlcjIxNDAzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/214034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/umlaeute", "html_url": "https://github.com/umlaeute", "followers_url": "https://api.github.com/users/umlaeute/followers", "following_url": "https://api.github.com/users/umlaeute/following{/other_user}", "gists_url": "https://api.github.com/users/umlaeute/gists{/gist_id}", "starred_url": "https://api.github.com/users/umlaeute/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/umlaeute/subscriptions", "organizations_url": "https://api.github.com/users/umlaeute/orgs", "repos_url": "https://api.github.com/users/umlaeute/repos", "events_url": "https://api.github.com/users/umlaeute/events{/privacy}", "received_events_url": "https://api.github.com/users/umlaeute/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-15T20:44:09Z", "updated_at": "2018-02-17T13:12:21Z", "closed_at": "2018-02-16T13:59:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\naccording to the [linux kernel sources](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/elf-em.h) and also to [elftools/elf/enums.py](https://github.com/eliben/pyelftools/blob/master/elftools/elf/enums.py) `EM_BLACKFIN` seems to be the correct spelling, but `ELFFile.header.e_machine` uses `EM_BLAFKIN` instead.\r\n\r\nis this a typo? or intentional?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/180", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/180/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/180/events", "html_url": "https://github.com/eliben/pyelftools/issues/180", "id": 296945447, "node_id": "MDU6SXNzdWUyOTY5NDU0NDc=", "number": 180, "title": "from Construct developer, a note", "user": {"login": "arekbulski", "id": 5385838, "node_id": "MDQ6VXNlcjUzODU4Mzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5385838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arekbulski", "html_url": "https://github.com/arekbulski", "followers_url": "https://api.github.com/users/arekbulski/followers", "following_url": "https://api.github.com/users/arekbulski/following{/other_user}", "gists_url": "https://api.github.com/users/arekbulski/gists{/gist_id}", "starred_url": "https://api.github.com/users/arekbulski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arekbulski/subscriptions", "organizations_url": "https://api.github.com/users/arekbulski/orgs", "repos_url": "https://api.github.com/users/arekbulski/repos", "events_url": "https://api.github.com/users/arekbulski/events{/privacy}", "received_events_url": "https://api.github.com/users/arekbulski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-14T01:24:10Z", "updated_at": "2018-02-17T14:37:53Z", "closed_at": "2018-02-17T14:35:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am the developer of Construct (a parsing library) since I took over the project 2 years ago. Please refer any other projects that also use this library to this post, or copy it over to them. \r\n\r\nConstruct is undergoing heavy changes at the moment, similar to those between 2.5->2.8, including addition of compiler feature (to make it much faster than Kaitai), but also several classes are going to be removed (for a good reason), and also few were added. API will be unstable for about a month.\r\n\r\nWhat you can do:\r\n- All scheduled work is posted as tickets, in [Issues](https://github.com/construct/construct/issues) and also on [Kanban](https://github.com/construct/construct/projects/3) page. If you subscribe (watch repository) then you will have advance notice of any incoming changes. Unfortunately those tickets also include minor work items, so you would get some clutter notifications too. I appologise for that.\r\n- I encourage everyone to browse those tickets, vote for feature requests, but also post objections for planned removal of features, or changes in semantics. Subscribing therefore is recommended.\r\n- You can find what was already changed (at any moment) on [Transition page](https://construct.readthedocs.io/en/latest/transition29.html), which is like a growing changelog. It gets updated whenever something gets added or removed, but since the order is not chronological, new items do not end up on top or bottom of the list.\r\n- You can find currently available classes and semantics on revamped [Core API pages](https://construct.readthedocs.io/en/latest/index.html#api-reference). Those pages are very extensive and always uptodate with the implementation.\r\n- **Feel free, at any point in time, to open a new Issue and ask questions or make complaints** about breakage. At minimum, I can offer advice and possible alternatives. People very often use the classes in ways that were not designed for, like use String classes to process Bytes.\r\n- **Feel free, at any point in time, to open a new Issue and request changes.** If you need a new class, and make a good clear case, I would be more than willing to add it to core library to support your project.\r\n- API should be stable within a month, so either do version pinning and deal with it then, or keep fixing your code at every release (which is ~3 day cycle at the moment).\r\n\r\nClose this topic at your discretion.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/179", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/179/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/179/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/179/events", "html_url": "https://github.com/eliben/pyelftools/issues/179", "id": 294051009, "node_id": "MDU6SXNzdWUyOTQwNTEwMDk=", "number": 179, "title": "Traversing typedef struct issue", "user": {"login": "volium", "id": 10421223, "node_id": "MDQ6VXNlcjEwNDIxMjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/10421223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/volium", "html_url": "https://github.com/volium", "followers_url": "https://api.github.com/users/volium/followers", "following_url": "https://api.github.com/users/volium/following{/other_user}", "gists_url": "https://api.github.com/users/volium/gists{/gist_id}", "starred_url": "https://api.github.com/users/volium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/volium/subscriptions", "organizations_url": "https://api.github.com/users/volium/orgs", "repos_url": "https://api.github.com/users/volium/repos", "events_url": "https://api.github.com/users/volium/events{/privacy}", "received_events_url": "https://api.github.com/users/volium/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-02T23:08:10Z", "updated_at": "2018-02-13T18:42:53Z", "closed_at": "2018-02-13T18:42:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is **potentially** not a bug, but rather a gap in documentation, or even more likely, a lack of knowledge on my part.\r\n\r\nI have a struct definition similar to this:\r\n\r\n```\r\ntypedef struct node{\r\n  uint32_t id;\r\n  struct node *next;\r\n} Node_t;\r\n```\r\n\r\nI'm able to use traverse the CUs until I find the first reference to the a variable of type ```Node_t```;  which I then start examining and deconstruct. My issue is that once I find the ```*next``` element in the struct definition, I am not able to link it back to the main ```Node_t``` definition, I can only see the parent which is reported to have type ```node```.\r\n\r\nI am using pyelftools to walk the elf file produced by the compiler to generate RPC code callable from the a different host.\r\n\r\nClues, suggestions?\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/178", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/178/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/178/events", "html_url": "https://github.com/eliben/pyelftools/issues/178", "id": 290111340, "node_id": "MDU6SXNzdWUyOTAxMTEzNDA=", "number": 178, "title": "Error running readelf.py with Python 3.6.4", "user": {"login": "dleach", "id": 2977080, "node_id": "MDQ6VXNlcjI5NzcwODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2977080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dleach", "html_url": "https://github.com/dleach", "followers_url": "https://api.github.com/users/dleach/followers", "following_url": "https://api.github.com/users/dleach/following{/other_user}", "gists_url": "https://api.github.com/users/dleach/gists{/gist_id}", "starred_url": "https://api.github.com/users/dleach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dleach/subscriptions", "organizations_url": "https://api.github.com/users/dleach/orgs", "repos_url": "https://api.github.com/users/dleach/repos", "events_url": "https://api.github.com/users/dleach/events{/privacy}", "received_events_url": "https://api.github.com/users/dleach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-19T21:24:12Z", "updated_at": "2018-01-19T21:56:22Z", "closed_at": "2018-01-19T21:56:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Getting ImportError on 'iterbytes' on:\r\n\r\nfrom elftools.common.py3compat import (ifilter, byte2int, bytes2str, itervalues, str2bytes, iterbytes)\r\n\r\nThis is a fresh install of Python 3.x and the only thing I've pip installed is the pyelftools. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/175", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/175/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/175/events", "html_url": "https://github.com/eliben/pyelftools/issues/175", "id": 286216541, "node_id": "MDU6SXNzdWUyODYyMTY1NDE=", "number": 175, "title": "Only use os- and processor- specific enum values on the appropriate os and processor", "user": {"login": "rhelmot", "id": 2498805, "node_id": "MDQ6VXNlcjI0OTg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2498805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhelmot", "html_url": "https://github.com/rhelmot", "followers_url": "https://api.github.com/users/rhelmot/followers", "following_url": "https://api.github.com/users/rhelmot/following{/other_user}", "gists_url": "https://api.github.com/users/rhelmot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhelmot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhelmot/subscriptions", "organizations_url": "https://api.github.com/users/rhelmot/orgs", "repos_url": "https://api.github.com/users/rhelmot/repos", "events_url": "https://api.github.com/users/rhelmot/events{/privacy}", "received_events_url": "https://api.github.com/users/rhelmot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-01-05T07:54:41Z", "updated_at": "2018-02-23T13:30:53Z", "closed_at": "2018-02-23T13:30:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "So this is the _actual_ cause that was behind yesterday's issue, though that is probably still a problem.\r\n\r\nIf you look at how this project tries to load the file linked from this issue https://github.com/angr/cle/issues/103#issuecomment-355405436 it crashes because it thinks the dynamic tag 0x6000000f is `DT_SUNW_FILTER`, and assumes that the corresponding d_val points to a string. However, this is not solaris, and 0x6000000f is not a filter here, so the pointer is not an index into a string table, and so the lookup crashes.\r\n\r\nThis seems like a very complicated and invasive change, and I don't know anything about the architecture of this project, so I'd appreciate a response other than \"patches welcome\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/173", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/173/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/173/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/173/events", "html_url": "https://github.com/eliben/pyelftools/issues/173", "id": 285862574, "node_id": "MDU6SXNzdWUyODU4NjI1NzQ=", "number": 173, "title": "Crash when non-ascii characters are used in symbols or sonames", "user": {"login": "rhelmot", "id": 2498805, "node_id": "MDQ6VXNlcjI0OTg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2498805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhelmot", "html_url": "https://github.com/rhelmot", "followers_url": "https://api.github.com/users/rhelmot/followers", "following_url": "https://api.github.com/users/rhelmot/following{/other_user}", "gists_url": "https://api.github.com/users/rhelmot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhelmot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhelmot/subscriptions", "organizations_url": "https://api.github.com/users/rhelmot/orgs", "repos_url": "https://api.github.com/users/rhelmot/repos", "events_url": "https://api.github.com/users/rhelmot/events{/privacy}", "received_events_url": "https://api.github.com/users/rhelmot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-04T02:07:07Z", "updated_at": "2018-02-23T13:28:51Z", "closed_at": "2018-02-23T13:28:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "At the bottom of every read from memory is the conversion from bytes to string with `.decode('ascii')`. This fails extremely loudly when there's a character >0x7e. Strings like this can occur naturally in e.g. elf files found on android systems. To reproduce just copy libc.so.6 and replace the libc.so.6 soname text with libc\\xffso.6 or whatever.\r\n\r\nTwo possible solutions:\r\n- return bytes instead of string\r\n- replace `s.decode('ascii')` with `''.join(chr(c) for c in s)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/171", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/171/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/171/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/171/events", "html_url": "https://github.com/eliben/pyelftools/issues/171", "id": 276846932, "node_id": "MDU6SXNzdWUyNzY4NDY5MzI=", "number": 171, "title": "EXIDX vs ARM_EXIDX (difference between binutils and pyelftools readelf -e)", "user": {"login": "mzpqnxow", "id": 8016228, "node_id": "MDQ6VXNlcjgwMTYyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8016228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzpqnxow", "html_url": "https://github.com/mzpqnxow", "followers_url": "https://api.github.com/users/mzpqnxow/followers", "following_url": "https://api.github.com/users/mzpqnxow/following{/other_user}", "gists_url": "https://api.github.com/users/mzpqnxow/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzpqnxow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzpqnxow/subscriptions", "organizations_url": "https://api.github.com/users/mzpqnxow/orgs", "repos_url": "https://api.github.com/users/mzpqnxow/repos", "events_url": "https://api.github.com/users/mzpqnxow/events{/privacy}", "received_events_url": "https://api.github.com/users/mzpqnxow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-26T18:53:14Z", "updated_at": "2017-11-27T12:43:27Z", "closed_at": "2017-11-27T12:43:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "for ARM binaries, readelf reports the ARM_EXIDX program header as EXIDX\r\n\r\ndiff:\r\n\r\n```\r\n Program Headers:\r\n   Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align\r\n-  EXIDX          0x0bb958 0x000c3958 0x000c3958 0x00868 0x00868 R   0x4\r\n+  ARM_EXIDX      0x0bb958 0x000c3958 0x000c3958 0x00868 0x00868 R   0x4\r\n```\r\n\r\nReproduce with this executable:\r\n\r\nhttps://github.com/mzpqnxow/embedded-toolkit/blob/master/prebuilt_static_bins/gdbserver/gdbserver-7.7.1-armel-eabi5-v1-sysv", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/166", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/166/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/166/events", "html_url": "https://github.com/eliben/pyelftools/issues/166", "id": 276777092, "node_id": "MDU6SXNzdWUyNzY3NzcwOTI=", "number": 166, "title": "Fix ABIFLAGS and Program Headers hex format to match binutils readelf", "user": {"login": "mzpqnxow", "id": 8016228, "node_id": "MDQ6VXNlcjgwMTYyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8016228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzpqnxow", "html_url": "https://github.com/mzpqnxow", "followers_url": "https://api.github.com/users/mzpqnxow/followers", "following_url": "https://api.github.com/users/mzpqnxow/following{/other_user}", "gists_url": "https://api.github.com/users/mzpqnxow/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzpqnxow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzpqnxow/subscriptions", "organizations_url": "https://api.github.com/users/mzpqnxow/orgs", "repos_url": "https://api.github.com/users/mzpqnxow/repos", "events_url": "https://api.github.com/users/mzpqnxow/events{/privacy}", "received_events_url": "https://api.github.com/users/mzpqnxow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-25T20:52:52Z", "updated_at": "2017-11-26T23:09:59Z", "closed_at": "2017-11-26T23:09:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "pyelftools was not picking up PT_MIPS_ABIFLAGS and was printing unknown, while binutils readelf correctly reports ABIFLAGS.\r\n\r\nAlso fixed Program Header align offset to print a leading 0x for 64 bit programs to match behavior of binutils readelf\r\n\r\nReproduce with the binary available at:\r\n\r\nhttps://github.com/mzpqnxow/embedded-toolkit/blob/master/prebuilt_static_bins/gdbserver/gdbserver-7.12-mips64-mips64rel2-v1-sysv\r\n\r\nPull request will be attached, minor fix", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/164", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/164/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/164/events", "html_url": "https://github.com/eliben/pyelftools/issues/164", "id": 276773278, "node_id": "MDU6SXNzdWUyNzY3NzMyNzg=", "number": 164, "title": "Add EF_MIPS_PIC to E_FLAGS to readelf.py to match binutils readelf output", "user": {"login": "mzpqnxow", "id": 8016228, "node_id": "MDQ6VXNlcjgwMTYyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8016228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzpqnxow", "html_url": "https://github.com/mzpqnxow", "followers_url": "https://api.github.com/users/mzpqnxow/followers", "following_url": "https://api.github.com/users/mzpqnxow/following{/other_user}", "gists_url": "https://api.github.com/users/mzpqnxow/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzpqnxow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzpqnxow/subscriptions", "organizations_url": "https://api.github.com/users/mzpqnxow/orgs", "repos_url": "https://api.github.com/users/mzpqnxow/repos", "events_url": "https://api.github.com/users/mzpqnxow/events{/privacy}", "received_events_url": "https://api.github.com/users/mzpqnxow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-25T19:52:08Z", "updated_at": "2017-11-26T23:09:37Z", "closed_at": "2017-11-26T23:09:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "    pyelftools picked up CPIC but not PIC\r\n    \r\n    binutils readelf says:\r\n      Flags:                             0x1007, noreorder, pic, cpic, o32, mips1\r\n    \r\n    pyelftools said (before this change):\r\n      Flags:                             0x1007, noreorder, cpic, o32, mips1\r\n    \r\n    Reproduce with the binary available at:\r\n    \r\n    https://github.com/mzpqnxow/embedded-toolkit/blob/master/prebuilt_static_bins/gdbserver/gdbserver-6.8-mips-i-rtl819x-lexra\r\n\r\nI will attach a pull request", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/162", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/162/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/162/events", "html_url": "https://github.com/eliben/pyelftools/issues/162", "id": 276772232, "node_id": "MDU6SXNzdWUyNzY3NzIyMzI=", "number": 162, "title": "Unknown Machine and Program Header values with readelf against PPC executable", "user": {"login": "mzpqnxow", "id": 8016228, "node_id": "MDQ6VXNlcjgwMTYyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8016228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzpqnxow", "html_url": "https://github.com/mzpqnxow", "followers_url": "https://api.github.com/users/mzpqnxow/followers", "following_url": "https://api.github.com/users/mzpqnxow/following{/other_user}", "gists_url": "https://api.github.com/users/mzpqnxow/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzpqnxow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzpqnxow/subscriptions", "organizations_url": "https://api.github.com/users/mzpqnxow/orgs", "repos_url": "https://api.github.com/users/mzpqnxow/repos", "events_url": "https://api.github.com/users/mzpqnxow/events{/privacy}", "received_events_url": "https://api.github.com/users/mzpqnxow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-25T19:33:17Z", "updated_at": "2017-11-26T23:10:16Z", "closed_at": "2017-11-26T23:10:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Reproducible using readelf.py -e against the binary @ https://github.com/mzpqnxow/embedded-toolkit/blob/master/prebuilt_static_bins/gdbserver/gdbserver-7.12-ppc-sysv\r\n\r\nreadelf.py has at least two problems, it shows the TLS program header as unknown and it shows the Machine as unknown. According to GNU binutils readelf, the correct values are PowerPC and TLS.\r\n\r\nI will attach a pull request should this be something you would like to address. The changes are very simple and involve only adding a single line to a dict for each issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/156", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/156/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/156/events", "html_url": "https://github.com/eliben/pyelftools/issues/156", "id": 253704379, "node_id": "MDU6SXNzdWUyNTM3MDQzNzk=", "number": 156, "title": "ELF bytes to function pointer", "user": {"login": "jpivarski", "id": 1852447, "node_id": "MDQ6VXNlcjE4NTI0NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1852447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jpivarski", "html_url": "https://github.com/jpivarski", "followers_url": "https://api.github.com/users/jpivarski/followers", "following_url": "https://api.github.com/users/jpivarski/following{/other_user}", "gists_url": "https://api.github.com/users/jpivarski/gists{/gist_id}", "starred_url": "https://api.github.com/users/jpivarski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jpivarski/subscriptions", "organizations_url": "https://api.github.com/users/jpivarski/orgs", "repos_url": "https://api.github.com/users/jpivarski/repos", "events_url": "https://api.github.com/users/jpivarski/events{/privacy}", "received_events_url": "https://api.github.com/users/jpivarski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-08-29T15:22:14Z", "updated_at": "2017-08-31T12:39:30Z", "closed_at": "2017-08-31T12:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "This isn't a bug-report per say, but given that you said, \"If you find any part of the documentation lacking...\", I'll ask my question here.\r\n\r\nI would like to use pyelftools to find a function pointer in an ELF bytes string. Numba can produce compiled functions, giving me a pointer to the function in local memory and a (hopefully) portable version of the function as an ELF. I want to send the function to a remote site and run it there (on a secured network with known hardware!), so I want to load the ELF as a string and get a new function pointer in the new process.\r\n\r\nFor example,\r\n```python\r\n>>> import numba\r\n>>> @numba.cfunc(\"f8(f8)\", nopython=True)\r\n... def simple_function(x):\r\n...   return x + 3.14\r\n```\r\n\r\nIt's made to be called locally:\r\n```python\r\n>>> simple_function.address\r\n140625355096096L\r\n>>> import ctypes\r\n>>> f = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double)(simple_function.address)\r\n>>> f(12)\r\n15.14\r\n```\r\n\r\nBut we can also get the ELF:\r\n```python\r\n>>> elfbytes = simple_function._library._compiled_object\r\n>>> import numpy\r\n>>> numpy.frombuffer(elfbytes).view(numpy.uint8)\r\narray([127,  69,  76,  70,   2,   1,   1,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   1,   0,  62,   0,   1,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0, 160,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n        64,   0,   0,   0,   0,   0,  64,   0,   7,   0,   1,   0,  72,\r\n       184,   0,   0,   0,   0,   0,   0,   0,   0, 242,  15,  88,   0,\r\n        49, 192, 242,  15,  17,   7, 195, 102, 102,  46,  15,  31, 132,\r\n         0,   0,   0,   0,   0,  72, 184,   0,   0,   0,   0,   0,   0,\r\n         0,   0, 242,  15,  88,   0, 195,   0,  31, 133, 235,  81, 184, <- right there!!!\r\n        30,   9,  64,  31, 133, 235,  81, 184,  30,   9,  64,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,  12,   0,   0,   0,\r\n         4,   0, 241, 255,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3,   0,\r\n         4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,  79,   0,   0,   0,  18,   0,   2,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,  21,   0,   0,   0,   0,\r\n         0,   0,   0,  73,   0,   0,   0,  18,   0,   2,   0,  32,   0,\r\n         0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,\r\n         0,   2,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,\r\n         2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  34,\r\n         0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   2,   0,\r\n         0,   0,   8,   0,   0,   0,   0,   0,   0,   0,   0,  46, 114,\r\n       101, 108,  97,  46, 116, 101, 120, 116,   0, 115, 105, 109, 112,\r\n       108, 101,  95, 102, 117, 110,  99, 116, 105, 111, 110,   0,  46,\r\n       110, 111, 116, 101,  46,  71,  78,  85,  45, 115, 116,  97,  99,\r\n       107,   0,  46, 115, 116, 114, 116,  97,  98,   0,  46, 115, 121,\r\n       109, 116,  97,  98,   0,  46, 114, 111, 100,  97, 116,  97,  46,\r\n        99, 115, 116,  56,   0,  99, 102, 117, 110,  99,  46,  95,  95,\r\n       109,  97, 105, 110,  95,  95,  46, 115, 105, 109, 112, 108, 101,\r\n        95, 102, 117, 110,  99, 116, 105, 111, 110,  36,  49,  46, 102,\r\n       108, 111,  97, 116,  54,  52,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  44,\r\n         0,   0,   0,   3,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  40,   1,   0,\r\n         0,   0,   0,   0,   0, 114,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   0,\r\n         0,   0,   1,   0,   0,   0,   6,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,  64,   0,   0,   0,\r\n         0,   0,   0,   0,  47,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,\r\n         0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0, 248,   0,   0,   0,   0,\r\n         0,   0,   0,  48,   0,   0,   0,   0,   0,   0,   0,   6,   0,\r\n         0,   0,   2,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,\r\n         0,  24,   0,   0,   0,   0,   0,   0,   0,  60,   0,   0,   0,\r\n         1,   0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0, 112,   0,   0,   0,   0,   0,\r\n         0,   0,  16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,\r\n         8,   0,   0,   0,   0,   0,   0,   0,  28,   0,   0,   0,   1,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0, 128,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,  52,   0,   0,   0,   2,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0, 128,   0,   0,   0,   0,   0,   0,   0,\r\n       120,   0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   3,\r\n         0,   0,   0,   8,   0,   0,   0,   0,   0,   0,   0,  24,   0,\r\n         0,   0,   0,   0,   0,   0], dtype=uint8)\r\n```\r\n\r\nLooking at my local pointer for reference, the first 50 bytes after the function pointer is\r\n```python\r\n>>> numpy.ctypeslib.as_array(ctypes.cast(simple_function.address, ctypes.POINTER(ctypes.c_uint8)), (50,))\r\narray([ 72, 184,   8,  48,  86, 228, 229, 127,   0,   0, 242,  15,  88,\r\n         0, 195,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\r\n         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0], dtype=uint8)\r\n```\r\nOnly the first three bytes (72, 184, 8) and the (0, 0, 242, 15, 88, 0, 195, 0) section are consistent from run to run, with the 8-byte string coming right before a representation of 3.14 (31, 133, 235, 81, 184, 30, 9, 64). I see this starting on byte 117 in the ELF (labeled \"right there\").\r\n\r\nSo it's in there.\r\n\r\nOn to pyelftools:\r\n```python\r\n>>> from elftools.elf.elffile import ELFFile\r\n>>> from io import BytesIO\r\n>>> elf = ELFFile(BytesIO(elfbytes))\r\n```\r\n\r\nThe last section has the symbol table:\r\n```python\r\n>>> list(elf.iter_sections())\r\n[<elftools.elf.sections.NullSection object at 0x7fe5db704710>, <elftools.elf.sections.StringTableSection object at 0x7fe5db704690>, <elftools.elf.sections.Section object at 0x7fe5db704610>, <elftools.elf.relocation.RelocationSection object at 0x7fe5db704590>, <elftools.elf.sections.Section object at 0x7fe5db704810>, <elftools.elf.sections.Section object at 0x7fe5db704950>, <elftools.elf.sections.SymbolTableSection object at 0x7fe5db704990>]\r\n```\r\nand it has the expected symbol names:\r\n```python\r\n>>> [x.name for x in list(elf.iter_sections())[-1].iter_symbols()]\r\n[u'', u'simple_function', u'', u'__main__.simple_function$1.float64', u'cfunc.__main__.simple_function$1.float64']\r\n```\r\nThe last one (\"`cfunc.__main__.simple_function$1.float64`\") is the function I want. (I can see that by reading the LLVM in `simple_function._library.get_llvm_str()`.)\r\n\r\nI see that these `Symbol` objects have an `entry` dict-like, and some of these are numerical offsets, but how do I get the offset from the beginning of the ELF?\r\n\r\nThat is, if I load the ELF bytes into a Numpy array, how do I use the information from pyelftools to construct an offset relative to the base address of that array? (In other words, how do I do `dlsym` with pyelftools?)\r\n\r\n(This ELF doesn't seem to be compatible with the normal `dlopen`/`dlsym` mechanism: writing to a file and doing `ctypes.cdll.LoadLibrary` results in `OSError: /tmp/dummy.so: only ET_DYN and ET_EXEC can be loaded`.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/151", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/151/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/151/events", "html_url": "https://github.com/eliben/pyelftools/issues/151", "id": 241826110, "node_id": "MDU6SXNzdWUyNDE4MjYxMTA=", "number": 151, "title": "DW_AT_upper_bound is incorrect in certain case", "user": {"login": "portnoy31191", "id": 4298770, "node_id": "MDQ6VXNlcjQyOTg3NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4298770?v=4", "gravatar_id": "", "url": "https://api.github.com/users/portnoy31191", "html_url": "https://github.com/portnoy31191", "followers_url": "https://api.github.com/users/portnoy31191/followers", "following_url": "https://api.github.com/users/portnoy31191/following{/other_user}", "gists_url": "https://api.github.com/users/portnoy31191/gists{/gist_id}", "starred_url": "https://api.github.com/users/portnoy31191/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/portnoy31191/subscriptions", "organizations_url": "https://api.github.com/users/portnoy31191/orgs", "repos_url": "https://api.github.com/users/portnoy31191/repos", "events_url": "https://api.github.com/users/portnoy31191/events{/privacy}", "received_events_url": "https://api.github.com/users/portnoy31191/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-10T19:47:52Z", "updated_at": "2017-07-10T20:53:14Z", "closed_at": "2017-07-10T20:53:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Language: ADA 95\r\nCompiler: Concurrent\r\nForm: DW_FORM_udata\r\nTAG: 16515 (decimal)\r\nATTR: DW_AT_upper_bound\r\n\r\nExpected value: -1\r\nActual value: 4294967295\r\n\r\nThis is also representing a [mod](https://en.wikibooks.org/wiki/Ada_Programming/Types/mod) type in Ada. \r\n\r\nIt seems pyelftools is reading the form as unsigned instead of signed and therefore reading the value incorrectly.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/150", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/150/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/150/events", "html_url": "https://github.com/eliben/pyelftools/issues/150", "id": 240572466, "node_id": "MDU6SXNzdWUyNDA1NzI0NjY=", "number": 150, "title": "Remove DT_ENCODING from the dynamic tags list", "user": {"login": "rhelmot", "id": 2498805, "node_id": "MDQ6VXNlcjI0OTg4MDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/2498805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rhelmot", "html_url": "https://github.com/rhelmot", "followers_url": "https://api.github.com/users/rhelmot/followers", "following_url": "https://api.github.com/users/rhelmot/following{/other_user}", "gists_url": "https://api.github.com/users/rhelmot/gists{/gist_id}", "starred_url": "https://api.github.com/users/rhelmot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rhelmot/subscriptions", "organizations_url": "https://api.github.com/users/rhelmot/orgs", "repos_url": "https://api.github.com/users/rhelmot/repos", "events_url": "https://api.github.com/users/rhelmot/events{/privacy}", "received_events_url": "https://api.github.com/users/rhelmot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-07-05T08:16:49Z", "updated_at": "2018-01-05T21:54:59Z", "closed_at": "2018-01-05T21:54:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "According to [here](https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-42444.html) and [here](http://www.sco.com/developers/gabi/2000-07-17/ch5.dynamic.html), DT_ENCODING is not a real value, but rather a marker indicating something about the semantics of all the values lower than it. However, it shares a value with `DT_PREINIT_ARRAY`, which means that when performing a lookup for the tag name of a section, we're at the mercy of the hash function in determining which value we see first. The result is that on some machines, `d_tag` for these entries will be `DT_ENCODING`, while some will be `DT_PREINIT_ARRAY`. This is really bad!\r\n\r\nAnother possible solution would be to change the \"tag lookup\" function to just blacklist all the \"semantic tags\" like DT_ENCODING, DT_LOWOS, etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/145", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/145/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/145/events", "html_url": "https://github.com/eliben/pyelftools/issues/145", "id": 231872164, "node_id": "MDU6SXNzdWUyMzE4NzIxNjQ=", "number": 145, "title": "Wrong defintion of DW_FORM_ref_sig8", "user": {"login": "gerthmar", "id": 6299676, "node_id": "MDQ6VXNlcjYyOTk2NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6299676?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gerthmar", "html_url": "https://github.com/gerthmar", "followers_url": "https://api.github.com/users/gerthmar/followers", "following_url": "https://api.github.com/users/gerthmar/following{/other_user}", "gists_url": "https://api.github.com/users/gerthmar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gerthmar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gerthmar/subscriptions", "organizations_url": "https://api.github.com/users/gerthmar/orgs", "repos_url": "https://api.github.com/users/gerthmar/repos", "events_url": "https://api.github.com/users/gerthmar/events{/privacy}", "received_events_url": "https://api.github.com/users/gerthmar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-28T14:21:53Z", "updated_at": "2017-09-04T21:59:32Z", "closed_at": "2017-09-04T21:59:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "in dwarf/structs.py, DW_FORM_ref_sig8 is defined as\r\n\r\n`DW_FORM_ref_sig8=self.Dwarf_offset(''),`\r\n\r\nbut in my opinion, it should be \r\n\r\n`DW_FORM_ref_sig8 = self.Dwarf_uint64(''),`\r\n\r\nsince ref_sig8 must always be 64 bits.\r\n\r\nThis issue lead to a parese error in the attached elf file (for ARM Cortex-M4, generated by IAR Embedded Workbench). Please note there are still other issues with this file. Still working on the other isues, PR will follow shortly.\r\n\r\n[iar_ewb.zip](https://github.com/eliben/pyelftools/files/1034225/iar_ewb.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/144", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/144/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/144/events", "html_url": "https://github.com/eliben/pyelftools/issues/144", "id": 230439284, "node_id": "MDU6SXNzdWUyMzA0MzkyODQ=", "number": 144, "title": "Extract exported symbols like nm", "user": {"login": "CaledoniaProject", "id": 1357701, "node_id": "MDQ6VXNlcjEzNTc3MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1357701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CaledoniaProject", "html_url": "https://github.com/CaledoniaProject", "followers_url": "https://api.github.com/users/CaledoniaProject/followers", "following_url": "https://api.github.com/users/CaledoniaProject/following{/other_user}", "gists_url": "https://api.github.com/users/CaledoniaProject/gists{/gist_id}", "starred_url": "https://api.github.com/users/CaledoniaProject/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CaledoniaProject/subscriptions", "organizations_url": "https://api.github.com/users/CaledoniaProject/orgs", "repos_url": "https://api.github.com/users/CaledoniaProject/repos", "events_url": "https://api.github.com/users/CaledoniaProject/events{/privacy}", "received_events_url": "https://api.github.com/users/CaledoniaProject/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-22T15:48:05Z", "updated_at": "2017-05-24T03:24:33Z", "closed_at": "2017-05-24T03:24:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to find an example here, that can extract the exported symbols of a SO file\r\n\r\nhttps://github.com/eliben/pyelftools/tree/master/examples\r\n\r\nCan you kindly add one?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/142", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/142/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/142/events", "html_url": "https://github.com/eliben/pyelftools/issues/142", "id": 227556367, "node_id": "MDU6SXNzdWUyMjc1NTYzNjc=", "number": 142, "title": "7zip header errors", "user": {"login": "SkyLeach", "id": 940228, "node_id": "MDQ6VXNlcjk0MDIyOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/940228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkyLeach", "html_url": "https://github.com/SkyLeach", "followers_url": "https://api.github.com/users/SkyLeach/followers", "following_url": "https://api.github.com/users/SkyLeach/following{/other_user}", "gists_url": "https://api.github.com/users/SkyLeach/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkyLeach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkyLeach/subscriptions", "organizations_url": "https://api.github.com/users/SkyLeach/orgs", "repos_url": "https://api.github.com/users/SkyLeach/repos", "events_url": "https://api.github.com/users/SkyLeach/events{/privacy}", "received_events_url": "https://api.github.com/users/SkyLeach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-10T03:16:53Z", "updated_at": "2017-05-16T14:21:45Z", "closed_at": "2017-05-10T12:28:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[removed]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/139", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/139/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/139/events", "html_url": "https://github.com/eliben/pyelftools/issues/139", "id": 215598959, "node_id": "MDU6SXNzdWUyMTU1OTg5NTk=", "number": 139, "title": "Also run Ci tests on Windows and macOS", "user": {"login": "pombredanne", "id": 675997, "node_id": "MDQ6VXNlcjY3NTk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/675997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pombredanne", "html_url": "https://github.com/pombredanne", "followers_url": "https://api.github.com/users/pombredanne/followers", "following_url": "https://api.github.com/users/pombredanne/following{/other_user}", "gists_url": "https://api.github.com/users/pombredanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/pombredanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pombredanne/subscriptions", "organizations_url": "https://api.github.com/users/pombredanne/orgs", "repos_url": "https://api.github.com/users/pombredanne/repos", "events_url": "https://api.github.com/users/pombredanne/events{/privacy}", "received_events_url": "https://api.github.com/users/pombredanne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-21T00:56:59Z", "updated_at": "2017-09-04T21:58:46Z", "closed_at": "2017-09-04T21:58:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am considering replacing libdwarf and objdump in https://github.com/nexB/scancode-toolkit and https://github.com/nexB/scancode-toolkit-contrib by pyelftools and since I support also these other OSes it would be great for me to have the test suite running there too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/138", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/138/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/138/events", "html_url": "https://github.com/eliben/pyelftools/issues/138", "id": 214635300, "node_id": "MDU6SXNzdWUyMTQ2MzUzMDA=", "number": 138, "title": "Inconsistent condition between #address_offsets in elffile.py and in readelf.c", "user": {"login": "david942j", "id": 4191701, "node_id": "MDQ6VXNlcjQxOTE3MDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4191701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david942j", "html_url": "https://github.com/david942j", "followers_url": "https://api.github.com/users/david942j/followers", "following_url": "https://api.github.com/users/david942j/following{/other_user}", "gists_url": "https://api.github.com/users/david942j/gists{/gist_id}", "starred_url": "https://api.github.com/users/david942j/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david942j/subscriptions", "organizations_url": "https://api.github.com/users/david942j/orgs", "repos_url": "https://api.github.com/users/david942j/repos", "events_url": "https://api.github.com/users/david942j/events{/privacy}", "received_events_url": "https://api.github.com/users/david942j/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}, {"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-16T08:55:59Z", "updated_at": "2017-10-13T04:33:53Z", "closed_at": "2017-10-13T04:33:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In method [ELFFile#address_offsets](https://github.com/eliben/pyelftools/blob/8cd87bec6f69102726a50fecbd8f5748a7cd3a75/elftools/elf/elffile.py#L131)\r\n```python\r\nif (start >= seg['p_vaddr'] and\r\n   end <= seg['p_vaddr'] + seg['p_filesz']):\r\n```\r\n\r\nAccording to binutils/readelf.c#offset_from_vma:\r\n```cpp\r\nstatic long\r\noffset_from_vma (FILE * file, bfd_vma vma, bfd_size_type size)\r\n{\r\n  Elf_Internal_Phdr * seg;\r\n\r\n  if (! get_program_headers (file))\r\n  {\r\n      warn (_(\"Cannot interpret virtual addresses without program headers.\\n\"));\r\n      return (long) vma;\r\n  }\r\n\r\n  for (seg = program_headers;\r\n       seg < program_headers + elf_header.e_phnum;\r\n       ++seg)\r\n  {\r\n      if (seg->p_type != PT_LOAD)\r\n        continue;\r\n\r\n      if (vma >= (seg->p_vaddr & -seg->p_align)\r\n          && vma + size <= seg->p_vaddr + seg->p_filesz)\r\n        return vma - seg->p_vaddr + seg->p_offset;\r\n  }\r\n\r\n  warn (_(\"Virtual address 0x%lx not located in any PT_LOAD segment.\\n\"),\r\n        (unsigned long) vma);\r\n  return (long) vma;\r\n}\r\n```\r\n\r\nSo seems the condition in `address_offsets` should be\r\n```python\r\nif (start >= seg['p_vaddr'] & -seg['p_align'] and\r\n   end <= seg['p_vaddr'] + seg['p_filesz']):\r\n```\r\nNot sure what this difference affects, just figure this out.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/133", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/133/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/133/events", "html_url": "https://github.com/eliben/pyelftools/issues/133", "id": 203451122, "node_id": "MDU6SXNzdWUyMDM0NTExMjI=", "number": 133, "title": "Null symbol decode caused AttributeError", "user": {"login": "secmobi", "id": 1960626, "node_id": "MDQ6VXNlcjE5NjA2MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1960626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/secmobi", "html_url": "https://github.com/secmobi", "followers_url": "https://api.github.com/users/secmobi/followers", "following_url": "https://api.github.com/users/secmobi/following{/other_user}", "gists_url": "https://api.github.com/users/secmobi/gists{/gist_id}", "starred_url": "https://api.github.com/users/secmobi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/secmobi/subscriptions", "organizations_url": "https://api.github.com/users/secmobi/orgs", "repos_url": "https://api.github.com/users/secmobi/repos", "events_url": "https://api.github.com/users/secmobi/events{/privacy}", "received_events_url": "https://api.github.com/users/secmobi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-26T18:30:10Z", "updated_at": "2017-02-04T17:07:17Z", "closed_at": "2017-02-04T17:07:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a symbol is empty, when accessing this symbol by `SymbolTableSection.get_symbol()`, it will invoke `StringTableSection.get_string()`. In this method, line 73, `elftools.common.utils.parse_cstring_from_stream()` will return a `None` object to `s`; then in line 74, `s.decode('ascii')` will cause AttributeError since `s` is `None`. Trackback:\r\n\r\n    File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/elftools/elf/sections.py\", line 128, in iter_symbols\r\n      yield self.get_symbol(i)\r\n    File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/elftools/elf/sections.py\", line 107, in get_symbol\r\n      name = self.stringtable.get_string(entry['st_name'])\r\n    File \"/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/elftools/elf/sections.py\", line 74, in get_string\r\n      return s.decode('ascii')\r\n    AttributeError: 'NoneType' object has no attribute 'decode'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/130", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/130/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/130/events", "html_url": "https://github.com/eliben/pyelftools/issues/130", "id": 198904388, "node_id": "MDU6SXNzdWUxOTg5MDQzODg=", "number": 130, "title": "Please DO NOT use any section info when parsing segment!", "user": {"login": "douniwan5788", "id": 3118816, "node_id": "MDQ6VXNlcjMxMTg4MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3118816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/douniwan5788", "html_url": "https://github.com/douniwan5788", "followers_url": "https://api.github.com/users/douniwan5788/followers", "following_url": "https://api.github.com/users/douniwan5788/following{/other_user}", "gists_url": "https://api.github.com/users/douniwan5788/gists{/gist_id}", "starred_url": "https://api.github.com/users/douniwan5788/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/douniwan5788/subscriptions", "organizations_url": "https://api.github.com/users/douniwan5788/orgs", "repos_url": "https://api.github.com/users/douniwan5788/repos", "events_url": "https://api.github.com/users/douniwan5788/events{/privacy}", "received_events_url": "https://api.github.com/users/douniwan5788/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}, {"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-05T08:52:52Z", "updated_at": "2020-02-04T14:38:03Z", "closed_at": "2020-02-04T14:38:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to parse some \"striped\" dynamic library which has malformed section info,so I want to parse it in linker view using only segment info.BUT class [DynamicSegment](https://github.com/eliben/pyelftools/blob/60319cbb9d469e8d7c56e8f85dd55294c0ce4f62/elftools/elf/dynamic.py#L184) initializes with the original malformed sections, it just makes no sense...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/125", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/125/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/125/events", "html_url": "https://github.com/eliben/pyelftools/issues/125", "id": 186731678, "node_id": "MDU6SXNzdWUxODY3MzE2Nzg=", "number": 125, "title": "how to decode the struct definition ", "user": {"login": "slowpy", "id": 16513084, "node_id": "MDQ6VXNlcjE2NTEzMDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/16513084?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slowpy", "html_url": "https://github.com/slowpy", "followers_url": "https://api.github.com/users/slowpy/followers", "following_url": "https://api.github.com/users/slowpy/following{/other_user}", "gists_url": "https://api.github.com/users/slowpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/slowpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slowpy/subscriptions", "organizations_url": "https://api.github.com/users/slowpy/orgs", "repos_url": "https://api.github.com/users/slowpy/repos", "events_url": "https://api.github.com/users/slowpy/events{/privacy}", "received_events_url": "https://api.github.com/users/slowpy/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-11-02T07:42:20Z", "updated_at": "2020-02-04T14:37:34Z", "closed_at": "2020-02-04T14:37:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "  Dose call iter_DIEs() make sense\r\n\r\nwhat filter should be used? DW_TAG_structure_type ,DW_AT_specification , or other ect\r\n\r\n\r\nOh, use iter_DIEs, I got things like:\r\n\r\nDW_TAG_structure_type\r\nOrderedDict([('DW_AT_name', AttributeValue(name='DW_AT_name', form='DW_FORM_string', value='sss', raw_value='sss', offset=129))\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/123", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/123/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/123/events", "html_url": "https://github.com/eliben/pyelftools/issues/123", "id": 186609122, "node_id": "MDU6SXNzdWUxODY2MDkxMjI=", "number": 123, "title": "fail to import elffile on windows (+patch)", "user": {"login": "screwer", "id": 3645402, "node_id": "MDQ6VXNlcjM2NDU0MDI=", "avatar_url": "https://avatars2.githubusercontent.com/u/3645402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/screwer", "html_url": "https://github.com/screwer", "followers_url": "https://api.github.com/users/screwer/followers", "following_url": "https://api.github.com/users/screwer/following{/other_user}", "gists_url": "https://api.github.com/users/screwer/gists{/gist_id}", "starred_url": "https://api.github.com/users/screwer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/screwer/subscriptions", "organizations_url": "https://api.github.com/users/screwer/orgs", "repos_url": "https://api.github.com/users/screwer/repos", "events_url": "https://api.github.com/users/screwer/events{/privacy}", "received_events_url": "https://api.github.com/users/screwer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-01T18:25:42Z", "updated_at": "2020-02-04T14:37:20Z", "closed_at": "2020-02-04T14:37:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Due to missing 'getpagesize' field in 'resource':\r\n\r\n> D:\\GITREP\\python\\pyelftools\\scripts>D:\\GITREP\\python\\pyelftools\\scripts\\readelf.py\r\n> Traceback (most recent call last):\r\n>   File \"D:\\GITREP\\python\\pyelftools\\scripts\\readelf.py\", line 23, in <module>\r\n>     from elftools.elf.elffile import ELFFile\r\n>   File \"C:\\tools\\Python27\\lib\\site-packages\\elftools\\elf\\elffile.py\", line 15, in <module>\r\n>     if not resource.getpagesize:\r\n> AttributeError: 'module' object has no attribute 'getpagesize'\r\n\r\nThere is simple patch:\r\n```\r\ntry:\r\n    import resource\r\n++    if \"getpagesize\" not in dir(resource):\r\n++        raise ImportError\r\n    PAGESIZE = resource.getpagesize()\r\nexcept ImportError:\r\n    # Windows system\r\n    import mmap\r\n    PAGESIZE = mmap.PAGESIZE\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/122", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/122/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/122/events", "html_url": "https://github.com/eliben/pyelftools/issues/122", "id": 185304009, "node_id": "MDU6SXNzdWUxODUzMDQwMDk=", "number": 122, "title": "improve support for finding various offsets", "user": {"login": "brianmwaters", "id": 12619481, "node_id": "MDQ6VXNlcjEyNjE5NDgx", "avatar_url": "https://avatars3.githubusercontent.com/u/12619481?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianmwaters", "html_url": "https://github.com/brianmwaters", "followers_url": "https://api.github.com/users/brianmwaters/followers", "following_url": "https://api.github.com/users/brianmwaters/following{/other_user}", "gists_url": "https://api.github.com/users/brianmwaters/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianmwaters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianmwaters/subscriptions", "organizations_url": "https://api.github.com/users/brianmwaters/orgs", "repos_url": "https://api.github.com/users/brianmwaters/repos", "events_url": "https://api.github.com/users/brianmwaters/events{/privacy}", "received_events_url": "https://api.github.com/users/brianmwaters/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-26T05:58:00Z", "updated_at": "2017-05-29T20:42:41Z", "closed_at": "2017-05-29T20:42:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I came across this issue while reproducing the exploits in [1], which require knowing the offsets of dynamic tags, relocations, and other objects within their respective sections.\n\nCurrently, this can be done in client code using something like the following:\n\n```\ndef get_tag_offset(dynamic_section, n):\n    return dynamic_section.header['sh_offset'] + n * dynamic_section._tagsize\n```\n\nTagsize is marked for internal use, but can be gotten portably using `some_elffile.structs.Elf_Dyn.sizeof()`. However, the function above is not passed an ELFFile object. I think it's reasonable for client code to want to calculate offsets in this way without having been passed an ELFFile and without abusing internal attributes. At the very least, we might as well provide this functionality without forcing users to repeatedly implement functions like the one above.\n\nThe obvious solution to me is to add virtual address and offset attributes and `get_offset` methods to `Section`, `Relocation`, etc, so that an object's offset can be easily found without having access to the section or segment that contains it. However, this requires adding stuff in a number of places, so I want to see what people think before I submit a patch which touches most of the high-level API.\n\n[1] [How the ELF Ruined Christmas](https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/di-frederico)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/120", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/120/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/120/events", "html_url": "https://github.com/eliben/pyelftools/issues/120", "id": 183398196, "node_id": "MDU6SXNzdWUxODMzOTgxOTY=", "number": 120, "title": "Line2Addr Decoding", "user": {"login": "bernardnongpoh", "id": 3437606, "node_id": "MDQ6VXNlcjM0Mzc2MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3437606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernardnongpoh", "html_url": "https://github.com/bernardnongpoh", "followers_url": "https://api.github.com/users/bernardnongpoh/followers", "following_url": "https://api.github.com/users/bernardnongpoh/following{/other_user}", "gists_url": "https://api.github.com/users/bernardnongpoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernardnongpoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernardnongpoh/subscriptions", "organizations_url": "https://api.github.com/users/bernardnongpoh/orgs", "repos_url": "https://api.github.com/users/bernardnongpoh/repos", "events_url": "https://api.github.com/users/bernardnongpoh/events{/privacy}", "received_events_url": "https://api.github.com/users/bernardnongpoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-10-17T12:05:52Z", "updated_at": "2016-10-18T03:51:47Z", "closed_at": "2016-10-18T03:51:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there can this tool do Line2Addr decoding \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/119", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/119/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/119/events", "html_url": "https://github.com/eliben/pyelftools/issues/119", "id": 182225012, "node_id": "MDU6SXNzdWUxODIyMjUwMTI=", "number": 119, "title": "Error dump of .bss section", "user": {"login": "zhongsiz", "id": 7500679, "node_id": "MDQ6VXNlcjc1MDA2Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7500679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongsiz", "html_url": "https://github.com/zhongsiz", "followers_url": "https://api.github.com/users/zhongsiz/followers", "following_url": "https://api.github.com/users/zhongsiz/following{/other_user}", "gists_url": "https://api.github.com/users/zhongsiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongsiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongsiz/subscriptions", "organizations_url": "https://api.github.com/users/zhongsiz/orgs", "repos_url": "https://api.github.com/users/zhongsiz/repos", "events_url": "https://api.github.com/users/zhongsiz/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongsiz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-10-11T10:07:52Z", "updated_at": "2016-10-15T21:14:07Z", "closed_at": "2016-10-15T21:14:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "When dump `.bss` section by -x(byte) or -p(string), readelf.py will error generate content from other section.\n\n```\nzhongsiz@dinah:~/work/emittersvn> readelf.py -x .bss reloc.o.old\n\nHex dump of section '.bss':\n  0x00000000 0066756e 63315f5f 46760066 756e6332 .func1__Fv.func2\n  0x00000010 5f5f4676                            __Fv\n```\n\nIn object file (gcc compile with -c), `.bss` section have no content, the offset is conjoint with next section\n\n```\n[Nr] Name              Type             Address           Offset\n      Size              EntSize          Flags  Link  Info  Align\n...\n[ 4] .bss              NOBITS           0000000000000000  00000130\n      0000000000000014  0000000000000000  WA       0     0     4\n[ 5] .rodata           PROGBITS         0000000000000000  00000130\n      0000000000000000  0000000000000000   A       0     0     1\n```\n\nI think the bug results from error consider the size when dump section content.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/116", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/116/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/116/events", "html_url": "https://github.com/eliben/pyelftools/issues/116", "id": 175669045, "node_id": "MDU6SXNzdWUxNzU2NjkwNDU=", "number": 116, "title": "Retrieving relative address of a variable ", "user": {"login": "bernardnongpoh", "id": 3437606, "node_id": "MDQ6VXNlcjM0Mzc2MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3437606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernardnongpoh", "html_url": "https://github.com/bernardnongpoh", "followers_url": "https://api.github.com/users/bernardnongpoh/followers", "following_url": "https://api.github.com/users/bernardnongpoh/following{/other_user}", "gists_url": "https://api.github.com/users/bernardnongpoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernardnongpoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernardnongpoh/subscriptions", "organizations_url": "https://api.github.com/users/bernardnongpoh/orgs", "repos_url": "https://api.github.com/users/bernardnongpoh/repos", "events_url": "https://api.github.com/users/bernardnongpoh/events{/privacy}", "received_events_url": "https://api.github.com/users/bernardnongpoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-09-08T05:35:24Z", "updated_at": "2019-12-04T18:51:54Z", "closed_at": "2016-10-16T21:05:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello There, I am trying to retrieve the relative address of a variable,  is the following offset \n\n|DW_AT_location    :  AttributeValue(name='DW_AT_location', form='DW_FORM_exprloc', value=[145, 100], raw_value=[145, 100], offset=157) relative from EBP register\n\nThanks\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/113", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/113/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/113/events", "html_url": "https://github.com/eliben/pyelftools/issues/113", "id": 171880133, "node_id": "MDU6SXNzdWUxNzE4ODAxMzM=", "number": 113, "title": "CompileUnit: Track DIEs by offset", "user": {"login": "JonathonReinhart", "id": 1916566, "node_id": "MDQ6VXNlcjE5MTY1NjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1916566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonathonReinhart", "html_url": "https://github.com/JonathonReinhart", "followers_url": "https://api.github.com/users/JonathonReinhart/followers", "following_url": "https://api.github.com/users/JonathonReinhart/following{/other_user}", "gists_url": "https://api.github.com/users/JonathonReinhart/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonathonReinhart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonathonReinhart/subscriptions", "organizations_url": "https://api.github.com/users/JonathonReinhart/orgs", "repos_url": "https://api.github.com/users/JonathonReinhart/repos", "events_url": "https://api.github.com/users/JonathonReinhart/events{/privacy}", "received_events_url": "https://api.github.com/users/JonathonReinhart/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2016-08-18T11:34:01Z", "updated_at": "2020-04-22T00:02:09Z", "closed_at": "2019-12-13T23:41:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "DIEs refer to one another by their offset in the stream.\n\nFor example, a [`DW_TAG_typedef`](http://www.dwarfstd.org/doc/DWARF4.pdf#page=96) DIE will have  \"a `DW_AT_type` attribute whose value is a reference to the type named by the typedef.\"\n\nSo to get the actual type of a typedef DIE, I currently use something like this in my monkey-patched `CompileUnit` class:\n\n``` python\nimport elftools.dwarf.compileunit\nclass MyCompileUnit(elftools.dwarf.compileunit.CompileUnit):\n\n    def get_DIE_at_offset(self, offset):\n        for die in self.iter_DIEs():\n            if die.offset == offset:\n                return die \n        return None\n\nelftools.dwarf.compileunit.CompileUnit = MyCompileUnit\n```\n\nThis O(n) lookup is inefficient.\n\nCurrently, `CompileUnit` [stores all of the DIEs in a simple list](https://github.com/eliben/pyelftools/blob/60319cbb9d469e8d7c56e8f85dd55294c0ce4f62/elftools/dwarf/compileunit.py#L120).\n\nI propose instead (or also) storing them in a dictionary, using their `offset` as the key. This will be unique for all DIEs, and provide fast lookup via a new function like:\n\n``` python\ndef _get_DIE_by_offset(self, offset):\n    return self._diedict[offset]\n```\n\nSince the existing `_get_DIE` could be used by existing code (even though it is \"private\"), it makes sense to leave the existing infrastructure in place, and maintain this offset-lookup side-by-side.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/112", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/112/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/112/events", "html_url": "https://github.com/eliben/pyelftools/issues/112", "id": 171766358, "node_id": "MDU6SXNzdWUxNzE3NjYzNTg=", "number": 112, "title": "CompileUnit._parse_DIEs() misreads DIE size in rare instances", "user": {"login": "danharel", "id": 3460958, "node_id": "MDQ6VXNlcjM0NjA5NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3460958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danharel", "html_url": "https://github.com/danharel", "followers_url": "https://api.github.com/users/danharel/followers", "following_url": "https://api.github.com/users/danharel/following{/other_user}", "gists_url": "https://api.github.com/users/danharel/gists{/gist_id}", "starred_url": "https://api.github.com/users/danharel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danharel/subscriptions", "organizations_url": "https://api.github.com/users/danharel/orgs", "repos_url": "https://api.github.com/users/danharel/repos", "events_url": "https://api.github.com/users/danharel/events{/privacy}", "received_events_url": "https://api.github.com/users/danharel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-17T21:35:46Z", "updated_at": "2016-08-19T18:44:54Z", "closed_at": "2016-08-19T18:44:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n0x0010adc0:     TAG_base_type [11]  \nAT_name( \"uint32\" )\nAT_encoding( DW_ATE_unsigned )\nAT_byte_size( 0x04 )\nUnknown DW_AT constant: 0x2900( 0x0a )\n\n0x0010adcb:     TAG_base_type [11]  \nAT_name( \"uint8\" )\nAT_encoding( DW_ATE_unsigned )\nAT_byte_size( 0x01 )\nUnknown DW_AT constant: 0x2900( 0x08 )\n\n0x0010add5:     TAG_pointer_type [17]  \nAT_name( \"*runtime.typeAlg\" )\nAT_type( {0x000000000010adf0} ( runtime.typeAlg ) )\nUnknown DW_AT constant: 0x2900( 0x16 )\n\n0x0010adf0:     TAG_structure_type [21] *\nAT_name( \"runtime.typeAlg\" )\nAT_byte_size( 0x00000010 )\nUnknown DW_AT constant: 0x2900( 0x19 )\n\n0x0010ae03:         TAG_member [6]  \nAT_name( \"hash\" )\nAT_data_member_location( +0 )\nAT_type( {0x000000000010ae40} ( func(unsafe.Pointer, uintptr) uintptr ) )\n\n0x0010ae14:         TAG_member [6]  \nAT_name( \"equal\" )\nAT_data_member_location( +8 )\nAT_type( {0x000000000010aec6} ( func(unsafe.Pointer, unsafe.Pointer) bool ) )\n\n0x0010ae26:         NULL\n\n0x0010ae27:     TAG_typedef [22]  \nAT_name( \"runtime.typeAlg\" )\nAT_type( {0x000000000010adf0} ( runtime.typeAlg ) )\n```\n\nand the corresponding DIE output by pyelftools:\n\n```\n1093056 (0x10ADC0)\nDIE DW_TAG_base_type, size=11, has_chidren=False\n|DW_AT_name        :  AttributeValue(name='DW_AT_name', form='DW_FORM_string', value='uint32', raw_value='uint32', offset=1093057)\n|DW_AT_encoding    :  AttributeValue(name='DW_AT_encoding', form='DW_FORM_data1', value=7, raw_value=7, offset=1093064)\n|DW_AT_byte_size   :  AttributeValue(name='DW_AT_byte_size', form='DW_FORM_data1', value=4, raw_value=4, offset=1093065)\n|10496             :  AttributeValue(name=10496, form='DW_FORM_data1', value=10, raw_value=10, offset=1093066)\n\n1093067 (0x10ADCB)\nDIE DW_TAG_base_type, size=10, has_chidren=False\n|DW_AT_name        :  AttributeValue(name='DW_AT_name', form='DW_FORM_string', value='uint8', raw_value='uint8', offset=1093068)\n|DW_AT_encoding    :  AttributeValue(name='DW_AT_encoding', form='DW_FORM_data1', value=7, raw_value=7, offset=1093074)\n|DW_AT_byte_size   :  AttributeValue(name='DW_AT_byte_size', form='DW_FORM_data1', value=1, raw_value=1, offset=1093075)\n|10496             :  AttributeValue(name=10496, form='DW_FORM_data1', value=8, raw_value=8, offset=1093076)\n\n1093077 (0x10ADD5)\nDIE DW_TAG_pointer_type, size=23, has_chidren=False\n|DW_AT_name        :  AttributeValue(name='DW_AT_name', form='DW_FORM_string', value='*runtime.typeAlg', raw_value='*runtime.typeAlg', offset=1093078)\n|DW_AT_type        :  AttributeValue(name='DW_AT_type', form='DW_FORM_ref_addr', value=1093104, raw_value=1093104, offset=1093095)\n|10496             :  AttributeValue(name=10496, form='DW_FORM_data1', value=0, raw_value=0, offset=1093099)\n\n1093100 (0x10ADEC)\nDIE None, size=1, has_chidren=None\n\n1093101 (0x10ADED)\nDIE None, size=1, has_chidren=None\n\n1093102 (0x10ADEE)\nDIE None, size=1, has_chidren=None\n\n1093103 (0x10ADEF)\nDIE DW_TAG_typedef, size=22, has_chidren=False\n|DW_AT_name        :  AttributeValue(name='DW_AT_name', form='DW_FORM_string', value='\\x15runtime.typeAlg', raw_value='\\x15runtime.typeAlg', offset=1093104)\n|DW_AT_type        :  AttributeValue(name='DW_AT_type', form='DW_FORM_ref_addr', value=1745230096, raw_value=1745230096, offset=1093121)\n```\n\nNote that the size of the DIE at offset 0x10ADCB is read as 11 by dwarfdump, but 10 by pyelftools. It's also interesting to note that dwarfdump displays more information past that what I posted, whereas pyelftools stops here.\n\nThis misrepresentation of data begins with DIE 0x10ADCB, wherein pyelftools believes the next DIE starts 10 bytes later, when it really starts 11 bytes later. This misreading causes a chain of misreadings, resulting in this incorrect output.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/111", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/111/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/111/events", "html_url": "https://github.com/eliben/pyelftools/issues/111", "id": 171763349, "node_id": "MDU6SXNzdWUxNzE3NjMzNDk=", "number": 111, "title": "CompileUnit._parse_DIEs() misreads DIE size in rare instances", "user": {"login": "danharel", "id": 3460958, "node_id": "MDQ6VXNlcjM0NjA5NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3460958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danharel", "html_url": "https://github.com/danharel", "followers_url": "https://api.github.com/users/danharel/followers", "following_url": "https://api.github.com/users/danharel/following{/other_user}", "gists_url": "https://api.github.com/users/danharel/gists{/gist_id}", "starred_url": "https://api.github.com/users/danharel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danharel/subscriptions", "organizations_url": "https://api.github.com/users/danharel/orgs", "repos_url": "https://api.github.com/users/danharel/repos", "events_url": "https://api.github.com/users/danharel/events{/privacy}", "received_events_url": "https://api.github.com/users/danharel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-17T21:20:58Z", "updated_at": "2016-08-17T21:36:57Z", "closed_at": "2016-08-17T21:36:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n0x0010adc0:     TAG_base_type [11]  \nAT_name( \"uint32\" )\nAT_encoding( DW_ATE_unsigned )\nAT_byte_size( 0x04 )\nUnknown DW_AT constant: 0x2900( 0x0a )\n```\n\n0x0010adcb:     TAG_base_type [11]  \n                 AT_name( \"uint8\" )\n                 AT_encoding( DW_ATE_unsigned )\n                 AT_byte_size( 0x01 )\n                Unknown DW_AT constant: 0x2900( 0x08 )\n\n0x0010add5:     TAG_pointer_type [17]  \n                 AT_name( \"*runtime.typeAlg\" )\n                 AT_type( {0x000000000010adf0} ( runtime.typeAlg ) )\n                Unknown DW_AT constant: 0x2900( 0x16 )\n\n0x0010adf0:     TAG_structure_type [21] *\n                 AT_name( \"runtime.typeAlg\" )\n                 AT_byte_size( 0x00000010 )\n                Unknown DW_AT constant: 0x2900( 0x19 )\n\n0x0010ae03:         TAG_member [6]  \n                     AT_name( \"hash\" )\n                     AT_data_member_location( +0 )\n                     AT_type( {0x000000000010ae40} ( func(unsafe.Pointer, uintptr) uintptr ) )\n\n0x0010ae14:         TAG_member [6]  \n                     AT_name( \"equal\" )\n                     AT_data_member_location( +8 )\n                     AT_type( {0x000000000010aec6} ( func(unsafe.Pointer, unsafe.Pointer) bool ) )\n\n0x0010ae26:         NULL\n\n0x0010ae27:     TAG_typedef [22]  \n                 AT_name( \"runtime.typeAlg\" )\n                 AT_type( {0x000000000010adf0} ( runtime.typeAlg ) )\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/110", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/110/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/110/events", "html_url": "https://github.com/eliben/pyelftools/issues/110", "id": 171743212, "node_id": "MDU6SXNzdWUxNzE3NDMyMTI=", "number": 110, "title": "Issue with CompileUnit._parseDIEs()", "user": {"login": "danharel", "id": 3460958, "node_id": "MDQ6VXNlcjM0NjA5NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3460958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danharel", "html_url": "https://github.com/danharel", "followers_url": "https://api.github.com/users/danharel/followers", "following_url": "https://api.github.com/users/danharel/following{/other_user}", "gists_url": "https://api.github.com/users/danharel/gists{/gist_id}", "starred_url": "https://api.github.com/users/danharel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danharel/subscriptions", "organizations_url": "https://api.github.com/users/danharel/orgs", "repos_url": "https://api.github.com/users/danharel/repos", "events_url": "https://api.github.com/users/danharel/events{/privacy}", "received_events_url": "https://api.github.com/users/danharel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-17T19:43:39Z", "updated_at": "2016-08-17T20:47:34Z", "closed_at": "2016-08-17T20:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, the way that a CompileUnit finds all of the DIEs contained within itself is via the following code:\n\n```\n# Compute the boundary (one byte past the bounds) of this CU in the\n# stream\ncu_boundary = ( self.cu_offset +\n            self['unit_length'] +\n            self.structs.initial_length_field_size())\n\n# First pass: parse all DIEs and place them into self._dielist\ndie_offset = self.cu_die_offset\nwhile die_offset < cu_boundary:\n    die = DIE(\n        cu=self,\n        stream=self.dwarfinfo.debug_info_sec.stream,\n        offset=die_offset)\n    self._dielist.append(die)\n    die_offset += die.size\n```\n\nThis algorithm assumes that all DIE are aligned consecutively. That is, the next DIE starts where the current one ends. And this is fine for most cases. But I've run into an executable where this assumption does NOT hold true. Instead, there's one point where there's a single byte between one DIE and the next DIE . As a result, the second DIE doesn't get parsed properly. \n\nIs there any way that this can be fixed? Is this even a bug, or is it definitively an issue with the executable?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/106", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/106/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/106/events", "html_url": "https://github.com/eliben/pyelftools/issues/106", "id": 162331610, "node_id": "MDU6SXNzdWUxNjIzMzE2MTA=", "number": 106, "title": "High level functionalities", "user": {"login": "P1kachu", "id": 8723837, "node_id": "MDQ6VXNlcjg3MjM4Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/8723837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P1kachu", "html_url": "https://github.com/P1kachu", "followers_url": "https://api.github.com/users/P1kachu/followers", "following_url": "https://api.github.com/users/P1kachu/following{/other_user}", "gists_url": "https://api.github.com/users/P1kachu/gists{/gist_id}", "starred_url": "https://api.github.com/users/P1kachu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P1kachu/subscriptions", "organizations_url": "https://api.github.com/users/P1kachu/orgs", "repos_url": "https://api.github.com/users/P1kachu/repos", "events_url": "https://api.github.com/users/P1kachu/events{/privacy}", "received_events_url": "https://api.github.com/users/P1kachu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-26T15:06:06Z", "updated_at": "2016-06-27T13:50:51Z", "closed_at": "2016-06-27T13:50:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There is no high level functions to play with the DWARF symbols. You need to do everything from the original structures which is not always easy. Is this a personnal choice not to provide any or do you accept some high level pull request to enhance this ? (For example, utils to link structure declarations in code to easily access their member's values)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/103", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/103/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/103/events", "html_url": "https://github.com/eliben/pyelftools/issues/103", "id": 161024012, "node_id": "MDU6SXNzdWUxNjEwMjQwMTI=", "number": 103, "title": "Bug in interpreter of DW_CFA_remember_state", "user": {"login": "francesco-zappa-nardelli", "id": 16292191, "node_id": "MDQ6VXNlcjE2MjkyMTkx", "avatar_url": "https://avatars3.githubusercontent.com/u/16292191?v=4", "gravatar_id": "", "url": "https://api.github.com/users/francesco-zappa-nardelli", "html_url": "https://github.com/francesco-zappa-nardelli", "followers_url": "https://api.github.com/users/francesco-zappa-nardelli/followers", "following_url": "https://api.github.com/users/francesco-zappa-nardelli/following{/other_user}", "gists_url": "https://api.github.com/users/francesco-zappa-nardelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/francesco-zappa-nardelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/francesco-zappa-nardelli/subscriptions", "organizations_url": "https://api.github.com/users/francesco-zappa-nardelli/orgs", "repos_url": "https://api.github.com/users/francesco-zappa-nardelli/repos", "events_url": "https://api.github.com/users/francesco-zappa-nardelli/events{/privacy}", "received_events_url": "https://api.github.com/users/francesco-zappa-nardelli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-06-18T13:10:53Z", "updated_at": "2018-03-06T13:16:42Z", "closed_at": "2018-03-06T13:16:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all\n\nI believe there is a small bug in the interpreter of DW_CFA_remember_state.  The interpreter pushes the current line on a stack, but, due to sharing, subsequent bytecode instructions can modify the pushed line whenever they modify the current line.\n\nFor instance, this FDE entry:\n\n00000088 000000000000001c 0000005c FDE cie=00000030 pc= 0000000000400980.. 00000000004009d1\n  DW_CFA_advance_loc: 4 to 0000000000400984\n  DW_CFA_def_cfa_offset: 24\n  DW_CFA_advance_loc1: 64 to 00000000004009c4\n  DW_CFA_remember_state\n  DW_CFA_def_cfa_offset: 8\n  DW_CFA_advance_loc: 4 to 00000000004009c8\n  DW_CFA_restore_state\n\nshould generate:\n\n00000060 000000000000001c 00000034 FDE cie=00000030 pc=0000000000400980..00000000004009d1\n   LOC           CFA      ra\n0000000000400980 rsp+8    c-8\n0000000000400984 rsp+24   c-8\n00000000004009c4 rsp+8    c-8\n00000000004009c8 rsp+24   c-8\n\n (observe the last +24, due to remembering the line for 400984), while it results in:\n\n00000060 000000000000001c 0000000000000034 FDE cie=00000030 pc=0000000000400980..00000000004009d1\n   LOC   CFA      ra\n0000000000400980 rsp+8    c-8\n0000000000400984 rsp+24   c-8\n00000000004009c4 rsp+8    c-8\n00000000004009c8 rsp+8    c-8\n\nThe final +8 is due due the update to the current line in 4009c4.  \n\nI believe that deep-copying the current line before pushing it on the stack + updating the pc when pulling is a simple fix (patch below).\n\nI cannot submit you a binary to reproduce easily as the FDE entry was obtained by parsing eh_frame info via an eh_frame parser I implemented (that I will eventually contribute to pyelftools) and not by parsing debug_frames.\n\n-francesco\n\n```\nIndex: pyelftools/elftools/dwarf/callframe.py\n===================================================================\n--- pyelftools/elftools/dwarf/callframe.py  (original)\n+++ pyelftools/elftools/dwarf/callframe.py  (working copy)\n@@ -501,9 +501,11 @@\n                 else:\n                     cur_line.pop(instr.args[0], None)\n             elif name == 'DW_CFA_remember_state':\n-                line_stack.append(cur_line)\n+                line_stack.append(copy.deepcopy(cur_line))\n             elif name == 'DW_CFA_restore_state':\n+                pc = cur_line['pc'] \n                 cur_line = line_stack.pop()\n+                cur_line['pc'] = pc\n\n         # The current line is appended to the table after all instructions\n         # have ended, in any case (even if there were no instructions).\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/100", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/100/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/100/events", "html_url": "https://github.com/eliben/pyelftools/issues/100", "id": 156326758, "node_id": "MDU6SXNzdWUxNTYzMjY3NTg=", "number": 100, "title": "Support compressed debug info sections.", "user": {"login": "ttsugriy", "id": 172294, "node_id": "MDQ6VXNlcjE3MjI5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/172294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ttsugriy", "html_url": "https://github.com/ttsugriy", "followers_url": "https://api.github.com/users/ttsugriy/followers", "following_url": "https://api.github.com/users/ttsugriy/following{/other_user}", "gists_url": "https://api.github.com/users/ttsugriy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ttsugriy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ttsugriy/subscriptions", "organizations_url": "https://api.github.com/users/ttsugriy/orgs", "repos_url": "https://api.github.com/users/ttsugriy/repos", "events_url": "https://api.github.com/users/ttsugriy/events{/privacy}", "received_events_url": "https://api.github.com/users/ttsugriy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-23T17:51:35Z", "updated_at": "2016-10-16T21:08:14Z", "closed_at": "2016-10-16T21:08:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "elffile.py currently assumes that all debug related sections are start with .debug\\* but objcopy --compress-debug-sections renames them by adding 'z' prefix, so instead of .debug_info, the section becomes .zdebug_info.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/97", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/97/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/97/events", "html_url": "https://github.com/eliben/pyelftools/issues/97", "id": 134647491, "node_id": "MDU6SXNzdWUxMzQ2NDc0OTE=", "number": 97, "title": "Problem with _data_member_location_extra", "user": {"login": "bseifers", "id": 17010558, "node_id": "MDQ6VXNlcjE3MDEwNTU4", "avatar_url": "https://avatars2.githubusercontent.com/u/17010558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bseifers", "html_url": "https://github.com/bseifers", "followers_url": "https://api.github.com/users/bseifers/followers", "following_url": "https://api.github.com/users/bseifers/following{/other_user}", "gists_url": "https://api.github.com/users/bseifers/gists{/gist_id}", "starred_url": "https://api.github.com/users/bseifers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bseifers/subscriptions", "organizations_url": "https://api.github.com/users/bseifers/orgs", "repos_url": "https://api.github.com/users/bseifers/repos", "events_url": "https://api.github.com/users/bseifers/events{/privacy}", "received_events_url": "https://api.github.com/users/bseifers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-02-18T17:49:33Z", "updated_at": "2017-02-04T17:09:02Z", "closed_at": "2017-02-04T17:09:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got a python error when running readelf.py on a basic demo C file. I was able to debug it and put a kludge in your code to work around it, but you probably know a better way to make a more permanent fix.\n\nTo recreate the problem, create a hello.out file using the source files I have included (hello.c/h):\ngcc -g -o hello.out hello.c\n(or just use the .out file I have submitted)\n\nThen run \nreadelf.py --debug-dump=info hello.out\nwhich gives the following python error: \n\nTraceback (most recent call last):\n  File \"readelf.py\", line 1177, in <module>\n    main()\n  File \"readelf.py\", line 1156, in main\n    readelf.display_debug_dump(options.debug_dump_what)\n  File \"readelf.py\", line 658, in display_debug_dump\n    self._dump_debug_info()\n  File \"readelf.py\", line 880, in _dump_debug_info\n    attr, die, section_offset)))\n  File \"/home/bseifers/.local/lib/python2.6/site-packages/elftools/dwarf/descriptions.py\", line 38, in describe_attr_value\n    extra_info = extra_info_func(attr, die, section_offset)\n  File \"/home/bseifers/.local/lib/python2.6/site-packages/elftools/dwarf/descriptions.py\", line 442, in _data_member_location_extra\n    return describe_DWARF_expr(attr.value, die.cu.structs)\n  File \"/home/bseifers/.local/lib/python2.6/site-packages/elftools/dwarf/descriptions.py\", line 149, in describe_DWARF_expr\n    dwarf_expr_dumper.process_expr(expr)\n  File \"/home/bseifers/.local/lib/python2.6/site-packages/elftools/dwarf/dwarf_expr.py\", line 119, in process_expr\n    self.stream = BytesIO(bytelist2string(expr))\n  File \"/home/bseifers/.local/lib/python2.6/site-packages/elftools/common/utils.py\", line 19, in bytelist2string\n    return b''.join(int2byte(b) for b in bytelist)\nTypeError: 'int' object is not iterable\n\nI was able to fix the problem by modifying elftools/dwarf/descriptions.py as follows\n\ndef _data_member_location_extra(attr, die, section_offset):\n    # According to section 5.5.6 of the DWARF spec v4, a data member location\n    # can be an integer offset, or a location description.\n    #\n    if attr.form in ('DW_FORM_data1', 'DW_FORM_data2',\n                     'DW_FORM_data4', 'DW_FORM_data8'):\n        return ''  # No extra description needed\n# Start bseifers kludge\n\n```\nelif attr.form in ('DW_FORM_sdata'):\nreturn str(attr.value)\n```\n# End bseifers kludge\n\n```\nelse:\n    return describe_DWARF_expr(attr.value, die.cu.structs)\n```\n\nI'm having trouble attaching the C files, so I'll include the source text here:\n\nhello.c:\n# include <stdio.h>\n# include \"hello.h\"\n\nconst int GLOBAL_CONST;\n\nint tryGlobal;\nstruct def hiLo;\n\nint main()\n{\n    int abc;\n    printf(\"Hello World\\n\");\n    return 0;\n}\n\nhello.h:\n# ifndef hello_h\n# define hello_h\n\nstruct def\n{\n    int ijk;\n    char c;\n    long long lint;\n    float mno;\n    int bit1 : 1;\n    int bit3 : 3;\n    int bit2 : 2;\n    int bit4 : 4;\n//};\n}**attribute**((**packed**));\n# endif\n\nfile:///home/bseifers/hello.c\nfile:///home/bseifers/hello.h\nfile:///home/bseifers/hello.out\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/95", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/95/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/95/events", "html_url": "https://github.com/eliben/pyelftools/issues/95", "id": 128388125, "node_id": "MDU6SXNzdWUxMjgzODgxMjU=", "number": 95, "title": "List callable function in shared library", "user": {"login": "techtonik", "id": 515889, "node_id": "MDQ6VXNlcjUxNTg4OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/515889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/techtonik", "html_url": "https://github.com/techtonik", "followers_url": "https://api.github.com/users/techtonik/followers", "following_url": "https://api.github.com/users/techtonik/following{/other_user}", "gists_url": "https://api.github.com/users/techtonik/gists{/gist_id}", "starred_url": "https://api.github.com/users/techtonik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/techtonik/subscriptions", "organizations_url": "https://api.github.com/users/techtonik/orgs", "repos_url": "https://api.github.com/users/techtonik/repos", "events_url": "https://api.github.com/users/techtonik/events{/privacy}", "received_events_url": "https://api.github.com/users/techtonik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-24T11:04:21Z", "updated_at": "2016-01-27T07:57:09Z", "closed_at": "2016-01-25T12:51:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to use `pyelftools` to list functions from shared library? For example:\n\n```\n#include <stdio.h>\n\nvoid hello() {\n    printf(\"hello()\\n\");\n}\n```\n\n```\n$ readelf.py <--magic-option> ./libhello.so\nhello\n```\n\nThe best output I could find is with `nm -D`:\n\n```\n$ nm -D --defined-only libhello.so                                                              \n0000000000201038 B __bss_start\n0000000000201038 D _edata\n0000000000201040 B _end\n00000000000006d8 T _fini\n0000000000000578 T _init\n00000000000006c5 T hello\n```\n\nbut as you may see, there is a lot of excessive stuff here.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/93", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/93/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/93/events", "html_url": "https://github.com/eliben/pyelftools/issues/93", "id": 121655751, "node_id": "MDU6SXNzdWUxMjE2NTU3NTE=", "number": 93, "title": "Incorrect parsing of CORE types", "user": {"login": "zachriggle", "id": 111640, "node_id": "MDQ6VXNlcjExMTY0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/111640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zachriggle", "html_url": "https://github.com/zachriggle", "followers_url": "https://api.github.com/users/zachriggle/followers", "following_url": "https://api.github.com/users/zachriggle/following{/other_user}", "gists_url": "https://api.github.com/users/zachriggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/zachriggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zachriggle/subscriptions", "organizations_url": "https://api.github.com/users/zachriggle/orgs", "repos_url": "https://api.github.com/users/zachriggle/repos", "events_url": "https://api.github.com/users/zachriggle/events{/privacy}", "received_events_url": "https://api.github.com/users/zachriggle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462735841, "node_id": "MDU6TGFiZWw0NjI3MzU4NDE=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/patches-welcome", "name": "patches-welcome", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2015-12-11T07:39:15Z", "updated_at": "2017-07-07T12:04:35Z", "closed_at": "2017-07-07T12:04:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "CORE files use notes to store register information.  In particular, NT_GNU_ABI_TAG and NT_PRSTATUS are the same value.\n\nCurrently, `pyelftools` assumes the former and discards the [data stream](https://github.com/eliben/pyelftools/blob/d7aec6aba2cfed93e69dfe177cc161ccab42f15c/elftools/elf/segments.py#L127).\n\nThis should not be done when `elftype` is `\"CORE\"`.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/83", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/83/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/83/events", "html_url": "https://github.com/eliben/pyelftools/issues/83", "id": 102924959, "node_id": "MDU6SXNzdWUxMDI5MjQ5NTk=", "number": 83, "title": "Parsing 12 Mb of DIE's takes 1 minute", "user": {"login": "nklacar", "id": 6211792, "node_id": "MDQ6VXNlcjYyMTE3OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6211792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nklacar", "html_url": "https://github.com/nklacar", "followers_url": "https://api.github.com/users/nklacar/followers", "following_url": "https://api.github.com/users/nklacar/following{/other_user}", "gists_url": "https://api.github.com/users/nklacar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nklacar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nklacar/subscriptions", "organizations_url": "https://api.github.com/users/nklacar/orgs", "repos_url": "https://api.github.com/users/nklacar/repos", "events_url": "https://api.github.com/users/nklacar/events{/privacy}", "received_events_url": "https://api.github.com/users/nklacar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-08-25T00:59:06Z", "updated_at": "2020-02-04T14:36:42Z", "closed_at": "2020-02-04T14:36:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi , \n\nPerformance seems pretty poor when parsing an entire DWARF section for an elf. The DWARF size is about 12 meg and parsing takes 1 minute. \n\nAttaching perf call graph. Commercial debuggers are able to parse the dwarf in < 2 seconds.  \n\nRepeatUntil parse method seems to be eating most the time. Is it the object copying that is taking too long? \n\nAny suggestion on how to speed up performance? \n\n![output2](https://cloud.githubusercontent.com/assets/6211792/9456199/4e608e30-4a89-11e5-8818-5eb9753db46b.png)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/81", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/81/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/81/events", "html_url": "https://github.com/eliben/pyelftools/issues/81", "id": 101277100, "node_id": "MDU6SXNzdWUxMDEyNzcxMDA=", "number": 81, "title": "DWARF V4 Line Programs not supported", "user": {"login": "tustvold", "id": 1781103, "node_id": "MDQ6VXNlcjE3ODExMDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1781103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tustvold", "html_url": "https://github.com/tustvold", "followers_url": "https://api.github.com/users/tustvold/followers", "following_url": "https://api.github.com/users/tustvold/following{/other_user}", "gists_url": "https://api.github.com/users/tustvold/gists{/gist_id}", "starred_url": "https://api.github.com/users/tustvold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tustvold/subscriptions", "organizations_url": "https://api.github.com/users/tustvold/orgs", "repos_url": "https://api.github.com/users/tustvold/repos", "events_url": "https://api.github.com/users/tustvold/events{/privacy}", "received_events_url": "https://api.github.com/users/tustvold/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-08-16T16:02:41Z", "updated_at": "2015-08-25T12:12:44Z", "closed_at": "2015-08-25T12:12:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The current code doesn't support DWARF v4 Line program headers, specifically it doesn't understand the maximum_operations_per_instruction field resulting in everything getting out of alignment and the program crashing out.\n\nI have a fix for this on my work laptop which I could push if desired?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/77", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/77/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/77/events", "html_url": "https://github.com/eliben/pyelftools/issues/77", "id": 85732917, "node_id": "MDU6SXNzdWU4NTczMjkxNw==", "number": 77, "title": "UnicodeDecodeError with python 3.4.3 on OS X", "user": {"login": "liudangyi", "id": 1825485, "node_id": "MDQ6VXNlcjE4MjU0ODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1825485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liudangyi", "html_url": "https://github.com/liudangyi", "followers_url": "https://api.github.com/users/liudangyi/followers", "following_url": "https://api.github.com/users/liudangyi/following{/other_user}", "gists_url": "https://api.github.com/users/liudangyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/liudangyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liudangyi/subscriptions", "organizations_url": "https://api.github.com/users/liudangyi/orgs", "repos_url": "https://api.github.com/users/liudangyi/repos", "events_url": "https://api.github.com/users/liudangyi/events{/privacy}", "received_events_url": "https://api.github.com/users/liudangyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-06-06T10:05:49Z", "updated_at": "2015-06-07T16:02:22Z", "closed_at": "2015-06-07T16:02:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n$ python\nPython 3.4.3 (default, Feb 25 2015, 21:28:45) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from elftools.elf.elffile import ELFFile\n>>> e = ELFFile(open(\"some_elf_file\"))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python3.4/site-packages/elftools/elf/elffile.py\", line 50, in __init__\n    self._identify_file()\n  File \"/usr/local/lib/python3.4/site-packages/elftools/elf/elffile.py\", line 200, in _identify_file\n    magic = self.stream.read(4)\n  File \"/usr/local/Cellar/python3/3.4.3/Frameworks/Python.framework/Versions/3.4/lib/python3.4/codecs.py\", line 319, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode bytes in position 32-33: invalid continuation byte\n```\n\nThere's no such an error with python 2.7.10.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/72", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/72/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/72/events", "html_url": "https://github.com/eliben/pyelftools/issues/72", "id": 71985108, "node_id": "MDU6SXNzdWU3MTk4NTEwOA==", "number": 72, "title": "Need way to determine raw value of enum", "user": {"login": "dcolascione", "id": 331322, "node_id": "MDQ6VXNlcjMzMTMyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/331322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcolascione", "html_url": "https://github.com/dcolascione", "followers_url": "https://api.github.com/users/dcolascione/followers", "following_url": "https://api.github.com/users/dcolascione/following{/other_user}", "gists_url": "https://api.github.com/users/dcolascione/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcolascione/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcolascione/subscriptions", "organizations_url": "https://api.github.com/users/dcolascione/orgs", "repos_url": "https://api.github.com/users/dcolascione/repos", "events_url": "https://api.github.com/users/dcolascione/events{/privacy}", "received_events_url": "https://api.github.com/users/dcolascione/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 42772930, "node_id": "MDU6TGFiZWw0Mjc3MjkzMA==", "url": "https://api.github.com/repos/eliben/pyelftools/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-29T20:43:01Z", "updated_at": "2016-10-26T03:17:38Z", "closed_at": "2016-10-26T03:17:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Today, when we decode ELF enum fields, we represent the decoded value as a string. There's no easy way to recover the _numeric_ value from which that string was built. Instead of using str directly, we should subclass str and provide an attribute on the subclasses object that contains the original, un-decoded value.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/71", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/71/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/71/events", "html_url": "https://github.com/eliben/pyelftools/issues/71", "id": 71960170, "node_id": "MDU6SXNzdWU3MTk2MDE3MA==", "number": 71, "title": "Non-determinism of dict enumeration results in non-deterministic parsing", "user": {"login": "dcolascione", "id": 331322, "node_id": "MDQ6VXNlcjMzMTMyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/331322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcolascione", "html_url": "https://github.com/dcolascione", "followers_url": "https://api.github.com/users/dcolascione/followers", "following_url": "https://api.github.com/users/dcolascione/following{/other_user}", "gists_url": "https://api.github.com/users/dcolascione/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcolascione/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcolascione/subscriptions", "organizations_url": "https://api.github.com/users/dcolascione/orgs", "repos_url": "https://api.github.com/users/dcolascione/repos", "events_url": "https://api.github.com/users/dcolascione/events{/privacy}", "received_events_url": "https://api.github.com/users/dcolascione/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 42772928, "node_id": "MDU6TGFiZWw0Mjc3MjkyOA==", "url": "https://api.github.com/repos/eliben/pyelftools/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-04-29T19:05:28Z", "updated_at": "2018-01-15T22:33:56Z", "closed_at": "2018-01-15T22:33:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "If we enumerate the segments of an ARM EABI ELF file and print the p_type field of each, we print different results on different runs with the same input. Both PT_ARM_UNWIND and PT_AARCH64_UNWIND have the value 0x70000001; we decode this value using the Enum facility of the Construct library. Depending on the order in which we enumerate the ENUM_P_TYPE entries, Enum can prefer either PT_ARM_UNWIND or PT_AARCH64_UNWIND.\n\nEnumeration mappings we provide to Construct should never be ambiguous!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/70", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/70/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/70/events", "html_url": "https://github.com/eliben/pyelftools/issues/70", "id": 71067194, "node_id": "MDU6SXNzdWU3MTA2NzE5NA==", "number": 70, "title": "license mismatch in elftools.construct", "user": {"login": "thinred", "id": 502560, "node_id": "MDQ6VXNlcjUwMjU2MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/502560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thinred", "html_url": "https://github.com/thinred", "followers_url": "https://api.github.com/users/thinred/followers", "following_url": "https://api.github.com/users/thinred/following{/other_user}", "gists_url": "https://api.github.com/users/thinred/gists{/gist_id}", "starred_url": "https://api.github.com/users/thinred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thinred/subscriptions", "organizations_url": "https://api.github.com/users/thinred/orgs", "repos_url": "https://api.github.com/users/thinred/repos", "events_url": "https://api.github.com/users/thinred/events{/privacy}", "received_events_url": "https://api.github.com/users/thinred/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-04-26T13:28:20Z", "updated_at": "2015-04-26T22:21:17Z", "closed_at": "2015-04-26T22:21:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\nI noticed that elftools.construct is a 3rd party library which is, as far as I can tell, under MIT license. This is confusing and quite probably violation of license terms, since the main LICENSE file claims the code to be public domain.\n\nCheers,\nTomasz\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/67", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/67/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/67/events", "html_url": "https://github.com/eliben/pyelftools/issues/67", "id": 58473441, "node_id": "MDU6SXNzdWU1ODQ3MzQ0MQ==", "number": 67, "title": "Rename readelf.py to pyreadelf (or something similar)", "user": {"login": "thinred", "id": 502560, "node_id": "MDQ6VXNlcjUwMjU2MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/502560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thinred", "html_url": "https://github.com/thinred", "followers_url": "https://api.github.com/users/thinred/followers", "following_url": "https://api.github.com/users/thinred/following{/other_user}", "gists_url": "https://api.github.com/users/thinred/gists{/gist_id}", "starred_url": "https://api.github.com/users/thinred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thinred/subscriptions", "organizations_url": "https://api.github.com/users/thinred/orgs", "repos_url": "https://api.github.com/users/thinred/repos", "events_url": "https://api.github.com/users/thinred/events{/privacy}", "received_events_url": "https://api.github.com/users/thinred/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-21T20:21:48Z", "updated_at": "2015-02-22T16:18:11Z", "closed_at": "2015-02-22T16:18:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI'm preparing the package for Debian and there is this rule that programs in /usr/bin should not have extension (https://lintian.debian.org/tags/script-with-language-extension.html). I propose to change it to pyreadelf - I'll prepare a PR if you agree.\n\nCheers,\nTomasz\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/66", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/66/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/66/events", "html_url": "https://github.com/eliben/pyelftools/issues/66", "id": 58239357, "node_id": "MDU6SXNzdWU1ODIzOTM1Nw==", "number": 66, "title": "C++ name demangling", "user": {"login": "mobiphil", "id": 141859, "node_id": "MDQ6VXNlcjE0MTg1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/141859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mobiphil", "html_url": "https://github.com/mobiphil", "followers_url": "https://api.github.com/users/mobiphil/followers", "following_url": "https://api.github.com/users/mobiphil/following{/other_user}", "gists_url": "https://api.github.com/users/mobiphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/mobiphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mobiphil/subscriptions", "organizations_url": "https://api.github.com/users/mobiphil/orgs", "repos_url": "https://api.github.com/users/mobiphil/repos", "events_url": "https://api.github.com/users/mobiphil/events{/privacy}", "received_events_url": "https://api.github.com/users/mobiphil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-02-19T17:21:04Z", "updated_at": "2015-02-20T13:43:32Z", "closed_at": "2015-02-20T13:43:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \n\nso far I know you are interested in the C++ world. Was looking for a python elf reader and bumped into this project. Having seen your blog, had also the hope to find C++ demangling in your library, but unfortunately it is not the case. Are you planning to implement something in this direction or you would just use the libiberty implementation.\n\nAnyway thanks for the great source code.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/61", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/61/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/61/events", "html_url": "https://github.com/eliben/pyelftools/issues/61", "id": 54740861, "node_id": "MDU6SXNzdWU1NDc0MDg2MQ==", "number": 61, "title": "describe_DWARF_expr() raises on some inputs.", "user": {"login": "scudette", "id": 3856546, "node_id": "MDQ6VXNlcjM4NTY1NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3856546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scudette", "html_url": "https://github.com/scudette", "followers_url": "https://api.github.com/users/scudette/followers", "following_url": "https://api.github.com/users/scudette/following{/other_user}", "gists_url": "https://api.github.com/users/scudette/gists{/gist_id}", "starred_url": "https://api.github.com/users/scudette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scudette/subscriptions", "organizations_url": "https://api.github.com/users/scudette/orgs", "repos_url": "https://api.github.com/users/scudette/repos", "events_url": "https://api.github.com/users/scudette/events{/privacy}", "received_events_url": "https://api.github.com/users/scudette/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 462734522, "node_id": "MDU6TGFiZWw0NjI3MzQ1MjI=", "url": "https://api.github.com/repos/eliben/pyelftools/labels/pending-user-input", "name": "pending-user-input", "color": "fef2c0", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-01-19T09:15:14Z", "updated_at": "2020-02-04T14:35:34Z", "closed_at": "2020-02-04T14:35:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n$ python scripts/readelf.py --debug-dump=info /tmp/module_dwarf.ko \n....\n <2><359>: Abbrev Number: 13 (DW_TAG_member)\n    <35a>   DW_AT_name        : (indirect string, offset: 0xab00): counter  \n    <35e>   DW_AT_decl_file   : 5   \n    <35f>   DW_AT_decl_line   : 176 \n    <360>   DW_AT_type        : <0x70>  \nTraceback (most recent call last):\n  File \"scripts/readelf.py\", line 1170, in <module>\n    main()\n  File \"scripts/readelf.py\", line 1149, in main\n    readelf.display_debug_dump(options.debug_dump_what)\n  File \"scripts/readelf.py\", line 658, in display_debug_dump\n    self._dump_debug_info()\n  File \"scripts/readelf.py\", line 881, in _dump_debug_info\n    attr, die, section_offset)))\n  File \"./elftools/dwarf/descriptions.py\", line 38, in describe_attr_value\n    extra_info = extra_info_func(attr, die, section_offset)\n  File \"./elftools/dwarf/descriptions.py\", line 388, in _location_list_extra\n    return describe_DWARF_expr(attr.value, die.cu.structs)\n  File \"./elftools/dwarf/descriptions.py\", line 149, in describe_DWARF_expr\n    dwarf_expr_dumper.process_expr(expr)\n  File \"./elftools/dwarf/dwarf_expr.py\", line 119, in process_expr\n    self.stream = BytesIO(bytelist2string(expr))\n  File \"./elftools/common/utils.py\", line 19, in bytelist2string\n    return b''.join(int2byte(b) for b in bytelist)\nTypeError: 'int' object is not iterable\n```\n\nThe sample file is at:\nhttps://drive.google.com/file/d/0B9hc84IflFGbSDJ5NnNQRFotZDA/view?usp=sharing\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/59", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/59/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/59/events", "html_url": "https://github.com/eliben/pyelftools/issues/59", "id": 51302563, "node_id": "MDU6SXNzdWU1MTMwMjU2Mw==", "number": 59, "title": "Over broad exception catching (except Exception)", "user": {"login": "joneskoo", "id": 305104, "node_id": "MDQ6VXNlcjMwNTEwNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/305104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joneskoo", "html_url": "https://github.com/joneskoo", "followers_url": "https://api.github.com/users/joneskoo/followers", "following_url": "https://api.github.com/users/joneskoo/following{/other_user}", "gists_url": "https://api.github.com/users/joneskoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/joneskoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joneskoo/subscriptions", "organizations_url": "https://api.github.com/users/joneskoo/orgs", "repos_url": "https://api.github.com/users/joneskoo/repos", "events_url": "https://api.github.com/users/joneskoo/events{/privacy}", "received_events_url": "https://api.github.com/users/joneskoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-12-08T13:38:47Z", "updated_at": "2014-12-08T16:09:37Z", "closed_at": "2014-12-08T16:09:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an issue where I'm running pyelftools and need to interrupt processing. I'm calling pyelftools from a Celery task. Celery cancels tasks by raising an celery.exceptions.Terminated exception. pyelftools unfortunately catches this and as a result, my task does not get cancelled.\n\nAs a fix, all occurences of except Exception should be changed to catch more specific exceptions, such as IOError, ValueError etc.\n\nI did not track which of the exceptions I'm hitting yet, but here's one example of offending try-except: https://github.com/eliben/pyelftools/blob/master/elftools/construct/core.py#L352\n\nAny chance someone familiar with the pyelftools internals could determine which exceptions actually need to be caught and make the changes? Here's a list.\n\n```\n$ git grep --line-number \"except Exception\"\nelftools/construct/core.py:238:        except Exception as e:\nelftools/construct/core.py:352:        except Exception as ex:\nelftools/construct/core.py:357:        except Exception as ex:\nelftools/construct/core.py:903:                except Exception:\nelftools/construct/debug.py:113:        except Exception:\nelftools/construct/debug.py:124:        except Exception:\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/57", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/57/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/57/events", "html_url": "https://github.com/eliben/pyelftools/issues/57", "id": 47841978, "node_id": "MDU6SXNzdWU0Nzg0MTk3OA==", "number": 57, "title": "Arm abbrev_code", "user": {"login": "claude80", "id": 9572313, "node_id": "MDQ6VXNlcjk1NzIzMTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/9572313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claude80", "html_url": "https://github.com/claude80", "followers_url": "https://api.github.com/users/claude80/followers", "following_url": "https://api.github.com/users/claude80/following{/other_user}", "gists_url": "https://api.github.com/users/claude80/gists{/gist_id}", "starred_url": "https://api.github.com/users/claude80/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claude80/subscriptions", "organizations_url": "https://api.github.com/users/claude80/orgs", "repos_url": "https://api.github.com/users/claude80/repos", "events_url": "https://api.github.com/users/claude80/events{/privacy}", "received_events_url": "https://api.github.com/users/claude80/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-11-05T14:34:10Z", "updated_at": "2017-02-04T17:10:46Z", "closed_at": "2017-02-04T17:10:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\n\nit seems that with arm binary the abbrev_code is wrong, pyelftools catchs only the last byte, the abbrev_code is on 2 bytes.\n\nex:\n <1><6a126>: Abbrev Number: 6 (DW_TAG_typedef)\n\nDW_TAG_typedef is 0x16\n\nCheers,\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/52", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/52/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/52/events", "html_url": "https://github.com/eliben/pyelftools/issues/52", "id": 41924545, "node_id": "MDU6SXNzdWU0MTkyNDU0NQ==", "number": 52, "title": "Easy way to get the binary image", "user": {"login": "vanmierlo", "id": 3007095, "node_id": "MDQ6VXNlcjMwMDcwOTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3007095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vanmierlo", "html_url": "https://github.com/vanmierlo", "followers_url": "https://api.github.com/users/vanmierlo/followers", "following_url": "https://api.github.com/users/vanmierlo/following{/other_user}", "gists_url": "https://api.github.com/users/vanmierlo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vanmierlo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vanmierlo/subscriptions", "organizations_url": "https://api.github.com/users/vanmierlo/orgs", "repos_url": "https://api.github.com/users/vanmierlo/repos", "events_url": "https://api.github.com/users/vanmierlo/events{/privacy}", "received_events_url": "https://api.github.com/users/vanmierlo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-09-04T11:25:02Z", "updated_at": "2014-09-08T14:00:29Z", "closed_at": "2014-09-07T01:26:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nIs there an easy way to get the binary image from an ELF file to be programmed into a microcontroller flash? I currently have a bootloader written in python based on IntelHex to send an intel hex file to an ARM Cortex-M microcontroller. But I would like to extend it to support ELF files. Is there something like this available or do I have to start writing it myself?\n\nI would have asked this on a forum or mailing list if I could find one, but I only found this issue tracker. My apologies if I'm using the wrong channel for asking questions.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/50", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/50/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/50/events", "html_url": "https://github.com/eliben/pyelftools/issues/50", "id": 41064964, "node_id": "MDU6SXNzdWU0MTA2NDk2NA==", "number": 50, "title": "Problem in Evaluating Dwarf Location Expression", "user": {"login": "sivakrishna523", "id": 5499296, "node_id": "MDQ6VXNlcjU0OTkyOTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5499296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sivakrishna523", "html_url": "https://github.com/sivakrishna523", "followers_url": "https://api.github.com/users/sivakrishna523/followers", "following_url": "https://api.github.com/users/sivakrishna523/following{/other_user}", "gists_url": "https://api.github.com/users/sivakrishna523/gists{/gist_id}", "starred_url": "https://api.github.com/users/sivakrishna523/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sivakrishna523/subscriptions", "organizations_url": "https://api.github.com/users/sivakrishna523/orgs", "repos_url": "https://api.github.com/users/sivakrishna523/repos", "events_url": "https://api.github.com/users/sivakrishna523/events{/privacy}", "received_events_url": "https://api.github.com/users/sivakrishna523/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-08-25T14:13:59Z", "updated_at": "2017-02-04T17:11:23Z", "closed_at": "2017-02-04T17:11:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n  I want to evaluate the DW_AT_Location attribute.\nSo, first I intialiazed Compile unit and then I instantiated GenericExprVisitor object and then using that reference, calling process_expr(value) procedure. But it is retuning 'none' every time.\n\nCode flow is as follows\n\nGet CU instance\nGref = GenericExprVisitor(CU.structs)\nx, d = die.attributes.items()\nif x == 'DW_AT_Location'\nGref.process_expr(d.value)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/49", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/49/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/49/events", "html_url": "https://github.com/eliben/pyelftools/issues/49", "id": 40844495, "node_id": "MDU6SXNzdWU0MDg0NDQ5NQ==", "number": 49, "title": "UnboundLocalError: local variable 'stringtable' referenced before assignment", "user": {"login": "pg", "id": 28985, "node_id": "MDQ6VXNlcjI4OTg1", "avatar_url": "https://avatars3.githubusercontent.com/u/28985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pg", "html_url": "https://github.com/pg", "followers_url": "https://api.github.com/users/pg/followers", "following_url": "https://api.github.com/users/pg/following{/other_user}", "gists_url": "https://api.github.com/users/pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pg/subscriptions", "organizations_url": "https://api.github.com/users/pg/orgs", "repos_url": "https://api.github.com/users/pg/repos", "events_url": "https://api.github.com/users/pg/events{/privacy}", "received_events_url": "https://api.github.com/users/pg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-08-21T20:22:09Z", "updated_at": "2016-10-16T20:58:22Z", "closed_at": "2016-10-16T20:58:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried running the following command: python readelf.py meander.debug -e\n\nand I received the Traceback shown below:\n\nTraceback (most recent call last):\n  File \"../../lib/pyelftools-0.22/scripts/readelf.py\", line 1136, in <module>\n    main()\n  File \"../../lib/pyelftools-0.22/scripts/readelf.py\", line 1101, in main\n    show_heading=not do_file_header)\n  File \"../../lib/pyelftools-0.22/scripts/readelf.py\", line 170, in display_program_headers\n    for segment in self.elffile.iter_segments():\n  File \"/usr/local/lib/python2.7/site-packages/elftools/elf/elffile.py\", line 109, in iter_segments\n    yield self.get_segment(i)\n  File \"/usr/local/lib/python2.7/site-packages/elftools/elf/elffile.py\", line 103, in get_segment\n    return self._make_segment(segment_header)\n  File \"/usr/local/lib/python2.7/site-packages/elftools/elf/elffile.py\", line 222, in _make_segment\n    return DynamicSegment(segment_header, self.stream, self)\n  File \"/usr/local/lib/python2.7/site-packages/elftools/elf/dynamic.py\", line 123, in __init__\n    Dynamic.**init**(self, stream, elffile, stringtable, self['p_offset'])\nUnboundLocalError: local variable 'stringtable' referenced before assignment\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/29", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/29/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/29/events", "html_url": "https://github.com/eliben/pyelftools/issues/29", "id": 31955599, "node_id": "MDU6SXNzdWUzMTk1NTU5OQ==", "number": 29, "title": "A minor issue related to 0 section headers", "user": {"login": "0xaead", "id": 4557912, "node_id": "MDQ6VXNlcjQ1NTc5MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4557912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/0xaead", "html_url": "https://github.com/0xaead", "followers_url": "https://api.github.com/users/0xaead/followers", "following_url": "https://api.github.com/users/0xaead/following{/other_user}", "gists_url": "https://api.github.com/users/0xaead/gists{/gist_id}", "starred_url": "https://api.github.com/users/0xaead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/0xaead/subscriptions", "organizations_url": "https://api.github.com/users/0xaead/orgs", "repos_url": "https://api.github.com/users/0xaead/repos", "events_url": "https://api.github.com/users/0xaead/events{/privacy}", "received_events_url": "https://api.github.com/users/0xaead/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-04-22T08:55:02Z", "updated_at": "2014-08-21T21:35:04Z", "closed_at": "2014-04-23T23:46:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, Dear Eliben\nFirst thanks a lot to your excellent tool, I had been using it since 2012. -- It helps a lot on my reverse engineering works.\nHere is the issue I met:\nWhen analyzing an elf file with 0 section headers contained, pyelftool reports an error of \"UnboundLocalError: local variable 'stringtable' referenced before assignment\".\n\nTracking back in call stack I found in dynamic.py, stringtable is NOT initialized in **init** function for the sake of \"Zero\"  section.\nAs the segment is a Dynamic one, elftool tries to look up a corresponding \"dynamic\" section for more relevant data. -- but it fails anyway.\n\nSecion information may be removed from most of proprietary elf files delivered to out-side world. Would you kindly consider to add some lines as a tolerance to this case?\ne.g. a section amount check and a dummy assignment to stringtable before iterating section in **init** function.\n    def **init**(self, header, stream, elffile):\n            if elffile.num_sections() == 0:\n            stringtable = \"dummy\"\n\nThanks a lot.\nAnd best regards to your work :)\n\nBilly\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/28", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/28/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/28/events", "html_url": "https://github.com/eliben/pyelftools/issues/28", "id": 29784265, "node_id": "MDU6SXNzdWUyOTc4NDI2NQ==", "number": 28, "title": "Dwarf 4 support", "user": {"login": "scudette", "id": 3856546, "node_id": "MDQ6VXNlcjM4NTY1NDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/3856546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scudette", "html_url": "https://github.com/scudette", "followers_url": "https://api.github.com/users/scudette/followers", "following_url": "https://api.github.com/users/scudette/following{/other_user}", "gists_url": "https://api.github.com/users/scudette/gists{/gist_id}", "starred_url": "https://api.github.com/users/scudette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scudette/subscriptions", "organizations_url": "https://api.github.com/users/scudette/orgs", "repos_url": "https://api.github.com/users/scudette/repos", "events_url": "https://api.github.com/users/scudette/events{/privacy}", "received_events_url": "https://api.github.com/users/scudette/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-03-20T00:08:56Z", "updated_at": "2014-03-23T01:50:08Z", "closed_at": "2014-03-22T21:50:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pyelftools does not support dwarf 4 and fails parsing when it encounters some of the new types (e.g. DW_FORM_exprloc). Even if full support is not provided, pyelftool should be able to skip the abbrev table it does not understand.\n\nMany Linux distributions are starting to use DWARF4 with their toolchains now.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/26", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/26/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/26/events", "html_url": "https://github.com/eliben/pyelftools/issues/26", "id": 28049952, "node_id": "MDU6SXNzdWUyODA0OTk1Mg==", "number": 26, "title": "memory consumption and performance problems", "user": {"login": "kholia", "id": 79528, "node_id": "MDQ6VXNlcjc5NTI4", "avatar_url": "https://avatars1.githubusercontent.com/u/79528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kholia", "html_url": "https://github.com/kholia", "followers_url": "https://api.github.com/users/kholia/followers", "following_url": "https://api.github.com/users/kholia/following{/other_user}", "gists_url": "https://api.github.com/users/kholia/gists{/gist_id}", "starred_url": "https://api.github.com/users/kholia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kholia/subscriptions", "organizations_url": "https://api.github.com/users/kholia/orgs", "repos_url": "https://api.github.com/users/kholia/repos", "events_url": "https://api.github.com/users/kholia/events{/privacy}", "received_events_url": "https://api.github.com/users/kholia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2014-02-21T15:39:06Z", "updated_at": "2016-10-16T21:02:01Z", "closed_at": "2016-10-16T21:02:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nThe following code never finishes (I killed it after 30 minutes) and consumes more  than 3 GiB (and growing amount) of RAM.\n\n```\n$ cat fff.py\nfrom __future__ import print_function\n\nimport libarchive\nimport sys\nimport os\nimport resource\nfrom six.moves import cStringIO\n\ntry:\n    from elftools.elf.elffile import ELFFile\nexcept ImportError as exc:\n    print(str(exc), file=sys.stderr)\n    sys.exit(-1)\n\n\ndef get_producer(debugfile):\n    elffile = ELFFile(debugfile)\n    dwarfinfo = elffile.get_dwarf_info()\n\n    producers = set()\n\n    for CU in dwarfinfo.iter_CUs():\n        # Start with the top DIE, the root for this CU's DIE tree\n        top_DIE = CU.get_top_DIE()\n        try:\n            attrs = top_DIE.attributes['DW_AT_producer']\n            if attrs.form == 'DW_FORM_GNU_strp_alt':\n                print(\"XXX\")\n            elif attrs.form == 'DW_FORM_strp':  # lucky ;)\n                print(\"XXX\")\n            else:\n                print(attrs.form)\n        except:\n            pass\n\n    return producers\n\n\ndef process_file(debugfile):\n    elffile = ELFFile(debugfile)\n\n    if not elffile.has_dwarf_info():\n        assert 0\n    else:\n        return get_producer(debugfile)\n\npid = os.getpid()\n\na = libarchive.Archive(sys.argv[1])\n\nfor entry in a:\n    print(entry.pathname)\n    memusage = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n    sys.stderr.write(\"%s -> %s -> %s -> %s\\n\"\n                     % (pid, sys.argv[1], entry.pathname, memusage))\n\n    try:\n        data = a.read(entry.size)\n        memusage = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n        sys.stderr.write(\"[AR] %s -> %s -> %s -> %s\\n\"\n                         % (pid, sys.argv[1], entry.pathname, memusage))\n\n        fh = cStringIO(data)\n        sys.stderr.write(\"[ARP] %s -> %s -> %s -> %s\\n\"\n                         % (pid, sys.argv[1], entry.pathname, memusage))\n\n        process_file(fh)\n    except:\n        pass\n\na.close()\n\n$  python fff.py seamonkey-debuginfo-2.24-1.fc21.x86_64.rpm  # sit back ;(\n\n```\n\nYou can download the problematic RPM from [this URL](http://dl.fedoraproject.org/pub/fedora/linux/development/rawhide/x86_64/debug/s/).\n\npython-libarchive is responsible for consuming 600 MiB (which is OK).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/22", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/22/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/22/events", "html_url": "https://github.com/eliben/pyelftools/issues/22", "id": 25634701, "node_id": "MDU6SXNzdWUyNTYzNDcwMQ==", "number": 22, "title": "Error trying to obtain dwarf info: 'structs' is not defined ", "user": {"login": "crobertob", "id": 3647302, "node_id": "MDQ6VXNlcjM2NDczMDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3647302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crobertob", "html_url": "https://github.com/crobertob", "followers_url": "https://api.github.com/users/crobertob/followers", "following_url": "https://api.github.com/users/crobertob/following{/other_user}", "gists_url": "https://api.github.com/users/crobertob/gists{/gist_id}", "starred_url": "https://api.github.com/users/crobertob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crobertob/subscriptions", "organizations_url": "https://api.github.com/users/crobertob/orgs", "repos_url": "https://api.github.com/users/crobertob/repos", "events_url": "https://api.github.com/users/crobertob/events{/privacy}", "received_events_url": "https://api.github.com/users/crobertob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-01-15T09:24:38Z", "updated_at": "2014-01-21T16:39:06Z", "closed_at": "2014-01-18T14:36:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\nI'm trying to run the example examine_dwarf_info in an ELF file from Microvision but I receive the following error, could you please tell me if I'm doing something wrong or if there is a way to fix it? The example runs properly with the elf file provided as example. I'm using Python 2.7.3. Thank you.\n\n```\nProcessing file: uvision/O0/obj/UserManualExample.axf\n  Found a compile unit at offset 0, length 15044\nTraceback (most recent call last):\n  File \"examine_dwarf_info.py\", line 50, in <module>\n    process_file(filename)\n  File \"examine_dwarf_info.py\", line 42, in process_file\n    top_DIE = CU.get_top_DIE()\n  File \"/usr/lib/python2.7/site-packages/elftools/dwarf/compileunit.py\", line 76, in get_top_DIE\n    return self._get_DIE(0)\n  File \"/usr/lib/python2.7/site-packages/elftools/dwarf/compileunit.py\", line 95, in _get_DIE\n    self._parse_DIEs()\n  File \"/usr/lib/python2.7/site-packages/elftools/dwarf/compileunit.py\", line 119, in _parse_DIEs\n    offset=die_offset)\n  File \"/usr/lib/python2.7/site-packages/elftools/dwarf/die.py\", line 90, in __init__\n    self._parse_DIE()\n  File \"/usr/lib/python2.7/site-packages/elftools/dwarf/die.py\", line 185, in _parse_DIE\n    value = self._translate_attr_value(form, raw_value)\n  File \"/usr/lib/python2.7/site-packages/elftools/dwarf/die.py\", line 207, in _translate_attr_value\n    structs.Dwarf_dw_form[form], self.stream)\nNameError: global name 'structs' is not defined\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/21", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/21/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/21/events", "html_url": "https://github.com/eliben/pyelftools/issues/21", "id": 25047586, "node_id": "MDU6SXNzdWUyNTA0NzU4Ng==", "number": 21, "title": "latest pyelftools fails on Linux with cannot import name SUNWSyminfoTableSection when installed", "user": {"login": "andikleen", "id": 1053889, "node_id": "MDQ6VXNlcjEwNTM4ODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1053889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andikleen", "html_url": "https://github.com/andikleen", "followers_url": "https://api.github.com/users/andikleen/followers", "following_url": "https://api.github.com/users/andikleen/following{/other_user}", "gists_url": "https://api.github.com/users/andikleen/gists{/gist_id}", "starred_url": "https://api.github.com/users/andikleen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andikleen/subscriptions", "organizations_url": "https://api.github.com/users/andikleen/orgs", "repos_url": "https://api.github.com/users/andikleen/repos", "events_url": "https://api.github.com/users/andikleen/events{/privacy}", "received_events_url": "https://api.github.com/users/andikleen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-04T03:34:24Z", "updated_at": "2014-01-05T23:00:38Z", "closed_at": "2014-01-05T23:00:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "it seems to work when running the examples inside the source dir. Some missing file in setup.py? \n\nI reverted the solaris changed for now in my copy\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/20", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/20/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/20/events", "html_url": "https://github.com/eliben/pyelftools/issues/20", "id": 24987519, "node_id": "MDU6SXNzdWUyNDk4NzUxOQ==", "number": 20, "title": "elffile.get_dwarf_info() Failed", "user": {"login": "flyrain", "id": 1322359, "node_id": "MDQ6VXNlcjEzMjIzNTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1322359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flyrain", "html_url": "https://github.com/flyrain", "followers_url": "https://api.github.com/users/flyrain/followers", "following_url": "https://api.github.com/users/flyrain/following{/other_user}", "gists_url": "https://api.github.com/users/flyrain/gists{/gist_id}", "starred_url": "https://api.github.com/users/flyrain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flyrain/subscriptions", "organizations_url": "https://api.github.com/users/flyrain/orgs", "repos_url": "https://api.github.com/users/flyrain/repos", "events_url": "https://api.github.com/users/flyrain/events{/privacy}", "received_events_url": "https://api.github.com/users/flyrain/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2014-01-02T21:12:28Z", "updated_at": "2014-01-06T00:31:11Z", "closed_at": "2014-01-05T23:55:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was trying to parse a linux kernel object which has debug information. The function elffile.get_dwarf_info() failed. I've test with some other linux kernel object, all failed with the same error.\n\n> python dwarf_die_tree.py ~/new-kernel/linux-3.12.1/vmlinux-3.12.1 \n> Processing file: /home/cs3612/new-kernel/linux-3.12.1/vmlinux-3.12.1\n> Traceback (most recent call last):\n>   File \"dwarf_die_tree.py\", line 65, in <module>\n>     process_file(filename)\n>   File \"dwarf_die_tree.py\", line 31, in process_file\n>     dwarfinfo = elffile.get_dwarf_info()\n>   File \"../elftools/elf/elffile.py\", line 140, in get_dwarf_info\n>     relocate_dwarf_sections)\n>   File \"../elftools/elf/elffile.py\", line 357, in _read_dwarf_section\n>     section_stream, reloc_section)\n>   File \"../elftools/elf/relocation.py\", line 124, in apply_section_relocations\n>     self._do_apply_relocation(stream, reloc, symtab)\n>   File \"../elftools/elf/relocation.py\", line 181, in _do_apply_relocation\n>     value_struct.build_stream(relocated_value, stream)\n>   File \"../elftools/construct/core.py\", line 211, in build_stream\n>     self._build(obj, stream, Container())\n>   File \"../elftools/construct/core.py\", line 358, in _build\n>     raise FieldError(ex)\n> elftools.construct.core.FieldError: integer out of range for 'L' format code\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/14", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/14/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/14/events", "html_url": "https://github.com/eliben/pyelftools/issues/14", "id": 22596627, "node_id": "MDU6SXNzdWUyMjU5NjYyNw==", "number": 14, "title": "The construct module is out of date!!! Problem will raise under the envirmonent python3.3", "user": {"login": "DrWrong", "id": 5616667, "node_id": "MDQ6VXNlcjU2MTY2Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5616667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrWrong", "html_url": "https://github.com/DrWrong", "followers_url": "https://api.github.com/users/DrWrong/followers", "following_url": "https://api.github.com/users/DrWrong/following{/other_user}", "gists_url": "https://api.github.com/users/DrWrong/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrWrong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrWrong/subscriptions", "organizations_url": "https://api.github.com/users/DrWrong/orgs", "repos_url": "https://api.github.com/users/DrWrong/repos", "events_url": "https://api.github.com/users/DrWrong/events{/privacy}", "received_events_url": "https://api.github.com/users/DrWrong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-11-13T15:03:25Z", "updated_at": "2013-12-27T16:16:54Z", "closed_at": "2013-12-27T16:16:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I try to write back some data into elf file  use the pyelftools like that:\nfrom elftools.elf.elffile import ELFFile\nfrom elftools.elf.strucs import ELFStructs\nelf=ELFFile(open('an elf file','rb'))\nstruct=ELFStructs()\nstruct.Elf_Ehdr.build(elf.header)\nmy python is in version 3.3 and it return a TypeError \nand then I replace the construct module with the latest construct module and it going fun.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/12", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/12/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/12/events", "html_url": "https://github.com/eliben/pyelftools/issues/12", "id": 19545573, "node_id": "MDU6SXNzdWUxOTU0NTU3Mw==", "number": 12, "title": "Compute Elf File Size", "user": {"login": "robomotic", "id": 315964, "node_id": "MDQ6VXNlcjMxNTk2NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/315964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robomotic", "html_url": "https://github.com/robomotic", "followers_url": "https://api.github.com/users/robomotic/followers", "following_url": "https://api.github.com/users/robomotic/following{/other_user}", "gists_url": "https://api.github.com/users/robomotic/gists{/gist_id}", "starred_url": "https://api.github.com/users/robomotic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robomotic/subscriptions", "organizations_url": "https://api.github.com/users/robomotic/orgs", "repos_url": "https://api.github.com/users/robomotic/repos", "events_url": "https://api.github.com/users/robomotic/events{/privacy}", "received_events_url": "https://api.github.com/users/robomotic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2013-09-16T11:36:12Z", "updated_at": "2016-09-18T14:12:31Z", "closed_at": "2014-11-01T13:19:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Eli!\nI love your project and because I need to be able to extract elf files from a stream of data I want to be able to calculate the file size by parsing the headers+program sections.\nI had in mind two ways to calculate the effective file size but none work so far.\nThe first approach is sum up: header + program headers + section headers+ program sections.\nThe second approach is sum up: last program section + file size + header table size.\nI have tried the function against your elf samples and they underestimate the file size.\nCould you tell me what I am missing in my calculation?\n\n```\ndef compute_file_size(self):\n    self._emitline('File size:')\n    header_size=self.elffile.header['e_ehsize'];\n    table_program_size=self.elffile.header['e_phentsize']*self.elffile.header['e_phnum'];\n    table_headers_size=self.elffile.header['e_shnum']*self.elffile.header['e_shentsize'];\n\n    if self.elffile.num_segments() == 0:\n        self._emitline('There are no program headers in this file.')\n        return\n    program_size=0\n    #get the last segmment\n    last_offset=0\n    last_size=0\n    for segment in self.elffile.iter_segments():\n        program_size+=segment['p_filesz']\n        if segment['p_offset']>last_offset:\n            last_offset=segment['p_offset']\n            last_size=segment['p_filesz']\n    print \"Last Offset \", self._format_hex(segment['p_offset'], fieldsize=6)\n    print \"Last Size\", self._format_hex(segment['p_filesz'], fieldsize=5)\n    total_size=header_size+table_program_size+table_headers_size+program_size\n    print \"Total Size via segments %d bytes \\n\"% (total_size)\n    print \"Total Size via offset   %d bytes \\n\"% (last_offset+last_size+table_headers_size)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/11", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/11/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/11/events", "html_url": "https://github.com/eliben/pyelftools/issues/11", "id": 18480860, "node_id": "MDU6SXNzdWUxODQ4MDg2MA==", "number": 11, "title": "get_dwarf_info() call takes several seconds to complete", "user": {"login": "hnsl", "id": 948471, "node_id": "MDQ6VXNlcjk0ODQ3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/948471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hnsl", "html_url": "https://github.com/hnsl", "followers_url": "https://api.github.com/users/hnsl/followers", "following_url": "https://api.github.com/users/hnsl/following{/other_user}", "gists_url": "https://api.github.com/users/hnsl/gists{/gist_id}", "starred_url": "https://api.github.com/users/hnsl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hnsl/subscriptions", "organizations_url": "https://api.github.com/users/hnsl/orgs", "repos_url": "https://api.github.com/users/hnsl/repos", "events_url": "https://api.github.com/users/hnsl/events{/privacy}", "received_events_url": "https://api.github.com/users/hnsl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-08-23T16:58:27Z", "updated_at": "2016-10-16T20:57:52Z", "closed_at": "2016-10-16T20:57:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "For a moderately sized binary with about 25000 DIEs this library takes several seconds to return from a call to get_dwarf_info(), even with pypy, which makes it unsuitable for several purposes. Please optimize this. I'm only interested in a a few of the DIEs with certain tags so there must be many, may cycles wasted on indexing and creating objects that are never looked at once.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/3", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/3/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/3/events", "html_url": "https://github.com/eliben/pyelftools/issues/3", "id": 15320278, "node_id": "MDU6SXNzdWUxNTMyMDI3OA==", "number": 3, "title": " support parsing of dynamic ELFs w/out section headers", "user": {"login": "eliben", "id": 1130906, "node_id": "MDQ6VXNlcjExMzA5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1130906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliben", "html_url": "https://github.com/eliben", "followers_url": "https://api.github.com/users/eliben/followers", "following_url": "https://api.github.com/users/eliben/following{/other_user}", "gists_url": "https://api.github.com/users/eliben/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliben/subscriptions", "organizations_url": "https://api.github.com/users/eliben/orgs", "repos_url": "https://api.github.com/users/eliben/repos", "events_url": "https://api.github.com/users/eliben/events{/privacy}", "received_events_url": "https://api.github.com/users/eliben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-09T13:55:39Z", "updated_at": "2014-06-17T12:48:07Z", "closed_at": "2014-06-17T12:48:07Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Moving from bitbucket pull request #11 by Mike Frysinger:\n\nsupport parsing of dynamic ELFs w/out section headers\n\nAt runtime, ELFs do not use the section headers at all. Instead, only\nthe program segments and dynamic tags get used. This means you can\nstrip the section table completely from an ELF and have it still work.\n\nIn practice, people rarely do this, but it's not unheard of. Make the\nDynamic tags work even in these cases by loading the strings table the\nsame way the runtime loader does:\n- parse the symtab address from DT_STRTAB\n- locate the file offset via the program segments\n\nIn order to avoid circular deps (parsing a dyntag requires walking parsed\ndyntags), add a set of internal funcs for returning the raw values.\nave it still work.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/eliben/pyelftools/issues/2", "repository_url": "https://api.github.com/repos/eliben/pyelftools", "labels_url": "https://api.github.com/repos/eliben/pyelftools/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/eliben/pyelftools/issues/2/comments", "events_url": "https://api.github.com/repos/eliben/pyelftools/issues/2/events", "html_url": "https://github.com/eliben/pyelftools/issues/2", "id": 15320259, "node_id": "MDU6SXNzdWUxNTMyMDI1OQ==", "number": 2, "title": "Trying to get LMA and VMA addresses", "user": {"login": "eliben", "id": 1130906, "node_id": "MDQ6VXNlcjExMzA5MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1130906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliben", "html_url": "https://github.com/eliben", "followers_url": "https://api.github.com/users/eliben/followers", "following_url": "https://api.github.com/users/eliben/following{/other_user}", "gists_url": "https://api.github.com/users/eliben/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliben/subscriptions", "organizations_url": "https://api.github.com/users/eliben/orgs", "repos_url": "https://api.github.com/users/eliben/repos", "events_url": "https://api.github.com/users/eliben/events{/privacy}", "received_events_url": "https://api.github.com/users/eliben/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2013-06-09T13:53:39Z", "updated_at": "2016-10-26T03:18:52Z", "closed_at": "2016-10-26T03:18:52Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Moved from bitbucket issue #21:\n\nHi,\n\nI'm using your library to parse a powerpc ELF file and that seems to work great except for VMA address extraction.\n\nI use this code to get VMA address:\n\nwith open( elf_file_name, \"rb\" ) as f:\n    elf_file = ELFFile( f )\n    for i in range( elf_file.num_sections() ):\n        section = elf_file.get_section( i )\n        segment_header = elf_file._get_segment_header( i )\n        print \"Name = %s\" % section.name\n        print \"VMA  = 0x%x\" % segment_header[ \"p_paddr\" ]\n        print \"LMA  = 0x%x\\n\" % section[ \"sh_addr\" ]\n\n(yeah, i know, it's ugly to use private method \"_get_segment_header\" but i found nothing better). The output is:\n\nName =\nVMA  = 0xfc100000\nLMA  = 0x0\n\nName = .text\nVMA  = 0xfc200000\nLMA  = 0x0\n\nName = .rodata\nVMA  = 0xfc300000\nLMA  = 0x273d8\n\nName = .data\nVMA  = 0xfc400000\nLMA  = 0x800000\n\nName = .stacks\nVMA  = 0xfc500000\nLMA  = 0x800a80\n\nName = .bss\nVMA  = 0xfc600000\nLMA  = 0x812a80\n...\n\nand objdump -h output:\n\nmain:     file format elf32-powerpc\n\nSections:\nIdx Name          Size      VMA       LMA       File off  Algn\n  0 .text         000273d8  00000000  fc100000  00001000  2**2\n                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n  1 .rodata       000041a0  000273d8  fc200000  000283d8  2**3\n                  CONTENTS, ALLOC, LOAD, READONLY, DATA\n  2 .data         00000a7c  00800000  fc300000  0002d000  2**3\n                  CONTENTS, ALLOC, LOAD, DATA\n  3 .stacks       00012000  00800a80  fc300a80  0002da80  2**4\n                  CONTENTS, ALLOC, LOAD, DATA\n  4 .bss          00089c88  00812a80  fc312a80  0003fa80  2**5\n                  ALLOC\n  ...\n\nSo section's name and VMA address are incorrect :( It's the correct way to do that or it's a bug ?\n\nThx\n", "performed_via_github_app": null, "score": 1.0}]}