{"total_count": 105, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/159", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/159/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/159/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/159", "id": 680607759, "node_id": "MDU6SXNzdWU2ODA2MDc3NTk=", "number": 159, "title": "Naming a field `date` causes RecursionError", "user": {"login": "jacobg", "id": 736985, "node_id": "MDQ6VXNlcjczNjk4NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/736985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacobg", "html_url": "https://github.com/jacobg", "followers_url": "https://api.github.com/users/jacobg/followers", "following_url": "https://api.github.com/users/jacobg/following{/other_user}", "gists_url": "https://api.github.com/users/jacobg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacobg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacobg/subscriptions", "organizations_url": "https://api.github.com/users/jacobg/orgs", "repos_url": "https://api.github.com/users/jacobg/repos", "events_url": "https://api.github.com/users/jacobg/events{/privacy}", "received_events_url": "https://api.github.com/users/jacobg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-18T00:41:41Z", "updated_at": "2020-08-18T00:42:59Z", "closed_at": "2020-08-18T00:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nfrom datetime import date\r\nimport dataclasses\r\n\r\n@dataclasses.dataclass(frozen=True)\r\nclass A:\r\n  date: date = dataclasses.field()\r\n```\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/dataclasses.py\", line 1002, in wrap\r\n    return _process_class(cls, init, repr, eq, order, unsafe_hash, frozen)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/dataclasses.py\", line 979, in _process_class\r\n    str(inspect.signature(cls)).replace(' -> None', ''))\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\", line 3040, in __str__\r\n    formatted = str(param)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\", line 2558, in __str__\r\n    formatannotation(self._annotation))\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/inspect.py\", line 1199, in formatannotation\r\n    return repr(annotation)\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/dataclasses.py\", line 249, in __repr__\r\n    return ('Field('\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/dataclasses.py\", line 249, in __repr__\r\n    return ('Field('\r\n  File \"/usr/local/Cellar/python/3.7.7/Frameworks/Python.framework/Versions/3.7/lib/python3.7/dataclasses.py\", line 249, in __repr__\r\n    return ('Field('\r\n  [Previous line repeated 491 more times]\r\nRecursionError: maximum recursion depth exceeded\r\n```\r\n\r\nBut this works:\r\n```python\r\n@dataclasses.dataclass(frozen=True)\r\nclass A:\r\n  date: date\r\n```\r\n\r\nSo does this:\r\n```python\r\n@dataclasses.dataclass(frozen=True)\r\nclass A:\r\n  date_: date = dataclasses.field()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/157", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/157/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/157/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/157", "id": 627704983, "node_id": "MDU6SXNzdWU2Mjc3MDQ5ODM=", "number": 157, "title": "can not install on python 3.8 or high", "user": {"login": "jacksonjim", "id": 3296695, "node_id": "MDQ6VXNlcjMyOTY2OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3296695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacksonjim", "html_url": "https://github.com/jacksonjim", "followers_url": "https://api.github.com/users/jacksonjim/followers", "following_url": "https://api.github.com/users/jacksonjim/following{/other_user}", "gists_url": "https://api.github.com/users/jacksonjim/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacksonjim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacksonjim/subscriptions", "organizations_url": "https://api.github.com/users/jacksonjim/orgs", "repos_url": "https://api.github.com/users/jacksonjim/repos", "events_url": "https://api.github.com/users/jacksonjim/events{/privacy}", "received_events_url": "https://api.github.com/users/jacksonjim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-30T10:59:00Z", "updated_at": "2020-06-06T10:07:37Z", "closed_at": "2020-05-30T11:37:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "ERROR: Package 'dataclasses' requires a different Python: 3.8.2 not in '>=3.6, <3.7'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/156", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/156/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/156/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/156", "id": 591940976, "node_id": "MDU6SXNzdWU1OTE5NDA5NzY=", "number": 156, "title": "Cache the value of the `__hahs__`", "user": {"login": "hackaugusto", "id": 310139, "node_id": "MDQ6VXNlcjMxMDEzOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/310139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackaugusto", "html_url": "https://github.com/hackaugusto", "followers_url": "https://api.github.com/users/hackaugusto/followers", "following_url": "https://api.github.com/users/hackaugusto/following{/other_user}", "gists_url": "https://api.github.com/users/hackaugusto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackaugusto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackaugusto/subscriptions", "organizations_url": "https://api.github.com/users/hackaugusto/orgs", "repos_url": "https://api.github.com/users/hackaugusto/repos", "events_url": "https://api.github.com/users/hackaugusto/events{/privacy}", "received_events_url": "https://api.github.com/users/hackaugusto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T14:01:48Z", "updated_at": "2020-04-01T14:04:46Z", "closed_at": "2020-04-01T14:04:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was modeling a toy blockchain using dataclasses and I had something roughly like this:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass(eq=True, frozen=True)\r\nclass Transaction:\r\n  pass\r\n\r\n@dataclass(eq=True, frozen=True)\r\nclass Block:\r\n  parent: Optional[Block]\r\n  transactions: List[Transaction]\r\n```\r\n\r\nThe problem is that the cost of `hash(block)` increases linearly with the length of the parent chain. What do you think about caching the result of the `hash` function? It will not fix the problem in general (this is a toy example anyways), but it will alleviate the problem for a toy script like the one I was writing.\r\n\r\nLet me know if I should open another issue in the python issue tracker, and if the PR makes sense.Thanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/155", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/155/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/155/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/155", "id": 571824854, "node_id": "MDU6SXNzdWU1NzE4MjQ4NTQ=", "number": 155, "title": "TypeError: __new__() got multiple values for argument 'cls'", "user": {"login": "omry", "id": 376455, "node_id": "MDQ6VXNlcjM3NjQ1NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/376455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omry", "html_url": "https://github.com/omry", "followers_url": "https://api.github.com/users/omry/followers", "following_url": "https://api.github.com/users/omry/following{/other_user}", "gists_url": "https://api.github.com/users/omry/gists{/gist_id}", "starred_url": "https://api.github.com/users/omry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omry/subscriptions", "organizations_url": "https://api.github.com/users/omry/orgs", "repos_url": "https://api.github.com/users/omry/repos", "events_url": "https://api.github.com/users/omry/events{/privacy}", "received_events_url": "https://api.github.com/users/omry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-02-27T05:06:41Z", "updated_at": "2020-06-26T22:39:08Z", "closed_at": "2020-06-26T21:03:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the dataclasses package.\r\nUsing it on Python 3.6, I am hitting the following problem (which does not appear with native dataclasses in 3.7+):\r\n\r\n```python\r\n@dataclass\r\nclass PluginConf1(Dict[str, Any]):\r\n    cls: str\r\n\r\nPluginConf1(cls=\"ff\")\r\n```\r\nresults in:\r\n```\r\ntests/test_utils.py:None (tests/test_utils.py)\r\ntest_utils.py:150: in <module>\r\n    PluginConf1(cls=\"ff\")\r\nE   TypeError: __new__() got multiple values for argument 'cls'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/152", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/152/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/152/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/152", "id": 521751587, "node_id": "MDU6SXNzdWU1MjE3NTE1ODc=", "number": 152, "title": "kw_only not supported", "user": {"login": "eadmaster", "id": 925171, "node_id": "MDQ6VXNlcjkyNTE3MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/925171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eadmaster", "html_url": "https://github.com/eadmaster", "followers_url": "https://api.github.com/users/eadmaster/followers", "following_url": "https://api.github.com/users/eadmaster/following{/other_user}", "gists_url": "https://api.github.com/users/eadmaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/eadmaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eadmaster/subscriptions", "organizations_url": "https://api.github.com/users/eadmaster/orgs", "repos_url": "https://api.github.com/users/eadmaster/repos", "events_url": "https://api.github.com/users/eadmaster/events{/privacy}", "received_events_url": "https://api.github.com/users/eadmaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-12T19:21:26Z", "updated_at": "2019-11-12T19:22:49Z", "closed_at": "2019-11-12T19:22:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "i've got this error while importing pytiled_parser:\r\n````\r\n/home/andy/.local/lib/python3.6/site-packages/pytiled_parser/objects.py in <module>()\r\n    171 \r\n    172 \r\n--> 173 @attr.s(auto_attribs=True, kw_only=True)\r\n    174 class Layer:\r\n    175     \"\"\"\r\n\r\nTypeError: attrs() got an unexpected keyword argument 'kw_only'\r\n````", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/150", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/150/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/150/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/150", "id": 506903686, "node_id": "MDU6SXNzdWU1MDY5MDM2ODY=", "number": 150, "title": "dataclass with `frozen=True` with `init=False` can't be instantiated", "user": {"login": "DBCerigo", "id": 8318425, "node_id": "MDQ6VXNlcjgzMTg0MjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8318425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DBCerigo", "html_url": "https://github.com/DBCerigo", "followers_url": "https://api.github.com/users/DBCerigo/followers", "following_url": "https://api.github.com/users/DBCerigo/following{/other_user}", "gists_url": "https://api.github.com/users/DBCerigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/DBCerigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DBCerigo/subscriptions", "organizations_url": "https://api.github.com/users/DBCerigo/orgs", "repos_url": "https://api.github.com/users/DBCerigo/repos", "events_url": "https://api.github.com/users/DBCerigo/events{/privacy}", "received_events_url": "https://api.github.com/users/DBCerigo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-14T22:24:55Z", "updated_at": "2019-10-15T08:00:39Z", "closed_at": "2019-10-15T08:00:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Creating a dataclass that has `frozen=True` and a field with `init=False` makes a class that throws a `dataclasses.FrozenInstanceError: cannot assign to field 'a_field'` error when attempting to instantiate it. \r\n\r\nIs this expected, and just a limitation that the user must be aware of? I couldn't find mention of it in the docs, though there are lots of mentions of other things to be aware of with `init=False`. \r\n\r\nExample:\r\n```\r\n@dataclass(frozen=True)\r\nclass AClass:\r\n    a_field: str = field(default=\"a_default\", init=False)\r\n```\r\n\r\nApologies for opening an issue on a historic-purposes repo, but it still seemed like the most appropriate place I could find for it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/149", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/149/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/149/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/149/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/149", "id": 501862544, "node_id": "MDU6SXNzdWU1MDE4NjI1NDQ=", "number": 149, "title": "Adding a python_requires >=3.6.* at least", "user": {"login": "yawara", "id": 10078984, "node_id": "MDQ6VXNlcjEwMDc4OTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/10078984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yawara", "html_url": "https://github.com/yawara", "followers_url": "https://api.github.com/users/yawara/followers", "following_url": "https://api.github.com/users/yawara/following{/other_user}", "gists_url": "https://api.github.com/users/yawara/gists{/gist_id}", "starred_url": "https://api.github.com/users/yawara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yawara/subscriptions", "organizations_url": "https://api.github.com/users/yawara/orgs", "repos_url": "https://api.github.com/users/yawara/repos", "events_url": "https://api.github.com/users/yawara/events{/privacy}", "received_events_url": "https://api.github.com/users/yawara/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-03T05:33:35Z", "updated_at": "2019-10-20T18:05:04Z", "closed_at": "2019-10-20T18:05:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "If someone install `dataclasses` to python3.5 ( default version of Ubuntu 16.04 ), some other packages imports are failed because python3.5 does not implement format string literal.\r\n\r\nThe current `setup.py` does not forbid installing to python3.5.\r\n\r\nFor example, flask 1.1.1.\r\n\r\n```\r\n$ python3\r\nPython 3.5.2 (default, Jul 10 2019, 11:58:48)\r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\nimport flask\r\nTraceback (most recent call last):\r\n File \"<stdin>\", line 1, in <module>\r\n File \"/usr/local/lib/python3.5/dist-packages/flask/__init__.py\", line 19, in <module>\r\n   from . import json\r\n File \"/usr/local/lib/python3.5/dist-packages/flask/json/__init__.py\", line 25, in <module>\r\n   import dataclasses\r\n File \"/usr/local/lib/python3.5/dist-packages/dataclasses.py\", line 246\r\n   f'name={self.name!r},'\r\n   ^\r\nSyntaxError: invalid syntax\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/147", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/147/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/147/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/147", "id": 470453951, "node_id": "MDU6SXNzdWU0NzA0NTM5NTE=", "number": 147, "title": "An InitVar could allow a default_factory", "user": {"login": "jdevera", "id": 73069, "node_id": "MDQ6VXNlcjczMDY5", "avatar_url": "https://avatars0.githubusercontent.com/u/73069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdevera", "html_url": "https://github.com/jdevera", "followers_url": "https://api.github.com/users/jdevera/followers", "following_url": "https://api.github.com/users/jdevera/following{/other_user}", "gists_url": "https://api.github.com/users/jdevera/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdevera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdevera/subscriptions", "organizations_url": "https://api.github.com/users/jdevera/orgs", "repos_url": "https://api.github.com/users/jdevera/repos", "events_url": "https://api.github.com/users/jdevera/events{/privacy}", "received_events_url": "https://api.github.com/users/jdevera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-19T17:43:23Z", "updated_at": "2019-07-19T21:57:55Z", "closed_at": "2019-07-19T21:57:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having a `default_factory` in an InitVar is actively prevented, but I do not understand why. Git history inspection doesn't clarify either. I tried SO too: https://stackoverflow.com/questions/57056029/\r\n\r\nWhat is the reason behind this restriction?\r\n\r\nCould this be easily enabled in newer versions? What would be the process to move that forward if it makes sense?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/146", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/146/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/146/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/146", "id": 468898631, "node_id": "MDU6SXNzdWU0Njg4OTg2MzE=", "number": 146, "title": "Adding a python_requires < 3.7", "user": {"login": "georgealton", "id": 1202151, "node_id": "MDQ6VXNlcjEyMDIxNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1202151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgealton", "html_url": "https://github.com/georgealton", "followers_url": "https://api.github.com/users/georgealton/followers", "following_url": "https://api.github.com/users/georgealton/following{/other_user}", "gists_url": "https://api.github.com/users/georgealton/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgealton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgealton/subscriptions", "organizations_url": "https://api.github.com/users/georgealton/orgs", "repos_url": "https://api.github.com/users/georgealton/repos", "events_url": "https://api.github.com/users/georgealton/events{/privacy}", "received_events_url": "https://api.github.com/users/georgealton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-16T22:30:03Z", "updated_at": "2019-10-28T21:24:06Z", "closed_at": "2019-10-20T18:06:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would adding a `python_requires = '<3.7',` configuration to the setup.py,  to prevent this package from being installed in python environments >=3.7, be helpful? \r\n\r\nThis would help to prevent accidental shadowing of the builtin dataclass package, and then triggering some of the incompatability issues \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/142", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/142/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/142/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/142", "id": 409378947, "node_id": "MDU6SXNzdWU0MDkzNzg5NDc=", "number": 142, "title": "dataclasses are not cooperative", "user": {"login": "a-recknagel", "id": 2063412, "node_id": "MDQ6VXNlcjIwNjM0MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/2063412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-recknagel", "html_url": "https://github.com/a-recknagel", "followers_url": "https://api.github.com/users/a-recknagel/followers", "following_url": "https://api.github.com/users/a-recknagel/following{/other_user}", "gists_url": "https://api.github.com/users/a-recknagel/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-recknagel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-recknagel/subscriptions", "organizations_url": "https://api.github.com/users/a-recknagel/orgs", "repos_url": "https://api.github.com/users/a-recknagel/repos", "events_url": "https://api.github.com/users/a-recknagel/events{/privacy}", "received_events_url": "https://api.github.com/users/a-recknagel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-12T16:12:04Z", "updated_at": "2019-02-13T08:14:23Z", "closed_at": "2019-02-12T16:23:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "dataclasses are not cooperative:\r\n```python\r\n>>> class SayFoo:\r\n...     def __init__(self, *args, **kwargs):\r\n...         print('Foo')\r\n...         super().__init__(*args, **kwargs)\r\n... \r\n>>> @dataclass\r\n... class DC(SayFoo):\r\n...     var: int\r\n...     \r\n>>> DC(1)\r\nDC(var=1)  # doesn't say 'Foo'\r\n```\r\nThis makes writing useful mixins for dataclasses quite hard. Is there a reason why they were written this way?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/139", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/139/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/139/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/139", "id": 386343902, "node_id": "MDU6SXNzdWUzODYzNDM5MDI=", "number": 139, "title": "Option to see code generated from Dataclasses", "user": {"login": "pylang", "id": 10778668, "node_id": "MDQ6VXNlcjEwNzc4NjY4", "avatar_url": "https://avatars0.githubusercontent.com/u/10778668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylang", "html_url": "https://github.com/pylang", "followers_url": "https://api.github.com/users/pylang/followers", "following_url": "https://api.github.com/users/pylang/following{/other_user}", "gists_url": "https://api.github.com/users/pylang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylang/subscriptions", "organizations_url": "https://api.github.com/users/pylang/orgs", "repos_url": "https://api.github.com/users/pylang/repos", "events_url": "https://api.github.com/users/pylang/events{/privacy}", "received_events_url": "https://api.github.com/users/pylang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T20:45:34Z", "updated_at": "2018-12-01T02:38:01Z", "closed_at": "2018-12-01T02:38:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Request**\r\n\r\nI'm sure this has been considered, but **can an option be added to view code generated from a dataclass**?\r\n\r\n**Background**\r\n\r\nAccording to R. Hettinger's [talk][1] *Dataclasses: The code generator to end all code generators - PyCon 2018*, `namdedtuple` once had a verbose option to view generated code of an instance.  This feature was later removed in Python 3.7 because \"no one ever said anything nice to me [Raymond] about that feature\".  Consequently, I think **seeing generated code would be a helpful addition to dataclasses**.\r\n\r\n**Uses**\r\n\r\n- *learning about dataclasses*: people who are trying to understand how dataclasses work can quickly implement a dataclass and compare it to its generated code .  They can learn specifically what boilerplate is being reduced.\r\n- *lazy boilerplate implementation*: dataclasses are used to bypass boilerplate code, but there are cases where one prefers a regular class over a dataclass (e.g. size, simplicity, teaching).   Let's say I want to write a class with 20 attributes.  Rather than adding `def __init__(...)` and `self.attr_1 = attr_1`, `self.attr_2 = attr_2`, etc. twenty times by hand, it could be faster to implement a dataclass, copy the verbose code and continue the implementation.\r\n\r\nThere appears to be some interest in such a feature based on this [post][2] and this [project][3] that inspects dataclasses.\r\n\r\n**Why?**\r\n\r\nI imagine a verbose option is more useful in dataclasses rather than namedtuples because the first is considered a substitute to classes (a container of potentially complex code), while the second substitutes  tuples (a simpler data structure).  Intrinsically, classes are abstract data structures - one needs to inspect each class to understand how each one works.  Tuples however,  are basic data structures - they all share a common behavior because they are share the same type, thus we need not inspect each instance to understand how any particular one works.  Due to the varied application of dataclasses, I contend there is a stronger need to see its code as compared to namedtuples.\r\n\r\nI appreciate your feedback.  Many thanks.\r\n\r\n\r\n  [1]: https://youtu.be/T-TwcmT6Rcw?t=330\r\n  [2]: https://stackoverflow.com/questions/53382033/how-can-i-show-the-code-that-is-generated-when-using-dataclass-class-decorator\r\n  [3]: https://github.com/DamlaAltun/DataclassInspector\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/138", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/138/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/138/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/138", "id": 383314740, "node_id": "MDU6SXNzdWUzODMzMTQ3NDA=", "number": 138, "title": "Dataclass inheritance behavior deviates from 3.7 implementation", "user": {"login": "shannonzhu", "id": 6366891, "node_id": "MDQ6VXNlcjYzNjY4OTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/6366891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shannonzhu", "html_url": "https://github.com/shannonzhu", "followers_url": "https://api.github.com/users/shannonzhu/followers", "following_url": "https://api.github.com/users/shannonzhu/following{/other_user}", "gists_url": "https://api.github.com/users/shannonzhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/shannonzhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shannonzhu/subscriptions", "organizations_url": "https://api.github.com/users/shannonzhu/orgs", "repos_url": "https://api.github.com/users/shannonzhu/repos", "events_url": "https://api.github.com/users/shannonzhu/events{/privacy}", "received_events_url": "https://api.github.com/users/shannonzhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-21T22:33:29Z", "updated_at": "2018-12-01T02:38:29Z", "closed_at": "2018-12-01T02:38:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "PEP 557: https://www.python.org/dev/peps/pep-0557/#inheritance \r\n\r\n> it looks through all of the class's base classes in reverse MRO (that is, starting at object) and, for each Data Class that it finds, adds the fields from that base class\r\n\r\nThe PEP specifies that dataclasses should only inherit fields from parent classes that are themselves dataclasses. This is also the case at runtime in python3.7:\r\n\r\n```\r\nPython 3.7.0 (default, Jun 28 2018, 07:39:16)\r\n[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from dataclasses import dataclass\r\n>>> class X:\r\n... a: int\r\n...\r\n>>> @dataclass\r\n... class Y(X):\r\n... pass\r\n...\r\n>>> from dataclasses import fields\r\n>>> fields(Y)\r\n()\r\n```\r\n\r\nHowever, it appears that the backport implementation behaves differently:\r\n\r\n```\r\nPython 3.6.3rc1+ (default, Sep 19 2018, 12:28:39)\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from dataclasses import dataclass\r\n>>> class X:\r\n... a: int\r\n...\r\n>>> @dataclass\r\n... class Y(X):\r\n... pass\r\n...\r\n>>> from dataclasses import fields\r\n>>> fields(Y)\r\n(Field(name='a',type=<class 'int'>,default=<dataclasses._MISSING_TYPE object at 0x7f6691d33978>,default_factory=<dataclasses._MISSING_TYPE object at 0x7f6691d33978>,init=True,repr=True,hash=None,compare=True,metadata={}),)\r\n```\r\n\r\nIs this something that looks like it should be fixed, or was this discrepancy intentional? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/136", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/136/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/136/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/136", "id": 356286313, "node_id": "MDU6SXNzdWUzNTYyODYzMTM=", "number": 136, "title": "Type information lost if using forward reference for type name", "user": {"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-02T14:22:25Z", "updated_at": "2018-09-02T17:55:17Z", "closed_at": "2018-09-02T17:55:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm on Python 3.6.6\r\n\r\nMaybe I'm using typing incorrectly, but isn't the type information of `amount` in the code below supposed to not forget that it's an `int`?\r\n\r\n    import dataclasses\r\n    import typing\r\n\r\n\r\n    Currency = typing.NewType(\"Currency\", str)\r\n    Amount = typing.NewType(\"Amount\", int)\r\n\r\n\r\n    @dataclasses.dataclass\r\n    class CurrencyAmount:\r\n        currency: Currency\r\n        amount: \"Amount\"\r\n\r\n\r\n    fields = {f.name: f for f in dataclasses.fields(CurrencyAmount)}\r\n\r\n    # prints something like <function NewType.<locals>.new_type at 0x10642be18>   - good\r\n    print(repr(fields[\"currency\"].type))\r\n\r\n    # prints 'Amount'  - not good\r\n    print(repr(fields[\"amount\"].type))\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/134", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/134/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/134/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/134", "id": 353885028, "node_id": "MDU6SXNzdWUzNTM4ODUwMjg=", "number": 134, "title": "Cannot create a dataclass with more than 255 fields", "user": {"login": "jbasko", "id": 632910, "node_id": "MDQ6VXNlcjYzMjkxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/632910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbasko", "html_url": "https://github.com/jbasko", "followers_url": "https://api.github.com/users/jbasko/followers", "following_url": "https://api.github.com/users/jbasko/following{/other_user}", "gists_url": "https://api.github.com/users/jbasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbasko/subscriptions", "organizations_url": "https://api.github.com/users/jbasko/orgs", "repos_url": "https://api.github.com/users/jbasko/repos", "events_url": "https://api.github.com/users/jbasko/events{/privacy}", "received_events_url": "https://api.github.com/users/jbasko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-24T18:30:51Z", "updated_at": "2018-08-24T18:56:50Z", "closed_at": "2018-08-24T18:37:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 3.6.6 (the only one I've tried), when I declare a dataclass with more than 255 fields, I am getting the 255 arguments error:\r\n\r\n    ....\r\n    File \"...../python3.6/site-packages/dataclasses.py\", line 871, in _process_class\r\n        else 'self',\r\n    File \"...../python3.6/site-packages/dataclasses.py\", line 490, in _init_fn\r\n        return_type=None)\r\n    File \"...../python3.6/site-packages/dataclasses.py\", line 356, in _create_fn\r\n        exec(txt, globals, locals)\r\n    File \"<string>\", line 1\r\n    SyntaxError: more than 255 arguments\r\n\r\nNot sure if it's worth \"fixing\" this :) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/133", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/133/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/133/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/133", "id": 352436013, "node_id": "MDU6SXNzdWUzNTI0MzYwMTM=", "number": 133, "title": "Support for `field` annotation", "user": {"login": "uriva", "id": 2490655, "node_id": "MDQ6VXNlcjI0OTA2NTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2490655?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uriva", "html_url": "https://github.com/uriva", "followers_url": "https://api.github.com/users/uriva/followers", "following_url": "https://api.github.com/users/uriva/following{/other_user}", "gists_url": "https://api.github.com/users/uriva/gists{/gist_id}", "starred_url": "https://api.github.com/users/uriva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uriva/subscriptions", "organizations_url": "https://api.github.com/users/uriva/orgs", "repos_url": "https://api.github.com/users/uriva/repos", "events_url": "https://api.github.com/users/uriva/events{/privacy}", "received_events_url": "https://api.github.com/users/uriva/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-21T08:28:15Z", "updated_at": "2018-08-21T08:37:12Z", "closed_at": "2018-08-21T08:37:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't get this to work: https://www.python.org/dev/peps/pep-0557/#id41\r\ni.e.:\r\n\r\n    l: list = field(default_factory=list)\r\n\r\n\r\nIs it supported?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/131", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/131/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/131/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/131", "id": 326759554, "node_id": "MDU6SXNzdWUzMjY3NTk1NTQ=", "number": 131, "title": "Support fromdict", "user": {"login": "maximveksler", "id": 550550, "node_id": "MDQ6VXNlcjU1MDU1MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/550550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maximveksler", "html_url": "https://github.com/maximveksler", "followers_url": "https://api.github.com/users/maximveksler/followers", "following_url": "https://api.github.com/users/maximveksler/following{/other_user}", "gists_url": "https://api.github.com/users/maximveksler/gists{/gist_id}", "starred_url": "https://api.github.com/users/maximveksler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maximveksler/subscriptions", "organizations_url": "https://api.github.com/users/maximveksler/orgs", "repos_url": "https://api.github.com/users/maximveksler/repos", "events_url": "https://api.github.com/users/maximveksler/events{/privacy}", "received_events_url": "https://api.github.com/users/maximveksler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-26T18:47:38Z", "updated_at": "2018-05-29T10:31:27Z", "closed_at": "2018-05-29T10:31:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given class \r\n\r\n```python\r\n@dataclass \r\nclass A:\r\n   a: str\r\n   b: [A] = None\r\n   c: {str: [A]} = None\r\n\r\na = A(\"foo\")\r\n```\r\n\r\nIt would be extremely useful, to be able to do something like this \r\n\r\n`a == fromdict(A, asdict(a))`\r\n> True\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/130", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/130/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/130/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/130", "id": 326728557, "node_id": "MDU6SXNzdWUzMjY3Mjg1NTc=", "number": 130, "title": "Python 3.5 Naive Question", "user": {"login": "s0undt3ch", "id": 300048, "node_id": "MDQ6VXNlcjMwMDA0OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/300048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s0undt3ch", "html_url": "https://github.com/s0undt3ch", "followers_url": "https://api.github.com/users/s0undt3ch/followers", "following_url": "https://api.github.com/users/s0undt3ch/following{/other_user}", "gists_url": "https://api.github.com/users/s0undt3ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/s0undt3ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s0undt3ch/subscriptions", "organizations_url": "https://api.github.com/users/s0undt3ch/orgs", "repos_url": "https://api.github.com/users/s0undt3ch/repos", "events_url": "https://api.github.com/users/s0undt3ch/events{/privacy}", "received_events_url": "https://api.github.com/users/s0undt3ch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-26T10:39:09Z", "updated_at": "2018-05-29T10:29:15Z", "closed_at": "2018-05-29T10:29:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for the issue about a simple question.\r\n\r\nWhat's stopping this backport to go as far back as 3.5?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/129", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/129/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/129/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/129", "id": 325087873, "node_id": "MDU6SXNzdWUzMjUwODc4NzM=", "number": 129, "title": "Changing Field Order In Subclass", "user": {"login": "dsanders11", "id": 5820654, "node_id": "MDQ6VXNlcjU4MjA2NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5820654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsanders11", "html_url": "https://github.com/dsanders11", "followers_url": "https://api.github.com/users/dsanders11/followers", "following_url": "https://api.github.com/users/dsanders11/following{/other_user}", "gists_url": "https://api.github.com/users/dsanders11/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsanders11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsanders11/subscriptions", "organizations_url": "https://api.github.com/users/dsanders11/orgs", "repos_url": "https://api.github.com/users/dsanders11/repos", "events_url": "https://api.github.com/users/dsanders11/events{/privacy}", "received_events_url": "https://api.github.com/users/dsanders11/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-21T23:09:25Z", "updated_at": "2018-07-24T01:44:44Z", "closed_at": "2018-05-29T10:30:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Really enjoying the `dataclass` decorator and can't wait for it to be standard in Python 3.7. I've been playing around with it in 3.6 and came across a use-case that I can't seem to make work intuitively. Basically, `Point2D` is a point with a units field, and a default value to simplify things. `Blob` is a subclass of `Point2D` which is simply a point with a diameter. It needs to be a subclass so that it can inherit the helper methods on `Point2D` and so type-checking allows it to be used anywhere `Point2D` can be.\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nfrom enum import Enum\r\n\r\n\r\nclass Unit(Enum):\r\n    Millimeters = 'mm'\r\n    Inches = 'in'\r\n\r\n\r\n@dataclass\r\nclass Point2D:\r\n    x: float\r\n    y: float\r\n    units: Unit = Unit.Inches\r\n\r\n    def distance_to(self, point: 'Point2D') -> float:\r\n        \"\"\" Calculate distance to another point \"\"\"\r\n\r\n\r\n@dataclass\r\nclass Blob(Point2D):\r\n    diameter: float\r\n```\r\n\r\nThis seems to run into two main issues. First, `Blob` can't add a required `diameter` field as it would cause a non-default argument to follow a default argument in the generated `__init__`. This could be worked around with a custom `__init__`, but that would still leave us with the second problem: the order of the fields in `repr` and `astuple`. Ideally we'd want those to be: `x`, `y`, `diameter`, `units` as that makes more sense than `x`, `y`, `units`, `diameter`.\r\n\r\nWhat if class inheritance where the child class defines a superset of the parent's fields was a special case which re-defined the order of the fields? Would turn the above `Blob` definition into:\r\n\r\n```python\r\n@dataclass\r\nclass Blob(Point2D):\r\n    x: float\r\n    y: float\r\n    diameter: float\r\n    units: Unit = Unit.Inches\r\n```\r\n\r\nI suppose this is a bit 'dangerous' as it's magic and someone could inadvertently redefine the order of the fields while subclassing when they simply intended to give all fields a default, but listed them in a slightly different order. As such, perhaps it could be enabled by a new keyword arg to `dataclass`, such as `allow_reorder`.\r\n\r\nImplementation could be pretty straightforward, before [line 802](https://github.com/ericvsmith/dataclasses/blob/master/dataclasses.py#L802) add something like:\r\n\r\n```python\r\nif set([f.name for f in cls_fields]).issuperset(set(fields.keys())):\r\n    fields.clear()\r\n```\r\n\r\nActually, while typing this all up I realized that the implementation was simple enough that I just went ahead and did it in my own fork, 183ccfea97feab12a657bd1971db816a7ae0998d. Only played with it a little but so far so good, it's not a very complicated change.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/127", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/127/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/127/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/127", "id": 323304357, "node_id": "MDU6SXNzdWUzMjMzMDQzNTc=", "number": 127, "title": "New release?", "user": {"login": "ukch", "id": 973865, "node_id": "MDQ6VXNlcjk3Mzg2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/973865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ukch", "html_url": "https://github.com/ukch", "followers_url": "https://api.github.com/users/ukch/followers", "following_url": "https://api.github.com/users/ukch/following{/other_user}", "gists_url": "https://api.github.com/users/ukch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ukch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ukch/subscriptions", "organizations_url": "https://api.github.com/users/ukch/orgs", "repos_url": "https://api.github.com/users/ukch/repos", "events_url": "https://api.github.com/users/ukch/events{/privacy}", "received_events_url": "https://api.github.com/users/ukch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-15T17:02:49Z", "updated_at": "2018-05-18T11:14:19Z", "closed_at": "2018-05-18T11:14:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was wondering if you'd be able to do a new numbered release soon? The previous licensing issue (#123) means I can't package any previous version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/126", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/126/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/126/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/126", "id": 322359289, "node_id": "MDU6SXNzdWUzMjIzNTkyODk=", "number": 126, "title": "Keep type info in InitVar", "user": {"login": "reinhrst", "id": 1173730, "node_id": "MDQ6VXNlcjExNzM3MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1173730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reinhrst", "html_url": "https://github.com/reinhrst", "followers_url": "https://api.github.com/users/reinhrst/followers", "following_url": "https://api.github.com/users/reinhrst/following{/other_user}", "gists_url": "https://api.github.com/users/reinhrst/gists{/gist_id}", "starred_url": "https://api.github.com/users/reinhrst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reinhrst/subscriptions", "organizations_url": "https://api.github.com/users/reinhrst/orgs", "repos_url": "https://api.github.com/users/reinhrst/repos", "events_url": "https://api.github.com/users/reinhrst/events{/privacy}", "received_events_url": "https://api.github.com/users/reinhrst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-11T16:32:09Z", "updated_at": "2018-05-18T14:38:39Z", "closed_at": "2018-05-14T13:20:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Right now `InitVar[something] is InitVar`. This means that any type-information is removed, and it will (for instance) be impossible to do type info checks on the generated `__init__`, or find out anything about the type of the variable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/125", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/125/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/125/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/125", "id": 321861315, "node_id": "MDU6SXNzdWUzMjE4NjEzMTU=", "number": 125, "title": "mypy: unexpected keyword-argument", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-10T09:06:55Z", "updated_at": "2018-05-14T13:20:47Z", "closed_at": "2018-05-14T13:20:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the following class:\r\n\r\n```python\r\nimport dataclasses as dc\r\n\r\n@dc.dataclass\r\nclass Dimmension:\r\n    kind: str\r\n\r\n    @classmethod\r\n    def create(\r\n            cls,\r\n            kind,\r\n        ) -> 'Dimmension':\r\n        return cls(kind=kind)\r\n```\r\n\r\nthe last line of the constructor actually throws a mypy error: `Unexpected keyword argument \"kind\" for \"Dimmension\"`.\r\n\r\nRemoving `\"Dimmension\"` as the return annotation from `create` removes the error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/123", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/123/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/123/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/123", "id": 315428492, "node_id": "MDU6SXNzdWUzMTU0Mjg0OTI=", "number": 123, "title": "Clarify license", "user": {"login": "ukch", "id": 973865, "node_id": "MDQ6VXNlcjk3Mzg2NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/973865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ukch", "html_url": "https://github.com/ukch", "followers_url": "https://api.github.com/users/ukch/followers", "following_url": "https://api.github.com/users/ukch/following{/other_user}", "gists_url": "https://api.github.com/users/ukch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ukch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ukch/subscriptions", "organizations_url": "https://api.github.com/users/ukch/orgs", "repos_url": "https://api.github.com/users/ukch/repos", "events_url": "https://api.github.com/users/ukch/events{/privacy}", "received_events_url": "https://api.github.com/users/ukch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-04-18T10:48:42Z", "updated_at": "2018-04-19T09:34:49Z", "closed_at": "2018-04-19T09:34:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am looking at packaging this project for Debian, and I noticed that while setup.py mentions the MIT license, there is no explicit license file in the repo. In order to be 100% legal, please could you provide a license file?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/120", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/120/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/120/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/120", "id": 310242835, "node_id": "MDU6SXNzdWUzMTAyNDI4MzU=", "number": 120, "title": "custom_init option", "user": {"login": "sky-code", "id": 5621185, "node_id": "MDQ6VXNlcjU2MjExODU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5621185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sky-code", "html_url": "https://github.com/sky-code", "followers_url": "https://api.github.com/users/sky-code/followers", "following_url": "https://api.github.com/users/sky-code/following{/other_user}", "gists_url": "https://api.github.com/users/sky-code/gists{/gist_id}", "starred_url": "https://api.github.com/users/sky-code/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sky-code/subscriptions", "organizations_url": "https://api.github.com/users/sky-code/orgs", "repos_url": "https://api.github.com/users/sky-code/repos", "events_url": "https://api.github.com/users/sky-code/events{/privacy}", "received_events_url": "https://api.github.com/users/sky-code/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-31T14:00:32Z", "updated_at": "2018-05-14T13:23:42Z", "closed_at": "2018-05-14T13:23:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Init-only variables and `__post_init__ ` can be replaced with `custom_init` option which is force dataclass to generate ``__init__`` method with some different name like `__dataclass_init__` and this method can be used from `__init__` like a `super().__init__()` in inheritance, an example:\r\n```python\r\n@dataclass(custom_init=True)\r\nclass C:\r\n    a: float\r\n    b: float\r\n    c: float = field(init=False)\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        self.__dataclass_init__(args, kwargs) # < generated init method\r\n        self.c = kwargs['a'] + kwargs['b'] # < custom init code\r\n```\r\nAs an result we have custom init method, without overhead for `__post_init__ ` and `InitVar `, this pattern much simpler", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/118", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/118/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/118/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/118", "id": 294185923, "node_id": "MDU6SXNzdWUyOTQxODU5MjM=", "number": 118, "title": "astuple transform nested by default is uncommon use case", "user": {"login": "guyskk", "id": 6367792, "node_id": "MDQ6VXNlcjYzNjc3OTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/6367792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guyskk", "html_url": "https://github.com/guyskk", "followers_url": "https://api.github.com/users/guyskk/followers", "following_url": "https://api.github.com/users/guyskk/following{/other_user}", "gists_url": "https://api.github.com/users/guyskk/gists{/gist_id}", "starred_url": "https://api.github.com/users/guyskk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guyskk/subscriptions", "organizations_url": "https://api.github.com/users/guyskk/orgs", "repos_url": "https://api.github.com/users/guyskk/repos", "events_url": "https://api.github.com/users/guyskk/events{/privacy}", "received_events_url": "https://api.github.com/users/guyskk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-04T10:12:04Z", "updated_at": "2018-02-04T16:18:40Z", "closed_at": "2018-02-04T12:33:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n@dataclass\r\nclass Point:\r\n     x: int\r\n     y: int\r\n\r\n@dataclass\r\nclass Line:\r\n    start: Point\r\n    end: Point\r\n\r\nline = Line(Point(10, 20), Point(20, 20))\r\np1, p2 = astuple(line)\r\n```\r\nI expect p1 and p2 is Point object.\r\nAnd I can't see any reason to convert them to tuple.\r\nIn addition, it can't build back a line by `Line(p1, p2)` because p1, p2 is not Point object.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/117", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/117/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/117/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/117", "id": 292164406, "node_id": "MDU6SXNzdWUyOTIxNjQ0MDY=", "number": 117, "title": "Why", "user": {"login": "coleifer", "id": 119974, "node_id": "MDQ6VXNlcjExOTk3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/119974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coleifer", "html_url": "https://github.com/coleifer", "followers_url": "https://api.github.com/users/coleifer/followers", "following_url": "https://api.github.com/users/coleifer/following{/other_user}", "gists_url": "https://api.github.com/users/coleifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/coleifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coleifer/subscriptions", "organizations_url": "https://api.github.com/users/coleifer/orgs", "repos_url": "https://api.github.com/users/coleifer/repos", "events_url": "https://api.github.com/users/coleifer/events{/privacy}", "received_events_url": "https://api.github.com/users/coleifer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-28T00:13:03Z", "updated_at": "2018-01-28T00:25:46Z", "closed_at": "2018-01-28T00:25:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have read the pep and am at a complete loss why this is being included in the standard library. The pep acknowledges the primacy of the attrs project, as well as the benefit it has of being able to issue releases as often as necessary. Why, then, is this project, whose authors seem aware of it's inferiority, being added to the stdlib?\r\n\r\nI've always used namedtuple, which can be subclassed and use the `__new__` method for specifying defaults, and found it perfect for this type of thing. When you consider all the noise added by the *forced* type annotations, are you actually saving anyone typing? Seems misguided and above all, unpythonic. I know I'm late to the party, but this just seems like another foolish addition to a language growing more bloated each release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/116", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/116/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/116/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/116", "id": 289646850, "node_id": "MDU6SXNzdWUyODk2NDY4NTA=", "number": 116, "title": "NameError when referencing cdataclass variable within list comprehension", "user": {"login": "andymcarter", "id": 22293319, "node_id": "MDQ6VXNlcjIyMjkzMzE5", "avatar_url": "https://avatars2.githubusercontent.com/u/22293319?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andymcarter", "html_url": "https://github.com/andymcarter", "followers_url": "https://api.github.com/users/andymcarter/followers", "following_url": "https://api.github.com/users/andymcarter/following{/other_user}", "gists_url": "https://api.github.com/users/andymcarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/andymcarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andymcarter/subscriptions", "organizations_url": "https://api.github.com/users/andymcarter/orgs", "repos_url": "https://api.github.com/users/andymcarter/repos", "events_url": "https://api.github.com/users/andymcarter/events{/privacy}", "received_events_url": "https://api.github.com/users/andymcarter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-18T14:25:41Z", "updated_at": "2018-01-18T17:45:59Z", "closed_at": "2018-01-18T14:33:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "As described in the title, this file won't run despite all the variables being correctly defined. If I remove the reference to 'z' in the list comprehension it seems to be fine.\r\n\r\n```\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass TestDC:\r\n    a = 3\r\n    b = 4\r\n    c = 5\r\n    z = 10\r\n    \r\n    alphalist = [a,b,c]\r\n    \r\n    d,e,f = [(i+1)*z for i in alphalist]\r\n```\r\n\r\nPython 3.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/115", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/115/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/115/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/115", "id": 285149281, "node_id": "MDU6SXNzdWUyODUxNDkyODE=", "number": 115, "title": "Please explain some parts of your code.", "user": {"login": "godaygo", "id": 20781495, "node_id": "MDQ6VXNlcjIwNzgxNDk1", "avatar_url": "https://avatars3.githubusercontent.com/u/20781495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godaygo", "html_url": "https://github.com/godaygo", "followers_url": "https://api.github.com/users/godaygo/followers", "following_url": "https://api.github.com/users/godaygo/following{/other_user}", "gists_url": "https://api.github.com/users/godaygo/gists{/gist_id}", "starred_url": "https://api.github.com/users/godaygo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godaygo/subscriptions", "organizations_url": "https://api.github.com/users/godaygo/orgs", "repos_url": "https://api.github.com/users/godaygo/repos", "events_url": "https://api.github.com/users/godaygo/events{/privacy}", "received_events_url": "https://api.github.com/users/godaygo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-12-29T20:12:21Z", "updated_at": "2018-01-02T17:57:46Z", "closed_at": "2018-01-02T02:15:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to re-implement yours dataclass idea through a `metaclass` instead of a decorator, and I'm a little bit confused about these [lines](https://github.com/ericvsmith/dataclasses/blob/e537aa52e59774cead498b252b8edc52699aadc5/dataclasses.py#L661-L697):\r\n```python\r\ndef astuple(obj, *, tuple_factory=tuple):\r\n    \"\"\"Return the fields of a dataclass instance as a new tuple of field values.\r\n\r\n    Example usage::\r\n\r\n      @dataclass\r\n      class C:\r\n          x: int\r\n          y: int\r\n\r\n    c = C(1, 2)\r\n    assert asdtuple(c) == (1, 2)\r\n\r\n    If given, 'tuple_factory' will be used instead of built-in tuple.\r\n    The function applies recursively to field values that are\r\n    dataclass instances. This will also look into built-in containers:\r\n    tuples, lists, and dicts.\r\n    \"\"\"\r\n\r\n\r\n    if not _isdataclass(obj):\r\n        raise TypeError(\"astuple() should be called on dataclass instances\")\r\n    return _astuple_inner(obj, tuple_factory)\r\n\r\n\r\ndef _astuple_inner(obj, tuple_factory):\r\n    if _isdataclass(obj):\r\n        result = []\r\n        for f in fields(obj):\r\n            value = _astuple_inner(getattr(obj, f.name), tuple_factory)\r\n            result.append(value)\r\n        return tuple_factory(result)\r\n    elif isinstance(obj, (list, tuple)):\r\n        return type(obj)(_astuple_inner(v, tuple_factory) for v in obj)\r\n    elif isinstance(obj, dict):\r\n        return type(obj)((_astuple_inner(k, tuple_factory), _astuple_inner(v, tuple_factory))\r\n                          for k, v in obj.items())\r\n    else:\r\n        return deepcopy(obj)\r\n```\r\n\r\nI do not understand how to get into the `elif` branches, because `if not _isdataclass(obj):` in `astuple` and  `if _isdataclass(obj)` in `_astuple_inner:` are mutually exclusive (the same for `asdict` and `_asdict_inner`). What I'm missing? Thank you.\r\n\r\nAlso there is a typo in [docstring here](https://github.com/ericvsmith/dataclasses/blob/e537aa52e59774cead498b252b8edc52699aadc5/dataclasses.py#L672):\r\n```python\r\n    assert asdtuple(c) == (1, 2)\r\n```\r\nshould be :\r\n\r\n```python\r\n    assert astuple(c) == (1, 2)\r\n```\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/114", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/114/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/114/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/114", "id": 284524518, "node_id": "MDU6SXNzdWUyODQ1MjQ1MTg=", "number": 114, "title": "Consider exposing _MISSING in the public API", "user": {"login": "tommikaikkonen", "id": 2487359, "node_id": "MDQ6VXNlcjI0ODczNTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2487359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommikaikkonen", "html_url": "https://github.com/tommikaikkonen", "followers_url": "https://api.github.com/users/tommikaikkonen/followers", "following_url": "https://api.github.com/users/tommikaikkonen/following{/other_user}", "gists_url": "https://api.github.com/users/tommikaikkonen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommikaikkonen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommikaikkonen/subscriptions", "organizations_url": "https://api.github.com/users/tommikaikkonen/orgs", "repos_url": "https://api.github.com/users/tommikaikkonen/repos", "events_url": "https://api.github.com/users/tommikaikkonen/events{/privacy}", "received_events_url": "https://api.github.com/users/tommikaikkonen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-26T09:26:35Z", "updated_at": "2017-12-26T12:44:06Z", "closed_at": "2017-12-26T12:44:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wrote [an integration for `dataclasses` in a pretty printer library](https://github.com/tommikaikkonen/prettyprinter/blob/b2a1e30884316349e54f094eedd4cc5139b4838a/prettyprinter/extras/dataclasses.py). In order for the integration to work well, I need the `_MISSING` constant value to determine if a field default or default factory is set.\r\n\r\n`attrs` uses a public constant `attr.NOTHING` to facilitate that, whereas PEP557 explicitly says that `_MISSING` is private:\r\n\r\n>The `_MISSING` value is a sentinel object used to detect if the default and default_factory parameters are provided. Users should never use `_MISSING` or depend on its value. This sentinel is used because `None` is a valid value for default.\r\n\r\nFor code that inspects dataclasses, it is highly useful to be able to determine if a field default is set or not. The current public API doesn't provide a way to do that.\r\n\r\n[Discussion on whether `attr.NOTHING` should be public or private](https://github.com/python-attrs/attrs/issues/254)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/112", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/112/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/112/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/112", "id": 279563334, "node_id": "MDU6SXNzdWUyNzk1NjMzMzQ=", "number": 112, "title": "Error if there are Default Fields in the Parent Class", "user": {"login": "vansivallab", "id": 2260936, "node_id": "MDQ6VXNlcjIyNjA5MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2260936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vansivallab", "html_url": "https://github.com/vansivallab", "followers_url": "https://api.github.com/users/vansivallab/followers", "following_url": "https://api.github.com/users/vansivallab/following{/other_user}", "gists_url": "https://api.github.com/users/vansivallab/gists{/gist_id}", "starred_url": "https://api.github.com/users/vansivallab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vansivallab/subscriptions", "organizations_url": "https://api.github.com/users/vansivallab/orgs", "repos_url": "https://api.github.com/users/vansivallab/repos", "events_url": "https://api.github.com/users/vansivallab/events{/privacy}", "received_events_url": "https://api.github.com/users/vansivallab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-05T23:04:32Z", "updated_at": "2019-06-12T19:33:54Z", "closed_at": "2017-12-29T19:20:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "A `TypeError` is raised when trying to create a subclass off a class which contains a default field.\r\n```python\r\n@dataclass\r\nclass Foo:\r\n    some_default: dict = field(default_factory=dict)\r\n\r\n@dataclass\r\nclass Bar(Foo):\r\n    other_field: int\r\n```\r\n\r\nError output:\r\n```python\r\n      5 @dataclass\r\n----> 6 class Bar(Foo):\r\n      7     other_field: int\r\n      8\r\n\r\n~/.pyenv/versions/3.6.2/envs/clover_pipeline/lib/python3.6/site-packages/dataclasses.py in dataclass(_cls, init, repr, eq, order, hash, frozen)\r\n    751\r\n    752     # We're called as @dataclass, with a class.\r\n--> 753     return wrap(_cls)\r\n    754\r\n    755\r\n\r\n~/.pyenv/versions/3.6.2/envs/clover_pipeline/lib/python3.6/site-packages/dataclasses.py in wrap(cls)\r\n    743\r\n    744     def wrap(cls):\r\n--> 745         return _process_class(cls, repr, eq, order, hash, init, frozen)\r\n    746\r\n    747     # See if we're being called as @dataclass or @dataclass().\r\n\r\n~/.pyenv/versions/3.6.2/envs/clover_pipeline/lib/python3.6/site-packages/dataclasses.py in _process_class(cls, repr, eq, order, hash, init, frozen)\r\n    675                                 #  in __init__.  Use \"self\" if possible.\r\n    676                                 '__dataclass_self__' if 'self' in fields\r\n--> 677                                     else 'self',\r\n    678                                 ))\r\n    679     if repr:\r\n\r\n~/.pyenv/versions/3.6.2/envs/clover_pipeline/lib/python3.6/site-packages/dataclasses.py in _init_fn(fields, frozen, has_post_init, self_name)\r\n    422                 seen_default = True\r\n    423             elif seen_default:\r\n--> 424                 raise TypeError(f'non-default argument {f.name!r} '\r\n    425                                 'follows default argument')\r\n    426\r\n\r\nTypeError: non-default argument 'other_field' follows default argument\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/110", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/110/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/110/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/110", "id": 278826132, "node_id": "MDU6SXNzdWUyNzg4MjYxMzI=", "number": 110, "title": "PEP 8 function names: asdict -> as_dict, astuple -> as_tuple", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-12-03T22:13:00Z", "updated_at": "2018-06-07T22:02:41Z", "closed_at": "2017-12-04T10:38:10Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/108", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/108/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/108/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/108", "id": 278751996, "node_id": "MDU6SXNzdWUyNzg3NTE5OTY=", "number": 108, "title": "fields() is defined as returning a list, but actually returns an OrderedDict. Change it to return a tuple of Field objects.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-03T07:23:40Z", "updated_at": "2017-12-03T14:35:14Z", "closed_at": "2017-12-03T14:35:14Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Also, I think it should actually return a tuple instead of a list. The returned `Field` objects already contain the field name. `attrs`' equivalent API (also called `fields()`) returns a tuple.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/106", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/106/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/106/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/106", "id": 278679133, "node_id": "MDU6SXNzdWUyNzg2NzkxMzM=", "number": 106, "title": "Simplify InitVar implementation as much as possible", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-02T12:08:10Z", "updated_at": "2017-12-02T18:46:22Z", "closed_at": "2017-12-02T18:46:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "For at least the initial version of this, I'm planning on simplifying `InitVar` as much as possible. The current version was copied from `typing.ClassVar`, and supports features we don't need here.\r\n\r\nI'm sure I'm going to over-simplify it, but I want to start simple and add actually needed features, instead of starting with all possible features and trying to simplify. Plus, if PEP 560 is accepted I suspect changes will be required, anyway. So I'll wait to see how that shakes out before doing anything else.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/104", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/104/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/104/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/104", "id": 278557873, "node_id": "MDU6SXNzdWUyNzg1NTc4NzM=", "number": 104, "title": "Make order=False by default?", "user": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-12-01T18:42:26Z", "updated_at": "2017-12-01T22:44:51Z", "closed_at": "2017-12-01T22:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is kind of a small nit, but I'm wondering whether the `order` parameter should be `False` by default instead of `True`? I suspect that most dataclasses don't have a natural ordering associated with them and it'd be better to throw a `TypeError` rather than returning at all. \r\n\r\nThanks for creating this library though! I'm can't wait to see this in the Python standard library!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/100", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/100/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/100/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/100", "id": 278024566, "node_id": "MDU6SXNzdWUyNzgwMjQ1NjY=", "number": 100, "title": "__name__ vs __qualname__ in dataclass __repr__", "user": {"login": "ariebovenberg", "id": 5999858, "node_id": "MDQ6VXNlcjU5OTk4NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/5999858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ariebovenberg", "html_url": "https://github.com/ariebovenberg", "followers_url": "https://api.github.com/users/ariebovenberg/followers", "following_url": "https://api.github.com/users/ariebovenberg/following{/other_user}", "gists_url": "https://api.github.com/users/ariebovenberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ariebovenberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ariebovenberg/subscriptions", "organizations_url": "https://api.github.com/users/ariebovenberg/orgs", "repos_url": "https://api.github.com/users/ariebovenberg/repos", "events_url": "https://api.github.com/users/ariebovenberg/events{/privacy}", "received_events_url": "https://api.github.com/users/ariebovenberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2017-11-30T07:37:44Z", "updated_at": "2017-12-01T01:13:50Z", "closed_at": "2017-12-01T01:13:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the rationale for using the class `__name__` instead of `__qualname__` in a dataclass `__repr__`?\r\nIt seems like using `__qualname__` would keep nesting visible (the default for classes since PEP3155) without sacrificing succinctness for top-level classes.\r\n\r\nExample to illustrate:\r\n\r\n```python\r\n@dataclass\r\nclass A:\r\n     pass\r\n\r\nclass B:\r\n    @dataclass\r\n    class C:\r\n        pass\r\n\r\ndef factory():\r\n    @dataclass\r\n    class D:\r\n        pass\r\n    return D\r\nD = factory()\r\n```\r\n\r\nwith `__name__` (current situation):\r\n\r\n```python\r\n>>> A()\r\nA()\r\n>>> B.C()\r\nC()\r\n>>> D()\r\nD()\r\n```\r\n\r\nwith `__qualname__`:\r\n\r\n```python\r\n>>> A()\r\nA()\r\n>>> B.C()\r\nB.C()\r\n>>> D()\r\nfactory.<locals>.D()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/99", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/99/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/99/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/99", "id": 277953430, "node_id": "MDU6SXNzdWUyNzc5NTM0MzA=", "number": 99, "title": "Should isdataclass return True for both classes and instances?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-11-30T00:08:28Z", "updated_at": "2017-12-01T12:51:42Z", "closed_at": "2017-12-01T07:47:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Raised by Carl Meyer in https://mail.python.org/pipermail/python-dev/2017-November/150850.html.\r\n\r\nI think he's probably correct. The current behavior, where it only works on instances, is surprising. The equivalent `attrs` API, `attr.has()`, returns `True` for both classes and instances.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/98", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/98/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/98/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/98", "id": 277886739, "node_id": "MDU6SXNzdWUyNzc4ODY3Mzk=", "number": 98, "title": "Issue 95 glitch", "user": {"login": "JimJJewett", "id": 12071259, "node_id": "MDQ6VXNlcjEyMDcxMjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/12071259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimJJewett", "html_url": "https://github.com/JimJJewett", "followers_url": "https://api.github.com/users/JimJJewett/followers", "following_url": "https://api.github.com/users/JimJJewett/following{/other_user}", "gists_url": "https://api.github.com/users/JimJJewett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimJJewett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimJJewett/subscriptions", "organizations_url": "https://api.github.com/users/JimJJewett/orgs", "repos_url": "https://api.github.com/users/JimJJewett/repos", "events_url": "https://api.github.com/users/JimJJewett/events{/privacy}", "received_events_url": "https://api.github.com/users/JimJJewett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-29T19:58:37Z", "updated_at": "2017-11-29T20:57:22Z", "closed_at": "2017-11-29T20:57:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"If any generated method already exists on the class, an AttributeError will be raised.\"\r\n\r\n(1)  A later commit changed this to TypeError in the implementation, but did not update the PEP.\r\n\r\n(2)  This sentence should probably be moved up to just after the bulleted list of parameters.  Right now, it looks like a detail of processing a simple (data) field, and is therefore easy to miss.  (Alternatively, maybe the field processing should all be under Field objects section?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/96", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/96/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/96/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/96", "id": 277176376, "node_id": "MDU6SXNzdWUyNzcxNzYzNzY=", "number": 96, "title": "Ordering and lack of defaults?", "user": {"login": "JimJJewett", "id": 12071259, "node_id": "MDQ6VXNlcjEyMDcxMjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/12071259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimJJewett", "html_url": "https://github.com/JimJJewett", "followers_url": "https://api.github.com/users/JimJJewett/followers", "following_url": "https://api.github.com/users/JimJJewett/following{/other_user}", "gists_url": "https://api.github.com/users/JimJJewett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimJJewett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimJJewett/subscriptions", "organizations_url": "https://api.github.com/users/JimJJewett/orgs", "repos_url": "https://api.github.com/users/JimJJewett/repos", "events_url": "https://api.github.com/users/JimJJewett/events{/privacy}", "received_events_url": "https://api.github.com/users/JimJJewett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-27T21:32:34Z", "updated_at": "2017-11-27T21:56:09Z", "closed_at": "2017-11-27T21:56:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "What happens if a field without a default value follows one with a default value?  (This may happen directly, or as the result of inheritance).  e.g. from the PEP example, if quantity had been defined before unit_price?\r\n\r\n@dataclass\r\nclass InventoryItem:\r\n    '''Class for keeping track of an item in inventory.'''\r\n    name: str\r\n    quantity_on_hand: int = 0\r\n    unit_price: float\r\n\r\nIf the answer is raising an Exception, that is fine ... but this should be explicit, and should also warn about the way it can arise from inheritance.  e.g., \r\n\r\n@dataclass\r\nclass A:\r\n    a: int\r\n\r\n@dataclass\r\nclass B(A):\r\n    b: int=4\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/95", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/95/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/95/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/95", "id": 277163318, "node_id": "MDU6SXNzdWUyNzcxNjMzMTg=", "number": 95, "title": "What about conflicting methods?", "user": {"login": "JimJJewett", "id": 12071259, "node_id": "MDQ6VXNlcjEyMDcxMjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/12071259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimJJewett", "html_url": "https://github.com/JimJJewett", "followers_url": "https://api.github.com/users/JimJJewett/followers", "following_url": "https://api.github.com/users/JimJJewett/following{/other_user}", "gists_url": "https://api.github.com/users/JimJJewett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimJJewett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimJJewett/subscriptions", "organizations_url": "https://api.github.com/users/JimJJewett/orgs", "repos_url": "https://api.github.com/users/JimJJewett/repos", "events_url": "https://api.github.com/users/JimJJewett/events{/privacy}", "received_events_url": "https://api.github.com/users/JimJJewett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-27T20:46:38Z", "updated_at": "2017-11-27T21:40:39Z", "closed_at": "2017-11-27T21:40:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a way to tell the decorator not to bother creating an __init__ or __repr__ ... but what happens if that more complicated form isn't used, but the user explicitly defines such methods?\r\n\r\ne.g.\r\n\r\n@dataclass\r\nclass C:\r\n    def __repr__(self):\r\n        return \"ugh, a C class\"\r\n\r\nwill the explicit __repr__ be silently thrown away?  Will an error be raised?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/94", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/94/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/94/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/94", "id": 277162548, "node_id": "MDU6SXNzdWUyNzcxNjI1NDg=", "number": 94, "title": "Please add inheritance example for __init__ from ancestor classes", "user": {"login": "JimJJewett", "id": 12071259, "node_id": "MDQ6VXNlcjEyMDcxMjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/12071259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimJJewett", "html_url": "https://github.com/JimJJewett", "followers_url": "https://api.github.com/users/JimJJewett/followers", "following_url": "https://api.github.com/users/JimJJewett/following{/other_user}", "gists_url": "https://api.github.com/users/JimJJewett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimJJewett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimJJewett/subscriptions", "organizations_url": "https://api.github.com/users/JimJJewett/orgs", "repos_url": "https://api.github.com/users/JimJJewett/repos", "events_url": "https://api.github.com/users/JimJJewett/events{/privacy}", "received_events_url": "https://api.github.com/users/JimJJewett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-11-27T20:44:11Z", "updated_at": "2018-11-29T20:26:11Z", "closed_at": "2018-02-11T15:05:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "In particular, show how to ensure that super().__init__() is called, since (if I understand correctly), it should be called from __post_init__ to ensure that it happens.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/93", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/93/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/93/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/93", "id": 277160792, "node_id": "MDU6SXNzdWUyNzcxNjA3OTI=", "number": 93, "title": "Better default for List, Set, Dict?", "user": {"login": "JimJJewett", "id": 12071259, "node_id": "MDQ6VXNlcjEyMDcxMjU5", "avatar_url": "https://avatars2.githubusercontent.com/u/12071259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimJJewett", "html_url": "https://github.com/JimJJewett", "followers_url": "https://api.github.com/users/JimJJewett/followers", "following_url": "https://api.github.com/users/JimJJewett/following{/other_user}", "gists_url": "https://api.github.com/users/JimJJewett/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimJJewett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimJJewett/subscriptions", "organizations_url": "https://api.github.com/users/JimJJewett/orgs", "repos_url": "https://api.github.com/users/JimJJewett/repos", "events_url": "https://api.github.com/users/JimJJewett/events{/privacy}", "received_events_url": "https://api.github.com/users/JimJJewett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-27T20:38:09Z", "updated_at": "2017-11-28T00:23:00Z", "closed_at": "2017-11-28T00:23:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Given that List, Set, and Dict are markers from typing, rather than real classes, would it be reasonable to automatically fill in the default call to field?\r\n\r\ne.g., should the Dict of\r\n\r\n    constraints: Dict[str, str]\r\n\r\nwithout a default value imply\r\n\r\n    constraints: Dict[str, str] = field(default_factory=dict)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/92", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/92/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/92/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/92", "id": 277012412, "node_id": "MDU6SXNzdWUyNzcwMTI0MTI=", "number": 92, "title": "Support string type annotations", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-11-27T13:08:04Z", "updated_at": "2018-05-14T13:24:28Z", "closed_at": "2018-05-14T13:24:28Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The implementation needs some work with regards to string annotations. This only affects `ClassVar` and `InitVar`, since other annotations are ignored.\r\n\r\n```\r\n@dataclass\r\nclass C:\r\n   context: \"InitVar[context]\"\r\n   count: \"ClassVar[Counter]\"\r\n```\r\n\r\nThis is all the more important with regards to PEP 563, \"Postponed Evaluation of Annotations\".\r\n\r\nI'd like to keep the property that typing isn't imported by dataclasses.py, so maybe I'll resort to inspecting the string. I'll probably wait until PEP 563 is finalized before doing anything about this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/90", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/90/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/90/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/90", "id": 276826253, "node_id": "MDU6SXNzdWUyNzY4MjYyNTM=", "number": 90, "title": "Change the names of the class-level \"eq\" and \"compare\" parameters?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-26T13:51:08Z", "updated_at": "2017-11-27T03:50:47Z", "closed_at": "2017-11-26T18:20:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "\"compare\" makes no sense: it's about ordering. It should be changed to \"order\".\r\n\r\nWhat about \"eq\"? It's sort of cryptic. Should it be \"compare\"? Or is that confusing with the historical use of \"cmp\"?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/88", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/88/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/88/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/88", "id": 276809296, "node_id": "MDU6SXNzdWUyNzY4MDkyOTY=", "number": 88, "title": "Change combination of eq=False and compare=True to a ValueError", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-26T08:41:11Z", "updated_at": "2017-11-26T13:47:35Z", "closed_at": "2017-11-26T13:47:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Carl Meyer suggests in https://mail.python.org/pipermail/python-dev/2017-November/150850.html to make `@dataclass(eq=False, compare=True)` be an error. Currently if `compare=True` then `eq` is forced to be `True`, ignoring what the user supplied.\r\n\r\nI agree that instead of silently ignoring this combination, it would be better if a `ValueError` were raised.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/87", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/87/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/87/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/87", "id": 276768442, "node_id": "MDU6SXNzdWUyNzY3Njg0NDI=", "number": 87, "title": "Change the field-level cmp param to be named compare", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-25T18:25:39Z", "updated_at": "2017-11-25T20:24:57Z", "closed_at": "2017-11-25T20:24:57Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This matches the class-level param.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/85", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/85/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/85/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/85", "id": 276768208, "node_id": "MDU6SXNzdWUyNzY3NjgyMDg=", "number": 85, "title": "Make a final editorial pass through the PEP before posting it to python-dev", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-25T18:21:19Z", "updated_at": "2017-11-25T20:24:16Z", "closed_at": "2017-11-25T20:24:16Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/83", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/83/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/83/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/83", "id": 276758649, "node_id": "MDU6SXNzdWUyNzY3NTg2NDk=", "number": 83, "title": "PEP: post-init parameters should not be in the rejected ideas section.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-25T15:43:53Z", "updated_at": "2017-11-25T16:26:02Z", "closed_at": "2017-11-25T16:26:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "They were added with PR #80, but this section of the PEP was not updated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/79", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/79/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/79/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/79", "id": 276695145, "node_id": "MDU6SXNzdWUyNzY2OTUxNDU=", "number": 79, "title": "PEP: Mutable default values section needs work", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-24T20:31:25Z", "updated_at": "2017-11-25T15:24:59Z", "closed_at": "2017-11-25T15:24:59Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The introductory text was not changed when the example was modified. I think the example needs to reflect the use of class attributes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/78", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/78/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/78/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/78", "id": 276694742, "node_id": "MDU6SXNzdWUyNzY2OTQ3NDI=", "number": 78, "title": "Drop the requirement that an init=False field have either default= or default_factory=", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-24T20:28:32Z", "updated_at": "2017-11-25T04:26:00Z", "closed_at": "2017-11-25T04:26:00Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I think this decision is best left to the class designer. It's possible, for example, that such a field is initialized in `__post_init__()`. There's no reason such a field needs to have a default value.\r\n\r\nThis does lead to the possibility of uninitialized fields, but that's no different from any other class.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/77", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/77/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/77/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/77", "id": 276655931, "node_id": "MDU6SXNzdWUyNzY2NTU5MzE=", "number": 77, "title": "Should the replace() function be renamed?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-11-24T16:05:42Z", "updated_at": "2017-11-29T08:53:21Z", "closed_at": "2017-11-29T08:53:21Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The name makes sense for `namedtuple`, where the fields are truly replaced. But now that the function creates a new object using `__init__` and not longer has the post-copy functionality, it doesn't really make sense for Data Classes. For example the fact that `init=False` fields are not copied from the original object makes `replace()` a name that doesn't really make sense.\r\n\r\n`attrs` calls the equivalent function `evolve()`, which I don't really like, either. But I don't have a good name to offer up. Maybe I'll leave it `replace()`, and let python-dev argue about it when I post the PEP there. That should generate a few hundred emails!\r\n\r\nFor what it's worth, `attrs` has an API that's similar to `namedtuple`'s `replace()`. They call that one `assoc()`, but it's deprecated. I don't think that name makes sense, either.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/75", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/75/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/75/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/75", "id": 276164580, "node_id": "MDU6SXNzdWUyNzYxNjQ1ODA=", "number": 75, "title": "Which fields to expose in dataclasses.fields()?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-22T18:21:41Z", "updated_at": "2017-11-24T16:00:59Z", "closed_at": "2017-11-24T16:00:58Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As pointed out in https://github.com/ericvsmith/dataclasses/issues/17#issuecomment-346228665, there are now 3 kinds of fields: regular fields, `InitVar` fields, and `ClassVar` fields.\r\n\r\nWith the addition of `InitVar`s (see #17), the internal `__dataclass_fields__` class variable now needs to store the `InitVar` fields in order to correctly compute derived class `__init__()` params. I keep track of which type each field is with an undocumented `Field._field_type` member. I don't think I even keep track of the `ClassVar` fields, since I don't need them for anything.\r\n\r\nThe question comes up: which fields are returned by `dataclasses.fields()`? As I currently have it implemented, it returns just the regular fields, not the `InitVar` or `ClassVar` fields. If we decide it needs to return the latter two, I'll have to expose the `_field_type` by renaming it, and give it better values that can be more easily consumed.\r\n\r\nI'm leaning toward only returning the regular fields. We can always expose the other field types in the future, maybe by a new param for `fields()` indicating which types to return, or by a new API like `dataclasses.all_fields()`.\r\n\r\nI see the main reason for `fields()` is for serializers and the like to see what data is in each instance, and for that they only need the regular fields. But maybe I'm not thinking big enough, and there's some use for `InitVar`s in particular.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/74", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/74/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/74/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/74", "id": 276068360, "node_id": "MDU6SXNzdWUyNzYwNjgzNjA=", "number": 74, "title": "replace() works poorly with init=False fields and __post_init__ functions", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-11-22T13:31:44Z", "updated_at": "2017-11-25T02:49:58Z", "closed_at": "2017-11-24T12:58:50Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The module-level `replace()` function is defined as taking a dataclass instance and a number of replacement values (called `changes`). A new object is created, passing to its `__init__()` the value of fields from the original object or from `changes`, if they're given.\r\n\r\nThe question then is: what to do with fields that are `init=False`? Since they're not passed in to `__init__`, there's no way to specify them on the new instance. Currently I have post-create logic which says that for each `init=False` field I set the new object's value to the original object's value.\r\n\r\nThis works great, except where the `init=False` field is initialized in `__post_init__`. If there is a `__post_init__`, then any value set there is overwritten by my post-create logic. For example:\r\n\r\n```\r\n@dataclass\r\nclass C:\r\n    i: int\r\n    j: int = field(default=None, init=False)\r\n\r\n    def __post_init__(self):\r\n        self.j = 10 * self.i\r\n\r\nc = C(1)\r\nprint(c)\r\nprint(replace(c, i=2))\r\n```\r\nProduces:\r\n```\r\nC(i=1, j=10)\r\nC(i=2, j=10)\r\n```\r\nThat is, even though the new object's `j` field is calculated in `__post_init__` to be 20, it's overwritten by the post-create logic which copies the original object's `j` value of 10 over the new object's value.\r\n\r\nThe only thing I can think of doing here is to change the post-create loop to say that it should only copy the original object's value if the new object doesn't have an attribute set for the`init=False` field. But I'm not sure how I can detect that, since all `init=False` fields must have a default value, so it actually is set on the new object, even if it's never touched by `__post_init__`.\r\n\r\nMaybe we could just raise an error if `replace()` is called on any dataclass that has an `init=False` field and an `__post_init__` method, since there's no way to know what the correct logic should be.\r\n\r\nSo:\r\n1. Do nothing, leave the post-create logic as it is now. I don't like this.\r\n2. Try to figure out if the `init=False` fields have been set in `__post_init__`, and if not copy them from the original. Probably not possible.\r\n3. Leave the current post-create logic, but make it an error to call `replace()` on a dataclass that has any `init=False` field and also has a `__post_init__` function. This is overly restrictive, but at least prevents the problem outlined here.\r\n4. Drop the post-create step. It looks like this is what `attrs` does. Also, it doesn't require that an `init=False` parameter has a default value, which adds other wrinkles.\r\n\r\nAny other approach that I'm missing?\r\n\r\n[Edited to add option 4]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/72", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/72/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/72/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/72", "id": 275210279, "node_id": "MDU6SXNzdWUyNzUyMTAyNzk=", "number": 72, "title": "Class-level compare, hash, and eq", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T00:56:48Z", "updated_at": "2017-11-24T17:47:50Z", "closed_at": "2017-11-24T17:47:50Z", "author_association": "OWNER", "active_lock_reason": null, "body": "There was a discussion on python-dev back in September about simplifying the class-level compare, hash, and eq parameters. It starts here: https://mail.python.org/pipermail/python-dev/2017-September/149481.html\r\n\r\nThis issue is a reminder for me to go back and review it, and make sure whatever decision was made works with the field-level decision about the same fields.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/70", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/70/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/70/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/70", "id": 275170610, "node_id": "MDU6SXNzdWUyNzUxNzA2MTA=", "number": 70, "title": "Rename __dataclass_post_init__ to just __post_init__.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-11-19T16:12:10Z", "updated_at": "2017-11-20T07:33:01Z", "closed_at": "2017-11-20T07:01:05Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I agree with @ilevkivskyi that we should use a shorter name, and leverage the fact that this is a stdlib object to lay claim to `__post_init__`. The longer name is annoying because users of the class have to implement a function with this name.\r\n\r\nBut I'd like to leave `__dataclass_fields__`, since that's truly an implementation detail and should never be used outside of dataclasses.py.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/69", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/69/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/69/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/69", "id": 275128577, "node_id": "MDU6SXNzdWUyNzUxMjg1Nzc=", "number": 69, "title": "Add support for per-field metadata", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-19T03:18:34Z", "updated_at": "2017-11-19T22:31:24Z", "closed_at": "2017-11-19T22:31:24Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See http://www.attrs.org/en/stable/extending.html#metadata for the equivalent functionality in attrs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/65", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/65/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/65/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/65/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/65", "id": 274267602, "node_id": "MDU6SXNzdWUyNzQyNjc2MDI=", "number": 65, "title": "Common protocol with attrs?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-15T19:00:30Z", "updated_at": "2017-11-30T12:53:20Z", "closed_at": "2017-11-30T12:53:20Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As discussed in #52, is there any way that dataclasses and attrs could share a protocol that would make things like serialization easily shareable between them?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/63", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/63/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/63/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/63", "id": 272030508, "node_id": "MDU6SXNzdWUyNzIwMzA1MDg=", "number": 63, "title": "Add a module-level helper to detect if an object is a dataclass", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-08T00:09:41Z", "updated_at": "2017-11-16T13:12:46Z", "closed_at": "2017-11-16T13:12:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This would be just checking for the existence of `_MARKER` (which is currently `\"__dataclass_fields__\"`). Proposed name `isdataclass(obj)`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/61", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/61/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/61/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/61", "id": 271589427, "node_id": "MDU6SXNzdWUyNzE1ODk0Mjc=", "number": 61, "title": "An alternative to typing.ClassVar?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2017-11-06T19:20:53Z", "updated_at": "2017-11-08T00:01:24Z", "closed_at": "2017-11-08T00:01:24Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In issue #14 we added support for `typing.ClassVar` annotations. If an annotation is a `ClassVar`, then it's considered to not be a field (that is, it's not set on instances of the dataclass, it's not in `__init__`, etc.).\r\n\r\nThere's ongoing discussion on python-ideas and python-dev about dropping the typing module from the stdlib.\r\n\r\nI'm wondering what we should do about `ClassVar` if typing is in fact dropped from the stdlib.\r\n\r\nCurrently, the code doesn't import typing. It just looks for `\"typing\"` in sys.modules, and if that's present, assumes it's the typing module and looks inside of it for `ClassVar`. I think this is a good approach. However, if typing is no longer part of the stdlib, I guess it's possible for another module named typing to be used in its place, and then I need to be more defensive about looking inside `sys.modules['typing']`. Is that case worth worrying about? I sort of think it's not, although it would be easy enough to add a `getattr(typing, 'ClassVar')` to the code.\r\n\r\nThe other thing to worry about is: what if typing is removed, but something in the stdlib wants to have a dataclass with a ClassVar? In https://mail.python.org/pipermail/python-dev/2017-November/150176.html, @ncoghlan suggested having dataclasses create its own ClassVar. Another option that's just as good, although the syntax is somewhat worse, is to add a param to `field()` that says \"this isn't really a field\". Something like:\r\n```\r\n@dataclass\r\nclass C:\r\n    x: int\r\n    classvar: field(int, not_a_field=True)\r\n```\r\nIn either event, mypy would need to know about it, to know that `__init__` for the class would only have one parameter, `x`.\r\n\r\nIf we go with any of these approaches, I think we should still keep the code in dataclasses that understands real `typing.ClassVar` fields. That seems like the most natural way to write code, outside of the stdlib.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/60", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/60/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/60/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/60", "id": 270456941, "node_id": "MDU6SXNzdWUyNzA0NTY5NDE=", "number": 60, "title": "differences / compatibility with attrs project", "user": {"login": "chadrik", "id": 63251, "node_id": "MDQ6VXNlcjYzMjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/63251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chadrik", "html_url": "https://github.com/chadrik", "followers_url": "https://api.github.com/users/chadrik/followers", "following_url": "https://api.github.com/users/chadrik/following{/other_user}", "gists_url": "https://api.github.com/users/chadrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/chadrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chadrik/subscriptions", "organizations_url": "https://api.github.com/users/chadrik/orgs", "repos_url": "https://api.github.com/users/chadrik/repos", "events_url": "https://api.github.com/users/chadrik/events{/privacy}", "received_events_url": "https://api.github.com/users/chadrik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-11-01T21:21:30Z", "updated_at": "2018-05-18T11:18:00Z", "closed_at": "2018-05-18T11:18:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be helpful to have a list of functional differences between `dataclasses` and `attrs`, broken down by `@dataclass` vs `@attr.s` and `field` vs `attr.ib`. \r\n\r\nThis would be useful and illuminating for a few reasons:\r\n\r\n---\r\n\r\nIt would make it easier to vet the logic behind, and need for, each of the proposed differences.  \r\n\r\n@hynek and @Tinche have invested years of thought into the current design:  deviating from it without fully understanding the history and reasoning behind each decision might lead to this project needlessly repeating mistakes.   I'm glad to see that the `attrs` devs have already been brought into several issues.  My hope is we can get a bird's eye view so that nothing slips through the cracks.\r\n\r\n---\r\n\r\nIf the differences aren't too great (and ideally they will not be, see above) I'd like to see a `dataclass` compatibility mode for `attrs` (e.g. `from attrs import dataclass, field`).  \r\n\r\nI'm glad that this badly-needed feature is being worked on, but sadly I'm stuck in python 2 for at least another 2 years, so it's important to me, and surely many `attrs`-users, to have an easy path to adoption once this becomes part of stdlib.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/59", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/59/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/59/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/59", "id": 262242941, "node_id": "MDU6SXNzdWUyNjIyNDI5NDE=", "number": 59, "title": "Add immutable=False parameter to dataclass", "user": {"login": "johnthagen", "id": 10340167, "node_id": "MDQ6VXNlcjEwMzQwMTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/10340167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnthagen", "html_url": "https://github.com/johnthagen", "followers_url": "https://api.github.com/users/johnthagen/followers", "following_url": "https://api.github.com/users/johnthagen/following{/other_user}", "gists_url": "https://api.github.com/users/johnthagen/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnthagen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnthagen/subscriptions", "organizations_url": "https://api.github.com/users/johnthagen/orgs", "repos_url": "https://api.github.com/users/johnthagen/repos", "events_url": "https://api.github.com/users/johnthagen/events{/privacy}", "received_events_url": "https://api.github.com/users/johnthagen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-10-02T22:02:48Z", "updated_at": "2017-10-03T12:00:23Z", "closed_at": "2017-10-03T12:00:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If someone wants to create a data class in which all instances are immutable (i.e. each attribute can not be changed after construction), I propose that a `immutable` parameter be added (which in the spirit of Python defaults to `False`). Note this is different than `frozen`, which applies to monkey patching **new** attributes.\r\n\r\nCurrently, this can be done manually with normal classes with a lot of boilerplate and the use of `@property`. In other languages, such as Kotlin, data classes are immutable by default.\r\n\r\nA sketch of this proposal would be as follows:\r\n\r\n```python\r\n@dataclass(immutable=True)\r\nclass InventoryItem:\r\n    name: str\r\n    unit_price: float\r\n    quantity_on_hand: int = 0\r\n\r\n    def total_cost(self) -> float:\r\n        return self.unit_price * self.quantity_on_hand\r\n```\r\n\r\nWould desugar into something like:\r\n\r\n```python\r\ndef __init__(self, name: str, unit_price: float, quantity_on_hand: int = 0) -> None:\r\n    self._name = name\r\n    self._unit_price = unit_price\r\n    self._quantity_on_hand = quantity_on_hand\r\n\r\n@property\r\ndef name(self) -> str:\r\n    return self._name\r\n\r\n@property\r\ndef unit_price(self) -> float:\r\n    return self._unit_price\r\n\r\n@property\r\ndef quantity_on_hand(self) -> int:\r\n    return self._quantity_on_hand\r\n```\r\n\r\nIf one attempts you modify a `property`, an `AttributeError` is raised. IDEs can lint for this kind of thing while the user types before runtime. PyCharm, for example, squiggles a warning if you try to set a `property`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/58", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/58/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/58/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/58", "id": 262125773, "node_id": "MDU6SXNzdWUyNjIxMjU3NzM=", "number": 58, "title": "Type annotation for module-level functions", "user": {"login": "Dutcho", "id": 7052402, "node_id": "MDQ6VXNlcjcwNTI0MDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7052402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dutcho", "html_url": "https://github.com/Dutcho", "followers_url": "https://api.github.com/users/Dutcho/followers", "following_url": "https://api.github.com/users/Dutcho/following{/other_user}", "gists_url": "https://api.github.com/users/Dutcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dutcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dutcho/subscriptions", "organizations_url": "https://api.github.com/users/Dutcho/orgs", "repos_url": "https://api.github.com/users/Dutcho/repos", "events_url": "https://api.github.com/users/Dutcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Dutcho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-02T15:30:43Z", "updated_at": "2018-05-18T11:16:35Z", "closed_at": "2018-05-18T11:16:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Which type annotation would be appropriate for `fields()`, `astuple()`, `asdict()`? Because `dataclass`es don\u2019t derive from a common ancestor, a protocol `SupportsFields` would be required to properly specify\r\n\r\n```\r\n> echo import dataclasses; dataclasses.astuple((1, 2, 3)) >xxx.py\r\n> mypy xxx.py\r\n```\r\n(no warnings, as `astuple()` doesn't have a type annotation)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/57", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/57/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/57/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/57", "id": 262123750, "node_id": "MDU6SXNzdWUyNjIxMjM3NTA=", "number": 57, "title": "Exception type of fields() on non-dataclass", "user": {"login": "Dutcho", "id": 7052402, "node_id": "MDQ6VXNlcjcwNTI0MDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7052402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dutcho", "html_url": "https://github.com/Dutcho", "followers_url": "https://api.github.com/users/Dutcho/followers", "following_url": "https://api.github.com/users/Dutcho/following{/other_user}", "gists_url": "https://api.github.com/users/Dutcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dutcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dutcho/subscriptions", "organizations_url": "https://api.github.com/users/Dutcho/orgs", "repos_url": "https://api.github.com/users/Dutcho/repos", "events_url": "https://api.github.com/users/Dutcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Dutcho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-02T15:25:01Z", "updated_at": "2017-11-16T17:24:38Z", "closed_at": "2017-11-16T17:24:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "As it was decided (issue #8) that `fields()`, `astuple()`, `asdict()` will be module-level functions (_not_ member functions), users _can_ (but _shouldn\u2019t_) call these for non-dataclasses too. I surmise this should raise `TypeError` (not `AttributeError`, which is raised when `fields()` accesses the `_MARKER` attribute now) to best inform users of their erroneous use\r\n```\r\n>>> import dataclasses\r\n>>> dataclasses.astuple((1, 2, 3))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"...dataclasses.py\", line\r\n    return tuple(getattr(obj, name) for name in fields(obj))\r\n  File \"...dataclasses.py\", line\r\n    return getattr(cls, _MARKER)\r\nAttributeError: 'tuple' object has no attribute '__dataclass_fields__'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/56", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/56/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/56/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/56", "id": 262121296, "node_id": "MDU6SXNzdWUyNjIxMjEyOTY=", "number": 56, "title": "Return type of asdict()", "user": {"login": "Dutcho", "id": 7052402, "node_id": "MDQ6VXNlcjcwNTI0MDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7052402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dutcho", "html_url": "https://github.com/Dutcho", "followers_url": "https://api.github.com/users/Dutcho/followers", "following_url": "https://api.github.com/users/Dutcho/following{/other_user}", "gists_url": "https://api.github.com/users/Dutcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dutcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dutcho/subscriptions", "organizations_url": "https://api.github.com/users/Dutcho/orgs", "repos_url": "https://api.github.com/users/Dutcho/repos", "events_url": "https://api.github.com/users/Dutcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Dutcho/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-02T15:17:58Z", "updated_at": "2017-10-02T23:49:45Z", "closed_at": "2017-10-02T23:49:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suggest to have `asdict()` return an `OrderedDict `(like `fields()` already does) as order matters in a `dataclass`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/55", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/55/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/55/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/55", "id": 260729958, "node_id": "MDU6SXNzdWUyNjA3Mjk5NTg=", "number": 55, "title": "__init__ should be kwargs-only", "user": {"login": "wsanchez", "id": 50002, "node_id": "MDQ6VXNlcjUwMDAy", "avatar_url": "https://avatars1.githubusercontent.com/u/50002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wsanchez", "html_url": "https://github.com/wsanchez", "followers_url": "https://api.github.com/users/wsanchez/followers", "following_url": "https://api.github.com/users/wsanchez/following{/other_user}", "gists_url": "https://api.github.com/users/wsanchez/gists{/gist_id}", "starred_url": "https://api.github.com/users/wsanchez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wsanchez/subscriptions", "organizations_url": "https://api.github.com/users/wsanchez/orgs", "repos_url": "https://api.github.com/users/wsanchez/repos", "events_url": "https://api.github.com/users/wsanchez/events{/privacy}", "received_events_url": "https://api.github.com/users/wsanchez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-26T18:50:14Z", "updated_at": "2017-11-06T12:57:30Z", "closed_at": "2017-11-06T12:57:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "  The initializer should ideally be kwargs-only.  That is:\r\n\r\n```python\r\n\tdef __init__(self, name: str, \u2026\r\n```\r\n\r\n  should be:\r\n\r\n```python\r\n\tdef __init__(self, *, name: str, \u2026\r\n```\r\n\r\nThe reason is that the automatically generated methods are all using the definition order in the class, so if, for example, I add a new attribute and I want comparison to look at it before some other attribute, I\u2019d have to possibly change the definition order, which will change the signature of __init__ in an incompatible way.  By making the method kwargs-only, you can ensure that you aren't breaking clients when you do that.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/54", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/54/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/54/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/54", "id": 260645018, "node_id": "MDU6SXNzdWUyNjA2NDUwMTg=", "number": 54, "title": "Add tests for generic dataclasses", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-26T14:27:51Z", "updated_at": "2017-12-02T08:45:51Z", "closed_at": "2017-12-02T08:45:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I think it makes sense to add tests that check that dataclasses interact nicely with ``typing.Generic`` and type variables. Most likely no changes is needed to the code (only tests) since we use a decorator ``@dataclass``. But still ``Generic`` uses a complex metaclass (this will be removed if/when PEP 560 is accepted and replaced with ``__init_subclass__`` and new friends).\r\n\r\nI think it makes sense to add tests checking that things like this work:\r\n```python\r\n@dataclass\r\nclass LabeledBox(Generic[T]):\r\n    content: T\r\n    label: str = '<unknown>'\r\n\r\nbox = LabeledBox(42)\r\nassert box.content == 42\r\nassert box.label == '<unknown>'\r\n\r\nboxes: List[LabeledBox[int]] = []  # subscripting the resulting class should work, etc.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/51", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/51/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/51/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/51", "id": 257846135, "node_id": "MDU6SXNzdWUyNTc4NDYxMzU=", "number": 51, "title": "For comparison functions, use subclass check, or identity check?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-09-14T20:26:57Z", "updated_at": "2017-11-29T09:02:30Z", "closed_at": "2017-11-29T09:02:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "From the Abstract in the PEP, the comparison functions are given as:\r\n```\r\ndef __eq__(self, other):\r\n    if other.__class__ is self.__class__:\r\n        return (self.name, self.unit_price, self.quantity_on_hand) == (other.name, other.unit_price, other.quantity_on_hand)\r\n    return NotImplemented\r\n```\r\nThere's been discussion on whether this should be a subclass check, or an exact match. I plan on looking in to this and addressing it before the next PEP version. This is a placeholder to remind me, and for discussion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/50", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/50/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/50/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/50", "id": 257837217, "node_id": "MDU6SXNzdWUyNTc4MzcyMTc=", "number": 50, "title": "PEP: Add examples of using eq, compare, hash, and frozen.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-14T19:55:48Z", "updated_at": "2017-12-03T02:07:43Z", "closed_at": "2017-12-02T21:10:47Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/47", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/47/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/47/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/47", "id": 257679783, "node_id": "MDU6SXNzdWUyNTc2Nzk3ODM=", "number": 47, "title": "Spaces in repr", "user": {"login": "Drekin", "id": 7892803, "node_id": "MDQ6VXNlcjc4OTI4MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7892803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Drekin", "html_url": "https://github.com/Drekin", "followers_url": "https://api.github.com/users/Drekin/followers", "following_url": "https://api.github.com/users/Drekin/following{/other_user}", "gists_url": "https://api.github.com/users/Drekin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Drekin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Drekin/subscriptions", "organizations_url": "https://api.github.com/users/Drekin/orgs", "repos_url": "https://api.github.com/users/Drekin/repos", "events_url": "https://api.github.com/users/Drekin/events{/privacy}", "received_events_url": "https://api.github.com/users/Drekin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-14T11:04:51Z", "updated_at": "2017-09-14T15:02:25Z", "closed_at": "2017-09-14T15:02:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's a tiny issue, but shouldn't there be spaces after commas in the generated reprs, i.e. `Point(x=1, y=2)` instead of `Point(x=1,y=2)`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/46", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/46/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/46/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/46", "id": 257366958, "node_id": "MDU6SXNzdWUyNTczNjY5NTg=", "number": 46, "title": "Have separate flags to control ==, != methods, independently of >, >=, <, <=", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-13T12:46:01Z", "updated_at": "2017-09-15T12:09:16Z", "closed_at": "2017-09-15T12:09:16Z", "author_association": "OWNER", "active_lock_reason": null, "body": "See the discussion starting at:\r\nhttps://mail.python.org/pipermail/python-dev/2017-September/149461.html\r\n\r\nThe idea is to replace the existing `cmp` flag to `@dataclass` and instead have two boolean parameters, `eq` and `compare`. If `compare` is `True`, `eq` would be forced to `True`.\r\n\r\nIf `eq` is set, generate `__eq__` and `__ne__` methods. If `compare` is set, generate `__gt__`, `__ge__`, `__lt__`, and `__le__` methods.\r\n\r\nThis would allow you to have data classes that could be compared for equality, but are unordered.\r\n\r\nI'll also work on updating the PEP to match.\r\n\r\nRenaming the `cmp` parameter to `field()` was also suggested, but I don't have a good idea for that. I'll eventually open a separate issue for that discussion.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/45", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/45/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/45/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/45", "id": 257098949, "node_id": "MDU6SXNzdWUyNTcwOTg5NDk=", "number": 45, "title": "covariant overriding of fields considered unsafe", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-12T16:04:34Z", "updated_at": "2017-09-12T22:55:07Z", "closed_at": "2017-09-12T22:55:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't recall where I saw this but I believe we had some example where a base class would declare a field of type `float` and the subclass would redefine it as `int`. I would just like to insert a note in that thread referencing https://github.com/python/mypy/issues/3208, which points out that this is not actually a safe thing to do unless the class is immutable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/44", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/44/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/44/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/44", "id": 257068167, "node_id": "MDU6SXNzdWUyNTcwNjgxNjc=", "number": 44, "title": "Remove per-field \"hash\" flag", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-12T14:40:23Z", "updated_at": "2017-09-13T00:18:15Z", "closed_at": "2017-09-13T00:18:15Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Since we're saying it should always match what's currently the \"cmp\" flag, let's just force it to be the same by getting rid of the \"hash\" flag. This will slightly simplify the `field()` call.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/42", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/42/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/42/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/42", "id": 256503420, "node_id": "MDU6SXNzdWUyNTY1MDM0MjA=", "number": 42, "title": "A way to copy an instance while replacing some fields", "user": {"login": "bluetech", "id": 1223550, "node_id": "MDQ6VXNlcjEyMjM1NTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1223550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluetech", "html_url": "https://github.com/bluetech", "followers_url": "https://api.github.com/users/bluetech/followers", "following_url": "https://api.github.com/users/bluetech/following{/other_user}", "gists_url": "https://api.github.com/users/bluetech/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluetech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluetech/subscriptions", "organizations_url": "https://api.github.com/users/bluetech/orgs", "repos_url": "https://api.github.com/users/bluetech/repos", "events_url": "https://api.github.com/users/bluetech/events{/privacy}", "received_events_url": "https://api.github.com/users/bluetech/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-09-10T11:29:43Z", "updated_at": "2017-11-18T19:30:01Z", "closed_at": "2017-11-18T19:30:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When programming with an immutable/frozen data structure (which I personally prefer to do whenever it's reasonable), perhaps the most common operation is to replace some subset of the fields with new values, returning a new instance. It would be nice if dataclasses had similar functionality, for frozen classes at least.\r\n\r\nSome prior art:\r\n\r\n---\r\n\r\nPython 3 dict:\r\n\r\n```python\r\na = {'key1': 'value1', 'key2': 'value2'}\r\nb = {**a, 'key1': 'VALUE1'}\r\n```\r\n\r\n----\r\n\r\nnamedtuple [_replace](https://docs.python.org/3.6/library/collections.html#collections.somenamedtuple._replace):\r\n\r\n```python\r\nNT = namedtuple('NT', ('field1', 'field2'))\r\na = NT(field1='value1', field2='value2')\r\nb = a._replace(field1='VALUE1')\r\n```\r\n\r\n---\r\n\r\nattrs [evolve](http://www.attrs.org/en/stable/api.html#attr.evolve):\r\n\r\n```python\r\n@attr.s\r\nclass C:\r\n     field1 = attr.ib()\r\n     field2 = attr.ib()\r\na = C(field1='value1', field2='value2')\r\nb = attr.evolve(a, field1='VALUE1')\r\n```\r\n\r\n---\r\n\r\nKotlin data class [copy](https://kotlinlang.org/docs/reference/data-classes.html#copying):\r\n\r\n```kotlin\r\ndata class C(val field1: String, val field2: String)\r\nval a = C(field1 = \"value1\", field2 = \"value2\")\r\nval b = a.copy(field1 = \"VALUE1\")\r\n```\r\n\r\n---\r\n\r\nClojure record [assoc](https://clojuredocs.org/clojure.core/assoc):\r\n\r\n```clojure\r\n(defrecord R [field1 field2])\r\n(def a (R. \"value1\" \"value2\"))\r\n(def b (assoc a :field1 \"VALUE1\"))\r\n```\r\n\r\n---\r\n\r\nThere are of course other example, but I think this shows the variety of names.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/41", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/41/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/41/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/41", "id": 256459393, "node_id": "MDU6SXNzdWUyNTY0NTkzOTM=", "number": 41, "title": "PEP typo", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-09T19:09:18Z", "updated_at": "2017-09-10T00:38:36Z", "closed_at": "2017-09-10T00:38:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the \"Specification\" section, you write:\r\n\r\n> If `cmp` and `hash` are both true, Data Classes will generate a `__hash__` for you\r\n\r\nI believe this should be:\r\n\r\n> If `cmp` and **`frozen`** are both true...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/40", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/40/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/40/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/40", "id": 256440385, "node_id": "MDU6SXNzdWUyNTY0NDAzODU=", "number": 40, "title": "Also generate namedtuples?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-09T13:53:57Z", "updated_at": "2017-09-09T21:01:00Z", "closed_at": "2017-09-09T21:01:00Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It occurs to me that I could also use this mechanism to generate namedtuples. I'm not saying it should happen in this PEP, but it might be worth considering when deciding on names and APIs. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/38", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/38/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/38/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/38", "id": 256385573, "node_id": "MDU6SXNzdWUyNTYzODU1NzM=", "number": 38, "title": "Test needed: Check items in class and instance dicts", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 687418306, "node_id": "MDU6TGFiZWw2ODc0MTgzMDY=", "url": "https://api.github.com/repos/ericvsmith/dataclasses/labels/needs%20test", "name": "needs test", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-08T22:20:25Z", "updated_at": "2017-09-12T09:26:19Z", "closed_at": "2017-09-12T09:26:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I want to make sure that the instance dict is being initialized when I think it should be.\r\n\r\nIn:\r\n```\r\n@dataclass\r\nclass C:\r\n    a: int\r\n    b: list = field(default_factory=list, init=False)\r\n    c: list = field(default_factory=list)\r\n    d: int = field(default=4, init=False)\r\n    e: int = 0\r\n\r\nc=C(0)\r\n```\r\n\r\nThen:\r\n- only a, b, c, and e should be in the instance dict\r\n- d should be in the class dict with value 4\r\n- e should be in the class dict with value 0\r\n\r\nThe reasoning is:\r\n- a is in the instance dict because it's assigned to in `__init__`.\r\n- b is in the instance dict, even though it's not in the `__init__` param list. This is because the default factory still needs to be called from `__init__`.\r\n- c is in the instance dict because it's assigned to in `__init__`.\r\n- d is not in the instance dict because it's not assigned to by `__init__`. It's in the class dict because it has a default value.\r\n- e is in the instance dict because it's assigned to in `__init__`.\r\n\r\nThe generated `__init__` looks like:\r\n```\r\ndef __init__(self,a:_type_a,c:_type_c=_MISSING,e:_type_e=_dflt_e)->_return_type:\r\n    self.a = a\r\n    self.b = _dflt_b()\r\n    self.c = _dflt_c() if c is _MISSING else c\r\n    self.e = e\r\n\r\nlocals: {'_type_a': <class 'int'>, '_type_b': <class 'list'>, '_type_c': <class 'list'>, '_type_d': <class 'int'>, '_type_e': <class 'int'>, '_return_type': None}\r\nglobals: {'_MISSING': <object object at 0x10ea26100>, '_dflt_b': <class 'list'>, '_dflt_c': <class 'list'>, '_dflt_e': 0}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/37", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/37/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/37/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/37", "id": 256346212, "node_id": "MDU6SXNzdWUyNTYzNDYyMTI=", "number": 37, "title": "In the generated __init__, use \"self\" unless it has a conflict with a field name.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-09-08T19:14:20Z", "updated_at": "2017-09-08T19:27:36Z", "closed_at": "2017-09-08T19:27:36Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently the code always uses __dataclass_self_, but that makes the generated code ugly in the normal case. Only use __dataclass_self__ if there's a field named self.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/35", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/35/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/35/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/35", "id": 256273864, "node_id": "MDU6SXNzdWUyNTYyNzM4NjQ=", "number": 35, "title": "Need tests for fields.hash", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-09-08T14:35:34Z", "updated_at": "2017-09-08T18:35:16Z", "closed_at": "2017-09-08T18:35:16Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In particular, the None/True/False behavior and how it interacts with cmp is not fully tested.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/34", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/34/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/34/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/34", "id": 256234274, "node_id": "MDU6SXNzdWUyNTYyMzQyNzQ=", "number": 34, "title": "Don't force import of typing module", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-08T12:10:06Z", "updated_at": "2017-09-08T22:26:54Z", "closed_at": "2017-09-08T22:26:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Because `typing` is a large module, it would be nice for smaller programs to be able to use dataclasses without needing to import typing. The only place dataclasses.py uses typing is in this check:\r\n```\r\n        if type(a_type) is typing._ClassVar:\r\n            # Skip this field if it's a ClassVar.\r\n            continue\r\n```\r\nI think I could avoid using typing unless I know it's already been imported by dropping the import and changing that code to:\r\n```\r\n        # This is a hack for not depending on typing, unless it's already\r\n        #  been loaded.\r\n        typing = sys.modules.get('typing')\r\n        if typing is not None:\r\n            if type(a_type) is typing._ClassVar:\r\n                # Skip this field if it's a ClassVar.\r\n                continue\r\n```\r\nIt seems to work:\r\n```\r\n% python3\r\n>>> import sys\r\n>>> from dataclasses import dataclass\r\n>>> @dataclass\r\n... class C:\r\n...    x: int\r\n... \r\n>>> C.__dataclass_fields__\r\nOrderedDict([('x', Field(name='x',type=<class 'int'>,default=_MISSING,default_factory=_MISSING,init=True,repr=True,hash=None,cmp=True))])\r\n>>> 'typing' in sys.modules\r\nFalse\r\n>>> import typing\r\n>>> @dataclass\r\n... class C:\r\n...     x: int\r\n...     y: typing.ClassVar[int]\r\n... \r\n>>> @dataclass\r\n... class C:\r\n...     x: int\r\n...     y: typing.ClassVar[int]\r\n... \r\n>>> C.__dataclass_fields__\r\nOrderedDict([('x', Field(name='x',type=<class 'int'>,default=_MISSING,default_factory=_MISSING,init=True,repr=True,hash=None,cmp=True))])\r\n>>> \r\n```\r\nI haven't thought through all of the implications, but I wanted to record this thought while I'm thinking about it.\r\n\r\nEDIT: for clarity", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/33", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/33/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/33/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/33", "id": 256141584, "node_id": "MDU6SXNzdWUyNTYxNDE1ODQ=", "number": 33, "title": "With a default_factory and init=False, fields are initialized in the wrong order", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-08T05:03:27Z", "updated_at": "2017-09-08T22:24:59Z", "closed_at": "2017-09-08T22:24:59Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The PEP doesn't say that fields are initialized in order, but I'd like to do so, anyway.\r\n\r\nIf a field has a default_factory, and has init=False, it is initialized out of order. For this code:\r\n\r\n```\r\n@dataclass\r\nclass C:\r\n    x: int\r\n    y: list = field(default_factory=list, init=False)\r\n    z: int\r\n```\r\nThe generated code looks like:\r\n```\r\ndef __init__(__dataclass_self__,x:_type_x,z:_type_z)->_return_type:\r\n __dataclass_self__.x=x\r\n __dataclass_self__.z=z\r\n __dataclass_self__.y = _dflt_y()\r\n```\r\nI'll rework field initialization to make sure this is handled correctly. I think there are also likely other corner cases.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/32", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/32/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/32/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/32", "id": 256141147, "node_id": "MDU6SXNzdWUyNTYxNDExNDc=", "number": 32, "title": "doc string for __init__", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2017-09-08T04:59:44Z", "updated_at": "2017-11-14T22:04:22Z", "closed_at": "2017-11-14T22:04:08Z", "author_association": "OWNER", "active_lock_reason": null, "body": "From a discussion with @raymondh:\r\n\r\nShould we auto-generate some sort of doc string for `__init__`, or allow the user to specify one (maybe as a param to `@dataclass`)?\r\n\r\nI'm not sure a generated one wouldn't have too much noise to be useful.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/28", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/28/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/28/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/28", "id": 255801823, "node_id": "MDU6SXNzdWUyNTU4MDE4MjM=", "number": 28, "title": "Support __slots__?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-09-07T03:10:47Z", "updated_at": "2019-09-29T22:00:02Z", "closed_at": "2017-09-07T16:52:08Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently the draft PEP specifies and the code supports the optional ability to add `__slots__`. This is the one place where `@dataclass` cannot just modify the given class and return it: because `__slots__` must be specified at class creation time, it's too late by the time the `dataclass` decorator gets control. The current approach is to dynamically generate a new class while setting `__slots__` in the new class and copying over other class attributes. The decorator then returns the new class.\r\n\r\nThe question is: do we even want to support setting `__slots__`? Is having `__slots__` important enough to have this deviation from the \"we just add a few dunder methods to your class\" behavior?\r\n\r\nI see three options:\r\n\r\n1. Leave it as-is, with `@dataclass(slots=True)` returning a new class.\r\n2. Completely remove support for setting `__slots__`.\r\n3. Add a different decorator, say `@add_slots`, which takes a data class and creates a new class with `__slots__` set.\r\n\r\nI think we should either go with 2 or 3. I don't mind not supporting `__slots__`, but if we do want to support it, I think it's easier to explain with a separate decorator.\r\n```\r\n@add_slots\r\n@dataclass\r\nclass C:\r\n    x: int\r\n    y: int\r\n```\r\nIt would be an error to use `@add_slots` on a non-dataclass class.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/27", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/27/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/27/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/27", "id": 255784324, "node_id": "MDU6SXNzdWUyNTU3ODQzMjQ=", "number": 27, "title": "Get rid of make_class().", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-07T01:01:15Z", "updated_at": "2017-11-18T19:29:32Z", "closed_at": "2017-11-18T19:29:32Z", "author_association": "OWNER", "active_lock_reason": null, "body": "After talking to @raymondh today, he questioned the need for `make_class()` and its many parameters. And he's correct: it's not needed. Python can already dynamically create classes, just leverage that.\r\n\r\nSo, I plan to remove `make_class()`.\r\n\r\nInstead of:\r\n```\r\nC = make_class('C',\r\n               [field('x', int),\r\n                field('y', int, default=5),\r\n                ])\r\n```\r\nWe'd use: \r\n```\r\ncls_dict = {'__annotations__': OrderedDict(x=int, y=int,),\r\n            'y': field(default=5),\r\n            }\r\nC = dataclass(type('C', (object,), cls_dict))\r\nassert repr(C(4)) == 'C(x=4,y=5)'\r\n```\r\nAnd the beauty of this is that I can remove the `name` and `type` parameters to `field()`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/25", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/25/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/25/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/25", "id": 255475531, "node_id": "MDU6SXNzdWUyNTU0NzU1MzE=", "number": 25, "title": "Add module helper function that provides access to all fields.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2017-09-06T04:16:00Z", "updated_at": "2017-09-07T13:11:22Z", "closed_at": "2017-09-07T13:11:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Since we decided in issue #8 to use module level helper functions instead of instance methods, I want to add the first such function.\r\n\r\n`dataclasses.fields(cls)` will return a tuple of Field objects defined in `cls`. Each Field object represents one field in the class.\r\n\r\nThis will be the basic building block for a number of introspection methods.\r\n\r\nattrs returns object that can be either indexed or accessed by field name. I think that's a good idea, but I'm not going to implement it at first.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/24", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/24/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/24/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/24", "id": 255127476, "node_id": "MDU6SXNzdWUyNTUxMjc0NzY=", "number": 24, "title": "How to specify factory functions", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2017-09-04T23:15:48Z", "updated_at": "2017-09-07T13:14:16Z", "closed_at": "2017-09-07T13:14:16Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In #3, we discussed mutable defaults which included talk of factory functions. Having resolved #3, this issue is about how to specify default value factory functions.\r\n\r\nSome options:\r\n\r\n1. A new parameter to `field()`. For now, let's call it `factory`:\r\n```\r\n   @dataclass\r\n    class Foo:\r\n        x: list = field(factory=list, repr=False)\r\n```\r\nIt would be an error to specify both `default=` and `factory=`.\r\n\r\n2. Re-use the `default` parameter to `field()`, marking it as a factory function so we can determine whether to call it. For now, let's mark it by using `Factory(callable)`.\r\n```\r\n    @dataclass\r\n    class Foo:\r\n        x: list = field(default=Factory(list), repr=False)\r\n```\r\n\r\n3. Have a separate flavor of `field` used with factory functions. For now, let's assume it's called `factory_field`. It would not have a `default=` parameter:\r\n```\r\n    @dataclass\r\n    class Foo:\r\n       x: list = factory_field(list, repr=False)\r\n```\r\n\r\nI don't have a real preference among these. I sense we should go with whatever makes mypy's life easier, but I don't know what that would be. I suspect it would be 3, since I think mypy could be told that the type of `factory_field(callable)` is the type of `callable()`. But I'm just hypothesizing, and am interested in the opinion of experts.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/22", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/22/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/22/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/22", "id": 244793131, "node_id": "MDU6SXNzdWUyNDQ3OTMxMzE=", "number": 22, "title": "__slots__ should be present by default, and other name for corresponding kwarg", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-07-21T21:57:49Z", "updated_at": "2017-09-04T10:00:32Z", "closed_at": "2017-09-04T10:00:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently ``__slots__`` are not set by default (``slots=False``). I have two points here:\r\n* This is not what user would expect, since dataclasses will be probably used for something that is present in large quantities, so that they should be lightweight. Also in other languages analogs of dataclasses are typically not extendable after creation.\r\n* I would rather choose a different name for the corresponding kwarg, some people may not be familiar with slots and how they work. Maybe something like ``extendable`` that is ``False``?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/21", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/21/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/21/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/21", "id": 244791027, "node_id": "MDU6SXNzdWUyNDQ3OTEwMjc=", "number": 21, "title": "Possibility to make dataclasses iterable or indexable", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-07-21T21:45:08Z", "updated_at": "2017-09-07T04:21:11Z", "closed_at": "2017-09-07T04:21:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Imagine users who are currently using named tuples or dictionaries as objects. They probably would want to switch to dataclasses when they appear, but probably in their code they have something like:\r\n```python\r\nname, age = person\r\n# or\r\nperson['name'] = 'Eve'\r\n```\r\nI think it may easier for them to switch to dataclasses if we provide something like this:\r\n```python\r\n@data(iterable=True)\r\nclass Point:\r\n    x: int\r\n    y: int\r\norigin = Point(0, 0)\r\nx, y = origin  # OK\r\n\r\n@data(indexable=True)\r\nclass Person:\r\n    name: str\r\n    age: int\r\nperson =  Person('John', 31)\r\nname = person['name']\r\nperson['age'] = 32\r\n```\r\nI am not sure, but I think both flags should be ``False`` by default. If ``iterable`` is enabled, then we would add a corresponding ``__iter__``, for ``indexable`` we would add ``__getitem__`` and (depending on the mutability/hashability flags) ``__setitem__``.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/20", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/20/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/20/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/20", "id": 238345611, "node_id": "MDU6SXNzdWUyMzgzNDU2MTE=", "number": 20, "title": "The serialization cliff", "user": {"login": "mahmoud", "id": 130193, "node_id": "MDQ6VXNlcjEzMDE5Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/130193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahmoud", "html_url": "https://github.com/mahmoud", "followers_url": "https://api.github.com/users/mahmoud/followers", "following_url": "https://api.github.com/users/mahmoud/following{/other_user}", "gists_url": "https://api.github.com/users/mahmoud/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahmoud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahmoud/subscriptions", "organizations_url": "https://api.github.com/users/mahmoud/orgs", "repos_url": "https://api.github.com/users/mahmoud/repos", "events_url": "https://api.github.com/users/mahmoud/events{/privacy}", "received_events_url": "https://api.github.com/users/mahmoud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2017-06-24T21:54:58Z", "updated_at": "2017-11-19T16:35:44Z", "closed_at": "2017-11-19T16:35:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seeing as the scope of dataclasses still seems fairly pliable, I'll share an answer to #19 (\"why not attrs?\") which could greatly increase its utility: The serialization cliff.\r\n\r\nMy teammates and I have been using attrs almost as long as it's been around, and namedtuples for much longer. Great and fine solutions, if your data doesn't have to leave the process space.\r\n\r\nThe boilerplate we're trying to avoid comes back in a severe way as soon as databases, SOA, or files get involved. Let alone anything with complicated validation rules.\r\n\r\nI think to be true to the name, dataclasses need to account for the pervasiveness of data ingestion and emission. As it stands, attrs has `asdict()` and not much else. Nothing to help recursively (re)construct instances from data.\r\n\r\nThere is another, somewhat more popular, approach in [marshmallow](https://github.com/marshmallow-code/marshmallow), which also aims to make data-centric, serialization-agnostic container types. It's not perfect, but it's a starting point. A balance of attrs and marshmallow features may yield a powerful and sufficiently-differentiated featureset that I think a lot of developers are missing in Python. The number of entries in this space seems to agree.\r\n\r\nI'm happy to see more discussion going into these fundamentals, and I'm hopeful that more and more they take the whole data workflow into mind. :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/19", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/19/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/19/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/19", "id": 238343263, "node_id": "MDU6SXNzdWUyMzgzNDMyNjM=", "number": 19, "title": "why not just attrs?", "user": {"login": "glyph", "id": 716529, "node_id": "MDQ6VXNlcjcxNjUyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/716529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glyph", "html_url": "https://github.com/glyph", "followers_url": "https://api.github.com/users/glyph/followers", "following_url": "https://api.github.com/users/glyph/following{/other_user}", "gists_url": "https://api.github.com/users/glyph/gists{/gist_id}", "starred_url": "https://api.github.com/users/glyph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glyph/subscriptions", "organizations_url": "https://api.github.com/users/glyph/orgs", "repos_url": "https://api.github.com/users/glyph/repos", "events_url": "https://api.github.com/users/glyph/events{/privacy}", "received_events_url": "https://api.github.com/users/glyph/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2017-06-24T21:05:14Z", "updated_at": "2017-09-04T21:44:48Z", "closed_at": "2017-09-04T21:44:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't mean this as a dig at the project here, but a serious question:\r\n\r\nIs there any reason this project should exist?\r\n\r\nEvery aspect of the design here appears to be converging further in the direction of exact duplication of functionality available within `attrs`, except those which are features already on `attrs`'s roadmap.  The `attrs` maintainers have carefully considered a number of subtle issues related to this problem domain, and every discussion I have observed thus far on the `dataclasses` repo has paralleled the reasoning process that went into attrs's original design or its maintenance.  (Remembering, also, that `attrs` is itself a *second*-generation project and there was a lot of learning that came from `characteristic`.)\r\n\r\nI haven't had time to read *all* of the python-ideas thread, but all of the objections to attrs that I could find seem to have to do with whimsical naming or a desire to shoehorn convenient class creation into a \"special\" role that is just for \"data\" and not for regular classes somehow.  I shouldn't be passive-aggressive here, so I should just say: I can't follow Nick's reasoning on #1 at all :-).\r\n\r\nThe silly names could be modified by a trivially tiny fork, if that is *really* a deal-breaker for stdlib adoption; honestly I find that the names grow on you.  (More than one `attrs` user has separately come up with the idea that it is a lot like Python's significant whitespace.)\r\n\r\nThat said, of course there may be some reasons or some broader goal that I'm missing, but if this is the case it seems like writing a very clear \"goals / non-goals / rejected approaches\" section for the PEP itself would be worthwhile.  The reasons given in the PEP don't really make sense; the need to support python 2 hasn't been a drag on python 3 that I'm aware of, and annotation-based attribute definition *is* coming to attrs itself; it's a relatively small extension.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/18", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/18/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/18/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/18", "id": 236174606, "node_id": "MDU6SXNzdWUyMzYxNzQ2MDY=", "number": 18, "title": "Failure with slots and default values", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-15T12:29:21Z", "updated_at": "2017-06-15T13:22:32Z", "closed_at": "2017-06-15T13:22:32Z", "author_association": "OWNER", "active_lock_reason": null, "body": "```\r\n        @dataclass(slots=True)\r\n        class C:\r\n            x: int\r\n            y: int = 0\r\n\r\n        c = C(10)\r\n        self.assertEqual(repr(c), 'C(x=10,y=0)')\r\n```\r\nFails with:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/cygdrive/c/home/eric/local/dataclasses/tst.py\", line 627, in test_slots\r\n    self.assertEqual(repr(c), 'C(x=10,y=0)')\r\nAssertionError: \"C(x=10,y=<member 'y' of 'C' objects>)\" != 'C(x=10,y=0)'\r\n- C(x=10,y=<member 'y' of 'C' objects>)\r\n+ C(x=10,y=0)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/17", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/17/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/17/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/17", "id": 235025209, "node_id": "MDU6SXNzdWUyMzUwMjUyMDk=", "number": 17, "title": "Should it be possible to pass parameter(s) to the post-init function?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2017-06-10T20:30:41Z", "updated_at": "2017-11-25T04:39:09Z", "closed_at": "2017-11-25T04:39:09Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently the post-init function `__dataclass_post_init__` takes no parameters. Should it be possible to pass one or more parameters from `__init__` to the post-init function? Is it possible to make the parameter optional?\r\n\r\nIt would be nice to pass parameters to `__init__` which do not initialize fields, but are accessible to the post-init function. But, it might mess up the interface too much, and there are issues with calling `__dataclass_post_init__`'s `super()` function if we decide to change the number of parameters.\r\n\r\nThis issue is a placeholder to decide this issue before the code and PEP are finalized. Any suggestions or thoughts are welcome.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/16", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/16/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/16/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/16", "id": 234092156, "node_id": "MDU6SXNzdWUyMzQwOTIxNTY=", "number": 16, "title": "How are super calls handled?", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-07T04:52:38Z", "updated_at": "2017-06-07T15:22:58Z", "closed_at": "2017-06-07T15:22:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm curious about super calls. When a data-class inherit from a non-data-class, does the generated `__init__()` method call `super().__init__()`? Before or after setting the new attributes? Similar, when a data-class inherits from another data-class, does it call `super().__init__()`? In both cases, what about inheritance?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/15", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/15/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/15/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/15", "id": 233955768, "node_id": "MDU6SXNzdWUyMzM5NTU3Njg=", "number": 15, "title": "Skipping fields in the constructor signature", "user": {"login": "gvanrossum", "id": 2894642, "node_id": "MDQ6VXNlcjI4OTQ2NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2894642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvanrossum", "html_url": "https://github.com/gvanrossum", "followers_url": "https://api.github.com/users/gvanrossum/followers", "following_url": "https://api.github.com/users/gvanrossum/following{/other_user}", "gists_url": "https://api.github.com/users/gvanrossum/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvanrossum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvanrossum/subscriptions", "organizations_url": "https://api.github.com/users/gvanrossum/orgs", "repos_url": "https://api.github.com/users/gvanrossum/repos", "events_url": "https://api.github.com/users/gvanrossum/events{/privacy}", "received_events_url": "https://api.github.com/users/gvanrossum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-06T16:47:26Z", "updated_at": "2017-06-06T18:09:48Z", "closed_at": "2017-06-06T18:09:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I often have instance variables that are not part of the constructor arguments. The current design doesn't seem to let me specify their types using the nice `x: int` notation, since that implies they are included in the constructor signature. E.g. (almost from asyncio):\r\n```py\r\nclass Server:\r\n    def __init__(self, loop, sockets):\r\n        self._loop = loop\r\n        self.sockets = sockets\r\n        self._active_count = 0\r\n        self._waiters = []\r\n```\r\nI'd like to add types, like such:\r\n```py\r\n@dataclass\r\nclass Server:\r\n    loop: AbstractEventLoop\r\n    sockets: List[socket.socket]\r\n    _activecount: int = 0\r\n    _waiters: List[Future] = []  # or field(factory=list)\r\n```\r\nBut I'd need to have a way to say \"these fields should not be part of the constructor\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/14", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/14/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/14/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/14", "id": 233651752, "node_id": "MDU6SXNzdWUyMzM2NTE3NTI=", "number": 14, "title": "Annotated class variables", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2017-06-05T17:08:51Z", "updated_at": "2017-06-15T09:00:39Z", "closed_at": "2017-06-15T01:48:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Is there a simple way to avoid including annotated (for the purpose of static checking) class variable into the list of fields? Ideally, it could be possible to just write:\r\n```python\r\n@easy\r\nclass C:\r\n    x: int\r\n    inst_count: ClassVar[int] = 0\r\n```\r\nPossible solution would be to just use a special marker for exclusion:\r\n```python\r\n@easy\r\nclass C:\r\n    x: int\r\n    inst_count: ClassVar[int] = classvar(0)  # Just inserts 0 here in generated code\r\n```\r\nI don't like re-using ``field`` here, since ``inst_count`` is _not_ actually a field.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/13", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/13/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/13/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/13", "id": 233648004, "node_id": "MDU6SXNzdWUyMzM2NDgwMDQ=", "number": 13, "title": "Possibility to call custom initialization", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-06-05T16:53:57Z", "updated_at": "2017-06-10T20:31:31Z", "closed_at": "2017-06-10T20:31:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Imagine a situation with this class:\r\n```python\r\nclass BigClass:\r\n    def __init__(self, x, y, z, t, w, parent):\r\n        self.x = x\r\n        self.y = y\r\n        self.z = z\r\n        self.t = t\r\n        self.w = w\r\n        self.tmp = TempStorage()\r\n        self.tmp.link(parent)\r\n    ...\r\n    def __repr__(self):\r\n    # other boilerplate\r\n```\r\nIt should be possible to refactor this into:\r\n```python\r\n@auto\r\nclass BigClass:\r\n    x: int\r\n    y: int\r\n    z: int\r\n    t: int\r\n    w: int\r\n    def initialize(self, parent):  # We can choose other name, maybe name of the class?\r\n        self.tmp = TempStorage()\r\n        self.tmp.link(parent)\r\n```\r\nA simple way to achieve this is to add code like this at the end of generated ``__init__``:\r\n```python\r\ndef __init__(self, <inserted args>, *extra_args):\r\n    ...\r\n    if hassattr(self, 'initialize'):\r\n        self.initialize(*extra_args)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/12", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/12/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/12/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/12", "id": 233416432, "node_id": "MDU6SXNzdWUyMzM0MTY0MzI=", "number": 12, "title": "On naming", "user": {"login": "hynek", "id": 41240, "node_id": "MDQ6VXNlcjQxMjQw", "avatar_url": "https://avatars3.githubusercontent.com/u/41240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hynek", "html_url": "https://github.com/hynek", "followers_url": "https://api.github.com/users/hynek/followers", "following_url": "https://api.github.com/users/hynek/following{/other_user}", "gists_url": "https://api.github.com/users/hynek/gists{/gist_id}", "starred_url": "https://api.github.com/users/hynek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hynek/subscriptions", "organizations_url": "https://api.github.com/users/hynek/orgs", "repos_url": "https://api.github.com/users/hynek/repos", "events_url": "https://api.github.com/users/hynek/events{/privacy}", "received_events_url": "https://api.github.com/users/hynek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 27, "created_at": "2017-06-04T07:05:29Z", "updated_at": "2018-01-26T17:40:27Z", "closed_at": "2017-09-07T13:21:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "As I\u2019ve already mentioned by e-mail, I\u2019m *strongly* opposed to call this concept \u201cdata classes\u201d.\r\n\r\nHaving an easy way to define many small class with attributes is nothing about data, it\u2019s about good OO design.\r\n\r\nCalling it \u201cdata classes\u201d implies that they differ from\u2026\u201ccode classes\u201d I guess?\r\n\r\nOne of the things people love about attrs is that it\u2019s helping them to write regular classes which they can add methods to without any subclassing or other magic.  IOW: to focus on the **actual code** they want to write as opposed to generic boilerplate.\r\n\r\nDebasing them by name seems like a poor start to me.  We *do* have data containers in the stdlib (namedtuples, SimpleNamespace) so I don\u2019t see a reason to add a third to the family \u2013 even if just by name.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/11", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/11/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/11/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/11", "id": 233392454, "node_id": "MDU6SXNzdWUyMzMzOTI0NTQ=", "number": 11, "title": "Overwrite __init___ and others?", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-03T20:09:12Z", "updated_at": "2018-02-11T15:04:36Z", "closed_at": "2017-06-04T01:54:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In issue #9 @ilevkivskyi suggests that we should raise an error if any class attribute we're trying to set is already used. This includes `__init__`, `__eq__`, etc. He notes that the typing module raises AttributeError in these cases.\r\n\r\nNote that the caller can suppress the generation of `__eq__` by setting `cmp=False`, can suppress `__repr__` by setting `repr=False`, can suppress the generation of `__init__` by setting `init=False`, etc.\r\n\r\nI think raising an AttributeError if we try to overwrite a dunder method is a good idea. The caller has the choice to either write their own method and suppress ours, or use ours. But the can't try to do both.\r\n\r\nEdit: Fix `init=False` instead of `__init__=False`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/10", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/10/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/10/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/10", "id": 233368621, "node_id": "MDU6SXNzdWUyMzMzNjg2MjE=", "number": 10, "title": "Should setting __slots__ be the default", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-06-03T13:12:37Z", "updated_at": "2017-06-04T20:11:52Z", "closed_at": "2017-06-04T20:11:52Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In point 5 of issue #9, @ilevkivskyi suggests that setting __slots__ should be the default, and setting slots=False would allow the caller to opt out of this behavior.\r\n\r\nGiven the typical use cases for this feature, I tend to agree. I'm opening this issue for discussion of this point.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/9", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/9/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/9/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/9", "id": 233365224, "node_id": "MDU6SXNzdWUyMzMzNjUyMjQ=", "number": 9, "title": "Random comments", "user": {"login": "ilevkivskyi", "id": 12005495, "node_id": "MDQ6VXNlcjEyMDA1NDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/12005495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilevkivskyi", "html_url": "https://github.com/ilevkivskyi", "followers_url": "https://api.github.com/users/ilevkivskyi/followers", "following_url": "https://api.github.com/users/ilevkivskyi/following{/other_user}", "gists_url": "https://api.github.com/users/ilevkivskyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilevkivskyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilevkivskyi/subscriptions", "organizations_url": "https://api.github.com/users/ilevkivskyi/orgs", "repos_url": "https://api.github.com/users/ilevkivskyi/repos", "events_url": "https://api.github.com/users/ilevkivskyi/events{/privacy}", "received_events_url": "https://api.github.com/users/ilevkivskyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-03T12:00:37Z", "updated_at": "2017-06-03T20:21:48Z", "closed_at": "2017-06-03T20:21:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry, it is not possible to comment directly in code, here are some random comments (particularly for TODO items):\r\n\r\n1)\r\n```\r\n#  what exception to raise when non-default follows default? currently\r\n#  ValueError\r\n```\r\ntyping module raises ``TypeError``, we might want to synchronize this.\r\n\r\n2)\r\n```\r\n#  what to do if a user specifies a function we're going to overwrite,\r\n#  like __init__? error? overwrite it?\r\n```\r\ntyping module defines some predefined set of \"infrastructure-critical\" attributes,\r\nIt raises ``AttributeError(\"Cannot overwrite NamedTuple attribute \" + key)`` for these,\r\nand allows overwriting others. I think we should do the same here.\r\n\r\n3)\r\n```\r\n#  use typing.get_type_hints() instead of accessing __annotations__\r\n#  directly? recommended by PEP 526, but that's importing a lot just\r\n#  to get at __annotations__\r\n```\r\nI think it is absolutely OK to directly use ``__annotations__`` here as far as\r\nwe don't do anything fancy/dangerous with ``__annotations__``. These classes\r\nshould be as fast as possible.\r\n\r\n4)\r\n```\r\n# is __annotations__ guaranteed to be an ordered mapping?\r\n```\r\nPEP 526 allows this (emphasis my):\r\n> ``__annotations__`` attribute of that module or class (mangled if private) as an _ordered_ mapping from names to evaluated annotations.\r\n\r\n5)\r\n> Support setting ``__slots__``.\r\n\r\nI am thinking maybe ``__slots__`` should be added by default, with an option to  not add them?\r\n\r\n6)\r\n> Optional support by type checkers (mypy) and typing.py (in the sense that you can declare and use data classes without using typing).\r\n\r\nmypy supports/understands descriptor protocol, so that a custom stub can be added to typeshed that will make mypy understand dataclasses semantics correctly (also some special-casing in mypy can be added for even better support, I can take care of this when we decide on the semantics/implementation).\r\n\r\n7)\r\n> Provide a way to detect if an object is an instance of any data class, similar to using _fields on namedtuples. I'm not sure why people want to be able to detect this, but they do, and Raymond has always suggested looking for an attribute \"_fields\".\r\n\r\nPeople might want some structural subtyping support for dataclasses. Potentially we can support ``hasattr`` or/and a custom ``__subclasshook__`` in spirit of ``collections.abc`` and PEP 544. Static support for this is also possible (again in spirit of PEP 544, I hope mypy will support it soon, see https://github.com/python/mypy/pull/3132).\r\n\r\n**EDIT:** enumerated comments to simplify reading.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/8", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/8/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/8/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/8", "id": 233181477, "node_id": "MDU6SXNzdWUyMzMxODE0Nzc=", "number": 8, "title": "Module-level functions or instance methods for helpers", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-02T13:22:26Z", "updated_at": "2017-06-02T15:44:44Z", "closed_at": "2017-06-02T15:12:04Z", "author_association": "OWNER", "active_lock_reason": null, "body": "There is a need to have a number of helper functions, such as asdict(), astuple(), replace(), etc. This issue is not about which specific functions we need (that will come later), but rather how to make these functions available.\r\n\r\nnamedtuple handles this by having member functions that begin with an underscore, such as ._make(), ._asdict(), ._replace(), ._fields(), etc.\r\n\r\nattrs handles this by using module-level functions that take an instance as a parameter, such as .attrs.fields(), attrs.has(), attrs.asdict(), etc.\r\n\r\nI'm leaning towards the attrs interface of using module-level functions. I don't like the underscores required by namedtuple's approach, and even then you could have name collisions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/7", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/7/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/7/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/7", "id": 232684811, "node_id": "MDU6SXNzdWUyMzI2ODQ4MTE=", "number": 7, "title": "Supporting immutable instances", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-05-31T20:24:07Z", "updated_at": "2017-06-02T16:06:39Z", "closed_at": "2017-06-02T15:18:58Z", "author_association": "OWNER", "active_lock_reason": null, "body": "attrs has a frozen=True decorator parameter that causes all instances to be read-only. It does this by adding a __setattr__ to the class which disallows overwriting attributes.\r\n\r\nI like this feature, and I assume we should do the same thing. If anyone disagrees, please discuss here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/6", "repository_url": "https://api.github.com/repos/ericvsmith/dataclasses", "labels_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/6/comments", "events_url": "https://api.github.com/repos/ericvsmith/dataclasses/issues/6/events", "html_url": "https://github.com/ericvsmith/dataclasses/issues/6", "id": 231935415, "node_id": "MDU6SXNzdWUyMzE5MzU0MTU=", "number": 6, "title": "Methods and properties with type annotations should be ignored.", "user": {"login": "ericvsmith", "id": 489791, "node_id": "MDQ6VXNlcjQ4OTc5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/489791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericvsmith", "html_url": "https://github.com/ericvsmith", "followers_url": "https://api.github.com/users/ericvsmith/followers", "following_url": "https://api.github.com/users/ericvsmith/following{/other_user}", "gists_url": "https://api.github.com/users/ericvsmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericvsmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericvsmith/subscriptions", "organizations_url": "https://api.github.com/users/ericvsmith/orgs", "repos_url": "https://api.github.com/users/ericvsmith/repos", "events_url": "https://api.github.com/users/ericvsmith/events{/privacy}", "received_events_url": "https://api.github.com/users/ericvsmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-29T06:17:25Z", "updated_at": "2017-06-04T21:26:54Z", "closed_at": "2017-06-04T21:26:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "In [this python-ideas post](https://mail.python.org/pipermail/python-ideas/2017-May/045687.html), Nick Coghlan says:\r\n\r\n> That said, even with this model, the base case of \"fields with an\r\n> immutable or shared default\" could potentially be simplified to:\r\n> \r\n>     from autoclass import data_record\r\n> \r\n>     @data_record\r\n>     class Point3D:\r\n>         x: int = 0\r\n>         y: int = 0\r\n>         z: int = 0\r\n> \r\n> However, the potentially surprising behaviour there is that to\r\n> implement it, the decorator not only has to special case the output of\r\n> \"field()\" calls, but also has to special case any object that\r\n> implements the descriptor protocol to avoid getting confused by normal\r\n> method and property definitions.\r\n\r\nI don't believe the last sentence is true, because `__annotations__` will not contain entries for properties or methods with type annotations.\r\n\r\nThis issue is to remind me to add test cases for this.", "performed_via_github_app": null, "score": 1.0}]}