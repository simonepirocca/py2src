{"total_count": 33, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/litl/backoff/issues/100", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/100/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/100/events", "html_url": "https://github.com/litl/backoff/issues/100", "id": 641524917, "node_id": "MDU6SXNzdWU2NDE1MjQ5MTc=", "number": 100, "title": "delete me", "user": {"login": "chris-erickson", "id": 3322287, "node_id": "MDQ6VXNlcjMzMjIyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3322287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-erickson", "html_url": "https://github.com/chris-erickson", "followers_url": "https://api.github.com/users/chris-erickson/followers", "following_url": "https://api.github.com/users/chris-erickson/following{/other_user}", "gists_url": "https://api.github.com/users/chris-erickson/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-erickson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-erickson/subscriptions", "organizations_url": "https://api.github.com/users/chris-erickson/orgs", "repos_url": "https://api.github.com/users/chris-erickson/repos", "events_url": "https://api.github.com/users/chris-erickson/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-erickson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-18T20:21:00Z", "updated_at": "2020-06-18T20:23:02Z", "closed_at": "2020-06-18T20:21:35Z", "author_association": "NONE", "active_lock_reason": null, "body": ".. wrong repo", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/97", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/97/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/97/events", "html_url": "https://github.com/litl/backoff/issues/97", "id": 588508778, "node_id": "MDU6SXNzdWU1ODg1MDg3Nzg=", "number": 97, "title": "Passing the exception instance to the on_backoff and on_giveup handlers", "user": {"login": "voroninman", "id": 399059, "node_id": "MDQ6VXNlcjM5OTA1OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/399059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voroninman", "html_url": "https://github.com/voroninman", "followers_url": "https://api.github.com/users/voroninman/followers", "following_url": "https://api.github.com/users/voroninman/following{/other_user}", "gists_url": "https://api.github.com/users/voroninman/gists{/gist_id}", "starred_url": "https://api.github.com/users/voroninman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voroninman/subscriptions", "organizations_url": "https://api.github.com/users/voroninman/orgs", "repos_url": "https://api.github.com/users/voroninman/repos", "events_url": "https://api.github.com/users/voroninman/events{/privacy}", "received_events_url": "https://api.github.com/users/voroninman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-26T15:28:22Z", "updated_at": "2020-03-27T22:25:40Z", "closed_at": "2020-03-27T22:25:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to log errors during retries but I can't access the exception from the `on_backoff` and `on_giveup` handlers.\r\n\r\nCould you please append `e` to the `details` [here](https://github.com/litl/backoff/blob/master/backoff/_sync.py#L101), [here](https://github.com/litl/backoff/blob/master/backoff/_sync.py#L107) and [here](https://github.com/litl/backoff/blob/master/backoff/_sync.py#L110)? \r\n\r\n\ud83d\ude4f", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/87", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/87/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/87/events", "html_url": "https://github.com/litl/backoff/issues/87", "id": 525223584, "node_id": "MDU6SXNzdWU1MjUyMjM1ODQ=", "number": 87, "title": "backoff 1.9.1: top-level `tests` package collides with other projects' `tests`", "user": {"login": "aetherknight", "id": 62613, "node_id": "MDQ6VXNlcjYyNjEz", "avatar_url": "https://avatars2.githubusercontent.com/u/62613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aetherknight", "html_url": "https://github.com/aetherknight", "followers_url": "https://api.github.com/users/aetherknight/followers", "following_url": "https://api.github.com/users/aetherknight/following{/other_user}", "gists_url": "https://api.github.com/users/aetherknight/gists{/gist_id}", "starred_url": "https://api.github.com/users/aetherknight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aetherknight/subscriptions", "organizations_url": "https://api.github.com/users/aetherknight/orgs", "repos_url": "https://api.github.com/users/aetherknight/repos", "events_url": "https://api.github.com/users/aetherknight/events{/privacy}", "received_events_url": "https://api.github.com/users/aetherknight/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T19:42:10Z", "updated_at": "2019-11-20T02:34:40Z", "closed_at": "2019-11-20T02:34:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "`backoff` 1.9.1 appears to have added a top-level `tests` package that is installed along with the `backoff` package. However, installing the `tests` package as part of `backoff`'s main Python code is causing problems for some of my organization's own test suites, which also reside in a package named `tests`.\r\n\r\nThis is probably something we can work around by changing our `sys.path`, but it's surprising to me that installation of a package would install its own top-level `tests` module.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/85", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/85/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/85/events", "html_url": "https://github.com/litl/backoff/issues/85", "id": 513353378, "node_id": "MDU6SXNzdWU1MTMzNTMzNzg=", "number": 85, "title": "Can't use decorators without \"@\" syntax", "user": {"login": "martinvol", "id": 698027, "node_id": "MDQ6VXNlcjY5ODAyNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/698027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinvol", "html_url": "https://github.com/martinvol", "followers_url": "https://api.github.com/users/martinvol/followers", "following_url": "https://api.github.com/users/martinvol/following{/other_user}", "gists_url": "https://api.github.com/users/martinvol/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinvol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinvol/subscriptions", "organizations_url": "https://api.github.com/users/martinvol/orgs", "repos_url": "https://api.github.com/users/martinvol/repos", "events_url": "https://api.github.com/users/martinvol/events{/privacy}", "received_events_url": "https://api.github.com/users/martinvol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-28T14:49:38Z", "updated_at": "2019-10-29T10:14:28Z", "closed_at": "2019-10-29T10:14:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> backoff.on_exception(print, backoff.expo, Exception, max_tries=8)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: on_exception() got multiple values for argument 'max_tries'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/83", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/83/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/83/events", "html_url": "https://github.com/litl/backoff/issues/83", "id": 504040870, "node_id": "MDU6SXNzdWU1MDQwNDA4NzA=", "number": 83, "title": "Support uvicorn + fastapi", "user": {"login": "smagafurov", "id": 8242406, "node_id": "MDQ6VXNlcjgyNDI0MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8242406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smagafurov", "html_url": "https://github.com/smagafurov", "followers_url": "https://api.github.com/users/smagafurov/followers", "following_url": "https://api.github.com/users/smagafurov/following{/other_user}", "gists_url": "https://api.github.com/users/smagafurov/gists{/gist_id}", "starred_url": "https://api.github.com/users/smagafurov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smagafurov/subscriptions", "organizations_url": "https://api.github.com/users/smagafurov/orgs", "repos_url": "https://api.github.com/users/smagafurov/repos", "events_url": "https://api.github.com/users/smagafurov/events{/privacy}", "received_events_url": "https://api.github.com/users/smagafurov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-10-08T13:21:56Z", "updated_at": "2019-12-07T21:08:44Z", "closed_at": "2019-12-07T21:08:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Uvicorn runs server in event loop and backoff raises TypeError\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/bin/uvicorn\", line 11, in <module>\r\n    load_entry_point('uvicorn==0.8.4', 'console_scripts', 'uvicorn')()\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/click/core.py\", line 764, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/click/core.py\", line 717, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/click/core.py\", line 956, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/click/core.py\", line 555, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/uvicorn/main.py\", line 258, in main\r\n    run(**kwargs)\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/uvicorn/main.py\", line 279, in run\r\n    server.run()\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/uvicorn/main.py\", line 307, in run\r\n    loop.run_until_complete(self.serve(sockets=sockets))\r\n  File \"uvloop/loop.pyx\", line 1451, in uvloop.loop.Loop.run_until_complete\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/uvicorn/main.py\", line 314, in serve\r\n    config.load()\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/uvicorn/config.py\", line 186, in load\r\n    self.loaded_app = import_from_string(self.app)\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/uvicorn/importer.py\", line 20, in import_from_string\r\n    module = importlib.import_module(module_str)\r\n  File \"/Users/sergey/.pyenv/versions/3.7.3/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"./app/api_app.py\", line 14, in <module>\r\n    from app.api import api_v1\r\n...\r\n  File \"./app/itm/client.py\", line 142, in <module>\r\n    class APIClient(requests_client.Client):\r\n  File \"./app/itm/client.py\", line 450, in APIClient\r\n    @retry401\r\n  File \"/Users/sergey/projects/nuc-gateway/venv/lib/python3.7/site-packages/backoff/_decorator.py\", line 181, in decorate\r\n    \"backoff.on_exception applied to a regular function \"\r\nTypeError: backoff.on_exception applied to a regular function inside coroutine, this will lead to event loop hiccups. Use backoff.on_exception on coroutines in asynchronous code.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/81", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/81/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/81/events", "html_url": "https://github.com/litl/backoff/issues/81", "id": 498832008, "node_id": "MDU6SXNzdWU0OTg4MzIwMDg=", "number": 81, "title": "Warnings in Python 3.8", "user": {"login": "discosultan", "id": 2970736, "node_id": "MDQ6VXNlcjI5NzA3MzY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2970736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discosultan", "html_url": "https://github.com/discosultan", "followers_url": "https://api.github.com/users/discosultan/followers", "following_url": "https://api.github.com/users/discosultan/following{/other_user}", "gists_url": "https://api.github.com/users/discosultan/gists{/gist_id}", "starred_url": "https://api.github.com/users/discosultan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discosultan/subscriptions", "organizations_url": "https://api.github.com/users/discosultan/orgs", "repos_url": "https://api.github.com/users/discosultan/repos", "events_url": "https://api.github.com/users/discosultan/events{/privacy}", "received_events_url": "https://api.github.com/users/discosultan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-26T11:38:20Z", "updated_at": "2019-11-16T13:52:16Z", "closed_at": "2019-11-16T13:48:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using backoff under Python 3.8 produces the following warning:\r\n```\r\n/home/discosultan/.local/lib/python3.8/site-packages/backoff/_async.py:15\r\n  /home/discosultan/.local/lib/python3.8/site-packages/backoff/_async.py:15: DeprecationWarning: \"@coroutine\" decorator is deprecated since Python 3.8, use \"async def\" instead\r\n    return asyncio.coroutine(coro_or_func)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/80", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/80/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/80/events", "html_url": "https://github.com/litl/backoff/issues/80", "id": 494146488, "node_id": "MDU6SXNzdWU0OTQxNDY0ODg=", "number": 80, "title": "Log messages should use arguments rather than fully-formatted strings", "user": {"login": "lbernick", "id": 29333301, "node_id": "MDQ6VXNlcjI5MzMzMzAx", "avatar_url": "https://avatars2.githubusercontent.com/u/29333301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbernick", "html_url": "https://github.com/lbernick", "followers_url": "https://api.github.com/users/lbernick/followers", "following_url": "https://api.github.com/users/lbernick/following{/other_user}", "gists_url": "https://api.github.com/users/lbernick/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbernick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbernick/subscriptions", "organizations_url": "https://api.github.com/users/lbernick/orgs", "repos_url": "https://api.github.com/users/lbernick/repos", "events_url": "https://api.github.com/users/lbernick/events{/privacy}", "received_events_url": "https://api.github.com/users/lbernick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-16T16:13:06Z", "updated_at": "2019-10-11T13:11:14Z", "closed_at": "2019-10-11T13:10:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello! My organization is using backoff version 1.8.0, and would benefit from having log messages pass variable data in as arguments (e.g. `logger.error(\"Foo: %s\", \"bar\")`) rather than logging fully formatted strings (e.g. `logger.error(\"Foo: {}\".format(\"bar\"))`). This style of logging is recommended by the [python docs](https://docs.python.org/3/howto/logging.html#logging-variable-data) because it allows log sinks to process log messages in a more meaningful way. Specifically, my organization uses Sentry, which will understand that multiple calls with the same log message but different arguments represent different incidents of the same issue, but can't recognize logs as related to the same issue if arguments are pre-formatted before the string is logged. I am happy to make a pull request for this if you would like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/79", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/79/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/79/events", "html_url": "https://github.com/litl/backoff/issues/79", "id": 480000923, "node_id": "MDU6SXNzdWU0ODAwMDA5MjM=", "number": 79, "title": "Return default value when max retries attempted", "user": {"login": "sagarr", "id": 1051004, "node_id": "MDQ6VXNlcjEwNTEwMDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1051004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sagarr", "html_url": "https://github.com/sagarr", "followers_url": "https://api.github.com/users/sagarr/followers", "following_url": "https://api.github.com/users/sagarr/following{/other_user}", "gists_url": "https://api.github.com/users/sagarr/gists{/gist_id}", "starred_url": "https://api.github.com/users/sagarr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sagarr/subscriptions", "organizations_url": "https://api.github.com/users/sagarr/orgs", "repos_url": "https://api.github.com/users/sagarr/repos", "events_url": "https://api.github.com/users/sagarr/events{/privacy}", "received_events_url": "https://api.github.com/users/sagarr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-13T07:27:08Z", "updated_at": "2019-10-02T20:36:15Z", "closed_at": "2019-10-02T20:36:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI might be missing something here, I tried looking into docs and all issues, but didn't get anything..\r\n\r\nHere what I want, I want to return _default value_ once all the retrying is done, like\r\n\r\n```\r\ndef backoff_hdlr(details):\r\n   return None # tried getting value from URL, now just return None\r\n\r\n@backoff.on_exception(backoff.expo,\r\n                      requests.exceptions.RequestException,\r\n                      on_backoff=backoff_hdlr)\r\ndef get_url(url):\r\n    return requests.get(url)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/77", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/77/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/77/events", "html_url": "https://github.com/litl/backoff/issues/77", "id": 471934211, "node_id": "MDU6SXNzdWU0NzE5MzQyMTE=", "number": 77, "title": "SyntaxError building for python2", "user": {"login": "fryfrog", "id": 87748, "node_id": "MDQ6VXNlcjg3NzQ4", "avatar_url": "https://avatars2.githubusercontent.com/u/87748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fryfrog", "html_url": "https://github.com/fryfrog", "followers_url": "https://api.github.com/users/fryfrog/followers", "following_url": "https://api.github.com/users/fryfrog/following{/other_user}", "gists_url": "https://api.github.com/users/fryfrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/fryfrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fryfrog/subscriptions", "organizations_url": "https://api.github.com/users/fryfrog/orgs", "repos_url": "https://api.github.com/users/fryfrog/repos", "events_url": "https://api.github.com/users/fryfrog/events{/privacy}", "received_events_url": "https://api.github.com/users/fryfrog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-23T20:44:07Z", "updated_at": "2019-07-24T22:42:07Z", "closed_at": "2019-07-24T22:42:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I own the Arch Linux AUR `python-backoff` package and was hoping you might be able to help me figure out why it doesn't build for python2 (its fine for python 3).\r\n\r\n```\r\n==> Starting package_python2-backoff()...\r\n/usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: 'python_requires'\r\n  warnings.warn(msg)\r\nrunning install\r\nrunning build\r\nrunning build_py\r\nfile README.py (for module README) not found\r\nfile LICENSE.py (for module LICENSE) not found\r\ncreating build\r\ncreating build/lib\r\ncreating build/lib/backoff\r\ncopying backoff/_decorator.py -> build/lib/backoff\r\ncopying backoff/_wait_gen.py -> build/lib/backoff\r\ncopying backoff/_async.py -> build/lib/backoff\r\ncopying backoff/_common.py -> build/lib/backoff\r\ncopying backoff/__init__.py -> build/lib/backoff\r\ncopying backoff/_jitter.py -> build/lib/backoff\r\ncopying backoff/_sync.py -> build/lib/backoff\r\nfile README.py (for module README) not found\r\nfile LICENSE.py (for module LICENSE) not found\r\nrunning install_lib\r\ncreating /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr\r\ncreating /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib\r\ncreating /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7\r\ncreating /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages\r\ncreating /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/_sync.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/__init__.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/_common.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/_jitter.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/_async.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/_decorator.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\ncopying build/lib/backoff/_wait_gen.py -> /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/_sync.py to _sync.pyc\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/__init__.py to __init__.pyc\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/_common.py to _common.pyc\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/_jitter.py to _jitter.pyc\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/_async.py to _async.pyc\r\n  File \"/usr/lib/python2.7/site-packages/backoff/_async.py\", line 22\r\n    async def _call_handlers(hdlrs, target, args, kwargs, tries, elapsed, **extra):\r\n            ^\r\nSyntaxError: invalid syntax\r\n\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/_decorator.py to _decorator.pyc\r\nbyte-compiling /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff/_wait_gen.py to _wait_gen.pyc\r\nwriting byte-compilation script '/tmp/tmpuUGdlI.py'\r\n/usr/bin/python2 -O /tmp/tmpuUGdlI.py\r\n  File \"/usr/lib/python2.7/site-packages/backoff/_async.py\", line 22\r\n    async def _call_handlers(hdlrs, target, args, kwargs, tries, elapsed, **extra):\r\n            ^\r\nSyntaxError: invalid syntax\r\n\r\nremoving /tmp/tmpuUGdlI.py\r\nrunning install_egg_info\r\nWriting /home/fryfrog/aur/python-backoff/pkg/python2-backoff/usr/lib/python2.7/site-packages/backoff-1.8.0-py2.7.egg-info\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/75", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/75/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/75/events", "html_url": "https://github.com/litl/backoff/issues/75", "id": 451820472, "node_id": "MDU6SXNzdWU0NTE4MjA0NzI=", "number": 75, "title": "tests/ in pypi tarball", "user": {"login": "pgajdos", "id": 4067843, "node_id": "MDQ6VXNlcjQwNjc4NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4067843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pgajdos", "html_url": "https://github.com/pgajdos", "followers_url": "https://api.github.com/users/pgajdos/followers", "following_url": "https://api.github.com/users/pgajdos/following{/other_user}", "gists_url": "https://api.github.com/users/pgajdos/gists{/gist_id}", "starred_url": "https://api.github.com/users/pgajdos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pgajdos/subscriptions", "organizations_url": "https://api.github.com/users/pgajdos/orgs", "repos_url": "https://api.github.com/users/pgajdos/repos", "events_url": "https://api.github.com/users/pgajdos/events{/privacy}", "received_events_url": "https://api.github.com/users/pgajdos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-04T06:32:21Z", "updated_at": "2019-11-19T01:59:13Z", "closed_at": "2019-11-19T01:58:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nCould i ask you for adding tests into release tarball? It can be used for testing the package after build.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/74", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/74/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/74/events", "html_url": "https://github.com/litl/backoff/issues/74", "id": 450174842, "node_id": "MDU6SXNzdWU0NTAxNzQ4NDI=", "number": 74, "title": "_sync.py:94: TypeError with python2.7", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-30T07:41:32Z", "updated_at": "2019-07-23T14:37:33Z", "closed_at": "2019-07-23T14:37:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "While backoff seems to be working on python 3.5-3.7, it seems that that it fails with python27 giving a weird exception, even for a simple use case:\r\n\r\n```\r\n@backoff.on_exception(backoff.expo,\r\n                      requests.exceptions.RequestException,\r\n                      max_time=60)\r\ndef test_delete_project(cl_admin, cl_normal, slug):\r\n\r\n    with pytest.raises(JIRAError) as ex:\r\n        assert cl_normal.delete_project(slug)\r\n\r\n        assert 'Not enough permissions to delete project' in str(ex.value) \\\r\n            or str(ex.value).endswith('is not a Project, projectID or slug')\r\n\r\n    assert cl_admin.delete_project(slug)\r\n```\r\nFailure:\r\n```\r\n__________________________________________________________________________________________________________________________ test_delete_project __________________________________________________________________________________________________________________________\r\n\r\nargs = (), kwargs = {}, max_tries_ = None, max_time_ = 60, tries = 1, start = datetime.datetime(2019, 5, 30, 8, 38, 0, 783162), wait = <generator object expo at 0x10cd4a5f0>, elapsed = 8e-06\r\ndetails = (<function test_delete_project at 0x10cc6d1b8>, (), {}, 1, 8e-06)\r\n\r\n    @functools.wraps(target)\r\n    def retry(*args, **kwargs):\r\n\r\n        # change names because python 2.x doesn't have nonlocal\r\n        max_tries_ = _maybe_call(max_tries)\r\n        max_time_ = _maybe_call(max_time)\r\n\r\n        tries = 0\r\n        start = datetime.datetime.now()\r\n        wait = _init_wait_gen(wait_gen, wait_gen_kwargs)\r\n        while True:\r\n            tries += 1\r\n            elapsed = timedelta.total_seconds(datetime.datetime.now() - start)\r\n            details = (target, args, kwargs, tries, elapsed)\r\n\r\n            try:\r\n>               ret = target(*args, **kwargs)\r\nE               TypeError: test_delete_project() takes exactly 3 arguments (0 given)\r\n\r\n.tox/py27/lib/python2.7/site-packages/backoff/_sync.py:94: TypeError\r\n```\r\n\r\nUpdate: I ended up using tenacity.retry which aparantly works with all python versiosns.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/56", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/56/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/56/events", "html_url": "https://github.com/litl/backoff/issues/56", "id": 345877403, "node_id": "MDU6SXNzdWUzNDU4Nzc0MDM=", "number": 56, "title": "Python 3.7.0 test failures", "user": {"login": "bowlofeggs", "id": 354506, "node_id": "MDQ6VXNlcjM1NDUwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/354506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bowlofeggs", "html_url": "https://github.com/bowlofeggs", "followers_url": "https://api.github.com/users/bowlofeggs/followers", "following_url": "https://api.github.com/users/bowlofeggs/following{/other_user}", "gists_url": "https://api.github.com/users/bowlofeggs/gists{/gist_id}", "starred_url": "https://api.github.com/users/bowlofeggs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bowlofeggs/subscriptions", "organizations_url": "https://api.github.com/users/bowlofeggs/orgs", "repos_url": "https://api.github.com/users/bowlofeggs/repos", "events_url": "https://api.github.com/users/bowlofeggs/events{/privacy}", "received_events_url": "https://api.github.com/users/bowlofeggs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2018-07-30T18:24:24Z", "updated_at": "2018-11-26T14:16:44Z", "closed_at": "2018-11-23T14:48:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings!\r\n\r\nI've been working on getting python-backoff to work in Fedora's Rawhide release, which recently upgraded to the recently released Python 3.7. There are three test failures there:\r\n\r\n```\r\n_________________________________________ test_on_exception_coro_cancelling __________________________________________\r\n                                                      \r\nevent_loop = <_UnixSelectorEventLoop running=False closed=False debug=False>                                          \r\n                                     \r\n    @pytest.mark.asyncio                                                                                                                                                                                                                     \r\n    def test_on_exception_coro_cancelling(event_loop):      \r\n        sleep_started_event = asyncio.Event()\r\n    \r\n        @backoff.on_predicate(backoff.expo)\r\n        @asyncio.coroutine                               \r\n        def coro():\r\n            sleep_started_event.set()\r\n                \r\n            try:\r\n                yield from asyncio.sleep(10)                                    \r\n            except asyncio.CancelledError:\r\n                return True\r\n    \r\n            return False\r\n    \r\n        task = event_loop.create_task(coro())\r\n    \r\n>       yield from sleep_started_event.wait()\r\nE       TypeError: cannot 'yield from' a coroutine object in a non-coroutine generator\r\n\r\ntests/python34/test_backoff_async.py:568: TypeError\r\n_______________________________________ test_on_exception_on_regular_function ________________________________________\r\n\r\n    @pytest.mark.asyncio\r\n    def test_on_exception_on_regular_function():\r\n        # Force this function to be a running coroutine.\r\n>       yield from asyncio.sleep(0)\r\nE       TypeError: cannot 'yield from' a coroutine object in a non-coroutine generator\r\n\r\ntests/python34/test_backoff_async.py:578: TypeError\r\n_______________________________________ test_on_predicate_on_regular_function ________________________________________\r\n\r\n    @pytest.mark.asyncio\r\n    def test_on_predicate_on_regular_function():\r\n        # Force this function to be a running coroutine.\r\n>       yield from asyncio.sleep(0)\r\nE       TypeError: cannot 'yield from' a coroutine object in a non-coroutine generator\r\n\r\ntests/python34/test_backoff_async.py:590: TypeError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/52", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/52/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/52/events", "html_url": "https://github.com/litl/backoff/issues/52", "id": 325963371, "node_id": "MDU6SXNzdWUzMjU5NjMzNzE=", "number": 52, "title": "Configure a LoggerAdapter", "user": {"login": "achiang", "id": 98948, "node_id": "MDQ6VXNlcjk4OTQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/98948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/achiang", "html_url": "https://github.com/achiang", "followers_url": "https://api.github.com/users/achiang/followers", "following_url": "https://api.github.com/users/achiang/following{/other_user}", "gists_url": "https://api.github.com/users/achiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/achiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/achiang/subscriptions", "organizations_url": "https://api.github.com/users/achiang/orgs", "repos_url": "https://api.github.com/users/achiang/repos", "events_url": "https://api.github.com/users/achiang/events{/privacy}", "received_events_url": "https://api.github.com/users/achiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-24T04:52:04Z", "updated_at": "2019-07-23T14:42:56Z", "closed_at": "2019-07-23T14:42:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using `backoff` in a fairly bog standard web app, and our existing app-wide loggers are all configured to use a `LoggerAdapter` to emit a \"tracer ID\", which is simply a UUID generated by nginx and then propagated into the app.\r\n\r\nWhenever we emit a logger, the tracer id is included, and thus, one can trace an http request throughout its entire lifecycle.\r\n\r\nhttps://docs.python.org/2/howto/logging-cookbook.html#using-loggeradapters-to-impart-contextual-information\r\n\r\nWould love to be able to configure `backoff`'s logger similarly, so we can see if a given http request resulted in any back offs.\r\n\r\nHere is the relevant snippet of how we configure our own `LoggerAdapter`; the key part is that we provide a wrapper around `logging.getLogger`, which then returns our adapter instead:\r\n\r\n```python\r\nclass TraceIDLoggingAdapter(logging.LoggerAdapter):\r\n    def process(self, msg, kwargs):\r\n        tracer = self.extra['trace_id']\r\n        if tracer:\r\n            tracer += \" \"\r\n        return '%s%s' % (tracer, msg), kwargs\r\n\r\n\r\nclass GlobalTraceID(object):\r\n    def __getitem__(self, key):\r\n        return get_global_trace_id()\r\n\r\n    def __iter__(self):\r\n        return get_global_trace_id()\r\n\r\n\r\ndef get_logger(name):\r\n    logger = logging.getLogger(name)\r\n    adapter = TraceIDLoggingAdapter(logger, GlobalTraceID())\r\n    return adapter\r\n```\r\n\r\nAny thoughts here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/50", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/50/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/50/events", "html_url": "https://github.com/litl/backoff/issues/50", "id": 311670848, "node_id": "MDU6SXNzdWUzMTE2NzA4NDg=", "number": 50, "title": "Override the logger", "user": {"login": "terrisgit", "id": 6069365, "node_id": "MDQ6VXNlcjYwNjkzNjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/6069365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/terrisgit", "html_url": "https://github.com/terrisgit", "followers_url": "https://api.github.com/users/terrisgit/followers", "following_url": "https://api.github.com/users/terrisgit/following{/other_user}", "gists_url": "https://api.github.com/users/terrisgit/gists{/gist_id}", "starred_url": "https://api.github.com/users/terrisgit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/terrisgit/subscriptions", "organizations_url": "https://api.github.com/users/terrisgit/orgs", "repos_url": "https://api.github.com/users/terrisgit/repos", "events_url": "https://api.github.com/users/terrisgit/events{/privacy}", "received_events_url": "https://api.github.com/users/terrisgit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-04-05T15:58:42Z", "updated_at": "2018-12-21T05:39:28Z", "closed_at": "2018-12-21T05:39:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Because of AWS CloudWatch (see https://pypi.python.org/pypi/watchtower), I want to use backoff to configure the logging package. If CloudWatch is inaccessible, an exception is thrown when attempting to configure a logger that uses CloudWatch. Using backoff worked great until I realized that I wasn't seeing any more 'backoff' log entries in CloudWatch. Unfortunately, using backoff in this way initializes the 'backoff' logger before logging is initialized. It also pollutes this logger for the duration of the process as there is no known way to reconfigure a logger. Thus, I would like to tell backoff to use a different logger either by object or by name. It would be best for this to be configured via decorators.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/45", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/45/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/45/events", "html_url": "https://github.com/litl/backoff/issues/45", "id": 292140438, "node_id": "MDU6SXNzdWUyOTIxNDA0Mzg=", "number": 45, "title": "wait_gen counters does not restart on successful function call", "user": {"login": "alekna", "id": 10272121, "node_id": "MDQ6VXNlcjEwMjcyMTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/10272121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekna", "html_url": "https://github.com/alekna", "followers_url": "https://api.github.com/users/alekna/followers", "following_url": "https://api.github.com/users/alekna/following{/other_user}", "gists_url": "https://api.github.com/users/alekna/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekna/subscriptions", "organizations_url": "https://api.github.com/users/alekna/orgs", "repos_url": "https://api.github.com/users/alekna/repos", "events_url": "https://api.github.com/users/alekna/events{/privacy}", "received_events_url": "https://api.github.com/users/alekna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-27T18:10:34Z", "updated_at": "2018-06-01T21:52:09Z", "closed_at": "2018-06-01T21:51:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "`backoff` does not restart `wait_gen` counters on successful function call.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/44", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/44/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/44/events", "html_url": "https://github.com/litl/backoff/issues/44", "id": 264550785, "node_id": "MDU6SXNzdWUyNjQ1NTA3ODU=", "number": 44, "title": "Do not pass details if the handler requires none", "user": {"login": "c4tz", "id": 4035667, "node_id": "MDQ6VXNlcjQwMzU2Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4035667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c4tz", "html_url": "https://github.com/c4tz", "followers_url": "https://api.github.com/users/c4tz/followers", "following_url": "https://api.github.com/users/c4tz/following{/other_user}", "gists_url": "https://api.github.com/users/c4tz/gists{/gist_id}", "starred_url": "https://api.github.com/users/c4tz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c4tz/subscriptions", "organizations_url": "https://api.github.com/users/c4tz/orgs", "repos_url": "https://api.github.com/users/c4tz/repos", "events_url": "https://api.github.com/users/c4tz/events{/privacy}", "received_events_url": "https://api.github.com/users/c4tz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-11T11:28:56Z", "updated_at": "2018-06-01T21:54:35Z", "closed_at": "2018-06-01T21:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, thank you for creating such a convenient library! I really like it and have no problems using it, but here's a small suggestion:\r\n\r\nIf a given handler does not make use of the `details` object, one has to either write:\r\n\r\n```python\r\ndef default_handler(_: dict) -> None:\r\n    '''Standard exception handling'''\r\n    log(sys.exc_info()[1])\r\n```\r\nor:\r\n\r\n```python\r\ndef default_handler(details: dict) -> None:\r\n    '''Standard exception handling'''\r\n    if details:\r\n        pass\r\n    log(sys.exc_info()[1])\r\n```\r\nin order to get a 10/10 result with pylint.\r\n\r\nIt would be better if you provided a way of not having to deal with this. Example:\r\n\r\n```python\r\nfrom inspect import signature\r\n\r\nif len(signature(handler).parameters) < 1:\r\n    def wrapper(_: dict) -> None:\r\n        '''Wrapper for handlers that do not make use of details'''\r\n        return handler()\r\n    actual_handler = wrapper\r\nelse:\r\n    actual_handler = handler \r\n```\r\nSo that this is possible:\r\n\r\n```python\r\ndef default_handler() -> None:\r\n    '''Standard exception handling'''\r\n    log(sys.exc_info()[1])\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/43", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/43/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/43/events", "html_url": "https://github.com/litl/backoff/issues/43", "id": 257610631, "node_id": "MDU6SXNzdWUyNTc2MTA2MzE=", "number": 43, "title": "support for max_time as an alternative to max_tries", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "bgreen-litl", "id": 1483313, "node_id": "MDQ6VXNlcjE0ODMzMTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1483313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgreen-litl", "html_url": "https://github.com/bgreen-litl", "followers_url": "https://api.github.com/users/bgreen-litl/followers", "following_url": "https://api.github.com/users/bgreen-litl/following{/other_user}", "gists_url": "https://api.github.com/users/bgreen-litl/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgreen-litl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgreen-litl/subscriptions", "organizations_url": "https://api.github.com/users/bgreen-litl/orgs", "repos_url": "https://api.github.com/users/bgreen-litl/repos", "events_url": "https://api.github.com/users/bgreen-litl/events{/privacy}", "received_events_url": "https://api.github.com/users/bgreen-litl/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bgreen-litl", "id": 1483313, "node_id": "MDQ6VXNlcjE0ODMzMTM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1483313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bgreen-litl", "html_url": "https://github.com/bgreen-litl", "followers_url": "https://api.github.com/users/bgreen-litl/followers", "following_url": "https://api.github.com/users/bgreen-litl/following{/other_user}", "gists_url": "https://api.github.com/users/bgreen-litl/gists{/gist_id}", "starred_url": "https://api.github.com/users/bgreen-litl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bgreen-litl/subscriptions", "organizations_url": "https://api.github.com/users/bgreen-litl/orgs", "repos_url": "https://api.github.com/users/bgreen-litl/repos", "events_url": "https://api.github.com/users/bgreen-litl/events{/privacy}", "received_events_url": "https://api.github.com/users/bgreen-litl/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 14, "created_at": "2017-09-14T06:37:45Z", "updated_at": "2018-04-11T17:30:38Z", "closed_at": "2018-04-11T15:11:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Full jitter is great, but it can mean that whatever you're polling gets significantly less time than you might expect to be ready.\r\n\r\nIt would also be great to be able to say something along the lines of \"try for 5 minutes, backing off exponentially\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/41", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/41/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/41/events", "html_url": "https://github.com/litl/backoff/issues/41", "id": 241601216, "node_id": "MDU6SXNzdWUyNDE2MDEyMTY=", "number": 41, "title": "Change the arguments when backoff occurs", "user": {"login": "Jeffrey04", "id": 46977, "node_id": "MDQ6VXNlcjQ2OTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/46977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jeffrey04", "html_url": "https://github.com/Jeffrey04", "followers_url": "https://api.github.com/users/Jeffrey04/followers", "following_url": "https://api.github.com/users/Jeffrey04/following{/other_user}", "gists_url": "https://api.github.com/users/Jeffrey04/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jeffrey04/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jeffrey04/subscriptions", "organizations_url": "https://api.github.com/users/Jeffrey04/orgs", "repos_url": "https://api.github.com/users/Jeffrey04/repos", "events_url": "https://api.github.com/users/Jeffrey04/events{/privacy}", "received_events_url": "https://api.github.com/users/Jeffrey04/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-10T05:09:50Z", "updated_at": "2018-06-01T21:54:48Z", "closed_at": "2018-06-01T21:54:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose I have a function that sends a HTTP request with a token that is to be refreshed every N minutes that is not under my control. So I wrap the token fetching request into a separate closure that can be called whenever needed.\r\n\r\n    def token_fetcher():\r\n        token = None\r\n\r\n        def _fetcher(renew):\r\n            nonlocal token\r\n            if token is None or renew:\r\n                token = do_something_to_fetch_the_token()\r\n\r\n            return token\r\n\r\n        return _fetcher\r\n\r\nand my actual function doing HTTP request\r\n\r\n    def do_http_request(query, token_fetcher, renew=False):\r\n        return requests.get('http://example.com/request', param=query, header=token_fetcher(renew))\r\n\r\nSo is it possible to make backoff to flip `renew` into `True` if backoff happens? (second trial onwards)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/40", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/40/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/40/events", "html_url": "https://github.com/litl/backoff/issues/40", "id": 241095626, "node_id": "MDU6SXNzdWUyNDEwOTU2MjY=", "number": 40, "title": "Provide backoff context managers", "user": {"login": "OddBloke", "id": 62736, "node_id": "MDQ6VXNlcjYyNzM2", "avatar_url": "https://avatars1.githubusercontent.com/u/62736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OddBloke", "html_url": "https://github.com/OddBloke", "followers_url": "https://api.github.com/users/OddBloke/followers", "following_url": "https://api.github.com/users/OddBloke/following{/other_user}", "gists_url": "https://api.github.com/users/OddBloke/gists{/gist_id}", "starred_url": "https://api.github.com/users/OddBloke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OddBloke/subscriptions", "organizations_url": "https://api.github.com/users/OddBloke/orgs", "repos_url": "https://api.github.com/users/OddBloke/repos", "events_url": "https://api.github.com/users/OddBloke/events{/privacy}", "received_events_url": "https://api.github.com/users/OddBloke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-07-06T21:46:01Z", "updated_at": "2017-07-07T13:53:48Z", "closed_at": "2017-07-06T22:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I sometimes have a third-party function or method that I would like to retry using backoff. Currently, I have to wrap the call in a single line function and decorate that. It would be nice if I could, instead, use a context manager.\r\n\r\nSo what I currently do is:\r\n\r\n```py\r\ndef do_a_thing(...):\r\n    @backoff.on_exception(...)\r\n    def _actually_do_third_party_thing():\r\n        _do_third_party_thing()\r\n\r\n    some_setup()\r\n    _actually_do_third_party_thing()\r\n    some_teardown()\r\n```\r\n\r\nAnd what I'd like to be able to do:\r\n\r\n```py\r\ndef do_a_thing(...):\r\n    some_setup()\r\n    with backoff.on_exception(...):\r\n        _do_third_party_thing()\r\n    some_teardown()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/39", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/39/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/39/events", "html_url": "https://github.com/litl/backoff/issues/39", "id": 237785170, "node_id": "MDU6SXNzdWUyMzc3ODUxNzA=", "number": 39, "title": "Option to set different logging level", "user": {"login": "simonklb", "id": 634190, "node_id": "MDQ6VXNlcjYzNDE5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/634190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonklb", "html_url": "https://github.com/simonklb", "followers_url": "https://api.github.com/users/simonklb/followers", "following_url": "https://api.github.com/users/simonklb/following{/other_user}", "gists_url": "https://api.github.com/users/simonklb/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonklb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonklb/subscriptions", "organizations_url": "https://api.github.com/users/simonklb/orgs", "repos_url": "https://api.github.com/users/simonklb/repos", "events_url": "https://api.github.com/users/simonklb/events{/privacy}", "received_events_url": "https://api.github.com/users/simonklb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-06-22T09:30:30Z", "updated_at": "2018-07-14T14:25:55Z", "closed_at": "2018-06-22T18:42:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm currently using backoff in a project where I need to wait for a service to come online after it has just started. Everything is working great but the logs might look a little bit suspicious to a user since it's getting filled with errors while backing off.\r\n\r\nWould you mind having an option where you could set the log level? For example setting it to `DEBUG` even though it's an exception.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/37", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/37/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/37/events", "html_url": "https://github.com/litl/backoff/issues/37", "id": 234025493, "node_id": "MDU6SXNzdWUyMzQwMjU0OTM=", "number": 37, "title": "Override default handlers instead of appending to.", "user": {"login": "mhbkb", "id": 8602122, "node_id": "MDQ6VXNlcjg2MDIxMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8602122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhbkb", "html_url": "https://github.com/mhbkb", "followers_url": "https://api.github.com/users/mhbkb/followers", "following_url": "https://api.github.com/users/mhbkb/following{/other_user}", "gists_url": "https://api.github.com/users/mhbkb/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhbkb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhbkb/subscriptions", "organizations_url": "https://api.github.com/users/mhbkb/orgs", "repos_url": "https://api.github.com/users/mhbkb/repos", "events_url": "https://api.github.com/users/mhbkb/events{/privacy}", "received_events_url": "https://api.github.com/users/mhbkb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-06T21:09:54Z", "updated_at": "2019-05-08T22:30:04Z", "closed_at": "2019-05-08T22:30:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems we are trying to append handlers to the default one. Do you think it may make more sense to allow users to override them or even have the ability to disable the default handlers?\r\n```\r\ndef _handlers(hdlr, default=None):\r\n    defaults = [default] if default is not None else []\r\n\r\n    if hdlr is None:\r\n        return defaults\r\n\r\n    if hasattr(hdlr, '__iter__'):\r\n        return defaults + list(hdlr)\r\n\r\n    return defaults + [hdlr]\r\n```\r\nTo\r\n```\r\ndef _handlers(hdlr, default=None):\r\n    if hdlr is None:\r\n        return [default] if default is not None else []\r\n\r\n    if hasattr(hdlr, '__iter__'):\r\n        return list(hdlr)\r\n\r\n    return [hdlr]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/35", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/35/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/35/events", "html_url": "https://github.com/litl/backoff/issues/35", "id": 230079901, "node_id": "MDU6SXNzdWUyMzAwNzk5MDE=", "number": 35, "title": "Include LICENSE in manifest", "user": {"login": "gatesn", "id": 1928052, "node_id": "MDQ6VXNlcjE5MjgwNTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1928052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gatesn", "html_url": "https://github.com/gatesn", "followers_url": "https://api.github.com/users/gatesn/followers", "following_url": "https://api.github.com/users/gatesn/following{/other_user}", "gists_url": "https://api.github.com/users/gatesn/gists{/gist_id}", "starred_url": "https://api.github.com/users/gatesn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gatesn/subscriptions", "organizations_url": "https://api.github.com/users/gatesn/orgs", "repos_url": "https://api.github.com/users/gatesn/repos", "events_url": "https://api.github.com/users/gatesn/events{/privacy}", "received_events_url": "https://api.github.com/users/gatesn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-19T20:20:47Z", "updated_at": "2017-05-22T16:36:04Z", "closed_at": "2017-05-22T16:36:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per https://github.com/conda-forge/staged-recipes/pull/2991", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/30", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/30/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/30/events", "html_url": "https://github.com/litl/backoff/issues/30", "id": 222518202, "node_id": "MDU6SXNzdWUyMjI1MTgyMDI=", "number": 30, "title": "RuntimeError: There is no current event loop in thread 'Thread-1'.", "user": {"login": "luckydonald", "id": 2737108, "node_id": "MDQ6VXNlcjI3MzcxMDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2737108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luckydonald", "html_url": "https://github.com/luckydonald", "followers_url": "https://api.github.com/users/luckydonald/followers", "following_url": "https://api.github.com/users/luckydonald/following{/other_user}", "gists_url": "https://api.github.com/users/luckydonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/luckydonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luckydonald/subscriptions", "organizations_url": "https://api.github.com/users/luckydonald/orgs", "repos_url": "https://api.github.com/users/luckydonald/repos", "events_url": "https://api.github.com/users/luckydonald/events{/privacy}", "received_events_url": "https://api.github.com/users/luckydonald/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-04-18T19:20:00Z", "updated_at": "2017-04-21T16:58:57Z", "closed_at": "2017-04-20T21:14:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\nERROR    teleflask.server.mixins._execute_command: \r\n         Failed calling command '/test' (<function test at 0x10f7836a8>):\r\n         Traceback (most recent call last):\r\n           File \"/path/to/teleflask/teleflask/server/mixins.py\", line 499, in _execute_command\r\n             self.process_result(update, func(update, text))\r\n           File \"/path/to/teleflask/teleflask/server/base.py\", line 526, in process_result\r\n             from ..messages import Message\r\n           File \"/path/to/teleflask/teleflask/messages.py\", line 230, in <module>\r\n             class DocumentMessage(Message):\r\n           File \"/path/to/teleflask/teleflask/messages.py\", line 315, in DocumentMessage\r\n             def send(self, sender: PytgbotApiBot, receiver, reply_id)->PytgbotApiMessage:\r\n           File \"/path/to/teleflask/virtualenv3.6.venv/lib/python3.6/site-packages/backoff/_decorator.py\", line 141, in decorate\r\n             if asyncio.Task.current_task() is not None:\r\n           File \"/usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/events.py\", line 671, in get_event_loop\r\n             return get_event_loop_policy().get_event_loop()\r\n           File \"/usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/events.py\", line 583, in get_event_loop\r\n             % threading.current_thread().name)\r\n         RuntimeError: There is no current event loop in thread 'Thread-1'.\r\n```\r\nSo what fails is:\r\n```py\r\nasyncio.Task.current_task()\r\n```\r\nWhen calling [`teleflask/messages.py`:315](https://github.com/luckydonald/teleflask/blob/777953b61d0cee520b81398e68b276f4c463f997/teleflask/messages.py#L315).\r\nThe actual fail in **backoff** is `_decorator.py` (function `def decorate(target)` after `asyncio.iscoroutinefunction(target)` was false.\r\n\r\n\r\nFor reference, this is [luckydonald/teleflask@`777953`](https://github.com/luckydonald/teleflask/tree/777953b61d0cee520b81398e68b276f4c463f997), running `examples/example2.py`. (Flask internal debug server)\r\n**Mac OS** `10.9.5`\r\n**Python** `3.6.0` (via brew)\r\n```py\r\nPython 3.6.0 (default, Jan  1 2017, 18:45:22) \r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.56)] on darwin\r\n```\r\n**backoff**: Maybe `1.4.0`?\r\n```sh\r\npython -c 'from backoff import __version__ as v; print(v)'\r\nimportError: cannot import name '__version__'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/22", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/22/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/22/events", "html_url": "https://github.com/litl/backoff/issues/22", "id": 202219134, "node_id": "MDU6SXNzdWUyMDIyMTkxMzQ=", "number": 22, "title": "Add support for asyncio (Python>=3.4)", "user": {"login": "rutsky", "id": 46573, "node_id": "MDQ6VXNlcjQ2NTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/46573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rutsky", "html_url": "https://github.com/rutsky", "followers_url": "https://api.github.com/users/rutsky/followers", "following_url": "https://api.github.com/users/rutsky/following{/other_user}", "gists_url": "https://api.github.com/users/rutsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rutsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rutsky/subscriptions", "organizations_url": "https://api.github.com/users/rutsky/orgs", "repos_url": "https://api.github.com/users/rutsky/repos", "events_url": "https://api.github.com/users/rutsky/events{/privacy}", "received_events_url": "https://api.github.com/users/rutsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2017-01-20T19:14:31Z", "updated_at": "2017-02-06T20:29:11Z", "closed_at": "2017-02-05T14:52:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be great if backoff would be available for use with asyncio's coroutines.\r\n\r\nThis requires:\r\n\r\n1. Handle coroutines in `on_predicate` and `on_exception` decorators.\r\n2. Handle case when `on_success`/`on_backoff`/`on_giveup` are coroutines.\r\n3. Use `asyncio.sleep()` instead of `time.sleep()`.\r\n4. Conditionally installing/importing required deps on Python < 3.4; tests; CI update.\r\n\r\nObviously sync and async versions of can't be trivially combined.\r\nThis can be solved in one of the following ways:\r\n\r\n1. Check in `on_predicate`/`on_exception` is wrapped function is coroutine and switch between sync and async implementations. Notice that in general `time.sleep` can't be used with asyncio, only in separate thread due to the nature of async code. This means that both implementations - sync and async - in single program will be used very rarely.\r\n\r\n   Also I don't see easy way of sharing code between sync/async versions. At least tests will be completely duplicated.\r\n\r\n2. Reimplement `backoff` using async primitives in separate library. Unfortunately this leads to code duplication.\r\n\r\nAs starting point I forked `backoff` and reimplemented it with async primitives: https://github.com/rutsky/aiobackoff\r\nIt passes all tests and now I'm trying to integrate it with my project.\r\n\r\nPlease share ideas and intents of implementing asyncio support in backoff library, I would like to share efforts as much as possible.\r\nIf there are no indents of adding asyncio support to `backoff` I can publish `aiobackoff` fork.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/16", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/16/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/16/events", "html_url": "https://github.com/litl/backoff/issues/16", "id": 176782706, "node_id": "MDU6SXNzdWUxNzY3ODI3MDY=", "number": 16, "title": "Default handlers log too much and there's no way to disable them through the library API", "user": {"login": "duckpunch", "id": 1070323, "node_id": "MDQ6VXNlcjEwNzAzMjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1070323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/duckpunch", "html_url": "https://github.com/duckpunch", "followers_url": "https://api.github.com/users/duckpunch/followers", "following_url": "https://api.github.com/users/duckpunch/following{/other_user}", "gists_url": "https://api.github.com/users/duckpunch/gists{/gist_id}", "starred_url": "https://api.github.com/users/duckpunch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/duckpunch/subscriptions", "organizations_url": "https://api.github.com/users/duckpunch/orgs", "repos_url": "https://api.github.com/users/duckpunch/repos", "events_url": "https://api.github.com/users/duckpunch/events{/privacy}", "received_events_url": "https://api.github.com/users/duckpunch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2016-09-14T00:10:59Z", "updated_at": "2016-11-18T15:15:00Z", "closed_at": "2016-11-18T15:14:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use `backoff` with a login function that connects to an external server.  The code looks something like this.\n\n``` python\n@backoff.on_exception(backoff.expo, FailedConnection)\ndef login(username, password):\n    # stuff\n```\n\nWhen `on_backoff` triggers, the default handler is invoked which logs the signature which includes the password in this case.\n\nIt'd be great to have a way to disable/override the default handlers to provide my own logging behavior.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/15", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/15/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/15/events", "html_url": "https://github.com/litl/backoff/issues/15", "id": 175899826, "node_id": "MDU6SXNzdWUxNzU4OTk4MjY=", "number": 15, "title": "backoff yield functions", "user": {"login": "mhbkb", "id": 8602122, "node_id": "MDQ6VXNlcjg2MDIxMjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8602122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhbkb", "html_url": "https://github.com/mhbkb", "followers_url": "https://api.github.com/users/mhbkb/followers", "following_url": "https://api.github.com/users/mhbkb/following{/other_user}", "gists_url": "https://api.github.com/users/mhbkb/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhbkb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhbkb/subscriptions", "organizations_url": "https://api.github.com/users/mhbkb/orgs", "repos_url": "https://api.github.com/users/mhbkb/repos", "events_url": "https://api.github.com/users/mhbkb/events{/privacy}", "received_events_url": "https://api.github.com/users/mhbkb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-09T00:42:43Z", "updated_at": "2016-09-14T20:55:02Z", "closed_at": "2016-09-14T20:55:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am writing a function which yields results. It seems backoff.on_exception does not work with yield keyword.\n\n@backoff.on_exception(\n  backoff.expo, (ConnectionError, ConnectTimeout), max_tries=MAX_RETRIES)\ndef fib():\n  for i in range(1, 10):\n    raise ConnectionError\n    yield i\n\nIt seems after the generator is generated, it will not go to the retry logic again. Is there any way to fix this?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/14", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/14/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/14/events", "html_url": "https://github.com/litl/backoff/issues/14", "id": 169604100, "node_id": "MDU6SXNzdWUxNjk2MDQxMDA=", "number": 14, "title": "How to modify the retried function's parameter between each backoff call?", "user": {"login": "johnib", "id": 5327862, "node_id": "MDQ6VXNlcjUzMjc4NjI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5327862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnib", "html_url": "https://github.com/johnib", "followers_url": "https://api.github.com/users/johnib/followers", "following_url": "https://api.github.com/users/johnib/following{/other_user}", "gists_url": "https://api.github.com/users/johnib/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnib/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnib/subscriptions", "organizations_url": "https://api.github.com/users/johnib/orgs", "repos_url": "https://api.github.com/users/johnib/repos", "events_url": "https://api.github.com/users/johnib/events{/privacy}", "received_events_url": "https://api.github.com/users/johnib/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-05T13:12:42Z", "updated_at": "2016-09-16T15:59:58Z", "closed_at": "2016-09-16T15:59:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI have a function that ingests records to some stream.\nThe stream may succeed although accepted only a strict subset of the records list.\nI would like to modify the records list before it is processed again by the backoff mechanism (when using the on_predicat decorator).\nIn particular, I would like to filter the records that were not accepted and have them processed again.\n\nHow would I do that?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/11", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/11/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/11/events", "html_url": "https://github.com/litl/backoff/issues/11", "id": 167213228, "node_id": "MDU6SXNzdWUxNjcyMTMyMjg=", "number": 11, "title": "backoff if exception argument == ...", "user": {"login": "luckydonald", "id": 2737108, "node_id": "MDQ6VXNlcjI3MzcxMDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/2737108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luckydonald", "html_url": "https://github.com/luckydonald", "followers_url": "https://api.github.com/users/luckydonald/followers", "following_url": "https://api.github.com/users/luckydonald/following{/other_user}", "gists_url": "https://api.github.com/users/luckydonald/gists{/gist_id}", "starred_url": "https://api.github.com/users/luckydonald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luckydonald/subscriptions", "organizations_url": "https://api.github.com/users/luckydonald/orgs", "repos_url": "https://api.github.com/users/luckydonald/repos", "events_url": "https://api.github.com/users/luckydonald/events{/privacy}", "received_events_url": "https://api.github.com/users/luckydonald/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-07-24T02:21:07Z", "updated_at": "2016-09-17T14:03:51Z", "closed_at": "2016-08-08T18:00:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not quite sure if related to #8, but I am having an exception `e` with an `e.error_number` attribute.\nHow can I check that on the `@on_exception` decorator?\n\n``` python\n@backoff.on_exception(backoff.expo, SomeException, max_tries=7, jitter=None)\ndef foobar():\n    if should_backoff:\n        raise SomeException(error_number=4458)  # please do a backoff\n    else:\n        raise SomeException(error_number=42)  # raise\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/10", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/10/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/10/events", "html_url": "https://github.com/litl/backoff/issues/10", "id": 160264882, "node_id": "MDU6SXNzdWUxNjAyNjQ4ODI=", "number": 10, "title": "Backoff decorators should accept callables for deferred evaluation", "user": {"login": "ksheng", "id": 1018730, "node_id": "MDQ6VXNlcjEwMTg3MzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1018730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksheng", "html_url": "https://github.com/ksheng", "followers_url": "https://api.github.com/users/ksheng/followers", "following_url": "https://api.github.com/users/ksheng/following{/other_user}", "gists_url": "https://api.github.com/users/ksheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksheng/subscriptions", "organizations_url": "https://api.github.com/users/ksheng/orgs", "repos_url": "https://api.github.com/users/ksheng/repos", "events_url": "https://api.github.com/users/ksheng/events{/privacy}", "received_events_url": "https://api.github.com/users/ksheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-06-14T19:32:59Z", "updated_at": "2016-08-08T20:09:54Z", "closed_at": "2016-08-08T17:58:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "There are times when values used in the backoff decorators are only known at runtime and not at import time. It would be nice to allow, for example, the `on_exception` decorator to accept a callable for the `max_tries` and `interval` kwargs that returns the value to use when evaluated.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/9", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/9/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/9/events", "html_url": "https://github.com/litl/backoff/issues/9", "id": 158978889, "node_id": "MDU6SXNzdWUxNTg5Nzg4ODk=", "number": 9, "title": "Default to retrying on base Python exception", "user": {"login": "helgi", "id": 70530, "node_id": "MDQ6VXNlcjcwNTMw", "avatar_url": "https://avatars2.githubusercontent.com/u/70530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/helgi", "html_url": "https://github.com/helgi", "followers_url": "https://api.github.com/users/helgi/followers", "following_url": "https://api.github.com/users/helgi/following{/other_user}", "gists_url": "https://api.github.com/users/helgi/gists{/gist_id}", "starred_url": "https://api.github.com/users/helgi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/helgi/subscriptions", "organizations_url": "https://api.github.com/users/helgi/orgs", "repos_url": "https://api.github.com/users/helgi/repos", "events_url": "https://api.github.com/users/helgi/events{/privacy}", "received_events_url": "https://api.github.com/users/helgi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-06-07T17:24:48Z", "updated_at": "2016-06-18T21:13:08Z", "closed_at": "2016-06-18T21:13:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm migrating from the [retrying](https://pypi.python.org/pypi/retrying) library to `backoff` and one thing I noticed between the two libraries is that I always have to define what Exception I want to retry on when using `backoff`\n\nWould it be viable to default to `Exception` and make defining exceptions in `on_exception` as optional?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/8", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/8/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/8/events", "html_url": "https://github.com/litl/backoff/issues/8", "id": 156438658, "node_id": "MDU6SXNzdWUxNTY0Mzg2NTg=", "number": 8, "title": "exception introspection to determine retry", "user": {"login": "kapilt", "id": 21650, "node_id": "MDQ6VXNlcjIxNjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/21650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kapilt", "html_url": "https://github.com/kapilt", "followers_url": "https://api.github.com/users/kapilt/followers", "following_url": "https://api.github.com/users/kapilt/following{/other_user}", "gists_url": "https://api.github.com/users/kapilt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kapilt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kapilt/subscriptions", "organizations_url": "https://api.github.com/users/kapilt/orgs", "repos_url": "https://api.github.com/users/kapilt/repos", "events_url": "https://api.github.com/users/kapilt/events{/privacy}", "received_events_url": "https://api.github.com/users/kapilt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-24T07:34:57Z", "updated_at": "2016-08-08T18:00:14Z", "closed_at": "2016-08-08T18:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "in some cases to know if a backoff is retryable vs perm error, we need to inspect the exception instance to match against retryable error codes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/5", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/5/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/5/events", "html_url": "https://github.com/litl/backoff/issues/5", "id": 40478581, "node_id": "MDU6SXNzdWU0MDQ3ODU4MQ==", "number": 5, "title": "NameError: global name 'unicode' is not defined (Python 3.2)", "user": {"login": "fawkesley", "id": 254290, "node_id": "MDQ6VXNlcjI1NDI5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/254290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fawkesley", "html_url": "https://github.com/fawkesley", "followers_url": "https://api.github.com/users/fawkesley/followers", "following_url": "https://api.github.com/users/fawkesley/following{/other_user}", "gists_url": "https://api.github.com/users/fawkesley/gists{/gist_id}", "starred_url": "https://api.github.com/users/fawkesley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fawkesley/subscriptions", "organizations_url": "https://api.github.com/users/fawkesley/orgs", "repos_url": "https://api.github.com/users/fawkesley/repos", "events_url": "https://api.github.com/users/fawkesley/events{/privacy}", "received_events_url": "https://api.github.com/users/fawkesley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-08-18T11:29:37Z", "updated_at": "2014-08-18T13:04:46Z", "closed_at": "2014-08-18T13:04:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n  File \"/home/paul/.virtualenvs/eacollector/lib/python3.2/site-packages/backoff.py\", line 254, in retry\n    invoc = _invoc_repr(target, args, kwargs)\n  File \"/home/paul/.virtualenvs/eacollector/lib/python3.2/site-packages/backoff.py\", line 157, in _invoc_repr\n    args_out = \", \".join(unicode(a) for a in args)\n  File \"/home/paul/.virtualenvs/eacollector/lib/python3.2/site-packages/backoff.py\", line 157, in <genexpr>\n    args_out = \", \".join(unicode(a) for a in args)\nNameError: global name 'unicode' is not defined\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/litl/backoff/issues/2", "repository_url": "https://api.github.com/repos/litl/backoff", "labels_url": "https://api.github.com/repos/litl/backoff/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/litl/backoff/issues/2/comments", "events_url": "https://api.github.com/repos/litl/backoff/issues/2/events", "html_url": "https://github.com/litl/backoff/issues/2", "id": 38710203, "node_id": "MDU6SXNzdWUzODcxMDIwMw==", "number": 2, "title": "no python2.7 support", "user": {"login": "Bonko", "id": 222657, "node_id": "MDQ6VXNlcjIyMjY1Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/222657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bonko", "html_url": "https://github.com/Bonko", "followers_url": "https://api.github.com/users/Bonko/followers", "following_url": "https://api.github.com/users/Bonko/following{/other_user}", "gists_url": "https://api.github.com/users/Bonko/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bonko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bonko/subscriptions", "organizations_url": "https://api.github.com/users/Bonko/orgs", "repos_url": "https://api.github.com/users/Bonko/repos", "events_url": "https://api.github.com/users/Bonko/events{/privacy}", "received_events_url": "https://api.github.com/users/Bonko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-07-25T08:55:05Z", "updated_at": "2014-07-25T08:59:54Z", "closed_at": "2014-07-25T08:59:54Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nthe setup.py states that backoff should work with python2.7.\n\nBut the used NullHandler was introduced in python 3.1: https://docs.python.org/3.2/library/logging.handlers.html?highlight=nullhandler#logging.NullHandler\n\nThe error message when trying to install is:\n\n```\npython2.6 setup.py \nTraceback (most recent call last):\n  File \"setup.py\", line 3, in <module>\n    import backoff\n  File \"/home/bonko/git/backoff/backoff.py\", line 104, in <module>\n    logger.addHandler(logging.NullHandler())\nAttributeError: 'module' object has no attribute 'NullHandler'\n```\n", "performed_via_github_app": null, "score": 1.0}]}