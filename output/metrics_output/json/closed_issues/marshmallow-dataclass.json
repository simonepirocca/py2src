{"total_count": 46, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/96", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/96/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/96/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/96", "id": 682910655, "node_id": "MDU6SXNzdWU2ODI5MTA2NTU=", "number": 96, "title": "`{'_schema': ['Invalid input type.']}` when nesting instantiated schemas.", "user": {"login": "ifiddes", "id": 7818077, "node_id": "MDQ6VXNlcjc4MTgwNzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7818077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ifiddes", "html_url": "https://github.com/ifiddes", "followers_url": "https://api.github.com/users/ifiddes/followers", "following_url": "https://api.github.com/users/ifiddes/following{/other_user}", "gists_url": "https://api.github.com/users/ifiddes/gists{/gist_id}", "starred_url": "https://api.github.com/users/ifiddes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ifiddes/subscriptions", "organizations_url": "https://api.github.com/users/ifiddes/orgs", "repos_url": "https://api.github.com/users/ifiddes/repos", "events_url": "https://api.github.com/users/ifiddes/events{/privacy}", "received_events_url": "https://api.github.com/users/ifiddes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-20T16:56:15Z", "updated_at": "2020-08-20T22:45:13Z", "closed_at": "2020-08-20T22:45:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the `class.Schema().load(dict)` method of building my objects. If I have a nested object that is instantiated, it does not work:\r\n\r\n```\r\nfrom marshmallow_dataclass import dataclass\r\nfrom typing import List\r\n\r\n@dataclass\r\nclass Inner:\r\n    val: int\r\n        \r\n@dataclass\r\nclass Outer:\r\n    name: str\r\n    vals: List[Inner]\r\n\r\nvals = [Inner(1), Inner(2)]\r\no = Outer.Schema().load({\"name\": \"n\", \"vals\": vals})\r\n```\r\n\r\nLeads to\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValidationError                           Traceback (most recent call last)\r\n<ipython-input-12-1d36df375886> in <module>\r\n----> 1 o = Outer.Schema().load({\"name\": \"n\", \"vals\": vals})\r\n\r\n~/miniconda3/envs/igs/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py in load(self, data, many, **kwargs)\r\n    471     class BaseSchema(base_schema or marshmallow.Schema):  # type: ignore\r\n    472         def load(self, data: Mapping, *, many: bool = None, **kwargs):\r\n--> 473             all_loaded = super().load(data, many=many, **kwargs)\r\n    474             many = self.many if many is None else bool(many)\r\n    475             if many:\r\n\r\n~/miniconda3/envs/igs/lib/python3.7/site-packages/marshmallow/schema.py in load(self, data, many, partial, unknown)\r\n    722         \"\"\"\r\n    723         return self._do_load(\r\n--> 724             data, many=many, partial=partial, unknown=unknown, postprocess=True\r\n    725         )\r\n    726 \r\n\r\n~/miniconda3/envs/igs/lib/python3.7/site-packages/marshmallow/schema.py in _do_load(self, data, many, partial, unknown, postprocess)\r\n    903             exc = ValidationError(errors, data=data, valid_data=result)\r\n    904             self.handle_error(exc, data, many=many, partial=partial)\r\n--> 905             raise exc\r\n    906 \r\n    907         return result\r\n\r\nValidationError: {'vals': {0: {'_schema': ['Invalid input type.']}, 1: {'_schema': ['Invalid input type.']}}}\r\n```\r\n\r\nHowever,\r\n\r\n```\r\no = Outer(name=\"n\", vals=vals)\r\n```\r\n\r\nWorks fine. But, that method makes the PyCharm static checker upset:\r\n\r\n![image](https://user-images.githubusercontent.com/7818077/90801914-5f1a0280-e2cb-11ea-8842-103fdd729608.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/95", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/95/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/95/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/95", "id": 676958115, "node_id": "MDU6SXNzdWU2NzY5NTgxMTU=", "number": 95, "title": "@dataclass monkeypatches other code", "user": {"login": "jonashaag", "id": 175722, "node_id": "MDQ6VXNlcjE3NTcyMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/175722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonashaag", "html_url": "https://github.com/jonashaag", "followers_url": "https://api.github.com/users/jonashaag/followers", "following_url": "https://api.github.com/users/jonashaag/following{/other_user}", "gists_url": "https://api.github.com/users/jonashaag/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonashaag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonashaag/subscriptions", "organizations_url": "https://api.github.com/users/jonashaag/orgs", "repos_url": "https://api.github.com/users/jonashaag/repos", "events_url": "https://api.github.com/users/jonashaag/events{/privacy}", "received_events_url": "https://api.github.com/users/jonashaag/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698186, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg2", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T15:11:31Z", "updated_at": "2020-08-11T15:52:53Z", "closed_at": "2020-08-11T15:52:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this is identical to #51:\r\n\r\n\r\n```pycon\r\n>>> from pathlib import Path\r\n>>> Path(\"/tmp\")\r\nPosixPath('/tmp')\r\n>>> from marshmallow_dataclass import dataclass\r\n>>> @dataclass\r\n... class X:\r\n...  x: Path\r\n...\r\n>>> Path(\"/tmp\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: __init__() takes 1 positional argument but 2 were given\r\n```\r\n\r\nIt changes `pathlib.Path.__init__` \ud83d\ude31", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/94", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/94/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/94/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/94", "id": 666396634, "node_id": "MDU6SXNzdWU2NjYzOTY2MzQ=", "number": 94, "title": "str dump accepts None", "user": {"login": "ydayan", "id": 61117795, "node_id": "MDQ6VXNlcjYxMTE3Nzk1", "avatar_url": "https://avatars2.githubusercontent.com/u/61117795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ydayan", "html_url": "https://github.com/ydayan", "followers_url": "https://api.github.com/users/ydayan/followers", "following_url": "https://api.github.com/users/ydayan/following{/other_user}", "gists_url": "https://api.github.com/users/ydayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ydayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ydayan/subscriptions", "organizations_url": "https://api.github.com/users/ydayan/orgs", "repos_url": "https://api.github.com/users/ydayan/repos", "events_url": "https://api.github.com/users/ydayan/events{/privacy}", "received_events_url": "https://api.github.com/users/ydayan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698194, "node_id": "MDU6TGFiZWwxMjIxNjk4MTk0", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/invalid", "name": "invalid", "color": "e4e669", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-27T15:46:56Z", "updated_at": "2020-07-27T17:49:41Z", "closed_at": "2020-07-27T17:49:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nimport marshmallow_dataclass\r\nfrom dataclasses import dataclass\r\n\r\n@dataclass\r\nclass Bar:\r\n    a :str\r\n\r\nb = Bar(None)\r\n\r\nschema = marshmallow_dataclass.class_schema(Bar)\r\nprint((schema().dump(b)))\r\n```\r\n\r\nThe output is \r\n\r\n`{'a': None}`\r\n\r\nEven though the field is not Optional", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/91", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/91/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/91/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/91", "id": 655375222, "node_id": "MDU6SXNzdWU2NTUzNzUyMjI=", "number": 91, "title": "Validators aren't stackable between NewType and field()", "user": {"login": "ThatFatArcus", "id": 58906952, "node_id": "MDQ6VXNlcjU4OTA2OTUy", "avatar_url": "https://avatars0.githubusercontent.com/u/58906952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThatFatArcus", "html_url": "https://github.com/ThatFatArcus", "followers_url": "https://api.github.com/users/ThatFatArcus/followers", "following_url": "https://api.github.com/users/ThatFatArcus/following{/other_user}", "gists_url": "https://api.github.com/users/ThatFatArcus/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThatFatArcus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThatFatArcus/subscriptions", "organizations_url": "https://api.github.com/users/ThatFatArcus/orgs", "repos_url": "https://api.github.com/users/ThatFatArcus/repos", "events_url": "https://api.github.com/users/ThatFatArcus/events{/privacy}", "received_events_url": "https://api.github.com/users/ThatFatArcus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-12T10:44:02Z", "updated_at": "2020-07-13T12:09:04Z", "closed_at": "2020-07-13T12:09:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Say we have the following class:\r\n```python3\r\nCustomType = NewType(\"CustomType\", str, validate=marshmallow.validate.bla())\r\n\r\n@dataclass\r\nclass CustomObject:\r\n    some_field: CustomType = field(metadata={\"validate\": marshmallow.validate.URL()})\r\n```\r\nI think the expected behavior should be the creation of a marshmallow field with `validate = [bla(), URL()]`.\r\nRight now the created field contains only `validate = URL()`.\r\n\r\nThis relates to the following code, lines 427 - 431 in `__init.py__`:\r\n```python3\r\n        metadata = {\r\n            \"description\": typ.__name__,\r\n            **getattr(typ, \"_marshmallow_args\", {}),\r\n            **metadata,\r\n        }\r\n```\r\nThe metadata field from the `field` constructor overwrites the metadata in `NewType`, which makes sense in most cases, but I feel like in the case of `validate`, adding a validator on top of a custom type should stack new validators on top of existing ones.\r\n\r\nOne example for this use-case I can think of is a database where all strings are validated to be printable, and a `city` field which is validated to be an existing city.\r\n\r\nIf you agree with my statements, I would be more than glad to submit a PR.\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/90", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/90/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/90/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/90", "id": 640733911, "node_id": "MDU6SXNzdWU2NDA3MzM5MTE=", "number": 90, "title": "marshmallow_dataclass scheme map to flask api.model", "user": {"login": "c0x65o", "id": 61324285, "node_id": "MDQ6VXNlcjYxMzI0Mjg1", "avatar_url": "https://avatars3.githubusercontent.com/u/61324285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c0x65o", "html_url": "https://github.com/c0x65o", "followers_url": "https://api.github.com/users/c0x65o/followers", "following_url": "https://api.github.com/users/c0x65o/following{/other_user}", "gists_url": "https://api.github.com/users/c0x65o/gists{/gist_id}", "starred_url": "https://api.github.com/users/c0x65o/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c0x65o/subscriptions", "organizations_url": "https://api.github.com/users/c0x65o/orgs", "repos_url": "https://api.github.com/users/c0x65o/repos", "events_url": "https://api.github.com/users/c0x65o/events{/privacy}", "received_events_url": "https://api.github.com/users/c0x65o/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698197, "node_id": "MDU6TGFiZWwxMjIxNjk4MTk3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T20:50:49Z", "updated_at": "2020-06-18T17:40:20Z", "closed_at": "2020-06-18T11:52:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to map a marshmallow_dataclass to a flask Namespace model? \r\n\r\n```\r\nIPv4 = NewType(\r\n    \"IPv4\", str, validate=marshmallow.validate.Regexp(r\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\")\r\n)\r\n\r\n@dataclass(order=True)\r\nclass Project:\r\n    name: str = field(\r\n        metadata=dict(description=\"The name of the project\", load_only=True)\r\n    )\r\n    path: str\r\n    title: str\r\n    ip: IPv4\r\n    created_date: datetime = datetime.now()\r\n    Schema: ClassVar[Type[Schema]] = Schema \r\n```\r\n\r\nI don't want to have to re-write these:\r\n```\r\nproject = api.model('Project', fields(Project))\r\n\r\nproject = api.model('Project', {\r\n    'path': fields.String(required=True, description='The path to the project'),\r\n    'name': fields.String(required=True, description='The name of the project'),\r\n    'title': fields.String(required=True, description='The title of the project'),\r\n    'ip': fields.String(required=True, description='An ip address of the project (e.g 10.10.0.1)'),\r\n})\r\n```\r\n\r\nThen I would want to do something like `@api.marshal_list_with(Project)`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/89", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/89/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/89/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/89", "id": 631706862, "node_id": "MDU6SXNzdWU2MzE3MDY4NjI=", "number": 89, "title": "Issue when using dataclass with InitVar fields", "user": {"login": "scoulomb", "id": 4275681, "node_id": "MDQ6VXNlcjQyNzU2ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4275681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scoulomb", "html_url": "https://github.com/scoulomb", "followers_url": "https://api.github.com/users/scoulomb/followers", "following_url": "https://api.github.com/users/scoulomb/following{/other_user}", "gists_url": "https://api.github.com/users/scoulomb/gists{/gist_id}", "starred_url": "https://api.github.com/users/scoulomb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scoulomb/subscriptions", "organizations_url": "https://api.github.com/users/scoulomb/orgs", "repos_url": "https://api.github.com/users/scoulomb/repos", "events_url": "https://api.github.com/users/scoulomb/events{/privacy}", "received_events_url": "https://api.github.com/users/scoulomb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-05T15:51:07Z", "updated_at": "2020-06-08T11:43:13Z", "closed_at": "2020-06-05T22:50:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Description**\r\n\r\nIf we have a dataclass with init var field\r\n`model_schema().load()` is not working properly\r\n\r\n**Steps to reproduce**\r\n\r\n``````python\r\n\r\nimport json\r\nimport unittest\r\nfrom dataclasses import dataclass, field, InitVar\r\nfrom typing import Any, Dict\r\n\r\nimport marshmallow_dataclass\r\n\r\n\r\n@dataclass\r\nclass Sample:\r\n    welcome_message: str = field(init=False)\r\n    name: InitVar[str]\r\n\r\n    def __post_init__(self,\r\n                      name: str\r\n                      ) -> None:\r\n        self.welcome_message = f\"Welcome {name}\"\r\n\r\n    def as_json_string(self):\r\n        return json.dumps(self, default=lambda o: o.__dict__)\r\n\r\n    @classmethod\r\n    def from_dict(cls, data: Dict[str, Any]) -> 'Sample':\r\n        model_schema = marshmallow_dataclass.class_schema(cls)\r\n        return model_schema().load(data)\r\n\r\n\r\nclass TestModel(unittest.TestCase):\r\n\r\n    def test_json_to_object_to_json(self):\r\n        test = Sample(\"John\")\r\n        test_to_json = json.loads(test.as_json_string())\r\n        print(test_to_json)\r\n        print(test)\r\n        self.assertEqual(test, Sample.from_dict(test_to_json))\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n\r\n``````\r\n\r\nError is \r\n\r\n````\r\nmarshmallow.exceptions.ValidationError: {'welcome_message': ['Unknown field.']}\r\n````\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/88", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/88/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/88/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/88", "id": 631704703, "node_id": "MDU6SXNzdWU2MzE3MDQ3MDM=", "number": 88, "title": "Defining future import in same file as the dataclass prevents model schema load", "user": {"login": "scoulomb", "id": 4275681, "node_id": "MDQ6VXNlcjQyNzU2ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/4275681?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scoulomb", "html_url": "https://github.com/scoulomb", "followers_url": "https://api.github.com/users/scoulomb/followers", "following_url": "https://api.github.com/users/scoulomb/following{/other_user}", "gists_url": "https://api.github.com/users/scoulomb/gists{/gist_id}", "starred_url": "https://api.github.com/users/scoulomb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scoulomb/subscriptions", "organizations_url": "https://api.github.com/users/scoulomb/orgs", "repos_url": "https://api.github.com/users/scoulomb/repos", "events_url": "https://api.github.com/users/scoulomb/events{/privacy}", "received_events_url": "https://api.github.com/users/scoulomb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-05T15:47:48Z", "updated_at": "2020-06-05T20:22:29Z", "closed_at": "2020-06-05T16:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem description:**\r\n\r\nIf we have a dataclass\r\nAnd using `from __future__ import annotations`,  model_schema().load() is not working properly\r\n\r\n**Steps to reproduce**\r\n\r\n`````python\r\n\r\nfrom __future__ import annotations  # removing this line fix the issue\r\n\r\nimport json\r\nimport unittest\r\nfrom dataclasses import dataclass\r\nfrom typing import Any, Dict\r\n\r\nimport marshmallow_dataclass\r\n\r\n\r\n@dataclass\r\nclass Sample:\r\n    name: str\r\n\r\n    def as_json_string(self):\r\n        return json.dumps(self, default=lambda o: o.__dict__)\r\n\r\n    @classmethod\r\n    def from_dict(cls, data: Dict[str, Any]) -> 'Sample':\r\n        model_schema = marshmallow_dataclass.class_schema(cls)\r\n        return model_schema().load(data)\r\n\r\n\r\nclass TestModel(unittest.TestCase):\r\n\r\n    def test_json_to_object_to_json(self):\r\n        test = Sample(\"Paris\")\r\n        test_to_json = json.loads(test.as_json_string())\r\n        print(test_to_json)\r\n        print(test)\r\n        self.assertEqual(test, Sample.from_dict(test_to_json))\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n`````\r\n\r\n`````\r\nTypeError: 'str' is not a dataclass and cannot be turned into one.\r\n`````\r\n\r\n\r\n**Workaround**\r\nDo not use future\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/80", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/80/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/80/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/80", "id": 610673657, "node_id": "MDU6SXNzdWU2MTA2NzM2NTc=", "number": 80, "title": "Bug: not  allow null in any values", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698183, "node_id": "MDU6TGFiZWwxMjIxNjk4MTgz", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-01T09:59:13Z", "updated_at": "2020-05-02T17:18:17Z", "closed_at": "2020-05-02T17:18:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\nfrom typing import Any\r\nfrom typing import Dict\r\n\r\nfrom marshmallow_dataclass import dataclass\r\n\r\n\r\n@dataclass()\r\nclass A:\r\n    data: Dict[str, Any]\r\n\r\n\r\nA.Schema().load({\r\n    'data': {'inner_data': None}\r\n})\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/78", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/78/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/78/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/78", "id": 604564931, "node_id": "MDU6SXNzdWU2MDQ1NjQ5MzE=", "number": 78, "title": "Calling custom code after the deserialization to a dataclass", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1551966275, "node_id": "MDU6TGFiZWwxNTUxOTY2Mjc1", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/incomplete", "name": "incomplete", "color": "d3674a", "default": false, "description": "More information is required"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-22T08:34:12Z", "updated_at": "2020-04-23T08:48:50Z", "closed_at": "2020-04-23T08:48:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Missing `make_data_class` hook in `('post_load', False)`!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/75", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/75/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/75/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/75", "id": 600711782, "node_id": "MDU6SXNzdWU2MDA3MTE3ODI=", "number": 75, "title": "Behavior of marshmallow.post_load is dependent on function name", "user": {"login": "Ulminator", "id": 25484774, "node_id": "MDQ6VXNlcjI1NDg0Nzc0", "avatar_url": "https://avatars3.githubusercontent.com/u/25484774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ulminator", "html_url": "https://github.com/Ulminator", "followers_url": "https://api.github.com/users/Ulminator/followers", "following_url": "https://api.github.com/users/Ulminator/following{/other_user}", "gists_url": "https://api.github.com/users/Ulminator/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ulminator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ulminator/subscriptions", "organizations_url": "https://api.github.com/users/Ulminator/orgs", "repos_url": "https://api.github.com/users/Ulminator/repos", "events_url": "https://api.github.com/users/Ulminator/events{/privacy}", "received_events_url": "https://api.github.com/users/Ulminator/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698183, "node_id": "MDU6TGFiZWwxMjIxNjk4MTgz", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-16T03:01:20Z", "updated_at": "2020-04-21T15:02:10Z", "closed_at": "2020-04-21T13:15:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I discovered a discrepancy with how the `post_load` decorator behaves within a marshmallow dataclass. In [Schema._invoke_processors](https://github.com/marshmallow-code/marshmallow/blob/76196abf35ff9ec58f3dc2377ea7a8a9bf23712a/src/marshmallow/schema.py#L1192) the post loads `make_data_class` processor runs before or after the post_load defined in the dataclass based on whichever comes first alphabetically. Some example below illustrate this: \r\n\r\n```python\r\nimport marshmallow\r\nimport marshmallow_dataclass\r\n\r\n@marshmallow_dataclass.dataclass\r\nclass Person:\r\n\tname: str\r\n\r\n\t@marshmallow.post_load\r\n\tdef a(schema, data, **kwargs):\r\n\t\tdata.name = data.name.capitalize()  # works if: data['name'] = data['name'].capitalize()\r\n\t\treturn data\r\n\r\nPerson.Schema().load({'name': 'matt'})\r\n>> AttributeError: 'dict' object has no attribute 'name'\r\n```\r\n\r\n```python\r\nimport marshmallow\r\nimport marshmallow_dataclass\r\n\r\n@marshmallow_dataclass.dataclass\r\nclass Person:\r\n\tname: str\r\n\r\n\t@marshmallow.post_load\r\n\tdef z(schema, data, **kwargs):\r\n\t\tdata.name = data.name.capitalize()\r\n\t\treturn data\r\n\r\nPerson.Schema().load({'name': 'matt'})\r\n>> Person(name='Matt')\r\n```\r\n\r\nThe post_load in the first example does not create an instance of the dataclass itself before being invoked and feels more so like a `pre_load` because of this. The validation checks still seem to work properly, but it just feels a little weird to work with. I know the documentation does not include anything about pre/post loading, but I figured I'd document this in case anyone else runs into the same issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/74", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/74/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/74/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/74", "id": 594833796, "node_id": "MDU6SXNzdWU1OTQ4MzM3OTY=", "number": 74, "title": "Installation command not working", "user": {"login": "taidinh-tiki", "id": 47731138, "node_id": "MDQ6VXNlcjQ3NzMxMTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/47731138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taidinh-tiki", "html_url": "https://github.com/taidinh-tiki", "followers_url": "https://api.github.com/users/taidinh-tiki/followers", "following_url": "https://api.github.com/users/taidinh-tiki/following{/other_user}", "gists_url": "https://api.github.com/users/taidinh-tiki/gists{/gist_id}", "starred_url": "https://api.github.com/users/taidinh-tiki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taidinh-tiki/subscriptions", "organizations_url": "https://api.github.com/users/taidinh-tiki/orgs", "repos_url": "https://api.github.com/users/taidinh-tiki/repos", "events_url": "https://api.github.com/users/taidinh-tiki/events{/privacy}", "received_events_url": "https://api.github.com/users/taidinh-tiki/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1551966275, "node_id": "MDU6TGFiZWwxNTUxOTY2Mjc1", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/incomplete", "name": "incomplete", "color": "d3674a", "default": false, "description": "More information is required"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-06T06:18:01Z", "updated_at": "2020-04-06T07:36:43Z", "closed_at": "2020-04-06T07:35:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi author, I have tried \r\n\r\n> pip3 install marshmallow-dataclass[enum,union]\r\n\r\n\r\n but t seems not working, I think that we should change the command or fix the documentation so that user will understand it more.\r\nAnyway, thanks for inventing this library, it helps me alot\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/73", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/73/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/73/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/73", "id": 590317817, "node_id": "MDU6SXNzdWU1OTAzMTc4MTc=", "number": 73, "title": "dict-field of str to another Dataclass", "user": {"login": "Simpfally", "id": 11957227, "node_id": "MDQ6VXNlcjExOTU3MjI3", "avatar_url": "https://avatars1.githubusercontent.com/u/11957227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Simpfally", "html_url": "https://github.com/Simpfally", "followers_url": "https://api.github.com/users/Simpfally/followers", "following_url": "https://api.github.com/users/Simpfally/following{/other_user}", "gists_url": "https://api.github.com/users/Simpfally/gists{/gist_id}", "starred_url": "https://api.github.com/users/Simpfally/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Simpfally/subscriptions", "organizations_url": "https://api.github.com/users/Simpfally/orgs", "repos_url": "https://api.github.com/users/Simpfally/repos", "events_url": "https://api.github.com/users/Simpfally/events{/privacy}", "received_events_url": "https://api.github.com/users/Simpfally/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698194, "node_id": "MDU6TGFiZWwxMjIxNjk4MTk0", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/invalid", "name": "invalid", "color": "e4e669", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-30T14:03:29Z", "updated_at": "2020-03-30T15:59:52Z", "closed_at": "2020-03-30T15:35:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to decode this json : \r\n\r\n```json\r\n{\r\n    \"ids\": {\r\n        \"id124\" : { \"a\":3 },\r\n        \"id254\" : { \"a\":1 }\r\n    }\r\n}\r\n\r\n```\r\nand this json \r\n\r\n\r\n```json\r\n{\r\n    \"ids\": {\r\n        \"id132\" : { \"a\":5 },\r\n        \"id1335\":{ \"a\":2 },\r\n        \"id254\" : { \"a\":1 }\r\n    }\r\n}\r\n\r\n```\r\n\r\n(so a dictionnary that maps string to a dataclass)\r\n\r\nAnd I want this to fit in the same dataclass :\r\n\r\n```python\r\n@dataclass\r\nclass DataItem:\r\n    a: int\r\n\r\n@dataclass\r\nclass Data:\r\n    ids : typing.Dict[str, DataItem]\r\n```\r\n\r\nUnfortunately, this doesn't work, this will return `marshmallow.exceptions.ValidationError: {'ids': ['Not a valid mapping type.']}`\r\n\r\nHow do I do this? I managed to have lists, but not dicts.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/71", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/71/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/71/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/71", "id": 575249393, "node_id": "MDU6SXNzdWU1NzUyNDkzOTM=", "number": 71, "title": "Allow modifying `_native_to_marshmallow`", "user": {"login": "MartinAltmayer", "id": 2975171, "node_id": "MDQ6VXNlcjI5NzUxNzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2975171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinAltmayer", "html_url": "https://github.com/MartinAltmayer", "followers_url": "https://api.github.com/users/MartinAltmayer/followers", "following_url": "https://api.github.com/users/MartinAltmayer/following{/other_user}", "gists_url": "https://api.github.com/users/MartinAltmayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinAltmayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinAltmayer/subscriptions", "organizations_url": "https://api.github.com/users/MartinAltmayer/orgs", "repos_url": "https://api.github.com/users/MartinAltmayer/repos", "events_url": "https://api.github.com/users/MartinAltmayer/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinAltmayer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-04T09:21:02Z", "updated_at": "2020-03-19T10:19:04Z", "closed_at": "2020-03-19T10:19:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is a follow-up to #16, which was closed after introducing `NewType`. As explained in the following, the `NewType`-solution is not possible in my case, so I'd like to ask you to reconsider adding a way to make `_native_to_marshmallow` mutable. From the implementation it looks pretty simple to replace `_native_to_marshmallow` by a dynamic look-up to Marshmallow's `Schema.TYPE_MAPPING`. Then I could modify the latter and marshmallow_dataclass would pick up the changes.\r\n\r\nI would like to \"register\" a fixed Marshmallow field that should be used whenever a type appears in a dataclass that is converted via marshmallow_dataclass:\r\n```\r\n@dataclass\r\nclass Schema:\r\n    color: Color\r\n```\r\nshould be equivalent to\r\n```\r\n@dataclass\r\nclass Schema:\r\n    color: Color = field(metadata={  ... some lengthy definitions here ... })\r\n```\r\nUnfortunately, I cannot replace \"Color\" by a `NewType`, because it is defined in a lower-level library. I would like to avoid having two very similar types, one from the library, and another one for use in schemas.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/68", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/68/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/68/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/68", "id": 562726304, "node_id": "MDU6SXNzdWU1NjI3MjYzMDQ=", "number": 68, "title": "non-required field causes TypeError on `load()` if missing from json", "user": {"login": "gothill", "id": 52655395, "node_id": "MDQ6VXNlcjUyNjU1Mzk1", "avatar_url": "https://avatars0.githubusercontent.com/u/52655395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gothill", "html_url": "https://github.com/gothill", "followers_url": "https://api.github.com/users/gothill/followers", "following_url": "https://api.github.com/users/gothill/following{/other_user}", "gists_url": "https://api.github.com/users/gothill/gists{/gist_id}", "starred_url": "https://api.github.com/users/gothill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gothill/subscriptions", "organizations_url": "https://api.github.com/users/gothill/orgs", "repos_url": "https://api.github.com/users/gothill/repos", "events_url": "https://api.github.com/users/gothill/events{/privacy}", "received_events_url": "https://api.github.com/users/gothill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-10T17:52:57Z", "updated_at": "2020-02-10T18:32:21Z", "closed_at": "2020-02-10T18:32:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "marshmallow-dataclass==0.6.6\r\n\r\nA non-required field defined with `marshmallow_field` will cause a TypeError to be thrown in the `make_dataclass()` post-load processor if not present in the JSON object passed to `load()`\r\n\r\nMinimal reproduction:\r\n```python\r\n>>> from marshmallow_dataclass import dataclass \r\n>>> from typing import Optional \r\n>>> from marshmallow.fields import String\r\n>>> from dataclasses import field \r\n\r\n>>> @dataclass \r\n>>> class Document(): \r\n>>>     content: Optional[str] = field(metadata=dict(marshmallow_field=String(), required=False)) \r\n\r\n>>> Document.Schema().load({})  # Should not raise an error  \r\nTypeError: __init__() missing 1 required positional argument: 'content'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/67", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/67/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/67/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/67", "id": 556940575, "node_id": "MDU6SXNzdWU1NTY5NDA1NzU=", "number": 67, "title": "Union dump not working", "user": {"login": "elvinlemmens", "id": 42866015, "node_id": "MDQ6VXNlcjQyODY2MDE1", "avatar_url": "https://avatars2.githubusercontent.com/u/42866015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elvinlemmens", "html_url": "https://github.com/elvinlemmens", "followers_url": "https://api.github.com/users/elvinlemmens/followers", "following_url": "https://api.github.com/users/elvinlemmens/following{/other_user}", "gists_url": "https://api.github.com/users/elvinlemmens/gists{/gist_id}", "starred_url": "https://api.github.com/users/elvinlemmens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elvinlemmens/subscriptions", "organizations_url": "https://api.github.com/users/elvinlemmens/orgs", "repos_url": "https://api.github.com/users/elvinlemmens/repos", "events_url": "https://api.github.com/users/elvinlemmens/events{/privacy}", "received_events_url": "https://api.github.com/users/elvinlemmens/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698183, "node_id": "MDU6TGFiZWwxMjIxNjk4MTgz", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-29T15:33:40Z", "updated_at": "2020-07-28T19:57:03Z", "closed_at": "2020-07-28T19:57:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have noticed the dumping of a Union type is returning an empty object:\r\n\r\n```py\r\nfrom marshmallow_dataclass import dataclass\r\nfrom typing import List, Union\r\n\r\n@dataclass\r\nclass Vector:\r\n    x: float\r\n    y: float\r\n\r\n@dataclass\r\nclass Point:\r\n    x: float\r\n    z: float\r\n\r\n\r\n@dataclass\r\nclass Geometries:\r\n    elements: List[Union[Point, Vector]]\r\n\r\npts = Geometries.Schema().load({\"elements\": [\r\n    {\"x\": 1, \"y\": 1},\r\n    {\"x\": 1, \"z\": 1},\r\n]})\r\nschema=Geometries.Schema()\r\nprint(schema.dump(schema.load({\"elements\": [\r\n    {\"x\": 1, \"y\": 1},\r\n    {\"x\": 1, \"z\": 1},\r\n]})))\r\n```\r\ngives\r\n```py\r\n{\"elements\": [{}, {}]}\r\n```\r\nbut should again return\r\n```py\r\n{\"elements\": [\r\n    {\"x\": 1, \"y\": 1},\r\n    {\"x\": 1, \"z\": 1},\r\n]}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/66", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/66/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/66/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/66", "id": 556762820, "node_id": "MDU6SXNzdWU1NTY3NjI4MjA=", "number": 66, "title": "Use NewType for derived List class", "user": {"login": "YBadiss", "id": 3273751, "node_id": "MDQ6VXNlcjMyNzM3NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3273751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YBadiss", "html_url": "https://github.com/YBadiss", "followers_url": "https://api.github.com/users/YBadiss/followers", "following_url": "https://api.github.com/users/YBadiss/following{/other_user}", "gists_url": "https://api.github.com/users/YBadiss/gists{/gist_id}", "starred_url": "https://api.github.com/users/YBadiss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YBadiss/subscriptions", "organizations_url": "https://api.github.com/users/YBadiss/orgs", "repos_url": "https://api.github.com/users/YBadiss/repos", "events_url": "https://api.github.com/users/YBadiss/events{/privacy}", "received_events_url": "https://api.github.com/users/YBadiss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-29T10:15:16Z", "updated_at": "2020-05-20T13:33:34Z", "closed_at": "2020-05-20T13:33:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there!\r\n\r\nComing from vanilla marshmallow, I had a `List` class that was deriving from `marshmallow.fields.List` and was adding some logic to how it was reading the input data on `_deserialize`.\r\n\r\nNow, I am trying to integrate this with `marshmallow_dataclass` and hence create a new type. I have created a few other types that were not lists and it worked well, but I can't get it to work for lists. Here is what I have tried so far:\r\n\r\n```python3\r\nimport typing\r\n\r\nimport marshmallow\r\nfrom marshmallow_dataclass import dataclass, NewType\r\n\r\n\r\nclass MyList(marshmallow.fields.List):\r\n    \"\"\"A list field type that properly handles lists in MultiDict\"\"\"\r\n\r\n    def _deserialize(self, value, attr, data, **kwargs):\r\n        # removed the code, just checking if this is called\r\n        raise Exception(\"Finally Called\")\r\n\r\n\r\nListType = NewType(\"ListType\", typing.List, field=MyList)\r\n\r\n\r\n@dataclass \r\nclass TestDataClass1:\r\n    \"\"\"\r\n    This is the one I was expecting would work, as I thought that it would pass\r\n    `int` to `MyList` which would come back to something similar to vanilla\r\n    marshmallow i.e. `values = MyList(Int())`\r\n    \"\"\"\r\n    values: ListType(int)\r\n\r\n# fails with 'Not a valid integer.'\r\nTestDataClass1.Schema().load({\"values\": [1,2,3]})\r\n\r\n# Second try!\r\n@dataclass \r\nclass TestDataClass2: \r\n    values: ListType(typing.List[int])\r\n\r\n# list is properly loaded, but that means MyList._deserialize was not called\r\nTestDataClass2.Schema().load({\"values\": [1,2,3]})\r\n```\r\n\r\nI looked in the doc and example but could not find a reference for this use case, could you help me figure it out?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/64", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/64/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/64/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/64", "id": 556176456, "node_id": "MDU6SXNzdWU1NTYxNzY0NTY=", "number": 64, "title": "How to apply metadata to the children of a field of type List ?", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-28T12:27:25Z", "updated_at": "2020-01-29T14:08:41Z", "closed_at": "2020-01-29T13:57:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "This didn't work\r\n\r\n```py\r\n@dataclass\r\nclass Model:\r\n    values: List[Decimal] = field(metadata={'as_string': True})\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/57", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/57/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/57/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/57", "id": 537458083, "node_id": "MDU6SXNzdWU1Mzc0NTgwODM=", "number": 57, "title": "Test the mypy plugin on windows", "user": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-13T10:05:50Z", "updated_at": "2019-12-13T15:38:24Z", "closed_at": "2019-12-13T15:38:24Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Since @selimb added support for mypy plugin tests on windows in https://github.com/typeddjango/pytest-mypy-plugins/pull/14 , we'll be able to remove this condition in setup.py as soon as a new version of pytest-mypy-plugins comes out : \r\n\r\nhttps://github.com/lovasoa/marshmallow_dataclass/blob/master/setup.py#L27", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/52", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/52/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/52/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/52", "id": 528078207, "node_id": "MDU6SXNzdWU1MjgwNzgyMDc=", "number": 52, "title": "`base_schema` of nested dataclasses is ingored", "user": {"login": "ADR-007-SoftServe", "id": 48212581, "node_id": "MDQ6VXNlcjQ4MjEyNTgx", "avatar_url": "https://avatars3.githubusercontent.com/u/48212581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ADR-007-SoftServe", "html_url": "https://github.com/ADR-007-SoftServe", "followers_url": "https://api.github.com/users/ADR-007-SoftServe/followers", "following_url": "https://api.github.com/users/ADR-007-SoftServe/following{/other_user}", "gists_url": "https://api.github.com/users/ADR-007-SoftServe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ADR-007-SoftServe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ADR-007-SoftServe/subscriptions", "organizations_url": "https://api.github.com/users/ADR-007-SoftServe/orgs", "repos_url": "https://api.github.com/users/ADR-007-SoftServe/repos", "events_url": "https://api.github.com/users/ADR-007-SoftServe/events{/privacy}", "received_events_url": "https://api.github.com/users/ADR-007-SoftServe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-11-25T13:13:36Z", "updated_at": "2019-11-26T15:44:38Z", "closed_at": "2019-11-26T14:54:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "The base_schema of the nested field is ignored.\r\n\r\n## Example:\r\n```py\r\nfrom marshmallow import Schema, post_dump\r\nfrom marshmallow_dataclass import dataclass\r\n\r\n\r\nclass DoubleSchema(Schema):\r\n    @post_dump\r\n    def double(self, data, **kwargs):\r\n        return dict(double=data['number'] * 2)\r\n\r\n\r\n@dataclass(base_schema=DoubleSchema)\r\nclass A:\r\n    number: int\r\n\r\n\r\n@dataclass\r\nclass B:\r\n    a: A\r\n\r\n\r\nprint('is A.Schema correct?', issubclass(A.Schema, DoubleSchema))\r\nprint('is B.a.Schema correct?', isinstance(B.Schema._declared_fields['a'].schema, DoubleSchema))\r\nprint()\r\n\r\nprint('expected:')\r\nprint(\"    {'a': {'double': 2}}\")\r\nprint('actual:')\r\nprint('   ', B.Schema().dump(B(A(1))))\r\n\r\n```\r\nstdout:\r\n```\r\nis A.Schema correct? True\r\nis B.a.Schema correct? False\r\n\r\nexpected:\r\n    {'a': {'double': 2}}\r\nactual:\r\n    {'a': {'number': 1}}\r\n```\r\n\r\n## How to fix\r\n```diff\r\n--- marshmallow_dataclass/__init__.py   2019-11-25 14:59:36.146392038 +0200\r\n+++ marshmallow_dataclass/__init__.py.fixed     2019-11-25 15:01:01.947898497 +0200\r\n@@ -422,9 +422,12 @@ def field_for_schema(\r\n \r\n+    # Nested marshmellow dataclass\r\n+    nested_schema = getattr(typ, 'Schema', None)\r\n+\r\n     # Nested dataclasses\r\n     forward_reference = getattr(typ, \"__forward_arg__\", None)\r\n-    nested = forward_reference or class_schema(typ, base_schema=base_schema)\r\n+    nested = nested_schema or forward_reference or class_schema(typ, base_schema=base_schema)\r\n     return marshmallow.fields.Nested(nested, **metadata)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/50", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/50/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/50/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/50", "id": 518140291, "node_id": "MDU6SXNzdWU1MTgxNDAyOTE=", "number": 50, "title": "Mypy error: Variable \"Email\" is not valid as a type mypy(error)", "user": {"login": "chespinoza", "id": 3278356, "node_id": "MDQ6VXNlcjMyNzgzNTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3278356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chespinoza", "html_url": "https://github.com/chespinoza", "followers_url": "https://api.github.com/users/chespinoza/followers", "following_url": "https://api.github.com/users/chespinoza/following{/other_user}", "gists_url": "https://api.github.com/users/chespinoza/gists{/gist_id}", "starred_url": "https://api.github.com/users/chespinoza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chespinoza/subscriptions", "organizations_url": "https://api.github.com/users/chespinoza/orgs", "repos_url": "https://api.github.com/users/chespinoza/repos", "events_url": "https://api.github.com/users/chespinoza/events{/privacy}", "received_events_url": "https://api.github.com/users/chespinoza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-11-06T00:04:05Z", "updated_at": "2019-12-11T14:51:31Z", "closed_at": "2019-12-11T14:51:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Taking the example from the readme:\r\n\r\n```python\r\nimport marshmallow\r\nfrom marshmallow_dataclass import NewType\r\n\r\nEmail = NewType(\"Email\", str, field=marshmallow.fields.Email)\r\n```\r\n\r\nWhen using Email in a schema, for instance:\r\n\r\n```python\r\n@marshmallow_dataclass.dataclass\r\nclass MySchema:\r\n    id: str = field(metadata={\"validate\": marshmallow.validate.uuid})\r\n    email: Email\r\n    Schema: ClassVar[Type[marshmallow.Schema]] = marshmallow.Schema\r\n```\r\nI'm getting this error from mypy:\r\n\r\n`Mypy error: Variable \"Email\" is not valid as a type mypy(error)`\r\n\r\nversions:\r\n```\r\nmarshmallow==3.2.1\r\nmarshmallow-dataclass==7.0.0\r\n```\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/49", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/49/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/49/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/49", "id": 515227888, "node_id": "MDU6SXNzdWU1MTUyMjc4ODg=", "number": 49, "title": "supporting generic types without type arguments, such as `dict`", "user": {"login": "vvoody", "id": 65963, "node_id": "MDQ6VXNlcjY1OTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/65963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvoody", "html_url": "https://github.com/vvoody", "followers_url": "https://api.github.com/users/vvoody/followers", "following_url": "https://api.github.com/users/vvoody/following{/other_user}", "gists_url": "https://api.github.com/users/vvoody/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvoody/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvoody/subscriptions", "organizations_url": "https://api.github.com/users/vvoody/orgs", "repos_url": "https://api.github.com/users/vvoody/repos", "events_url": "https://api.github.com/users/vvoody/events{/privacy}", "received_events_url": "https://api.github.com/users/vvoody/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-31T07:40:40Z", "updated_at": "2019-11-04T10:49:56Z", "closed_at": "2019-11-04T10:49:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, `variables` is a dict. My dataclass NewReqPayload cannot be dumped.\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nimport marshmallow_dataclass\r\n\r\n@dataclass\r\nclass NewReqPayload:\r\n    category: str\r\n    type: str\r\n    subtype: str\r\n    short_description: str\r\n    description: str\r\n    requested_by: str\r\n    assigned_to: str\r\n    requested_due_date: str\r\n    variables: dict\r\n\r\nNewReqPayloadSchema = marshmallow_dataclass.class_schema(NewReqPayload)\r\n\r\nreq_payload = NewReqPayload(\r\n        category=\"System Administration\",\r\n        type=\"Configuration Requests\",\r\n        subtype=\"Tools/Automation\",\r\n        short_description=\"jon short_description\",\r\n        description=\"jon description\",\r\n        requested_by=\"xiaojuwang\",\r\n        assigned_to=\"xiaojuwang\",\r\n        requested_due_date=\"2019-12-20\",\r\n        variables={\"environment\": \"development\"}\r\n)\r\n\r\nNewReqPayloadSchema().dump(req_payload)\r\n```\r\n\r\nThis code raises `TypeError: dict is not a dataclass and cannot be turned into one.`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/47", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/47/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/47/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/47", "id": 512405653, "node_id": "MDU6SXNzdWU1MTI0MDU2NTM=", "number": 47, "title": "Error when dataclass member names conflicting with Schema members", "user": {"login": "dutekvejin", "id": 119709, "node_id": "MDQ6VXNlcjExOTcwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/119709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dutekvejin", "html_url": "https://github.com/dutekvejin", "followers_url": "https://api.github.com/users/dutekvejin/followers", "following_url": "https://api.github.com/users/dutekvejin/following{/other_user}", "gists_url": "https://api.github.com/users/dutekvejin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dutekvejin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dutekvejin/subscriptions", "organizations_url": "https://api.github.com/users/dutekvejin/orgs", "repos_url": "https://api.github.com/users/dutekvejin/repos", "events_url": "https://api.github.com/users/dutekvejin/events{/privacy}", "received_events_url": "https://api.github.com/users/dutekvejin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698183, "node_id": "MDU6TGFiZWwxMjIxNjk4MTgz", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-25T09:26:09Z", "updated_at": "2019-10-29T09:49:06Z", "closed_at": "2019-10-29T09:49:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm hitting the issue when my dataclass defines property decorated method that is named `context`\r\n\r\nHere is an example:\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\n\r\nfrom marshmallow_dataclass import class_schema\r\n\r\n\r\n@dataclass\r\nclass MyClazz:\r\n    foo: str\r\n\r\n    @property\r\n    def context(self) -> None:\r\n        return None\r\n\r\n\r\nMyClazzSchema = class_schema(MyClazz)\r\nMyClazzSchema().load({'foo': 'bar'})\r\n\r\n```\r\n\r\n\r\nand the result:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/scratches/issue.py\", line 16, in <module>\r\n    MyClazzSchema().load({'foo': 'bar'})\r\n  File \"/scratches/venv/lib/python3.7/site-packages/marshmallow/schema.py\", line 388, in __init__\r\n    self.context = context or {}\r\nAttributeError: can't set attribute\r\n```\r\n\r\nAnd this is happening with any dataclass member that is conflicting with `marshmallow.Schema` attribute names eg. `many`,  `load_only`, `fields`... \r\n\r\nWhen I chased down this issue, I found that `marshmallow_dataclass.class_schema` copying all public members of the dataclass to the schema. \r\nhttps://github.com/lovasoa/marshmallow_dataclass/blob/445a0efc4b93f58b178cca3670809768b098c4a7/marshmallow_dataclass/__init__.py#L272-L273\r\n\r\nWhen I change that particular line of code to `attributes = {}` everything starts to work fine as `marshmallow_dataclass.class_schema` will create `marshmallow.fields.Field` from every dataclass declared field and pass it into created schema.\r\n\r\nFor me the solution would be  not to add all public members of the dataclass to the schema but just dataclass declared field. I can create PR with this change but I'm not sure if this can break something, and I'm wondering why copying all public members at the first place?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/45", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/45/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/45/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/45", "id": 509464161, "node_id": "MDU6SXNzdWU1MDk0NjQxNjE=", "number": 45, "title": "Please add a CHANGELOG", "user": {"login": "mivade", "id": 2805515, "node_id": "MDQ6VXNlcjI4MDU1MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2805515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mivade", "html_url": "https://github.com/mivade", "followers_url": "https://api.github.com/users/mivade/followers", "following_url": "https://api.github.com/users/mivade/following{/other_user}", "gists_url": "https://api.github.com/users/mivade/gists{/gist_id}", "starred_url": "https://api.github.com/users/mivade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mivade/subscriptions", "organizations_url": "https://api.github.com/users/mivade/orgs", "repos_url": "https://api.github.com/users/mivade/repos", "events_url": "https://api.github.com/users/mivade/events{/privacy}", "received_events_url": "https://api.github.com/users/mivade/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-19T14:55:57Z", "updated_at": "2019-10-29T14:38:48Z", "closed_at": "2019-10-29T10:08:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "As far as I can tell this project has no CHANGELOG to document changes in each release. It would be nice to have one so that we can tell what new features or other changes exist in each new release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/44", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/44/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/44/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/44", "id": 509352906, "node_id": "MDU6SXNzdWU1MDkzNTI5MDY=", "number": 44, "title": "Support for attrs", "user": {"login": "jtrakk", "id": 43392409, "node_id": "MDQ6VXNlcjQzMzkyNDA5", "avatar_url": "https://avatars1.githubusercontent.com/u/43392409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtrakk", "html_url": "https://github.com/jtrakk", "followers_url": "https://api.github.com/users/jtrakk/followers", "following_url": "https://api.github.com/users/jtrakk/following{/other_user}", "gists_url": "https://api.github.com/users/jtrakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtrakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtrakk/subscriptions", "organizations_url": "https://api.github.com/users/jtrakk/orgs", "repos_url": "https://api.github.com/users/jtrakk/repos", "events_url": "https://api.github.com/users/jtrakk/events{/privacy}", "received_events_url": "https://api.github.com/users/jtrakk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1564488385, "node_id": "MDU6TGFiZWwxNTY0NDg4Mzg1", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/discussion", "name": "discussion", "color": "6ddba0", "default": false, "description": "Feedback is welcome"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-18T23:30:00Z", "updated_at": "2019-10-21T09:25:52Z", "closed_at": "2019-10-21T09:25:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like to use the [attrs module](http://attrs.org). Attrs functionality is a superset of dataclasses, though a few of the names are different (e.g. `factory` vs `default_factory`). How would you feel about having support for `attrs` in addition to `dataclasses`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/42", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/42/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/42/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/42", "id": 503044326, "node_id": "MDU6SXNzdWU1MDMwNDQzMjY=", "number": 42, "title": "Dataclasses do not implement __iter__, causing webargs.use_kwargs to fail", "user": {"login": "CptSpaceToaster", "id": 5491723, "node_id": "MDQ6VXNlcjU0OTE3MjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5491723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CptSpaceToaster", "html_url": "https://github.com/CptSpaceToaster", "followers_url": "https://api.github.com/users/CptSpaceToaster/followers", "following_url": "https://api.github.com/users/CptSpaceToaster/following{/other_user}", "gists_url": "https://api.github.com/users/CptSpaceToaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/CptSpaceToaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CptSpaceToaster/subscriptions", "organizations_url": "https://api.github.com/users/CptSpaceToaster/orgs", "repos_url": "https://api.github.com/users/CptSpaceToaster/repos", "events_url": "https://api.github.com/users/CptSpaceToaster/events{/privacy}", "received_events_url": "https://api.github.com/users/CptSpaceToaster/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-06T02:56:54Z", "updated_at": "2019-10-07T15:15:33Z", "closed_at": "2019-10-07T15:13:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "webargs will attempt to combine the results of schema.load into the resulting kwargs to be passed into a function, as seen here:\r\n\r\nhttps://github.com/marshmallow-code/webargs/blob/5.5.1/src/webargs/core.py#L446-L448\r\n\r\nIn order to repair this assumption, while still using dataclasses, I had to implement a mixin for my dataclasses to allow them to appear as iterables for the purposes of `kwargs.update(dataclass)`\r\n\r\n```python\r\nclass Iterable:\r\n    def __iter__(self):\r\n        \"\"\"When extending a dataclass, yields all key value pairs as if it were a dictionary\"\"\"\r\n        for attr, value in self.__dict__.items():\r\n            if value is not None:\r\n                yield attr, value\r\n\r\n@dataclass\r\nclass Building(Iterable):\r\n    # field metadata is used to instantiate the marshmallow field\r\n    height: float = field(metadata={\"validate\": marshmallow.validate.Range(min=0)})\r\n    name: str = field(default=\"anonymous\")\r\n```\r\n\r\nShould I go make noise over in webargs saying they should accept dataclasses? or is this something that we can safely hack in here, as we're are actively transforming the resulting dictionary INTO a dataclass.\r\n\r\nAnother acceptable solution would be to add a meta argument to allow a developer to skip the `post_load` step, and allow `load` to return a dictionary and NOT a dataclass, which is honestly more optimal IMO.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/41", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/41/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/41/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/41", "id": 499653693, "node_id": "MDU6SXNzdWU0OTk2NTM2OTM=", "number": 41, "title": "Example in readme not a valid", "user": {"login": "heckad", "id": 45011689, "node_id": "MDQ6VXNlcjQ1MDExNjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/45011689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/heckad", "html_url": "https://github.com/heckad", "followers_url": "https://api.github.com/users/heckad/followers", "following_url": "https://api.github.com/users/heckad/following{/other_user}", "gists_url": "https://api.github.com/users/heckad/gists{/gist_id}", "starred_url": "https://api.github.com/users/heckad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/heckad/subscriptions", "organizations_url": "https://api.github.com/users/heckad/orgs", "repos_url": "https://api.github.com/users/heckad/repos", "events_url": "https://api.github.com/users/heckad/events{/privacy}", "received_events_url": "https://api.github.com/users/heckad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-09-27T21:14:10Z", "updated_at": "2019-10-19T10:18:39Z", "closed_at": "2019-09-29T15:43:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "This example\r\n```\r\nimport marshmallow\r\nimport marshmallow_dataclass\r\n\r\n\r\nclass UppercaseSchema(marshmallow.Schema):\r\n    \"\"\"A Schema that marshals data with uppercased keys.\"\"\"\r\n\r\n    def on_bind_field(self, field_name, field_obj):\r\n        field_obj.data_key = (field_obj.data_key or field_name).upper()\r\n\r\n\r\nclass Sample:\r\n    my_text: str\r\n    my_int: int\r\n\r\n\r\nSampleSchema = marshmallow_dataclass.class_schema(Sample, base_schema=UppercaseSchema)\r\n\r\nSample.Schema().dump(Sample(my_text=\"warm words\", my_int=1))\r\n```\r\nnot work with last version of `marshmallow_dataclass`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/30", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/30/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/30/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/30", "id": 494869006, "node_id": "MDU6SXNzdWU0OTQ4NjkwMDY=", "number": 30, "title": "Assign to __schema__ instead of Schema; load and dump helpers?", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1564488385, "node_id": "MDU6TGFiZWwxNTY0NDg4Mzg1", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/discussion", "name": "discussion", "color": "6ddba0", "default": false, "description": "Feedback is welcome"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-09-17T21:49:31Z", "updated_at": "2019-10-06T04:23:47Z", "closed_at": "2019-10-06T04:23:47Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "It may make sense to assign the generated schema to `__schema__` instead of `Schema` for consistency with `dataclasses.dataclass`, which only assigns dunder methods.\r\n\r\n```python\r\n@dataclass\r\nclass Artist:\r\n    name: str\r\n\r\nArtist.__schema__  # => Schema class\r\n```\r\n\r\nTo improve the DX, you could add `dump` and `load` helper methods.\r\n\r\n```python\r\nimport datetime as dt\r\n\r\nfrom marshmallow_dataclass import dataclass, load\r\n\r\n@dataclass\r\nclass Album:\r\n    title: str\r\n    release_date: dt.date\r\n\r\nalbum = load(Album, {\"title\": \"Hunky Dory\", \"release_date\": \"1971-12-17\"})\r\n```\r\n\r\nSchema contructor arguments can be passed as keyword arguments.\r\n\r\n```python\r\nalbums = load(Album, input_data, many=True)\r\n```\r\n\r\nThis could even open the door to conveniences like\r\n\r\n```python\r\nalbums = load(List[Album], input_data)  # calls Album.__schema__(many=True).load(input_data)\r\n```\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/29", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/29/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/29/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/29", "id": 494863921, "node_id": "MDU6SXNzdWU0OTQ4NjM5MjE=", "number": 29, "title": "Rename?", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698199, "node_id": "MDU6TGFiZWwxMjIxNjk4MTk5", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": "This will not be worked on"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-17T21:35:56Z", "updated_at": "2019-09-19T12:37:04Z", "closed_at": "2019-09-18T06:34:00Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Nice work with this project!\r\n\r\nJust a few suggestions for naming:\r\n\r\n* \"dataclasses\" should be plural, for consistency with the stdlib's `dataclasses` \r\n* Use `-` instead of `_` in the package name. It's the de facto standard and IIRC, pip automatically normalizes `_` to `-` anyway.\r\n\r\nSo I recommend renaming to `marshmallow-dataclasses`.\r\n\r\nOr--if you'd prefer more cleverness--I also like `schemaclasses`.\r\n\r\n```python\r\nfrom schemaclasses import schemaclass\r\n\r\n@schemaclass\r\nclass Artist:\r\n    name: str\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/27", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/27/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/27/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/27", "id": 492698953, "node_id": "MDU6SXNzdWU0OTI2OTg5NTM=", "number": 27, "title": "marshmallow 'attribute' through field metadata not working", "user": {"login": "Arkanayan", "id": 8224598, "node_id": "MDQ6VXNlcjgyMjQ1OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/8224598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arkanayan", "html_url": "https://github.com/Arkanayan", "followers_url": "https://api.github.com/users/Arkanayan/followers", "following_url": "https://api.github.com/users/Arkanayan/following{/other_user}", "gists_url": "https://api.github.com/users/Arkanayan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arkanayan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arkanayan/subscriptions", "organizations_url": "https://api.github.com/users/Arkanayan/orgs", "repos_url": "https://api.github.com/users/Arkanayan/repos", "events_url": "https://api.github.com/users/Arkanayan/events{/privacy}", "received_events_url": "https://api.github.com/users/Arkanayan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1551966275, "node_id": "MDU6TGFiZWwxNTUxOTY2Mjc1", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/incomplete", "name": "incomplete", "color": "d3674a", "default": false, "description": "More information is required"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-12T09:44:40Z", "updated_at": "2019-09-15T16:25:15Z", "closed_at": "2019-09-15T16:24:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "When deserializing, the field becomes missing. You can check the snippet\r\n\r\n```python\r\nfrom dataclasses import field\r\nfrom marshmallow_dataclass import dataclass # Importing from marshmallow_dataclass instead of dataclasses\r\nimport marshmallow.validate\r\nfrom typing import List, Optional\r\n\r\n@dataclass\r\nclass Building:\r\n  # The field metadata is used to instantiate the marshmallow field\r\n  height: float = field(metadata={'validate': marshmallow.validate.Range(min=0), 'attribute': 'height2'})\r\n  name: str = field(default=\"anonymous\")\r\n\r\n\r\n@dataclass\r\nclass City:\r\n  name: Optional[str]\r\n  buildings: List[Building] = field(default_factory=lambda: [])\r\n\r\n# City.Schema contains a marshmallow schema class\r\ncity = City.Schema().load({\r\n    \"name\": \"Paris\",\r\n    \"buildings\": [\r\n        {\"name\": \"Eiffel Tower\", \"height\":324}\r\n    ]\r\n})\r\n\r\nprint(City.Schema().dump(city))\r\n\r\nbuilding = Building(height=200, name=\"hello\")\r\ncity = City(name='Paris', buildings=[building])\r\n# print(Building.Schema().dump(building))\r\nprint(City.Schema().dump(city))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/26", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/26/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/26/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/26", "id": 492073728, "node_id": "MDU6SXNzdWU0OTIwNzM3Mjg=", "number": 26, "title": "Allow custom BaseSchema", "user": {"login": "manmime", "id": 55181079, "node_id": "MDQ6VXNlcjU1MTgxMDc5", "avatar_url": "https://avatars3.githubusercontent.com/u/55181079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/manmime", "html_url": "https://github.com/manmime", "followers_url": "https://api.github.com/users/manmime/followers", "following_url": "https://api.github.com/users/manmime/following{/other_user}", "gists_url": "https://api.github.com/users/manmime/gists{/gist_id}", "starred_url": "https://api.github.com/users/manmime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/manmime/subscriptions", "organizations_url": "https://api.github.com/users/manmime/orgs", "repos_url": "https://api.github.com/users/manmime/repos", "events_url": "https://api.github.com/users/manmime/events{/privacy}", "received_events_url": "https://api.github.com/users/manmime/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-11T07:49:44Z", "updated_at": "2019-09-18T21:56:29Z", "closed_at": "2019-09-18T21:56:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Without marshmallow_dataclass:\r\nI have my own BaseSchema, that (not only) converts all snake_case variable names to their camelCase alternatives when dumping. All my others schemas inherit from that. \r\nI want to get rid of boilerplate schemas for my dataclasses and use this library, but i can't find a way to do so.\r\n\r\nMy idea:\r\nWith marshmallow_dataclass:\r\nIt would be great, if \r\n`PersonSchema = marshmallow_dataclass.class_schema(Person)` had a parameter `base_class=MyBaseClass`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/24", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/24/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/24/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/24", "id": 474110683, "node_id": "MDU6SXNzdWU0NzQxMTA2ODM=", "number": 24, "title": "Add Support for Unions", "user": {"login": "alextremblay", "id": 23367954, "node_id": "MDQ6VXNlcjIzMzY3OTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/23367954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextremblay", "html_url": "https://github.com/alextremblay", "followers_url": "https://api.github.com/users/alextremblay/followers", "following_url": "https://api.github.com/users/alextremblay/following{/other_user}", "gists_url": "https://api.github.com/users/alextremblay/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextremblay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextremblay/subscriptions", "organizations_url": "https://api.github.com/users/alextremblay/orgs", "repos_url": "https://api.github.com/users/alextremblay/repos", "events_url": "https://api.github.com/users/alextremblay/events{/privacy}", "received_events_url": "https://api.github.com/users/alextremblay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "alextremblay", "id": 23367954, "node_id": "MDQ6VXNlcjIzMzY3OTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/23367954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextremblay", "html_url": "https://github.com/alextremblay", "followers_url": "https://api.github.com/users/alextremblay/followers", "following_url": "https://api.github.com/users/alextremblay/following{/other_user}", "gists_url": "https://api.github.com/users/alextremblay/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextremblay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextremblay/subscriptions", "organizations_url": "https://api.github.com/users/alextremblay/orgs", "repos_url": "https://api.github.com/users/alextremblay/repos", "events_url": "https://api.github.com/users/alextremblay/events{/privacy}", "received_events_url": "https://api.github.com/users/alextremblay/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "alextremblay", "id": 23367954, "node_id": "MDQ6VXNlcjIzMzY3OTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/23367954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextremblay", "html_url": "https://github.com/alextremblay", "followers_url": "https://api.github.com/users/alextremblay/followers", "following_url": "https://api.github.com/users/alextremblay/following{/other_user}", "gists_url": "https://api.github.com/users/alextremblay/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextremblay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextremblay/subscriptions", "organizations_url": "https://api.github.com/users/alextremblay/orgs", "repos_url": "https://api.github.com/users/alextremblay/repos", "events_url": "https://api.github.com/users/alextremblay/events{/privacy}", "received_events_url": "https://api.github.com/users/alextremblay/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-07-29T15:18:28Z", "updated_at": "2019-07-30T14:00:10Z", "closed_at": "2019-07-30T14:00:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I absolutely love your library, it's made my life so much easier. Thank you!\r\n\r\nCan we add support for using [marshmallow_union](https://python-marshmallow-union.readthedocs.io/en/latest/usage.html) on Union fields? \r\n\r\nSimilar to how you support `marshmallow_enum`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/23", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/23/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/23/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/23", "id": 463315564, "node_id": "MDU6SXNzdWU0NjMzMTU1NjQ=", "number": 23, "title": "Cannot add marshmallow metadata to list items", "user": {"login": "rusnyder", "id": 1737440, "node_id": "MDQ6VXNlcjE3Mzc0NDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1737440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rusnyder", "html_url": "https://github.com/rusnyder", "followers_url": "https://api.github.com/users/rusnyder/followers", "following_url": "https://api.github.com/users/rusnyder/following{/other_user}", "gists_url": "https://api.github.com/users/rusnyder/gists{/gist_id}", "starred_url": "https://api.github.com/users/rusnyder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rusnyder/subscriptions", "organizations_url": "https://api.github.com/users/rusnyder/orgs", "repos_url": "https://api.github.com/users/rusnyder/repos", "events_url": "https://api.github.com/users/rusnyder/events{/privacy}", "received_events_url": "https://api.github.com/users/rusnyder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-02T16:08:37Z", "updated_at": "2019-10-22T13:17:35Z", "closed_at": "2019-10-19T10:11:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue\r\n\r\nI can't seem to find any way to apply validation to items of a list type object, and upon inspection of the `field_for_schema` implementation I don't think this is possible, as no metadata is forwarded to the schema creation for the list item type:\r\n\r\n### marshmallow_dataclass: [__init__.py](https://github.com/lovasoa/marshmallow_dataclass/blob/master/marshmallow_dataclass/__init__.py#L303)\r\n```python\r\n239:  def field_for_schema(\r\n240:          typ: type,\r\n241:          default=marshmallow.missing,\r\n242:          metadata: Mapping[str, Any] = None\r\n243:  ) -> marshmallow.fields.Field:\r\n...\r\n303:      if origin in (list, List):\r\n304:          list_elements_type = typing_inspect.get_args(typ, True)[0]\r\n305:          return marshmallow.fields.List(\r\n306:              field_for_schema(list_elements_type),  # <<< No metadata passed\r\n307:              **metadata\r\n308:          )\r\n```\r\n\r\n## Current State\r\n\r\nLet's say I have a `User` class and and want to maintain a list of email addresses for each user.  Currently, the only way I'd be able to validate the IP addresses is with a callable that iterated over the list and manually invoked Marshmallow's validators:\r\n\r\n```python\r\nfrom typing import List\r\nfrom marshmallow.validate import Email\r\nfrom marshmallow_dataclass import dataclass\r\n\r\n@dataclass\r\nclass User:\r\n    name: str\r\n    emails: List[str] = field(metadata={\r\n        'validate': lambda l: all(Email()(i) for i in l)\r\n    })\r\n```\r\n\r\n...which, admittedly, is pretty simple, but it's more weakly representative of the validator's intent, particularly for tools that post-process the schema (i.e. - the fact that it's a list validator means that tools aren't able to recognize that the validation actually applies to the list item).\r\n\r\n## Proposal\r\n\r\nI'd like to add a mechanism for explicitly passing metadata to the list item schema.  I figure using a key in the `metadata` dict that doesn't conflict with Marshmallow schema kwargs would work just fine for this purpose:\r\n\r\n```python\r\nfrom typing import List\r\nfrom marshmallow.validate import Email\r\nfrom marshmallow_dataclass import dataclass\r\n\r\n@dataclass\r\nclass User:\r\n    name: str\r\n    emails: List[str] = field(metadata={\r\n        'item_metadata': {\r\n            'validate': Email()\r\n        }\r\n    })\r\n```\r\n\r\nIf this sounds like something of interest, I'll gladly whip it up and put out a PR.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/22", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/22/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/22/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/22", "id": 462655282, "node_id": "MDU6SXNzdWU0NjI2NTUyODI=", "number": 22, "title": "(for release candidate 3, rc3). correct @post_load handler params in `make_data_class`", "user": {"login": "kristian-lindin", "id": 47393915, "node_id": "MDQ6VXNlcjQ3MzkzOTE1", "avatar_url": "https://avatars1.githubusercontent.com/u/47393915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kristian-lindin", "html_url": "https://github.com/kristian-lindin", "followers_url": "https://api.github.com/users/kristian-lindin/followers", "following_url": "https://api.github.com/users/kristian-lindin/following{/other_user}", "gists_url": "https://api.github.com/users/kristian-lindin/gists{/gist_id}", "starred_url": "https://api.github.com/users/kristian-lindin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kristian-lindin/subscriptions", "organizations_url": "https://api.github.com/users/kristian-lindin/orgs", "repos_url": "https://api.github.com/users/kristian-lindin/repos", "events_url": "https://api.github.com/users/kristian-lindin/events{/privacy}", "received_events_url": "https://api.github.com/users/kristian-lindin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-01T11:14:45Z", "updated_at": "2019-07-02T07:01:51Z", "closed_at": "2019-07-01T17:21:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "from:\r\n\r\n```py\r\ndef _base_schema(clazz: type) -> Type[marshmallow.Schema]:\r\n    class BaseSchema(marshmallow.Schema):\r\n        @marshmallow.post_load\r\n        def make_data_class(self, data):\r\n            return clazz(**data)\r\n\r\n    return BaseSchema\r\n```\r\n\r\nto: (just adds, `**kwargs`)\r\n\r\n```py\r\ndef _base_schema(clazz: type) -> Type[marshmallow.Schema]:\r\n    class BaseSchema(marshmallow.Schema):\r\n        @marshmallow.post_load\r\n        def make_data_class(self, data, **kwargs):\r\n            return clazz(**data)\r\n\r\n    return BaseSchema\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/21", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/21/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/21/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/21", "id": 453386634, "node_id": "MDU6SXNzdWU0NTMzODY2MzQ=", "number": 21, "title": "\"typing.Any is not a dataclass and cannot be turned into one\"", "user": {"login": "shabbyrobe", "id": 288426, "node_id": "MDQ6VXNlcjI4ODQyNg==", "avatar_url": "https://avatars3.githubusercontent.com/u/288426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shabbyrobe", "html_url": "https://github.com/shabbyrobe", "followers_url": "https://api.github.com/users/shabbyrobe/followers", "following_url": "https://api.github.com/users/shabbyrobe/following{/other_user}", "gists_url": "https://api.github.com/users/shabbyrobe/gists{/gist_id}", "starred_url": "https://api.github.com/users/shabbyrobe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shabbyrobe/subscriptions", "organizations_url": "https://api.github.com/users/shabbyrobe/orgs", "repos_url": "https://api.github.com/users/shabbyrobe/repos", "events_url": "https://api.github.com/users/shabbyrobe/events{/privacy}", "received_events_url": "https://api.github.com/users/shabbyrobe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-07T07:59:47Z", "updated_at": "2019-06-08T09:34:52Z", "closed_at": "2019-06-07T17:17:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using 6.0.0rc2, my program can not start if I declare a dataclass that uses `typing.Any`:\r\n\r\n```\r\nfrom dataclasses import dataclass\r\nfrom typing import Any\r\nimport marshmallow_dataclass\r\n\r\n@dataclass\r\nclass Request:\r\n    service: str\r\n    method: str\r\n    input: Any\r\n\r\nRequestSchema = marshmallow_dataclass.class_schema(Request)\r\n```\r\n\r\nAttempting to start my program gives me the following error:\r\n```\r\n  File \"<snip>/__init__.py\", line 211, in class_schema\r\n    raise TypeError(f\"{getattr(clazz, '__name__', repr(clazz))} is not a dataclass and cannot be turned into one.\")\r\nTypeError: typing.Any is not a dataclass and cannot be turned into one.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/20", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/20/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/20/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/20", "id": 452941280, "node_id": "MDU6SXNzdWU0NTI5NDEyODA=", "number": 20, "title": "code in readme fails ?", "user": {"login": "asmodehn", "id": 221256, "node_id": "MDQ6VXNlcjIyMTI1Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/221256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asmodehn", "html_url": "https://github.com/asmodehn", "followers_url": "https://api.github.com/users/asmodehn/followers", "following_url": "https://api.github.com/users/asmodehn/following{/other_user}", "gists_url": "https://api.github.com/users/asmodehn/gists{/gist_id}", "starred_url": "https://api.github.com/users/asmodehn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asmodehn/subscriptions", "organizations_url": "https://api.github.com/users/asmodehn/orgs", "repos_url": "https://api.github.com/users/asmodehn/repos", "events_url": "https://api.github.com/users/asmodehn/events{/privacy}", "received_events_url": "https://api.github.com/users/asmodehn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-06T10:00:02Z", "updated_at": "2019-06-06T11:49:40Z", "closed_at": "2019-06-06T11:30:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I m just getting familiar with marshmallow_dataclass and the code on the README fails for me me with  : \r\n\r\n```\r\nline 23, in <module>\r\n    {\"name\": \"Eiffel Tower\", \"height\": 324}\r\nTypeError: cannot unpack non-iterable City object\r\n```\r\n\r\nMy python version is Python 3.7.2\r\n\r\nIs it included in the doctests running on travis somehow ?\r\nI see all builds passing there... or is the code in README not uptodate ?\r\n\r\nThanks !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/16", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/16/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/16/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/16", "id": 441891606, "node_id": "MDU6SXNzdWU0NDE4OTE2MDY=", "number": 16, "title": "Allow adding custom types to _native_to_marshmallow", "user": {"login": "rakanalh", "id": 195829, "node_id": "MDQ6VXNlcjE5NTgyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/195829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakanalh", "html_url": "https://github.com/rakanalh", "followers_url": "https://api.github.com/users/rakanalh/followers", "following_url": "https://api.github.com/users/rakanalh/following{/other_user}", "gists_url": "https://api.github.com/users/rakanalh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakanalh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakanalh/subscriptions", "organizations_url": "https://api.github.com/users/rakanalh/orgs", "repos_url": "https://api.github.com/users/rakanalh/repos", "events_url": "https://api.github.com/users/rakanalh/events{/privacy}", "received_events_url": "https://api.github.com/users/rakanalh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-08T19:22:46Z", "updated_at": "2019-10-19T10:12:28Z", "closed_at": "2019-10-19T10:12:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Follow up to #15, this is to suggest exposting `_native_to_marshmallow` publicly or, better yet, allow registring custom types to the list for more flexibility on the types that could be user-defined and which fields these types should translate to.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/15", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/15/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/15/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/15", "id": 441890432, "node_id": "MDU6SXNzdWU0NDE4OTA0MzI=", "number": 15, "title": "Dict keys / values are returned as they are regardless of the field", "user": {"login": "rakanalh", "id": 195829, "node_id": "MDQ6VXNlcjE5NTgyOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/195829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakanalh", "html_url": "https://github.com/rakanalh", "followers_url": "https://api.github.com/users/rakanalh/followers", "following_url": "https://api.github.com/users/rakanalh/following{/other_user}", "gists_url": "https://api.github.com/users/rakanalh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakanalh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakanalh/subscriptions", "organizations_url": "https://api.github.com/users/rakanalh/orgs", "repos_url": "https://api.github.com/users/rakanalh/repos", "events_url": "https://api.github.com/users/rakanalh/events{/privacy}", "received_events_url": "https://api.github.com/users/rakanalh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-08T19:19:50Z", "updated_at": "2019-05-08T20:19:56Z", "closed_at": "2019-05-08T20:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nUpon investigating an issue of a dataclass which has a Dict field of custom types, i found out that marshmallow (in the version pinned by marshmallow_dataclasses, 2.19.2) returns the key/value pairs as they are regardless of what Field we set for them.\r\n\r\nAn example:\r\n```\r\nfrom dataclasses import dataclass\r\nimport marshmallow\r\nfrom marshmallow_dataclass import class_schema, _native_to_marshmallow\r\n\r\nfrom typing import NewType, Dict, Any\r\n\r\nT_Signature = bytes\r\nSignature = NewType(\"Signature\", T_Signature)\r\n\r\nEMPTY_SIGNATURE = Signature(bytes(65))\r\n\r\nclass BytesField(marshmallow.fields.Field):\r\n    \"\"\" Used for `bytes` in the dataclass, serialize to hex encoding\"\"\"\r\n\r\n    def _serialize(self, value: bytes, attr: Any, obj: Any) -> str:\r\n        return to_hex(value)\r\n\r\n    def _deserialize(self, value: str, attr: Any, data: Any) -> bytes:\r\n        return to_bytes(hexstr=value)\r\n\r\n_native_to_marshmallow[Signature] = BytesField\r\n\r\n\r\n@dataclass\r\nclass A:\r\n    signatures: Dict[Signature, Signature]\r\n\r\n\r\na = A(signatures={\r\n    b'123': b'456',\r\n})\r\n\r\nschema = class_schema(A)\r\nprint(schema().dump(a))\r\n```\r\n\r\nHere, you can see i am doing the following:\r\n\r\n1. Declaring a custom type `Signature` of type `bytes`\r\n2. Adding the type to `marshmallow_dataclass._native_to_marshmallow` dictionary with a custom Field\r\n3. The `BytesField` in this case would convert the bytes to a hex string and vice versa.\r\n4. Dumping a sample object.\r\n\r\nThe sample object is dumped as it was provided\r\n```\r\nMarshalResult(data={'signatures': {b'123': b'456'}}, errors={})\r\n```\r\n`to_hex` and `to_bytes` aren't even declared in this file so that should have error'ed but it doesn't because marshmallow isn't using the field but rather returning the values as they are.\r\n\r\nHere's the code in marshmallow:\r\nhttps://github.com/marshmallow-code/marshmallow/blob/ac9ff95432f929fb0fa2394c29b94d1f804a1504/src/marshmallow/fields.py#L281-L298\r\n\r\n\r\nAnd here's the code for Dict:\r\nhttps://github.com/marshmallow-code/marshmallow/blob/ac9ff95432f929fb0fa2394c29b94d1f804a1504/src/marshmallow/fields.py#L1083-L1102\r\n\r\n\r\nAs you can see, it doesn't use the fields passed down to them in `marshmallow_dataclass` dict code:\r\nhttps://github.com/lovasoa/marshmallow_dataclass/blob/d52d94a48bcf8a23e2adba1ab6e40dbbf06715d8/marshmallow_dataclass/__init__.py#L289-L295\r\n\r\nMy suggestion here, is to provide your own \"Dict\" field implementation which is able to use the provided fields to serialize/deserialize keys according to their pre-defined field types.\r\n\r\nWhat do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/14", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/14/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/14/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/14", "id": 440213774, "node_id": "MDU6SXNzdWU0NDAyMTM3NzQ=", "number": 14, "title": "default behavior doesn't work for non JSON serializable types (because default is used for both marshmallow's missing and default fields)", "user": {"login": "evanfwelch", "id": 3505411, "node_id": "MDQ6VXNlcjM1MDU0MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3505411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evanfwelch", "html_url": "https://github.com/evanfwelch", "followers_url": "https://api.github.com/users/evanfwelch/followers", "following_url": "https://api.github.com/users/evanfwelch/following{/other_user}", "gists_url": "https://api.github.com/users/evanfwelch/gists{/gist_id}", "starred_url": "https://api.github.com/users/evanfwelch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evanfwelch/subscriptions", "organizations_url": "https://api.github.com/users/evanfwelch/orgs", "repos_url": "https://api.github.com/users/evanfwelch/repos", "events_url": "https://api.github.com/users/evanfwelch/events{/privacy}", "received_events_url": "https://api.github.com/users/evanfwelch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698183, "node_id": "MDU6TGFiZWwxMjIxNjk4MTgz", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-05-03T20:42:00Z", "updated_at": "2019-07-03T18:24:58Z", "closed_at": "2019-07-03T18:24:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Marshmallow 2.x makes a distinction between `default` and `missing` parameters in it's `Field` class: `default` is used for serialization and `missing` for deserialization. However, the `marshmallow_dataclass` `field_for_schema` method sets the dataclass.field.default to _both_ `missing` and `default` (here: https://github.com/lovasoa/marshmallow_dataclass/blob/master/marshmallow_dataclass/__init__.py#L268-L270). The problem is that missing should look more like an _input_ to `Field._deserialize` and default should look more like an output of `Field._deserialize`.\r\n\r\nTherefore, the following does not work like I would expect it to (and I suspect this is true for all non-JSON serializable types that marshmallow_dataclass supports):\r\n\r\n```py\r\nfrom datetime import date\r\nfrom dataclasses import dataclass, field\r\nfrom marshmallow_dataclass import dataclass\r\n\r\n\r\n@dataclass\r\nclass Params:\r\n  date_i_need: date = field(default=date(2018,1,1))\r\n  int_i_need: int = field(default=3)\r\n\r\n\r\nif __name__ == '__main__':\r\n    blob = {}\r\n    #schema = Params.Schema(strict=True)\r\n    #schema.load(blob)\r\n\r\n    from marshmallow.fields import Date\r\n\r\n    d = Date(missing=date(2018,1,1))\r\n    d.deserialize({})\r\n```\r\n\r\nI get this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"date_play.py\", line 15, in <module>\r\n    schema.load(blob)\r\n  File \"/Users/evanw/SANDBOX/mallow/env/lib/python3.6/site-packages/marshmallow/schema.py\", line 597, in load\r\n    result, errors = self._do_load(data, many, partial=partial, postprocess=True)\r\n  File \"/Users/evanw/SANDBOX/mallow/env/lib/python3.6/site-packages/marshmallow/schema.py\", line 720, in _do_load\r\n    raise exc\r\nmarshmallow.exceptions.ValidationError: {'date_i_need': ['Not a valid date.']}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/9", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/9/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/9/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/9", "id": 426121908, "node_id": "MDU6SXNzdWU0MjYxMjE5MDg=", "number": 9, "title": "Create dataclasses with parameter", "user": {"login": "varunsomani", "id": 3260897, "node_id": "MDQ6VXNlcjMyNjA4OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3260897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varunsomani", "html_url": "https://github.com/varunsomani", "followers_url": "https://api.github.com/users/varunsomani/followers", "following_url": "https://api.github.com/users/varunsomani/following{/other_user}", "gists_url": "https://api.github.com/users/varunsomani/gists{/gist_id}", "starred_url": "https://api.github.com/users/varunsomani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varunsomani/subscriptions", "organizations_url": "https://api.github.com/users/varunsomani/orgs", "repos_url": "https://api.github.com/users/varunsomani/repos", "events_url": "https://api.github.com/users/varunsomani/events{/privacy}", "received_events_url": "https://api.github.com/users/varunsomani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-03-27T18:34:28Z", "updated_at": "2019-03-29T17:43:29Z", "closed_at": "2019-03-29T17:43:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following is the syntax for data class to use param like, \r\n\"init, repr, eq, order, unsafe_hash, frozen\"\r\n\r\n```\r\n>>> import dataclasses\r\n>>> \r\n>>> @dataclasses.dataclass(order=True, frozen=True)\r\n... class Validate:\r\n...     is_valid: bool\r\n... \r\n>>> \r\n```\r\n\r\nThe below doesn't work today and give an exception.\r\n\r\n```\r\n>>> from marshmallow_dataclass import dataclass\r\n>>> \r\n>>> @dataclass(order=True, frozen=True)\r\n... class Validate:\r\n...     is_valid: bool\r\n... \r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: dataclass() got an unexpected keyword argument 'order'\r\n\r\n```\r\n\r\nHowever as a workaround for now the following works instead,\r\n\r\n```\r\n>>> from marshmallow_dataclass import add_schema\r\n>>> @add_schema\r\n... @dataclasses.dataclass(order=True, frozen=True)\r\n... class Validate:\r\n...     is_valid: bool\r\n... \r\n>>> \r\n```\r\n\r\nIMO, would be good to have optional parameter present in the \"marshmallow_dataclass.dataclass\" decorator for future use case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/8", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/8/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/8/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/8", "id": 424408584, "node_id": "MDU6SXNzdWU0MjQ0MDg1ODQ=", "number": 8, "title": "Nested Dataclass Support", "user": {"login": "varunsomani", "id": 3260897, "node_id": "MDQ6VXNlcjMyNjA4OTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3260897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varunsomani", "html_url": "https://github.com/varunsomani", "followers_url": "https://api.github.com/users/varunsomani/followers", "following_url": "https://api.github.com/users/varunsomani/following{/other_user}", "gists_url": "https://api.github.com/users/varunsomani/gists{/gist_id}", "starred_url": "https://api.github.com/users/varunsomani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varunsomani/subscriptions", "organizations_url": "https://api.github.com/users/varunsomani/orgs", "repos_url": "https://api.github.com/users/varunsomani/repos", "events_url": "https://api.github.com/users/varunsomani/events{/privacy}", "received_events_url": "https://api.github.com/users/varunsomani/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698194, "node_id": "MDU6TGFiZWwxMjIxNjk4MTk0", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/invalid", "name": "invalid", "color": "e4e669", "default": true, "description": "This doesn't seem right"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-22T21:35:38Z", "updated_at": "2019-03-23T17:59:54Z", "closed_at": "2019-03-23T17:57:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could we have support in case we have nested dataclasses?\r\nSomething similar to what is defined here.\r\nhttps://stackoverflow.com/questions/51564841/creating-nested-dataclass-objects-in-python\r\n\r\nIs there a way we can support it in the next release?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/7", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/7/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/7/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/7", "id": 423003077, "node_id": "MDU6SXNzdWU0MjMwMDMwNzc=", "number": 7, "title": "Conda package? marshmallow 3.0?", "user": {"login": "aldanor", "id": 2418513, "node_id": "MDQ6VXNlcjI0MTg1MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/2418513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldanor", "html_url": "https://github.com/aldanor", "followers_url": "https://api.github.com/users/aldanor/followers", "following_url": "https://api.github.com/users/aldanor/following{/other_user}", "gists_url": "https://api.github.com/users/aldanor/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldanor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldanor/subscriptions", "organizations_url": "https://api.github.com/users/aldanor/orgs", "repos_url": "https://api.github.com/users/aldanor/repos", "events_url": "https://api.github.com/users/aldanor/events{/privacy}", "received_events_url": "https://api.github.com/users/aldanor/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698190, "node_id": "MDU6TGFiZWwxMjIxNjk4MTkw", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/help%20wanted", "name": "help wanted", "color": "008672", "default": true, "description": "Extra attention is needed"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-19T23:47:06Z", "updated_at": "2019-09-10T15:21:26Z", "closed_at": "2019-09-10T08:26:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, and thanks for a nice package :)\r\n\r\nA few quick questions - would it be worth pushing this to conda-forge to make it more discoverable? Would be nice to have it available through conda and not just pip.\r\n\r\nAlso, given that marshmallow 3.0 is bound to be out soon (the stable RCs are already out), would this package be compatible with it?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/6", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/6/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/6/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/6", "id": 420997023, "node_id": "MDU6SXNzdWU0MjA5OTcwMjM=", "number": 6, "title": "Using mypy with marshmallow_dataclass", "user": {"login": "karlb", "id": 144773, "node_id": "MDQ6VXNlcjE0NDc3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/144773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karlb", "html_url": "https://github.com/karlb", "followers_url": "https://api.github.com/users/karlb/followers", "following_url": "https://api.github.com/users/karlb/following{/other_user}", "gists_url": "https://api.github.com/users/karlb/gists{/gist_id}", "starred_url": "https://api.github.com/users/karlb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karlb/subscriptions", "organizations_url": "https://api.github.com/users/karlb/orgs", "repos_url": "https://api.github.com/users/karlb/repos", "events_url": "https://api.github.com/users/karlb/events{/privacy}", "received_events_url": "https://api.github.com/users/karlb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-14T12:43:12Z", "updated_at": "2020-05-10T13:13:03Z", "closed_at": "2019-05-15T15:09:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When checking a simple test program with mypy\r\n```python\r\nfrom marshmallow_dataclass import dataclass\r\n\r\n@dataclass\r\nclass Foo:\r\n    bar: int\r\n\r\nFoo(bar=1)\r\n```\r\nI get the following errors\r\n```\r\n$ mypy type_ex.py\r\ntype_ex.py:1: error: Cannot find module named 'marshmallow_dataclass'\r\ntype_ex.py:1: note: See https://mypy.readthedocs.io/en/latest/running_mypy.html#missing-imports\r\ntype_ex.py:9: error: Unexpected keyword argument \"bar\" for \"Foo\"\r\n```\r\n\r\nI can easily silence the first error with ` --ignore-missing-imports`, but probably that is related to why I get the second error. Do I have to do any additional mypy setup do get this to validate?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/5", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/5/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/5/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/5", "id": 419933683, "node_id": "MDU6SXNzdWU0MTk5MzM2ODM=", "number": 5, "title": "No support for types declared with `NewType`", "user": {"login": "karlb", "id": 144773, "node_id": "MDQ6VXNlcjE0NDc3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/144773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karlb", "html_url": "https://github.com/karlb", "followers_url": "https://api.github.com/users/karlb/followers", "following_url": "https://api.github.com/users/karlb/following{/other_user}", "gists_url": "https://api.github.com/users/karlb/gists{/gist_id}", "starred_url": "https://api.github.com/users/karlb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karlb/subscriptions", "organizations_url": "https://api.github.com/users/karlb/orgs", "repos_url": "https://api.github.com/users/karlb/repos", "events_url": "https://api.github.com/users/karlb/events{/privacy}", "received_events_url": "https://api.github.com/users/karlb/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-03-12T11:23:57Z", "updated_at": "2019-03-14T08:55:12Z", "closed_at": "2019-03-12T13:20:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Problem\r\n\r\nUsing types declares via `NewType` (https://docs.python.org/3/library/typing.html#newtype) causes marshmallow_dataclass to throw an error on import:\r\n```\r\nTraceback (most recent call last):\r\n  File \"type_ex.py\", line 8, in <module>\r\n    @dataclass\r\n  File \"/home/karl/tools/venv-services/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py\", line 77, in dataclass\r\n    return add_schema(dataclasses.dataclass(clazz))\r\n  File \"/home/karl/tools/venv-services/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py\", line 93, in add_schema\r\n    clazz.Schema = class_schema(clazz)\r\n  File \"/home/karl/tools/venv-services/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py\", line 193, in class_schema\r\n    for field in fields\r\n  File \"/home/karl/tools/venv-services/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py\", line 194, in <dictcomp>\r\n    if field.init\r\n  File \"/home/karl/tools/venv-services/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py\", line 284, in field_for_schema\r\n    nested = forward_reference or class_schema(typ)\r\n  File \"/home/karl/tools/venv-services/lib/python3.7/site-packages/marshmallow_dataclass/__init__.py\", line 185, in class_schema\r\n    raise TypeError(f\"{clazz.__name__} is not a dataclass and cannot be turned into one.\")\r\nTypeError: Barlike is not a dataclass and cannot be turned into one.\r\nkarl@t480karl:~/raiden-services (master)$\r\n\r\n```\r\n\r\n## Example:\r\n\r\n```python\r\nfrom typing import NewType\r\nfrom marshmallow_dataclass import dataclass\r\n\r\nT_Barlike = int\r\nBarlike = NewType('Barlike', T_Barlike)\r\n\r\n\r\n@dataclass\r\nclass Foo:\r\n    bar: Barlike\r\n```\r\n\r\n## Expected behaviour:\r\nEither treat the type like its base type or provide a way to register converters to a basic python type.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/4", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/4/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/4/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/4", "id": 412625508, "node_id": "MDU6SXNzdWU0MTI2MjU1MDg=", "number": 4, "title": "Support for marshmallow validators", "user": {"login": "MattF-NSIDC", "id": 18539827, "node_id": "MDQ6VXNlcjE4NTM5ODI3", "avatar_url": "https://avatars0.githubusercontent.com/u/18539827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattF-NSIDC", "html_url": "https://github.com/MattF-NSIDC", "followers_url": "https://api.github.com/users/MattF-NSIDC/followers", "following_url": "https://api.github.com/users/MattF-NSIDC/following{/other_user}", "gists_url": "https://api.github.com/users/MattF-NSIDC/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattF-NSIDC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattF-NSIDC/subscriptions", "organizations_url": "https://api.github.com/users/MattF-NSIDC/orgs", "repos_url": "https://api.github.com/users/MattF-NSIDC/repos", "events_url": "https://api.github.com/users/MattF-NSIDC/events{/privacy}", "received_events_url": "https://api.github.com/users/MattF-NSIDC/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1221698187, "node_id": "MDU6TGFiZWwxMjIxNjk4MTg3", "url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lovasoa", "id": 552629, "node_id": "MDQ6VXNlcjU1MjYyOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/552629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovasoa", "html_url": "https://github.com/lovasoa", "followers_url": "https://api.github.com/users/lovasoa/followers", "following_url": "https://api.github.com/users/lovasoa/following{/other_user}", "gists_url": "https://api.github.com/users/lovasoa/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovasoa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovasoa/subscriptions", "organizations_url": "https://api.github.com/users/lovasoa/orgs", "repos_url": "https://api.github.com/users/lovasoa/repos", "events_url": "https://api.github.com/users/lovasoa/events{/privacy}", "received_events_url": "https://api.github.com/users/lovasoa/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-02-20T20:59:18Z", "updated_at": "2019-08-20T22:18:49Z", "closed_at": "2019-03-11T19:07:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, any @validates_schema decorators on a dataclass do not run when loading with a generated schema from that dataclass. I assume any field-level validations will also not be run (unless I've done something horribly wrong -- we couldn't find anything in the docs about running validators).\r\n\r\n```python\r\nfrom dataclasses import dataclass\r\nimport marshmallow as mm\r\nimport marshmallow_dataclass as mmdc\r\n\r\n@dataclass\r\nclass Foo:\r\n  bar: str\r\n  @mm.validates_schema\r\n  def baz(self, data):\r\n    print(data)\r\n    raise mm.ValidationError('Some error', 'bar')\r\n\r\nprint(mmdc.class_schema(Foo)(strict=True).load({'bar': '1'}))                                                                                                                  \r\n```\r\n\r\nExpected: `ValidationError` raised\r\n\r\nActually prints:\r\n\r\n```\r\nUnmarshalResult(data=Foo(bar='1'), errors={})\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/3", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/3/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/3/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/3", "id": 408447195, "node_id": "MDU6SXNzdWU0MDg0NDcxOTU=", "number": 3, "title": "Error when using default or default_factory", "user": {"login": "KoHcoJlb", "id": 16294399, "node_id": "MDQ6VXNlcjE2Mjk0Mzk5", "avatar_url": "https://avatars0.githubusercontent.com/u/16294399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KoHcoJlb", "html_url": "https://github.com/KoHcoJlb", "followers_url": "https://api.github.com/users/KoHcoJlb/followers", "following_url": "https://api.github.com/users/KoHcoJlb/following{/other_user}", "gists_url": "https://api.github.com/users/KoHcoJlb/gists{/gist_id}", "starred_url": "https://api.github.com/users/KoHcoJlb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KoHcoJlb/subscriptions", "organizations_url": "https://api.github.com/users/KoHcoJlb/orgs", "repos_url": "https://api.github.com/users/KoHcoJlb/repos", "events_url": "https://api.github.com/users/KoHcoJlb/events{/privacy}", "received_events_url": "https://api.github.com/users/KoHcoJlb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-09T16:40:27Z", "updated_at": "2019-02-12T16:18:28Z", "closed_at": "2019-02-12T09:44:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nimport dataclasses as dc\r\nfrom marshmallow_dataclass import add_schema\r\n\r\n@add_schema\r\n@dc.dataclass\r\nclass User:\r\n    id: str = dc.field(default=None)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:/t/projects/python/src/marshmallow_test.py\", line 32, in <module>\r\n    @dataclass\r\n  File \"C:\\t\\programs\\python\\python37\\lib\\site-packages\\marshmallow_dataclass\\__init__.py\", line 77, in dataclass\r\n    return add_schema(dataclasses.dataclass(clazz))\r\n  File \"C:\\t\\programs\\python\\python37\\lib\\site-packages\\marshmallow_dataclass\\__init__.py\", line 93, in add_schema\r\n    clazz.Schema = class_schema(clazz)\r\n  File \"C:\\t\\programs\\python\\python37\\lib\\site-packages\\marshmallow_dataclass\\__init__.py\", line 193, in class_schema\r\n    for field in fields\r\n  File \"C:\\t\\programs\\python\\python37\\lib\\site-packages\\marshmallow_dataclass\\__init__.py\", line 194, in <dictcomp>\r\n    if field.init\r\n  File \"C:\\t\\programs\\python\\python37\\lib\\site-packages\\marshmallow_dataclass\\__init__.py\", line 255, in field_for_schema\r\n    return _native_to_marshmallow[typ](**metadata)\r\n  File \"C:\\t\\programs\\python\\python37\\lib\\site-packages\\marshmallow\\fields.py\", line 166, in __init__\r\n    raise ValueError(\"'missing' must not be set for required fields.\")\r\nValueError: 'missing' must not be set for required fields.\r\n```\r\n\r\nmarshmallow 3.0.0rc4\r\nmarshmallow-dataclass 0.5.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/1", "repository_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass", "labels_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/1/comments", "events_url": "https://api.github.com/repos/lovasoa/marshmallow_dataclass/issues/1/events", "html_url": "https://github.com/lovasoa/marshmallow_dataclass/issues/1", "id": 407360057, "node_id": "MDU6SXNzdWU0MDczNjAwNTc=", "number": 1, "title": "Example for dumping to string", "user": {"login": "repick3", "id": 7827821, "node_id": "MDQ6VXNlcjc4Mjc4MjE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7827821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repick3", "html_url": "https://github.com/repick3", "followers_url": "https://api.github.com/users/repick3/followers", "following_url": "https://api.github.com/users/repick3/following{/other_user}", "gists_url": "https://api.github.com/users/repick3/gists{/gist_id}", "starred_url": "https://api.github.com/users/repick3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repick3/subscriptions", "organizations_url": "https://api.github.com/users/repick3/orgs", "repos_url": "https://api.github.com/users/repick3/repos", "events_url": "https://api.github.com/users/repick3/events{/privacy}", "received_events_url": "https://api.github.com/users/repick3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-06T18:01:37Z", "updated_at": "2019-02-07T08:49:56Z", "closed_at": "2019-02-07T08:49:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you have a working example of how to dump a schema to string? ", "performed_via_github_app": null, "score": 1.0}]}