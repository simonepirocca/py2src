{"total_count": 864, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1565", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1565/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1565/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1565/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1565", "id": 682927105, "node_id": "MDU6SXNzdWU2ODI5MjcxMDU=", "number": 1565, "title": "Support printing custom message if a hook fails", "user": {"login": "jkff", "id": 343722, "node_id": "MDQ6VXNlcjM0MzcyMg==", "avatar_url": "https://avatars2.githubusercontent.com/u/343722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkff", "html_url": "https://github.com/jkff", "followers_url": "https://api.github.com/users/jkff/followers", "following_url": "https://api.github.com/users/jkff/following{/other_user}", "gists_url": "https://api.github.com/users/jkff/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkff/subscriptions", "organizations_url": "https://api.github.com/users/jkff/orgs", "repos_url": "https://api.github.com/users/jkff/repos", "events_url": "https://api.github.com/users/jkff/events{/privacy}", "received_events_url": "https://api.github.com/users/jkff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-08-20T17:12:30Z", "updated_at": "2020-08-20T18:39:43Z", "closed_at": "2020-08-20T17:30:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm configuring precommit for a repo inside my organization. Suppose the output of one of the hooks, or its usefulness, or how to fix it, might be not that obvious to my coworkers.\r\n\r\nI would like to be able to configure a custom message when this hook fails - e.g. it could point to an organization-internal wiki page explaining why we have enabled this hook and how to fix common issues with it.\r\n\r\nIt could look something like this I suppose:\r\n\r\n```\r\n- repo: https://github.com/psf/black\r\n  rev: 19.3b0\r\n  hooks:\r\n  - id: black\r\n    # \"message\" would be a new field for a hook\r\n    message: \"Please see http://notion.so/my-org/Python-Autoformatting for configuration and common issues\"\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1563", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1563/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1563/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1563/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1563", "id": 681558168, "node_id": "MDU6SXNzdWU2ODE1NTgxNjg=", "number": 1563, "title": "Use case for `require_serial: false` ", "user": {"login": "xinbinhuang", "id": 27927454, "node_id": "MDQ6VXNlcjI3OTI3NDU0", "avatar_url": "https://avatars1.githubusercontent.com/u/27927454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xinbinhuang", "html_url": "https://github.com/xinbinhuang", "followers_url": "https://api.github.com/users/xinbinhuang/followers", "following_url": "https://api.github.com/users/xinbinhuang/following{/other_user}", "gists_url": "https://api.github.com/users/xinbinhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/xinbinhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xinbinhuang/subscriptions", "organizations_url": "https://api.github.com/users/xinbinhuang/orgs", "repos_url": "https://api.github.com/users/xinbinhuang/repos", "events_url": "https://api.github.com/users/xinbinhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/xinbinhuang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-19T05:30:29Z", "updated_at": "2020-08-19T05:31:56Z", "closed_at": "2020-08-19T05:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi team,\r\n\r\nI noticed that some of my frequently used hooks (e.g. flake8, black, mypy) set `require_serial: true`. In fact, when I tried to set `require_serial: false`, it seems to be slower and it actually blows up my CI environment when running `mypy`.\r\n\r\nSo I am curious about in what situation (what type of workloads?) should I actually set `require_serial: false` and it's beneficial.\r\n\r\nAny suggestions would be much appreciated!\r\n\r\nThanks\r\nBin", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1562", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1562/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1562/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1562/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1562", "id": 680656381, "node_id": "MDU6SXNzdWU2ODA2NTYzODE=", "number": 1562, "title": "`--all-files` doesn't honor pyproject.toml config file.", "user": {"login": "giovanism", "id": 18410908, "node_id": "MDQ6VXNlcjE4NDEwOTA4", "avatar_url": "https://avatars1.githubusercontent.com/u/18410908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giovanism", "html_url": "https://github.com/giovanism", "followers_url": "https://api.github.com/users/giovanism/followers", "following_url": "https://api.github.com/users/giovanism/following{/other_user}", "gists_url": "https://api.github.com/users/giovanism/gists{/gist_id}", "starred_url": "https://api.github.com/users/giovanism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giovanism/subscriptions", "organizations_url": "https://api.github.com/users/giovanism/orgs", "repos_url": "https://api.github.com/users/giovanism/repos", "events_url": "https://api.github.com/users/giovanism/events{/privacy}", "received_events_url": "https://api.github.com/users/giovanism/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-18T03:18:07Z", "updated_at": "2020-08-18T03:58:00Z", "closed_at": "2020-08-18T03:56:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm trying to use isort and black on my CI with pre-commit. I also have a directory to exclude/skip from isort and black checks which I have configured using `pyproject.toml` on my project root directory.\r\n\r\nUsing this plain config and running with `--all-files` resulted isort and black checking against all files including previously excluded/skipped directory.\r\n```\r\nrepos:\r\n- repo: local\r\n  hooks:\r\n  - id: black\r\n    name: black\r\n    entry: black .\r\n    language: python\r\n    types: [python]\r\n  - id: isort\r\n    name: isort\r\n    entry: isort .\r\n    language: python\r\n    types: [python]\r\n```\r\nI have found a workaround for black by explicitly adding `-c pyproject.toml` on the hook's entry. Unfortunately isort doesnt have such flag, afaik. However, using isort's `--show-config` shows that it loaded the configuration correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1559", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1559/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1559/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1559/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1559", "id": 678363844, "node_id": "MDU6SXNzdWU2NzgzNjM4NDQ=", "number": 1559, "title": "ModuleNotFoundError for pre_commit_hooks when setting PYTHONPATH to project root", "user": {"login": "woutervdbekerom", "id": 16787066, "node_id": "MDQ6VXNlcjE2Nzg3MDY2", "avatar_url": "https://avatars1.githubusercontent.com/u/16787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/woutervdbekerom", "html_url": "https://github.com/woutervdbekerom", "followers_url": "https://api.github.com/users/woutervdbekerom/followers", "following_url": "https://api.github.com/users/woutervdbekerom/following{/other_user}", "gists_url": "https://api.github.com/users/woutervdbekerom/gists{/gist_id}", "starred_url": "https://api.github.com/users/woutervdbekerom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/woutervdbekerom/subscriptions", "organizations_url": "https://api.github.com/users/woutervdbekerom/orgs", "repos_url": "https://api.github.com/users/woutervdbekerom/repos", "events_url": "https://api.github.com/users/woutervdbekerom/events{/privacy}", "received_events_url": "https://api.github.com/users/woutervdbekerom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T11:27:52Z", "updated_at": "2020-08-17T06:20:11Z", "closed_at": "2020-08-17T06:20:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running pre-commit on Windows 10 and have set PYTHONPATH to the root of my project. I'm using conda and my pre-commit hooks are installed with python from the base env. When I try to run my hooks I get the following import errors for all `pre_commit_hooks` hooks:\r\n\r\n```\r\n(base) PS C:\\Users\\wouter\\OBELIX\\engineering-codebase> pre-commit run\r\nFix double quoted strings............................(no files to check)Skipped\r\nCheck for added large files..........................(no files to check)Skipped\r\nCheck python ast.....................................(no files to check)Skipped\r\nCheck JSON...........................................(no files to check)Skipped\r\nCheck Yaml...........................................(no files to check)Skipped\r\nFix End of Files.....................................(no files to check)Skipped\r\nDon't commit to branch...................................................Failed\r\n- hook id: no-commit-to-branch\r\n- exit code: 1\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\wouter\\scoop\\apps\\miniconda3\\current\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"C:\\Users\\wouter\\scoop\\apps\\miniconda3\\current\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\wouter\\.cache\\pre-commit\\repo6_ztvn4d\\py_env-default\\Scripts\\no-commit-to-branch.EXE\\__main__.py\", line 4, in <module>\r\nModuleNotFoundError: No module named 'pre_commit_hooks.no_commit_to_branch'\r\n```\r\n\r\nWhen I unset my PYTHONPATH or set it to somewhere else all is fine. Checked this in both Powershell and Git-bash and behavior is the same. As far as I understand pre-commit is supposed to run in an isolated env and hence should not care about this PYTHONPATH since it should not be set in the virtualenv?\r\n\r\nNote that my `autopep8` and `mypy` hooks run without an issue, the failing import only occur for `pre_commit_hooks` hooks. Also tried installing with my conda env activated but this does not change anything. Any thought on what is happening and how it can be tackled?\r\n\r\nSome possibly useful info:\r\nPython executable used by hooks: `C:\\Users\\wouter\\scoop\\apps\\miniconda3\\current\\python.exe`\r\n\r\nVersions used:\r\n```powershell\r\npython -V # Python 3.7.4\r\nconda -V # conda 4.8.4\r\npre-commit -V # pre-commit 2.6.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1558", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1558/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1558/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1558/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1558", "id": 676193777, "node_id": "MDU6SXNzdWU2NzYxOTM3Nzc=", "number": 1558, "title": "An unexpected error has occurred: CalledProcessError: Command: ['bash', '-c', \". '/Users/dfd/.pre-commit/repodyEcO7/py_env-default/bin/activate' && cd '/Users/dfd/.pre-commit/repodyEcO7/' && pip install .\"] Return code: 2 Expected return code: 0", "user": {"login": "kunal5", "id": 15965156, "node_id": "MDQ6VXNlcjE1OTY1MTU2", "avatar_url": "https://avatars2.githubusercontent.com/u/15965156?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kunal5", "html_url": "https://github.com/kunal5", "followers_url": "https://api.github.com/users/kunal5/followers", "following_url": "https://api.github.com/users/kunal5/following{/other_user}", "gists_url": "https://api.github.com/users/kunal5/gists{/gist_id}", "starred_url": "https://api.github.com/users/kunal5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kunal5/subscriptions", "organizations_url": "https://api.github.com/users/kunal5/orgs", "repos_url": "https://api.github.com/users/kunal5/repos", "events_url": "https://api.github.com/users/kunal5/events{/privacy}", "received_events_url": "https://api.github.com/users/kunal5/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-08-10T14:47:13Z", "updated_at": "2020-08-10T16:29:00Z", "closed_at": "2020-08-10T15:23:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting this error. \r\n<img width=\"1440\" alt=\"Screenshot 2020-08-10 at 7 50 00 PM\" src=\"https://user-images.githubusercontent.com/15965156/89795734-5f393600-db46-11ea-8999-8f3d00ea9d48.png\">\r\n\r\nI have tried making a new fresh environment but still the error persists. Please help\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1556", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1556/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1556/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1556/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1556", "id": 675520906, "node_id": "MDU6SXNzdWU2NzU1MjA5MDY=", "number": 1556, "title": "QST (ENH?) skip hooks based on name rather than id?", "user": {"login": "MarcoGorelli", "id": 33491632, "node_id": "MDQ6VXNlcjMzNDkxNjMy", "avatar_url": "https://avatars2.githubusercontent.com/u/33491632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcoGorelli", "html_url": "https://github.com/MarcoGorelli", "followers_url": "https://api.github.com/users/MarcoGorelli/followers", "following_url": "https://api.github.com/users/MarcoGorelli/following{/other_user}", "gists_url": "https://api.github.com/users/MarcoGorelli/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcoGorelli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcoGorelli/subscriptions", "organizations_url": "https://api.github.com/users/MarcoGorelli/orgs", "repos_url": "https://api.github.com/users/MarcoGorelli/repos", "events_url": "https://api.github.com/users/MarcoGorelli/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcoGorelli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-08T12:50:37Z", "updated_at": "2020-08-08T18:22:35Z", "closed_at": "2020-08-08T18:22:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, one can skip running a hook using the `SKIP` environment variable, which specifies a comma separated list of hook ids.\r\n\r\nIs there a way to skip hooks _based on their name_?\r\n\r\nHere's an example to illustrate the issue:\r\n\r\n```\r\n- repo: https://github.com/nbQA-dev/nbQA\r\n  rev: 0.1.20\r\n  hooks:\r\n    - id: nbqa\r\n      args: ['flake8']\r\n      name: nbqa-flake8\r\n      additional_dependencies: ['flake8']\r\n    - id: nbqa\r\n      args: ['mypy']\r\n      name: nbqa-mypy\r\n      additional_dependencies: ['mypy']\r\n```\r\n\r\nCurrently I could do\r\n```\r\nSKIP=nbqa pre-commit run --all\r\n```\r\nand skip both these hooks, but it would be nice to be able to only skip one of them based on its name, e.g.\r\n```\r\nSKIP=nbqa-mypy pre-commit run --all\r\n```\r\n\r\nIs this possible? If not, would you be open to allowing it (I'd be happy to work on a PR, if welcome)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1555", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1555/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1555/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1555/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1555", "id": 674882372, "node_id": "MDU6SXNzdWU2NzQ4ODIzNzI=", "number": 1555, "title": "autoupdate downgrades isort 5.3.2 to 5.3.0", "user": {"login": "hugovk", "id": 1324225, "node_id": "MDQ6VXNlcjEzMjQyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1324225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugovk", "html_url": "https://github.com/hugovk", "followers_url": "https://api.github.com/users/hugovk/followers", "following_url": "https://api.github.com/users/hugovk/following{/other_user}", "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions", "organizations_url": "https://api.github.com/users/hugovk/orgs", "repos_url": "https://api.github.com/users/hugovk/repos", "events_url": "https://api.github.com/users/hugovk/events{/privacy}", "received_events_url": "https://api.github.com/users/hugovk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-07T09:16:56Z", "updated_at": "2020-08-07T16:29:17Z", "closed_at": "2020-08-07T16:00:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "isort 5.3.0 was released two days ago.\r\n\r\nisort 5.3.1 and 5.3.2 were released an hour ago.\r\n\r\n* https://github.com/timothycrosley/isort/releases\r\n\r\nFor some reason pre-commit is autoupdating 5.3.2 (and versions < 5.3.0) to 5.3.0 and ignoring the latest patch releases:\r\n\r\n```console\r\n$ python --version\r\nPython 3.8.3\r\n$ pre-commit --version\r\npre-commit 2.6.0\r\n$ cat .pre-commit-config.yaml\r\nrepos:\r\n  - repo: https://github.com/timothycrosley/isort\r\n    rev: 5.3.2\r\n    hooks:\r\n      - id: isort\r\n$ pre-commit autoupdate\r\nUpdating https://github.com/timothycrosley/isort ... updating 5.3.2 -> 5.3.0.\r\n$ cat .pre-commit-config.yaml\r\nrepos:\r\n  - repo: https://github.com/timothycrosley/isort\r\n    rev: 5.3.0\r\n    hooks:\r\n      - id: isort\r\n```\r\n\r\nSimilarly on CI:\r\n\r\n* https://travis-ci.org/github/hugovk/test/jobs/715777034\r\n\r\nI can manually edit the file, but not so easily for a file using hashes frozen by  `--freeze`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1554", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1554/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1554/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1554/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1554", "id": 674775918, "node_id": "MDU6SXNzdWU2NzQ3NzU5MTg=", "number": 1554, "title": "FROM_REF...TO_REF doesn't work very well with shallow clones and git 2.28 (no merge base)", "user": {"login": "jarshwah", "id": 541083, "node_id": "MDQ6VXNlcjU0MTA4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/541083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jarshwah", "html_url": "https://github.com/jarshwah", "followers_url": "https://api.github.com/users/jarshwah/followers", "following_url": "https://api.github.com/users/jarshwah/following{/other_user}", "gists_url": "https://api.github.com/users/jarshwah/gists{/gist_id}", "starred_url": "https://api.github.com/users/jarshwah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jarshwah/subscriptions", "organizations_url": "https://api.github.com/users/jarshwah/orgs", "repos_url": "https://api.github.com/users/jarshwah/repos", "events_url": "https://api.github.com/users/jarshwah/events{/privacy}", "received_events_url": "https://api.github.com/users/jarshwah/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-08-07T05:47:29Z", "updated_at": "2020-08-18T13:27:02Z", "closed_at": "2020-08-07T05:56:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/git/git/commit/1457886ce2004c49661c8769f3a5246f6a340c8d describes the change to git 2.28 that breaks FROM_REF...TO_REF with shallow clones, but this stackoverflow post explains it best: https://stackoverflow.com/a/62617192/10583\r\n\r\nWhen cloning a repo shallowly, like with the checkout github action, then you typically do not have all of the commits required for the `...` form of diff to work correctly. Prior to git 2.28, it'd fallback to the `..` form internally. Now it crashes/returns no output.\r\n\r\n```\r\n$ git --version\r\ngit version 2.28.0\r\n$ git diff origin/master...HEAD\r\nfatal: origin/master...HEAD: no merge base\r\n```\r\n\r\nhttps://matthew-brett.github.io/pydagogue/git_diff_dots.html explains the dots. 2 dots means the difference between the latest FROM and the latest TO. 3 dots `...` means the difference between the FROM that TO branched from (common ancestor).\r\n\r\nIt'd be ace if we could pass through the exact ref range we were interested in, without having pre-commit force the `...` form between the 2 commits.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1552", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1552/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1552/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1552/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1552", "id": 668886310, "node_id": "MDU6SXNzdWU2Njg4ODYzMTA=", "number": 1552, "title": "setup.cfg is not being read for pydocstyle", "user": {"login": "kidrahahjo", "id": 44747868, "node_id": "MDQ6VXNlcjQ0NzQ3ODY4", "avatar_url": "https://avatars2.githubusercontent.com/u/44747868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kidrahahjo", "html_url": "https://github.com/kidrahahjo", "followers_url": "https://api.github.com/users/kidrahahjo/followers", "following_url": "https://api.github.com/users/kidrahahjo/following{/other_user}", "gists_url": "https://api.github.com/users/kidrahahjo/gists{/gist_id}", "starred_url": "https://api.github.com/users/kidrahahjo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kidrahahjo/subscriptions", "organizations_url": "https://api.github.com/users/kidrahahjo/orgs", "repos_url": "https://api.github.com/users/kidrahahjo/repos", "events_url": "https://api.github.com/users/kidrahahjo/events{/privacy}", "received_events_url": "https://api.github.com/users/kidrahahjo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-30T15:43:24Z", "updated_at": "2020-07-30T16:28:22Z", "closed_at": "2020-07-30T16:05:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `setup.cfg` contains the below mentioned code but still the directories which were supposed to get skipped are being tested for style:\r\nThis works fine with `flake8` but it's failing for `pydocstyle`\r\n```\r\n[pydocstyle]\r\nmatch-dir = ^((?!doc|tests).)*$\r\nignore = D105, D107, D203, D204, D213\r\n```\r\nThis is the hook I used (I also tried using a look hook but it didn't work).\r\n```\r\n-   repo: https://github.com/PyCQA/pydocstyle\r\n    rev: 5.0.2\r\n    hooks:\r\n    -   id: pydocstyle\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1550", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1550/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1550/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1550/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1550", "id": 666515321, "node_id": "MDU6SXNzdWU2NjY1MTUzMjE=", "number": 1550, "title": "Windows. UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte", "user": {"login": "bamesserly", "id": 17835077, "node_id": "MDQ6VXNlcjE3ODM1MDc3", "avatar_url": "https://avatars1.githubusercontent.com/u/17835077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bamesserly", "html_url": "https://github.com/bamesserly", "followers_url": "https://api.github.com/users/bamesserly/followers", "following_url": "https://api.github.com/users/bamesserly/following{/other_user}", "gists_url": "https://api.github.com/users/bamesserly/gists{/gist_id}", "starred_url": "https://api.github.com/users/bamesserly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bamesserly/subscriptions", "organizations_url": "https://api.github.com/users/bamesserly/orgs", "repos_url": "https://api.github.com/users/bamesserly/repos", "events_url": "https://api.github.com/users/bamesserly/events{/privacy}", "received_events_url": "https://api.github.com/users/bamesserly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-27T19:01:09Z", "updated_at": "2020-07-31T01:54:10Z", "closed_at": "2020-07-27T19:18:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Windows 10. python 3.7.3. Here are the exact powershell commands:\r\n```\r\npip install pre-commit\r\npre-commit sample-config > .pre-commit-config.yaml\r\ngit commit -m \"Test\" README.md\r\n```\r\n\r\nwhich gives me the error + attached log\r\n```\r\nAn unexpected error has occurred: UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\r\n```\r\n\r\n[pre-commit.log](https://github.com/pre-commit/pre-commit/files/4983937/pre-commit.log)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1548", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1548/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1548/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1548/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1548", "id": 666399995, "node_id": "MDU6SXNzdWU2NjYzOTk5OTU=", "number": 1548, "title": "Cannot use v2.6.0 - says no such tag", "user": {"login": "lanshark", "id": 1121027, "node_id": "MDQ6VXNlcjExMjEwMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1121027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lanshark", "html_url": "https://github.com/lanshark", "followers_url": "https://api.github.com/users/lanshark/followers", "following_url": "https://api.github.com/users/lanshark/following{/other_user}", "gists_url": "https://api.github.com/users/lanshark/gists{/gist_id}", "starred_url": "https://api.github.com/users/lanshark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lanshark/subscriptions", "organizations_url": "https://api.github.com/users/lanshark/orgs", "repos_url": "https://api.github.com/users/lanshark/repos", "events_url": "https://api.github.com/users/lanshark/events{/privacy}", "received_events_url": "https://api.github.com/users/lanshark/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-27T15:51:48Z", "updated_at": "2020-07-27T19:28:17Z", "closed_at": "2020-07-27T19:28:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "An unexpected error has occurred: CalledProcessError: command: ('/usr/bin/git', 'checkout', 'v2.5.1')\r\nreturn code: 1\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    error: pathspec 'v2.5.1' did not match any file(s) known to git\r\n    \r\nCheck the log at /home/ubuntu/.cache/pre-commit/pre-commit.log\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1545", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1545/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1545/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1545/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1545", "id": 665455317, "node_id": "MDU6SXNzdWU2NjU0NTUzMTc=", "number": 1545, "title": "Allow git submodules as repos", "user": {"login": "pchanial", "id": 687271, "node_id": "MDQ6VXNlcjY4NzI3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/687271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pchanial", "html_url": "https://github.com/pchanial", "followers_url": "https://api.github.com/users/pchanial/followers", "following_url": "https://api.github.com/users/pchanial/following{/other_user}", "gists_url": "https://api.github.com/users/pchanial/gists{/gist_id}", "starred_url": "https://api.github.com/users/pchanial/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pchanial/subscriptions", "organizations_url": "https://api.github.com/users/pchanial/orgs", "repos_url": "https://api.github.com/users/pchanial/repos", "events_url": "https://api.github.com/users/pchanial/events{/privacy}", "received_events_url": "https://api.github.com/users/pchanial/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-24T22:45:37Z", "updated_at": "2020-08-17T16:23:01Z", "closed_at": "2020-08-17T16:23:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'll give some context. I am currently developping on a VM without internet connection, only intranet. So, from a VM with access to internet, I tried to create a git repo \"all-pre-commit-hooks\" in the intranet BitBucket, adding pre-commit repos such as seed-isort-config, black, etc. as git submodules. But that didn't work, the submodules are not treated in the same way as the git repos.\r\nMaybe there's a better solution ? (other than cloning all the hook repos and cluttering the number of repos in our project)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1543", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1543/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1543/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1543/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1543", "id": 664229689, "node_id": "MDU6SXNzdWU2NjQyMjk2ODk=", "number": 1543, "title": "\u0421\u0442\u0430\u0440\u0442", "user": {"login": "VadimLaskovich", "id": 68665614, "node_id": "MDQ6VXNlcjY4NjY1NjE0", "avatar_url": "https://avatars3.githubusercontent.com/u/68665614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VadimLaskovich", "html_url": "https://github.com/VadimLaskovich", "followers_url": "https://api.github.com/users/VadimLaskovich/followers", "following_url": "https://api.github.com/users/VadimLaskovich/following{/other_user}", "gists_url": "https://api.github.com/users/VadimLaskovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/VadimLaskovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VadimLaskovich/subscriptions", "organizations_url": "https://api.github.com/users/VadimLaskovich/orgs", "repos_url": "https://api.github.com/users/VadimLaskovich/repos", "events_url": "https://api.github.com/users/VadimLaskovich/events{/privacy}", "received_events_url": "https://api.github.com/users/VadimLaskovich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-23T06:18:53Z", "updated_at": "2020-07-23T06:20:29Z", "closed_at": "2020-07-23T06:20:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1542", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1542/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1542/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1542/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1542", "id": 663180526, "node_id": "MDU6SXNzdWU2NjMxODA1MjY=", "number": 1542, "title": "Latest version not compatible with Volta", "user": {"login": "dcramer", "id": 23610, "node_id": "MDQ6VXNlcjIzNjEw", "avatar_url": "https://avatars0.githubusercontent.com/u/23610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcramer", "html_url": "https://github.com/dcramer", "followers_url": "https://api.github.com/users/dcramer/followers", "following_url": "https://api.github.com/users/dcramer/following{/other_user}", "gists_url": "https://api.github.com/users/dcramer/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcramer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcramer/subscriptions", "organizations_url": "https://api.github.com/users/dcramer/orgs", "repos_url": "https://api.github.com/users/dcramer/repos", "events_url": "https://api.github.com/users/dcramer/events{/privacy}", "received_events_url": "https://api.github.com/users/dcramer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 352543934, "node_id": "MDU6TGFiZWwzNTI1NDM5MzQ=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/javascript", "name": "javascript", "color": "f0db4f", "default": false, "description": null}, {"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T17:20:11Z", "updated_at": "2020-07-21T17:46:58Z", "closed_at": "2020-07-21T17:46:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Tested with 2.6.0. Downgrading to 2.2.0 works, so guessing something changed with how node hooks work between then and now.\r\n\r\n```\r\n[INFO] Installing environment for git://github.com/getsentry/pre-commit-hooks.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nAn unexpected error has occurred: CalledProcessError: command: ('/Users/dcramer/.volta/bin/npm', 'install', '-g', '.')\r\nreturn code: 126\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    Volta error: Global package installs are not supported.\r\n\r\n    Use `volta install .` to add a package to your toolchain (see `volta help install` for more info).\r\n\r\nCheck the log at /Users/dcramer/.cache/pre-commit/pre-commit.log\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1541", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1541/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1541/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1541/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1541", "id": 663179693, "node_id": "MDU6SXNzdWU2NjMxNzk2OTM=", "number": 1541, "title": "make supported hooks cli-discoverable", "user": {"login": "blaggacao", "id": 7548295, "node_id": "MDQ6VXNlcjc1NDgyOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7548295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blaggacao", "html_url": "https://github.com/blaggacao", "followers_url": "https://api.github.com/users/blaggacao/followers", "following_url": "https://api.github.com/users/blaggacao/following{/other_user}", "gists_url": "https://api.github.com/users/blaggacao/gists{/gist_id}", "starred_url": "https://api.github.com/users/blaggacao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blaggacao/subscriptions", "organizations_url": "https://api.github.com/users/blaggacao/orgs", "repos_url": "https://api.github.com/users/blaggacao/repos", "events_url": "https://api.github.com/users/blaggacao/events{/privacy}", "received_events_url": "https://api.github.com/users/blaggacao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-07-21T17:18:38Z", "updated_at": "2020-07-21T20:33:19Z", "closed_at": "2020-07-21T18:51:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "`pre-commit` does not have a converging design around the two commands:\r\n\r\n- `pre-commit install`\r\n- `pre-commit uninstall` \r\n\r\n(they simply default to 'commit' stage)\r\n\r\n_That means `pre-commit install` does not converge to the declared hooks (either `default_stages` or `stages`). Likewise, `pre-commit unsinstall` does **only** uninstall 'commit' stage, unless the user specifies `-t` flag._\r\n\r\nAdd to the mix that supported hooks are not programatically discoverable through a well known interface.\r\n\r\nThe first circumstance makes it so abstract tooling, that is tasked with construing reproducible and converging environments and designed to work with arbitrary version of `pre-commit` has to deal with the following situation:\r\n\r\n- an additional stage should be installed\r\n- an old stage is not cleared should be uninstalled\r\n\r\nThe second circumstance makes it so those stages are not discoverable by such tooling.\r\n\r\nHence such tooling currently cannot do things like:\r\n\r\n```console\r\nok=\r\nfor hook in $(pre-commit -hooks); do\r\n    if [ $1 == $hook]; then ok=true; fi\r\ndone\r\n[ $ok != true ] && exit 1\r\n```\r\n\r\n\r\n```console\r\nfor hook in $(pre-commit -hooks); do\r\n    pre-commit uninstall -t $hook\r\ndone\r\n```\r\n\r\nIt _can_ do:\r\n```console\r\nhooks=\"pre-commit pre-merge-commit pre-push prepare-commit-msg commit-msg post-checkout post-commit\"\r\nfor hook in $hooks; do\r\n    if [ $1 == $hook]; then ok=true; fi\r\ndone\r\n[ $ok != true ] && exit 1\r\n```\r\n\r\n**But** this latter work around does not \"grow\" along with future `pre-commit` versions once they introduce a new hook.\r\n\r\n\r\nPlease don't force me to parse this: :pray: \r\n```\r\n-t {pre-commit,pre-merge-commit,pre-push,prepare-commit-msg,commit-msg,post-commit,post-checkout}, --hook-type {pre-commit,pre-merge-commit,pre-push,prepare-commit-msg,commit-msg,post-commit,post-checkout}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1540", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1540/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1540/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1540/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1540", "id": 663102651, "node_id": "MDU6SXNzdWU2NjMxMDI2NTE=", "number": 1540, "title": "pre-commit doesn't play nicely with open Excel files", "user": {"login": "jebob", "id": 9222111, "node_id": "MDQ6VXNlcjkyMjIxMTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/9222111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jebob", "html_url": "https://github.com/jebob", "followers_url": "https://api.github.com/users/jebob/followers", "following_url": "https://api.github.com/users/jebob/following{/other_user}", "gists_url": "https://api.github.com/users/jebob/gists{/gist_id}", "starred_url": "https://api.github.com/users/jebob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jebob/subscriptions", "organizations_url": "https://api.github.com/users/jebob/orgs", "repos_url": "https://api.github.com/users/jebob/repos", "events_url": "https://api.github.com/users/jebob/events{/privacy}", "received_events_url": "https://api.github.com/users/jebob/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T15:22:58Z", "updated_at": "2020-07-21T16:31:07Z", "closed_at": "2020-07-21T16:31:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "If an unstaged file (.xlsx or .csv) is open in Microsoft Excel, then when unstaged changes are stashed pre-commit cannot stash the file and crashes. This results in the unstaged changes being lost entirely with no hope of recovery?\r\n\r\n## Steps to replicate\r\n* Create a repo with `A.py`, `B.py`, `C.csv` and a valid `.pre-commit-config.yaml`.\r\n\r\n```yaml\r\nexclude: '^$'\r\nfail_fast: false\r\nrepos:\r\n-   repo: https://github.com/pre-commit/pre-commit-hooks\r\n    rev: v2.6.0\r\n    hooks:\r\n    -   id: trailing-whitespace\r\n```\r\n\r\n* Make changes to A.py and B.py. Open C.csv in Microsoft Excel, make some changes and save\r\n* Stage A.py and commit\r\n\r\n### Expected behaviour\r\npre-commit fails, leaving B.py and C.csv intact\r\n\r\n### Actual behaviour\r\npre-commit fails, B.py loses all unstaged changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1538", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1538/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1538/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1538/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1538", "id": 661191275, "node_id": "MDU6SXNzdWU2NjExOTEyNzU=", "number": 1538, "title": "Question: Is it possible to specify `--all-files` in config yaml", "user": {"login": "stevetarver", "id": 3925582, "node_id": "MDQ6VXNlcjM5MjU1ODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3925582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevetarver", "html_url": "https://github.com/stevetarver", "followers_url": "https://api.github.com/users/stevetarver/followers", "following_url": "https://api.github.com/users/stevetarver/following{/other_user}", "gists_url": "https://api.github.com/users/stevetarver/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevetarver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevetarver/subscriptions", "organizations_url": "https://api.github.com/users/stevetarver/orgs", "repos_url": "https://api.github.com/users/stevetarver/repos", "events_url": "https://api.github.com/users/stevetarver/events{/privacy}", "received_events_url": "https://api.github.com/users/stevetarver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T00:10:54Z", "updated_at": "2020-07-20T03:39:03Z", "closed_at": "2020-07-20T03:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to convert a project to use pre-commit as our standard merge gate in CI.\r\n\r\nI would like to configure pre-commit to always run against all files so each developer sees results that CI will see and avoid edge cases where they have merged in a change that breaks the build. Ideally, they would commit, pre-commit run against all files, and they don't have to manually run with `--all-files`.\r\n\r\nIt looks like the `files` config item is a filter on top of changed files and not seeing a way to install hooks to always run all files.\r\n\r\nIs there a trick to this, or is that not a supported use case?\r\n\r\nreally nice project, btw ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1537", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1537/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1537/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1537/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1537", "id": 658993574, "node_id": "MDU6SXNzdWU2NTg5OTM1NzQ=", "number": 1537, "title": "VS Code error: pre-commit not found.  Did you forget to activate your virtualenv?", "user": {"login": "janosh", "id": 30958850, "node_id": "MDQ6VXNlcjMwOTU4ODUw", "avatar_url": "https://avatars0.githubusercontent.com/u/30958850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janosh", "html_url": "https://github.com/janosh", "followers_url": "https://api.github.com/users/janosh/followers", "following_url": "https://api.github.com/users/janosh/following{/other_user}", "gists_url": "https://api.github.com/users/janosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/janosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janosh/subscriptions", "organizations_url": "https://api.github.com/users/janosh/orgs", "repos_url": "https://api.github.com/users/janosh/repos", "events_url": "https://api.github.com/users/janosh/events{/privacy}", "received_events_url": "https://api.github.com/users/janosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-17T08:06:24Z", "updated_at": "2020-07-18T06:26:50Z", "closed_at": "2020-07-18T06:26:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having the [same problem](https://github.com/pre-commit/pre-commit/issues/359#issuecomment-646562402) as @UrszulaCzerwinska in #359.\r\n\r\nTrying to use the VS Code source control UI to commit in a project with `pre-commit@2.6.0`, I get the error\r\n\r\n> Git: `pre-commit` not found.  Did you forget to activate your virtualenv?\r\n\r\n![screenshot](https://user-images.githubusercontent.com/30958850/87763460-1f1bb780-c815-11ea-865f-666e93efb040.png)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1534", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1534/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1534/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1534/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1534", "id": 656929817, "node_id": "MDU6SXNzdWU2NTY5Mjk4MTc=", "number": 1534, "title": "No git version detection or labels", "user": {"login": "JimCircadian", "id": 731727, "node_id": "MDQ6VXNlcjczMTcyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/731727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JimCircadian", "html_url": "https://github.com/JimCircadian", "followers_url": "https://api.github.com/users/JimCircadian/followers", "following_url": "https://api.github.com/users/JimCircadian/following{/other_user}", "gists_url": "https://api.github.com/users/JimCircadian/gists{/gist_id}", "starred_url": "https://api.github.com/users/JimCircadian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JimCircadian/subscriptions", "organizations_url": "https://api.github.com/users/JimCircadian/orgs", "repos_url": "https://api.github.com/users/JimCircadian/repos", "events_url": "https://api.github.com/users/JimCircadian/events{/privacy}", "received_events_url": "https://api.github.com/users/JimCircadian/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-14T22:12:35Z", "updated_at": "2020-07-14T22:36:39Z", "closed_at": "2020-07-14T22:18:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there\r\n\r\nWith both 2.2.0 and 2.6.0 I had quite an odd error which ended up being down to the standard git version in CentOS v7. I had a look around and I couldn't see any mention of version numbers obvious in documentation and changelog!\r\n\r\nI think it might be suitable to add a check into the command to specify when an invalid version of git is being used. If there's an appetite for this I'd happily contribute.\r\n\r\nLinked issue: https://github.com/dask/dask/issues/6401\r\n\r\nPlease let me know your thoughts!!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1533", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1533/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1533/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1533/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1533", "id": 655327973, "node_id": "MDU6SXNzdWU2NTUzMjc5NzM=", "number": 1533, "title": "autoupdate: don't update to tag without .pre-commit.hooks.yaml", "user": {"login": "Trim21", "id": 13553903, "node_id": "MDQ6VXNlcjEzNTUzOTAz", "avatar_url": "https://avatars1.githubusercontent.com/u/13553903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trim21", "html_url": "https://github.com/Trim21", "followers_url": "https://api.github.com/users/Trim21/followers", "following_url": "https://api.github.com/users/Trim21/following{/other_user}", "gists_url": "https://api.github.com/users/Trim21/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trim21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trim21/subscriptions", "organizations_url": "https://api.github.com/users/Trim21/orgs", "repos_url": "https://api.github.com/users/Trim21/repos", "events_url": "https://api.github.com/users/Trim21/events{/privacy}", "received_events_url": "https://api.github.com/users/Trim21/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-12T04:19:14Z", "updated_at": "2020-07-12T04:42:24Z", "closed_at": "2020-07-12T04:42:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm use a commit hash as ref, and the latest tag of this repo don't have a `.pre-commit.hooks.yaml`.\r\nBut when I run `autoupdate --freeze` pre-commit will throw a error that `.pre-commit-hooks.yaml does not exist`\r\n\r\nIs it ok to just ignore tag without hook file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1532", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1532/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1532/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1532/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1532", "id": 654351964, "node_id": "MDU6SXNzdWU2NTQzNTE5NjQ=", "number": 1532, "title": "Pre-commit runs twice when using prepare-commit-message", "user": {"login": "paulalex", "id": 5220245, "node_id": "MDQ6VXNlcjUyMjAyNDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5220245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulalex", "html_url": "https://github.com/paulalex", "followers_url": "https://api.github.com/users/paulalex/followers", "following_url": "https://api.github.com/users/paulalex/following{/other_user}", "gists_url": "https://api.github.com/users/paulalex/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulalex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulalex/subscriptions", "organizations_url": "https://api.github.com/users/paulalex/orgs", "repos_url": "https://api.github.com/users/paulalex/repos", "events_url": "https://api.github.com/users/paulalex/events{/privacy}", "received_events_url": "https://api.github.com/users/paulalex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-09T21:14:25Z", "updated_at": "2020-07-09T22:13:05Z", "closed_at": "2020-07-09T22:13:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I am new to using pre-commit and it looks great but I have an issue where for some reason it runs twice.\r\n\r\nFollowing the documentation page I have also installed `pre-commit install --hook-type prepare-commit-msg` because I want to enforce pre commit checking of commit messages to ensure they contain the correct format.\r\n\r\nWhen I commit now I get my checks running, but they run twice. I am using the latest version of pre-commit, `pre-commit = \"2.6.0\"`.\r\n\r\nBelow is my yaml file, is this a bug or a misconfiguration on my part?\r\n\r\n```\r\nfail_fast: true\r\nrepos:\r\n- repo: local\r\n  hooks:\r\n    - id: prepare-commit-msg\r\n      name: prepare-commit-msg\r\n      entry: ./commit-msg\r\n      stages: [prepare-commit-msg]\r\n      language: system\r\n      verbose: true\r\n- repo: https://github.com/pre-commit/pre-commit-hooks\r\n  rev: v1.2.3\r\n  hooks:\r\n    - id: check-merge-conflict\r\n    - id: trailing-whitespace\r\n    - id: check-json\r\n    - id: check-yaml\r\n- repo: local\r\n  hooks:\r\n    - id: format-src\r\n      name: format-src\r\n      entry: make format-src\r\n      language: system\r\n      verbose: true\r\n    - id: pylint\r\n      name: pylint\r\n      entry: make lint\r\n      language: system\r\n      verbose: true\r\n    - id: unit-test\r\n      name: unit-test\r\n      entry: make unit-test\r\n      language: system\r\n      verbose: true\r\n```\r\n\r\nI have also tried with the entry in the same repo block as the rest of my hooks and I get the same result.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1529", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1529/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1529/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1529/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1529", "id": 650557887, "node_id": "MDU6SXNzdWU2NTA1NTc4ODc=", "number": 1529, "title": "Unexpected pass with jsonlint", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-03T12:12:38Z", "updated_at": "2020-07-03T16:18:32Z", "closed_at": "2020-07-03T14:11:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I do have an example where trying to add a node based hook gives some unexpected passing, but only in specific case.\r\n\r\nFull example at https://review.rdoproject.org/r/#/c/28371/1/.pre-commit-config.yaml\r\n\r\n# What happens\r\n\r\n`pre-commit run jsonlint`: correctly identifies broken json\r\n`pre-commit run -a`: incorrectly passes jsonlint\r\n\r\n# Example hook config\r\n\r\n```yaml\r\n  - repo: https://github.com/ssbarnea/jsonlint\r\n    rev: master\r\n    hooks:\r\n      - id: jsonlint\r\n        name: jsonlint\r\n        entry: jsonlint\r\n        language: node\r\n        files: '^.*\\.json$'\r\n```\r\n\r\nI may be missing something but I do not see any good reason why running all hooks may give different results then running the hook individually. Even when all hooks run, I can see that the jsonlint hook effectively run and it was not skipped.\r\n\r\n![](https://sbarnea.com/ss/Screen-Shot-2020-07-03-13-12-13.97.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1528", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1528/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1528/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1528/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1528", "id": 648807012, "node_id": "MDU6SXNzdWU2NDg4MDcwMTI=", "number": 1528, "title": "Args parameter problem in.pre-commit-config.yaml", "user": {"login": "xiaohuazi123", "id": 45115671, "node_id": "MDQ6VXNlcjQ1MTE1Njcx", "avatar_url": "https://avatars2.githubusercontent.com/u/45115671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuazi123", "html_url": "https://github.com/xiaohuazi123", "followers_url": "https://api.github.com/users/xiaohuazi123/followers", "following_url": "https://api.github.com/users/xiaohuazi123/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuazi123/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuazi123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuazi123/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuazi123/orgs", "repos_url": "https://api.github.com/users/xiaohuazi123/repos", "events_url": "https://api.github.com/users/xiaohuazi123/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuazi123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-01T09:04:05Z", "updated_at": "2020-07-01T10:02:06Z", "closed_at": "2020-07-01T10:02:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, if my ARGS parameter has multiple options, how should I enclose it\r\nHere is my.pre-commit-config.yaml file configuration\r\n``` yaml\r\n - repo: https://gitlab.com/pycqa/flake8\r\n    rev: master\r\n    hooks:\r\n      - id: flake8\r\n        args: [--max-line-length=120,--show-source,--ignore=(E231,E402),--max-complexity=12,--exclude=(tests/*,venv/*,*/model/*)]\r\n\r\n\r\n```\r\nIs this my correct configuration?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1527", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1527/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1527/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1527/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1527", "id": 646572579, "node_id": "MDU6SXNzdWU2NDY1NzI1Nzk=", "number": 1527, "title": "Installing pre-commit automatically activates virtualenv", "user": {"login": "brandones", "id": 1031876, "node_id": "MDQ6VXNlcjEwMzE4NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1031876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandones", "html_url": "https://github.com/brandones", "followers_url": "https://api.github.com/users/brandones/followers", "following_url": "https://api.github.com/users/brandones/following{/other_user}", "gists_url": "https://api.github.com/users/brandones/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandones/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandones/subscriptions", "organizations_url": "https://api.github.com/users/brandones/orgs", "repos_url": "https://api.github.com/users/brandones/repos", "events_url": "https://api.github.com/users/brandones/events{/privacy}", "received_events_url": "https://api.github.com/users/brandones/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-27T00:31:58Z", "updated_at": "2020-06-27T21:48:35Z", "closed_at": "2020-06-27T21:48:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a very surprising side effect. Very strange behavior. I expect pre-commit to manage my git hooks; nothing more, nothing less.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1526", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1526/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1526/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1526/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1526", "id": 645979717, "node_id": "MDU6SXNzdWU2NDU5Nzk3MTc=", "number": 1526, "title": "Possible to configure a hook so pip installs \"extras\"?", "user": {"login": "max-sixty", "id": 5635139, "node_id": "MDQ6VXNlcjU2MzUxMzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5635139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-sixty", "html_url": "https://github.com/max-sixty", "followers_url": "https://api.github.com/users/max-sixty/followers", "following_url": "https://api.github.com/users/max-sixty/following{/other_user}", "gists_url": "https://api.github.com/users/max-sixty/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-sixty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-sixty/subscriptions", "organizations_url": "https://api.github.com/users/max-sixty/orgs", "repos_url": "https://api.github.com/users/max-sixty/repos", "events_url": "https://api.github.com/users/max-sixty/events{/privacy}", "received_events_url": "https://api.github.com/users/max-sixty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T03:24:47Z", "updated_at": "2020-06-26T03:31:17Z", "closed_at": "2020-06-26T03:28:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When isort is installed as part of a pre-commit hook, it needs to be installed with setuptools' [\"extras\" for `pyproject`](https://github.com/timothycrosley/isort/blob/4e4d92931cc814a6544db102343910eb8002055a/pyproject.toml#L42).\r\n\r\nThis is installed with `pip install isort[pyproject]` rather than the default install of `pip install isort`. When installing from a local repo, the command is `pip install .[pyproject]`\r\n\r\nIs it possible to specify that in a `.pre-commit-hooks.yaml`?\r\n\r\nRef https://github.com/timothycrosley/isort/issues/1225\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1525", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1525/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1525/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1525/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1525", "id": 645890783, "node_id": "MDU6SXNzdWU2NDU4OTA3ODM=", "number": 1525, "title": "Best practice for versioning the cache in CI environments should be documented", "user": {"login": "remeika", "id": 4956098, "node_id": "MDQ6VXNlcjQ5NTYwOTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/4956098?v=4", "gravatar_id": "", "url": "https://api.github.com/users/remeika", "html_url": "https://github.com/remeika", "followers_url": "https://api.github.com/users/remeika/followers", "following_url": "https://api.github.com/users/remeika/following{/other_user}", "gists_url": "https://api.github.com/users/remeika/gists{/gist_id}", "starred_url": "https://api.github.com/users/remeika/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/remeika/subscriptions", "organizations_url": "https://api.github.com/users/remeika/orgs", "repos_url": "https://api.github.com/users/remeika/repos", "events_url": "https://api.github.com/users/remeika/events{/privacy}", "received_events_url": "https://api.github.com/users/remeika/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-25T22:35:18Z", "updated_at": "2020-06-26T01:09:23Z", "closed_at": "2020-06-25T22:40:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our current Circle CI build job caches pre-commit dependencies as follows:\r\n\r\n```yaml\r\n- save_cache:\r\n    name: Cache pre-commit environment\r\n    key: v1-pc-cache-{{ checksum \".pre-commit-config.yaml\" }}\r\n    paths:\r\n      - ~/.cache/pre-commit\r\n```\r\n\r\nThat is, we are using the hash of our configuration file to version the cache. I recently noticed that pre-commit is no longer using the cache; the CI process finds and installs a pre-existing cache, but pre-commit does not recognize it, and reinstalls its environment anyway. I checked the contents of my local cache directory, and there does not appear to be any `package.lock`-style file that complete describes the current state of the cache. The boil-the-ocean approach is to hash the entire cache directory to version the cache, but this seems pretty inefficient.\r\n\r\nSo my question is: is there a stable set of variables and files that completely specifies a valid cache configuration for circle ci?  I would be happy to update the documentation on caching once I know what the best practice is. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1524", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1524/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1524/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1524/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1524", "id": 645638286, "node_id": "MDU6SXNzdWU2NDU2MzgyODY=", "number": 1524, "title": "Unable to use detect_private_key in the latest rev", "user": {"login": "akoul", "id": 5782689, "node_id": "MDQ6VXNlcjU3ODI2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5782689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akoul", "html_url": "https://github.com/akoul", "followers_url": "https://api.github.com/users/akoul/followers", "following_url": "https://api.github.com/users/akoul/following{/other_user}", "gists_url": "https://api.github.com/users/akoul/gists{/gist_id}", "starred_url": "https://api.github.com/users/akoul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akoul/subscriptions", "organizations_url": "https://api.github.com/users/akoul/orgs", "repos_url": "https://api.github.com/users/akoul/repos", "events_url": "https://api.github.com/users/akoul/events{/privacy}", "received_events_url": "https://api.github.com/users/akoul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-25T15:05:03Z", "updated_at": "2020-06-25T15:29:01Z", "closed_at": "2020-06-25T15:09:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the latest rev, however when I do a pre-commit run --all-files, I get the following error:\r\n```\r\n$ pre-commit run --all-files\r\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\r\n[ERROR] `detect_private_key` is not present in repository https://github.com/pre-commit/pre-commit-hooks.  Typo? Perhaps it is introduced in a newer version?  Often `pre-commit autoupdate` fixes this.\r\n```\r\n\r\nAre all pre-commit hooks not imported in the latest rev, or is there a specific rev for _detect_private_key_?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1523", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1523/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1523/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1523/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1523", "id": 643446774, "node_id": "MDU6SXNzdWU2NDM0NDY3NzQ=", "number": 1523, "title": "ModuleNotFoundError: No module named 'importlib_metadata'", "user": {"login": "sassan72", "id": 22191884, "node_id": "MDQ6VXNlcjIyMTkxODg0", "avatar_url": "https://avatars3.githubusercontent.com/u/22191884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sassan72", "html_url": "https://github.com/sassan72", "followers_url": "https://api.github.com/users/sassan72/followers", "following_url": "https://api.github.com/users/sassan72/following{/other_user}", "gists_url": "https://api.github.com/users/sassan72/gists{/gist_id}", "starred_url": "https://api.github.com/users/sassan72/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sassan72/subscriptions", "organizations_url": "https://api.github.com/users/sassan72/orgs", "repos_url": "https://api.github.com/users/sassan72/repos", "events_url": "https://api.github.com/users/sassan72/events{/privacy}", "received_events_url": "https://api.github.com/users/sassan72/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-23T00:46:05Z", "updated_at": "2020-06-23T02:30:56Z", "closed_at": "2020-06-23T00:49:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n/opt/anaconda3/lib/python3.7/site-packages/jsonschema/__init__.py in <module>\r\n     31     from importlib import metadata\r\n     32 except ImportError: # for Python<3.8\r\n---> 33     import importlib_metadata as metadata\r\n     34 __version__ = metadata.version(\"jsonschema\")\r\n\r\nModuleNotFoundError: No module named 'importlib_metadata'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1522", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1522/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1522/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1522/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1522", "id": 642366235, "node_id": "MDU6SXNzdWU2NDIzNjYyMzU=", "number": 1522, "title": "Activate virtualenv in hook template", "user": {"login": "cjolowicz", "id": 653941, "node_id": "MDQ6VXNlcjY1Mzk0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/653941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjolowicz", "html_url": "https://github.com/cjolowicz", "followers_url": "https://api.github.com/users/cjolowicz/followers", "following_url": "https://api.github.com/users/cjolowicz/following{/other_user}", "gists_url": "https://api.github.com/users/cjolowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjolowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjolowicz/subscriptions", "organizations_url": "https://api.github.com/users/cjolowicz/orgs", "repos_url": "https://api.github.com/users/cjolowicz/repos", "events_url": "https://api.github.com/users/cjolowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/cjolowicz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-20T12:19:54Z", "updated_at": "2020-06-29T14:49:27Z", "closed_at": "2020-06-20T15:32:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible for pre-commit's hook template to modify `PATH` before invoking pre-commit, when pre-commit is running in a virtualenv? This would allow pre-commit to run Python hooks installed into the virtualenv.\r\n\r\nCurrently, if pre-commit is installed in a virtualenv, git hooks invoke pre-commit without activating the virtualenv. More specifically, while the Python interpreter running pre-commit uses the virtualenv, the `PATH` and `VIRTUAL_ENV` environment variables are not modified to reflect the virtualenv. It is thus the responsibility of the user to activate the virtualenv in the shell invoking git.\r\n\r\nAs explained below (see *Rationale*), I believe allowing pre-commit to run hooks in the same virtualenv can offer significant advantages to some projects. This could be achieved by inserting three lines into the hook template (see *Implementation Notes*).\r\n\r\nIf you are interested in this feature, I would be happy to provide a PR with tests and documentation. Do you think this is a sensible idea? If so, should this be done always, or hidden behind a feature flag such as an option to the `pre-commit install` command? I would love to hear your thoughts!\r\n\r\nThanks for your work creating and maintaining so many awesome tools!\r\n\r\n### Rationale\r\n\r\nFor certain Python projects, it is beneficial to use dedicated tools to manage the environments and dependencies of Python-language pre-commit hooks, rather than pre-commit itself. Here are some of the advantages this can offer:\r\n\r\n- Project dependencies can be declared in one place, and managed by one tool.\r\n- Automated dependency upgrades (e.g. Dependabot) for hooks become possible.\r\n- Additional dependencies (e.g. Flake8 extensions) are visible to the dependency management tool. (`pre-commit autoupdate` is centered around the concept of Git repositories; it is -- and should be -- agnostic of language-level concepts such as PyPI versions, does not perform dependency resolution, and does not inspect additional dependencies.)\r\n- Subdependencies (dependencies of dependencies) can be locked automatically, making checks more repeatable and deterministic.\r\n\r\npre-commit already supports this use case via repository-local system hooks. However, this requires that the virtualenv be activated in the calling shell. In some situations, explicitly activating the environment is not practical. Consider these examples:\r\n\r\n#### Example 1: pre-commit and Nox\r\n\r\nWhen running pre-commit in a [Nox] session, Python hooks can be installed into the environment associated with the Nox session, alongside pre-commit itself. This works fine when pre-commit is invoked by Nox: Nox activates the virtual environment for the pre-commit session, so the hooks are located on `PATH`. However, when pre-commit is invoked from git hooks, the virtualenv is not active, so pre-commit fails to locate the hooks.\r\n\r\n[Nox]: https://nox.thea.codes\r\n\r\n#### Example 2: pre-commit and Poetry\r\n\r\nAnother example is the case of adding pre-commit and the Python hooks as dependencies to a [Poetry]-managed project. When invoking pre-commit with Poetry (`poetry run pre-commit`), the environment is activated by Poetry. But when pre-commit is invoked from git hooks, the hooks are no longer on `PATH`.\r\n\r\n[Poetry]: https://python-poetry.org\r\n\r\n#### Example 3: pre-commit, Nox, and Poetry\r\n\r\nFor a more concrete example of an attempt to integrate pre-commit with both Nox and Poetry, see [this tree], specifically the [noxfile.py] and [.pre-commit-config.yaml] files in the `{{cookiecutter.project_name}}` directory. The associated PR is https://github.com/cjolowicz/cookiecutter-hypermodern-python/pull/397.\r\n\r\n[this tree]: https://github.com/cjolowicz/cookiecutter-hypermodern-python/tree/6da3199fcd10327e1542de4a7098c574db1b3e7d\r\n[noxfile.py]: https://github.com/cjolowicz/cookiecutter-hypermodern-python/blob/pre-commit-poetry-nox/%7B%7Bcookiecutter.project_name%7D%7D/noxfile.py\r\n[.pre-commit-config.yaml]: https://github.com/cjolowicz/cookiecutter-hypermodern-python/blob/pre-commit-poetry-nox/%7B%7Bcookiecutter.project_name%7D%7D/.pre-commit-config.yaml\r\n\r\n### Implementation Notes\r\n\r\nVirtualenv activation could be achieved by inserting three lines into the hook template:\r\n\r\n```diff\r\ndiff --git a/pre_commit/resources/hook-tmpl b/pre_commit/resources/hook-tmpl\r\nindex 299144e..19fc7ea 100755\r\n--- a/pre_commit/resources/hook-tmpl\r\n+++ b/pre_commit/resources/hook-tmpl\r\n@@ -26,6 +26,9 @@ ARGS.extend(sys.argv[1:])\r\n\r\n DNE = '`pre-commit` not found.  Did you forget to activate your virtualenv?'\r\n if os.access(INSTALL_PYTHON, os.X_OK):\r\n+    bindir = os.path.dirname(INSTALL_PYTHON)\r\n+    if os.path.isfile(os.path.join(os.path.dirname(bindir), 'pyvenv.cfg')):\r\n+        os.environ['PATH'] = os.pathsep.join((bindir, os.environ.get('PATH', '')))\r\n     CMD = [INSTALL_PYTHON, '-mpre_commit']\r\n elif which('pre-commit'):\r\n     CMD = ['pre-commit']\r\n```\r\n\r\nThe hook template checks if the Python interpreter used when installing pre-commit (`INSTALL_PYTHON`) is located in a virtualenv, by checking for the file `pyvenv.cfg` in the directory above the executable. If this is the case, the directory containing the Python interpreter is prepended to `PATH`. In a typical virtualenv, this is `bin` on UNIX-like systems, and `Scripts` on Windows. To keep the script short, the process environment is modified in place, rather than copied and passed to `os.execvpe` or `subprocess.Popen`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1520", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1520/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1520/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1520/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1520", "id": 642073163, "node_id": "MDU6SXNzdWU2NDIwNzMxNjM=", "number": 1520, "title": "special handling of source-container formats, esp. ipynb", "user": {"login": "graingert", "id": 413772, "node_id": "MDQ6VXNlcjQxMzc3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/413772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graingert", "html_url": "https://github.com/graingert", "followers_url": "https://api.github.com/users/graingert/followers", "following_url": "https://api.github.com/users/graingert/following{/other_user}", "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}", "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graingert/subscriptions", "organizations_url": "https://api.github.com/users/graingert/orgs", "repos_url": "https://api.github.com/users/graingert/repos", "events_url": "https://api.github.com/users/graingert/events{/privacy}", "received_events_url": "https://api.github.com/users/graingert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T15:57:56Z", "updated_at": "2020-06-19T16:44:44Z", "closed_at": "2020-06-19T16:44:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a project with several .ipynb files and I'd like to be able to run things like add-trailing-comma and pyupgrade on the code inside the \"code\" cells. This works great with black_nbconvert, but black without add-trailing-comma is painful\r\n\r\nit feels like something in the scope of pre-commit, eg files with files in them, eg ipynb files, rst files with embedded code, or even .zip and .tgz files\r\nto open the container format into multiple files run pre-commit hooks on them and then re-construct them into the original file", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1519", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1519/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1519/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1519/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1519", "id": 640957277, "node_id": "MDU6SXNzdWU2NDA5NTcyNzc=", "number": 1519, "title": "Option to run pre-commit against all the files always", "user": {"login": "RaviTezu", "id": 3827937, "node_id": "MDQ6VXNlcjM4Mjc5Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3827937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RaviTezu", "html_url": "https://github.com/RaviTezu", "followers_url": "https://api.github.com/users/RaviTezu/followers", "following_url": "https://api.github.com/users/RaviTezu/following{/other_user}", "gists_url": "https://api.github.com/users/RaviTezu/gists{/gist_id}", "starred_url": "https://api.github.com/users/RaviTezu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RaviTezu/subscriptions", "organizations_url": "https://api.github.com/users/RaviTezu/orgs", "repos_url": "https://api.github.com/users/RaviTezu/repos", "events_url": "https://api.github.com/users/RaviTezu/events{/privacy}", "received_events_url": "https://api.github.com/users/RaviTezu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-18T06:54:29Z", "updated_at": "2020-06-19T05:24:58Z", "closed_at": "2020-06-18T16:20:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nIt is possible to run pre-commit against all the file during a `git commit` instead of just the modified files? I use `pylint` as one of the tools to run during a `git commit` and when you run `pylint` against a single file, it may pass as it doesn't have the context of other files, but when you run it against all the files, it may point out errors. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1517", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1517/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1517/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1517/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1517", "id": 640842398, "node_id": "MDU6SXNzdWU2NDA4NDIzOTg=", "number": 1517, "title": "Understanding how to run commit-msg hook", "user": {"login": "cristian05", "id": 20000951, "node_id": "MDQ6VXNlcjIwMDAwOTUx", "avatar_url": "https://avatars3.githubusercontent.com/u/20000951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cristian05", "html_url": "https://github.com/cristian05", "followers_url": "https://api.github.com/users/cristian05/followers", "following_url": "https://api.github.com/users/cristian05/following{/other_user}", "gists_url": "https://api.github.com/users/cristian05/gists{/gist_id}", "starred_url": "https://api.github.com/users/cristian05/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cristian05/subscriptions", "organizations_url": "https://api.github.com/users/cristian05/orgs", "repos_url": "https://api.github.com/users/cristian05/repos", "events_url": "https://api.github.com/users/cristian05/events{/privacy}", "received_events_url": "https://api.github.com/users/cristian05/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-18T00:17:20Z", "updated_at": "2020-06-30T20:02:35Z", "closed_at": "2020-06-19T21:00:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to run a **node script to validate my commit message**, this script has a npm dependecy that is [chalk](https://github.com/chalk/chalk). The script is on my local machine and works well with [husky](https://github.com/typicode/husky) and `package.json`, but I can't get it to work with `pre-commit`. \r\n\r\n### I run:\r\n`pre-commit install --hook-type commit-msg`\r\n`git add -A`\r\n`git commit -m \"my wrong message\"`\r\n\r\nThis passed but my commit is not valid, because im using [Angular commit message convention](https://gist.github.com/stephenparish/9941e89d80e2bc58a153#format-of-the-commit-message). \r\n\r\n### The output\r\n```\r\nInstalling environment for local.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nValidate Commit Message..................................................Passed\r\n````\r\n\r\nIm doing something wrong in my configuration?\r\n\r\n### .pre-commit-config.yaml\r\n```\r\nrepos:\r\n  - repo: https://github.com/pre-commit/pre-commit-hooks\r\n    rev: v2.3.0\r\n    hooks:\r\n      - id: check-yaml\r\n      - id: end-of-file-fixer\r\n      - id: trailing-whitespace\r\n  - repo: local\r\n    hooks:\r\n      - id: validate-commit-message\r\n        name: Validate Commit Message\r\n        language: node\r\n        language_version: 14.4.0\r\n        entry: node scripts/git/commit-message.js\r\n        additional_dependencies: ['chalk']\r\n        stages:\r\n          - commit-msg\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1516", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1516/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1516/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1516/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1516", "id": 640622077, "node_id": "MDU6SXNzdWU2NDA2MjIwNzc=", "number": 1516, "title": "Executable `prettier` not found", "user": {"login": "rkm", "id": 5160559, "node_id": "MDQ6VXNlcjUxNjA1NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/5160559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rkm", "html_url": "https://github.com/rkm", "followers_url": "https://api.github.com/users/rkm/followers", "following_url": "https://api.github.com/users/rkm/following{/other_user}", "gists_url": "https://api.github.com/users/rkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rkm/subscriptions", "organizations_url": "https://api.github.com/users/rkm/orgs", "repos_url": "https://api.github.com/users/rkm/repos", "events_url": "https://api.github.com/users/rkm/events{/privacy}", "received_events_url": "https://api.github.com/users/rkm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713405, "node_id": "MDU6TGFiZWw4NTcxMzQwNQ==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 352543934, "node_id": "MDU6TGFiZWwzNTI1NDM5MzQ=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/javascript", "name": "javascript", "color": "f0db4f", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-17T17:34:27Z", "updated_at": "2020-06-19T21:15:33Z", "closed_at": "2020-06-19T21:15:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello hello!\r\n\r\nAs discussed on discord, I'm having an issue running prettier via pre-commit:\r\n\r\n```bash\r\n$ pre-commit --version\r\npre-commit 2.5.1\r\n\r\n$ cat .pre-commit-config.yaml\r\nrepos:\r\n  - repo: https://github.com/prettier/prettier\r\n    rev: 2.0.5\r\n    hooks:\r\n      - id: prettier\r\n\r\n$ pre-commit clean\r\nCleaned /home/rkm/.cache/pre-commit.\r\n\r\n> pre-commit run prettier --files README.md\r\n[INFO] Initializing environment for https://github.com/prettier/prettier.\r\n[INFO] Installing environment for https://github.com/prettier/prettier.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nprettier.................................................................Failed\r\n- hook id: prettier\r\n- exit code: 1\r\n\r\nExecutable `prettier` not found\r\n```\r\n\r\nit seems like prettier is installed correctly, but the symlink to it is not created:\r\n\r\n```bash\r\n$ find ~/.cache/pre-commit/ -name prettier.js\r\n/home/rkm/.cache/pre-commit/repoes79dg4v/bin/prettier.js\r\n\r\n$ ls -l $(find ~/.cache/pre-commit/ -name node_env-default)/bin\r\ntotal 70376\r\n-rwxr-xr-x. 1 rkm rkm     3702 Jun 17 17:30 activate\r\n-rwxr-xr-x. 1 rkm rkm     3964 Jun 17 17:30 activate.fish\r\n-rwxr-xr-x. 1 rkm rkm 72052312 Jun  2 14:33 node\r\nlrwxrwxrwx. 1 rkm rkm        4 Jun 17 17:30 nodejs -> node\r\nlrwxrwxrwx. 1 rkm rkm       38 Jun 17 17:30 npm -> ../lib/node_modules/npm/bin/npm-cli.js\r\nlrwxrwxrwx. 1 rkm rkm       38 Jun 17 17:30 npx -> ../lib/node_modules/npm/bin/npx-cli.js\r\n-rwxr-xr-x. 1 rkm rkm      355 Jun 17 17:30 shim \r\n```\r\n\r\n(doing the same in a docker container results in a `prettier` symlink being created there).\r\n\r\nI suspect my VM may be borked somehow, but not sure how to debug this further. Any thoughts? Thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1515", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1515/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1515/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1515/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1515", "id": 640577345, "node_id": "MDU6SXNzdWU2NDA1NzczNDU=", "number": 1515, "title": "OSError: [WinError 193] %1 is not a valid Win32 application", "user": {"login": "cristian05", "id": 20000951, "node_id": "MDQ6VXNlcjIwMDAwOTUx", "avatar_url": "https://avatars3.githubusercontent.com/u/20000951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cristian05", "html_url": "https://github.com/cristian05", "followers_url": "https://api.github.com/users/cristian05/followers", "following_url": "https://api.github.com/users/cristian05/following{/other_user}", "gists_url": "https://api.github.com/users/cristian05/gists{/gist_id}", "starred_url": "https://api.github.com/users/cristian05/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cristian05/subscriptions", "organizations_url": "https://api.github.com/users/cristian05/orgs", "repos_url": "https://api.github.com/users/cristian05/repos", "events_url": "https://api.github.com/users/cristian05/events{/privacy}", "received_events_url": "https://api.github.com/users/cristian05/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-17T16:25:41Z", "updated_at": "2020-06-17T22:07:05Z", "closed_at": "2020-06-17T20:40:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Message when I executed git commit -m \"my message\"\r\n\r\n`An unexpected error has occurred: OSError: [WinError 193] %1 is not a valid Win32 application\r\nCheck the log at C:\\Users\\myuser\\.cache\\pre-commit\\pre-commit.log`\r\n\r\n## pre-commit.log\r\n\r\n### version information\r\n\r\n```\r\npre-commit version: 2.5.1\r\nsys.version:\r\n    3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:20:19) [MSC v.1925 32 bit (Intel)]\r\nsys.executable: c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\python.exe\r\nos.name: nt\r\nsys.platform: win32\r\n```\r\n\r\n### error information\r\n\r\n```\r\nAn unexpected error has occurred: OSError: [WinError 193] %1 is not a valid Win32 application\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\pre_commit\\error_handler.py\", line 56, in error_handler\r\n    yield\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\pre_commit\\main.py\", line 365, in main\r\n    return hook_impl(\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\pre_commit\\commands\\hook_impl.py\", line 211, in hook_impl\r\n    retv, stdin = _run_legacy(hook_type, hook_dir, args)\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\pre_commit\\commands\\hook_impl.py\", line 43, in _run_legacy\r\n    return subprocess.run(cmd, input=stdin).returncode, stdin\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\subprocess.py\", line 489, in run\r\n    with Popen(*popenargs, **kwargs) as process:\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\subprocess.py\", line 854, in __init__\r\n    self._execute_child(args, executable, preexec_fn, close_fds,\r\n  File \"c:\\users\\myuser\\appdata\\local\\programs\\python\\python38-32\\lib\\subprocess.py\", line 1307, in _execute_child\r\n    hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\r\nOSError: [WinError 193] %1 is not a valid Win32 application\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1514", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1514/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1514/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1514/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1514", "id": 640392853, "node_id": "MDU6SXNzdWU2NDAzOTI4NTM=", "number": 1514, "title": "\"Executable ... is not executable\" error", "user": {"login": "bdarcus", "id": 1134, "node_id": "MDQ6VXNlcjExMzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdarcus", "html_url": "https://github.com/bdarcus", "followers_url": "https://api.github.com/users/bdarcus/followers", "following_url": "https://api.github.com/users/bdarcus/following{/other_user}", "gists_url": "https://api.github.com/users/bdarcus/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdarcus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdarcus/subscriptions", "organizations_url": "https://api.github.com/users/bdarcus/orgs", "repos_url": "https://api.github.com/users/bdarcus/repos", "events_url": "https://api.github.com/users/bdarcus/events{/privacy}", "received_events_url": "https://api.github.com/users/bdarcus/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-17T12:13:07Z", "updated_at": "2020-06-17T17:39:31Z", "closed_at": "2020-06-17T17:39:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new to pre-commit, so apologies if I'm missing something obvious.\r\n\r\nI have [this config file](https://github.com/citation-style-language/schema/blob/master/.pre-commit-config.yaml), which points to [this script](https://github.com/citation-style-language/schema/blob/master/hooks/rnc-format-validate.py).\r\n\r\nPer the linked issue, I did `chmod +x` on the script, but when I try to commit, I get a `Executable 'hooks/rnc-format-validate.py is not executable` error.\r\n\r\nI had previously tested this on some local test repos without ever seeing this error.\r\n\r\ncitation-style-language/schema#256", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1513", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1513/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1513/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1513/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1513", "id": 640376990, "node_id": "MDU6SXNzdWU2NDAzNzY5OTA=", "number": 1513, "title": "Display standard output produced by called hooks", "user": {"login": "dpinol", "id": 1954955, "node_id": "MDQ6VXNlcjE5NTQ5NTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1954955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpinol", "html_url": "https://github.com/dpinol", "followers_url": "https://api.github.com/users/dpinol/followers", "following_url": "https://api.github.com/users/dpinol/following{/other_user}", "gists_url": "https://api.github.com/users/dpinol/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpinol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpinol/subscriptions", "organizations_url": "https://api.github.com/users/dpinol/orgs", "repos_url": "https://api.github.com/users/dpinol/repos", "events_url": "https://api.github.com/users/dpinol/events{/privacy}", "received_events_url": "https://api.github.com/users/dpinol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T11:45:41Z", "updated_at": "2020-06-17T15:13:21Z", "closed_at": "2020-06-17T15:13:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a hook fails, it's useful to see the standard output of the called command, not only the standard error.\r\nMaybe we could have an extra verbose level -vv, or add an dedicated flag --show-stdoutput\r\n\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1512", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1512/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1512/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1512/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1512", "id": 640238382, "node_id": "MDU6SXNzdWU2NDAyMzgzODI=", "number": 1512, "title": "How to create my own pre-commit repo", "user": {"login": "Naughty-Monkey", "id": 13866870, "node_id": "MDQ6VXNlcjEzODY2ODcw", "avatar_url": "https://avatars0.githubusercontent.com/u/13866870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Naughty-Monkey", "html_url": "https://github.com/Naughty-Monkey", "followers_url": "https://api.github.com/users/Naughty-Monkey/followers", "following_url": "https://api.github.com/users/Naughty-Monkey/following{/other_user}", "gists_url": "https://api.github.com/users/Naughty-Monkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/Naughty-Monkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Naughty-Monkey/subscriptions", "organizations_url": "https://api.github.com/users/Naughty-Monkey/orgs", "repos_url": "https://api.github.com/users/Naughty-Monkey/repos", "events_url": "https://api.github.com/users/Naughty-Monkey/events{/privacy}", "received_events_url": "https://api.github.com/users/Naughty-Monkey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-17T08:15:16Z", "updated_at": "2020-06-17T15:07:32Z", "closed_at": "2020-06-17T15:07:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just want to write my own repo which contains the tools I used for my project. e.g. `yapf`,`clang-format`. Thus, instead of writing multiple hooks, I can write the config yaml file as follows:\r\n```yaml\r\nrepo: git@github.com:xx/pre-commit-hooks\r\n    rev: master\r\n    hooks:\r\n    -   id: clang-format\r\n    -   id: yapf\r\n``` ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1510", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1510/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1510/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1510/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1510", "id": 639823163, "node_id": "MDU6SXNzdWU2Mzk4MjMxNjM=", "number": 1510, "title": "Documentation: add details on how to integrate your own hooks from a private git repo (e.g. not on PyPi)", "user": {"login": "weeheavy", "id": 10529620, "node_id": "MDQ6VXNlcjEwNTI5NjIw", "avatar_url": "https://avatars3.githubusercontent.com/u/10529620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weeheavy", "html_url": "https://github.com/weeheavy", "followers_url": "https://api.github.com/users/weeheavy/followers", "following_url": "https://api.github.com/users/weeheavy/following{/other_user}", "gists_url": "https://api.github.com/users/weeheavy/gists{/gist_id}", "starred_url": "https://api.github.com/users/weeheavy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weeheavy/subscriptions", "organizations_url": "https://api.github.com/users/weeheavy/orgs", "repos_url": "https://api.github.com/users/weeheavy/repos", "events_url": "https://api.github.com/users/weeheavy/events{/privacy}", "received_events_url": "https://api.github.com/users/weeheavy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-15T14:19:38Z", "updated_at": "2020-06-16T16:48:48Z", "closed_at": "2020-06-16T16:48:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got a hard time to figure out on how to configure everything correctly to run a custom hook from a local git repository (not open to the Internet, so e.g. not on PyPi).\r\n\r\nCurrently, I tried this without success:\r\n\r\n### git repo to be guarded by pre-commit\r\n`.pre-commit-config.yaml`\r\n```\r\n- repo: https://git.example.com/scm/company-lint.git\r\n  rev: 0.1.6\r\n  hooks:\r\n    - id: company-lint-readme\r\n      files: README.md\r\n```\r\n\r\nWhen I run `pre-commit try-repo ../git/ansible-company-lint company-lint-readme --verbose --all-files` to test my custom hook, it fails with this error message:\r\n\r\n```\r\n[WARNING] Creating temporary repo with uncommitted changes...\r\n===============================================================================\r\nUsing config:\r\n===============================================================================\r\nrepos:\r\n-   repo: /var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/shadow-repo\r\n    rev: 38dbd6c7e4d6946fdf53d3e09e49e27a5183dda1\r\n    hooks:\r\n    -   id: company-lint-readme\r\n===============================================================================\r\n[INFO] Initializing environment for /var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/shadow-repo.\r\n[INFO] Initializing environment for /var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/shadow-repo:git+https://git.company.com/scm/ansible-company-lint.git@0.1.6#egg=ansible_company_lint.\r\n[INFO] Installing environment for /var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/shadow-repo.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nDetect platform READMEs needing attention...........................Failed\r\n- hook id: company-lint-readme\r\n- duration: 0.28s\r\n- exit code: 1\r\n\r\nTraceback (most recent call last):\r\n  File \"/var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/repodvllmg6v/py_env-python3/bin/company-lint-readme\", line 11, in <module>\r\n    load_entry_point('ansible-company-lint==0.1.6', 'console_scripts', 'company-lint-readme')()\r\n  File \"/private/var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/repodvllmg6v/py_env-python3/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 490, in load_entry_point\r\n    return get_distribution(dist).load_entry_point(group, name)\r\n  File \"/private/var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/repodvllmg6v/py_env-python3/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 2862, in load_entry_point\r\n    return ep.load()\r\n  File \"/private/var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/repodvllmg6v/py_env-python3/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 2462, in load\r\n    return self.resolve()\r\n  File \"/private/var/folders/m0/qmf1d86905g0ktdvkkmg9zqrh2yjr5/T/tmp1yt9q2me/repodvllmg6v/py_env-python3/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 2468, in resolve\r\n    module = __import__(self.module_name, fromlist=['__name__'], level=0)\r\nModuleNotFoundError: No module named 'ansible_company_lint'\r\n```\r\n\r\nI'm running this from a virtualenv, that has this package installed via `pip install git+https://git.company.com/scm/ansible-company-lint.git@0.1.6#egg=ansible_company_lint`\r\n\r\n```\r\npip freeze | grep lint                                                                                                                                                                                                       \r\nansible-company-lint==0.1.6\r\n```\r\n\r\n### custom pre-commit hook repository\r\nLayout:\r\n```\r\ntree -a -L 2 -I '.git'\r\n.\r\n\u251c\u2500\u2500 .pre-commit-hooks.yaml\r\n\u251c\u2500\u2500 ansible_company_lint\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 company_lint_readme.py\r\n\u251c\u2500\u2500 setup.cfg\r\n\u2514\u2500\u2500 setup.py\r\n```\r\n\r\n`.pre-commit-hooks.yml`\r\n```\r\ncat .pre-commit-hooks.yaml\r\n-   id: company-lint-readme\r\n    name: Detect platform READMEs needing attention\r\n    description: Detects if the README contains template words which need to be manually updated\r\n    entry: company-lint-readme\r\n    language: python\r\n    types: [text]\r\n    additional_dependencies: ['git+https://git.company.com/scm/ansible-company-lint.git@0.1.6#egg=ansible_company_lint']\r\n```\r\n`setup.cfg`\r\n```\r\n[metadata]\r\nversion = 0.1.6\r\nname = ansible_company_lint\r\ndescription = Customized pre-commit.com repo to apply/enforce some standards.\r\nlong_description = file: README.md\r\nlong_description_content_type = text/markdown\r\nurl = https://git.company.com/projects/repos/ansible-company-lint/browse\r\nauthor = foo bar\r\nauthor_email = foo.bar@company.com\r\nlicense = MIT\r\nlicense_file = LICENSE\r\nclassifiers =\r\n    Development Status :: 2 - Pre-Alpha\r\n    License :: OSI Approved :: MIT License\r\n    Operating System :: POSIX :: Linux\r\n    Programming Language :: Python :: 3\r\n    Programming Language :: Python :: 3 :: Only\r\n    Programming Language :: Python :: 3.6\r\n    Programming Language :: Python :: 3.7\r\n    Programming Language :: Python :: 3.8\r\n    Programming Language :: Python :: Implementation :: PyPy\r\n\r\n[options]\r\nuse_scm_version = True\r\npackages = find:\r\ninstall_requires =\r\n    ruamel.yaml>=0.15\r\n    toml\r\npython_requires = >=3.6.1\r\n\r\n# These are required during `setup.py` run:\r\n#setup_requires =\r\n#  setuptools_scm>=1.15.0\r\n#  setuptools_scm_git_archive>=1.0\r\n\r\n[options.entry_points]\r\nconsole_scripts =\r\n    company-lint-readme = ansible_company_lint.company_lint_readme:main\r\n\r\n[options.packages.find]\r\nexclude =\r\n    tests*\r\n    testing*\r\n\r\n[bdist_wheel]\r\nuniversal = True\r\n\r\n[coverage:run]\r\nplugins = covdefaults\r\n\r\n[mypy]\r\ncheck_untyped_defs = true\r\ndisallow_any_generics = true\r\ndisallow_incomplete_defs = true\r\ndisallow_untyped_defs = true\r\nno_implicit_optional = true\r\n\r\n[mypy-testing.*]\r\ndisallow_untyped_defs = false\r\n\r\n[mypy-tests.*]\r\ndisallow_untyped_defs = false\r\n```\r\n\r\n`setup.py`\r\n```\r\nfrom setuptools import setup\r\nsetup()\r\n```\r\n\r\nThank you for any hints!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1508", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1508/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1508/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1508/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1508", "id": 638033141, "node_id": "MDU6SXNzdWU2MzgwMzMxNDE=", "number": 1508, "title": "Debug how pre-commit initializes its environment", "user": {"login": "atzannes", "id": 1581907, "node_id": "MDQ6VXNlcjE1ODE5MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1581907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atzannes", "html_url": "https://github.com/atzannes", "followers_url": "https://api.github.com/users/atzannes/followers", "following_url": "https://api.github.com/users/atzannes/following{/other_user}", "gists_url": "https://api.github.com/users/atzannes/gists{/gist_id}", "starred_url": "https://api.github.com/users/atzannes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atzannes/subscriptions", "organizations_url": "https://api.github.com/users/atzannes/orgs", "repos_url": "https://api.github.com/users/atzannes/repos", "events_url": "https://api.github.com/users/atzannes/events{/privacy}", "received_events_url": "https://api.github.com/users/atzannes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-12T22:29:59Z", "updated_at": "2020-06-24T14:59:53Z", "closed_at": "2020-06-16T16:49:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm writing my first hook and I'm stumped because the hook fails because one of its python dependencies is not installed in the environment. My first thought was I have messed up and forgot to include that dependency somewhere such as in my `setup.py`. However, when I do `pip install -e .` in a fresh virtualenv and then run `pre-commit run` (with `repo:local` in my `.pre-commit-config.yaml`)  my hook succeeds. But when I run `pre-commit try-repo . <hook-name>` the hook fails with a `ModuleNotFound` error. The same happens if I replace `repo:loca`l with the remote and give it a `rev`.\r\n\r\nI tried to increase the verbosity to see how `pre-commit` installs the hook environment but to no avail and I'm stumped. Is there a way to see what happens during that step (the one we are warned that \"This may take a few minutes...\").\r\n\r\nLove pre-commit by the way, thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1505", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1505/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1505/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1505/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1505", "id": 637530206, "node_id": "MDU6SXNzdWU2Mzc1MzAyMDY=", "number": 1505, "title": "Using git directly instead of a temporary file when stashing changes", "user": {"login": "Pierre-Sassoulas", "id": 5493666, "node_id": "MDQ6VXNlcjU0OTM2NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5493666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pierre-Sassoulas", "html_url": "https://github.com/Pierre-Sassoulas", "followers_url": "https://api.github.com/users/Pierre-Sassoulas/followers", "following_url": "https://api.github.com/users/Pierre-Sassoulas/following{/other_user}", "gists_url": "https://api.github.com/users/Pierre-Sassoulas/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pierre-Sassoulas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pierre-Sassoulas/subscriptions", "organizations_url": "https://api.github.com/users/Pierre-Sassoulas/orgs", "repos_url": "https://api.github.com/users/Pierre-Sassoulas/repos", "events_url": "https://api.github.com/users/Pierre-Sassoulas/events{/privacy}", "received_events_url": "https://api.github.com/users/Pierre-Sassoulas/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-12T06:56:30Z", "updated_at": "2020-06-12T07:04:40Z", "closed_at": "2020-06-12T06:57:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First, thank you for this great hook framework, I'm using it all the time.\r\n\r\nAfter checking the code for removing the changes that are not stagged [here](https://github.com/pre-commit/pre-commit/blob/master/pre_commit/staged_files_only.py#L42), it seems that pre-commit use a temporary file that will be deleted when we leave the context of pre-commit, because it's created with a `tempdir_factory.get()`\r\n```python\r\n        with open(patch_filename, 'wb') as patch_file:\r\n            patch_file.write(diff_stdout_binary)\r\n```\r\nThis means that if you halt pre-commit during its execution you can lose your unstaged changes because the temporary file disappears. I think it would be safer to stash inside git, so the changes can be recovered using git if pre-commit is halted with ctrl+C or for another problem.\r\n\r\nThis is not an hypothetical situation, by the way, we lost 3 hours of changes that way :)\r\n\r\nLet me know if something is problematic with this approach. I could work on it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1504", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1504/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1504/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1504/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1504", "id": 637451611, "node_id": "MDU6SXNzdWU2Mzc0NTE2MTE=", "number": 1504, "title": "Wrong python version used by pre-commit", "user": {"login": "beverlybiwenlow", "id": 22277448, "node_id": "MDQ6VXNlcjIyMjc3NDQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/22277448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beverlybiwenlow", "html_url": "https://github.com/beverlybiwenlow", "followers_url": "https://api.github.com/users/beverlybiwenlow/followers", "following_url": "https://api.github.com/users/beverlybiwenlow/following{/other_user}", "gists_url": "https://api.github.com/users/beverlybiwenlow/gists{/gist_id}", "starred_url": "https://api.github.com/users/beverlybiwenlow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beverlybiwenlow/subscriptions", "organizations_url": "https://api.github.com/users/beverlybiwenlow/orgs", "repos_url": "https://api.github.com/users/beverlybiwenlow/repos", "events_url": "https://api.github.com/users/beverlybiwenlow/events{/privacy}", "received_events_url": "https://api.github.com/users/beverlybiwenlow/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-12T03:10:04Z", "updated_at": "2020-06-16T02:11:19Z", "closed_at": "2020-06-16T02:11:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm facing this issue where my default Python on my system is `3.6.9`, but pre-commit uses `3.6.0` in running the hooks.\r\n\r\n```\r\n\u279c   python --version\r\nPython 3.6.9\r\n\u279c  python3.6\r\nPython 3.6.9 (default, Jun 12 2020, 10:30:48)\r\n[GCC 4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.17)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> exit()\r\n```\r\n\r\nIn my config, I pinned `default_language_version` to `3.6`, and I expected pre-commit to use the latest release version that I have, ie. `3.6.9`\r\n```\r\ndefault_language_version:\r\n    python: python3.6\r\nrepos:\r\n  - repo: https://github.com/asottile/pyupgrade\r\n    rev: v2.1.0\r\n    hooks:\r\n      - id: pyupgrade\r\n        args: [--py36-plus]\r\n```\r\n\r\nHowever, pre-commit used `3.6.0` instead, and threw the error below:\r\n```\r\n\u279c  pre-commit run --all-files\r\n[INFO] Installing environment for https://github.com/asottile/pyupgrade.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nAn unexpected error has occurred: CalledProcessError: command: ('/Users/blow/.cache/pre-commit/repo7_4ikr9y/py_env-python3.6/bin/python', '-mpip', 'install', '.')\r\nreturn code: 1\r\nexpected return code: 0\r\nstdout:\r\n    Processing /Users/blow/.cache/pre-commit/repo7_4ikr9y\r\n\r\nstderr:\r\n    ERROR: Package 'pyupgrade' requires a different Python: 3.6.0 not in '>=3.6.1'\r\n\r\nCheck the log at /Users/blow/.cache/pre-commit/pre-commit.log\r\n```\r\n\r\nPinning `python3.6.9` for `default_language_version` in the config solves this problem, but I want to be able to not pin release versions and just pin `python3.6`. \r\n\r\nAm I doing something wrong in my setup? Appreciate the help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1503", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1503/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1503/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1503/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1503", "id": 637200741, "node_id": "MDU6SXNzdWU2MzcyMDA3NDE=", "number": 1503, "title": "args doesn't seem to get passed to a hook", "user": {"login": "robinbowes", "id": 104948, "node_id": "MDQ6VXNlcjEwNDk0OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/104948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinbowes", "html_url": "https://github.com/robinbowes", "followers_url": "https://api.github.com/users/robinbowes/followers", "following_url": "https://api.github.com/users/robinbowes/following{/other_user}", "gists_url": "https://api.github.com/users/robinbowes/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinbowes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinbowes/subscriptions", "organizations_url": "https://api.github.com/users/robinbowes/orgs", "repos_url": "https://api.github.com/users/robinbowes/repos", "events_url": "https://api.github.com/users/robinbowes/events{/privacy}", "received_events_url": "https://api.github.com/users/robinbowes/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-11T17:28:10Z", "updated_at": "2020-06-12T17:01:39Z", "closed_at": "2020-06-12T17:00:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to pass an arg to a hook.\r\n\r\nI'm using this config:\r\n\r\n```\r\n- repo: https://github.com/antonbabenko/pre-commit-terraform\r\n  rev: v1.31.0\r\n  hooks:\r\n    - id: terraform_validate\r\n      args: [--foo=bar, --baz=waz]\r\n```\r\n\r\nAnd invoking a local copy of the hook using `try-repo` like this:\r\n```\r\n pre-commit try-repo -c .pre-commit-config.yaml ../../../pre-commit-terraform terraform_validate -a\r\n```\r\n\r\nI've put this command at the top of the script but the only output is the list of files that are passed in, ie. the `--foo` and `--bar` args do not get passed:\r\n\r\n```\r\necho \"args: \" \"$@\"\r\n```\r\n\r\nThis is pre-commit v2.5.1 (also tested in v2.4.0)\r\n\r\nAm I doing something wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1502", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1502/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1502/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1502/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1502", "id": 636679860, "node_id": "MDU6SXNzdWU2MzY2Nzk4NjA=", "number": 1502, "title": "Sorry for the tone", "user": {"login": "blaggacao", "id": 7548295, "node_id": "MDQ6VXNlcjc1NDgyOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7548295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blaggacao", "html_url": "https://github.com/blaggacao", "followers_url": "https://api.github.com/users/blaggacao/followers", "following_url": "https://api.github.com/users/blaggacao/following{/other_user}", "gists_url": "https://api.github.com/users/blaggacao/gists{/gist_id}", "starred_url": "https://api.github.com/users/blaggacao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blaggacao/subscriptions", "organizations_url": "https://api.github.com/users/blaggacao/orgs", "repos_url": "https://api.github.com/users/blaggacao/repos", "events_url": "https://api.github.com/users/blaggacao/events{/privacy}", "received_events_url": "https://api.github.com/users/blaggacao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-11T03:00:47Z", "updated_at": "2020-06-11T03:01:27Z", "closed_at": "2020-06-11T03:01:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "#1501\r\n\r\nAnd thanks for the solution!\r\n\r\nI apologize if I was misunderstood unintentionally.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1501", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1501/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1501/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1501/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1501", "id": 636672518, "node_id": "MDU6SXNzdWU2MzY2NzI1MTg=", "number": 1501, "title": "Parse (additional) hook arguments from the command line", "user": {"login": "blaggacao", "id": 7548295, "node_id": "MDQ6VXNlcjc1NDgyOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7548295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blaggacao", "html_url": "https://github.com/blaggacao", "followers_url": "https://api.github.com/users/blaggacao/followers", "following_url": "https://api.github.com/users/blaggacao/following{/other_user}", "gists_url": "https://api.github.com/users/blaggacao/gists{/gist_id}", "starred_url": "https://api.github.com/users/blaggacao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blaggacao/subscriptions", "organizations_url": "https://api.github.com/users/blaggacao/orgs", "repos_url": "https://api.github.com/users/blaggacao/repos", "events_url": "https://api.github.com/users/blaggacao/events{/privacy}", "received_events_url": "https://api.github.com/users/blaggacao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-11T02:37:55Z", "updated_at": "2020-06-11T02:59:08Z", "closed_at": "2020-06-11T02:54:29Z", "author_association": "NONE", "active_lock_reason": "too heated", "body": "https://github.com/TekWizely/pre-commit-golang/pull/3/files#diff-04c6e90faac2675aa89e2176d2eec7d8\r\n\r\n> This is a work-around for pre-commit not allowing to pass arguments to hooks. (... on the cli)\r\n\r\nIt's not fair to put the burden onto the maintainer of the pre-commit plugin.\r\n\r\nInstead of:\r\n```shell\r\nFORMAT= pre-commit run go-returns\r\n```\r\nI want:\r\n```shell\r\npre-commit run go-returns -w\r\n```\r\n\r\nFor avoidance of conflict, this should override the arguments passed from the yaml.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1499", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1499/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1499/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1499/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1499", "id": 635715340, "node_id": "MDU6SXNzdWU2MzU3MTUzNDA=", "number": 1499, "title": "Possibility of data loss when using git commit --all with destructive hooks", "user": {"login": "tchamberlin", "id": 2555049, "node_id": "MDQ6VXNlcjI1NTUwNDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2555049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tchamberlin", "html_url": "https://github.com/tchamberlin", "followers_url": "https://api.github.com/users/tchamberlin/followers", "following_url": "https://api.github.com/users/tchamberlin/following{/other_user}", "gists_url": "https://api.github.com/users/tchamberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/tchamberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tchamberlin/subscriptions", "organizations_url": "https://api.github.com/users/tchamberlin/orgs", "repos_url": "https://api.github.com/users/tchamberlin/repos", "events_url": "https://api.github.com/users/tchamberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/tchamberlin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T19:53:18Z", "updated_at": "2020-06-10T17:01:36Z", "closed_at": "2020-06-10T17:01:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed a troubling difference in behavior between commits performed via `git add --all && git commit` vs `git commit --all` with respect to destructive actions taken by hooks. In the former case, the files are left untouched on-disk in staging, but in the latter case there appears to be no way to recover them.\r\n\r\nOf course we would hope that our hooks behave, but what if they don't, even if by accident? Here's two explicit examples of the differences in these two use cases when using an (obviously ridiculous) hook that deletes all files-to-be-committed.\r\n\r\n### Case 1 (`git add --all && git commit`)\r\n\r\nWhen manually staging files via git add, destructive actions taken by scripts are reversible:\r\n\r\n```\r\n$ echo \"this will NOT be lost forever\" >> foo.py\r\n\r\n$ git add foo.py \r\n\r\n$ git commit -m \"this will leave foo.py staged\"\r\nDelete Everything........................................................Failed\r\n- hook id: delete_everything\r\n- files were modified by this hook\r\n\r\n$ git status --short\r\nMD foo.py\r\n\r\n$ git checkout -- foo.py\r\n\r\n$ cat foo.py \r\nprint('hello world')\r\nthis will NOT be lost forever\r\n```\r\n\r\n### Case 2 (`git commit --all`)\r\n\r\nHowever, when committing via `git commit --all`, the contents cannot be recovered:\r\n\r\n```\r\n# Simple repo, with just a source file and the pre-commit configuration\r\n$ ls -A\r\nfoo.py  .git  .pre-commit-config.yaml\r\n\r\n$ cat foo.py \r\nprint('hello world')\r\n\r\n$ cat .pre-commit-config.yaml \r\nrepos:\r\n-   repo: https://github.com/tchamberlin/delete-everything-pre-commit\r\n    rev: 14f47f9929795f80c281fc7e95c284a94feea733\r\n    hooks:\r\n    -   id: delete_everything\r\n\r\n# Make a local modification\r\n$ echo \"this will be lost forever\" >> foo.py \r\n\r\n$ cat foo.py\r\nprint(\"hello world\")\r\nthis will be lost forever\r\n\r\n# If we attempt to commit without first staging, then I can't see any way of recovering\r\n# deleted files\r\n$ git commit --all --message \"foo.py will lose data that cannot be recovered\"\r\nDelete Everything........................................................Failed\r\n- hook id: delete_everything\r\n- files were modified by this hook\r\n\r\n# Nothing staged, and file has been deleted\r\n$ git status --short\r\n D foo.py\r\n\r\n# Nothing stashed\r\n$ git stash list\r\n\r\n# Nothing useful in the cache:\r\n$ ls -A ~/.cache/pre-commit/\r\ndb.db  .lock  README  repo4diajf1x\r\n```\r\n\r\nThe wording of the option help text for `git commit --all` indicates that the files should still be staged prior to commit:\r\n\r\n```\r\n-a, --all\r\n   Tell the command to automatically stage files that have been modified\r\n   and deleted, but new files you have not told Git about are not\r\n   affected.\r\n```\r\n\r\nBut, perhaps it's a bit different internally?\r\n\r\n### Environment\r\n\r\n* OS: Ubuntu 18.04.4 LTS\r\n* git: 2.7.17\r\n* pre-commit: 2.4.0\r\n* Python: 3.8.2\r\n\r\n### Questions\r\n\r\n1. Am I understanding the situation correctly, or have I missed something (i.e. are the files stashed somewhere that I've missed)?\r\n2. Is there a workaround that you all have found for this?\r\n3. Is there anything that _can_ be done to make these situations functionally equivalent on the `pre-commit` side, or are there simply implementation differences on the `git` side that make it impossible?\r\n\r\n### Related resources\r\n\r\n> pre-commit itself will never touch the staging area\r\n\r\n#747\r\n\r\n> [Modifying by default is by-design](https://github.com/pre-commit/pre-commit-hooks/issues/108#issuecomment-209718653)\r\n\r\n> [pre-commit only runs on the staged contents of files by temporarily saving the contents of your files at commit time and stashing the unstaged changes while running hooks.](https://pre-commit.com/#pre-commit-during-commits)\r\n\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1498", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1498/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1498/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1498/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1498", "id": 635694176, "node_id": "MDU6SXNzdWU2MzU2OTQxNzY=", "number": 1498, "title": "pre-comit hangs on a brakeman local hook  run", "user": {"login": "joshio1", "id": 21145429, "node_id": "MDQ6VXNlcjIxMTQ1NDI5", "avatar_url": "https://avatars0.githubusercontent.com/u/21145429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshio1", "html_url": "https://github.com/joshio1", "followers_url": "https://api.github.com/users/joshio1/followers", "following_url": "https://api.github.com/users/joshio1/following{/other_user}", "gists_url": "https://api.github.com/users/joshio1/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshio1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshio1/subscriptions", "organizations_url": "https://api.github.com/users/joshio1/orgs", "repos_url": "https://api.github.com/users/joshio1/repos", "events_url": "https://api.github.com/users/joshio1/events{/privacy}", "received_events_url": "https://api.github.com/users/joshio1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-06-09T19:15:21Z", "updated_at": "2020-06-09T20:20:46Z", "closed_at": "2020-06-09T20:14:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to get [brakeman](https://github.com/presidentbeef/brakeman) run as a local hook.\r\nThis is my pre-commit-config.yaml file.\r\n\r\n```\r\nrepos:\r\n  - repo: local\r\n    hooks:\r\n      - id: brakeman\r\n        name: brakeman\r\n        entry: bash -c 'brakeman'\r\n        language: system\r\n```\r\n\r\nAfter running the above config file using `pre-commit run -a`, the execution hangs and I have to keyboard interrupt it.\r\nNote that brakeman runs fine when run directly on the command line.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1496", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1496/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1496/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1496/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1496", "id": 635548955, "node_id": "MDU6SXNzdWU2MzU1NDg5NTU=", "number": 1496, "title": "Stalls on hooks checkout", "user": {"login": "admorgan", "id": 355894, "node_id": "MDQ6VXNlcjM1NTg5NA==", "avatar_url": "https://avatars0.githubusercontent.com/u/355894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/admorgan", "html_url": "https://github.com/admorgan", "followers_url": "https://api.github.com/users/admorgan/followers", "following_url": "https://api.github.com/users/admorgan/following{/other_user}", "gists_url": "https://api.github.com/users/admorgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/admorgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/admorgan/subscriptions", "organizations_url": "https://api.github.com/users/admorgan/orgs", "repos_url": "https://api.github.com/users/admorgan/repos", "events_url": "https://api.github.com/users/admorgan/events{/privacy}", "received_events_url": "https://api.github.com/users/admorgan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713405, "node_id": "MDU6TGFiZWw4NTcxMzQwNQ==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-06-09T15:44:07Z", "updated_at": "2020-06-09T21:15:36Z", "closed_at": "2020-06-09T21:15:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to use some hook repositories I am getting hangs while fetching hooks. Tried pre-commit clean and rm -rf ~/.cache/pre-commit, but nothing changed. This is happening on both Windows 10 and Ubuntu 18.04.4 LTS.\r\n\r\npre-commit.log\r\n\r\n> ### version information\r\n> \r\n> ```\r\n> pre-commit version: 2.4.0\r\n> sys.version:\r\n>     3.6.9 (default, Apr 18 2020, 01:56:04)\r\n>     [GCC 8.4.0]\r\n> sys.executable: /usr/bin/python3\r\n> os.name: posix\r\n> sys.platform: linux\r\n> ```\r\n> \r\n> ### error information\r\n> \r\n> ```\r\n> Interrupted (^C): KeyboardInterrupt:\r\n> ```\r\n> \r\n> ```\r\n> Traceback (most recent call last):\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/error_handler.py\", line 56, in error_handler\r\n>     yield\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/main.py\", line 388, in main\r\n>     return install_hooks(args.config, store)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/commands/install_uninstall.py\", line 153, in install_hooks\r\n>     install_hook_envs(all_hooks(load_config(config_file), store), store)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/repository.py\", line 206, in all_hooks\r\n>     for repo in root_config['repos']\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/repository.py\", line 207, in <genexpr>\r\n>     for hook in _repository_hooks(repo, store, root_config)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/repository.py\", line 182, in _repository_hooks\r\n>     return _cloned_repository_hooks(repo_config, store, root_config)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/repository.py\", line 148, in _cloned_repository_hooks\r\n>     manifest_path = os.path.join(store.clone(repo, rev), C.MANIFEST_FILE)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/store.py\", line 183, in clone\r\n>     return self._new_repo(repo, ref, deps, clone_strategy)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/store.py\", line 140, in _new_repo\r\n>     make_strategy(directory)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/store.py\", line 179, in clone_strategy\r\n>     self._shallow_clone(ref, _git_cmd)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/store.py\", line 162, in _shallow_clone\r\n>     git_cmd('checkout', 'FETCH_HEAD')\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/store.py\", line 176, in _git_cmd\r\n>     cmd_output_b('git', *args, cwd=directory, env=env)\r\n>   File \"/home/morgana/.local/lib/python3.6/site-packages/pre_commit/util.py\", line 155, in cmd_output_b\r\n>     stdout_b, stderr_b = proc.communicate()\r\n>   File \"/usr/lib/python3.6/subprocess.py\", line 863, in communicate\r\n>     stdout, stderr = self._communicate(input, endtime, timeout)\r\n>   File \"/usr/lib/python3.6/subprocess.py\", line 1534, in _communicate\r\n>     ready = selector.select(timeout)\r\n>   File \"/usr/lib/python3.6/selectors.py\", line 376, in select\r\n>     fd_event_list = self._poll.poll(timeout)\r\n> KeyboardInterrupt\r\n\r\nAdded to  ~/.local/lib/python3.6/site-packages/pre_commit/util.py line 143\r\n\r\n```python\r\nprint(cmd)\r\nprint(kwargs)\r\n```\r\n\r\n> $ pre-commit install-hooks\r\n> ('git', 'rev-parse', '--show-toplevel')\r\n> {'stdin': -1, 'stdout': -1, 'stderr': -1}\r\n> [INFO] Initializing environment for https://github.com/psf/black.\r\n> ('git', 'init', '/home/morgana/.cache/pre-commit/repohg1s5b7b')\r\n> {'env': {'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'SSH_CONNECTION': '10.30.48.92 50335 10.30.48.87 22', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LANG': 'en_US.UTF-8', 'PERL_MB_OPT': '--install_base \"/home/morgana/perl5\"', 'XDG_SESSION_ID': '10', 'USER': 'morgana', 'PWD': '/home/morgana/projects/git-hooks', 'HOME': '/home/morgana', 'SSH_CLIENT': '10.30.48.92 50335 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PERL_MM_OPT': 'INSTALL_BASE=/home/morgana/perl5', 'PERL_LOCAL_LIB_ROOT': '/home/morgana/perl5', 'SSH_TTY': '/dev/pts/0', 'MAIL': '/var/mail/morgana', 'TERM': 'xterm', 'SHELL': '/bin/bash', 'PERL5LIB': '/home/morgana/perl5/lib/perl5', 'SHLVL': '1', 'LANGUAGE': 'en_US:', 'MANPATH': '/home/morgana/.git/subrepo/man:', 'LOGNAME': 'morgana', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/17173/bus', 'XDG_RUNTIME_DIR': '/run/user/17173', 'PATH': '/home/morgana/.local/bin:/home/morgana/bin:/home/morgana/perl5/bin:/home/morgana/.git/subrepo/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'OLDPWD': '/home/morgana', '_': '/home/morgana/.local/bin/pre-commit'}, 'stdin': -1, 'stdout': -1, 'stderr': -1}\r\n> ('git', 'remote', 'add', 'origin', 'https://github.com/psf/black')\r\n> {'cwd': '/home/morgana/.cache/pre-commit/repohg1s5b7b', 'env': {'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'SSH_CONNECTION': '10.30.48.92 50335 10.30.48.87 22', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LANG': 'en_US.UTF-8', 'PERL_MB_OPT': '--install_base \"/home/morgana/perl5\"', 'XDG_SESSION_ID': '10', 'USER': 'morgana', 'PWD': '/home/morgana/projects/git-hooks', 'HOME': '/home/morgana', 'SSH_CLIENT': '10.30.48.92 50335 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PERL_MM_OPT': 'INSTALL_BASE=/home/morgana/perl5', 'PERL_LOCAL_LIB_ROOT': '/home/morgana/perl5', 'SSH_TTY': '/dev/pts/0', 'MAIL': '/var/mail/morgana', 'TERM': 'xterm', 'SHELL': '/bin/bash', 'PERL5LIB': '/home/morgana/perl5/lib/perl5', 'SHLVL': '1', 'LANGUAGE': 'en_US:', 'MANPATH': '/home/morgana/.git/subrepo/man:', 'LOGNAME': 'morgana', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/17173/bus', 'XDG_RUNTIME_DIR': '/run/user/17173', 'PATH': '/home/morgana/.local/bin:/home/morgana/bin:/home/morgana/perl5/bin:/home/morgana/.git/subrepo/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'OLDPWD': '/home/morgana', '_': '/home/morgana/.local/bin/pre-commit'}, 'stdin': -1, 'stdout': -1, 'stderr': -1}\r\n> ('git', '-c', 'protocol.version=2', 'fetch', 'origin', 'stable', '--depth=1')\r\n> {'cwd': '/home/morgana/.cache/pre-commit/repohg1s5b7b', 'env': {'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'SSH_CONNECTION': '10.30.48.92 50335 10.30.48.87 22', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LANG': 'en_US.UTF-8', 'PERL_MB_OPT': '--install_base \"/home/morgana/perl5\"', 'XDG_SESSION_ID': '10', 'USER': 'morgana', 'PWD': '/home/morgana/projects/git-hooks', 'HOME': '/home/morgana', 'SSH_CLIENT': '10.30.48.92 50335 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PERL_MM_OPT': 'INSTALL_BASE=/home/morgana/perl5', 'PERL_LOCAL_LIB_ROOT': '/home/morgana/perl5', 'SSH_TTY': '/dev/pts/0', 'MAIL': '/var/mail/morgana', 'TERM': 'xterm', 'SHELL': '/bin/bash', 'PERL5LIB': '/home/morgana/perl5/lib/perl5', 'SHLVL': '1', 'LANGUAGE': 'en_US:', 'MANPATH': '/home/morgana/.git/subrepo/man:', 'LOGNAME': 'morgana', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/17173/bus', 'XDG_RUNTIME_DIR': '/run/user/17173', 'PATH': '/home/morgana/.local/bin:/home/morgana/bin:/home/morgana/perl5/bin:/home/morgana/.git/subrepo/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'OLDPWD': '/home/morgana', '_': '/home/morgana/.local/bin/pre-commit'}, 'stdin': -1, 'stdout': -1, 'stderr': -1}\r\n> ('git', 'checkout', 'FETCH_HEAD')\r\n> {'cwd': '/home/morgana/.cache/pre-commit/repohg1s5b7b', 'env': {'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'SSH_CONNECTION': '10.30.48.92 50335 10.30.48.87 22', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LANG': 'en_US.UTF-8', 'PERL_MB_OPT': '--install_base \"/home/morgana/perl5\"', 'XDG_SESSION_ID': '10', 'USER': 'morgana', 'PWD': '/home/morgana/projects/git-hooks', 'HOME': '/home/morgana', 'SSH_CLIENT': '10.30.48.92 50335 22', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'PERL_MM_OPT': 'INSTALL_BASE=/home/morgana/perl5', 'PERL_LOCAL_LIB_ROOT': '/home/morgana/perl5', 'SSH_TTY': '/dev/pts/0', 'MAIL': '/var/mail/morgana', 'TERM': 'xterm', 'SHELL': '/bin/bash', 'PERL5LIB': '/home/morgana/perl5/lib/perl5', 'SHLVL': '1', 'LANGUAGE': 'en_US:', 'MANPATH': '/home/morgana/.git/subrepo/man:', 'LOGNAME': 'morgana', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/17173/bus', 'XDG_RUNTIME_DIR': '/run/user/17173', 'PATH': '/home/morgana/.local/bin:/home/morgana/bin:/home/morgana/perl5/bin:/home/morgana/.git/subrepo/lib:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'OLDPWD': '/home/morgana', '_': '/home/morgana/.local/bin/pre-commit'}, 'stdin': -1, 'stdout': -1, 'stderr': -1}\r\n\r\n.pre-commit-config.yaml\r\n\r\n```yaml\r\nrepos:\r\n  - repo: https://github.com/psf/black\r\n    rev: stable\r\n    hooks:\r\n      - id: black\r\n        language_version: python3.6\r\n        stages: [commit]\r\n  - repo: https://github.com/shellcheck-py/shellcheck-py\r\n    rev: v0.7.1.1\r\n    hooks:\r\n    -   id: shellcheck\r\n        stages: [commit]\r\n  - repo: local\r\n    hooks:\r\n      # Add a ChangeID tag to commit messages that don't have one\r\n      -   id: Change-Id\r\n          name: Add a ChangeID tag to commit messages that don't have one\r\n          entry: change-id\r\n          always_run: true\r\n          language: script\r\n          stages: [commit-msg]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1495", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1495/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1495/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1495/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1495", "id": 635143142, "node_id": "MDU6SXNzdWU2MzUxNDMxNDI=", "number": 1495, "title": "pre-commit hook ignores isort config", "user": {"login": "pmeier", "id": 6849766, "node_id": "MDQ6VXNlcjY4NDk3NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/6849766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmeier", "html_url": "https://github.com/pmeier", "followers_url": "https://api.github.com/users/pmeier/followers", "following_url": "https://api.github.com/users/pmeier/following{/other_user}", "gists_url": "https://api.github.com/users/pmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmeier/subscriptions", "organizations_url": "https://api.github.com/users/pmeier/orgs", "repos_url": "https://api.github.com/users/pmeier/repos", "events_url": "https://api.github.com/users/pmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/pmeier/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T06:16:28Z", "updated_at": "2020-06-09T06:41:02Z", "closed_at": "2020-06-09T06:21:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is another issue (#842) with a similar name. My problem is not about package discovery so the proposed solution does not fit my problem.\r\n\r\n---\r\n\r\nI want to run a check with [`isort`](https://github.com/timothycrosley/isort) as a `pre-commit` hook. My `pre-commit-config.yaml` looks like this:\r\n\r\n```yaml\r\nrepos:\r\n  - repo: https://github.com/timothycrosley/isort\r\n    rev: 4.3.21\r\n    hooks:\r\n      - id: isort\r\n        args: [--check-only]\r\n        additional_dependencies: [toml]\r\n```\r\n\r\nMy `isort` config is part of the `pyproject.toml`:\r\n\r\n```toml\r\n[tool.isort]\r\n\r\nskip = [\r\n  \"my_awesome_package/__init__.py\",\r\n]\r\nknown_third_party = [\"awesome_third_party_package\"]\r\nknown_first_party = [\"my_awesome_package\"]\r\n```\r\n\r\nIf I run `isort` from the console the configuration is automatically detected. If run as a pre-commit hook it ignores the config and fails since `my_awesome_package/__init__.py` is not correctly sorted.\r\n\r\nIs this a problem with `pre-commit` or should I bring this up on `isort`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1493", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1493/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1493/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1493/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1493", "id": 634636183, "node_id": "MDU6SXNzdWU2MzQ2MzYxODM=", "number": 1493, "title": "Make pre-commit PEP 561 compatible package", "user": {"login": "playpauseandstop", "id": 21325, "node_id": "MDQ6VXNlcjIxMzI1", "avatar_url": "https://avatars0.githubusercontent.com/u/21325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/playpauseandstop", "html_url": "https://github.com/playpauseandstop", "followers_url": "https://api.github.com/users/playpauseandstop/followers", "following_url": "https://api.github.com/users/playpauseandstop/following{/other_user}", "gists_url": "https://api.github.com/users/playpauseandstop/gists{/gist_id}", "starred_url": "https://api.github.com/users/playpauseandstop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/playpauseandstop/subscriptions", "organizations_url": "https://api.github.com/users/playpauseandstop/orgs", "repos_url": "https://api.github.com/users/playpauseandstop/repos", "events_url": "https://api.github.com/users/playpauseandstop/events{/privacy}", "received_events_url": "https://api.github.com/users/playpauseandstop/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T13:51:27Z", "updated_at": "2020-06-08T15:37:21Z", "closed_at": "2020-06-08T15:37:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI wonder are the any objections in making pre-commit [PEP 561](https://www.python.org/dev/peps/pep-0561/) compatible package by adding,\r\n\r\n- `py.typed` file to `pre_commit` and all internal packages (`pre_commit.commands`, `pre_commit.languages`, etc)\r\n- `Typing :: Typed` classifier to `setup.cfg`\r\n\r\nAs `pre_commit` already provide type annotations for all their code, adding `py.typed` will allow mypy (and other type checkers) to properly run type checking against the code, which imports `pre_commit` library.\r\n\r\nIf you're ok with given improvements, I'd will to provide them and, as well, provide basic tests, that `pre-commit` typed well.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1492", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1492/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1492/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1492/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1492", "id": 634625450, "node_id": "MDU6SXNzdWU2MzQ2MjU0NTA=", "number": 1492, "title": "different behavior on windows", "user": {"login": "Trim21", "id": 13553903, "node_id": "MDQ6VXNlcjEzNTUzOTAz", "avatar_url": "https://avatars1.githubusercontent.com/u/13553903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trim21", "html_url": "https://github.com/Trim21", "followers_url": "https://api.github.com/users/Trim21/followers", "following_url": "https://api.github.com/users/Trim21/following{/other_user}", "gists_url": "https://api.github.com/users/Trim21/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trim21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trim21/subscriptions", "organizations_url": "https://api.github.com/users/Trim21/orgs", "repos_url": "https://api.github.com/users/Trim21/repos", "events_url": "https://api.github.com/users/Trim21/events{/privacy}", "received_events_url": "https://api.github.com/users/Trim21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T13:37:32Z", "updated_at": "2020-06-08T15:37:08Z", "closed_at": "2020-06-08T14:09:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "exclude doesn't work correctly on windows\r\n\r\n<details>\r\n<summary>project files</summary>\r\n\r\n```\r\npre-commit-bug\r\n\u251c\u2500  .gitignore (lf)\r\n\u251c\u2500  .pre-commit-config.yaml (lf)\r\n\u251c\u2500  a.vbs (crlf)\r\n\u251c\u2500  poetry.lock (lf)\r\n\u251c\u2500  pyproject.toml (lf)\r\n\u2514\u2500.github/workflows/ci.yaml (lf)\r\n\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>.pre-commit-config.yaml</summary>\r\n\r\n```yaml\r\nrepos:\r\n  - repo: https://github.com/pre-commit/pre-commit-hooks\r\n    rev: v3.1.0\r\n    hooks:\r\n      - id: check-merge-conflict\r\n        exclude: '\\.rst$'\r\n\r\n      - id: mixed-line-ending\r\n        args: [--fix=lf]\r\n        types: [text]\r\n        exclude: '\\.vbs$'\r\n        verbose: true\r\n\r\n      - id: mixed-line-ending\r\n        args: [--fix=crlf]\r\n        types: [text]\r\n        files: '\\.vbs$'\r\n        verbose: true\r\n\r\n  - repo: local\r\n    hooks:\r\n      - id: echo\r\n        name: echo include\r\n        entry: echo\r\n        language: system\r\n        types: [text]\r\n        files: '\\.vbs$'\r\n        verbose: true\r\n\r\n      - id: echo\r\n        name: echo exclude\r\n        entry: echo\r\n        language: system\r\n        types: [text]\r\n        exclude: '\\.vbs$'\r\n        verbose: true\r\n```\r\n\r\n</details>\r\n\r\non windows, got\r\n\r\n```\r\n.pre-commit-config.yaml: fixed mixed line endings\r\n.gitignore: fixed mixed line endings\r\npoetry.lock: fixed mixed line endings\r\n.github/workflows/ci.yaml: fixed mixed line endings\r\npyproject.toml: fixed mixed line endings\r\n```\r\n\r\nbug `echo exclude` got `.pre-commit-config.yaml .gitignore poetry.lock .github/workflows/ci.yaml`\r\n\r\nexample: https://github.com/Trim21/pre-commit-bug\r\n\r\nhttps://github.com/Trim21/pre-commit-bug/runs/750140132?check_suite_focus=true\r\n\r\n<details>\r\n<summary> full logs </summary>\r\n\r\n```\r\n2020-06-08T13:29:11.6080032Z [INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\r\n2020-06-08T13:29:13.5383275Z [INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\r\n2020-06-08T13:29:13.5384024Z [INFO] Once installed this environment will be reused.\r\n2020-06-08T13:29:13.5384278Z [INFO] This may take a few minutes...\r\n2020-06-08T13:29:24.4528701Z Check for merge conflicts................................................Passed\r\n2020-06-08T13:29:24.6160981Z Mixed line ending........................................................Failed\r\n2020-06-08T13:29:24.6161607Z - hook id: mixed-line-ending\r\n2020-06-08T13:29:24.6161880Z - duration: 0.09s\r\n2020-06-08T13:29:24.6162087Z - exit code: 1\r\n2020-06-08T13:29:24.6162293Z - files were modified by this hook\r\n2020-06-08T13:29:24.6175591Z \r\n2020-06-08T13:29:24.6176070Z .pre-commit-config.yaml: fixed mixed line endings\r\n2020-06-08T13:29:24.6176307Z .gitignore: fixed mixed line endings\r\n2020-06-08T13:29:24.6176540Z poetry.lock: fixed mixed line endings\r\n2020-06-08T13:29:24.6176759Z .github/workflows/ci.yaml: fixed mixed line endings\r\n2020-06-08T13:29:24.6176980Z pyproject.toml: fixed mixed line endings\r\n2020-06-08T13:29:24.6177139Z \r\n2020-06-08T13:29:24.7616688Z Mixed line ending........................................................Passed\r\n2020-06-08T13:29:24.7617218Z - hook id: mixed-line-ending\r\n2020-06-08T13:29:24.7617442Z - duration: 0.08s\r\n2020-06-08T13:29:24.9059230Z echo include.............................................................Passed\r\n2020-06-08T13:29:24.9059827Z - hook id: echo\r\n2020-06-08T13:29:24.9060075Z - duration: 0.06s\r\n2020-06-08T13:29:24.9060227Z \r\n2020-06-08T13:29:24.9060428Z a.vbs\r\n2020-06-08T13:29:24.9060593Z \r\n2020-06-08T13:29:24.9803601Z echo exclude.............................................................Passed\r\n2020-06-08T13:29:24.9804176Z - hook id: echo\r\n2020-06-08T13:29:24.9804425Z - duration: 0s\r\n2020-06-08T13:29:24.9804574Z \r\n2020-06-08T13:29:24.9804792Z .pre-commit-config.yaml .gitignore poetry.lock .github/workflows/ci.yaml\r\n2020-06-08T13:29:24.9805007Z pyproject.toml\r\n2020-06-08T13:29:24.9805148Z \r\n2020-06-08T13:29:25.8038869Z ##[error]Process completed with exit code 1.\r\n```\r\n</details>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1490", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1490/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1490/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1490/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1490", "id": 634523525, "node_id": "MDU6SXNzdWU2MzQ1MjM1MjU=", "number": 1490, "title": "Unable to install with pipx, incompatible importlib-resources", "user": {"login": "bosd", "id": 11499387, "node_id": "MDQ6VXNlcjExNDk5Mzg3", "avatar_url": "https://avatars1.githubusercontent.com/u/11499387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bosd", "html_url": "https://github.com/bosd", "followers_url": "https://api.github.com/users/bosd/followers", "following_url": "https://api.github.com/users/bosd/following{/other_user}", "gists_url": "https://api.github.com/users/bosd/gists{/gist_id}", "starred_url": "https://api.github.com/users/bosd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bosd/subscriptions", "organizations_url": "https://api.github.com/users/bosd/orgs", "repos_url": "https://api.github.com/users/bosd/repos", "events_url": "https://api.github.com/users/bosd/events{/privacy}", "received_events_url": "https://api.github.com/users/bosd/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-08T11:22:09Z", "updated_at": "2020-06-09T11:35:13Z", "closed_at": "2020-06-08T15:31:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\n\r\n``pipx install pre-commit``\r\n\r\nreturns an error\r\n\r\n```\r\nERROR: virtualenv 20.0.21 has requirement importlib-resources<2,>=1.0; python_version < \"3.7\", but you'll have importlib-resources 2.0.0 which is incompatible.\r\nInternal error with venv metadata inspection.\r\n```\r\nHow to resolve this?\r\n\r\nsteps to reproduce:\r\nUbuntu 18.04 host system\r\n```\r\npython3 -m pip install --user pipx\r\npython3 -m pipx ensurepath\r\npipx install invoke\r\npipx install pre-commit\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1489", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1489/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1489/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1489/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1489", "id": 632756418, "node_id": "MDU6SXNzdWU2MzI3NTY0MTg=", "number": 1489, "title": "Creation of files does not fail hook", "user": {"login": "hyperfekt", "id": 9434715, "node_id": "MDQ6VXNlcjk0MzQ3MTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9434715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyperfekt", "html_url": "https://github.com/hyperfekt", "followers_url": "https://api.github.com/users/hyperfekt/followers", "following_url": "https://api.github.com/users/hyperfekt/following{/other_user}", "gists_url": "https://api.github.com/users/hyperfekt/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyperfekt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyperfekt/subscriptions", "organizations_url": "https://api.github.com/users/hyperfekt/orgs", "repos_url": "https://api.github.com/users/hyperfekt/repos", "events_url": "https://api.github.com/users/hyperfekt/events{/privacy}", "received_events_url": "https://api.github.com/users/hyperfekt/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-06T21:55:01Z", "updated_at": "2020-06-06T22:09:25Z", "closed_at": "2020-06-06T22:09:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a hook creates files, the hook still passes.\r\n\r\nThis could be interpreted as ontradicting the documentation, which states:\r\n`The hook must exit nonzero on failure or modify files in the working directory.`\r\n\r\nThe hook does modify the _set_ of files in the working directory, but does not modify any _individual_ file in the working directory.\r\n\r\nThe issue could be treated as either one of unclear documentation or one of implementation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1488", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1488/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1488/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1488/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1488", "id": 631209566, "node_id": "MDU6SXNzdWU2MzEyMDk1NjY=", "number": 1488, "title": "Is there any interest in putting nodeenv behind extras_require?", "user": {"login": "joshuarli", "id": 14209781, "node_id": "MDQ6VXNlcjE0MjA5Nzgx", "avatar_url": "https://avatars0.githubusercontent.com/u/14209781?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshuarli", "html_url": "https://github.com/joshuarli", "followers_url": "https://api.github.com/users/joshuarli/followers", "following_url": "https://api.github.com/users/joshuarli/following{/other_user}", "gists_url": "https://api.github.com/users/joshuarli/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshuarli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshuarli/subscriptions", "organizations_url": "https://api.github.com/users/joshuarli/orgs", "repos_url": "https://api.github.com/users/joshuarli/repos", "events_url": "https://api.github.com/users/joshuarli/events{/privacy}", "received_events_url": "https://api.github.com/users/joshuarli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-04T23:30:39Z", "updated_at": "2020-06-04T23:35:50Z", "closed_at": "2020-06-04T23:34:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recently was surprised to find out about `nodeenv` in my virtualenv. I don't use pre-commit for any node-related things, so it would be nice to put `nodeenv` behind an extras_require.\r\n\r\nOr, it might be more preferable to somehow tell pip to not install nodeenv... I'm not sure if an inverse extras_require is possible in setuptools metadata?\r\n\r\nIf there's any interest in this, I can submit a PR for this as well as update any related documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1487", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1487/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1487/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1487/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1487", "id": 631188642, "node_id": "MDU6SXNzdWU2MzExODg2NDI=", "number": 1487, "title": "Using pre-commit through intellij/pycharm commits", "user": {"login": "symonk", "id": 17887843, "node_id": "MDQ6VXNlcjE3ODg3ODQz", "avatar_url": "https://avatars0.githubusercontent.com/u/17887843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/symonk", "html_url": "https://github.com/symonk", "followers_url": "https://api.github.com/users/symonk/followers", "following_url": "https://api.github.com/users/symonk/following{/other_user}", "gists_url": "https://api.github.com/users/symonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/symonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/symonk/subscriptions", "organizations_url": "https://api.github.com/users/symonk/orgs", "repos_url": "https://api.github.com/users/symonk/repos", "events_url": "https://api.github.com/users/symonk/events{/privacy}", "received_events_url": "https://api.github.com/users/symonk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-04T22:34:08Z", "updated_at": "2020-06-04T22:44:44Z", "closed_at": "2020-06-04T22:44:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Anthony, great tool thanks! - I've always used the command line for git in which case everything works nicely, however trying to roll this out in work has caused some headaches / confusion for those who rely on intellij/pycharm for doing day to day git tasks.  Heres an example of when things go bad below:\r\n\r\n\r\n- Modify a simple file in the repo that black will rewrite, change a \"hello world\" to 'hello world':\r\n\r\n```python\r\n def last_failed_show(config, session) -> int:\r\n     terminal_writer = TerminalWriter()\r\n-    var = \"hello world\"\r\n+    var = 'hello world'\r\n     print(var)\r\n```\r\n\r\n- Add/commit such file using pycharm which automatically runs git hooks to apply black (which will rewrite the file and abort the commit (rightly so):\r\n\r\n```bash\r\n0 file committed, 1 file failed to commit: test2\r\nblack....................................................................Failed\r\n- hook id: black\r\n- files were modified by this hook\r\n```\r\n\r\nWhen committing through intellij, the following commands are issued here:\r\n\r\n```bash\r\n22:54:21.066: [pytest] git -c credential.helper= -c core.quotepath=false -c log.showSignature=false add --ignore-errors -A -f -- src/_pytest/cacheprovider.py\r\n22:54:21.115: [pytest] git -c credential.helper= -c core.quotepath=false -c log.showSignature=false commit -F C:\\Users\\sy\\AppData\\Local\\Temp\\git-commit-msg-.txt --\r\nblack....................................................................Failed\r\n- hook id: black\r\n- files were modified by this hook\r\n```\r\n\r\nAs far as this file within Intellij/pycharm goes, it is now impossible to add it via the GUI, the add/commit options are no longer available, from the cli we see the following:\r\n\r\n```bash\r\nChanges to be committed:\r\n  (use \"git reset HEAD <file>...\" to unstage)\r\n\r\n        modified:   src/_pytest/cacheprovider.py\r\n\r\nChanges not staged for commit:\r\n  (use \"git add <file>...\" to update what will be committed)\r\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\r\n\r\n        modified:   src/_pytest/cacheprovider.py\r\n```\r\n\r\nHas anyone came across this before and has a potential work around to make it work? maybe its an intellij issue as they don't seem to run `traditional` git commands as you would via the CLI.\r\n\r\n![image](https://user-images.githubusercontent.com/17887843/83817231-1daa8b80-a6bc-11ea-9c5d-5aabef7eda50.png)\r\n\r\n^ intellij only git user is now in somewhat of a 'limbo' situation.\r\n\r\nAppreciate your time, thanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1486", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1486/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1486/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1486/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1486", "id": 630390049, "node_id": "MDU6SXNzdWU2MzAzOTAwNDk=", "number": 1486, "title": "Custom PyPI dependencies", "user": {"login": "nihaals", "id": 18350092, "node_id": "MDQ6VXNlcjE4MzUwMDky", "avatar_url": "https://avatars2.githubusercontent.com/u/18350092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nihaals", "html_url": "https://github.com/nihaals", "followers_url": "https://api.github.com/users/nihaals/followers", "following_url": "https://api.github.com/users/nihaals/following{/other_user}", "gists_url": "https://api.github.com/users/nihaals/gists{/gist_id}", "starred_url": "https://api.github.com/users/nihaals/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nihaals/subscriptions", "organizations_url": "https://api.github.com/users/nihaals/orgs", "repos_url": "https://api.github.com/users/nihaals/repos", "events_url": "https://api.github.com/users/nihaals/events{/privacy}", "received_events_url": "https://api.github.com/users/nihaals/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-03T23:07:18Z", "updated_at": "2020-06-03T23:10:49Z", "closed_at": "2020-06-03T23:09:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using [isort](https://github.com/timothycrosley/isort), if you want to use `pyproject.toml` as your configuration file, you need to install `toml`. Is there a way to do this? Manually reading the error, getting the path to the Python venv and installing it wouldn't work great for CI.\r\n\r\nError:\r\n`/home/.../.cache/pre-commit/repo.../py_env-python3/lib/python3.8/site-packages/isort/settings.py:358: UserWarning: Found /.../pyproject.toml with [tool.isort] section, but toml package is not installed. To configure isort with /.../pyproject.toml, install with 'isort[pyproject]'.`\r\n\r\nRelevant config:\r\n```yaml\r\n  - repo: https://github.com/timothycrosley/isort\r\n    rev: '4.3.21'\r\n    hooks:\r\n      - id: isort\r\n        args:\r\n          - '-c'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1485", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1485/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1485/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1485/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1485", "id": 629948285, "node_id": "MDU6SXNzdWU2Mjk5NDgyODU=", "number": 1485, "title": "Add pre-commit-hook topic to github repositories exposing hooks", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-03T12:18:45Z", "updated_at": "2020-08-17T16:23:14Z", "closed_at": "2020-08-17T16:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "In order to easy discoverability of `pre-commit-hook`s, it would be very useful to promote use of github `pre-commit-hook` topic.\r\n\r\nAs seen at https://github.com/topics/pre-commit-hook there are already more than 30 repositories exposing that they are pre-commit-hooks.\r\n\r\nThe only thing needed is to add this topic to repositories like\r\n* https://github.com/pre-commit/pre-commit-hooks\r\n* https://github.com/pre-commit/mirrors-mypy\r\n* https://github.com/PyCQA/flake8\r\n\r\nOnce this happens, they will become visible in searches, listed based on their popularity.\r\n\r\nIf there are concerns about confusions related to git-hooks polluting the listing we can think about promoting use of another topic, any tag can be used.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1483", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1483/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1483/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1483/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1483", "id": 628516573, "node_id": "MDU6SXNzdWU2Mjg1MTY1NzM=", "number": 1483, "title": "syntax error near unexpected token `(' when running a node-based plugin", "user": {"login": "gausie", "id": 179758, "node_id": "MDQ6VXNlcjE3OTc1OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/179758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gausie", "html_url": "https://github.com/gausie", "followers_url": "https://api.github.com/users/gausie/followers", "following_url": "https://api.github.com/users/gausie/following{/other_user}", "gists_url": "https://api.github.com/users/gausie/gists{/gist_id}", "starred_url": "https://api.github.com/users/gausie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gausie/subscriptions", "organizations_url": "https://api.github.com/users/gausie/orgs", "repos_url": "https://api.github.com/users/gausie/repos", "events_url": "https://api.github.com/users/gausie/events{/privacy}", "received_events_url": "https://api.github.com/users/gausie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-01T15:10:56Z", "updated_at": "2020-06-08T22:09:52Z", "closed_at": "2020-06-08T22:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "### version information\r\n\r\n```\r\npre-commit version: 2.4.0\r\nsys.version:\r\n    3.7.6 (default, May 14 2020, 16:05:05) \r\n    [GCC 9.3.0]\r\nsys.executable: /home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/bin/python\r\nos.name: posix\r\nsys.platform: linux\r\n```\r\n\r\n### error information\r\n\r\n```\r\nAn unexpected error has occurred: CalledProcessError: command: ('/media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/bin/node', '/usr/local/bin/npm', 'install')\r\nreturn code: 2\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    /media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/bin/node: line 2: syntax error near unexpected token `('\r\n    /media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/bin/node: line 2: `export NODE_PATH=/media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/lib/node_modules'\r\n    \r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/error_handler.py\", line 56, in error_handler\r\n    yield\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/main.py\", line 392, in main\r\n    return run(args.config, store, args)\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/commands/run.py\", line 368, in run\r\n    install_hook_envs(hooks, store)\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/repository.py\", line 200, in install_hook_envs\r\n    _hook_install(hook)\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/repository.py\", line 83, in _hook_install\r\n    hook.prefix, hook.language_version, hook.additional_dependencies,\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/languages/node.py\", line 93, in install_environment\r\n    helpers.run_setup_cmd(prefix, ('npm', 'install'))\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/languages/helpers.py\", line 25, in run_setup_cmd\r\n    cmd_output_b(*cmd, cwd=prefix.prefix_dir)\r\n  File \"/home/gausie/.pyenv/versions/3.7.6/envs/rasa-x/lib/python3.7/site-packages/pre_commit/util.py\", line 157, in cmd_output_b\r\n    raise CalledProcessError(returncode, cmd, retcode, stdout_b, stderr_b)\r\npre_commit.util.CalledProcessError: command: ('/media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/bin/node', '/usr/local/bin/npm', 'install')\r\nreturn code: 2\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    /media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/bin/node: line 2: syntax error near unexpected token `('\r\n    /media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/bin/node: line 2: `export NODE_PATH=/media/gausie/Shared (ext4)/cache/pre-commit/repo8x4lee2t/node_env-system/lib/node_modules'\r\n\r\nI know this'll be something to do with my pyenv/weird directory names with spaces but I can't see how to fix this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1482", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1482/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1482/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1482/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1482", "id": 628428964, "node_id": "MDU6SXNzdWU2Mjg0Mjg5NjQ=", "number": 1482, "title": "makefile target is always processed", "user": {"login": "PierreR", "id": 93115, "node_id": "MDQ6VXNlcjkzMTE1", "avatar_url": "https://avatars3.githubusercontent.com/u/93115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PierreR", "html_url": "https://github.com/PierreR", "followers_url": "https://api.github.com/users/PierreR/followers", "following_url": "https://api.github.com/users/PierreR/following{/other_user}", "gists_url": "https://api.github.com/users/PierreR/gists{/gist_id}", "starred_url": "https://api.github.com/users/PierreR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PierreR/subscriptions", "organizations_url": "https://api.github.com/users/PierreR/orgs", "repos_url": "https://api.github.com/users/PierreR/repos", "events_url": "https://api.github.com/users/PierreR/events{/privacy}", "received_events_url": "https://api.github.com/users/PierreR/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-01T13:14:12Z", "updated_at": "2020-06-01T21:38:54Z", "closed_at": "2020-06-01T21:16:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a make file that is not firing (because the timestamp of the build product is later than its deps):\r\n```\r\n\u2192 make examples                                                                                                                                                                                                                            \r\nmake: Nothing to be done for 'examples'.\r\n```\r\nbut when I add this rules to .pre-commit-configuration.yaml\r\n\r\n```\r\n  - repo: local\r\n    hooks:\r\n      - id: make-examples\r\n        name: 'Make examples'\r\n        entry: 'make examples'\r\n        language: system\r\n        pass_filenames: false\r\n```\r\nThe make target is always processed. \r\n\r\nIs there anything I can do to further debug this issue ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1481", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1481/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1481/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1481/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1481", "id": 628065679, "node_id": "MDU6SXNzdWU2MjgwNjU2Nzk=", "number": 1481, "title": "Allow running local hooks defined in `.pre-commit-hooks.yaml`", "user": {"login": "FFY00", "id": 11718923, "node_id": "MDQ6VXNlcjExNzE4OTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/11718923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FFY00", "html_url": "https://github.com/FFY00", "followers_url": "https://api.github.com/users/FFY00/followers", "following_url": "https://api.github.com/users/FFY00/following{/other_user}", "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}", "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions", "organizations_url": "https://api.github.com/users/FFY00/orgs", "repos_url": "https://api.github.com/users/FFY00/repos", "events_url": "https://api.github.com/users/FFY00/events{/privacy}", "received_events_url": "https://api.github.com/users/FFY00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-31T23:20:05Z", "updated_at": "2020-06-01T15:50:34Z", "closed_at": "2020-05-31T23:25:31Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "What I would like to do is very simple:\r\n\r\n`.pre-commit-hooks.yaml`\r\n```yaml\r\n- id: custom\r\n  name: custom\r\n  entry: custom\r\n  language: python\r\n  types: [python]\r\n```\r\n\r\n`.pre-commit-config.yaml`\r\n```yaml\r\nrepos:\r\n  - repo: local\r\n    hooks:\r\n      - id: custom\r\n      - id: custom\r\n        args: ['something']\r\n      - id: custom\r\n        args: ['something-else']\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1479", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1479/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1479/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1479/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1479", "id": 627913522, "node_id": "MDU6SXNzdWU2Mjc5MTM1MjI=", "number": 1479, "title": "random.shuffle's random= argument got deprecated", "user": {"login": "isidentical", "id": 47358913, "node_id": "MDQ6VXNlcjQ3MzU4OTEz", "avatar_url": "https://avatars3.githubusercontent.com/u/47358913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isidentical", "html_url": "https://github.com/isidentical", "followers_url": "https://api.github.com/users/isidentical/followers", "following_url": "https://api.github.com/users/isidentical/following{/other_user}", "gists_url": "https://api.github.com/users/isidentical/gists{/gist_id}", "starred_url": "https://api.github.com/users/isidentical/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isidentical/subscriptions", "organizations_url": "https://api.github.com/users/isidentical/orgs", "repos_url": "https://api.github.com/users/isidentical/repos", "events_url": "https://api.github.com/users/isidentical/events{/privacy}", "received_events_url": "https://api.github.com/users/isidentical/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-31T07:52:49Z", "updated_at": "2020-05-31T19:59:42Z", "closed_at": "2020-05-31T19:59:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Related issue: [bpo-40465](https://bugs.python.org/issue40465).\r\n```\r\nblack..................................................................../home/isidentical/.venv/lib/python3.10/site-packages/pre_commit/languages/helpers.py:95: DeprecationWarning: The *random* parameter to shuffle() has been deprecated\r\nsince Python 3.9 and will be removed in a subsequent version.\r\n  random.shuffle(seq, random=fixed_random.random)\r\nPassed\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1478", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1478/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1478/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1478/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1478", "id": 627911994, "node_id": "MDU6SXNzdWU2Mjc5MTE5OTQ=", "number": 1478, "title": "Tests not passing in pre-commit", "user": {"login": "MatteoGioioso", "id": 43592430, "node_id": "MDQ6VXNlcjQzNTkyNDMw", "avatar_url": "https://avatars1.githubusercontent.com/u/43592430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatteoGioioso", "html_url": "https://github.com/MatteoGioioso", "followers_url": "https://api.github.com/users/MatteoGioioso/followers", "following_url": "https://api.github.com/users/MatteoGioioso/following{/other_user}", "gists_url": "https://api.github.com/users/MatteoGioioso/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatteoGioioso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatteoGioioso/subscriptions", "organizations_url": "https://api.github.com/users/MatteoGioioso/orgs", "repos_url": "https://api.github.com/users/MatteoGioioso/repos", "events_url": "https://api.github.com/users/MatteoGioioso/events{/privacy}", "received_events_url": "https://api.github.com/users/MatteoGioioso/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-05-31T07:40:22Z", "updated_at": "2020-05-31T08:12:33Z", "closed_at": "2020-05-31T07:58:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, my tests are passing, but when I run the pre-commit they fail, like if they are a version behind or cached. I have read somewhere that pre-commit is run against only staged files and therefore that would make sense to fail. However I just want to run my tests as they are at the moment of the pre-commit.\r\nI read somewhere that you might want to pass `--all-files` to `pre-commit run`, but not really sure on how to run those in the pre-commit.yaml\r\n\r\nThis is my pre-commit config:\r\n\r\n```yaml\r\nrepos:\r\n  - repo: https://github.com/dnephin/pre-commit-golang\r\n    rev: v0.3.5\r\n    hooks:\r\n      - id: go-fmt\r\n      - id: go-imports\r\n  - repo: local # this one fails\r\n    hooks:\r\n      - id: test\r\n        name: test\r\n        language: golang\r\n        entry: make test\r\n        verbose: true\r\n        always_run: true\r\n\r\n```\r\n\r\nthis is the make command:\r\n\r\n```\r\ntest:\r\n\tGO_ENV=testing go test ./...\r\n```\r\n\r\n`pre-commit version: 2.4.0`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1477", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1477/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1477/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1477/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1477", "id": 627797680, "node_id": "MDU6SXNzdWU2Mjc3OTc2ODA=", "number": 1477, "title": "Running pre-commit fails when using a conda virtual environment", "user": {"login": "ahmedkrmn", "id": 20889958, "node_id": "MDQ6VXNlcjIwODg5OTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/20889958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedkrmn", "html_url": "https://github.com/ahmedkrmn", "followers_url": "https://api.github.com/users/ahmedkrmn/followers", "following_url": "https://api.github.com/users/ahmedkrmn/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedkrmn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedkrmn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedkrmn/subscriptions", "organizations_url": "https://api.github.com/users/ahmedkrmn/orgs", "repos_url": "https://api.github.com/users/ahmedkrmn/repos", "events_url": "https://api.github.com/users/ahmedkrmn/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedkrmn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 352543100, "node_id": "MDU6TGFiZWwzNTI1NDMxMDA=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/python", "name": "python", "color": "3776ab", "default": false, "description": null}, {"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-30T19:02:40Z", "updated_at": "2020-05-30T20:48:57Z", "closed_at": "2020-05-30T20:48:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running `pre-commit run --all-files` fails when running on a conda environemnt.\r\nBelow is the detailed output:\r\n```\r\n[INFO] Installing environment for https://github.com/psf/black.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nAn unexpected error has occurred: CalledProcessError: command: ('c:\\\\users\\\\ahmedkaraman\\\\anaconda3\\\\envs\\\\test\\\\python.exe', '-mvirtualenv', 'C:\\\\Users\\\\AhmedKaraman\\\\.cache\\\\pre-commit\\\\repor5uf9mc5\\\\py_env-python3.6', '-p', 'C:\\\\python36\\\\python.exe')\r\nreturn code: 1\r\nexpected return code: 0\r\nstdout:\r\n    FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\python36\\\\python.exe'\r\n\r\nstderr: (none)\r\nCheck the log at C:\\Users\\AhmedKaraman\\.cache\\pre-commit\\pre-commit.log\r\n```\r\n\r\nIt appears that the library expects Python to be installed in `C:\\\\python36\\\\python.exe`, but this isn't the case when using Anaconda.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1476", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1476/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1476/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1476/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1476", "id": 627209850, "node_id": "MDU6SXNzdWU2MjcyMDk4NTA=", "number": 1476, "title": "Cannot run --files on Windows", "user": {"login": "harrybiddle", "id": 5887227, "node_id": "MDQ6VXNlcjU4ODcyMjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5887227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harrybiddle", "html_url": "https://github.com/harrybiddle", "followers_url": "https://api.github.com/users/harrybiddle/followers", "following_url": "https://api.github.com/users/harrybiddle/following{/other_user}", "gists_url": "https://api.github.com/users/harrybiddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/harrybiddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harrybiddle/subscriptions", "organizations_url": "https://api.github.com/users/harrybiddle/orgs", "repos_url": "https://api.github.com/users/harrybiddle/repos", "events_url": "https://api.github.com/users/harrybiddle/events{/privacy}", "received_events_url": "https://api.github.com/users/harrybiddle/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713405, "node_id": "MDU6TGFiZWw4NTcxMzQwNQ==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-29T11:47:29Z", "updated_at": "2020-06-09T08:54:30Z", "closed_at": "2020-06-08T22:08:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "(pre-commit version 2.4.0) We're running in to an odd issue on Windows\r\n\r\n```\r\n$ pre-commit run --files my_file.py\r\nblack................................................(no files to check)Skipped\r\n```\r\n\r\nHowever, running `pre-commit run --all-files` _will_ correctly format the file. Equally, running `pre-commit run --files my_file.py` in the same repository on a Mac works fine.\r\n\r\nIt's like the file is somehow not being read in Windows... Has anybody else encountered this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1475", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1475/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1475/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1475/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1475", "id": 626376117, "node_id": "MDU6SXNzdWU2MjYzNzYxMTc=", "number": 1475, "title": "Use appdirs to determine OS specific cache dir", "user": {"login": "hoefling", "id": 4455652, "node_id": "MDQ6VXNlcjQ0NTU2NTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4455652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoefling", "html_url": "https://github.com/hoefling", "followers_url": "https://api.github.com/users/hoefling/followers", "following_url": "https://api.github.com/users/hoefling/following{/other_user}", "gists_url": "https://api.github.com/users/hoefling/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoefling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoefling/subscriptions", "organizations_url": "https://api.github.com/users/hoefling/orgs", "repos_url": "https://api.github.com/users/hoefling/repos", "events_url": "https://api.github.com/users/hoefling/events{/privacy}", "received_events_url": "https://api.github.com/users/hoefling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T09:52:32Z", "updated_at": "2020-05-28T15:54:31Z", "closed_at": "2020-05-28T15:54:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have noticed that `pre-commit` stores its cache into `~/.cache` and not into `~/Library/Caches` on MacOS due to how `_get_default_directory()` is implemented:\r\n\r\nhttps://github.com/pre-commit/pre-commit/blob/d71699d7cdd02d54568209711934ad35c8e89dd7/pre_commit/store.py#L33-L36\r\n\r\nI don't consider this to be a real issue, it's only something to keep in mind when freeing disk space. However, maybe it would be more elegant to use something like [`appdirs`](https://pypi.org/project/appdirs/) to find the OS specific cache dir. The above snippet could then become\r\n```python\r\nret = os.environ.get('PRE_COMMIT_HOME') or appdirs.user_cache_dir('pre-commit')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1473", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1473/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1473/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1473/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1473", "id": 626002592, "node_id": "MDU6SXNzdWU2MjYwMDI1OTI=", "number": 1473, "title": "Global hooks (core.hooksPath)", "user": {"login": "hoshsadiq", "id": 600045, "node_id": "MDQ6VXNlcjYwMDA0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/600045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hoshsadiq", "html_url": "https://github.com/hoshsadiq", "followers_url": "https://api.github.com/users/hoshsadiq/followers", "following_url": "https://api.github.com/users/hoshsadiq/following{/other_user}", "gists_url": "https://api.github.com/users/hoshsadiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/hoshsadiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hoshsadiq/subscriptions", "organizations_url": "https://api.github.com/users/hoshsadiq/orgs", "repos_url": "https://api.github.com/users/hoshsadiq/repos", "events_url": "https://api.github.com/users/hoshsadiq/events{/privacy}", "received_events_url": "https://api.github.com/users/hoshsadiq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-27T20:19:39Z", "updated_at": "2020-05-28T15:52:09Z", "closed_at": "2020-05-28T15:52:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "considering this #718 was merged to address #663 , is there a way to run global hooks currently? If not, would it be possible to request this as a feature?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1472", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1472/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1472/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1472/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1472", "id": 625633251, "node_id": "MDU6SXNzdWU2MjU2MzMyNTE=", "number": 1472, "title": "UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc0 in position 9: invalid start byte", "user": {"login": "DrFobos", "id": 36341495, "node_id": "MDQ6VXNlcjM2MzQxNDk1", "avatar_url": "https://avatars1.githubusercontent.com/u/36341495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DrFobos", "html_url": "https://github.com/DrFobos", "followers_url": "https://api.github.com/users/DrFobos/followers", "following_url": "https://api.github.com/users/DrFobos/following{/other_user}", "gists_url": "https://api.github.com/users/DrFobos/gists{/gist_id}", "starred_url": "https://api.github.com/users/DrFobos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DrFobos/subscriptions", "organizations_url": "https://api.github.com/users/DrFobos/orgs", "repos_url": "https://api.github.com/users/DrFobos/repos", "events_url": "https://api.github.com/users/DrFobos/events{/privacy}", "received_events_url": "https://api.github.com/users/DrFobos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713405, "node_id": "MDU6TGFiZWw4NTcxMzQwNQ==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-27T11:59:34Z", "updated_at": "2020-05-27T22:02:42Z", "closed_at": "2020-05-27T22:02:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, there! Get such error on commit.\r\n\r\nProbably, because of cyrillic symbols in user name: 'C:\\\\Users\\\\\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\\...'.\r\n\r\nIs there a way to avoid this problem exept renaming user?\r\n\r\nThanks for your cool product!\r\n\r\n### version information\r\n\r\n```\r\npre-commit version: 2.4.0\r\nsys.version:\r\n    3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)]\r\nsys.executable: c:\\program files\\git\\dev\\core\\venv\\scripts\\python.exe\r\nos.name: nt\r\nsys.platform: win32\r\n```\r\n\r\n### error information\r\n\r\n```\r\nAn unexpected error has occurred: UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc0 in position 9: invalid start byte\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\error_handler.py\", line 56, in error_handler\r\n    yield\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\main.py\", line 372, in main\r\n    args=args.rest[1:],\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\commands\\hook_impl.py\", line 217, in hook_impl\r\n    return retv | run(config, store, ns)\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\commands\\run.py\", line 357, in run\r\n    for hook in all_hooks(config, store)\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 206, in all_hooks\r\n    for repo in root_config['repos']\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 207, in <genexpr>\r\n    for hook in _repository_hooks(repo, store, root_config)\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 182, in _repository_hooks\r\n    return _cloned_repository_hooks(repo_config, store, root_config)\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 162, in _cloned_repository_hooks\r\n    for hook in repo_config['hooks']\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 162, in <listcomp>\r\n    for hook in repo_config['hooks']\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 110, in _hook\r\n    ret['language_version'] = languages[lang].get_default_version()\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\languages\\python.py\", line 113, in get_default_version\r\n    if _find_by_py_launcher(exe):\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\languages\\python.py\", line 72, in _find_by_py_launcher\r\n    return cmd_output(*cmd)[1].strip()\r\n  File \"c:\\program files\\git\\dev\\core\\venv\\lib\\site-packages\\pre_commit\\util.py\", line 164, in cmd_output\r\n    stdout = stdout_b.decode() if stdout_b is not None else None\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xc0 in position 9: invalid start byte\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1470", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1470/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1470/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1470/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1470", "id": 625315336, "node_id": "MDU6SXNzdWU2MjUzMTUzMzY=", "number": 1470, "title": "exclude and files filters", "user": {"login": "k4ch0", "id": 1848897, "node_id": "MDQ6VXNlcjE4NDg4OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1848897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/k4ch0", "html_url": "https://github.com/k4ch0", "followers_url": "https://api.github.com/users/k4ch0/followers", "following_url": "https://api.github.com/users/k4ch0/following{/other_user}", "gists_url": "https://api.github.com/users/k4ch0/gists{/gist_id}", "starred_url": "https://api.github.com/users/k4ch0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/k4ch0/subscriptions", "organizations_url": "https://api.github.com/users/k4ch0/orgs", "repos_url": "https://api.github.com/users/k4ch0/repos", "events_url": "https://api.github.com/users/k4ch0/events{/privacy}", "received_events_url": "https://api.github.com/users/k4ch0/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-27T01:55:12Z", "updated_at": "2020-05-28T04:02:58Z", "closed_at": "2020-05-28T04:02:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI have this project layout:\r\n\r\n```\r\n.\r\n\u251c\u2500\u2500 data\r\n\u251c\u2500\u2500 defaults\r\n\u251c\u2500\u2500 docs\r\n\u251c\u2500\u2500 etc\r\n\u251c\u2500\u2500 inventories\r\n\u251c\u2500\u2500 output\r\n\u251c\u2500\u2500 playbooks\r\n\u251c\u2500\u2500 plugins\r\n\u251c\u2500\u2500 roles\r\n\u251c\u2500\u2500 scripts\r\n\u251c\u2500\u2500 templates\r\n\u251c\u2500\u2500 terraform\r\n\u251c\u2500\u2500 tests\r\n\u2514\u2500\u2500 vars\r\n```\r\n\r\nI want to configure `exclude` and `files` as:\r\n\r\n```\r\nrepos:\r\n- repo: https://github.com/pre-commit/pre-commit-hooks\r\n  rev: v2.4.0\r\n  hooks:\r\n  - id: trailing-whitespace\r\n  - id: end-of-file-fixer\r\n  - id: check-yaml\r\n  - id: check-added-large-files\r\n- repo: https://github.com/psf/black\r\n  rev: 19.10b0\r\n  hooks:\r\n    - id: black\r\n\r\nfiles: |\r\n  ^defaults/\r\n  ^docs/\r\n  ^etc/\r\n  ^inventories/\r\n  ^roles/\r\n  ^scripts/\r\n  ^templates/\r\n  ^terraform/\r\n  ^tests/\r\n  ^vars/\r\n   * #For all the files on root directory\r\n\r\nexclude: |\r\n  ^data/\r\n  ^output/\r\n  ^plugins/\r\n```\r\n\r\nBut filter it is not working that way.\r\n\r\nWhat is the correct way to perform that filtering?\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1469", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1469/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1469/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1469/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1469", "id": 624714436, "node_id": "MDU6SXNzdWU2MjQ3MTQ0MzY=", "number": 1469, "title": "Segfaults and deleting/reseting unstaged changes", "user": {"login": "Liamdoult", "id": 12427907, "node_id": "MDQ6VXNlcjEyNDI3OTA3", "avatar_url": "https://avatars0.githubusercontent.com/u/12427907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Liamdoult", "html_url": "https://github.com/Liamdoult", "followers_url": "https://api.github.com/users/Liamdoult/followers", "following_url": "https://api.github.com/users/Liamdoult/following{/other_user}", "gists_url": "https://api.github.com/users/Liamdoult/gists{/gist_id}", "starred_url": "https://api.github.com/users/Liamdoult/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Liamdoult/subscriptions", "organizations_url": "https://api.github.com/users/Liamdoult/orgs", "repos_url": "https://api.github.com/users/Liamdoult/repos", "events_url": "https://api.github.com/users/Liamdoult/events{/privacy}", "received_events_url": "https://api.github.com/users/Liamdoult/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-26T08:53:59Z", "updated_at": "2020-06-02T14:58:57Z", "closed_at": "2020-05-28T16:10:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have had crazy bug with `pre-commit`. It may not be a `pre-commit` bug but rather a `pre-commit-hooks` issue. But either way, I would appreciate support with resolving this issue.\r\n\r\n__Context__\r\nBefore I explain the issue, I would like to provide some context. \r\n\r\npre-commit 2.4.0\r\nPython 3.7.3\r\n\r\nHere is my `.pre-commit-config.yaml` file:\r\n``` yaml\r\nrepos:\r\n-   repo: https://github.com/pre-commit/pre-commit-hooks\r\n    rev: v3.1.0\r\n    hooks:\r\n    -   id: check-yaml\r\n    -   id: end-of-file-fixer\r\n    -   id: trailing-whitespace\r\n\r\n-   repo: https://github.com/pre-commit/mirrors-yapf\r\n    rev: 'v0.30.0'\r\n    hooks:\r\n    -   id: yapf\r\n\r\n-   repo: local\r\n    hooks:\r\n    -   id: pylint\r\n        name: pylint\r\n        entry: pylint\r\n        language: system\r\n        types: [python]\r\n        exclude: test/|setup.py\r\n```\r\n\r\nWe are using `yapf` for formatting, `pylint` for symantics and the usual `pre-commit-hooks`. This has been working well for us for a few months now. We had not updated or changed configs for this project.\r\n\r\n__Issue__\r\nI have been receiving segmentation faults when attempting to run pre-commit. This applies to both manual run and as a git hook:\r\n\r\n![image](https://user-images.githubusercontent.com/12427907/82879516-f245d500-9f34-11ea-998a-ee5f1fd4b1ad.png)\r\n\r\nThis has also resulted in tracked unstaged changes to either be reset or deleted:\r\n\r\n![image](https://user-images.githubusercontent.com/12427907/82880129-e1e22a00-9f35-11ea-8164-f3ba6c1ab4eb.png)\r\n\r\n__Attempts__\r\nIn an attempt to resolve this I have tried:\r\n- Updating/Reinstalling pre-commit\r\n- Updating tasks\r\n- Resetting the hook\r\n\r\n__Steps to reproduce___\r\nI have note yet been able to figure out where things went wrong, so it is hard to replicate.\r\n\r\nCould you guide me on where I can collect more information on this issue for you?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1468", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1468/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1468/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1468/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1468", "id": 624541711, "node_id": "MDU6SXNzdWU2MjQ1NDE3MTE=", "number": 1468, "title": "Finding the path of the installed hooks", "user": {"login": "paw-lu", "id": 30049606, "node_id": "MDQ6VXNlcjMwMDQ5NjA2", "avatar_url": "https://avatars1.githubusercontent.com/u/30049606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paw-lu", "html_url": "https://github.com/paw-lu", "followers_url": "https://api.github.com/users/paw-lu/followers", "following_url": "https://api.github.com/users/paw-lu/following{/other_user}", "gists_url": "https://api.github.com/users/paw-lu/gists{/gist_id}", "starred_url": "https://api.github.com/users/paw-lu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paw-lu/subscriptions", "organizations_url": "https://api.github.com/users/paw-lu/orgs", "repos_url": "https://api.github.com/users/paw-lu/repos", "events_url": "https://api.github.com/users/paw-lu/events{/privacy}", "received_events_url": "https://api.github.com/users/paw-lu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-26T01:14:28Z", "updated_at": "2020-06-09T07:25:27Z", "closed_at": "2020-05-26T02:18:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love the library. Thanks for all of the great work here!\r\n\r\nIs there a convenient way to find where the command is located for installed hooks? For some background I'm looking for ways to integrate pre-commit linters and formatters (flake8 and black) into VS Code by [specifying the full path of the linter executable](https://github.com/Microsoft/vscode-python/issues/1707#issuecomment-391153765).\r\n\r\nFor example, if I use the flake8 hook\r\n\r\n```yaml\r\n  - repo: https://gitlab.com/pycqa/flake8\r\n    rev: 3.8.1\r\n    hooks:\r\n      - id: flake8\r\n```\r\n\r\nand run `pre-commit install`, once I attempt to commit a file pre-commit will create a virtual environment, install flake8, and run it against the staged file.\r\n\r\nIs there a way to find where exactly this flake8 is located? I've found `~/.cache/pre-commit`, but it's not obvious to me which repo and bin correspond to which hook.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1466", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1466/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1466/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1466/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1466", "id": 623465822, "node_id": "MDU6SXNzdWU2MjM0NjU4MjI=", "number": 1466, "title": "Local hooks are executed multiple times per run", "user": {"login": "Cielquan", "id": 43916661, "node_id": "MDQ6VXNlcjQzOTE2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/43916661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cielquan", "html_url": "https://github.com/Cielquan", "followers_url": "https://api.github.com/users/Cielquan/followers", "following_url": "https://api.github.com/users/Cielquan/following{/other_user}", "gists_url": "https://api.github.com/users/Cielquan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cielquan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cielquan/subscriptions", "organizations_url": "https://api.github.com/users/Cielquan/orgs", "repos_url": "https://api.github.com/users/Cielquan/repos", "events_url": "https://api.github.com/users/Cielquan/events{/privacy}", "received_events_url": "https://api.github.com/users/Cielquan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-22T20:41:52Z", "updated_at": "2020-05-23T08:27:36Z", "closed_at": "2020-05-22T23:46:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "EDIT: \r\nAfter further investigation I think its a `mypy` issue after all? I will open another issue at mypy.\r\n\r\n-----\r\n\r\nAs follow-up to #1455 I use a caller script to call `mypy` and  `pylint` from the `pre-commit` hook.\r\n\r\nWhile looking into a topic I have with `mypy` I found out that both `mypy` and `pylint` are actually called twice by `pre-commit`.\r\n\r\nWhen I run `pre-commit run --all-files` or let it be called by `tox` (makes no difference) both entry points in the `local` `repo` are called twice.\r\n\r\nI found this out by adding this snippet\r\n```python\r\n    with open(\"testfile\", \"a\") as f:\r\n        f.write(sys.executable)\r\n        f.write(\"\\n\" + str(sys.argv[:]) + \"\\n\\n\\n\")\r\n```\r\nto the top of the `main()` function in my caller script.\r\n\r\nThe result is here:\r\n\r\n```\r\n/home/krys/Python_Projects/.testing/python_test/.tox/dev/bin/python3\r\n['./.pre_commit_tool_runner', 'pylint', 'pre-commit,dev', '.pre_commit_tool_runner', 'tests/test_python_test.py']\r\n\r\n\r\n/home/krys/Python_Projects/.testing/python_test/.tox/dev/bin/python3\r\n['./.pre_commit_tool_runner', 'pylint', 'pre-commit,dev', 'src/python_test/python_tester.py', 'docs/source/conf.py', 'src/python_test/__init__.py', 'tests/conftest.py']\r\n\r\n\r\n/home/krys/Python_Projects/.testing/python_test/.tox/dev/bin/python3\r\n['./.pre_commit_tool_runner', 'mypy', 'pre-commit,dev', '--warn-unused-ignores', 'src/python_test/python_tester.py', 'docs/source/conf.py', 'src/python_test/__init__.py', 'tests/conftest.py']\r\n\r\n\r\n/home/krys/Python_Projects/.testing/python_test/.tox/dev/bin/python3\r\n['./.pre_commit_tool_runner', 'mypy', 'pre-commit,dev', '--warn-unused-ignores', '.pre_commit_tool_runner', 'tests/test_python_test.py']\r\n```\r\n\r\nIf you repeat the test, the arguments for the separate calls do **not** change. Even the order stays.\r\n\r\n- Is this behavior intended? \r\n- If yes, can one deactivate it?\r\n\r\nThis behavior hurts `mypy`  by a great margin. If I call `.tox/pre-commit/bin/mypy tests/ src/python_test/` my result is a *success* but if i call `.tox/pre-commit/bin/mypy tests/` the result is an *error* because `python_test` is imported in the tests and is not available. The same is happening when the call is split like one can see above.\r\n\r\nBelow you can find the configs:\r\n\r\n-----\r\n\r\n`.pre_commit_tool_runner` :\r\n```python\r\n#!/usr/bin/env python3\r\n\"\"\"Script to call executables in `tox` envs\r\n\r\nThe script takes two mandatory arguments:\r\n1. the executable to call like e.g. `pylint`\r\n2. a string with comma separated `tox` envs to check for the executable\r\n\r\nAll other arguments after are passed to the tool on call.\r\n\r\nThe script considers OS and calls the tool accordingly.\r\n\"\"\"\r\nimport subprocess\r\nimport sys\r\n\r\nfrom pathlib import Path\r\n\r\n\r\ndef main():\r\n    \"\"\"Call given `tool` form given `tox` env\"\"\"\r\n    tool = sys.argv[1]\r\n\r\n    if sys.platform == \"win32\":\r\n        exe = Path(\"Scripts/\" + tool + \".exe\")\r\n    else:\r\n        exe = Path(\"bin/\" + tool)\r\n\r\n    tox = Path(\".tox\")\r\n    envs = sys.argv[2].split(\",\")\r\n\r\n    cmd = None\r\n    for env in envs:\r\n        path = Path(tox / env / exe)\r\n        if path.is_file():\r\n            cmd = (str(path), *sys.argv[3:])\r\n\r\n    if cmd is None:\r\n        print(\r\n            \"No '{}' executable found. Make sure one of the \"\r\n            \"following `tox` envs is accessible: {}\".format(tool, envs)\r\n        )\r\n        return 1\r\n\r\n    return subprocess.call(cmd)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    sys.exit(main())\r\n```\r\n\r\n`.pre-commit-config.yaml`:\r\n```yaml\r\nminimum_pre_commit_version: \"1.15\"\r\ndefault_stages: [commit, push]\r\n\r\nrepos:\r\n...\r\n  #: Hooks managed via tox `pre-commit` venv\r\n  - repo: local\r\n    hooks:\r\n      #: pylint - python linter\r\n      - id: pylint\r\n        name: pylint\r\n        entry: ./.pre_commit_tool_runner pylint pre-commit,dev\r\n        language: system\r\n        types: [python]\r\n      #: mypy - python type checker\r\n      - id: mypy\r\n        args: [\"--warn-unused-ignores\"]\r\n        name: mypy\r\n        entry: ./.pre_commit_tool_runner mypy pre-commit,dev\r\n        language: system\r\n        types: [python]\r\n...\r\n```\r\n\r\n`tox.ini`:\r\n```ini\r\n...\r\n[testenv:pre-commit]\r\ndescription = format and check the code\r\npassenv =\r\n    SSH_AUTH_SOCK\r\nextras =\r\n    pre-commit\r\n    testing\r\n    docs\r\nignore_errors = True\r\ncommands =\r\n    pre-commit run --all-files --show-diff-on-failure\r\n    python -c 'import pathlib;print(\"HINT: run \\\"\\{\\} install\\\" to add checks as pre-commit hook\".format(pathlib.Path(r\"{envdir}\")/\"bin\"/\"pre-commit\"))'\r\n...\r\n```\r\n\r\n`Project structure`:\r\n- python_test\r\n  - src\r\n    - python_test\r\n      - __ init __.py\r\n      - python_tester.py\r\n      - py.typed\r\n  - tests\r\n    - test_python_tester.py\r\n  - docs\r\n    - source\r\n      - conf.py\r\n  - .pre-commit-config.yaml\r\n  - .pre_commit_tool_runner\r\n  - pyproject.toml\r\n  - tox.ini\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1465", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1465/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1465/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1465/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1465", "id": 622606014, "node_id": "MDU6SXNzdWU2MjI2MDYwMTQ=", "number": 1465, "title": "The `PATH` variable is not set properly for Gui Git clients", "user": {"login": "stevenxxiu", "id": 2058940, "node_id": "MDQ6VXNlcjIwNTg5NDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2058940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenxxiu", "html_url": "https://github.com/stevenxxiu", "followers_url": "https://api.github.com/users/stevenxxiu/followers", "following_url": "https://api.github.com/users/stevenxxiu/following{/other_user}", "gists_url": "https://api.github.com/users/stevenxxiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenxxiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenxxiu/subscriptions", "organizations_url": "https://api.github.com/users/stevenxxiu/orgs", "repos_url": "https://api.github.com/users/stevenxxiu/repos", "events_url": "https://api.github.com/users/stevenxxiu/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenxxiu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-21T16:01:44Z", "updated_at": "2020-05-22T16:31:49Z", "closed_at": "2020-05-22T16:09:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "For Gui Git clients like SmartGit, the `PATH` variable isn't set correctly to locate the current virtualenv, and when it runs the Git hook it will give errors as it locates the wrong Python executable.\r\n\r\nTo make it work, I need to modify my `.git/hooks/pre-commit` and add the following line:\r\n\r\n    os.environ['PATH'] += os.pathsep + os.path.expanduser('~/.virtualenvs/myproject/bin/')\r\n\r\nIs there some way to make this less manual and automatically add this when I install `pre-commit` for a new project?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1462", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1462/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1462/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1462/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1462", "id": 620671074, "node_id": "MDU6SXNzdWU2MjA2NzEwNzQ=", "number": 1462, "title": "Installing new environment every commit", "user": {"login": "steven-murray", "id": 1272030, "node_id": "MDQ6VXNlcjEyNzIwMzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1272030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steven-murray", "html_url": "https://github.com/steven-murray", "followers_url": "https://api.github.com/users/steven-murray/followers", "following_url": "https://api.github.com/users/steven-murray/following{/other_user}", "gists_url": "https://api.github.com/users/steven-murray/gists{/gist_id}", "starred_url": "https://api.github.com/users/steven-murray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steven-murray/subscriptions", "organizations_url": "https://api.github.com/users/steven-murray/orgs", "repos_url": "https://api.github.com/users/steven-murray/repos", "events_url": "https://api.github.com/users/steven-murray/events{/privacy}", "received_events_url": "https://api.github.com/users/steven-murray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-19T04:37:46Z", "updated_at": "2020-05-19T04:41:24Z", "closed_at": "2020-05-19T04:38:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason, `pre-commit` has started to install a new environment every single commit (it never used to). I'm not sure if it's just the newer version of pre-commit that's doing it, but it takes so long every commit! It tells me every time:\r\n\r\n```\r\n[INFO] Installing environment for git://github.com/pre-commit/pre-commit-hooks.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://gitlab.com/pycqa/flake8.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://github.com/psf/black.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n```\r\n\r\nI'm using pre-commit 2.4.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1461", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1461/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1461/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1461/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1461", "id": 619491953, "node_id": "MDU6SXNzdWU2MTk0OTE5NTM=", "number": 1461, "title": "How to deal with `git commit --all`?", "user": {"login": "kulti", "id": 1286683, "node_id": "MDQ6VXNlcjEyODY2ODM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1286683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kulti", "html_url": "https://github.com/kulti", "followers_url": "https://api.github.com/users/kulti/followers", "following_url": "https://api.github.com/users/kulti/following{/other_user}", "gists_url": "https://api.github.com/users/kulti/gists{/gist_id}", "starred_url": "https://api.github.com/users/kulti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kulti/subscriptions", "organizations_url": "https://api.github.com/users/kulti/orgs", "repos_url": "https://api.github.com/users/kulti/repos", "events_url": "https://api.github.com/users/kulti/events{/privacy}", "received_events_url": "https://api.github.com/users/kulti/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-16T14:52:18Z", "updated_at": "2020-05-16T17:24:05Z", "closed_at": "2020-05-16T17:24:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love how to pre-commit deal with fixer-hooks. They not change staged diffs.\r\n\r\nIf I have unstaged diffs I often do stage and commit in one operation: `git commit -a`.\r\n\r\nIs that possible to stage current diffs and keep fix is unstaged? Or maybe you have other good approach to how to deal with `git commit -a`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1460", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1460/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1460/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1460/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1460", "id": 619465590, "node_id": "MDU6SXNzdWU2MTk0NjU1OTA=", "number": 1460, "title": "allow declaring local hooks with less repetition", "user": {"login": "mvdan", "id": 3576549, "node_id": "MDQ6VXNlcjM1NzY1NDk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3576549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvdan", "html_url": "https://github.com/mvdan", "followers_url": "https://api.github.com/users/mvdan/followers", "following_url": "https://api.github.com/users/mvdan/following{/other_user}", "gists_url": "https://api.github.com/users/mvdan/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvdan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvdan/subscriptions", "organizations_url": "https://api.github.com/users/mvdan/orgs", "repos_url": "https://api.github.com/users/mvdan/repos", "events_url": "https://api.github.com/users/mvdan/events{/privacy}", "received_events_url": "https://api.github.com/users/mvdan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-16T12:44:08Z", "updated_at": "2020-05-16T17:58:01Z", "closed_at": "2020-05-16T15:55:32Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "First of all, thanks for working on open source :)\r\n\r\nA few people have been asking that I add a `.pre-commit-hooks.yaml` file to one of my repos, but in the interest of not adding more top-level \"dot files\", I ended up just adding a short section to the README, like one might do for Docker or other ways to run a tool: https://github.com/mvdan/sh#pre-commit\r\n\r\nThis works well, because the YAML is really just a few lines. However, I was thinking that pre-commit could go a bit further and allow declaring only the bare minimum in one's YAML. Below is what is currently in the README:\r\n\r\n```\r\n  - repo: local\r\n    hooks:\r\n      - id: shfmt\r\n        name: shfmt\r\n        minimum_pre_commit_version: 2.4.0\r\n        language: golang\r\n        additional_dependencies: [mvdan.cc/sh/v3/cmd/shfmt@v3.1.1]\r\n        entry: shfmt\r\n        args: [-w]\r\n        types: [shell]\r\n```\r\n\r\nIdeally, I think this should be enough:\r\n\r\n```\r\n  - repo: local\r\n    hooks:\r\n      - id: shfmt\r\n        language: golang\r\n        additional_dependencies: [mvdan.cc/sh/v3/cmd/shfmt@v3.1.1]\r\n        args: [-w]\r\n        types: [shell]\r\n```\r\n\r\nHere's my reasoning:\r\n\r\n1) `name` could default to `id` when not defined\r\n\r\n2) `entry` seems redundant; from `language: golang` and `additional_dependencies: [mvdan.cc/sh/v3/cmd/shfmt@v3.1.1]`, we could infer that we're running `shfmt`. That is, when `additional_dependencies` is just one Go main package. Alternatively, we could fall back to `id` when not defined.\r\n\r\n3) I assume `minimum_pre_commit_version` could be ommitted after some time, perhaps a year after these changes have been released in a stable version. Or I could just rely on the user to define it at the top level, instead of for each hook separately.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1458", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1458/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1458/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1458/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1458", "id": 618678635, "node_id": "MDU6SXNzdWU2MTg2Nzg2MzU=", "number": 1458, "title": "pre-commit repeatedly installs environments when nothing has changed", "user": {"login": "zaneselvans", "id": 596279, "node_id": "MDQ6VXNlcjU5NjI3OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/596279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zaneselvans", "html_url": "https://github.com/zaneselvans", "followers_url": "https://api.github.com/users/zaneselvans/followers", "following_url": "https://api.github.com/users/zaneselvans/following{/other_user}", "gists_url": "https://api.github.com/users/zaneselvans/gists{/gist_id}", "starred_url": "https://api.github.com/users/zaneselvans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zaneselvans/subscriptions", "organizations_url": "https://api.github.com/users/zaneselvans/orgs", "repos_url": "https://api.github.com/users/zaneselvans/repos", "events_url": "https://api.github.com/users/zaneselvans/events{/privacy}", "received_events_url": "https://api.github.com/users/zaneselvans/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-15T03:53:12Z", "updated_at": "2020-05-18T19:15:07Z", "closed_at": "2020-05-18T19:11:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "For some reason,`pre-commit` has recently started re-installing environments for all of the hooks every time it runs. I have tried updating all the hooks, as well as running `pre-commit uninstall` followed by `pre-commit install --install-hooks` to re-set the environment, but it continues with the same behavior or installing all of the environments with every commit. There are no errors, and it says it's going to save and re-use the installed environment, but it never does.  The following output now precedes any commit:\r\n\r\n```sh\r\n$ pre-commit run --all-files\r\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://github.com/pre-commit/mirrors-autopep8.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://github.com/pre-commit/mirrors-isort.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://github.com/PyCQA/flake8.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://github.com/PyCQA/doc8.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n[INFO] Installing environment for https://github.com/PyCQA/bandit.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\n```\r\n\r\nI've looked in the `.git/hooks/` directory and the pre-commit script is there. And when I run `pre-commit uninstall` it disappears as expected, and is replaced when I re-install.  Is there something else I can clear out? Are there known reasons why the environments might not be getting saved? I've searched around a bit but have not found any references to this problem.\r\n\r\nI'm running pre-commit v2.4.0 on Ubuntu 20.04. The repository contains mostly python files.  The contents of my `.pre-commit-config.yaml` file is:\r\n\r\n```yaml\r\nrepos:\r\n\r\n# Quick content checks based on grepping for python specific patterns:\r\n- repo: https://github.com/pre-commit/pygrep-hooks\r\n  rev: v1.5.1\r\n  hooks:\r\n  - id: python-check-blanket-noqa   # Prohibit overly broad QA exclusions.\r\n  - id: python-no-eval              # Never use eval() it's dangerous.\r\n  - id: python-no-log-warn          # logger.warning(), not old .warn()\r\n\r\n# Other file formatting, plus common Git mistakes & text file standardization:\r\n- repo: https://github.com/pre-commit/pre-commit-hooks\r\n  rev: v3.0.0\r\n  hooks:\r\n  - id: check-added-large-files # Don't accidentally commit giant files.\r\n  - id: check-merge-conflict    # Watch for lingering merge markers.\r\n  - id: check-yaml              # Validate all YAML files.\r\n  - id: check-case-conflict     # Avoid case sensitivity in file names.\r\n  - id: debug-statements        # Watch for lingering debugger calls.\r\n  - id: end-of-file-fixer       # Ensure there's a newline at EOF.\r\n  - id: mixed-line-ending       # Only newlines, no line-feeds.\r\n  - id: trailing-whitespace     # Remove trailing whitespace.\r\n  - id: name-tests-test         # Follow PyTest naming convention.\r\n\r\n# Attempt to enforce standardized PEP8 style formatting:\r\n- repo: https://github.com/pre-commit/mirrors-autopep8\r\n  rev: v1.5.2\r\n  hooks:\r\n  - id: autopep8\r\n\r\n# Make sure import statements are sorted uniformly.\r\n- repo: https://github.com/pre-commit/mirrors-isort\r\n  rev: v4.3.21\r\n  hooks:\r\n  - id: isort\r\n\r\n# Check for PEP8 non-compliance, code complexity, and syntax errors:\r\n# Make sure the following plugins are installed as well:\r\n# - flake8-docstrings\r\n# - flake8-builtins\r\n# - pep8-naming\r\n- repo: https://github.com/PyCQA/flake8\r\n  rev: 3.8.1\r\n  hooks:\r\n  - id: flake8\r\n    args: [--format, \"%(path)40s:%(row)-4d %(code)s %(text)s\"]\r\n\r\n# Check for errors in restructuredtext (.rst) files under the doc hierarchy\r\n- repo: https://github.com/PyCQA/doc8\r\n  rev: 0.8.1rc3\r\n  hooks:\r\n  - id: doc8\r\n    args: [--ignore-path, docs/_build]\r\n\r\n# Check for known security vulnerabilities:\r\n- repo: https://github.com/PyCQA/bandit\r\n  rev: 1.6.2\r\n  hooks:\r\n  - id: bandit\r\n    args: [-c, .bandit.yml]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1457", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1457/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1457/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1457/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1457", "id": 618375525, "node_id": "MDU6SXNzdWU2MTgzNzU1MjU=", "number": 1457, "title": "Add possibility to have disabled hook", "user": {"login": "okainov", "id": 918446, "node_id": "MDQ6VXNlcjkxODQ0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/918446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/okainov", "html_url": "https://github.com/okainov", "followers_url": "https://api.github.com/users/okainov/followers", "following_url": "https://api.github.com/users/okainov/following{/other_user}", "gists_url": "https://api.github.com/users/okainov/gists{/gist_id}", "starred_url": "https://api.github.com/users/okainov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/okainov/subscriptions", "organizations_url": "https://api.github.com/users/okainov/orgs", "repos_url": "https://api.github.com/users/okainov/repos", "events_url": "https://api.github.com/users/okainov/events{/privacy}", "received_events_url": "https://api.github.com/users/okainov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T16:39:29Z", "updated_at": "2020-05-17T16:33:41Z", "closed_at": "2020-05-17T16:33:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "We'd like to have the possibility to add some hooks which can be run only manually\r\n\r\nSomething like:\r\n```\r\nrepos:\r\n-   repo: https://github.com/pre-commit/pre-commit-hooks\r\n    rev: v1.2.3\r\n    hooks:\r\n    -   id: trailing-whitespace\r\n        enabled: False\r\n```\r\n\r\nSo the hook is not being run by default with `pre-commit run` however it might be run manually `pre-commit run trailing-whitespace`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1456", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1456/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1456/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1456/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1456", "id": 617727785, "node_id": "MDU6SXNzdWU2MTc3Mjc3ODU=", "number": 1456, "title": "Run project command", "user": {"login": "countravioli", "id": 2677101, "node_id": "MDQ6VXNlcjI2NzcxMDE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2677101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/countravioli", "html_url": "https://github.com/countravioli", "followers_url": "https://api.github.com/users/countravioli/followers", "following_url": "https://api.github.com/users/countravioli/following{/other_user}", "gists_url": "https://api.github.com/users/countravioli/gists{/gist_id}", "starred_url": "https://api.github.com/users/countravioli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/countravioli/subscriptions", "organizations_url": "https://api.github.com/users/countravioli/orgs", "repos_url": "https://api.github.com/users/countravioli/repos", "events_url": "https://api.github.com/users/countravioli/events{/privacy}", "received_events_url": "https://api.github.com/users/countravioli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-13T20:19:02Z", "updated_at": "2020-05-13T21:26:11Z", "closed_at": "2020-05-13T21:26:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I already have a lint command setup in tox. I don't see a way to use pre-commit to just run that.\r\n\r\nIdeally I'd be able to run X hooks from the ecosystem and my own that are part of my repo. It looks like I could make a separate repo to do this but that seems like quite the overhead.\r\n\r\nIs there a way to just run a custom command at project root? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1455", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1455/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1455/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1455/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1455", "id": 617368323, "node_id": "MDU6SXNzdWU2MTczNjgzMjM=", "number": 1455, "title": "Entry points for different OS", "user": {"login": "Cielquan", "id": 43916661, "node_id": "MDQ6VXNlcjQzOTE2NjYx", "avatar_url": "https://avatars3.githubusercontent.com/u/43916661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cielquan", "html_url": "https://github.com/Cielquan", "followers_url": "https://api.github.com/users/Cielquan/followers", "following_url": "https://api.github.com/users/Cielquan/following{/other_user}", "gists_url": "https://api.github.com/users/Cielquan/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cielquan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cielquan/subscriptions", "organizations_url": "https://api.github.com/users/Cielquan/orgs", "repos_url": "https://api.github.com/users/Cielquan/repos", "events_url": "https://api.github.com/users/Cielquan/events{/privacy}", "received_events_url": "https://api.github.com/users/Cielquan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-13T11:26:02Z", "updated_at": "2020-05-21T09:25:50Z", "closed_at": "2020-05-13T14:17:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "In #1309 I shared a config:\r\n```\r\nrepos:\r\n...\r\n  - repo: local\r\n    hooks:\r\n      - id: pylint\r\n        args: [--ignore=version.py]\r\n        name: pylint\r\n        entry: .tox/pre-commit/bin/pylint\r\n        language: system\r\n        types: [python]\r\n...\r\n```\r\n\r\nThe Config works fine on my linux machine but on windows the `entry` is a problem and I need to change it to `.tox/pre-commit/Scripts/pylint.exe`. So I need to change `bin`to `Scripts` and append `.exe`. \r\n\r\nIs there a way to use the same config for both OS without the need to change it every time I change the machine? Like: \r\n```\r\nrepos:\r\n...\r\n  - repo: local\r\n    hooks:\r\n      - id: pylint\r\n        args: [--ignore=version.py]\r\n        name: pylint\r\n        entry-win: .tox/pre-commit/Scripts/pylint.exe\r\n        entry-linux: .tox/pre-commit/bin/pylint\r\n        language: system\r\n        types: [python]\r\n...\r\n```\r\n\r\nIf not I would like to propose it as a feature request. :) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1454", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1454/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1454/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1454/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1454", "id": 616866321, "node_id": "MDU6SXNzdWU2MTY4NjYzMjE=", "number": 1454, "title": "Error creating pip environment when index requires a login", "user": {"login": "sodre", "id": 1043285, "node_id": "MDQ6VXNlcjEwNDMyODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1043285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sodre", "html_url": "https://github.com/sodre", "followers_url": "https://api.github.com/users/sodre/followers", "following_url": "https://api.github.com/users/sodre/following{/other_user}", "gists_url": "https://api.github.com/users/sodre/gists{/gist_id}", "starred_url": "https://api.github.com/users/sodre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sodre/subscriptions", "organizations_url": "https://api.github.com/users/sodre/orgs", "repos_url": "https://api.github.com/users/sodre/repos", "events_url": "https://api.github.com/users/sodre/events{/privacy}", "received_events_url": "https://api.github.com/users/sodre/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-05-12T18:26:58Z", "updated_at": "2020-05-13T01:43:04Z", "closed_at": "2020-05-13T01:43:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having a problem creating a pre-commit virtual environment when running behind a proxying/private pypi repository that requires a login.\r\nI have setup my pip.conf file to point to that index, and I am using `keyring` to manage my passwords, so it is not stored in plain-text.\r\n\r\nTo reproduce on my system:\r\n\r\n```\r\n$ pip install pre-commit\r\n# no passwords are prompted\r\n```\r\n\r\nCreate a very simple `.pre-commit-config.yaml` file, with \"psf/black\"\r\n```\r\nrepos:\r\n  - repo: https://github.com/psf/black\r\n    rev: stable\r\n    hooks:\r\n      - id: black\r\n```\r\n\r\nTry to initialize the `pre-commit` virtual environments...\r\n<details>\r\n\r\n```\r\n\u00b1 pre-commit\r\n[INFO] Installing environment for https://github.com/psf/black.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nAn unexpected error has occurred: CalledProcessError: command: ('/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/bin/python', '-mpip', 'install', '.')\r\nreturn code: 1\r\nexpected return code: 0\r\nstdout:\r\n    Looking in indexes: https://<NEXUS PRIVATE REPOSITORY>/repository/pypi-all/simple\r\n    Processing /home/pcarlos/.cache/pre-commit/repodmjniiuo\r\n      Installing build dependencies: started\r\n      Installing build dependencies: finished with status 'error'\r\n    User for <NEXUS PRIVATE REPOSITORY>: \r\nstderr:\r\n      ERROR: Command errored out with exit status 2:\r\n       command: /home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/bin/python /home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip install --ignore-installed --no-user --prefix /tmp/pip-build-env-oget82ct/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://<NEXUS PRIVATE REPOSITORY>/repository/pypi-all/simple -- 'setuptools>=41.0' setuptools-scm wheel\r\n           cwd: None\r\n      Complete output (48 lines):\r\n      Looking in indexes: https://<NEXUS PRIVATE REPOSITORY>/repository/pypi-all/simple\r\n      Collecting setuptools>=41.0\r\n      User for <NEXUS PRIVATE REPOSITORY>: ERROR: Exception:\r\n```\r\n</details>\r\n\r\nTraceback:\r\n<details>\r\n\r\n```python-traceback\r\n      Traceback (most recent call last):\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/cli/base_command.py\", line 188, in main\r\n          status = self.run(options, args)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/commands/install.py\", line 345, in run\r\n          resolver.resolve(requirement_set)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/legacy_resolve.py\", line 196, in resolve\r\n          self._resolve_one(requirement_set, req)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/legacy_resolve.py\", line 359, in _resolve_one\r\n          abstract_dist = self._get_abstract_dist_for(req_to_install)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/legacy_resolve.py\", line 305, in _get_abstract_dist_for\r\n          abstract_dist = self.preparer.prepare_linked_requirement(\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/operations/prepare.py\", line 134, in prepare_linked_requirement\r\n          req.populate_link(finder, upgrade_allowed, require_hashes)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/req/req_install.py\", line 211, in populate_link\r\n          self.link = finder.find_requirement(self, upgrade)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/index.py\", line 1200, in find_requirement\r\n          candidates = self.find_candidates(\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/index.py\", line 1183, in find_candidates\r\n          candidates = self.find_all_candidates(project_name)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/index.py\", line 1128, in find_all_candidates\r\n          for page in self._get_pages(url_locations, project_name):\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/index.py\", line 1282, in _get_pages\r\n          page = _get_html_page(location, session=self.session)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/index.py\", line 234, in _get_html_page\r\n          resp = _get_html_response(url, session=session)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/index.py\", line 165, in _get_html_response\r\n          resp = session.get(\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_vendor/requests/sessions.py\", line 546, in get\r\n          return self.request('GET', url, **kwargs)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/download.py\", line 624, in request\r\n          return super(PipSession, self).request(method, url, *args, **kwargs)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_vendor/requests/sessions.py\", line 533, in request\r\n          resp = self.send(prep, **send_kwargs)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_vendor/requests/sessions.py\", line 653, in send\r\n          r = dispatch_hook('response', hooks, r, **kwargs)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_vendor/requests/hooks.py\", line 31, in dispatch_hook\r\n          _hook_data = hook(hook_data, **kwargs)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/download.py\", line 386, in handle_401\r\n          username, password, save = self._prompt_for_password(parsed.netloc)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/download.py\", line 358, in _prompt_for_password\r\n          username = ask_input(\"User for %s: \" % netloc)\r\n        File \"/home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip/_internal/utils/misc.py\", line 281, in ask_input\r\n          return input(message)\r\n      EOFError: EOF when reading a line\r\n      User for <NEXUS PRIVATE REPOSITORY>:\r\n      ----------------------------------------\r\n    ERROR: Command errored out with exit status 2: /home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/bin/python /home/pcarlos/.cache/pre-commit/repodmjniiuo/py_env-python3/lib/python3.8/site-packages/pip install --ignore-installed --no-user --prefix /tmp/pip-build-env-oget82ct/overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://<NEXUS PRIVATE REPOSITORY>/repository/pypi-all/simple -- 'setuptools>=41.0' setuptools-scm wheel Check the logs for full command output.\r\n    \r\nCheck the log at /home/pcarlos/.cache/pre-commit/pre-commit.log\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1452", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1452/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1452/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1452/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1452", "id": 616585382, "node_id": "MDU6SXNzdWU2MTY1ODUzODI=", "number": 1452, "title": "I _think_ pre-commit ignores scoped package registries in npmrc", "user": {"login": "sysadmiral", "id": 5868863, "node_id": "MDQ6VXNlcjU4Njg4NjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5868863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sysadmiral", "html_url": "https://github.com/sysadmiral", "followers_url": "https://api.github.com/users/sysadmiral/followers", "following_url": "https://api.github.com/users/sysadmiral/following{/other_user}", "gists_url": "https://api.github.com/users/sysadmiral/gists{/gist_id}", "starred_url": "https://api.github.com/users/sysadmiral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sysadmiral/subscriptions", "organizations_url": "https://api.github.com/users/sysadmiral/orgs", "repos_url": "https://api.github.com/users/sysadmiral/repos", "events_url": "https://api.github.com/users/sysadmiral/events{/privacy}", "received_events_url": "https://api.github.com/users/sysadmiral/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-12T11:35:07Z", "updated_at": "2020-05-14T16:21:57Z", "closed_at": "2020-05-14T16:21:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nFirstly - great tool! It has become indispensable in my development routine and I champion it whenever I can! :heart: \r\n\r\nMy issue is npm related so I will be using a lot of npm terminology. I have an issue where I am using a hook that requires the fetching of another npm module but it seems to fail to pull the package.\r\n\r\nMore detail:\r\nMy `npmrc` is set to use public registry for most things and for our orgs scoped packages use our private registry.\r\n\r\nMy `npmrc` looks like this (with placeholders for secrets):\r\n\r\n```\r\nregistry=https://registry.npmjs.org\r\n@${myscope}:registry=https://${myprivateregistry}\r\n//${myprivateregistry}/:_authtoken=foo\r\n```\r\n\r\nIn pre-commit I am using the hook `https://github.com/alessandrojcm/commitlint-pre-commit-hook` which you can extend with \"shared configuration\":\r\n\r\n```\r\n  - repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook\r\n    rev: v2.2.2\r\n    hooks:\r\n      - id: commitlint\r\n        stages: [commit-msg]\r\n        additional_dependencies: ['@commitlint/config-conventional']\r\n```\r\n\r\nI've forked the `@commitlint/config-conventional` configuration and created an org specific package which is published to our private registry.\r\n\r\nIf I set the hook to use our configuration (scoped package) the package is never installed and the hook subsequently fails.\r\n\r\nI think the mechanism for `additional_dependencies` is ignoring the scoped private registry in `npmrc`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1451", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1451/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1451/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1451/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1451", "id": 616253393, "node_id": "MDU6SXNzdWU2MTYyNTMzOTM=", "number": 1451, "title": ".pre-commit-config.yaml does not exist when you use yml instead of yaml", "user": {"login": "eduzen", "id": 8366343, "node_id": "MDQ6VXNlcjgzNjYzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8366343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduzen", "html_url": "https://github.com/eduzen", "followers_url": "https://api.github.com/users/eduzen/followers", "following_url": "https://api.github.com/users/eduzen/following{/other_user}", "gists_url": "https://api.github.com/users/eduzen/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduzen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduzen/subscriptions", "organizations_url": "https://api.github.com/users/eduzen/orgs", "repos_url": "https://api.github.com/users/eduzen/repos", "events_url": "https://api.github.com/users/eduzen/events{/privacy}", "received_events_url": "https://api.github.com/users/eduzen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-11T23:30:17Z", "updated_at": "2020-05-12T00:14:38Z", "closed_at": "2020-05-11T23:31:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ pre-commit run --all-files\r\nAn error has occurred: InvalidConfigError:\r\n=====> .pre-commit-config.yaml does not exist\r\nCheck the log at /Users/eduardo.enriquez/.cache/pre-commit/pre-commit.log\r\n\r\n$ ls .pre-commit.config*\r\n.pre-commit-config.yml\r\n```\r\n\r\nAFAIK yml or yaml are both valid. A lot of other tools allows to use both of them. I don't know if it's a fair point, but I think it is also not hard to implement.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1449", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1449/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1449/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1449/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1449", "id": 616118070, "node_id": "MDU6SXNzdWU2MTYxMTgwNzA=", "number": 1449, "title": "The script to install golang env requires golang", "user": {"login": "priyasiddharth", "id": 4746323, "node_id": "MDQ6VXNlcjQ3NDYzMjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4746323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/priyasiddharth", "html_url": "https://github.com/priyasiddharth", "followers_url": "https://api.github.com/users/priyasiddharth/followers", "following_url": "https://api.github.com/users/priyasiddharth/following{/other_user}", "gists_url": "https://api.github.com/users/priyasiddharth/gists{/gist_id}", "starred_url": "https://api.github.com/users/priyasiddharth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/priyasiddharth/subscriptions", "organizations_url": "https://api.github.com/users/priyasiddharth/orgs", "repos_url": "https://api.github.com/users/priyasiddharth/repos", "events_url": "https://api.github.com/users/priyasiddharth/events{/privacy}", "received_events_url": "https://api.github.com/users/priyasiddharth/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1372850431, "node_id": "MDU6TGFiZWwxMzcyODUwNDMx", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/go", "name": "go", "color": "29beb0", "default": false, "description": ""}, {"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-11T19:15:10Z", "updated_at": "2020-05-11T19:54:33Z", "closed_at": "2020-05-11T19:54:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/pre-commit/pre-commit/blob/b3c0eab7dc47b95125744ec560aa3f204874b013/pre_commit/languages/golang.py#L81\r\n\r\nThe introduction mentions...\r\n\r\n_If one of your developers doesn\u2019t have node installed but modifies a JavaScript file, pre-commit automatically handles downloading and building node to run eslint without root._\r\n\r\nI would assume golang would be installed automatically in a similar manner. \r\n\r\nIs this reasonable?\r\n\r\nthank you\r\nSiddharth", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1447", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1447/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1447/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1447/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1447", "id": 615504607, "node_id": "MDU6SXNzdWU2MTU1MDQ2MDc=", "number": 1447, "title": "Unhandled yaml.scanner.ScannerError when trying autoupdate with a malformed pre-commit config", "user": {"login": "rpdelaney", "id": 1139517, "node_id": "MDQ6VXNlcjExMzk1MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1139517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpdelaney", "html_url": "https://github.com/rpdelaney", "followers_url": "https://api.github.com/users/rpdelaney/followers", "following_url": "https://api.github.com/users/rpdelaney/following{/other_user}", "gists_url": "https://api.github.com/users/rpdelaney/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpdelaney/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpdelaney/subscriptions", "organizations_url": "https://api.github.com/users/rpdelaney/orgs", "repos_url": "https://api.github.com/users/rpdelaney/repos", "events_url": "https://api.github.com/users/rpdelaney/events{/privacy}", "received_events_url": "https://api.github.com/users/rpdelaney/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713405, "node_id": "MDU6TGFiZWw4NTcxMzQwNQ==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-10T23:55:06Z", "updated_at": "2020-05-11T19:36:25Z", "closed_at": "2020-05-11T02:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "In migrate_config.py we catch `yaml.YAMLError` on [lines 31-36](https://github.com/pre-commit/pre-commit/blob/master/pre_commit/commands/migrate_config.py#L31-L36) (of which `yaml.scanner.ScannerError` is a subclass), but when the exception is raised on line 28, it is unhandled.\r\n\r\n```console\r\n$ pre-commit autoupdate\r\nAn unexpected error has occurred: ScannerError: mapping values are not allowed in this context\r\n  in \"<unicode string>\", line 2, column 6\r\nCheck the log at /home/ryan/.cache/pre-commit/pre-commit.log\r\n```\r\n\r\n### version information\r\n\r\n```\r\npre-commit version: 2.3.0\r\nsys.version:\r\n    3.8.2 (default, Apr  8 2020, 14:31:25) \r\n    [GCC 9.3.0]\r\nsys.executable: /home/ryan/.local/pipx/venvs/pre-commit/bin/python\r\nos.name: posix\r\nsys.platform: linux\r\n```\r\n\r\n### error information\r\n\r\n```\r\nAn unexpected error has occurred: ScannerError: mapping values are not allowed in this context\r\n  in \"<unicode string>\", line 2, column 6\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/pre_commit/error_handler.py\", line 56, in error_handler\r\n    yield\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/pre_commit/main.py\", line 354, in main\r\n    return autoupdate(\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/pre_commit/commands/autoupdate.py\", line 141, in autoupdate\r\n    migrate_config(config_file, quiet=True)\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/pre_commit/commands/migrate_config.py\", line 49, in migrate_config\r\n    contents = _migrate_map(contents)\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/pre_commit/commands/migrate_config.py\", line 28, in _migrate_map\r\n    if isinstance(yaml_load(contents), list):\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/yaml/__init__.py\", line 114, in load\r\n    return loader.get_single_data()\r\n  File \"/home/ryan/.local/pipx/venvs/pre-commit/lib/python3.8/site-packages/yaml/constructor.py\", line 49, in get_single_data\r\n    node = self.get_single_node()\r\n  File \"ext/_yaml.pyx\", line 707, in _yaml.CParser.get_single_node\r\n  File \"ext/_yaml.pyx\", line 726, in _yaml.CParser._compose_document\r\n  File \"ext/_yaml.pyx\", line 905, in _yaml.CParser._parse_next_event\r\nyaml.scanner.ScannerError: mapping values are not allowed in this context\r\n  in \"<unicode string>\", line 2, column 6\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1446", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1446/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1446/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1446/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1446", "id": 615446512, "node_id": "MDU6SXNzdWU2MTU0NDY1MTI=", "number": 1446, "title": "How to see the actual hook command being executed?", "user": {"login": "ahakanbaba", "id": 6209214, "node_id": "MDQ6VXNlcjYyMDkyMTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/6209214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahakanbaba", "html_url": "https://github.com/ahakanbaba", "followers_url": "https://api.github.com/users/ahakanbaba/followers", "following_url": "https://api.github.com/users/ahakanbaba/following{/other_user}", "gists_url": "https://api.github.com/users/ahakanbaba/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahakanbaba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahakanbaba/subscriptions", "organizations_url": "https://api.github.com/users/ahakanbaba/orgs", "repos_url": "https://api.github.com/users/ahakanbaba/repos", "events_url": "https://api.github.com/users/ahakanbaba/events{/privacy}", "received_events_url": "https://api.github.com/users/ahakanbaba/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-10T18:16:49Z", "updated_at": "2020-05-10T18:25:36Z", "closed_at": "2020-05-10T18:25:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a DEBUG-like option to see the actual commands being executed for a hook?\r\n\r\nFor example I have a mypy hook \r\nEnabled like this in the `.pre-commit-config.yaml` file\r\n\r\n```\r\n-   repo: https://github.com/pre-commit/mirrors-mypy\r\n    rev: v0.701\r\n    hooks:\r\n    -   id: mypy\r\n```\r\n\r\nWhen I run `pre-commit run --all-files --verbose`\r\nThe relevant output is:\r\n\r\n```\r\nmypy.....................................................................Passed\r\n- hook id: mypy\r\n- duration: 0.92s\r\n```\r\n\r\nIs there an option to see the actual mypy command ? \r\nIt would be different inside pre-commit but I am looking to see something like the following\r\n\r\n```\r\nmypy --show-column-numbers  --shadow-file ..../app/services/job_scheduler.py.  /var/f\r\nolders/r2/x60ktwlx5mvb8zyv31b4tvxh0000gp/T/vathVbh/4/job_scheduler.py ..../app/services/job_scheduler.py\r\n```\r\n\r\nI hope I may ask a usability question here. If github issues is not the right platform for questions please redirect me to the right place. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1445", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1445/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1445/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1445/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1445", "id": 615162637, "node_id": "MDU6SXNzdWU2MTUxNjI2Mzc=", "number": 1445, "title": "Using repo local disable ability to install python package", "user": {"login": "ssbarnea", "id": 102495, "node_id": "MDQ6VXNlcjEwMjQ5NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/102495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssbarnea", "html_url": "https://github.com/ssbarnea", "followers_url": "https://api.github.com/users/ssbarnea/followers", "following_url": "https://api.github.com/users/ssbarnea/following{/other_user}", "gists_url": "https://api.github.com/users/ssbarnea/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssbarnea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssbarnea/subscriptions", "organizations_url": "https://api.github.com/users/ssbarnea/orgs", "repos_url": "https://api.github.com/users/ssbarnea/repos", "events_url": "https://api.github.com/users/ssbarnea/events{/privacy}", "received_events_url": "https://api.github.com/users/ssbarnea/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-09T12:06:16Z", "updated_at": "2020-05-13T20:46:11Z", "closed_at": "2020-05-09T14:25:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `language: python` documentation states that it does automatically install the current package using `pip install .` but apparently this does not happen with local repositories, as seen on https://github.com/ansible/ansible-lint/pull/779/files\r\n\r\nExample:\r\n```\r\n  - id: docs-rebuild\r\n    name: Checks that generated docs are in-sync with commit\r\n    entry: python -m ansiblelint.generate_docs\r\n    language: python\r\n    pass_filenames: false\r\n```\r\n\r\nThat hook definition is inside ansiblelint repository, which has a `setup.py` which should be installed but what happens looks like:\r\n```\r\nChecks that generated docs are in-sync with commit.......................Failed\r\n- hook id: docs-rebuild\r\n- exit code: 1\r\n\r\n/Users/ssbarnea/.cache/pre-commit/repoxu2n7dg2/py_env-python3.7/bin/python: Error while finding module specification for 'ansiblelint.generate_docs' (ModuleNotFoundError: No module named 'ansiblelint')\r\n```\r\n\r\nBecause the normal hook works without problems I suspect that is a bug related to use of local. I tried to run with multiple `-vvv` flags but it did not produce more output.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1441", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1441/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1441/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1441/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1441", "id": 614207917, "node_id": "MDU6SXNzdWU2MTQyMDc5MTc=", "number": 1441, "title": "Add option to retry cloning of the repos", "user": {"login": "okainov", "id": 918446, "node_id": "MDQ6VXNlcjkxODQ0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/918446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/okainov", "html_url": "https://github.com/okainov", "followers_url": "https://api.github.com/users/okainov/followers", "following_url": "https://api.github.com/users/okainov/following{/other_user}", "gists_url": "https://api.github.com/users/okainov/gists{/gist_id}", "starred_url": "https://api.github.com/users/okainov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/okainov/subscriptions", "organizations_url": "https://api.github.com/users/okainov/orgs", "repos_url": "https://api.github.com/users/okainov/repos", "events_url": "https://api.github.com/users/okainov/events{/privacy}", "received_events_url": "https://api.github.com/users/okainov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-07T17:00:53Z", "updated_at": "2020-05-10T21:18:16Z", "closed_at": "2020-05-10T19:43:36Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Today we got quite some of the errors with flake8 hook:\r\n\r\n```\r\n[INFO] Initializing environment for https://gitlab.com/pycqa/flake8.\r\nAn unexpected error has occurred: CalledProcessError: command: ('/usr/bin/git', 'fetch', 'origin', '--tags')\r\nreturn code: 128\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    fatal: unable to access 'https://gitlab.com/pycqa/flake8/': Operation timed out after 300004 milliseconds with 0 out of 0 bytes received\r\n    \r\nCheck the log at /tmp/pre-commit/pre-commit.log\r\n```\r\n\r\nWhile when I check the repo manually, it seems to be there, up and healthy. Probably it would make sense to have a top-level configuration option for `pre-commit` to specify amount of retries to clone the repo it does before failing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1440", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1440/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1440/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1440/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1440", "id": 613952371, "node_id": "MDU6SXNzdWU2MTM5NTIzNzE=", "number": 1440, "title": "hook using node doesn't work on FreeBSD", "user": {"login": "jockej", "id": 7482099, "node_id": "MDQ6VXNlcjc0ODIwOTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7482099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jockej", "html_url": "https://github.com/jockej", "followers_url": "https://api.github.com/users/jockej/followers", "following_url": "https://api.github.com/users/jockej/following{/other_user}", "gists_url": "https://api.github.com/users/jockej/gists{/gist_id}", "starred_url": "https://api.github.com/users/jockej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jockej/subscriptions", "organizations_url": "https://api.github.com/users/jockej/orgs", "repos_url": "https://api.github.com/users/jockej/repos", "events_url": "https://api.github.com/users/jockej/events{/privacy}", "received_events_url": "https://api.github.com/users/jockej/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}, {"id": 740044921, "node_id": "MDU6TGFiZWw3NDAwNDQ5MjE=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/upstream-bug", "name": "upstream-bug", "color": "fc2929", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 26, "created_at": "2020-05-07T10:37:49Z", "updated_at": "2020-05-11T19:36:08Z", "closed_at": "2020-05-08T22:48:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a hook using doctoc, the node package. I cannot install the hook, this is the output:\r\n\r\n```\r\ndesktop1% pre-commit install --install-hooks                                                                                                                                                                                                  \r\npre-commit installed at .git/hooks/pre-commit\r\n[INFO] Initializing environment for git@github.com:jockej/pre-commit-hooks.git.\r\n[INFO] Initializing environment for https://github.com/thlorenz/doctoc.\r\n[INFO] Initializing environment for https://gitlab.com/pycqa/flake8.\r\n[INFO] Initializing environment for https://github.com/jorisroovers/gitlint.\r\n[INFO] Installing environment for https://github.com/thlorenz/doctoc.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nAn unexpected error has occurred: CalledProcessError: command: ('/home/joakim/.cache/pre-commit/repoizbdwm4g/node_env-system/bin/node', '/usr/local/bin/npm', 'install', '-g', '.')\r\nreturn code: 254\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    npm ERR! code ENOENT\r\n    npm ERR! syscall chmod\r\n    npm ERR! path /home/joakim/.cache/pre-commit/repoizbdwm4g/node_env-system/lib/node_modules/doctoc/doctoc.js\r\n    npm ERR! errno -2\r\n    npm ERR! enoent ENOENT: no such file or directory, chmod '/home/joakim/.cache/pre-commit/repoizbdwm4g/node_env-system/lib/node_modules/doctoc/doctoc.js'\r\n    npm ERR! enoent This is related to npm not being able to find a file.\r\n    npm ERR! enoent \r\n    \r\n    npm ERR! A complete log of this run can be found in:\r\n    npm ERR!     /home/joakim/.npm/_logs/2020-05-07T10_30_16_218Z-debug.log\r\n    \r\nCheck the log at /home/joakim/.cache/pre-commit/pre-commit.log\r\n```\r\nThese hooks all install and run perfectly on GNU/Linux.\r\n\r\nI believe it happens because pre-commit tries to use the --prebuilt flag to nodeenv, however this doesn't work for FreeBSD since there are no prebuilt packages (the URL constructed gives a 404). I have node installed so it should be possible to use --system, but I haven't been able to make it work myself.\r\n\r\nNodeenv itself seems to work fine with --system.\r\n\r\nPlease let me know if I can help with trying things on FreeBSD.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1436", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1436/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1436/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1436/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1436", "id": 612764125, "node_id": "MDU6SXNzdWU2MTI3NjQxMjU=", "number": 1436, "title": "Matching cython files: merge with python or support separately?", "user": {"login": "webknjaz", "id": 578543, "node_id": "MDQ6VXNlcjU3ODU0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/578543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/webknjaz", "html_url": "https://github.com/webknjaz", "followers_url": "https://api.github.com/users/webknjaz/followers", "following_url": "https://api.github.com/users/webknjaz/following{/other_user}", "gists_url": "https://api.github.com/users/webknjaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/webknjaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/webknjaz/subscriptions", "organizations_url": "https://api.github.com/users/webknjaz/orgs", "repos_url": "https://api.github.com/users/webknjaz/repos", "events_url": "https://api.github.com/users/webknjaz/events{/privacy}", "received_events_url": "https://api.github.com/users/webknjaz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 21, "created_at": "2020-05-05T17:15:42Z", "updated_at": "2020-05-05T21:46:40Z", "closed_at": "2020-05-05T21:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Most Python linters would work with Cython as well. I was using pydocstyle and thought that `*.pyx` files would be matched. Turned out they aren't.\r\n\r\nI tracked it to calling `identify` and it returns just `cython`:\r\n```console\r\n$ python -c 'import identify.identify; print(identify.identify.tags_from_path(\"src/pylibsshext/channel.pxd\"))'\r\n{'file', 'cython', 'text', 'non-executable'}\r\n$ python -c 'import identify.identify; print(identify.identify.tags_from_path(\"src/pylibsshext/channel.pyx\"))'\r\n{'file', 'non-executable', 'text', 'cython'}\r\n```\r\n\r\nWhat can we do to improve this? Should Python mean Python+Cython+python-like? Should Cython be separate? If yes, should the docs promote the need to also add cython more actively?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1434", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1434/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1434/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1434/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1434", "id": 612242349, "node_id": "MDU6SXNzdWU2MTIyNDIzNDk=", "number": 1434, "title": "Any scalar quotes around rev are lost during autoupdate", "user": {"login": "marcjay", "id": 580744, "node_id": "MDQ6VXNlcjU4MDc0NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/580744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcjay", "html_url": "https://github.com/marcjay", "followers_url": "https://api.github.com/users/marcjay/followers", "following_url": "https://api.github.com/users/marcjay/following{/other_user}", "gists_url": "https://api.github.com/users/marcjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcjay/subscriptions", "organizations_url": "https://api.github.com/users/marcjay/orgs", "repos_url": "https://api.github.com/users/marcjay/repos", "events_url": "https://api.github.com/users/marcjay/events{/privacy}", "received_events_url": "https://api.github.com/users/marcjay/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713407, "node_id": "MDU6TGFiZWw4NTcxMzQwNw==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/feature", "name": "feature", "color": "207de5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-04T23:55:20Z", "updated_at": "2020-05-05T02:41:51Z", "closed_at": "2020-05-05T02:41:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "#### Steps to reproduce\r\n\r\nExample `.pre-commit-config.yaml`:\r\n```\r\nrepos:\r\n-   repo: 'https://github.com/pre-commit/pre-commit-hooks'\r\n    rev: 'v2.4.0'\r\n    hooks:\r\n    -   id: 'trailing-whitespace'\r\n    -   id: 'end-of-file-fixer'\r\n    -   id: 'check-yaml'\r\n    -   id: 'check-added-large-files'\r\n```\r\n\r\nRun \r\n```\r\n$ pre-commit autoupdate\r\nUpdating https://github.com/pre-commit/pre-commit-hooks ... updating v2.4.0 -> v2.5.0.\r\n```\r\n\r\n`.pre-commit-config.yaml` after:\r\n```\r\nrepos:\r\n  - repo: 'https://github.com/pre-commit/pre-commit-hooks'\r\n    rev: v2.5.0\r\n    hooks:\r\n      - id: 'trailing-whitespace'\r\n      - id: 'end-of-file-fixer'\r\n      - id: 'check-yaml'\r\n      - id: 'check-added-large-files'\r\n```\r\nAny wrapping quotes (single or double) around the `rev` value are lost during the update\r\n\r\nI noticed this when I turned on the `quoted-strings` [yamllint rule](https://yamllint.readthedocs.io/en/stable/rules.html#module-yamllint.rules.quoted_strings) and set it to `required` to be consistent with our internal YAML coding conventions", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1433", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1433/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1433/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1433/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1433", "id": 611756576, "node_id": "MDU6SXNzdWU2MTE3NTY1NzY=", "number": 1433, "title": "Pre-commit fails to find pip", "user": {"login": "apatard", "id": 2619394, "node_id": "MDQ6VXNlcjI2MTkzOTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2619394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apatard", "html_url": "https://github.com/apatard", "followers_url": "https://api.github.com/users/apatard/followers", "following_url": "https://api.github.com/users/apatard/following{/other_user}", "gists_url": "https://api.github.com/users/apatard/gists{/gist_id}", "starred_url": "https://api.github.com/users/apatard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apatard/subscriptions", "organizations_url": "https://api.github.com/users/apatard/orgs", "repos_url": "https://api.github.com/users/apatard/repos", "events_url": "https://api.github.com/users/apatard/events{/privacy}", "received_events_url": "https://api.github.com/users/apatard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-04T10:10:02Z", "updated_at": "2020-05-04T20:11:22Z", "closed_at": "2020-05-04T20:11:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran precommit today in zuul-ci and pre-commit failed to find pip, so the CI check failed.:\r\n```\r\nAn unexpected error has occurred: CalledProcessError: command: ('/home/zuul/.cache/pre-commit/repofffvfvpt/py_env-python3/bin/python', '-mpip', 'install', '.')\r\nreturn code: 1\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    /home/zuul/.cache/pre-commit/repofffvfvpt/py_env-python3/bin/python: No module named pip\r\n```\r\n\r\nThe logs and jobs information are available at https://dashboard.zuul.ansible.com/t/ansible/build/c098bbf584fa4831881cd6be80daa56a.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1430", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1430/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1430/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1430/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1430", "id": 611567956, "node_id": "MDU6SXNzdWU2MTE1Njc5NTY=", "number": 1430, "title": "On a win7 system, performing a pre-commit reports RPC failed error", "user": {"login": "xiaohuazi123", "id": 45115671, "node_id": "MDQ6VXNlcjQ1MTE1Njcx", "avatar_url": "https://avatars2.githubusercontent.com/u/45115671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuazi123", "html_url": "https://github.com/xiaohuazi123", "followers_url": "https://api.github.com/users/xiaohuazi123/followers", "following_url": "https://api.github.com/users/xiaohuazi123/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuazi123/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuazi123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuazi123/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuazi123/orgs", "repos_url": "https://api.github.com/users/xiaohuazi123/repos", "events_url": "https://api.github.com/users/xiaohuazi123/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuazi123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-04T02:27:00Z", "updated_at": "2020-05-04T03:46:56Z", "closed_at": "2020-05-04T03:42:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\nI have another problem, when I commit, the pre-commit prints out the error, this error seems not to be my own code problem, it seems to be a pre-commit problem\r\n\r\nThe problem environment\r\nWindows 7\r\nPython version: Python 3.7.6\r\n\r\nHere's the detail log\r\n```\r\n[INFO] Initializing environment for https://github.com/timothycrosley/isort.\r\nAn unexpected error has occurred: CalledProcessError: command: ('C:\\\\Program Files\\\\Git\\\\mingw64\\\\libexec\\\\git-core\\\\git.EXE', 'fetch', 'origin', '--tags')\r\nreturn code: 128\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    fatal: early EOF\r\n    fatal: the remote end hung up unexpectedly\r\n    fatal: index-pack failed\r\n    error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054\r\n    \r\nCheck the log at C:\\Users\\Administrator/.cache\\pre-commit\\pre-commit.log\r\n```\r\n\r\n\r\n\r\n### version information\r\n\r\n```\r\npre-commit version: 2.3.0\r\nsys.version:\r\n    3.7.6 (tags/v3.7.6:43364a7ae0, Dec 19 2019, 00:42:30) [MSC v.1916 64 bit (AMD64)]\r\nsys.executable: c:\\program files\\python37\\python.exe\r\nos.name: nt\r\nsys.platform: win32\r\n```\r\n\r\n### error information\r\n\r\n```\r\nAn unexpected error has occurred: CalledProcessError: command: ('C:\\\\Program Files\\\\Git\\\\mingw64\\\\libexec\\\\git-core\\\\git.EXE', 'fetch', 'origin', '--tags')\r\nreturn code: 128\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    fatal: early EOF\r\n    fatal: the remote end hung up unexpectedly\r\n    fatal: index-pack failed\r\n    error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054\r\n    \r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 178, in clone_strategy\r\n    self._shallow_clone(ref, _git_cmd)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 160, in _shallow_clone\r\n    git_cmd('-c', git_config, 'fetch', 'origin', ref, '--depth=1')\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 175, in _git_cmd\r\n    cmd_output_b('git', *args, cwd=directory, env=env)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\util.py\", line 156, in cmd_output_b\r\n    raise CalledProcessError(returncode, cmd, retcode, stdout_b, stderr_b)\r\npre_commit.util.CalledProcessError: command: ('C:\\\\Program Files\\\\Git\\\\mingw64\\\\libexec\\\\git-core\\\\git.EXE', '-c', 'protocol.version=2', 'fetch', 'origin', 'stable', '--depth=1')\r\nreturn code: 128\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    fatal: couldn't find remote ref stable\r\n    \r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\error_handler.py\", line 56, in error_handler\r\n    yield\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\main.py\", line 372, in main\r\n    args=args.rest[1:],\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\commands\\hook_impl.py\", line 216, in hook_impl\r\n    return retv | run(config, store, ns)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\commands\\run.py\", line 350, in run\r\n    for hook in all_hooks(config, store)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\repository.py\", line 206, in all_hooks\r\n    for repo in root_config['repos']\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\repository.py\", line 207, in <genexpr>\r\n    for hook in _repository_hooks(repo, store, root_config)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\repository.py\", line 182, in _repository_hooks\r\n    return _cloned_repository_hooks(repo_config, store, root_config)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\repository.py\", line 148, in _cloned_repository_hooks\r\n    manifest_path = os.path.join(store.clone(repo, rev), C.MANIFEST_FILE)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 182, in clone\r\n    return self._new_repo(repo, ref, deps, clone_strategy)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 139, in _new_repo\r\n    make_strategy(directory)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 180, in clone_strategy\r\n    self._complete_clone(ref, _git_cmd)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 152, in _complete_clone\r\n    git_cmd('fetch', 'origin', '--tags')\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\store.py\", line 175, in _git_cmd\r\n    cmd_output_b('git', *args, cwd=directory, env=env)\r\n  File \"c:\\program files\\python37\\lib\\site-packages\\pre_commit\\util.py\", line 156, in cmd_output_b\r\n    raise CalledProcessError(returncode, cmd, retcode, stdout_b, stderr_b)\r\npre_commit.util.CalledProcessError: command: ('C:\\\\Program Files\\\\Git\\\\mingw64\\\\libexec\\\\git-core\\\\git.EXE', 'fetch', 'origin', '--tags')\r\nreturn code: 128\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    fatal: early EOF\r\n    fatal: the remote end hung up unexpectedly\r\n    fatal: index-pack failed\r\n    error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054\r\n    \r\n\r\n```\r\n\r\n\r\n\r\npre-commit file content as following:\r\n\r\n```\r\n\r\n\r\n#!/usr/bin/env python.exe\r\n# File generated by pre-commit: https://pre-commit.com\r\n# ID: 138fd403232d2ddd5efb44317e38bf03\r\nimport os\r\nimport sys\r\nfrom isort.hooks import git_hook\r\n\r\n# we try our best, but the shebang of this script is difficult to determine:\r\n# - macos doesn't ship with python3\r\n# - windows executables are almost always `python.exe`\r\n# therefore we continue to support python2 for this small script\r\nif sys.version_info < (3, 3):\r\n    from distutils.spawn import find_executable as which\r\nelse:\r\n    from shutil import which\r\n\r\n# work around https://github.com/Homebrew/homebrew-core/issues/30445\r\nos.environ.pop('__PYVENV_LAUNCHER__', None)\r\n\r\n# start templated\r\nINSTALL_PYTHON = 'c:\\\\program files\\\\python37\\\\python.exe'\r\nARGS = ['hook-impl', '--config=.pre-commit-config.yaml', '--hook-type=pre-commit']\r\n# end templated\r\nARGS.extend(('--hook-dir', os.path.realpath(os.path.dirname(__file__))))\r\nARGS.append('--')\r\nARGS.extend(sys.argv[1:])\r\n\r\nDNE = '`pre-commit` not found.  Did you forget to activate your virtualenv?'\r\nif os.access(INSTALL_PYTHON, os.X_OK):\r\n    CMD = [INSTALL_PYTHON, '-mpre_commit']\r\nelif which('pre-commit'):\r\n    CMD = ['pre-commit']\r\nelse:\r\n    raise SystemExit(DNE)\r\n\r\nCMD.extend(ARGS)\r\nif sys.platform == 'win32':  # https://bugs.python.org/issue19124\r\n    import subprocess\r\n\r\n    if sys.version_info < (3, 7):  # https://bugs.python.org/issue25942\r\n        raise SystemExit(subprocess.Popen(CMD).wait())\r\n    else:\r\n        raise SystemExit(subprocess.call(CMD))\r\nelse:\r\n    os.execvp(CMD[0], CMD)\r\n\r\n\r\n\r\nsys.exit(git_hook(strict=True, modify=True))\r\n\r\n```\r\n\r\n.pre-commit-config.yaml  content as  following:\r\n```\r\n\r\nrepos:\r\n  - repo: https://github.com/timothycrosley/isort\r\n    rev: stable\r\n    hooks:\r\n      - id: isort\r\n        name: isort\r\n        stages: [commit]\r\n        entry:  isort\r\n        language: python\r\n  - repo: https://github.com/psf/black\r\n    rev: stable  \r\n    hooks:\r\n      - id: black\r\n        language_version: python3.7\r\n```\r\n\r\n**What should I do next? I need help. Thank you.**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1427", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1427/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1427/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1427/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1427", "id": 611194020, "node_id": "MDU6SXNzdWU2MTExOTQwMjA=", "number": 1427, "title": "Most pre-commit hooks broken after OS upgrade to 20.04", "user": {"login": "ahonnecke", "id": 419355, "node_id": "MDQ6VXNlcjQxOTM1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/419355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahonnecke", "html_url": "https://github.com/ahonnecke", "followers_url": "https://api.github.com/users/ahonnecke/followers", "following_url": "https://api.github.com/users/ahonnecke/following{/other_user}", "gists_url": "https://api.github.com/users/ahonnecke/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahonnecke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahonnecke/subscriptions", "organizations_url": "https://api.github.com/users/ahonnecke/orgs", "repos_url": "https://api.github.com/users/ahonnecke/repos", "events_url": "https://api.github.com/users/ahonnecke/events{/privacy}", "received_events_url": "https://api.github.com/users/ahonnecke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-02T13:47:38Z", "updated_at": "2020-05-11T19:35:14Z", "closed_at": "2020-05-04T17:53:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n```\r\nrepos:\r\n-   repo: https://github.com/pre-commit/pre-commit-hooks\r\n    rev: v2.5.0\r\n    hooks:\r\n    - id: check-ast\r\n```\r\n\r\n```\r\nahonnecke@homonym:~/src/web3/web3-maker-scraper$ pre-commit\r\nCheck python ast.........................................................Failed\r\n- hook id: check-ast\r\n- exit code: 1\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/ahonnecke/.cache/pre-commit/repoliux_i6a/py_env-python3/bin/check-ast\", line 5, in <module>\r\n    from pre_commit_hooks.check_ast import main\r\nModuleNotFoundError: No module named 'pre_commit_hooks'\r\n```\r\nI get the same behavior from all my hooks (except pyupgrade)\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ahonnecke/.cache/pre-commit/repozqy6dpbu/py_env-python3/bin/black\", line 5, in <module>\r\n    from black import patched_main\r\nModuleNotFoundError: No module named 'black'\r\n```\r\nI tried uninstalling and reinstalling all those pip packages (both globally and with --user):\r\n`sudo pip install pylint pytest flake8 mypy pre-commit isort black`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1426", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1426/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1426/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1426/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1426", "id": 611132713, "node_id": "MDU6SXNzdWU2MTExMzI3MTM=", "number": 1426, "title": "Expose an env variable that indicates if pre-commit is running", "user": {"login": "lorenzwalthert", "id": 10477073, "node_id": "MDQ6VXNlcjEwNDc3MDcz", "avatar_url": "https://avatars1.githubusercontent.com/u/10477073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorenzwalthert", "html_url": "https://github.com/lorenzwalthert", "followers_url": "https://api.github.com/users/lorenzwalthert/followers", "following_url": "https://api.github.com/users/lorenzwalthert/following{/other_user}", "gists_url": "https://api.github.com/users/lorenzwalthert/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorenzwalthert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorenzwalthert/subscriptions", "organizations_url": "https://api.github.com/users/lorenzwalthert/orgs", "repos_url": "https://api.github.com/users/lorenzwalthert/repos", "events_url": "https://api.github.com/users/lorenzwalthert/events{/privacy}", "received_events_url": "https://api.github.com/users/lorenzwalthert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713407, "node_id": "MDU6TGFiZWw4NTcxMzQwNw==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/feature", "name": "feature", "color": "207de5", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-02T08:13:20Z", "updated_at": "2020-05-24T02:01:41Z", "closed_at": "2020-05-24T02:01:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "In some circumstances, it could be helpful to know inside an executable / function / script if it was invoked from pre-commit or from some other process. I wrote a hook that just printed all env variables set but I could not find an env variable like `PRECOMMIT_RUNNING` or similar. Would you consider setting such an env variable during running pre-commit? I searched old issues and documentation but I could not find anything.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1425", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1425/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1425/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1425/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1425", "id": 611123688, "node_id": "MDU6SXNzdWU2MTExMjM2ODg=", "number": 1425, "title": "Running hooks on multiple language versions", "user": {"login": "cjolowicz", "id": 653941, "node_id": "MDQ6VXNlcjY1Mzk0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/653941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjolowicz", "html_url": "https://github.com/cjolowicz", "followers_url": "https://api.github.com/users/cjolowicz/followers", "following_url": "https://api.github.com/users/cjolowicz/following{/other_user}", "gists_url": "https://api.github.com/users/cjolowicz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjolowicz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjolowicz/subscriptions", "organizations_url": "https://api.github.com/users/cjolowicz/orgs", "repos_url": "https://api.github.com/users/cjolowicz/repos", "events_url": "https://api.github.com/users/cjolowicz/events{/privacy}", "received_events_url": "https://api.github.com/users/cjolowicz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-02T07:08:33Z", "updated_at": "2020-05-02T14:59:30Z", "closed_at": "2020-05-02T13:45:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "In projects supporting multiple Python versions (or other language versions), what is the suggested way to run a hook on each of these versions? For example, flake8 will behave differently depending on which Python version it is run with.\r\n\r\nJudging from the documentation and existing issues in this repository, it seems that you need to add a hook for each language version. If so, would it make sense to add a `language_versions` keyword accepting a list of versions? Would you be willing to accept a PR for this?\r\n\r\nThanks for the excellent tool!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1423", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1423/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1423/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1423/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1423", "id": 609593236, "node_id": "MDU6SXNzdWU2MDk1OTMyMzY=", "number": 1423, "title": "Specifying hooks to be configured from a config file", "user": {"login": "onlinejudge95", "id": 44158581, "node_id": "MDQ6VXNlcjQ0MTU4NTgx", "avatar_url": "https://avatars3.githubusercontent.com/u/44158581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onlinejudge95", "html_url": "https://github.com/onlinejudge95", "followers_url": "https://api.github.com/users/onlinejudge95/followers", "following_url": "https://api.github.com/users/onlinejudge95/following{/other_user}", "gists_url": "https://api.github.com/users/onlinejudge95/gists{/gist_id}", "starred_url": "https://api.github.com/users/onlinejudge95/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onlinejudge95/subscriptions", "organizations_url": "https://api.github.com/users/onlinejudge95/orgs", "repos_url": "https://api.github.com/users/onlinejudge95/repos", "events_url": "https://api.github.com/users/onlinejudge95/events{/privacy}", "received_events_url": "https://api.github.com/users/onlinejudge95/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-30T05:28:28Z", "updated_at": "2020-05-29T15:59:11Z", "closed_at": "2020-04-30T11:07:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have started using black as a pre-commit hook, earlier I had it integrated black with my IDE, what I want now is to specify the path to config file i.e `pyproject.toml`. I **DO NOT** want to keep my config file at root dir so that I can keep all config related stuff at one place, is there any option to specify the config file path.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1420", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1420/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1420/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1420/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1420", "id": 609111079, "node_id": "MDU6SXNzdWU2MDkxMTEwNzk=", "number": 1420, "title": "Issues with virtualenv configuration", "user": {"login": "Eothred", "id": 187567, "node_id": "MDQ6VXNlcjE4NzU2Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/187567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Eothred", "html_url": "https://github.com/Eothred", "followers_url": "https://api.github.com/users/Eothred/followers", "following_url": "https://api.github.com/users/Eothred/following{/other_user}", "gists_url": "https://api.github.com/users/Eothred/gists{/gist_id}", "starred_url": "https://api.github.com/users/Eothred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Eothred/subscriptions", "organizations_url": "https://api.github.com/users/Eothred/orgs", "repos_url": "https://api.github.com/users/Eothred/repos", "events_url": "https://api.github.com/users/Eothred/events{/privacy}", "received_events_url": "https://api.github.com/users/Eothred/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-29T14:39:18Z", "updated_at": "2020-04-30T05:01:22Z", "closed_at": "2020-04-30T05:00:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nNot sure if I misunderstand something, but this was working very smoothly and effortlessly in the past.\r\n\r\nAfter recent upgrades, when I want to reinstall cache of pre-commit for a project, it fails. Below is the output I find. To me it looks like virtualenv is perhaps not installed as expected?\r\n\r\nI use Manjaro/Arch linux. I have tried both with the pre-commit installation from pip and from the package manager. The latter installs pre-commit version 2.2.0 at the moment. I use Python 3.8.2.\r\n\r\nProjects that has an existing virtualenv in ~/.cache/pre-commit works fine.\r\n\r\n```\r\n$ pre-commit run\r\n[INFO] Initializing environment for https://github.com/ambv/black.\r\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\r\n[INFO] Initializing environment for https://github.com/pre-commit/mirrors-mypy.\r\n[INFO] Installing environment for https://github.com/ambv/black.\r\n[INFO] Once installed this environment will be reused.\r\n[INFO] This may take a few minutes...\r\nAn unexpected error has occurred: CalledProcessError: command: ('/home/me/.cache/pre-commit/repoq7ihpwip/py_env-python3/bin/python', '/home/me/.cache/pre-commit/repoq7ihpwip/py_env-python3/bin/pip', 'install', '.')\r\nreturn code: 1\r\nexpected return code: 0\r\nstdout: (none)\r\nstderr:\r\n    ERROR: Can not perform a '--user' install. User site-packages are not visible in this virtualenv.\r\n    WARNING: You are using pip version 20.0.2; however, version 20.1 is available.\r\n    You should consider upgrading via the '/home/me/.cache/pre-commit/repoq7ihpwip/py_env-python3/bin/python -m pip install --upgrade pip' command.\r\n    \r\nCheck the log at /home/me/.cache/pre-commit/pre-commit.log\r\n$ ls /home/me/.cache/pre-commit/repoq7ihpwip/py_env-python3/bin/python\r\nls: cannot access '/home/me/.cache/pre-commit/repoq7ihpwip/py_env-python3/bin/python': No such file or directory\r\n$ ls -lh /home/me/.cache/pre-commit/repoq7ihpwip/                     \r\ntotal 284K\r\n-rw-r--r-- 1 me 1.9K Apr 29 16:33 CONTRIBUTING.md\r\n-rw-r--r-- 1 me 1.1K Apr 29 16:33 LICENSE\r\n-rw-r--r-- 1 me  140 Apr 29 16:33 MANIFEST.in\r\n-rw-r--r-- 1 me  660 Apr 29 16:33 Pipfile\r\n-rw-r--r-- 1 me  38K Apr 29 16:33 Pipfile.lock\r\n-rw-r--r-- 1 me  57K Apr 29 16:33 README.md\r\n-rw-r--r-- 1 me 137K Apr 29 16:33 black.py\r\n-rw-r--r-- 1 me 6.6K Apr 29 16:33 blackd.py\r\ndrwxr-xr-x 1 me  216 Apr 29 16:33 blib2to3\r\ndrwxr-xr-x 1 me  674 Apr 29 16:33 docs\r\n-rw-r--r-- 1 me  819 Apr 29 16:33 mypy.ini\r\ndrwxr-xr-x 1 me   18 Apr 29 16:33 plugin\r\ndrwxr-xr-x 1 me  158 Apr 29 16:33 profiling\r\n-rw-r--r-- 1 me  842 Apr 29 16:33 pyproject.toml\r\n-rw-r--r-- 1 me   82 Apr 29 16:33 readthedocs.yml\r\n-rw-r--r-- 1 me   75 Apr 29 16:33 setup.cfg\r\n-rw-r--r-- 1 me 2.2K Apr 29 16:33 setup.py\r\ndrwxr-xr-x 1 me   54 Apr 29 16:33 tests", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1419", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1419/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1419/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1419/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1419", "id": 608514158, "node_id": "MDU6SXNzdWU2MDg1MTQxNTg=", "number": 1419, "title": "Encountered migration mode", "user": {"login": "xiaotianq", "id": 52468479, "node_id": "MDQ6VXNlcjUyNDY4NDc5", "avatar_url": "https://avatars2.githubusercontent.com/u/52468479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaotianq", "html_url": "https://github.com/xiaotianq", "followers_url": "https://api.github.com/users/xiaotianq/followers", "following_url": "https://api.github.com/users/xiaotianq/following{/other_user}", "gists_url": "https://api.github.com/users/xiaotianq/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaotianq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaotianq/subscriptions", "organizations_url": "https://api.github.com/users/xiaotianq/orgs", "repos_url": "https://api.github.com/users/xiaotianq/repos", "events_url": "https://api.github.com/users/xiaotianq/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaotianq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-28T18:11:33Z", "updated_at": "2020-04-29T16:50:30Z", "closed_at": "2020-04-28T18:14:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "bug: pre-commit's script is installed in migration mode\r\nrun `pre-commit install -f --hook-type pre-commit` to fix this\r\n\r\nHow can we nee to fix this?\r\ngit ccmmit does not work but hooks are still running", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1418", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1418/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1418/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1418/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1418", "id": 608442571, "node_id": "MDU6SXNzdWU2MDg0NDI1NzE=", "number": 1418, "title": "post-checkout hook prevents pre-commit hooks from working with unstaged files", "user": {"login": "domodwyer", "id": 9275968, "node_id": "MDQ6VXNlcjkyNzU5Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/9275968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domodwyer", "html_url": "https://github.com/domodwyer", "followers_url": "https://api.github.com/users/domodwyer/followers", "following_url": "https://api.github.com/users/domodwyer/following{/other_user}", "gists_url": "https://api.github.com/users/domodwyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/domodwyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domodwyer/subscriptions", "organizations_url": "https://api.github.com/users/domodwyer/orgs", "repos_url": "https://api.github.com/users/domodwyer/repos", "events_url": "https://api.github.com/users/domodwyer/events{/privacy}", "received_events_url": "https://api.github.com/users/domodwyer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 85713405, "node_id": "MDU6TGFiZWw4NTcxMzQwNQ==", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 742693017, "node_id": "MDU6TGFiZWw3NDI2OTMwMTc=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/good-first-issue", "name": "good-first-issue", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-28T16:14:43Z", "updated_at": "2020-05-02T21:47:39Z", "closed_at": "2020-05-02T21:47:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there!\r\n\r\nMost important thing first: pre-commit is great, it makes managing git hooks trivial and when combined with static analysis hooks, helps our team immeasurably - **thanks for all the hard work**.\r\n\r\nWe have pre-commit hooks that run a bunch of checks, and thanks to #1339,  a post-checkout hook that does some workspace analysis and prints a few warnings if needed. \r\n\r\nUnfortunately this seems to have broken the \"stash unstaged changes\" behaviour when committing - the stash [runs a git checkout](https://github.com/pre-commit/pre-commit/blob/5a625013071877a5b5dc8eba5b25c791c9c9c6ec/pre_commit/staged_files_only.py#L60) to clear the working directory before running the hooks, and that fails because of the post-checkout hook. I'd expect that the working directory to be cleared as normal, commit OK and then the working directory to be restored as it does without the post-checkout hook, as the actual mechanism behind removing the unstaged changes and restoring them is hidden from the user.\r\n\r\nBelow is a quick test to reproduce it:\r\n\r\n```bash\r\n#!/usr/bin/env bash\r\n\r\nmkdir test\r\ncd test || exit\r\ngit init\r\n\r\n# Configure a pre-commit and post-checkout hook\r\ncat << EOF > .pre-commit-config.yaml\r\nrepos:\r\n  - repo: local\r\n    hooks:\r\n      - id: pre-commit-ok\r\n        name: Pre-commit hook that always passes\r\n        stages: [commit]\r\n        language: system\r\n        entry: sh -c 'exit 0'\r\n        always_run: true\r\n\r\n  - repo: local\r\n    hooks:\r\n      - id: post-checkout-fail\r\n        name: Post-checkout hook that fails\r\n        stages: [post-checkout]\r\n        language: system\r\n        entry: sh -c 'exit 1'\r\n        always_run: true\r\n\r\nEOF\r\n\r\necho \"bananas\" > great-things.txt\r\ngit add .\r\ngit commit -m \"init\"\r\n\r\n# Install the hooks\r\npre-commit install -t pre-commit\r\npre-commit install -t post-checkout\r\n\r\n# Do a checkout - this is expected to print an error from the lint\r\ngit checkout -b test\r\n\r\n# Change the original file\r\necho \"platanos\" >> great-things.txt\r\n\r\n# Add another file and stage it\r\necho \"42\" > answer.txt\r\ngit add answer.txt\r\n\r\n# Attempt to commit the new, staged file.\r\n#\r\n# Without the post-checkout hook, this causes the unstaged changes to be\r\n# stashed and the commit works as normal.\r\necho \"\"\r\necho \"\"\r\necho \"    Attempting to commit with unstaged changes\"\r\necho \"    This will fail when attempting to checkout as part of the commit hook:\"\r\necho \"\"\r\necho \"\"\r\ngit commit -m \"more info\"\r\n```\r\n\r\nUnfortunately there seems to be no easy way to skip the post-checkout hook when clearing the unstaged files with `git checkout`.\r\n\r\nHappy to open a PR to help fix this, just unsure what to do - I could swap the `git checkout` for a `git stash save --keep-index --include-untracked` but I assume it is using checkout for reason.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1417", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1417/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1417/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1417/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1417", "id": 608434319, "node_id": "MDU6SXNzdWU2MDg0MzQzMTk=", "number": 1417, "title": "No way to properly run hooks into subdirectory", "user": {"login": "mamyn0va", "id": 11281228, "node_id": "MDQ6VXNlcjExMjgxMjI4", "avatar_url": "https://avatars3.githubusercontent.com/u/11281228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mamyn0va", "html_url": "https://github.com/mamyn0va", "followers_url": "https://api.github.com/users/mamyn0va/followers", "following_url": "https://api.github.com/users/mamyn0va/following{/other_user}", "gists_url": "https://api.github.com/users/mamyn0va/gists{/gist_id}", "starred_url": "https://api.github.com/users/mamyn0va/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mamyn0va/subscriptions", "organizations_url": "https://api.github.com/users/mamyn0va/orgs", "repos_url": "https://api.github.com/users/mamyn0va/repos", "events_url": "https://api.github.com/users/mamyn0va/events{/privacy}", "received_events_url": "https://api.github.com/users/mamyn0va/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T16:02:53Z", "updated_at": "2020-04-28T19:38:21Z", "closed_at": "2020-04-28T16:12:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a git repo with a `.pre-commit-config.yaml` at the root.\r\nThe Go code is under src with `go.mod` and `go.sum`.\r\nI have no way to properly run hooks for Go files under src.\r\nMy workaround is to create a shell script for each Go hook at the root (e.g. `./go-unit-tests.sh`) and to change directory before running the cmd:\r\n\r\n## go-unit-tests.sh\r\n\r\n```shell\r\n#!/usr/bin/env sh\r\n\r\ncd src && go test ./...\r\n```\r\n\r\nAnd then set an entry for this hook in config file:\r\n\r\n## .pre-commit-config.yaml\r\n\r\n```yaml\r\nrepos:\r\n- repo: https://github.com/dnephin/pre-commit-golang\r\n  rev: v0.3.5\r\n  hooks:\r\n    - id: go-unit-tests\r\n      name: Run Go tests (go test)\r\n      entry: ./go-unit-tests.sh\r\n```\r\n\r\nThis way, the hook is correctly ran but I was wondering if there is another clean way to achieve this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1416", "repository_url": "https://api.github.com/repos/pre-commit/pre-commit", "labels_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1416/labels{/name}", "comments_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1416/comments", "events_url": "https://api.github.com/repos/pre-commit/pre-commit/issues/1416/events", "html_url": "https://github.com/pre-commit/pre-commit/issues/1416", "id": 607495938, "node_id": "MDU6SXNzdWU2MDc0OTU5Mzg=", "number": 1416, "title": "[Question] How can I have the config apply in a child directory, when commiting from a parent?", "user": {"login": "symonk", "id": 17887843, "node_id": "MDQ6VXNlcjE3ODg3ODQz", "avatar_url": "https://avatars0.githubusercontent.com/u/17887843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/symonk", "html_url": "https://github.com/symonk", "followers_url": "https://api.github.com/users/symonk/followers", "following_url": "https://api.github.com/users/symonk/following{/other_user}", "gists_url": "https://api.github.com/users/symonk/gists{/gist_id}", "starred_url": "https://api.github.com/users/symonk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/symonk/subscriptions", "organizations_url": "https://api.github.com/users/symonk/orgs", "repos_url": "https://api.github.com/users/symonk/repos", "events_url": "https://api.github.com/users/symonk/events{/privacy}", "received_events_url": "https://api.github.com/users/symonk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 321107135, "node_id": "MDU6TGFiZWwzMjExMDcxMzU=", "url": "https://api.github.com/repos/pre-commit/pre-commit/labels/question", "name": "question", "color": "999999", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-04-27T12:09:44Z", "updated_at": "2020-04-29T14:50:11Z", "closed_at": "2020-04-29T08:38:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "we have something like this:\r\n\r\n```\r\ncore_product:\r\n    QA:\r\n        auto_framework:\r\n                      pre-commit-config.yaml\r\n```\r\n\r\nHow, when commiting inside core_product can we have it use the `.pre-commit-config.yaml` from /QA/auto_framework/.pre-commit-config.yaml` ?\r\n\r\nI tried doing pre-commit install --config `/QA/automation_framework/.pre-commit-config.yaml` but when commiting higher up, it states no `.pre-commit-config.yaml` found.\r\n\r\nIs this possible? I set it all up using a virtualenv / makescript.  the install doesnt seem to honour the --config flag set, is there another way? (I dont want people to have to manually configure stuff after its been installed by me just to make it work)", "performed_via_github_app": null, "score": 1.0}]}