{"total_count": 33, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/miki725/django-url-filter/issues/92", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/92/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/92/events", "html_url": "https://github.com/miki725/django-url-filter/issues/92", "id": 545768826, "node_id": "MDU6SXNzdWU1NDU3Njg4MjY=", "number": 92, "title": "DateTime __date filter not working", "user": {"login": "danousna", "id": 19539672, "node_id": "MDQ6VXNlcjE5NTM5Njcy", "avatar_url": "https://avatars2.githubusercontent.com/u/19539672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danousna", "html_url": "https://github.com/danousna", "followers_url": "https://api.github.com/users/danousna/followers", "following_url": "https://api.github.com/users/danousna/following{/other_user}", "gists_url": "https://api.github.com/users/danousna/gists{/gist_id}", "starred_url": "https://api.github.com/users/danousna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danousna/subscriptions", "organizations_url": "https://api.github.com/users/danousna/orgs", "repos_url": "https://api.github.com/users/danousna/repos", "events_url": "https://api.github.com/users/danousna/events{/privacy}", "received_events_url": "https://api.github.com/users/danousna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-06T14:56:12Z", "updated_at": "2020-02-10T13:39:51Z", "closed_at": "2020-02-05T08:00:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI am trying to filter according to the following query : `received_at__date=2020-01-5`.\r\nThe model attribute `received_at` is a DateTime field. I want to filter according to a date, not a datetime.\r\n\r\nUsing [django query filter](https://docs.djangoproject.com/fr/3.0/ref/models/querysets/#date) does return one object : \r\n```python\r\nFoo.objects.filter(received_at__date=\"2020-01-5\") \r\n# returns: <QuerySet [<Foo: Foo object (...)>]>\r\n```\r\n\r\nHowever, using this package does not return anything and I can't understand why :\r\n```python\r\nclass FooFilterSet(ModelFilterSet):\r\n    class Meta(object):\r\n        model = Foo\r\n\r\nquery = QueryDict('received_at__date=2020-01-5')\r\nfs = FooFilterSet(data=query, queryset=Foo.objects.all())\r\nfs.filter() \r\n# returns: <QuerySet []>\r\n```\r\n\r\nEvery other filter types work correctly.\r\n\r\n```\r\nDjango==2.1.4\r\ndjango-url-filter==0.3.14\r\n```\r\n\r\nThanks for your help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/84", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/84/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/84/events", "html_url": "https://github.com/miki725/django-url-filter/issues/84", "id": 472884501, "node_id": "MDU6SXNzdWU0NzI4ODQ1MDE=", "number": 84, "title": "Fix the docs in url_filter/integrations/drf_coreapi.py", "user": {"login": "user-name-is-taken", "id": 14959985, "node_id": "MDQ6VXNlcjE0OTU5OTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/14959985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/user-name-is-taken", "html_url": "https://github.com/user-name-is-taken", "followers_url": "https://api.github.com/users/user-name-is-taken/followers", "following_url": "https://api.github.com/users/user-name-is-taken/following{/other_user}", "gists_url": "https://api.github.com/users/user-name-is-taken/gists{/gist_id}", "starred_url": "https://api.github.com/users/user-name-is-taken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/user-name-is-taken/subscriptions", "organizations_url": "https://api.github.com/users/user-name-is-taken/orgs", "repos_url": "https://api.github.com/users/user-name-is-taken/repos", "events_url": "https://api.github.com/users/user-name-is-taken/events{/privacy}", "received_events_url": "https://api.github.com/users/user-name-is-taken/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-25T14:02:23Z", "updated_at": "2019-08-04T18:20:46Z", "closed_at": "2019-07-28T14:44:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's a [link](https://github.com/miki725/django-url-filter/blob/924c7b1e07e5855234ffcc28c11f10732fd5390e/url_filter/integrations/drf_coreapi.py) to the file. Currently the docs for `iregex` say `Case insensitive match when value is within comma separated range`, which is wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/77", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/77/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/77/events", "html_url": "https://github.com/miki725/django-url-filter/issues/77", "id": 405910808, "node_id": "MDU6SXNzdWU0MDU5MTA4MDg=", "number": 77, "title": "Question: Filtering on timestamps(not just dates)", "user": {"login": "prarabdh9909", "id": 25212885, "node_id": "MDQ6VXNlcjI1MjEyODg1", "avatar_url": "https://avatars0.githubusercontent.com/u/25212885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prarabdh9909", "html_url": "https://github.com/prarabdh9909", "followers_url": "https://api.github.com/users/prarabdh9909/followers", "following_url": "https://api.github.com/users/prarabdh9909/following{/other_user}", "gists_url": "https://api.github.com/users/prarabdh9909/gists{/gist_id}", "starred_url": "https://api.github.com/users/prarabdh9909/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prarabdh9909/subscriptions", "organizations_url": "https://api.github.com/users/prarabdh9909/orgs", "repos_url": "https://api.github.com/users/prarabdh9909/repos", "events_url": "https://api.github.com/users/prarabdh9909/events{/privacy}", "received_events_url": "https://api.github.com/users/prarabdh9909/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-01T23:18:11Z", "updated_at": "2019-02-02T04:02:25Z", "closed_at": "2019-02-02T03:07:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know that queries like datetimefield__gte=2019-01-05 is supported. \r\n\r\nHow do I get even more granular and use timestamps here (eg. 2019-01-05T18:21:57.534972-08:00) ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/74", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/74/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/74/events", "html_url": "https://github.com/miki725/django-url-filter/issues/74", "id": 392567792, "node_id": "MDU6SXNzdWUzOTI1Njc3OTI=", "number": 74, "title": "Date Lookup doesn't work", "user": {"login": "rupesh2192", "id": 16493834, "node_id": "MDQ6VXNlcjE2NDkzODM0", "avatar_url": "https://avatars3.githubusercontent.com/u/16493834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rupesh2192", "html_url": "https://github.com/rupesh2192", "followers_url": "https://api.github.com/users/rupesh2192/followers", "following_url": "https://api.github.com/users/rupesh2192/following{/other_user}", "gists_url": "https://api.github.com/users/rupesh2192/gists{/gist_id}", "starred_url": "https://api.github.com/users/rupesh2192/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rupesh2192/subscriptions", "organizations_url": "https://api.github.com/users/rupesh2192/orgs", "repos_url": "https://api.github.com/users/rupesh2192/repos", "events_url": "https://api.github.com/users/rupesh2192/events{/privacy}", "received_events_url": "https://api.github.com/users/rupesh2192/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-19T11:57:42Z", "updated_at": "2019-02-02T06:06:41Z", "closed_at": "2019-02-02T06:06:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "__date lookup for a DateTimeField doesn't work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/66", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/66/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/66/events", "html_url": "https://github.com/miki725/django-url-filter/issues/66", "id": 345332990, "node_id": "MDU6SXNzdWUzNDUzMzI5OTA=", "number": 66, "title": "ModelFilterSet change filter source", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-07-27T18:59:39Z", "updated_at": "2018-07-27T19:42:00Z", "closed_at": "2018-07-27T19:42:00Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This should work:\r\n\r\n```python\r\nclass MyFilterSet(ModelFilterSet):\r\n  class Meta:\r\n    model = Foo\r\n    fields = ['foo']  # not a model field\r\n    extra_kwargs = {'foo': {'source': 'bar'}}  # bar is a field on model\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/64", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/64/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/64/events", "html_url": "https://github.com/miki725/django-url-filter/issues/64", "id": 344464185, "node_id": "MDU6SXNzdWUzNDQ0NjQxODU=", "number": 64, "title": "Returning all values if invalid filter value (string)", "user": {"login": "TelmoM", "id": 227810, "node_id": "MDQ6VXNlcjIyNzgxMA==", "avatar_url": "https://avatars3.githubusercontent.com/u/227810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TelmoM", "html_url": "https://github.com/TelmoM", "followers_url": "https://api.github.com/users/TelmoM/followers", "following_url": "https://api.github.com/users/TelmoM/following{/other_user}", "gists_url": "https://api.github.com/users/TelmoM/gists{/gist_id}", "starred_url": "https://api.github.com/users/TelmoM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TelmoM/subscriptions", "organizations_url": "https://api.github.com/users/TelmoM/orgs", "repos_url": "https://api.github.com/users/TelmoM/repos", "events_url": "https://api.github.com/users/TelmoM/events{/privacy}", "received_events_url": "https://api.github.com/users/TelmoM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-07-25T14:19:07Z", "updated_at": "2018-07-27T19:42:00Z", "closed_at": "2018-07-27T19:42:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if this is an issue or a feature :) But when the filter value does not exist all the results are returned, for example:\r\n```\r\n/?state=done\r\n# (Returns only the results where the field state is equal to 'done')\r\n/?state=xpto\r\n# (Returns all the results instead of none) (I think this is **not** the expected behaviour)\r\n```\r\n**Note:**\r\nThis behaviour does not apply if the field is int, for example id=33 (If 33 does not exist it returns empty).\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/63", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/63/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/63/events", "html_url": "https://github.com/miki725/django-url-filter/issues/63", "id": 343574283, "node_id": "MDU6SXNzdWUzNDM1NzQyODM=", "number": 63, "title": "Using without Django", "user": {"login": "robvdl", "id": 1018674, "node_id": "MDQ6VXNlcjEwMTg2NzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1018674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robvdl", "html_url": "https://github.com/robvdl", "followers_url": "https://api.github.com/users/robvdl/followers", "following_url": "https://api.github.com/users/robvdl/following{/other_user}", "gists_url": "https://api.github.com/users/robvdl/gists{/gist_id}", "starred_url": "https://api.github.com/users/robvdl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robvdl/subscriptions", "organizations_url": "https://api.github.com/users/robvdl/orgs", "repos_url": "https://api.github.com/users/robvdl/repos", "events_url": "https://api.github.com/users/robvdl/events{/privacy}", "received_events_url": "https://api.github.com/users/robvdl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-07-23T10:23:37Z", "updated_at": "2020-02-18T17:22:31Z", "closed_at": "2019-01-24T12:55:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have plenty of SQLAlchemy code bases that are not based on Django where this library could be useful.\r\n\r\nIt looks like the sqlalchemy backend itself can be used without Django as I don't see any references to Django imports:\r\n\r\nhttp://django-url-filter.readthedocs.io/en/latest/_modules/url_filter/backends/sqlalchemy.html\r\n\r\nHave you considered splitting this part out to a separate library? For now I would have to copy this file in my codebase (keeping the comments + copyright reference off course), but it would be nice not to have to do this in the future.\r\n\r\nThe requirements.txt pulls in Django as a dependency that is why I can't exactly use it, it would basically trigger it installing Django in a flask project, or bottle project etc.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/60", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/60/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/60/events", "html_url": "https://github.com/miki725/django-url-filter/issues/60", "id": 330077099, "node_id": "MDU6SXNzdWUzMzAwNzcwOTk=", "number": 60, "title": "How to specify a url filter for related models with multiple levels ?", "user": {"login": "selimt", "id": 15021762, "node_id": "MDQ6VXNlcjE1MDIxNzYy", "avatar_url": "https://avatars2.githubusercontent.com/u/15021762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/selimt", "html_url": "https://github.com/selimt", "followers_url": "https://api.github.com/users/selimt/followers", "following_url": "https://api.github.com/users/selimt/following{/other_user}", "gists_url": "https://api.github.com/users/selimt/gists{/gist_id}", "starred_url": "https://api.github.com/users/selimt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/selimt/subscriptions", "organizations_url": "https://api.github.com/users/selimt/orgs", "repos_url": "https://api.github.com/users/selimt/repos", "events_url": "https://api.github.com/users/selimt/events{/privacy}", "received_events_url": "https://api.github.com/users/selimt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-07T00:28:51Z", "updated_at": "2018-06-07T01:19:43Z", "closed_at": "2018-06-07T01:17:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I can use the url-filter manually for related models multiple levels deep like this:\r\n\r\n```\r\nfrom django.http import QueryDict\r\nfrom url_filter.filtersets import ModelFilterSet\r\nclass FilterSet(ModelFilterSet):\r\n     class Meta(object):\r\n         model = TransferRequest\r\n\r\n>>> q = QueryDict('transfer_job__transfer_session__priority=1')\r\n>>> fs = FilterSet(data=q, queryset=TransferRequest.objects.all())\r\n>>> fs.filter()\r\n<QuerySet [<TransferRequest: ffdf29cb-1de7-4553-9c8b-b476a0d9d9f0>, ...\r\n```\r\n\r\nbut if I have a model view set like this:\r\n\r\n```\r\nclass TransferRequestViewSet(QueryOrderableViewSetMixin, viewsets.ModelViewSet):\r\n    queryset = TransferRequest.objects.all()\r\n    serializer_class = TransferRequestSerializer\r\n    filter_backends = [DjangoFilterBackend]\r\n    filter_fields = ['source_studio', 'destination_studio', 'requester_studio', 'user', 'created',\r\n                     'priority', 'options', 'status', 'paths', 'guid',\r\n                     # relation names\r\n                     \"transfer_job\", \"transfer_job__transfer_session\"]\r\n```\r\n\r\nand I enter a URL like this:\r\n```\r\nhttp://localhost/api/requests/?transfer_job__transfer_session__priority=1\r\n```\r\n\r\nI get the following error:\r\n\r\n```\r\n2018-06-07T00:16:21.404012283Z KeyError: 'transfer_job__transfer_session'\r\n2018-06-07T00:16:21.404015892Z \r\n2018-06-07T00:16:21.404019373Z During handling of the above exception, another exception occurred:\r\n2018-06-07T00:16:21.404022912Z \r\n2018-06-07T00:16:21.404026226Z Traceback (most recent call last):\r\n2018-06-07T00:16:21.404029726Z   File \"/usr/local/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 41, in inner\r\n2018-06-07T00:16:21.404033418Z     response = get_response(request)\r\n2018-06-07T00:16:21.404048822Z   File \"/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n2018-06-07T00:16:21.404052804Z     response = self.process_exception_by_middleware(e, request)\r\n2018-06-07T00:16:21.404055994Z   File \"/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n2018-06-07T00:16:21.404059390Z     response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n2018-06-07T00:16:21.404062545Z   File \"/usr/local/lib/python3.6/site-packages/django/views/decorators/csrf.py\", line 58, in wrapped_view\r\n2018-06-07T00:16:21.404065945Z     return view_func(*args, **kwargs)\r\n2018-06-07T00:16:21.404068985Z   File \"/usr/local/lib/python3.6/site-packages/rest_framework/viewsets.py\", line 103, in view\r\n2018-06-07T00:16:21.404072336Z     return self.dispatch(request, *args, **kwargs)\r\n2018-06-07T00:16:21.404075373Z   File \"/usr/local/lib/python3.6/site-packages/rest_framework/views.py\", line 483, in dispatch\r\n2018-06-07T00:16:21.404078630Z     response = self.handle_exception(exc)\r\n2018-06-07T00:16:21.404081677Z   File \"/usr/local/lib/python3.6/site-packages/rest_framework/views.py\", line 443, in handle_exception\r\n2018-06-07T00:16:21.404085025Z     self.raise_uncaught_exception(exc)\r\n2018-06-07T00:16:21.404088460Z   File \"/usr/local/lib/python3.6/site-packages/rest_framework/views.py\", line 480, in dispatch\r\n2018-06-07T00:16:21.404091759Z     response = handler(request, *args, **kwargs)\r\n2018-06-07T00:16:21.404094827Z   File \"/usr/local/lib/python3.6/site-packages/rest_framework/mixins.py\", line 40, in list\r\n2018-06-07T00:16:21.404098214Z     queryset = self.filter_queryset(self.get_queryset())\r\n2018-06-07T00:16:21.404101283Z   File \"/usr/local/lib/python3.6/site-packages/rest_framework/generics.py\", line 152, in filter_queryset\r\n2018-06-07T00:16:21.404104530Z     queryset = backend().filter_queryset(self.request, queryset, self)\r\n2018-06-07T00:16:21.404108429Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/integrations/drf.py\", line 160, in filter_queryset\r\n2018-06-07T00:16:21.404111880Z     return _filter.filter()\r\n2018-06-07T00:16:21.404115061Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/filtersets/base.py\", line 324, in filter\r\n2018-06-07T00:16:21.404118401Z     specs = self.get_specs()\r\n2018-06-07T00:16:21.404121429Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/filtersets/base.py\", line 358, in get_specs\r\n2018-06-07T00:16:21.404124811Z     specs.append(self.get_spec(data))\r\n2018-06-07T00:16:21.404127821Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/filtersets/base.py\", line 400, in get_spec\r\n2018-06-07T00:16:21.404131037Z     if name not in self.filters:\r\n2018-06-07T00:16:21.404134085Z   File \"/usr/local/lib/python3.6/site-packages/cached_property.py\", line 35, in __get__\r\n2018-06-07T00:16:21.404138102Z     value = obj.__dict__[self.func.__name__] = self.func(obj)\r\n2018-06-07T00:16:21.404141194Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/filtersets/base.py\", line 224, in filters\r\n2018-06-07T00:16:21.404147396Z     filters = self.get_filters()\r\n2018-06-07T00:16:21.404150516Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/filtersets/base.py\", line 487, in get_filters\r\n2018-06-07T00:16:21.404153786Z     _filter = self._build_filter(name, state)\r\n2018-06-07T00:16:21.404156840Z   File \"/usr/local/lib/python3.6/site-packages/url_filter/filtersets/django.py\", line 93, in _build_filter\r\n2018-06-07T00:16:21.404160186Z     field = self.Meta.model._meta.get_field(name)\r\n2018-06-07T00:16:21.404163206Z   File \"/usr/local/lib/python3.6/site-packages/django/db/models/options.py\", line 619, in get_field\r\n2018-06-07T00:16:21.404166434Z     raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, field_name))\r\n2018-06-07T00:16:21.404169750Z django.core.exceptions.FieldDoesNotExist: TransferRequest has no field named 'transfer_job__transfer_session'\r\n```\r\n\r\nIs there a special syntax for entering such filters ?\r\n\r\nThanks\r\n-Selim", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/57", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/57/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/57/events", "html_url": "https://github.com/miki725/django-url-filter/issues/57", "id": 299640429, "node_id": "MDU6SXNzdWUyOTk2NDA0Mjk=", "number": 57, "title": "strict_mode not working for me, is it problem at my end only?", "user": {"login": "rajesh-h", "id": 6675921, "node_id": "MDQ6VXNlcjY2NzU5MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6675921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rajesh-h", "html_url": "https://github.com/rajesh-h", "followers_url": "https://api.github.com/users/rajesh-h/followers", "following_url": "https://api.github.com/users/rajesh-h/following{/other_user}", "gists_url": "https://api.github.com/users/rajesh-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/rajesh-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rajesh-h/subscriptions", "organizations_url": "https://api.github.com/users/rajesh-h/orgs", "repos_url": "https://api.github.com/users/rajesh-h/repos", "events_url": "https://api.github.com/users/rajesh-h/events{/privacy}", "received_events_url": "https://api.github.com/users/rajesh-h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-23T08:59:04Z", "updated_at": "2018-02-26T06:11:18Z", "closed_at": "2018-02-25T14:47:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Team,\r\n\r\nusing below\r\nDjango 2.0\r\nDRF 3.7\r\n\r\n\r\nBelow is my filterClass and I made changes to strict_mode still I do not get validation error.\r\n\r\nI entered the below url on browser\r\nhttp://127.0.0.1:8000/api/listmydata/?nonexistcolumn=123 \r\n\r\nI was expecting a validation error, but I get the result set which is the default behavior of strict_mode. How do I override to fail? \r\n\r\nAm I making a mistake here in over riding in my filter Class?\r\n\r\n```\r\nfrom url_filter.filtersets import ModelFilterSet, StrictMode\r\n\r\nclass myCustomFilterSet(ModelFilterSet):\r\n    strict_mode = StrictMode.fail\r\n    #strict_mode = 'fail'   #I tried this as well\r\n\r\n    class Meta(object):\r\n        model = myModel\r\n```\r\n```\r\nclass MyDataList(generics.ListAPIView):\r\n    queryset = MyModel.objects.all()\r\n    serializer_class = mySerializer\r\n    filter_class = myCustomFilterSet\r\n```\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/56", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/56/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/56/events", "html_url": "https://github.com/miki725/django-url-filter/issues/56", "id": 299374239, "node_id": "MDU6SXNzdWUyOTkzNzQyMzk=", "number": 56, "title": "Question/Assistance - django-url-filter-relatedfielderror", "user": {"login": "rajesh-h", "id": 6675921, "node_id": "MDQ6VXNlcjY2NzU5MjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6675921?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rajesh-h", "html_url": "https://github.com/rajesh-h", "followers_url": "https://api.github.com/users/rajesh-h/followers", "following_url": "https://api.github.com/users/rajesh-h/following{/other_user}", "gists_url": "https://api.github.com/users/rajesh-h/gists{/gist_id}", "starred_url": "https://api.github.com/users/rajesh-h/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rajesh-h/subscriptions", "organizations_url": "https://api.github.com/users/rajesh-h/orgs", "repos_url": "https://api.github.com/users/rajesh-h/repos", "events_url": "https://api.github.com/users/rajesh-h/events{/privacy}", "received_events_url": "https://api.github.com/users/rajesh-h/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-22T14:29:07Z", "updated_at": "2018-02-22T19:14:01Z", "closed_at": "2018-02-22T19:14:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am working on DRF generic listview with DUF as filter backend.\r\n\r\nCould you please assist me to get around this error? I am sure i am doing something wrong here with related to related fields.\r\n\r\nWhen i try to filter on url I get the following error. I would like to filter on all columns of child model.\r\n\r\n```\r\nhttp://127.0.0.1:8000/api/childlist/?customer_id=2\r\n\r\nAttributeError at /api/childlist/\r\n'OneToOneField' object has no attribute 'rel'\r\nBelow is my work so far:\r\n```\r\n\r\nmodels.py\r\n```\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\n# Create your models here.\r\n\r\nclass Parent(models.Model):\r\n    customer_id = models.BigIntegerField(primary_key=True)\r\n    customer_name = models.CharField(blank=True, null=True, max_length=50)\r\n    age = models.IntegerField(blank=True, null=True)\r\n\r\n\r\nclass Child(models.Model):\r\n    customer_id = models.OneToOneField(Parent, on_delete=models.DO_NOTHING, related_name='customer_id_fk_parent')\r\n    used_by = models.ForeignKey(User, on_delete=models.DO_NOTHING, related_name='rel_user')\r\n    comments = models.TextField(blank=True,null=True)\r\n```\r\nviews.py\r\n```\r\nfrom rest_framework import generics\r\n\r\nfrom onetoone.models import Child\r\nfrom .serializers import Child_Serializer\r\nfrom url_filter.integrations.drf import DjangoFilterBackend\r\n\r\n\r\n#Required columns on Child -- All columns\r\nFILTER_REQ_COLUMNS = [field.name for field in Child._meta.get_fields()]\r\n\r\n\r\nclass ChildList(generics.ListAPIView):\r\n    queryset = Child.objects.all()\r\n    serializer_class = Child_Serializer\r\n    filter_backends = [DjangoFilterBackend]\r\n    filter_fields = FILTER_REQ_COLUMNS\r\n```\r\nserializers.py\r\n```\r\nfrom rest_framework import serializers\r\nfrom onetoone.models import Child\r\n\r\n\r\nclass Child_Serializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Child\r\n        exclude = []\r\n```\r\nurls.py\r\n`path('childlist/', ChildList.as_view(), name='api_child_list'),`\r\nCurrent list data as below\r\n\r\n```\r\nhttp://127.0.0.1:8000/api/childlist/\r\n\r\nHTTP 200 OK\r\nAllow: GET, HEAD, OPTIONS\r\nContent-Type: application/json\r\nVary: Accept\r\n\r\n{\r\n    \"count\": 3,\r\n    \"next\": null,\r\n    \"previous\": null,\r\n    \"results\": [\r\n        {\r\n            \"id\": 1,\r\n            \"comments\": \"1 is in use\",\r\n            \"customer_id\": 1,\r\n            \"used_by\": 1\r\n        },\r\n        {\r\n            \"id\": 2,\r\n            \"comments\": \"2 is in use\",\r\n            \"customer_id\": 2,\r\n            \"used_by\": 1\r\n        },\r\n        {\r\n            \"id\": 3,\r\n            \"comments\": \"3 in use\",\r\n            \"customer_id\": 3,\r\n            \"used_by\": 1\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nfulltrace back is here\r\nhttps://gist.github.com/just10minutes/b9add9c00ee3a14764b324ec30c65344", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/53", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/53/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/53/events", "html_url": "https://github.com/miki725/django-url-filter/issues/53", "id": 291573703, "node_id": "MDU6SXNzdWUyOTE1NzM3MDM=", "number": 53, "title": "URL filter negative lookup logic is counterintuitive / faulty", "user": {"login": "webrunners", "id": 4319975, "node_id": "MDQ6VXNlcjQzMTk5NzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4319975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/webrunners", "html_url": "https://github.com/webrunners", "followers_url": "https://api.github.com/users/webrunners/followers", "following_url": "https://api.github.com/users/webrunners/following{/other_user}", "gists_url": "https://api.github.com/users/webrunners/gists{/gist_id}", "starred_url": "https://api.github.com/users/webrunners/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/webrunners/subscriptions", "organizations_url": "https://api.github.com/users/webrunners/orgs", "repos_url": "https://api.github.com/users/webrunners/repos", "events_url": "https://api.github.com/users/webrunners/events{/privacy}", "received_events_url": "https://api.github.com/users/webrunners/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-25T13:42:05Z", "updated_at": "2018-02-25T14:42:49Z", "closed_at": "2018-02-25T14:42:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "With current library, it is possible to have negative lookups, like this:\r\n`title__contains!=WIP` will yield all the entries not containing \"WIP\", which works well.\r\n\r\nNow, let's suppose we want to have all entries not containing WIP which are authored by 'admin'. No problem, we just add another clause here: `title__contains!=WIP&author=admin`.\r\n\r\nBut what if we also want filter this set down by adding a condition of entry not having 'draft' status? Logic tells us to add another negative condition: `title__contains!=WIP&author=admin&status!=draft`.\r\n\r\nUnfortunately, with current implementation, it'll result to the following SQL: `select * from entry_entries where author = 'admin' and not (title like '%WIP%' and status='draft')` which seems a bit illogical. Correct (IMO) behavior would translate this filter URL to `select * from entry_entries where author = 'admin' and not title like '%WIP%' and not status = 'draft'`.\r\n\r\nThe reason is that implementation of filtering tries to deal with multiple positive and negative filters similarly:\r\n        include = {self._prepare_spec(i): i.value for i in self.includes}\r\n        exclude = {self._prepare_spec(i): i.value for i in self.excludes}\r\n\r\n        if include:\r\n            queryset = queryset.filter(**include)\r\n        if exclude:\r\n            queryset = queryset.exclude(**exclude)\r\n\r\nHowever, .exclude() logic with multiple kwargs differs from .filter(). Django doc suggests to use chained .exclude() instead to achieve similarity to .filter()\r\n\r\nThat's why I suggest to fix this logical issue by changing implementation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/51", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/51/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/51/events", "html_url": "https://github.com/miki725/django-url-filter/issues/51", "id": 282416336, "node_id": "MDU6SXNzdWUyODI0MTYzMzY=", "number": 51, "title": "Use tox for testing in travis", "user": {"login": "haakenlid", "id": 1686266, "node_id": "MDQ6VXNlcjE2ODYyNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1686266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haakenlid", "html_url": "https://github.com/haakenlid", "followers_url": "https://api.github.com/users/haakenlid/followers", "following_url": "https://api.github.com/users/haakenlid/following{/other_user}", "gists_url": "https://api.github.com/users/haakenlid/gists{/gist_id}", "starred_url": "https://api.github.com/users/haakenlid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haakenlid/subscriptions", "organizations_url": "https://api.github.com/users/haakenlid/orgs", "repos_url": "https://api.github.com/users/haakenlid/repos", "events_url": "https://api.github.com/users/haakenlid/events{/privacy}", "received_events_url": "https://api.github.com/users/haakenlid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-15T12:42:58Z", "updated_at": "2018-02-27T16:11:30Z", "closed_at": "2018-02-27T16:11:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently only django 1.11 is tested in travis, because the MakeFile command doesn't run tox. Instead theres' \r\n\r\nIt's rather confusing to have a tox config and not actually use it for continuous integration. Tox is more configurable than just using varibles in the .travis.yml file.\r\n\r\nhttps://github.com/miki725/django-url-filter/blob/master/Makefile\r\nhttps://github.com/miki725/django-url-filter/blob/master/.travis.yml\r\n\r\nThere is a tox config file, but there's some problems when installing pip packages with pypy. \r\nhttps://github.com/miki725/django-url-filter/blob/master/tox.ini\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/49", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/49/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/49/events", "html_url": "https://github.com/miki725/django-url-filter/issues/49", "id": 282397297, "node_id": "MDU6SXNzdWUyODIzOTcyOTc=", "number": 49, "title": "Does not work with Django 2.0", "user": {"login": "haakenlid", "id": 1686266, "node_id": "MDQ6VXNlcjE2ODYyNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1686266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haakenlid", "html_url": "https://github.com/haakenlid", "followers_url": "https://api.github.com/users/haakenlid/followers", "following_url": "https://api.github.com/users/haakenlid/following{/other_user}", "gists_url": "https://api.github.com/users/haakenlid/gists{/gist_id}", "starred_url": "https://api.github.com/users/haakenlid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haakenlid/subscriptions", "organizations_url": "https://api.github.com/users/haakenlid/orgs", "repos_url": "https://api.github.com/users/haakenlid/repos", "events_url": "https://api.github.com/users/haakenlid/events{/privacy}", "received_events_url": "https://api.github.com/users/haakenlid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-15T11:20:10Z", "updated_at": "2018-02-25T14:41:32Z", "closed_at": "2018-02-25T14:41:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "django-url-filter uses some features that have been [deprecated with django version 2.0](https://docs.djangoproject.com/en/2.0/releases/2.0/#features-removed-in-2-0)\r\n\r\n    Usage of field.rel has been deprecated. Use field.remote_field instead.\r\n\r\nThis is used at least one place in django-url-filter.\r\n\r\nhttps://github.com/miki725/django-url-filter/blob/master/url_filter/filtersets/django.py#L126", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/47", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/47/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/47/events", "html_url": "https://github.com/miki725/django-url-filter/issues/47", "id": 252183432, "node_id": "MDU6SXNzdWUyNTIxODM0MzI=", "number": 47, "title": "Django: Validating Range Lookups in URL Query Parameters", "user": {"login": "nogurenn", "id": 15997393, "node_id": "MDQ6VXNlcjE1OTk3Mzkz", "avatar_url": "https://avatars0.githubusercontent.com/u/15997393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nogurenn", "html_url": "https://github.com/nogurenn", "followers_url": "https://api.github.com/users/nogurenn/followers", "following_url": "https://api.github.com/users/nogurenn/following{/other_user}", "gists_url": "https://api.github.com/users/nogurenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/nogurenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nogurenn/subscriptions", "organizations_url": "https://api.github.com/users/nogurenn/orgs", "repos_url": "https://api.github.com/users/nogurenn/repos", "events_url": "https://api.github.com/users/nogurenn/events{/privacy}", "received_events_url": "https://api.github.com/users/nogurenn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-23T07:16:17Z", "updated_at": "2020-06-13T12:30:14Z", "closed_at": "2020-06-13T12:30:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is this how parsing and validation of ranges happen for django-url-filter?\r\n`GET /model/?departure__range=2017-01-01,2017-01-30`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/43", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/43/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/43/events", "html_url": "https://github.com/miki725/django-url-filter/issues/43", "id": 250641638, "node_id": "MDU6SXNzdWUyNTA2NDE2Mzg=", "number": 43, "title": "change enum34 dependency to enum-compat", "user": {"login": "haakenlid", "id": 1686266, "node_id": "MDQ6VXNlcjE2ODYyNjY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1686266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haakenlid", "html_url": "https://github.com/haakenlid", "followers_url": "https://api.github.com/users/haakenlid/followers", "following_url": "https://api.github.com/users/haakenlid/following{/other_user}", "gists_url": "https://api.github.com/users/haakenlid/gists{/gist_id}", "starred_url": "https://api.github.com/users/haakenlid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haakenlid/subscriptions", "organizations_url": "https://api.github.com/users/haakenlid/orgs", "repos_url": "https://api.github.com/users/haakenlid/repos", "events_url": "https://api.github.com/users/haakenlid/events{/privacy}", "received_events_url": "https://api.github.com/users/haakenlid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-16T14:11:54Z", "updated_at": "2017-08-17T11:29:09Z", "closed_at": "2017-08-17T11:29:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm using python 3.6 and after installing django-url-filter my test runner is broken. Turns out that it's caused by the enum34 package which is not compatible with the standard library enum, which is used by other standard library modules such as `re`. \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"<string>\", line 3, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/execnet/gateway_base.py\", line 18, in <module>\r\n    import traceback\r\n  File \"/usr/local/lib/python3.6/traceback.py\", line 5, in <module>\r\n    import linecache\r\n  File \"/usr/local/lib/python3.6/linecache.py\", line 11, in <module>\r\n    import tokenize\r\n  File \"/usr/local/lib/python3.6/tokenize.py\", line 33, in <module>\r\n    import re\r\n  File \"/usr/local/lib/python3.6/re.py\", line 142, in <module>\r\n    class RegexFlag(enum.IntFlag):\r\nAttributeError: module 'enum' has no attribute 'IntFlag'\r\n```\r\nIt seems that there is a package that solves this. It will install enum34 only on versions < 3.4, to avoid messing with the standard library enum in current versions of python 3.\r\n\r\nhttps://pypi.python.org/pypi/enum-compat", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/40", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/40/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/40/events", "html_url": "https://github.com/miki725/django-url-filter/issues/40", "id": 249842002, "node_id": "MDU6SXNzdWUyNDk4NDIwMDI=", "number": 40, "title": "Documentation examples don't include imports", "user": {"login": "jonathan-golorry", "id": 14170183, "node_id": "MDQ6VXNlcjE0MTcwMTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/14170183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathan-golorry", "html_url": "https://github.com/jonathan-golorry", "followers_url": "https://api.github.com/users/jonathan-golorry/followers", "following_url": "https://api.github.com/users/jonathan-golorry/following{/other_user}", "gists_url": "https://api.github.com/users/jonathan-golorry/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathan-golorry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathan-golorry/subscriptions", "organizations_url": "https://api.github.com/users/jonathan-golorry/orgs", "repos_url": "https://api.github.com/users/jonathan-golorry/repos", "events_url": "https://api.github.com/users/jonathan-golorry/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathan-golorry/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-12T23:41:59Z", "updated_at": "2018-02-25T14:54:56Z", "closed_at": "2018-02-25T14:54:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having the imports in the examples would be really useful, especially since you have two different `DjangoFilterBackend` classes (thankfully they take different numbers of `__init__` arguments, otherwise I would have been extremely confused).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/39", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/39/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/39/events", "html_url": "https://github.com/miki725/django-url-filter/issues/39", "id": 237819357, "node_id": "MDU6SXNzdWUyMzc4MTkzNTc=", "number": 39, "title": "Support for fields = '__all__'", "user": {"login": "kyleobrien91", "id": 2432944, "node_id": "MDQ6VXNlcjI0MzI5NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2432944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleobrien91", "html_url": "https://github.com/kyleobrien91", "followers_url": "https://api.github.com/users/kyleobrien91/followers", "following_url": "https://api.github.com/users/kyleobrien91/following{/other_user}", "gists_url": "https://api.github.com/users/kyleobrien91/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleobrien91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleobrien91/subscriptions", "organizations_url": "https://api.github.com/users/kyleobrien91/orgs", "repos_url": "https://api.github.com/users/kyleobrien91/repos", "events_url": "https://api.github.com/users/kyleobrien91/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleobrien91/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796107, "node_id": "MDU6TGFiZWwyNTE3OTYxMDc=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-06-22T11:48:47Z", "updated_at": "2019-01-24T14:01:31Z", "closed_at": "2019-01-24T14:01:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find an indication on Github, ReadtheDocs or in the code that suggests that there is support for this.\r\n\r\nBasically, in the Meta class of a serializer, you can specify fields = '__all__' to indicate that the serializer should represent all fields in its return.\r\n\r\nSimilarly, I'm keen to see if we can currently use something like `filter_fields = '__all__'` in the view/viewset definition. \r\n\r\nThe behaviour will then essentially automatically allow filtering on all model fields for that viewset.\r\n\r\nThoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/38", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/38/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/38/events", "html_url": "https://github.com/miki725/django-url-filter/issues/38", "id": 236962142, "node_id": "MDU6SXNzdWUyMzY5NjIxNDI=", "number": 38, "title": "Using `__in` returns entire queryset", "user": {"login": "kyleobrien91", "id": 2432944, "node_id": "MDQ6VXNlcjI0MzI5NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2432944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleobrien91", "html_url": "https://github.com/kyleobrien91", "followers_url": "https://api.github.com/users/kyleobrien91/followers", "following_url": "https://api.github.com/users/kyleobrien91/following{/other_user}", "gists_url": "https://api.github.com/users/kyleobrien91/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleobrien91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleobrien91/subscriptions", "organizations_url": "https://api.github.com/users/kyleobrien91/orgs", "repos_url": "https://api.github.com/users/kyleobrien91/repos", "events_url": "https://api.github.com/users/kyleobrien91/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleobrien91/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-19T17:22:30Z", "updated_at": "2017-06-19T19:03:27Z", "closed_at": "2017-06-19T18:21:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Based on the documentation, it seems I should just be able to configure my viewset as follows and automatically get filtering. However, certain URL filtering seems to be ignored completed. \r\n\r\n```python\r\nfrom django_filters.rest_framework import DjangoFilterBackend\r\n\r\nclass UsersViewSet(ModelViewSet):\r\n    queryset = MyModel.objects.all()\r\n    serializer_class = MyModelSerializer\r\n    filter_backends = [DjangoFilterBackend]\r\n    filter_fields = ['id']\r\n```\r\n\r\nAssuming that viewset maps to an endpoint like `/users/`, I should be able to use a query like `/users?id__in=1,2,3,4,5` and only see results where the ID is either 1, 2, 3, 4 or 5.\r\n\r\nHowever, that's not the case. Using that minimal setup, I can only use a filter like `/users/?id=1`. As soon as I use `id__in=1,2,3,4,5`, I get my entire queryset back - all 20 users.\r\n\r\nAm I missing a setup step?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/36", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/36/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/36/events", "html_url": "https://github.com/miki725/django-url-filter/issues/36", "id": 236212569, "node_id": "MDU6SXNzdWUyMzYyMTI1Njk=", "number": 36, "title": "Dont import contenttype to avoid import issues when contenttypes is not in installed apps", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-15T14:35:26Z", "updated_at": "2017-06-15T15:52:22Z", "closed_at": "2017-06-15T15:52:22Z", "author_association": "OWNER", "active_lock_reason": null, "body": "that should fix:\r\n\r\n```\r\nTraceback (most recent call last):                                  \r\n  File \"/home/serkan/.local/share/virtualenvs/slides-2sl0-4FG/src/sliderepl/sliderepl/core.py\", line 292, in run                        \r\n    exec_(co, environ)            \r\n  File \"<input>\", line 1, in <module>                               \r\n  File \"/home/serkan/.local/share/virtualenvs/slides-2sl0-4FG/lib/python3.6/site-packages/url_filter/filtersets/__init__.py\", line 5, in <module>\r\n    from .django import *  # noqa \r\n  File \"/home/serkan/.local/share/virtualenvs/slides-2sl0-4FG/lib/python3.6/site-packages/url_filter/filtersets/django.py\", line 6, in <module>\r\n    from django.contrib.contenttypes.fields import GenericForeignKey                                                                    \r\n  File \"/home/serkan/.local/share/virtualenvs/slides-2sl0-4FG/lib/python3.6/site-packages/django/contrib/contenttypes/fields.py\", line 5, in <module>\r\n    from django.contrib.contenttypes.models import ContentType      \r\n  File \"/home/serkan/.local/share/virtualenvs/slides-2sl0-4FG/lib/python3.6/site-packages/django/contrib/contenttypes/models.py\", line 139, in <module>\r\n    class ContentType(models.Model):                                \r\n  File \"/home/serkan/.local/share/virtualenvs/slides-2sl0-4FG/lib/python3.6/site-packages/django/db/models/base.py\", line 118, in __new__\r\n    \"INSTALLED_APPS.\" % (module, name)                              \r\nRuntimeError: Model class django.contrib.contenttypes.models.ContentType doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/26", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/26/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/26/events", "html_url": "https://github.com/miki725/django-url-filter/issues/26", "id": 203538929, "node_id": "MDU6SXNzdWUyMDM1Mzg5Mjk=", "number": 26, "title": "Django backend does not return distinct results", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-01-27T01:37:10Z", "updated_at": "2018-11-16T14:50:02Z", "closed_at": "2018-11-16T03:44:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "When filtering on many-to-one models on the foreign key model, it causes a join which then returns non-distinct results. Found as part of looking at #18.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/22", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/22/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/22/events", "html_url": "https://github.com/miki725/django-url-filter/issues/22", "id": 178277865, "node_id": "MDU6SXNzdWUxNzgyNzc4NjU=", "number": 22, "title": "error __init__() takes at least 2 arguments (1 given)", "user": {"login": "abusquets", "id": 1104412, "node_id": "MDQ6VXNlcjExMDQ0MTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1104412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abusquets", "html_url": "https://github.com/abusquets", "followers_url": "https://api.github.com/users/abusquets/followers", "following_url": "https://api.github.com/users/abusquets/following{/other_user}", "gists_url": "https://api.github.com/users/abusquets/gists{/gist_id}", "starred_url": "https://api.github.com/users/abusquets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abusquets/subscriptions", "organizations_url": "https://api.github.com/users/abusquets/orgs", "repos_url": "https://api.github.com/users/abusquets/repos", "events_url": "https://api.github.com/users/abusquets/events{/privacy}", "received_events_url": "https://api.github.com/users/abusquets/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-09-21T08:19:59Z", "updated_at": "2016-09-21T17:03:58Z", "closed_at": "2016-09-21T11:38:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a ViewSet that runs well with django-filter but in django-url-filter I have an error (at the end)\nThe viewSet:\n\nfrom url_filter.backends.django import DjangoFilterBackend\nclass PersonaViewSet(viewsets.ModelViewSet):\n    filter_fields = ['nom', 'cognoms', 'data_naixament', 'fills', 'casat']\n    queryset = Persona.objects.all()\n    serializer_class = PersonaSerializer\n    filter_backends = [DjangoFilterBackend]\n\nMy packages are:\nDjango==1.9.8\ndjango-filter==0.15.0\ndjango-url-filter==0.2.0\ndjangorestframework==3.4.6\n\nThe error:\n\nEnvironment:\n\nRequest Method: GET\nRequest URL: http://devel-trusty.local:8000/persones/?id=1\n\nDjango Version: 1.9.8\nPython Version: 2.7.6\nInstalled Applications:\n['django.contrib.admin',\n 'django.contrib.auth',\n 'django.contrib.contenttypes',\n 'django.contrib.sessions',\n 'django.contrib.messages',\n 'django.contrib.staticfiles',\n 'rest_framework',\n 'quickstart']\nInstalled Middleware:\n['django.middleware.security.SecurityMiddleware',\n 'django.contrib.sessions.middleware.SessionMiddleware',\n 'django.middleware.common.CommonMiddleware',\n 'django.middleware.csrf.CsrfViewMiddleware',\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\n 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n 'django.contrib.messages.middleware.MessageMiddleware',\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\n\nTraceback:\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/django/core/handlers/base.py\" in get_response\n1.                     response = self.process_exception_by_middleware(e, request)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/django/core/handlers/base.py\" in get_response\n1.                     response = wrapped_callback(request, _callback_args, *_callback_kwargs)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/django/views/decorators/csrf.py\" in wrapped_view\n1.         return view_func(_args, *_kwargs)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/rest_framework/viewsets.py\" in view\n1.             return self.dispatch(request, _args, *_kwargs)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/rest_framework/views.py\" in dispatch\n1.             response = self.handle_exception(exc)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/rest_framework/views.py\" in handle_exception\n1.             self.raise_uncaught_exception(exc)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/rest_framework/views.py\" in dispatch\n1.             response = handler(request, _args, *_kwargs)\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/rest_framework/mixins.py\" in list\n1.         queryset = self.filter_queryset(self.get_queryset())\n\nFile \"/devel/infraplan/layer_manager/env/local/lib/python2.7/site-packages/rest_framework/generics.py\" in filter_queryset\n1.             queryset = backend().filter_queryset(self.request, queryset, self)\n\nException Type: TypeError at /persones/\nException Value: **init**() takes at least 2 arguments (1 given)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/20", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/20/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/20/events", "html_url": "https://github.com/miki725/django-url-filter/issues/20", "id": 164246856, "node_id": "MDU6SXNzdWUxNjQyNDY4NTY=", "number": 20, "title": "Filtering on a related model that contains a generic foreign key leads to an uncaught error.", "user": {"login": "simone6021", "id": 15331155, "node_id": "MDQ6VXNlcjE1MzMxMTU1", "avatar_url": "https://avatars2.githubusercontent.com/u/15331155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simone6021", "html_url": "https://github.com/simone6021", "followers_url": "https://api.github.com/users/simone6021/followers", "following_url": "https://api.github.com/users/simone6021/following{/other_user}", "gists_url": "https://api.github.com/users/simone6021/gists{/gist_id}", "starred_url": "https://api.github.com/users/simone6021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simone6021/subscriptions", "organizations_url": "https://api.github.com/users/simone6021/orgs", "repos_url": "https://api.github.com/users/simone6021/repos", "events_url": "https://api.github.com/users/simone6021/events{/privacy}", "received_events_url": "https://api.github.com/users/simone6021/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-07T07:32:30Z", "updated_at": "2017-02-03T16:24:15Z", "closed_at": "2017-01-27T01:41:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\nfirst let me thank you for sharing this useful code!\n\nWhat i found is that if you try to filter by a field that point to a related model which has defined a generic foreign key followinf error is returned:\n`AttributeError at /api/v1/projects/a/ 'GenericForeignKey' object has no attribute 'formfield'`\n\nI tried with ForeignKey and ManyToMany on django 1.9.7 and url_filter from github master branch.\n\nYou can test it with the following two models:\n\n```\nfrom django.db import models\nfrom django.contrib.contenttypes.fields import ContentType\nfrom django.contrib.contenttypes.fields import GenericForeignKey, GenericRelation\n\n\nclass A(models.Model):\n    name = models.CharField(max_length=256, blank=False, null=False)\n\n\nclass B(models.Model):\n    name = models.CharField(max_length=256, blank=False, null=False)\n    a = models.ForeignKey('A',\n                          models.DO_NOTHING,\n                          blank=True,\n                          null=True,\n                          related_name='b_rel')\n    content_type = models.ForeignKey(ContentType, models.DO_NOTHING)\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n```\n\nIf you try to filter the model 'A' list by the 'b_rel' field the error appears.\n\nSince i actually tried filtering trough djangorestframework 3.3.3 (even if i think that thi issue is generic), i will leave here the relevant code to publish model 'A' to a rest API so you can test it easily.\nJust create an 'A' record and paste the following url after you authenticated (trough the django rest framework browsable api or standard django admin):\n`http://localhost:8000/api/your-app-name/a/?b_rel=1`\n\n**views.py**\n\n```\nfrom .serializers import *\nfrom projects.models import A, B\nfrom rest_framework.viewsets import ModelViewSet\n\n\nclass ASerializer(serializers.ModelSerializer):\n    class Meta:\n        model = A\n        fields = [\n            'name',\n            'b_rel',\n        ]\n\n\nclass AViewSet(ModelViewSet):\n    serializer_class = ASerializer\n    queryset = A.objects.all()\n    filter_backends = [DjangoFilterBackend]\n    filter_fields = [\n        'name',\n        'b_rel',\n    ]\n```\n\n**urls.py**\n\n```\nfrom django.conf.urls import include, url\nfrom rest_framework import routers\nfrom projects.views import AViewSet\n\nrouter = routers.DefaultRouter()\n\nrouter.register(r'a', AViewSet, 'projects-a')\n\nurlpatterns = [\n    url(r'^api/your-app-name/', include(router.urls)),\n]\n```\n\nSince the error occurs when filters for the related model ('B') are built automatically, imho the solution is to check wheter a field actually has a formfield or at least exclude the 'GenericForeignKey' field from filters because they do not have a form field by default, see [relevant django documentation.](https://docs.djangoproject.com/ja/1.9/ref/contrib/contenttypes/#generic-relations).\n\nIf you prefer a pull request, just tell me.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/18", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/18/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/18/events", "html_url": "https://github.com/miki725/django-url-filter/issues/18", "id": 135875157, "node_id": "MDU6SXNzdWUxMzU4NzUxNTc=", "number": 18, "title": "Filter by list of ids of a FK", "user": {"login": "catalanojuan", "id": 466846, "node_id": "MDQ6VXNlcjQ2Njg0Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/466846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catalanojuan", "html_url": "https://github.com/catalanojuan", "followers_url": "https://api.github.com/users/catalanojuan/followers", "following_url": "https://api.github.com/users/catalanojuan/following{/other_user}", "gists_url": "https://api.github.com/users/catalanojuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/catalanojuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catalanojuan/subscriptions", "organizations_url": "https://api.github.com/users/catalanojuan/orgs", "repos_url": "https://api.github.com/users/catalanojuan/repos", "events_url": "https://api.github.com/users/catalanojuan/events{/privacy}", "received_events_url": "https://api.github.com/users/catalanojuan/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-02-23T21:42:10Z", "updated_at": "2017-01-27T01:32:15Z", "closed_at": "2017-01-27T01:32:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\n\nFirst of all many thanks for sharing this with the world. It might have saved me a lot of time :)\n\nI'm using django-url-filter 0.2.0 DRF integration with DRF 3.3.2 and Django 1.9.2.\n\nOne of the 2 uses I'd like to give it I think is not working though. Here's how my code looks like (I'm not pasting my settings since the rest seems to be working fine):\n\n```\n# In models.py\nclass E(models.Model):\n\n    title = models.CharField(max_length=200)\n    p = models.ForeignKey('P')\n\nclass P(models.Model):\n\n    name = models.CharField(max_length=200)\n\n# In views.py\nclass EViewSet(viewsets.ModelViewSet):\n\n    serializer_class = ESerializer\n    queryset = E.objects.all()\n    filter_fields = ['p']\n\n\nclass PViewSet(viewsets.ModelViewSet):\n\n    serializer_class = PSerializer\n    queryset = P.objects.all()\n```\n\nWhat I'd like to do is filter all E instances that belong to a certain list of Ps (ie. being able to do `http://example.com/v1/e/?p__in=1,2,3` or similar).\n\nThe result I'm getting is just all the E objects, unfiltered. I'm not sure if this is supposed to be working but broken or if it's a functionally yet to be added, or maybe I'm just doing it wrong. Sorry I didn't dive in the code to pin point the exact cause of the problem.\n\nThanks for your help!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/17", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/17/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/17/events", "html_url": "https://github.com/miki725/django-url-filter/issues/17", "id": 135573717, "node_id": "MDU6SXNzdWUxMzU1NzM3MTc=", "number": 17, "title": "Question on your usage?", "user": {"login": "smcclstocks", "id": 1500378, "node_id": "MDQ6VXNlcjE1MDAzNzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1500378?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smcclstocks", "html_url": "https://github.com/smcclstocks", "followers_url": "https://api.github.com/users/smcclstocks/followers", "following_url": "https://api.github.com/users/smcclstocks/following{/other_user}", "gists_url": "https://api.github.com/users/smcclstocks/gists{/gist_id}", "starred_url": "https://api.github.com/users/smcclstocks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smcclstocks/subscriptions", "organizations_url": "https://api.github.com/users/smcclstocks/orgs", "repos_url": "https://api.github.com/users/smcclstocks/repos", "events_url": "https://api.github.com/users/smcclstocks/events{/privacy}", "received_events_url": "https://api.github.com/users/smcclstocks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-22T23:05:14Z", "updated_at": "2016-03-01T23:58:08Z", "closed_at": "2016-03-01T23:58:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I really like what you're doing here & will probably be rolling this into a production app but I'm curious to know what your support situation is for this project. Do you currently use it in any production apps? Do you still consider yourself as actively maintaining this project? Do you follow along with latest deprecations of django & DRF & update this project & do you plan on continuing to do so?\n\nI'm not asking because I expect you to do any of the above lol (you've already built something really nice & are generous enough to release it) but just curious where you stand. Thanks & feel free to close immediately.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/15", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/15/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/15/events", "html_url": "https://github.com/miki725/django-url-filter/issues/15", "id": 121980274, "node_id": "MDU6SXNzdWUxMjE5ODAyNzQ=", "number": 15, "title": "Pagination Capabilities/Support", "user": {"login": "techdragon", "id": 2115079, "node_id": "MDQ6VXNlcjIxMTUwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2115079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/techdragon", "html_url": "https://github.com/techdragon", "followers_url": "https://api.github.com/users/techdragon/followers", "following_url": "https://api.github.com/users/techdragon/following{/other_user}", "gists_url": "https://api.github.com/users/techdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/techdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/techdragon/subscriptions", "organizations_url": "https://api.github.com/users/techdragon/orgs", "repos_url": "https://api.github.com/users/techdragon/repos", "events_url": "https://api.github.com/users/techdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/techdragon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-12-14T06:06:29Z", "updated_at": "2015-12-14T23:26:51Z", "closed_at": "2015-12-14T23:26:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that most query filtering tools for django have poor support for paging/pagination.\nEither inbuilt support, Django's built in pagination capabilities or via other existing pagination libraries/apps. \n\nDoes django-url-filter support pagination in any way? \n\nIf not, can we build it in or support the 'default' django mechanisms?\nBeing able to just add `paginate_by = 10` on my class based views, is pretty damn useful when trying to be productive. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/13", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/13/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/13/events", "html_url": "https://github.com/miki725/django-url-filter/issues/13", "id": 121186346, "node_id": "MDU6SXNzdWUxMjExODYzNDY=", "number": 13, "title": "Django Class Based View Example", "user": {"login": "techdragon", "id": 2115079, "node_id": "MDQ6VXNlcjIxMTUwNzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2115079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/techdragon", "html_url": "https://github.com/techdragon", "followers_url": "https://api.github.com/users/techdragon/followers", "following_url": "https://api.github.com/users/techdragon/following{/other_user}", "gists_url": "https://api.github.com/users/techdragon/gists{/gist_id}", "starred_url": "https://api.github.com/users/techdragon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/techdragon/subscriptions", "organizations_url": "https://api.github.com/users/techdragon/orgs", "repos_url": "https://api.github.com/users/techdragon/repos", "events_url": "https://api.github.com/users/techdragon/events{/privacy}", "received_events_url": "https://api.github.com/users/techdragon/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796110, "node_id": "MDU6TGFiZWwyNTE3OTYxMTA=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-12-09T08:30:29Z", "updated_at": "2015-12-16T05:15:34Z", "closed_at": "2015-12-14T23:27:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to get an example of how to use this library with a Class Based View? \nEither the built in Django ListView or the Django Vanilla Views ListView, would be enough to show how this can be used without DRF a bit easier than the current example of manually creating things does.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/11", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/11/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/11/events", "html_url": "https://github.com/miki725/django-url-filter/issues/11", "id": 118462269, "node_id": "MDU6SXNzdWUxMTg0NjIyNjk=", "number": 11, "title": "Filter foreign key field by null", "user": {"login": "mick88", "id": 4239561, "node_id": "MDQ6VXNlcjQyMzk1NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4239561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mick88", "html_url": "https://github.com/mick88", "followers_url": "https://api.github.com/users/mick88/followers", "following_url": "https://api.github.com/users/mick88/following{/other_user}", "gists_url": "https://api.github.com/users/mick88/gists{/gist_id}", "starred_url": "https://api.github.com/users/mick88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mick88/subscriptions", "organizations_url": "https://api.github.com/users/mick88/orgs", "repos_url": "https://api.github.com/users/mick88/repos", "events_url": "https://api.github.com/users/mick88/events{/privacy}", "received_events_url": "https://api.github.com/users/mick88/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796105, "node_id": "MDU6TGFiZWwyNTE3OTYxMDU=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-11-23T20:11:02Z", "updated_at": "2015-12-16T05:13:28Z", "closed_at": "2015-12-16T05:13:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't seem to find documentation on filtering fields by null value. By logic, Django's `isnull=True` should work, but it doesn't work for me:\n`/api/houses/?ownerid__isnull=True` doesn't filter houses with no owner\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/8", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/8/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/8/events", "html_url": "https://github.com/miki725/django-url-filter/issues/8", "id": 106250841, "node_id": "MDU6SXNzdWUxMDYyNTA4NDE=", "number": 8, "title": "Plain filtering", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796107, "node_id": "MDU6TGFiZWwyNTE3OTYxMDc=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-09-14T00:05:56Z", "updated_at": "2015-12-16T05:13:27Z", "closed_at": "2015-12-16T05:13:27Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Django URL filter should be able to filter on plain Python lists\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/7", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/7/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/7/events", "html_url": "https://github.com/miki725/django-url-filter/issues/7", "id": 106177391, "node_id": "MDU6SXNzdWUxMDYxNzczOTE=", "number": 7, "title": "Better representation of FilterSets", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796107, "node_id": "MDU6TGFiZWwyNTE3OTYxMDc=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-09-12T18:25:26Z", "updated_at": "2015-09-12T22:30:14Z", "closed_at": "2015-09-12T22:30:14Z", "author_association": "OWNER", "active_lock_reason": null, "body": "`__repr__` should have better representation for easier debugging. should be similar to how DRF does this\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/5", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/5/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/5/events", "html_url": "https://github.com/miki725/django-url-filter/issues/5", "id": 105264408, "node_id": "MDU6SXNzdWUxMDUyNjQ0MDg=", "number": 5, "title": "SQLAlchemyModelFilterSet", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796107, "node_id": "MDU6TGFiZWwyNTE3OTYxMDc=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-09-07T20:28:30Z", "updated_at": "2015-09-13T03:33:09Z", "closed_at": "2015-09-13T03:33:09Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/4", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/4/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/4/events", "html_url": "https://github.com/miki725/django-url-filter/issues/4", "id": 105091357, "node_id": "MDU6SXNzdWUxMDUwOTEzNTc=", "number": 4, "title": "Installation does not install all files", "user": {"login": "eliyahen1", "id": 6832166, "node_id": "MDQ6VXNlcjY4MzIxNjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/6832166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eliyahen1", "html_url": "https://github.com/eliyahen1", "followers_url": "https://api.github.com/users/eliyahen1/followers", "following_url": "https://api.github.com/users/eliyahen1/following{/other_user}", "gists_url": "https://api.github.com/users/eliyahen1/gists{/gist_id}", "starred_url": "https://api.github.com/users/eliyahen1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eliyahen1/subscriptions", "organizations_url": "https://api.github.com/users/eliyahen1/orgs", "repos_url": "https://api.github.com/users/eliyahen1/repos", "events_url": "https://api.github.com/users/eliyahen1/events{/privacy}", "received_events_url": "https://api.github.com/users/eliyahen1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-09-06T12:17:57Z", "updated_at": "2015-09-06T18:00:06Z", "closed_at": "2015-09-06T18:00:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "pip install django-url-filter only the files in the root without the sub-directories.\n\nThis package seems great and I would like to try work with it! :-)\n\n-thanks, Eli.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/2", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/2/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/2/events", "html_url": "https://github.com/miki725/django-url-filter/issues/2", "id": 104052845, "node_id": "MDU6SXNzdWUxMDQwNTI4NDU=", "number": 2, "title": "SQLAlchemy backend support", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 251796107, "node_id": "MDU6TGFiZWwyNTE3OTYxMDc=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-08-31T13:24:32Z", "updated_at": "2015-09-12T22:30:13Z", "closed_at": "2015-09-12T22:30:13Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/miki725/django-url-filter/issues/1", "repository_url": "https://api.github.com/repos/miki725/django-url-filter", "labels_url": "https://api.github.com/repos/miki725/django-url-filter/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/miki725/django-url-filter/issues/1/comments", "events_url": "https://api.github.com/repos/miki725/django-url-filter/issues/1/events", "html_url": "https://github.com/miki725/django-url-filter/issues/1", "id": 103978863, "node_id": "MDU6SXNzdWUxMDM5Nzg4NjM=", "number": 1, "title": "Django<1.8 Support", "user": {"login": "miki725", "id": 932940, "node_id": "MDQ6VXNlcjkzMjk0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/932940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miki725", "html_url": "https://github.com/miki725", "followers_url": "https://api.github.com/users/miki725/followers", "following_url": "https://api.github.com/users/miki725/following{/other_user}", "gists_url": "https://api.github.com/users/miki725/gists{/gist_id}", "starred_url": "https://api.github.com/users/miki725/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miki725/subscriptions", "organizations_url": "https://api.github.com/users/miki725/orgs", "repos_url": "https://api.github.com/users/miki725/repos", "events_url": "https://api.github.com/users/miki725/events{/privacy}", "received_events_url": "https://api.github.com/users/miki725/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 259685204, "node_id": "MDU6TGFiZWwyNTk2ODUyMDQ=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/contribution-welcome", "name": "contribution-welcome", "color": "d4c5f9", "default": false, "description": null}, {"id": 251796107, "node_id": "MDU6TGFiZWwyNTE3OTYxMDc=", "url": "https://api.github.com/repos/miki725/django-url-filter/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-08-31T03:31:39Z", "updated_at": "2017-05-20T00:43:43Z", "closed_at": "2017-05-20T00:43:43Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently only 1.8 is supported. We should support at least 1.7 and maybe even 1.4 since its still LTS and I imagine many people are still using it.\n", "performed_via_github_app": null, "score": 1.0}]}