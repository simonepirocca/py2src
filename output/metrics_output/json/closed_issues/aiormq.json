{"total_count": 26, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/mosquito/aiormq/issues/90", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/90/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/90/events", "html_url": "https://github.com/mosquito/aiormq/issues/90", "id": 680086673, "node_id": "MDU6SXNzdWU2ODAwODY2NzM=", "number": 90, "title": "Please tag releases", "user": {"login": "merkys", "id": 10404021, "node_id": "MDQ6VXNlcjEwNDA0MDIx", "avatar_url": "https://avatars0.githubusercontent.com/u/10404021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/merkys", "html_url": "https://github.com/merkys", "followers_url": "https://api.github.com/users/merkys/followers", "following_url": "https://api.github.com/users/merkys/following{/other_user}", "gists_url": "https://api.github.com/users/merkys/gists{/gist_id}", "starred_url": "https://api.github.com/users/merkys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/merkys/subscriptions", "organizations_url": "https://api.github.com/users/merkys/orgs", "repos_url": "https://api.github.com/users/merkys/repos", "events_url": "https://api.github.com/users/merkys/events{/privacy}", "received_events_url": "https://api.github.com/users/merkys/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-17T09:27:16Z", "updated_at": "2020-08-18T05:11:44Z", "closed_at": "2020-08-17T19:46:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "The aiormq comes in stable releases. Could these be tagged in GitHub?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/85", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/85/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/85/events", "html_url": "https://github.com/mosquito/aiormq/issues/85", "id": 605638272, "node_id": "MDU6SXNzdWU2MDU2MzgyNzI=", "number": 85, "title": "If value passed to the queue_declare arguments is int and greater then 128 then server reply that value was negative", "user": {"login": "lemurchik", "id": 12814742, "node_id": "MDQ6VXNlcjEyODE0NzQy", "avatar_url": "https://avatars3.githubusercontent.com/u/12814742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lemurchik", "html_url": "https://github.com/lemurchik", "followers_url": "https://api.github.com/users/lemurchik/followers", "following_url": "https://api.github.com/users/lemurchik/following{/other_user}", "gists_url": "https://api.github.com/users/lemurchik/gists{/gist_id}", "starred_url": "https://api.github.com/users/lemurchik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lemurchik/subscriptions", "organizations_url": "https://api.github.com/users/lemurchik/orgs", "repos_url": "https://api.github.com/users/lemurchik/repos", "events_url": "https://api.github.com/users/lemurchik/events{/privacy}", "received_events_url": "https://api.github.com/users/lemurchik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-23T15:35:36Z", "updated_at": "2020-04-24T17:48:18Z", "closed_at": "2020-04-24T17:48:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "### How reproduce\r\n\r\nCode:\r\n```python\r\nimport asyncio\r\n\r\nimport aiormq\r\n\r\n\r\nasync def test():\r\n    connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\r\n\r\n    keys = {'x-max-length', 'x-message-ttl', 'x-max-length', 'x-max-length-bytes'}\r\n    for k in keys:\r\n        channel = await connection.channel()\r\n        try:\r\n            await channel.queue_declare('test', arguments={k: 129})\r\n        except Exception as e:\r\n            print(e)\r\n\r\n\r\nasyncio.run(test())\r\n```\r\n\r\nResult:\r\n```\r\nPRECONDITION_FAILED - invalid arg 'x-max-length-bytes' for queue 'test' in vhost '/': {value_negative,-127}\r\nPRECONDITION_FAILED - invalid arg 'x-message-ttl' for queue 'test' in vhost '/': {value_negative,-127}\r\nPRECONDITION_FAILED - invalid arg 'x-max-length' for queue 'test' in vhost '/': {value_negative,-127}\r\n```\r\n\r\n### Environment\r\n\r\nOS: Ubuntu 19.10\r\nPython: 3.7.5\r\nPackage version: aiormq==3.2.1\r\nRabbitMQ: 3.8.3, Erlang 22.3\r\n\r\n**Similar bug in another library:**\r\nhttps://github.com/Polyconseil/aioamqp/issues/204\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/71", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/71/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/71/events", "html_url": "https://github.com/mosquito/aiormq/issues/71", "id": 564643914, "node_id": "MDU6SXNzdWU1NjQ2NDM5MTQ=", "number": 71, "title": "AMQPError __repr__ typo", "user": {"login": "akayunov", "id": 13577138, "node_id": "MDQ6VXNlcjEzNTc3MTM4", "avatar_url": "https://avatars1.githubusercontent.com/u/13577138?v=4", "gravatar_id": "", "url": "https://api.github.com/users/akayunov", "html_url": "https://github.com/akayunov", "followers_url": "https://api.github.com/users/akayunov/followers", "following_url": "https://api.github.com/users/akayunov/following{/other_user}", "gists_url": "https://api.github.com/users/akayunov/gists{/gist_id}", "starred_url": "https://api.github.com/users/akayunov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/akayunov/subscriptions", "organizations_url": "https://api.github.com/users/akayunov/orgs", "repos_url": "https://api.github.com/users/akayunov/repos", "events_url": "https://api.github.com/users/akayunov/events{/privacy}", "received_events_url": "https://api.github.com/users/akayunov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-13T12:15:24Z", "updated_at": "2020-02-13T12:29:14Z", "closed_at": "2020-02-13T12:29:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "This __repr__:\r\n\r\n```\r\nclass AMQPError(Exception):\r\n    reason = \"An unspecified AMQP error has occurred: %s\"\r\n\r\n    def __repr__(self):\r\n        return \"<%s: %s>\" % (self.__class__.__name__, self.reason % self.args)\r\n```\r\ndoesn't work, because of that:\r\n```\r\nclass ConnectionClosed(AMQPConnectionError):\r\n    reason = \"The AMQP connection was closed (%s) %s\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/66", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/66/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/66/events", "html_url": "https://github.com/mosquito/aiormq/issues/66", "id": 524333758, "node_id": "MDU6SXNzdWU1MjQzMzM3NTg=", "number": 66, "title": "AttributeError: 'NoneType' object has no attribute 'drain'", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-18T12:23:17Z", "updated_at": "2019-11-20T07:30:58Z", "closed_at": "2019-11-20T07:30:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sometimes I get this error. The traceback is:\r\n```\r\nAttributeError: 'NoneType' object has no attribute 'drain'\r\n  File \"asyncio/tasks.py\", line 630, in _wrap_awaitable\r\n    return (yield from awaitable.__await__())\r\n  File \"aiormq/tools.py\", line 67, in __await__\r\n    return (yield from self().__await__())\r\n  File \"aiormq/connection.py\", line 130, in drain\r\n    return await self.writer.drain()\r\n```\r\n@mosquito I think it is because here `self.writer` can become `None` while waiting for lock:\r\nhttps://github.com/mosquito/aiormq/blob/26ffef5978856a58883cc4d99642bee550ad3370/aiormq/connection.py#L125-L130", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/64", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/64/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/64/events", "html_url": "https://github.com/mosquito/aiormq/issues/64", "id": 519856449, "node_id": "MDU6SXNzdWU1MTk4NTY0NDk=", "number": 64, "title": " how to set a timeout param when connection is creating", "user": {"login": "xiaoliuhust", "id": 23149883, "node_id": "MDQ6VXNlcjIzMTQ5ODgz", "avatar_url": "https://avatars1.githubusercontent.com/u/23149883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaoliuhust", "html_url": "https://github.com/xiaoliuhust", "followers_url": "https://api.github.com/users/xiaoliuhust/followers", "following_url": "https://api.github.com/users/xiaoliuhust/following{/other_user}", "gists_url": "https://api.github.com/users/xiaoliuhust/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaoliuhust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaoliuhust/subscriptions", "organizations_url": "https://api.github.com/users/xiaoliuhust/orgs", "repos_url": "https://api.github.com/users/xiaoliuhust/repos", "events_url": "https://api.github.com/users/xiaoliuhust/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaoliuhust/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-08T07:25:55Z", "updated_at": "2019-11-09T06:24:00Z", "closed_at": "2019-11-09T06:24:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi\uff0c\r\nI have a question how to set a timeout param when connection is creating ,otherwise it takes about two heartbeat_interval(130s) to report ConnectionError: [Errno 110].I read aiormq's connection.py source code but still cannot find a way.\r\n```\r\n2019-11-08 15:12:27,242 consumer INFO /root/workspace/rabbitmq_connector.py start connect_to_rabbitmq\r\nINFO:consumer:start connect to rabbitmq\r\nTraceback (most recent call last):\r\n  File \"/root/workspace/python3.6/site-packages/aiormq/connection.py\", line 227, in connect\r\n    loop=self.loop\r\n  File \"/usr/lib/python3.6/asyncio/streams.py\", line 81, in open_connection\r\n    lambda: protocol, host, port, **kwds)\r\n  File \"/usr/lib/python3.6/asyncio/base_events.py\", line 794, in create_connection\r\n    raise exceptions[0]\r\n  File \"/usr/lib/python3.6/asyncio/base_events.py\", line 781, in create_connection\r\n    yield from self.sock_connect(sock, address)\r\n  File \"/usr/lib/python3.6/asyncio/selector_events.py\", line 439, in sock_connect\r\n    return (yield from fut)\r\n  File \"/usr/lib/python3.6/asyncio/selector_events.py\", line 469, in _sock_connect_cb\r\n    raise OSError(err, 'Connect call failed %s' % (address,))\r\nTimeoutError: [Errno 110] Connect call failed ('192.168.20.251', 5672)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/root/workspace/python3.6/site-packagesrabbitmq_connector.py\", line 140, in get_connection\r\n    self.connection = await aiormq.connect(url)\r\n  File \"/root/workspace/python3.6/site-packages/aiormq/connection.py\", line 521, in connect\r\n    await connection.connect(client_properties or {})\r\n  File \"/root/workspace/python3.6/site-packages/aiormq/base.py\", line 171, in wrap\r\n    return await self.create_task(func(self, *args, **kwargs))\r\n  File \"/root/workspace/python3.6/site-packages/aiormq/base.py\", line 25, in __inner\r\n    return await self.task\r\n  File \"/root/workspace/python3.6/site-packages/aiormq/connection.py\", line 230, in connect\r\n    raise ConnectionError(*e.args) from e\r\nConnectionError: [Errno 110] Connect call failed ('192.168.20.251', 5672)\r\n2019-11-08 15:14:37,132 5f18209e-fac5-11e9-a5f4-000c293c5e0b consumer INFO /root/workspace/rabbitmq_connector.py get_connection 149 : connect rabbitmq failed:[Errno 110] Connect call failed ('192.168.20.251', 5672)\r\nINFO:consumer:connect rabbitmq failed:[Errno 110] Connect call failed ('192.168.20.251', 5672)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/63", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/63/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/63/events", "html_url": "https://github.com/mosquito/aiormq/issues/63", "id": 518690984, "node_id": "MDU6SXNzdWU1MTg2OTA5ODQ=", "number": 63, "title": "Trying to publish on a closed channel results in broad exception type `RuntimeError`", "user": {"login": "phijor", "id": 10487782, "node_id": "MDQ6VXNlcjEwNDg3Nzgy", "avatar_url": "https://avatars3.githubusercontent.com/u/10487782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phijor", "html_url": "https://github.com/phijor", "followers_url": "https://api.github.com/users/phijor/followers", "following_url": "https://api.github.com/users/phijor/following{/other_user}", "gists_url": "https://api.github.com/users/phijor/gists{/gist_id}", "starred_url": "https://api.github.com/users/phijor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phijor/subscriptions", "organizations_url": "https://api.github.com/users/phijor/orgs", "repos_url": "https://api.github.com/users/phijor/repos", "events_url": "https://api.github.com/users/phijor/events{/privacy}", "received_events_url": "https://api.github.com/users/phijor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-06T19:38:56Z", "updated_at": "2019-11-18T14:19:56Z", "closed_at": "2019-11-18T14:19:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nwe are working on an application that, through `aio-pika`, uses `aiormq`.  While dealing with some issues caused by unreliable network conditions, we noticed that trying to publish on a channel that has been closed results in a rather broad `RuntimeError`, raised here:\r\n\r\nhttps://github.com/mosquito/aiormq/blob/5e735e0a5c4d3ac12d5c22bbb811c02cb10a6ee9/aiormq/channel.py#L77\r\n\r\nBelow is a typical stack trace for when this happens, starting at a call to `aio_pika.Exchange.publish()`:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  <snip>\r\n  ...\r\n  </snip>\r\n  File \"/<our_project>/source.py\", line 106, in _send\r\n    await self.data_exchange.publish(msg, routing_key=metric, mandatory=False)\r\n  File \"/<venv>/lib/python3.7/site-packages/aio_pika/exchange.py\", line 200, in publish\r\n    ), timeout=timeout\r\n  File \"/usr/lib64/python3.7/asyncio/tasks.py\", line 414, in wait_for\r\n    return await fut\r\n  File \"/<venv>/lib/python3.7/site-packages/aiormq/channel.py\", line 426, in basic_publish\r\n    async with self.lock:\r\n  File \"/<venv>/lib/python3.7/site-packages/aiormq/channel.py\", line 77, in lock\r\n    raise RuntimeError('%r closed' % self)\r\nRuntimeError: <Channel: \"1\"> closed\r\n```\r\n\r\nWe are afraid that, when writing error handling code for this condition, catching `RuntimeError` might accidentally catch other errors, too.\r\n\r\nWould it be possible to raise a more descriptive exception, of distinct type?  The exception type might subclass `RuntimeError` as to not break code that catches that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/61", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/61/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/61/events", "html_url": "https://github.com/mosquito/aiormq/issues/61", "id": 514671277, "node_id": "MDU6SXNzdWU1MTQ2NzEyNzc=", "number": 61, "title": "Invalid logging on DeliveryError", "user": {"login": "tzoiker", "id": 6230141, "node_id": "MDQ6VXNlcjYyMzAxNDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6230141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tzoiker", "html_url": "https://github.com/tzoiker", "followers_url": "https://api.github.com/users/tzoiker/followers", "following_url": "https://api.github.com/users/tzoiker/following{/other_user}", "gists_url": "https://api.github.com/users/tzoiker/gists{/gist_id}", "starred_url": "https://api.github.com/users/tzoiker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tzoiker/subscriptions", "organizations_url": "https://api.github.com/users/tzoiker/orgs", "repos_url": "https://api.github.com/users/tzoiker/repos", "events_url": "https://api.github.com/users/tzoiker/events{/privacy}", "received_events_url": "https://api.github.com/users/tzoiker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-30T13:31:17Z", "updated_at": "2019-10-30T14:28:34Z", "closed_at": "2019-10-30T14:28:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "If `aiormq.exceptions.DeliveryError` is raised during publish, correct logging of the error fails because its `message` field is an instance of `DeliveredMessage`.\r\n \r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/share/python3/app/lib/python3.7/site-packages/raven/utils/serializer/manager.py\", line 76, in transform\r\n    return repr(value)\r\n  File \"/usr/lib/python3.7/asyncio/base_futures.py\", line 60, in _future_repr_info\r\n    info.append(f'exception={future._exception!r}')\r\n  File \"/usr/share/python3/app/lib/python3.7/site-packages/aiormq/exceptions.py\", line 6, in __repr__\r\n    return \"<%s: %s>\" % (self.__class__.__name__, self.message % self.args)\r\nTypeError: unsupported operand type(s) for %: 'DeliveredMessage' and 'tuple'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/55", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/55/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/55/events", "html_url": "https://github.com/mosquito/aiormq/issues/55", "id": 495960876, "node_id": "MDU6SXNzdWU0OTU5NjA4NzY=", "number": 55, "title": "Protect RPC from cancellation", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-19T18:32:22Z", "updated_at": "2019-09-23T17:25:02Z", "closed_at": "2019-09-23T17:00:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If `Channel.rpc` task will be cancelled and `asyncio.CancelledError` will be raised after request frame was written and before response frame was got from `Channel.rpc_frames` queue\r\nhttps://github.com/mosquito/aiormq/blob/287bb062e0992753c034ba75b68b5be5c7b1daf3/aiormq/channel.py#L84-L98\r\nthen `Channel.rpc_frames` queue will be corrupted and next frames will lead to `InvalidFrameError` be raised.\r\n\r\nI think `asyncio.Lock` is not enough, but `asyncio.shield` also needed to protect `Channel.rpc` method. Maybe it should be added not only for `Channel.rpc` method but also in some other places. @mosquito what do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/53", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/53/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/53/events", "html_url": "https://github.com/mosquito/aiormq/issues/53", "id": 486893683, "node_id": "MDU6SXNzdWU0ODY4OTM2ODM=", "number": 53, "title": "Exception from heartbeat task does never retrieved", "user": {"login": "harlov", "id": 1035828, "node_id": "MDQ6VXNlcjEwMzU4Mjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1035828?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harlov", "html_url": "https://github.com/harlov", "followers_url": "https://api.github.com/users/harlov/followers", "following_url": "https://api.github.com/users/harlov/following{/other_user}", "gists_url": "https://api.github.com/users/harlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/harlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harlov/subscriptions", "organizations_url": "https://api.github.com/users/harlov/orgs", "repos_url": "https://api.github.com/users/harlov/repos", "events_url": "https://api.github.com/users/harlov/events{/privacy}", "received_events_url": "https://api.github.com/users/harlov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-29T11:10:37Z", "updated_at": "2019-08-29T11:37:48Z", "closed_at": "2019-08-29T11:37:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hearbeats task failed silently:\r\n\r\n`\r\n[2019-08-29 13:23:09,428] [asyncio] [ERROR] Task exception was never retrieved\r\nfuture: <Task finished coro=<Connection.__heartbeat_task() done, defined at <...>/aiormq/aiormq/connection.py:268> exception=RuntimeError('unable to perform operation on <TCPTransport closed=True reading=False 0x564a9bc2ab58>; the handler is closed')>\r\nTraceback (most recent call last):\r\n  File \"<...>/aiormq/aiormq/connection.py\", line 281, in __heartbeat_task\r\n    self.writer.write(self._HEARTBEAT)\r\n  File \"<...>/.pyenv/versions/3.7.3/lib/python3.7/asyncio/streams.py\", line 305, in write\r\n    self._transport.write(data)\r\n  File \"uvloop/handles/stream.pyx\", line 671, in uvloop.loop.UVStream.write\r\n  File \"uvloop/handles/handle.pyx\", line 159, in uvloop.loop.UVHandle._ensure_alive\r\nRuntimeError: unable to perform operation on <TCPTransport closed=True reading=False 0x564a9bc2ab58>; the handler is closed\r\n`\r\n\r\npython 3.7.3\r\naiormq 2.7.3\r\nuvloop 0.12.12", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/52", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/52/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/52/events", "html_url": "https://github.com/mosquito/aiormq/issues/52", "id": 482917967, "node_id": "MDU6SXNzdWU0ODI5MTc5Njc=", "number": 52, "title": "[2.7.2] Worker claims multiple messages from queue despite prefetch_count, prefetch_size = 0", "user": {"login": "gregdan3", "id": 28300107, "node_id": "MDQ6VXNlcjI4MzAwMTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/28300107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregdan3", "html_url": "https://github.com/gregdan3", "followers_url": "https://api.github.com/users/gregdan3/followers", "following_url": "https://api.github.com/users/gregdan3/following{/other_user}", "gists_url": "https://api.github.com/users/gregdan3/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregdan3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregdan3/subscriptions", "organizations_url": "https://api.github.com/users/gregdan3/orgs", "repos_url": "https://api.github.com/users/gregdan3/repos", "events_url": "https://api.github.com/users/gregdan3/events{/privacy}", "received_events_url": "https://api.github.com/users/gregdan3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T15:04:17Z", "updated_at": "2019-08-20T15:39:35Z", "closed_at": "2019-08-20T15:39:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nConsumers are only able to claim one item from a queue at a time, when the prefetch_count and prefetch_size on the channel they consume from is zero\r\n\r\n\r\n### Actual Behavior\r\n\r\nConsumers can claim any number of messages from the queue at a time, regardless of prefetch_count and prefetch_size\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Establish a connection, then a channel to your RabbitMQ service\r\n2. Assign the channel.basic_qos(prefetch_count=0, prefetch_size=0)\r\n3. Begin consuming from the channel\r\n\r\nIf you observe the unacked messages on the queue from the rabbitmq_management plugin, there will be an increasingly large number of unacked messages, even though there should only ever be a single message claimed from the queue at a time.\r\n\r\n### Example code demonstrating issue\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport asyncio\r\nimport json\r\nimport random\r\nimport aiormq\r\n\r\n\r\nclass Minimal:\r\n    def __init__(self):\r\n        self.queue_name = \"minimal_test\"\r\n\r\n    async def start(self):\r\n        self.connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\r\n        self.channel = await self.connection.channel()\r\n        await self.channel.basic_qos(prefetch_count=0, prefetch_size=0)\r\n\r\n        self.declare_ok = await self.channel.queue_declare(self.queue_name)\r\n        await self.publish_junk()\r\n\r\n    async def run(self):\r\n        consume_ok = await self.channel.basic_consume(\r\n            self.declare_ok.queue, self.on_message\r\n        )\r\n\r\n    async def on_message(self, message):\r\n        await asyncio.sleep(5)\r\n        await self.publish_junk()\r\n        await message.channel.basic_ack(message.delivery.delivery_tag)\r\n\r\n    async def publish_junk(self):\r\n        for _ in range(10):\r\n            await self.channel.basic_publish(\r\n                json.dumps({\"number\": random.randint(0, 99999)}).encode(\"UTF-8\"),\r\n                routing_key=self.queue_name,\r\n            )\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    loop = asyncio.get_event_loop()\r\n    minimal = Minimal()\r\n    loop.run_until_complete(minimal.start())\r\n\r\n    asyncio.ensure_future(minimal.run())\r\n    loop.run_forever()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/47", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/47/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/47/events", "html_url": "https://github.com/mosquito/aiormq/issues/47", "id": 468632891, "node_id": "MDU6SXNzdWU0Njg2MzI4OTE=", "number": 47, "title": "Consumer callback should be removed from Channel.consumers on basic_cancel", "user": {"login": "a68366", "id": 12549653, "node_id": "MDQ6VXNlcjEyNTQ5NjUz", "avatar_url": "https://avatars0.githubusercontent.com/u/12549653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a68366", "html_url": "https://github.com/a68366", "followers_url": "https://api.github.com/users/a68366/followers", "following_url": "https://api.github.com/users/a68366/following{/other_user}", "gists_url": "https://api.github.com/users/a68366/gists{/gist_id}", "starred_url": "https://api.github.com/users/a68366/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a68366/subscriptions", "organizations_url": "https://api.github.com/users/a68366/orgs", "repos_url": "https://api.github.com/users/a68366/repos", "events_url": "https://api.github.com/users/a68366/events{/privacy}", "received_events_url": "https://api.github.com/users/a68366/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1171192326, "node_id": "MDU6TGFiZWwxMTcxMTkyMzI2", "url": "https://api.github.com/repos/mosquito/aiormq/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-16T12:44:35Z", "updated_at": "2019-08-02T10:56:31Z", "closed_at": "2019-08-02T10:56:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "When `basic_consume` is called, callback is saved into `Channel.consumers`:\r\nhttps://github.com/mosquito/aiormq/blob/4fb55100fad9bbc502cc4533ccb24d49d79a18ce/aiormq/channel.py#L322\r\n\r\nBut it's never removed when `basic_cancel` is called or anywhere else.\r\nThis part looks like it's intended to do it, but it never actually enters this path:\r\nhttps://github.com/mosquito/aiormq/blob/4fb55100fad9bbc502cc4533ccb24d49d79a18ce/aiormq/channel.py#L251-L253\r\n\r\nAdding this piece of code fixes the problem:\r\n```\r\nelif isinstance(frame, spec.Basic.CancelOk):\r\n    self.consumers.pop(frame.consumer_tag, None)\r\n```\r\n\r\nA code example:\r\n```\r\n# aiormq==2.6.0\r\nimport asyncio\r\nimport aiormq\r\n\r\nasync def on_message(message):\r\n    await asyncio.sleep(5)\r\n\r\nasync def main():\r\n    connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\r\n    channel = await connection.channel()\r\n    deaclare_ok = await channel.queue_declare('helo')\r\n\r\n    while True:\r\n        consume_ok = await channel.basic_consume(\r\n            deaclare_ok.queue, on_message, no_ack=True\r\n        )\r\n        cancel_ok = await channel.basic_cancel(consume_ok.consumer_tag)\r\n        print(len(channel.consumers), consume_ok.consumer_tag, cancel_ok.consumer_tag)\r\n        await asyncio.sleep(1)\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main())\r\nloop.run_forever()\r\n\r\n```\r\nExample output (note than number grows over time):\r\n```\r\n1 ctag1.7bb39cff6fdb40e0427ab57158f2c043 ctag1.7bb39cff6fdb40e0427ab57158f2c043\r\n2 ctag1.a2168d75988391d20d686d08982337a3 ctag1.a2168d75988391d20d686d08982337a3\r\n3 ctag1.f5213cab45868045e9c16ccfdbe369ec ctag1.f5213cab45868045e9c16ccfdbe369ec\r\n4 ctag1.33c584a805fb98fdcbb61e80f6c92314 ctag1.33c584a805fb98fdcbb61e80f6c92314\r\n5 ctag1.5957e99d5daa0985002756b7fed70c0d ctag1.5957e99d5daa0985002756b7fed70c0d\r\n6 ctag1.765566530efe09143c2331b71c3166e8 ctag1.765566530efe09143c2331b71c3166e8\r\n7 ctag1.8312f1f6e90988330d81842ead1d03ec ctag1.8312f1f6e90988330d81842ead1d03ec\r\n8 ctag1.2d66f81b58fc986f1decf711cb1b27f6 ctag1.2d66f81b58fc986f1decf711cb1b27f6\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/46", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/46/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/46/events", "html_url": "https://github.com/mosquito/aiormq/issues/46", "id": 464665312, "node_id": "MDU6SXNzdWU0NjQ2NjUzMTI=", "number": 46, "title": "hidden error in Connection._on_close", "user": {"login": "alpo", "id": 977573, "node_id": "MDQ6VXNlcjk3NzU3Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/977573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alpo", "html_url": "https://github.com/alpo", "followers_url": "https://api.github.com/users/alpo/followers", "following_url": "https://api.github.com/users/alpo/following{/other_user}", "gists_url": "https://api.github.com/users/alpo/gists{/gist_id}", "starred_url": "https://api.github.com/users/alpo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alpo/subscriptions", "organizations_url": "https://api.github.com/users/alpo/orgs", "repos_url": "https://api.github.com/users/alpo/repos", "events_url": "https://api.github.com/users/alpo/events{/privacy}", "received_events_url": "https://api.github.com/users/alpo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-05T14:27:15Z", "updated_at": "2019-09-07T06:04:42Z", "closed_at": "2019-09-07T06:04:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to subclass Connection to extend network failures processing.\r\n\r\n```\r\nclass SomeClass(aiormq.Connection):\r\n    async def _on_close(self, exc=ConnectionClosed(0, 'normal closed')):\r\n        await super()._on_close(exc)\r\n        # rest of the code\r\n```\r\nThe \"rest of the code\" does not execute. After temporary removing of the line https://github.com/mosquito/aiormq/blob/master/aiormq/base.py#L142\r\nI figured out that aiormq.Connection._on_close always fails in the line https://github.com/mosquito/aiormq/blob/master/aiormq/connection.py#L399\r\ndue to reason `AttributeError: 'StreamWriter' object has no attribute 'wait_closed'`.\r\n\r\nPython 3.6.8\r\nLinux\r\naiormq 2.6.0\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/42", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/42/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/42/events", "html_url": "https://github.com/mosquito/aiormq/issues/42", "id": 459338206, "node_id": "MDU6SXNzdWU0NTkzMzgyMDY=", "number": 42, "title": "[2.5.5] Repeated KeyError when manually acking", "user": {"login": "gregdan3", "id": 28300107, "node_id": "MDQ6VXNlcjI4MzAwMTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/28300107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregdan3", "html_url": "https://github.com/gregdan3", "followers_url": "https://api.github.com/users/gregdan3/followers", "following_url": "https://api.github.com/users/gregdan3/following{/other_user}", "gists_url": "https://api.github.com/users/gregdan3/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregdan3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregdan3/subscriptions", "organizations_url": "https://api.github.com/users/gregdan3/orgs", "repos_url": "https://api.github.com/users/gregdan3/repos", "events_url": "https://api.github.com/users/gregdan3/events{/privacy}", "received_events_url": "https://api.github.com/users/gregdan3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-06-21T19:18:32Z", "updated_at": "2019-08-01T14:07:56Z", "closed_at": "2019-08-01T14:05:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "In channels.Channel._confirm_delivery():\r\n```    def _confirm_delivery(self, delivery_tag, frame: ConfirmationFrameType):\r\n        confirmation = self.confirmations.pop(delivery_tag)\r\n\r\n        if confirmation is self.Returning:\r\n            return\r\n        elif confirmation.done():  # pragma: nocover\r\n            log.warn(\r\n                \"Delivery tag %r confirmed %r was ignored\",\r\n                delivery_tag, frame\r\n            )\r\n            return\r\n        elif isinstance(frame, spec.Basic.Ack):\r\n            confirmation.set_result(frame)\r\n            return\r\n\r\n        confirmation.set_exception(\r\n            exc.DeliveryError(None, frame)\r\n        )  # pragma: nocover\r\n```\r\n\r\nI get the following errors on each attempt to ack the message (doing so manually):\r\n\r\n```\r\n\r\n[2019-06-21 13:00:31,912] [        base_events.py:1268] [   ERROR]   Exception in callback Channel._confirm_delivery(7542, <pamqp.specif...0x2480e5a49b0>)\r\nhandle: <Handle Channel._confirm_delivery(7542, <pamqp.specif...0x2480e5a49b0>)>\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\Python36\\lib\\asyncio\\events.py\", line 145, in _run\r\n    self._callback(*self._args)\r\n  File \"C:\\Users\\gregdan3\\AppData\\Roaming\\Python\\Python36\\site-packages\\aiormq\\channel.py\", line 200, in _confirm_delivery\r\n    confirmation = self.confirmations.pop(delivery_tag)\r\nKeyError: 7542\r\n\r\n[2019-06-21 13:00:31,912] [        base_events.py:1268] [   ERROR]   Exception in callback Channel._confirm_delivery(7543, <pamqp.specif...0x2480e5a49b0>)\r\nhandle: <Handle Channel._confirm_delivery(7543, <pamqp.specif...0x2480e5a49b0>)>\r\nTraceback (most recent call last):\r\n  File \"C:\\Program Files\\Python36\\lib\\asyncio\\events.py\", line 145, in _run\r\n    self._callback(*self._args)\r\n  File \"C:\\Users\\gregdan3\\AppData\\Roaming\\Python\\Python36\\site-packages\\aiormq\\channel.py\", line 200, in _confirm_delivery\r\n    confirmation = self.confirmations.pop(delivery_tag)\r\nKeyError: 7543\r\n```\r\n\r\nThis does not occur in 2.5.3, which is my band-aid solution for the time being.\r\n\r\nThis is also being run on python 3.6.6, in Windows, if this is relevant. I have demonstrated the problem occurring on other systems (Linux running 3.7.3), as well.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/39", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/39/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/39/events", "html_url": "https://github.com/mosquito/aiormq/issues/39", "id": 451710486, "node_id": "MDU6SXNzdWU0NTE3MTA0ODY=", "number": 39, "title": "Repeated TypeError in exceptions.py while attempting to cancel event loop tasks", "user": {"login": "gregdan3", "id": 28300107, "node_id": "MDQ6VXNlcjI4MzAwMTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/28300107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gregdan3", "html_url": "https://github.com/gregdan3", "followers_url": "https://api.github.com/users/gregdan3/followers", "following_url": "https://api.github.com/users/gregdan3/following{/other_user}", "gists_url": "https://api.github.com/users/gregdan3/gists{/gist_id}", "starred_url": "https://api.github.com/users/gregdan3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gregdan3/subscriptions", "organizations_url": "https://api.github.com/users/gregdan3/orgs", "repos_url": "https://api.github.com/users/gregdan3/repos", "events_url": "https://api.github.com/users/gregdan3/events{/privacy}", "received_events_url": "https://api.github.com/users/gregdan3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-03T22:05:58Z", "updated_at": "2019-06-28T00:16:11Z", "closed_at": "2019-06-28T00:16:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "```[2019-06-03 16:26:56,499] [        base_events.py:1640] [   ERROR]   Exception in default exception handler\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1634, in call_exception_handler\r\n    self.default_exception_handler(context)\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1605, in default_exception_handler\r\n    value = repr(value)\r\n  File \"/usr/lib/python3.7/asyncio/base_tasks.py\", line 9, in _task_repr_info\r\n    info = base_futures._future_repr_info(task)\r\n  File \"/usr/lib/python3.7/asyncio/base_futures.py\", line 60, in _future_repr_info\r\n    info.append(f'exception={future._exception!r}')\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/exceptions.py\", line 6, in __repr__\r\n    return \"<%s: %s>\" % (self.__class__.__name__, self.message % self.args)\r\nTypeError: not all arguments converted during string formatting\r\n```\r\nIf I attempt to cancel the publish tasks after they have begun, this occurs inconsistently.\r\nI have yet to find a specific cause of the issue.\r\nThis occurs in aio_pika 5.5.3 and aiormq 2.5.3\r\n\r\n```\r\n[2019-06-03 16:57:04,123] [         connection.py:380 ] [   DEBUG]   Reader task cancelled:\r\nTraceback (most recent call last):\r\n  File \"./scrape.py\", line 312, in main\r\n    loop.run_forever()\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 539, in run_forever\r\n    self._run_once()\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1775, in _run_once\r\n    handle._run()\r\n  File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\r\n    self._context.run(self._callback, *self._args)\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/channel.py\", line 245, in _reader\r\n    await self._on_deliver(frame)\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/channel.py\", line 146, in _on_deliver\r\n    header = await self._get_frame()    # type: ContentHeader\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/channel.py\", line 79, in _get_frame\r\n    self.frames.task_done()\r\n  File \"/usr/lib/python3.7/asyncio/queues.py\", line 205, in task_done\r\n    self._finished.set()\r\n  File \"/usr/lib/python3.7/asyncio/locks.py\", line 270, in set\r\n    for fut in self._waiters:\r\nKeyboardInterrupt\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/base.py\", line 25, in __inner\r\n    return await self.task\r\nconcurrent.futures._base.CancelledError\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/connection.py\", line 349, in __reader\r\n    weight, channel, frame = await self.__receive_frame()\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/base.py\", line 171, in wrap\r\n    return await self.create_task(func(self, *args, **kwargs))\r\n  File \"/home/gregdan3/.local/lib/python3.7/site-packages/aiormq/base.py\", line 27, in __inner\r\n    raise self.exception from e\r\nconcurrent.futures._base.CancelledError\r\n```\r\nThis is the process that normally occurs, but again, this does not always occur as intended.\r\n\r\n```\r\nasyncio.ensure_future(publisher.run(), loop=loop)\r\n    try:\r\n        loop.run_forever()\r\n    except KeyboardInterrupt:\r\n        _log.info(\"Shutting down Asyncio loop\")\r\n        all_tasks = asyncio.Task.all_tasks(loop=loop)\r\n        for task in all_tasks:\r\n            task.cancel()\r\n        kill_task = asyncio.ensure_future(publisher.stop(), loop=loop)\r\n        loop.run_until_complete(kill_task)\r\n    finally:\r\n        loop.close()\r\n```\r\nThis is the specific code where I kill the tasks on the event loop.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/37", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/37/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/37/events", "html_url": "https://github.com/mosquito/aiormq/issues/37", "id": 442200283, "node_id": "MDU6SXNzdWU0NDIyMDAyODM=", "number": 37, "title": "Suboptimal consume performance", "user": {"login": "tilsche", "id": 9112758, "node_id": "MDQ6VXNlcjkxMTI3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9112758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tilsche", "html_url": "https://github.com/tilsche", "followers_url": "https://api.github.com/users/tilsche/followers", "following_url": "https://api.github.com/users/tilsche/following{/other_user}", "gists_url": "https://api.github.com/users/tilsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/tilsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tilsche/subscriptions", "organizations_url": "https://api.github.com/users/tilsche/orgs", "repos_url": "https://api.github.com/users/tilsche/repos", "events_url": "https://api.github.com/users/tilsche/events{/privacy}", "received_events_url": "https://api.github.com/users/tilsche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-09T12:01:17Z", "updated_at": "2019-05-14T16:21:22Z", "closed_at": "2019-05-14T16:11:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recently, we ran into severe performance limitations of a consumer implemented with aio-pika. I make this issue here, because I believe the performance is mostly limited by aiormq since aio-pika 4. _Publish performance_ in aio-pika has been discussed in https://github.com/mosquito/aio-pika/issues/107. Because this is mainly focused on aiormq, I am making the issue in this repository.\r\n\r\nSo I made some [simple benchmarks](https://gist.github.com/tilsche/1c0e0141eed018cc5e2df4f75c8617d5). While aio-pika 2.8.3 was on par with pika. The consumption rate is less than half with the current master, and still only about half of pika with pure aiormq.\r\n\r\nLooking at the profiles, it seems a main weakness for aiormq are the large number of tasks that are created while consuming data. Particularly the `@task` decorated `Connection.__receive_frame` creates three tasks for reading the frames of each message. My rough understanding is that this is supposed to allow bulk cancellation of all things asynchronous within `aiormq`.\r\n\r\nFor testing I made some [hacky changes]( https://github.com/metricq/aiormq/tree/performance-hacks) - moving the `@task` from `__receive_frame` to the outer `__reader_` and `__rpc`. I'm don't claim to have a good understanding of the impact that such a change would have outside of error-free execution.\r\n\r\nAnother minor changes was to consolidate two `readexactly` calls. Again I'm not sure if that would decrease resilience.\r\n\r\nIn the benchmarks, the `@task` change brought a large performance increase for both pure `aiormq` and `aio-pika`. There is still a gap between `aio-pika` and `aiormq` and also between pure `aiormq` and `pika`.\r\n\r\n![aiormq-performance](https://user-images.githubusercontent.com/9112758/57451862-a9a47680-7262-11e9-90d7-f3ab16340e65.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/34", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/34/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/34/events", "html_url": "https://github.com/mosquito/aiormq/issues/34", "id": 438767701, "node_id": "MDU6SXNzdWU0Mzg3Njc3MDE=", "number": 34, "title": "Channel number too large exception", "user": {"login": "caiohsramos", "id": 12804854, "node_id": "MDQ6VXNlcjEyODA0ODU0", "avatar_url": "https://avatars0.githubusercontent.com/u/12804854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caiohsramos", "html_url": "https://github.com/caiohsramos", "followers_url": "https://api.github.com/users/caiohsramos/followers", "following_url": "https://api.github.com/users/caiohsramos/following{/other_user}", "gists_url": "https://api.github.com/users/caiohsramos/gists{/gist_id}", "starred_url": "https://api.github.com/users/caiohsramos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caiohsramos/subscriptions", "organizations_url": "https://api.github.com/users/caiohsramos/orgs", "repos_url": "https://api.github.com/users/caiohsramos/repos", "events_url": "https://api.github.com/users/caiohsramos/events{/privacy}", "received_events_url": "https://api.github.com/users/caiohsramos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-30T13:05:07Z", "updated_at": "2019-05-17T17:20:05Z", "closed_at": "2019-05-17T17:20:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey, I'm running this code:\r\n```\r\nimport asyncio\r\n\r\nimport aio_pika\r\n\r\n\r\nconn = None\r\n\r\n\r\nasync def ping_rabbit():\r\n    channel = await conn.channel()\r\n    await channel.close()\r\n\r\n\r\nasync def main():\r\n    global conn\r\n    conn = await aio_pika.connect_robust('amqp://')\r\n    req = []\r\n    for _ in range(65535):\r\n        req.append(ping_rabbit())\r\n    await asyncio.gather(*req)\r\n    print('Done')\r\n    await ping_rabbit()\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n```\r\nand I'm getting \"Channel number too large\" exception right after the \"Done\". Probably something related to the file https://github.com/mosquito/aiormq/blob/master/aiormq/connection.py#L429. Could you guys take a look?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/32", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/32/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/32/events", "html_url": "https://github.com/mosquito/aiormq/issues/32", "id": 436467550, "node_id": "MDU6SXNzdWU0MzY0Njc1NTA=", "number": 32, "title": "Incomplete read error when closing connection", "user": {"login": "thmzlt", "id": 7709, "node_id": "MDQ6VXNlcjc3MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thmzlt", "html_url": "https://github.com/thmzlt", "followers_url": "https://api.github.com/users/thmzlt/followers", "following_url": "https://api.github.com/users/thmzlt/following{/other_user}", "gists_url": "https://api.github.com/users/thmzlt/gists{/gist_id}", "starred_url": "https://api.github.com/users/thmzlt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thmzlt/subscriptions", "organizations_url": "https://api.github.com/users/thmzlt/orgs", "repos_url": "https://api.github.com/users/thmzlt/repos", "events_url": "https://api.github.com/users/thmzlt/events{/privacy}", "received_events_url": "https://api.github.com/users/thmzlt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-04-24T02:27:00Z", "updated_at": "2020-06-09T15:42:05Z", "closed_at": "2019-10-04T12:47:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting the following traceback when stopping my connection:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/nix/store/p8j6zgmwlr25cf4viyyqfalfnd9dh9y1-python3-3.7.2-env/lib/python3.7/site-packages/aiormq/connection.py\", line 334, in __reader\r\n    weight, channel, frame = await self.__receive_frame()\r\n  File \"/nix/store/p8j6zgmwlr25cf4viyyqfalfnd9dh9y1-python3-3.7.2-env/lib/python3.7/site-packages/aiormq/base.py\", line 171, in wrap\r\n    return await self.create_task(func(self, *args, **kwargs))\r\n  File \"/nix/store/p8j6zgmwlr25cf4viyyqfalfnd9dh9y1-python3-3.7.2-env/lib/python3.7/site-packages/aiormq/base.py\", line 25, in __inner\r\n    return await self.task\r\n  File \"/nix/store/p8j6zgmwlr25cf4viyyqfalfnd9dh9y1-python3-3.7.2-env/lib/python3.7/site-packages/aiormq/connection.py\", line 285, in __receive_frame\r\n    frame_header = await self.reader.readexactly(1)\r\n  File \"/nix/store/p8j6zgmwlr25cf4viyyqfalfnd9dh9y1-python3-3.7.2-env/lib/python3.7/asyncio/streams.py\", line 677, in readexactly\r\n    raise IncompleteReadError(incomplete, n)\r\nasyncio.streams.IncompleteReadError: 0 bytes read on a total of 1 expected bytes\r\n```\r\n\r\nI'm pretty much calling `channel.close()` and then `connection.close()` before stopping and closing the loop. Shouldn't it close without an error?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/26", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/26/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/26/events", "html_url": "https://github.com/mosquito/aiormq/issues/26", "id": 429876895, "node_id": "MDU6SXNzdWU0Mjk4NzY4OTU=", "number": 26, "title": "Channels does not close", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-05T18:13:24Z", "updated_at": "2019-04-13T15:43:36Z", "closed_at": "2019-04-13T15:41:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is the script which tries to declare exclusive queue:\r\n```python\r\nimport asyncio\r\n\r\nimport aio_pika\r\nimport aiormq\r\n\r\n\r\nasync def main():\r\n    connection = await aio_pika.connect_robust('amqp://guest:guest@127.0.0.1/')\r\n    channel = await connection.channel()\r\n    while True:\r\n        try:\r\n            await channel.declare_queue('test_lock', exclusive=True)\r\n        except aiormq.exceptions.ChannelLockedResource:\r\n            channel = await connection.channel()\r\n            print('Waiting for declare')\r\n            await asyncio.sleep(1)\r\n            continue\r\n        break\r\n    print('Declared')\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main())\r\nloop.run_forever()\r\n```\r\n\r\nRun:\r\n```\r\n$ python test_lock.py &\r\n[1] 2046                  \r\nDeclared\r\n$ python test_lock.py &\r\n[2] 2071                            \r\nWaiting for declare\r\nWaiting for declare\r\nWaiting for declare\r\n...\r\n```\r\n\r\nThe problem is when the script is being run second time and he is waiting for declare then channels he creates does not close, - according to the RabbitMQ management plugin their number within a single connection is just increasing.\r\n\r\nEnvironment:\r\n- RabbitMQ 3.7.14\r\n- CPython 3.6.4\r\n- aio-pika 5.5.1\r\n- aiormq 2.3.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/24", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/24/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/24/events", "html_url": "https://github.com/mosquito/aiormq/issues/24", "id": 424851205, "node_id": "MDU6SXNzdWU0MjQ4NTEyMDU=", "number": 24, "title": "tools.py error: RuntimeWarning: coroutine '_test' was never awaited", "user": {"login": "gtmartem", "id": 30326062, "node_id": "MDQ6VXNlcjMwMzI2MDYy", "avatar_url": "https://avatars3.githubusercontent.com/u/30326062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gtmartem", "html_url": "https://github.com/gtmartem", "followers_url": "https://api.github.com/users/gtmartem/followers", "following_url": "https://api.github.com/users/gtmartem/following{/other_user}", "gists_url": "https://api.github.com/users/gtmartem/gists{/gist_id}", "starred_url": "https://api.github.com/users/gtmartem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gtmartem/subscriptions", "organizations_url": "https://api.github.com/users/gtmartem/orgs", "repos_url": "https://api.github.com/users/gtmartem/repos", "events_url": "https://api.github.com/users/gtmartem/events{/privacy}", "received_events_url": "https://api.github.com/users/gtmartem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-25T11:26:53Z", "updated_at": "2019-03-26T13:49:43Z", "closed_at": "2019-03-26T13:48:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nI think, there's a little mistake, but I dont sure.\r\nThank you for your attention!\r\n\r\n[file tools.py, 28 line:](https://github.com/mosquito/aiormq/blob/master/aiormq/tools.py)\r\n`HAS_AWAIT_METHOD = hasattr(_test(), '__await__')`\r\n[Problem is in this merge](https://github.com/mosquito/aiormq/commit/2b8a2c012a73378632a39253bd4665cb1a219dc8)\r\n\r\n```\r\n/usr/local/lib/python3.6/site-packages/aiormq/tools.py:28: RuntimeWarning: coroutine '_test' was never awaited\r\n    HAS_AWAIT_METHOD = hasattr(_test(), '__await__')\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/22", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/22/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/22/events", "html_url": "https://github.com/mosquito/aiormq/issues/22", "id": 424670396, "node_id": "MDU6SXNzdWU0MjQ2NzAzOTY=", "number": 22, "title": "Exception within LazyCoroutine", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-24T22:50:37Z", "updated_at": "2019-03-24T23:19:20Z", "closed_at": "2019-03-24T23:19:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@mosquito I've already [reported](https://github.com/mosquito/aiormq/commit/3b6d5cc10e485203b2214761a136d87e59cbe3d0#r32892210) about this exception at commit but just in case here is the issue when using Python 3.6:\r\n```\r\nAttributeError: 'coroutine' object has no attribute '__iter__'\r\n  File \"service.py\", line 444, in ack\r\n    await message.ack()\r\n  File \"asyncio/tasks.py\", line 537, in _wrap_awaitable\r\n    return (yield from awaitable.__await__())\r\n  File \"aiormq/tools.py\", line 50, in __await__\r\n    return (yield from self().__iter__())\r\n```\r\nThe same with synchronous call without `await`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/17", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/17/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/17/events", "html_url": "https://github.com/mosquito/aiormq/issues/17", "id": 424534075, "node_id": "MDU6SXNzdWU0MjQ1MzQwNzU=", "number": 17, "title": "AssertionError when drain is called", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-23T19:05:33Z", "updated_at": "2019-03-24T21:13:33Z", "closed_at": "2019-03-24T20:53:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have the following dependencies:\r\n- CPython 3.6.7\r\n- aio-pika==5.4.0\r\n- aiormq==2.1.0\r\n\r\nAt my service I have loop exception handler (https://docs.python.org/3.6/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.set_exception_handler) therefore I see that after upgrading aio-pika (from version 4 to 5) there are many `AssertionError` appeared inside the `asyncio`:\r\n```\r\nAssertionError: null\r\n  File \"asyncio/streams.py\", line 339, in drain\r\n    yield from self._protocol._drain_helper()\r\n  File \"asyncio/streams.py\", line 214, in _drain_helper\r\n    assert waiter is None or waiter.cancelled()\r\n```\r\nI see there are several calls of `asyncio.StreamWriter.drain` within `aiormq.Channel` class (`basic_ack`, `basic_nack` and `basic_reject` methods) so I guess the problem relates to the `aiormq`. Also I guess it may be related to https://bugs.python.org/issue29930.\r\n\r\nIt's rather difficult to pick the script to reproduce the problem out of the service where it is observed and for this time I just leave it as is here so someone who experiencing the same problem could find this issue.\r\n\r\n@mosquito FYI.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/16", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/16/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/16/events", "html_url": "https://github.com/mosquito/aiormq/issues/16", "id": 422655146, "node_id": "MDU6SXNzdWU0MjI2NTUxNDY=", "number": 16, "title": "SSL capath vs cafile", "user": {"login": "cluosh", "id": 2684040, "node_id": "MDQ6VXNlcjI2ODQwNDA=", "avatar_url": "https://avatars1.githubusercontent.com/u/2684040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cluosh", "html_url": "https://github.com/cluosh", "followers_url": "https://api.github.com/users/cluosh/followers", "following_url": "https://api.github.com/users/cluosh/following{/other_user}", "gists_url": "https://api.github.com/users/cluosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/cluosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cluosh/subscriptions", "organizations_url": "https://api.github.com/users/cluosh/orgs", "repos_url": "https://api.github.com/users/cluosh/repos", "events_url": "https://api.github.com/users/cluosh/events{/privacy}", "received_events_url": "https://api.github.com/users/cluosh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-19T10:33:50Z", "updated_at": "2019-03-28T15:46:10Z", "closed_at": "2019-03-24T21:36:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\ni've run into a problem with the SSL setup using aio-pika and specifying the CA cert in the URL string. Disregarding inconsistent documentation (aio-pika mentions **ca_certs** while aiormq uses **cafile**), none of these seem to represent what is actually being used in the code (**capath** for the SSL context).\r\n\r\nIf the intention of the URL parameter is to specify a CA path, I would suggest renaming it to **capath** or **ca_path**; if the parameter is intended to be used to load a single CA bundle file (as reflected in the documentation), the SSL context should be initialized with **cafile** instead of **capath**.\r\n\r\nReferences: https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_verify_locations", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/15", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/15/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/15/events", "html_url": "https://github.com/mosquito/aiormq/issues/15", "id": 418363037, "node_id": "MDU6SXNzdWU0MTgzNjMwMzc=", "number": 15, "title": "AMQPError vs AMQPException", "user": {"login": "decaz", "id": 31096, "node_id": "MDQ6VXNlcjMxMDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/31096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/decaz", "html_url": "https://github.com/decaz", "followers_url": "https://api.github.com/users/decaz/followers", "following_url": "https://api.github.com/users/decaz/following{/other_user}", "gists_url": "https://api.github.com/users/decaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/decaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/decaz/subscriptions", "organizations_url": "https://api.github.com/users/decaz/orgs", "repos_url": "https://api.github.com/users/decaz/repos", "events_url": "https://api.github.com/users/decaz/events{/privacy}", "received_events_url": "https://api.github.com/users/decaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-07T15:15:14Z", "updated_at": "2019-03-24T22:38:57Z", "closed_at": "2019-03-24T22:32:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "What is AMQPException for? I suggest to remove AMQPException in favor of AMQPError in order to avoid ambiguity. @mosquito what do you think?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/10", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/10/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/10/events", "html_url": "https://github.com/mosquito/aiormq/issues/10", "id": 414234098, "node_id": "MDU6SXNzdWU0MTQyMzQwOTg=", "number": 10, "title": "Acknowledgements for multiple discontinuous tags", "user": {"login": "tilsche", "id": 9112758, "node_id": "MDQ6VXNlcjkxMTI3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9112758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tilsche", "html_url": "https://github.com/tilsche", "followers_url": "https://api.github.com/users/tilsche/followers", "following_url": "https://api.github.com/users/tilsche/following{/other_user}", "gists_url": "https://api.github.com/users/tilsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/tilsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tilsche/subscriptions", "organizations_url": "https://api.github.com/users/tilsche/orgs", "repos_url": "https://api.github.com/users/tilsche/repos", "events_url": "https://api.github.com/users/tilsche/events{/privacy}", "received_events_url": "https://api.github.com/users/tilsche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-02-25T18:04:38Z", "updated_at": "2019-02-26T11:51:04Z", "closed_at": "2019-02-26T11:51:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We ran into an issue of unconfirmed publishes when dispatching multiple publishes simultaneously. I can reproduce the issue with the following example with rabbitmq:\r\n```\r\nimport asyncio\r\nimport aiormq\r\nfrom datetime import datetime\r\n\r\n\r\nasync def main():\r\n    connection = await aiormq.connect(\"amqp://guest:guest@localhost/\")\r\n    channel = await connection.channel()\r\n    declare_ok = await channel.queue_declare(exclusive=True)\r\n    await channel.queue_bind(declare_ok.queue, 'amq.topic', routing_key='test.3')\r\n\r\n    while True:\r\n        print(\"send \", datetime.now())\r\n        messages = [channel.basic_publish(b'test', exchange='amq.topic', routing_key='test.{}'.format(i))\r\n                    for i in range(6)]\r\n        await asyncio.wait(messages)\r\n        print(\"done \", datetime.now())\r\n        await asyncio.sleep(2)\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(main())\r\n```\r\n\r\nIt appears that rabbitmq delays the ack for messages that are published to a certain queue compared to messages that not rounted, which results in a bit messy ack order. Looking at wireshark one of the ack-sequences is the following\r\n\r\n```\r\nBasic.Ack(7, False)\r\nBasic.Ack(8, False)\r\nBasic.Ack(9, False)\r\nBasic.Ack(11, False)\r\nBasic.Ack(12, True)\r\n```\r\n\r\nThe current code does not confirm message 10. I'm pretty sure it [should do so](http://www.rabbitmq.com/amqp-0-9-1-reference.html#basic.ack). I'm drafting an an example fix PR.\r\n\r\nI do no think this is related to #9.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/9", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/9/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/9/events", "html_url": "https://github.com/mosquito/aiormq/issues/9", "id": 414094500, "node_id": "MDU6SXNzdWU0MTQwOTQ1MDA=", "number": 9, "title": "Unknown <pamqp.specification.Basic.Ack object at 0x1043e5a58> from broker", "user": {"login": "bmario", "id": 130405, "node_id": "MDQ6VXNlcjEzMDQwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/130405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmario", "html_url": "https://github.com/bmario", "followers_url": "https://api.github.com/users/bmario/followers", "following_url": "https://api.github.com/users/bmario/following{/other_user}", "gists_url": "https://api.github.com/users/bmario/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmario/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmario/subscriptions", "organizations_url": "https://api.github.com/users/bmario/orgs", "repos_url": "https://api.github.com/users/bmario/repos", "events_url": "https://api.github.com/users/bmario/events{/privacy}", "received_events_url": "https://api.github.com/users/bmario/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-25T13:03:44Z", "updated_at": "2019-03-24T21:13:28Z", "closed_at": "2019-03-24T20:53:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I publish messages to an exchange for which there is no route, I get the following message for each publish:\r\n\r\n> Unknown <pamqp.specification.Basic.Ack object at 0x1043e5a58> from broker\r\n\r\nWhat I found out from my investigation is that by default the `mandatory` flag is set to True, which tells the RabbitMQ server to answer with a `Return` frame *and* an `Ack` frame. However, the `Channel` clears out the Promise in the `self.confirmations` already in the `_on_return` method. Thus, the `Ack` will complain by printing the above message. \r\n\r\nOn a side note: I find the default settings questionable, as `mandatory` is set to true, but the `on_return_raises` flag is false. I'd either want to silently drop the message if it's not routable, or that an exception is raised.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mosquito/aiormq/issues/2", "repository_url": "https://api.github.com/repos/mosquito/aiormq", "labels_url": "https://api.github.com/repos/mosquito/aiormq/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/mosquito/aiormq/issues/2/comments", "events_url": "https://api.github.com/repos/mosquito/aiormq/issues/2/events", "html_url": "https://github.com/mosquito/aiormq/issues/2", "id": 411585646, "node_id": "MDU6SXNzdWU0MTE1ODU2NDY=", "number": 2, "title": "Heartbeats not properly recognized", "user": {"login": "tilsche", "id": 9112758, "node_id": "MDQ6VXNlcjkxMTI3NTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9112758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tilsche", "html_url": "https://github.com/tilsche", "followers_url": "https://api.github.com/users/tilsche/followers", "following_url": "https://api.github.com/users/tilsche/following{/other_user}", "gists_url": "https://api.github.com/users/tilsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/tilsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tilsche/subscriptions", "organizations_url": "https://api.github.com/users/tilsche/orgs", "repos_url": "https://api.github.com/users/tilsche/repos", "events_url": "https://api.github.com/users/tilsche/events{/privacy}", "received_events_url": "https://api.github.com/users/tilsche/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-02-18T17:41:25Z", "updated_at": "2019-02-21T16:02:30Z", "closed_at": "2019-02-18T18:07:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The `Connection` only recognizes actual `Heartbeat` frames when updating `heartbeat_last`. The [RabbitMQ documentation](https://www.rabbitmq.com/heartbeats.html) states:\r\n\r\n> Any traffic (e.g. protocol operations, published messages, acknowledgements) counts for a valid heartbeat. Clients may choose to send heartbeat frames regardless of whether there was any other traffic on the connection but some only do it when necessary.\r\n\r\nTherefore on an actively used connection, the RabbitMQ server does not send heartbeats and `aiormq` runs into the heartbeat timeout.\r\n\r\nIt also seems to be dangerous to not properly initializing the heartbeat time (currently initialized with 0).\r\n\r\nFurther, currently, heartbeats to the server are only sent as a response to heartbeats received from the server. That doesn't seem particularly reliable.\r\n\r\nP.S. Note the difference between heartbeat interval and heartbeat timeout.", "performed_via_github_app": null, "score": 1.0}]}