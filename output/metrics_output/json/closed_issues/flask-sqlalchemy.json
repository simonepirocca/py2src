{"total_count": 465, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/870", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/870/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/870/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/870/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/870", "id": 676529442, "node_id": "MDU6SXNzdWU2NzY1Mjk0NDI=", "number": 870, "title": "Cannot connect SQL which SQL password has '%'", "user": {"login": "happyprotean", "id": 31753214, "node_id": "MDQ6VXNlcjMxNzUzMjE0", "avatar_url": "https://avatars1.githubusercontent.com/u/31753214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/happyprotean", "html_url": "https://github.com/happyprotean", "followers_url": "https://api.github.com/users/happyprotean/followers", "following_url": "https://api.github.com/users/happyprotean/following{/other_user}", "gists_url": "https://api.github.com/users/happyprotean/gists{/gist_id}", "starred_url": "https://api.github.com/users/happyprotean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/happyprotean/subscriptions", "organizations_url": "https://api.github.com/users/happyprotean/orgs", "repos_url": "https://api.github.com/users/happyprotean/repos", "events_url": "https://api.github.com/users/happyprotean/events{/privacy}", "received_events_url": "https://api.github.com/users/happyprotean/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T02:21:09Z", "updated_at": "2020-08-11T02:38:00Z", "closed_at": "2020-08-11T02:28:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Expected Behavior\r\n\r\nHi, I want to use flask-sqlalchemy to connect my SQL database, but I cannot connect to SQL\uff0c because the SQL database's password is like \"qU%d6\".\r\nIt quite strange because I can connect to SQL normally using a password like \"password\".\r\nChanging the SQL password may solve the problem, but this bug should be fixed too I think.\r\n\r\n```python\r\nDIALECT = 'mysql'\r\nDRIVER = 'mysqldb'\r\nUSERNAME = 'xxx'\r\nPASSWORD = 'qU%d6'\r\nHOST = 'xxx'\r\nPORT = 'xxx'\r\nDATABASE = 'xxx'\r\n\r\nSQLALCHEMY_DATABASE_URI = \"{}+{}://{}:{}@{}:{}/{}?charset=utf8\".format(DIALECT, DRIVER, \r\n    USERNAME, PASSWORD, HOST, PORT, DATABASE)\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThe error is: UnicodeDecodeError: 'ascii' codec can't decode byte 0xd6 in position 3: ordinal not in range(128), so I cannot connect to the SQL database.\r\nI have tried:\r\n- use u'qU%d6'\r\n- use r'qU%d6'\r\n- change % to %%\r\nAll failed!\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"sqldemo.py\", line 37, in <module>\r\n    db.create_all()    # \u771f\u6b63\u5efa\u7acb\u6a21\u578b\u5230\u6570\u636e\u5e93\r\n  File \"/usr/lib/python2.7/site-packages/flask_sqlalchemy/__init__.py\", line 1039, in create_all\r\n    self._execute_for_all_tables(app, bind, 'create_all')\r\n  File \"/usr/lib/python2.7/site-packages/flask_sqlalchemy/__init__.py\", line 1031, in _execute_for_all_tables\r\n    op(bind=self.get_engine(app, bind), **extra)\r\n  File \"/usr/lib/python2.7/site-packages/flask_sqlalchemy/__init__.py\", line 962, in get_engine\r\n    return connector.get_engine()\r\n  File \"/usr/lib/python2.7/site-packages/flask_sqlalchemy/__init__.py\", line 556, in get_engine\r\n    self._engine = rv = self._sa.create_engine(sa_url, options)\r\n  File \"/usr/lib/python2.7/site-packages/flask_sqlalchemy/__init__.py\", line 972, in create_engine\r\n    return sqlalchemy.create_engine(sa_url, **engine_opts)\r\n  File \"/usr/lib64/python2.7/site-packages/sqlalchemy/engine/__init__.py\", line 500, in create_engine\r\n    return strategy.create(*args, **kwargs)\r\n  File \"/usr/lib64/python2.7/site-packages/sqlalchemy/engine/strategies.py\", line 98, in create\r\n    (cargs, cparams) = dialect.create_connect_args(u)\r\n  File \"/usr/lib64/python2.7/site-packages/sqlalchemy/dialects/mysql/mysqldb.py\", line 184, in create_connect_args\r\n    database=\"db\", username=\"user\", password=\"passwd\"\r\n  File \"/usr/lib64/python2.7/site-packages/sqlalchemy/engine/url.py\", line 216, in translate_connect_args\r\n    if name is not None and getattr(self, sname, False):\r\n  File \"/usr/lib64/python2.7/site-packages/sqlalchemy/engine/url.py\", line 134, in password\r\n    return util.text_type(self.password_original)\r\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xd6 in position 3: ordinal not in range(128)\r\n```\r\n\r\n### Environment\r\n\r\n* Python version:2.7\r\n* Flask-SQLAlchemy version:2.4.4\r\n* SQLAlchemy version:1.3.18\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/867", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/867/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/867/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/867/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/867", "id": 674682484, "node_id": "MDU6SXNzdWU2NzQ2ODI0ODQ=", "number": 867, "title": "Typing information obscured to static analyzers", "user": {"login": "GinoMan", "id": 528834, "node_id": "MDQ6VXNlcjUyODgzNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/528834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GinoMan", "html_url": "https://github.com/GinoMan", "followers_url": "https://api.github.com/users/GinoMan/followers", "following_url": "https://api.github.com/users/GinoMan/following{/other_user}", "gists_url": "https://api.github.com/users/GinoMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/GinoMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GinoMan/subscriptions", "organizations_url": "https://api.github.com/users/GinoMan/orgs", "repos_url": "https://api.github.com/users/GinoMan/repos", "events_url": "https://api.github.com/users/GinoMan/events{/privacy}", "received_events_url": "https://api.github.com/users/GinoMan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-07T00:49:09Z", "updated_at": "2020-08-07T01:03:20Z", "closed_at": "2020-08-07T01:03:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nIn an editor that supports static analysis, the analyzer should be able to recognize the types used in the declarative syntax as valid, but it does not, nor can any sort of intellisense provide information about available options. This is because the types are automatically generated into the class. Adding type stubs would fix the issue.\r\n\r\n#### Python code\r\n\r\n```python\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n...\r\nDb = SQLAlchemy()\r\nApp = Flask(__name__, ...)\r\n...\r\nDb.init_app(App)\r\n...\r\nclass User(Db.Model):\r\n\tid = Db.Column(Db.Integer, primary_key=True)\r\n\tusername = Db.Column(Db.String(100), unique=True)\r\n\tpassword_hash = Db.Column(Db.String(500))\r\n```\r\n\r\n#### VSCode Config\r\n\r\n```json\r\n{\r\n...\r\n    \"python.languageServer\": \"Pylance\",\r\n...\r\n}\r\n```\r\n\r\n### Actual Behavior\r\n\r\nIn the code above, Db.Model, Db.Integer, Db.Column, and Db.String are all marked as errors. The specific message in Pylance in VSCode for example is:\r\n\r\n>`Cannot access member \"String|Model|Column|Integer\" for type \"SQLAlchemy\"`\r\n>`  Member \"String|Model|Column|Integer\" is unknown  Pylance (reportGeneralTypeIssues)`\r\n\r\nThe problem isn't necessarily with the static checker. Opening the __init__.py for flask_sqlalchemy shows that there really are no members by that name. Instead they're dynamically determined by the code on line 66-70. Plus, since they're dynamically determined, the type checker cannot know ahead of time what is supported. Creating subs in the SQLAlchemy class would likely fix the issue. \r\n\r\nInstalling [this package](https://github.com/ryanwang520/flask_sqlalchemy-stubs) for example caused \"Db.Model\" to become recognized by Pylance. I'm not super familiar with stubbing in python but I suspect something similar could be done for the other symbols in SqlAlchemy and SqlAlchemy.orm (see also [this issue](https://github.com/microsoft/pylance-release/issues/187) for pylance). \r\n\r\n### Environment\r\n\r\n* Python version: 3.8.3\r\n* Flask-SQLAlchemy version: 2.4.4\r\n* SQLAlchemy version: 1.3.18\r\n* VSCode version: 1.47.3\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/861", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/861/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/861/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/861/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/861", "id": 667066068, "node_id": "MDU6SXNzdWU2NjcwNjYwNjg=", "number": 861, "title": "How to delete a model from a many to many table", "user": {"login": "snbck", "id": 60885817, "node_id": "MDQ6VXNlcjYwODg1ODE3", "avatar_url": "https://avatars2.githubusercontent.com/u/60885817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snbck", "html_url": "https://github.com/snbck", "followers_url": "https://api.github.com/users/snbck/followers", "following_url": "https://api.github.com/users/snbck/following{/other_user}", "gists_url": "https://api.github.com/users/snbck/gists{/gist_id}", "starred_url": "https://api.github.com/users/snbck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snbck/subscriptions", "organizations_url": "https://api.github.com/users/snbck/orgs", "repos_url": "https://api.github.com/users/snbck/repos", "events_url": "https://api.github.com/users/snbck/events{/privacy}", "received_events_url": "https://api.github.com/users/snbck/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-28T13:18:15Z", "updated_at": "2020-07-28T13:40:01Z", "closed_at": "2020-07-28T13:40:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I passed db.table  A many to many table was created to store the many to many relationships of store followers and discussions\r\n``` python\r\nstar_for = db.Table('star_for',\r\n                    db.Column('star_user', db.Integer, db.ForeignKey(\r\n                        'User.id'), primary_key=True),\r\n                    db.Column('stared_post', db.Integer,\r\n                              db.ForeignKey('Post.id'), primary_key=True)\r\n                    )\r\n\r\n```\r\nWhen I add and query this many to many table, everything is OK. But I don't know how to delete relationships in many to many tables.\ud83e\udd14\ud83e\udd14\ud83e\udd14\r\n\r\n\r\nMy Python version is 3.8.2\r\nMy Flask-Sqlalchemy is 2.4.1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/859", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/859/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/859/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/859/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/859", "id": 665093698, "node_id": "MDU6SXNzdWU2NjUwOTM2OTg=", "number": 859, "title": "How to define the 2 byte unsigned integer using flask sqlalchemy? ", "user": {"login": "vvksahoo", "id": 56999733, "node_id": "MDQ6VXNlcjU2OTk5NzMz", "avatar_url": "https://avatars1.githubusercontent.com/u/56999733?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vvksahoo", "html_url": "https://github.com/vvksahoo", "followers_url": "https://api.github.com/users/vvksahoo/followers", "following_url": "https://api.github.com/users/vvksahoo/following{/other_user}", "gists_url": "https://api.github.com/users/vvksahoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vvksahoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vvksahoo/subscriptions", "organizations_url": "https://api.github.com/users/vvksahoo/orgs", "repos_url": "https://api.github.com/users/vvksahoo/repos", "events_url": "https://api.github.com/users/vvksahoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vvksahoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-24T11:02:28Z", "updated_at": "2020-07-24T13:30:09Z", "closed_at": "2020-07-24T13:30:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using postgresql database,  want to define a data type of integer value of 2 byte(0-65535).  if it is more than 2 byte value, some error should occur. \r\nIs there any data type to work with this scenario? \r\n```\r\nclass Users(db.Model):\r\n      id   = db.Column(db.Integer, primary_key=True)\r\n```\r\n### Environment\r\n\r\n* Python version: 3.7.4\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version: 1.3.12\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/852", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/852/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/852/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/852/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/852", "id": 656484395, "node_id": "MDU6SXNzdWU2NTY0ODQzOTU=", "number": 852, "title": "TypeError: can't apply this __setattr__ to DefaultMeta object", "user": {"login": "MartinThoma", "id": 1658117, "node_id": "MDQ6VXNlcjE2NTgxMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1658117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinThoma", "html_url": "https://github.com/MartinThoma", "followers_url": "https://api.github.com/users/MartinThoma/followers", "following_url": "https://api.github.com/users/MartinThoma/following{/other_user}", "gists_url": "https://api.github.com/users/MartinThoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinThoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinThoma/subscriptions", "organizations_url": "https://api.github.com/users/MartinThoma/orgs", "repos_url": "https://api.github.com/users/MartinThoma/repos", "events_url": "https://api.github.com/users/MartinThoma/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinThoma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2020-07-14T09:53:06Z", "updated_at": "2020-07-21T14:33:22Z", "closed_at": "2020-07-14T16:47:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know where this comes from. I have a small project where all versions are pinned and the Flask app runs in a Docker container. I just made an unrelated changes with the same versions and get this error. Does this look familiar?\r\n\r\n### Expected Behavior\r\n\r\nJust running without crashes\r\n\r\n```python\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\ndb = SQLAlchemy()\r\n```\r\n\r\n### Actual Behavior\r\n\r\nCrashes\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py\", line 716, in __init__\r\n    self.Model = self.make_declarative_base(model_class, metadata)\r\n  File \"/usr/local/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py\", line 798, in make_declarative_base\r\n    model.query_class = self.Query\r\n  File \"/usr/local/lib/python3.8/site-packages/sqlalchemy/ext/declarative/api.py\", line 79, in __setattr__\r\n    _add_attribute(cls, key, value)\r\n  File \"/usr/local/lib/python3.8/site-packages/sqlalchemy/ext/declarative/base.py\", line 802, in _add_attribute\r\n    type.__setattr__(cls, key, value)\r\nTypeError: can't apply this __setattr__ to DefaultMeta object\r\n\r\n```\r\n\r\n### Environment\r\n\r\n* Python version: Python 3.8.4 (Docker `python:3.8-slim-buster`)\r\n* Flask-SQLAlchemy version: flask-sqlalchemy==2.4.1\r\n* SQLAlchemy version: sqlalchemy==1.3.13\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/851", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/851/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/851/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/851/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/851", "id": 656049836, "node_id": "MDU6SXNzdWU2NTYwNDk4MzY=", "number": 851, "title": ".paginate() seems to override .options(load_only('col_1', 'col_2')) and include all columns", "user": {"login": "christopherpickering", "id": 17788706, "node_id": "MDQ6VXNlcjE3Nzg4NzA2", "avatar_url": "https://avatars2.githubusercontent.com/u/17788706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christopherpickering", "html_url": "https://github.com/christopherpickering", "followers_url": "https://api.github.com/users/christopherpickering/followers", "following_url": "https://api.github.com/users/christopherpickering/following{/other_user}", "gists_url": "https://api.github.com/users/christopherpickering/gists{/gist_id}", "starred_url": "https://api.github.com/users/christopherpickering/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christopherpickering/subscriptions", "organizations_url": "https://api.github.com/users/christopherpickering/orgs", "repos_url": "https://api.github.com/users/christopherpickering/repos", "events_url": "https://api.github.com/users/christopherpickering/events{/privacy}", "received_events_url": "https://api.github.com/users/christopherpickering/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-13T18:23:53Z", "updated_at": "2020-07-14T13:13:21Z", "closed_at": "2020-07-13T18:49:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nHi, I'm trying to use paginated results of a query and only selected a handful of columns in the table, however, it seems to always return all columns in the table, not just what I specify. \r\n\r\n```python\r\nstuff = Table.query.filter_by(col_1='this')).options(load_only('col_1', 'col_2')).paginate(1, 10, False)\r\n```\r\nstuff.items this should return data with only two columns, col 1 and 2.\r\n\r\n### Actual Behavior\r\n\r\nstuff.items is returning all columns in the table.\r\n\r\n### Environment\r\n\r\n* Python version: 3.8.2\r\n* Flask-SQLAlchemy version:2.4.3\r\n* SQLAlchemy version:1.3.17\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/846", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/846/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/846/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/846", "id": 642727449, "node_id": "MDU6SXNzdWU2NDI3Mjc0NDk=", "number": 846, "title": "How can I reload the configuration of SQLAlchemy without restarting the service?", "user": {"login": "zc3945", "id": 32303201, "node_id": "MDQ6VXNlcjMyMzAzMjAx", "avatar_url": "https://avatars0.githubusercontent.com/u/32303201?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zc3945", "html_url": "https://github.com/zc3945", "followers_url": "https://api.github.com/users/zc3945/followers", "following_url": "https://api.github.com/users/zc3945/following{/other_user}", "gists_url": "https://api.github.com/users/zc3945/gists{/gist_id}", "starred_url": "https://api.github.com/users/zc3945/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zc3945/subscriptions", "organizations_url": "https://api.github.com/users/zc3945/orgs", "repos_url": "https://api.github.com/users/zc3945/repos", "events_url": "https://api.github.com/users/zc3945/events{/privacy}", "received_events_url": "https://api.github.com/users/zc3945/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-22T03:45:11Z", "updated_at": "2020-06-22T04:11:27Z", "closed_at": "2020-06-22T04:11:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "In some cases, mysql configuration will change. How can I automatically update the configuration of SQLalchemy in the Flask service without republishing the startup flask application?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/845", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/845/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/845/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/845/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/845", "id": 640856939, "node_id": "MDU6SXNzdWU2NDA4NTY5Mzk=", "number": 845, "title": "inserting into postgres array string array but gettin char array?", "user": {"login": "marianadsalgueiro", "id": 30151526, "node_id": "MDQ6VXNlcjMwMTUxNTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/30151526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marianadsalgueiro", "html_url": "https://github.com/marianadsalgueiro", "followers_url": "https://api.github.com/users/marianadsalgueiro/followers", "following_url": "https://api.github.com/users/marianadsalgueiro/following{/other_user}", "gists_url": "https://api.github.com/users/marianadsalgueiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/marianadsalgueiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marianadsalgueiro/subscriptions", "organizations_url": "https://api.github.com/users/marianadsalgueiro/orgs", "repos_url": "https://api.github.com/users/marianadsalgueiro/repos", "events_url": "https://api.github.com/users/marianadsalgueiro/events{/privacy}", "received_events_url": "https://api.github.com/users/marianadsalgueiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-18T02:22:45Z", "updated_at": "2020-06-23T13:53:14Z", "closed_at": "2020-06-23T13:53:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nIm trying to insert an array of phones into my User table. \r\n\r\n```python\r\n        usuario = Usuario(pk_email = form.email.data, nome = form.nome.data, senha = form.senha.data, telefone=form.telefone.data)\r\n\r\n        try:\r\n            db.session.add(usuario)\r\n            db.session.commit()\r\n```\r\nAnd inside form.telefone.data i have something like '{(21)11111-1111, (21)22222-2222, (21)33333-3333}'\r\n\r\n### Actual Behavior\r\n\r\n2020-06-17 22:48:39,667 INFO sqlalchemy.engine.base.Engine SELECT usuario.pk_email AS usuario_pk_email, usuario.senha AS usuario_senha, usuario.nome AS usuario_nome, usuario.telefone AS usuario_telefone, usuario.papel AS usuario_papel\r\nFROM usuario\r\nWHERE usuario.pk_email = %(pk_email_1)s\r\n LIMIT %(param_1)s\r\n2020-06-17 22:48:39,668 INFO sqlalchemy.engine.base.Engine {'pk_email_1': 'teste20@teste.com', 'param_1': 1}\r\n2020-06-17 22:48:39,702 INFO sqlalchemy.engine.base.Engine INSERT INTO usuario (pk_email, senha, nome, telefone, papel) VALUES (%(pk_email)s, %(senha)s, %(nome)s, %(telefone)s, %(papel)s)\r\n2020-06-17 22:48:39,702 INFO sqlalchemy.engine.base.Engine {'pk_email': 'teste20@teste.com', 'senha': 'Corote10', 'nome': 'Teste20', 'telefone': ['{', '\"', '(', '2', '1', ')', '1', '1', '1', '1', '1', '-', '1', '1', '1', '1', '\"', ',', ' ', '\"', '(', '2', '1', ')', '2', '2', '2', '2', '2', '-', '2', '2', '2', '2', '\"', ',', ' ', '\"', '(', '2', '1', ')', '3', '3', '3', '3', '3', '-', '3', '3', '3', '3', '}', '\"', '}'], 'papel': None}\r\n2020-06-17 22:48:39,720 INFO sqlalchemy.engine.base.Engine COMMIT\r\na\r\n127.0.0.1 - - [17/Jun/2020 22:48:39] \"\u001b[32mPOST /register HTTP/1.1\u001b[0m\" 302 -\r\n127.0.0.1 - - [17/Jun/2020 22:48:39] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\r\n127.0.0.1 - - [17/Jun/2020 22:48:39] \"\u001b[37mGET /static/css/style.css HTTP/1.1\u001b[0m\" 200 -\r\n127.0.0.1 - - [17/Jun/2020 22:48:40] \"\u001b[37mGET /static/img/logo-rodape.png HTTP/1.1\u001b[0m\" 200 -\r\n127.0.0.1 - - [17/Jun/2020 23:14:49] \"\u001b[37mGET / HTTP/1.1\u001b[0m\" 200 -\r\n\r\nI dont understand why is it turning a string array into a char array???? \r\n\r\n### Environment\r\n\r\n* Python version: Python 3.8.3\r\n* Flask-SQLAlchemy version: Flask-SQLAlchemy==2.4.3\r\n* SQLAlchemy version: SQLAlchemy==1.3.17\r\n\r\nThank you in advance!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/844", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/844/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/844/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/844/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/844", "id": 640742471, "node_id": "MDU6SXNzdWU2NDA3NDI0NzE=", "number": 844, "title": "How to set autoincrement value from 10000", "user": {"login": "shivgana", "id": 51191342, "node_id": "MDQ6VXNlcjUxMTkxMzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/51191342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shivgana", "html_url": "https://github.com/shivgana", "followers_url": "https://api.github.com/users/shivgana/followers", "following_url": "https://api.github.com/users/shivgana/following{/other_user}", "gists_url": "https://api.github.com/users/shivgana/gists{/gist_id}", "starred_url": "https://api.github.com/users/shivgana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shivgana/subscriptions", "organizations_url": "https://api.github.com/users/shivgana/orgs", "repos_url": "https://api.github.com/users/shivgana/repos", "events_url": "https://api.github.com/users/shivgana/events{/privacy}", "received_events_url": "https://api.github.com/users/shivgana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-17T21:06:56Z", "updated_at": "2020-06-17T21:12:11Z", "closed_at": "2020-06-17T21:08:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "as default database is sqlite3.\r\ni want to set autoincrement value to 10000. So started browsing for solution, but no solution worked.\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/843", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/843/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/843/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/843/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/843", "id": 638812033, "node_id": "MDU6SXNzdWU2Mzg4MTIwMzM=", "number": 843, "title": "AttributeError", "user": {"login": "Rajendro1", "id": 45881512, "node_id": "MDQ6VXNlcjQ1ODgxNTEy", "avatar_url": "https://avatars1.githubusercontent.com/u/45881512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rajendro1", "html_url": "https://github.com/Rajendro1", "followers_url": "https://api.github.com/users/Rajendro1/followers", "following_url": "https://api.github.com/users/Rajendro1/following{/other_user}", "gists_url": "https://api.github.com/users/Rajendro1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rajendro1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rajendro1/subscriptions", "organizations_url": "https://api.github.com/users/Rajendro1/orgs", "repos_url": "https://api.github.com/users/Rajendro1/repos", "events_url": "https://api.github.com/users/Rajendro1/events{/privacy}", "received_events_url": "https://api.github.com/users/Rajendro1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-15T12:25:46Z", "updated_at": "2020-06-15T12:27:10Z", "closed_at": "2020-06-15T12:26:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 2301, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 2287, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 1733, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 2284, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 1807, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 1710, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\_compat.py\", line 35, in reraise\r\n    raise value\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 1805, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask\\app.py\", line 1791, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\flaskblog\\main\\routes.py\", line 11, in home\r\n    posts = Post.query.order_by(Post.date_posted.desc()).paginate(page=page, per_page=5)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 516, in __get__\r\n    return type.query_class(mapper, session=self.sa.session())\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\sqlalchemy\\orm\\scoping.py\", line 78, in __call__\r\n    return self.registry()\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\sqlalchemy\\util\\_collections.py\", line 1022, in __call__\r\n    return self.registry.setdefault(key, self.createfunc())\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 3286, in __call__\r\n    return self.class_(**local_kw)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 145, in __init__\r\n    bind = options.pop('bind', None) or db.engine\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 880, in engine\r\n    return self.get_engine()\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 899, in get_engine\r\n    return connector.get_engine()\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 558, in get_engine\r\n    self._sa.apply_driver_hacks(self._app, info, options)\r\n  File \"E:\\Python3.7\\Project\\Web Development\\Flask\\venv\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 833, in apply_driver_hacks\r\n    if info.drivername.startswith('mysql'):\r\nAttributeError: 'NoneType' object has no attribute 'drivername'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/841", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/841/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/841/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/841/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/841", "id": 638532266, "node_id": "MDU6SXNzdWU2Mzg1MzIyNjY=", "number": 841, "title": "\u00b7", "user": {"login": "jwjyy", "id": 36369859, "node_id": "MDQ6VXNlcjM2MzY5ODU5", "avatar_url": "https://avatars0.githubusercontent.com/u/36369859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwjyy", "html_url": "https://github.com/jwjyy", "followers_url": "https://api.github.com/users/jwjyy/followers", "following_url": "https://api.github.com/users/jwjyy/following{/other_user}", "gists_url": "https://api.github.com/users/jwjyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwjyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwjyy/subscriptions", "organizations_url": "https://api.github.com/users/jwjyy/orgs", "repos_url": "https://api.github.com/users/jwjyy/repos", "events_url": "https://api.github.com/users/jwjyy/events{/privacy}", "received_events_url": "https://api.github.com/users/jwjyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-15T04:28:28Z", "updated_at": "2020-06-18T12:45:41Z", "closed_at": "2020-06-15T12:59:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "\u00b7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/840", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/840/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/840/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/840/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/840", "id": 637934130, "node_id": "MDU6SXNzdWU2Mzc5MzQxMzA=", "number": 840, "title": "\u00b7", "user": {"login": "jwjyy", "id": 36369859, "node_id": "MDQ6VXNlcjM2MzY5ODU5", "avatar_url": "https://avatars0.githubusercontent.com/u/36369859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwjyy", "html_url": "https://github.com/jwjyy", "followers_url": "https://api.github.com/users/jwjyy/followers", "following_url": "https://api.github.com/users/jwjyy/following{/other_user}", "gists_url": "https://api.github.com/users/jwjyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwjyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwjyy/subscriptions", "organizations_url": "https://api.github.com/users/jwjyy/orgs", "repos_url": "https://api.github.com/users/jwjyy/repos", "events_url": "https://api.github.com/users/jwjyy/events{/privacy}", "received_events_url": "https://api.github.com/users/jwjyy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T18:31:12Z", "updated_at": "2020-06-18T12:48:14Z", "closed_at": "2020-06-12T18:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "\u00b7", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/833", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/833/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/833/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/833/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/833", "id": 630465694, "node_id": "MDU6SXNzdWU2MzA0NjU2OTQ=", "number": 833, "title": "flask-sqlalchemy session close seems not work", "user": {"login": "merry-swjung", "id": 20704898, "node_id": "MDQ6VXNlcjIwNzA0ODk4", "avatar_url": "https://avatars2.githubusercontent.com/u/20704898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/merry-swjung", "html_url": "https://github.com/merry-swjung", "followers_url": "https://api.github.com/users/merry-swjung/followers", "following_url": "https://api.github.com/users/merry-swjung/following{/other_user}", "gists_url": "https://api.github.com/users/merry-swjung/gists{/gist_id}", "starred_url": "https://api.github.com/users/merry-swjung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/merry-swjung/subscriptions", "organizations_url": "https://api.github.com/users/merry-swjung/orgs", "repos_url": "https://api.github.com/users/merry-swjung/repos", "events_url": "https://api.github.com/users/merry-swjung/events{/privacy}", "received_events_url": "https://api.github.com/users/merry-swjung/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T02:39:37Z", "updated_at": "2020-06-04T03:05:33Z", "closed_at": "2020-06-04T03:05:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a question about flask-sqlalchemy, precisely about sqlalchemy. \r\nWhen executing one function, processes are recorded in database. \r\nWhenever after recording db, I added db.session.close() to get session back to pool. \r\nbut while function is executed, I cannot connect to database. why is it happening ?\r\n\r\n    def func(self):\r\n        # stage 1:\r\n        self.sub_func1() ->update process to db\r\n\r\n        # stage 2:\r\n        self.sub_func2() ->update process to db\r\n\r\n        # stage 3:\r\n        self.sub_func3() ->update process to db\r\n\r\n        # stage 4:\r\n        self.sub_func4() ->update process to db\r\n\r\n        return result", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/820", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/820/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/820/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/820/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/820", "id": 619236458, "node_id": "MDU6SXNzdWU2MTkyMzY0NTg=", "number": 820, "title": "README example throws error", "user": {"login": "rafaellehmkuhl", "id": 6551040, "node_id": "MDQ6VXNlcjY1NTEwNDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/6551040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafaellehmkuhl", "html_url": "https://github.com/rafaellehmkuhl", "followers_url": "https://api.github.com/users/rafaellehmkuhl/followers", "following_url": "https://api.github.com/users/rafaellehmkuhl/following{/other_user}", "gists_url": "https://api.github.com/users/rafaellehmkuhl/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafaellehmkuhl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafaellehmkuhl/subscriptions", "organizations_url": "https://api.github.com/users/rafaellehmkuhl/orgs", "repos_url": "https://api.github.com/users/rafaellehmkuhl/repos", "events_url": "https://api.github.com/users/rafaellehmkuhl/events{/privacy}", "received_events_url": "https://api.github.com/users/rafaellehmkuhl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-15T20:37:49Z", "updated_at": "2020-05-15T21:47:17Z", "closed_at": "2020-05-15T20:59:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I try to run the example from the repository README, it throws this error:\r\n\r\n> python3 app.py/home/username/.local/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:834: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.\r\n>   warnings.warn(FSADeprecationWarning(\r\n> Traceback (most recent call last):\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1283, in _execute_context\r\n>     self.dialect.do_execute(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 590, in do_execute\r\n>     cursor.execute(statement, parameters)\r\n> sqlite3.OperationalError: no such table: user\r\n> \r\n> The above exception was the direct cause of the following exception:\r\n> \r\n> Traceback (most recent call last):\r\n>   File \"app.py\", line 16, in <module>\r\n>     db.session.commit()\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py\", line 163, in do\r\n>     return getattr(self.registry(), name)(*args, **kwargs)\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 1042, in commit\r\n>     self.transaction.commit()\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 504, in commit\r\n>     self._prepare_impl()\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 483, in _prepare_impl\r\n>     self.session.flush()\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2523, in flush\r\n>     self._flush(objects)\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2664, in _flush\r\n>     transaction.rollback(_capture_exception=True)\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py\", line 68, in __exit__\r\n>     compat.raise_(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n>     raise exception\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/session.py\", line 2624, in _flush\r\n>     flush_context.execute()\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py\", line 422, in execute\r\n>     rec.execute(self)\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py\", line 586, in execute\r\n>     persistence.save_obj(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py\", line 239, in save_obj\r\n>     _emit_insert_statements(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py\", line 1135, in _emit_insert_statements\r\n>     result = cached_connections[connection].execute(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1020, in execute\r\n>     return meth(self, multiparams, params)\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/sql/elements.py\", line 298, in _execute_on_connection\r\n>     return connection._execute_clauseelement(self, multiparams, params)\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1133, in _execute_clauseelement\r\n>     ret = self._execute_context(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1323, in _execute_context\r\n>     self._handle_dbapi_exception(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1517, in _handle_dbapi_exception\r\n>     util.raise_(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/util/compat.py\", line 178, in raise_\r\n>     raise exception\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/base.py\", line 1283, in _execute_context\r\n>     self.dialect.do_execute(\r\n>   File \"/home/username/.local/lib/python3.8/site-packages/sqlalchemy/engine/default.py\", line 590, in do_execute\r\n>     cursor.execute(statement, parameters)\r\n> sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: user\r\n> [SQL: INSERT INTO user (username, email) VALUES (?, ?)]\r\n> [parameters: ('Flask', 'example@example.com')]\r\n> (Background on this error at: http://sqlalche.me/e/e3q8)\r\n\r\nIs it expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/818", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/818/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/818/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/818/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/818", "id": 615202190, "node_id": "MDU6SXNzdWU2MTUyMDIxOTA=", "number": 818, "title": "TypeError when running example at documentation ", "user": {"login": "ahmedmunir", "id": 20128982, "node_id": "MDQ6VXNlcjIwMTI4OTgy", "avatar_url": "https://avatars0.githubusercontent.com/u/20128982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedmunir", "html_url": "https://github.com/ahmedmunir", "followers_url": "https://api.github.com/users/ahmedmunir/followers", "following_url": "https://api.github.com/users/ahmedmunir/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedmunir/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedmunir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedmunir/subscriptions", "organizations_url": "https://api.github.com/users/ahmedmunir/orgs", "repos_url": "https://api.github.com/users/ahmedmunir/repos", "events_url": "https://api.github.com/users/ahmedmunir/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedmunir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-09T15:39:33Z", "updated_at": "2020-05-09T20:07:51Z", "closed_at": "2020-05-09T20:07:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n---\r\n\r\n### Expected Behavior\r\ni paste the example code from documentation to try flask-sqlalchemy and i face that problem:\r\n\r\n```python\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\napp = Flask(__name__)\r\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"postgresql://postgres:brockliden20@localhost:5432/postgres\"\r\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\r\ndb = SQLAlchemy()\r\n\r\n\r\nclass User(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String, unique=True, nullable=False)\r\n    email = db.Column(db.String, unique=True, nullable=False)\r\n\r\n\r\ndb.session.add(User(username=\"Flask\", email=\"example@example.com\"))\r\ndb.session.commit()\r\n\r\nusers = User.query.all()\r\n```\r\n\r\n### Actual Behavior\r\n\r\ni got an error when run python test.py\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n\r\n  File \"C:\\Users\\abomu\\Desktop\\py\\test.py\", line 15, in <module>\r\n    db = SQLAlchemy()\r\n\r\n  File \"C:\\Users\\abomu\\anaconda3\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 715, in __init__\r\n    self.session = self.create_scoped_session(session_options)\r\n\r\n  File \"C:\\Users\\abomu\\anaconda3\\lib\\site-packages\\flask_sqlalchemy\\__init__.py\", line 748, in create_scoped_session\r\n    scopefunc = options.pop('scopefunc', _app_ctx_stack.__ident_func__)\r\n\r\n  File \"C:\\Users\\abomu\\anaconda3\\lib\\site-packages\\werkzeug\\local.py\", line 126, in __ident_func__\r\n\r\nTypeError: descriptor '__ident_func__' for 'Local' objects doesn't apply to 'Local' object\r\n```\r\n\r\n### Environment\r\n\r\n* Operating system: Windows 10\r\n* Python version: 3.7.6\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version: 1.3.13\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/817", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/817/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/817/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/817/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/817", "id": 610798078, "node_id": "MDU6SXNzdWU2MTA3OTgwNzg=", "number": 817, "title": "Column default value is not working", "user": {"login": "FatehDzIt", "id": 42697678, "node_id": "MDQ6VXNlcjQyNjk3Njc4", "avatar_url": "https://avatars0.githubusercontent.com/u/42697678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FatehDzIt", "html_url": "https://github.com/FatehDzIt", "followers_url": "https://api.github.com/users/FatehDzIt/followers", "following_url": "https://api.github.com/users/FatehDzIt/following{/other_user}", "gists_url": "https://api.github.com/users/FatehDzIt/gists{/gist_id}", "starred_url": "https://api.github.com/users/FatehDzIt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FatehDzIt/subscriptions", "organizations_url": "https://api.github.com/users/FatehDzIt/orgs", "repos_url": "https://api.github.com/users/FatehDzIt/repos", "events_url": "https://api.github.com/users/FatehDzIt/events{/privacy}", "received_events_url": "https://api.github.com/users/FatehDzIt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-01T15:06:40Z", "updated_at": "2020-05-01T15:56:01Z", "closed_at": "2020-05-01T15:56:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\na default value should added to the record\r\n\r\n\r\n```python\r\nclass User(db.Model, UserMixin):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(20), unique=True, nullable=False)\r\n    email = db.Column(db.String(20), unique=True, nullable=False)\r\n    role = db.Column(db.String(10) , nullable=False, default=Roles.admin)\r\n    avatar = db.Column(db.String(50), nullable=False,  default=\"default.jpg\")\r\n    password = db.Column(db.String(60), nullable=False)\r\n    created_at  = db.Column(db.DateTime,  default=db.func.current_timestamp())\r\n    updated_at = db.Column(db.DateTime,  default=db.func.current_timestamp(),\r\n                                       onupdate=db.func.current_timestamp())\r\n\r\n\r\n    def __repr__(self):\r\n        return self.username\r\n```\r\n\r\n### Actual Behavior\r\n\r\nwhen user is added  avatar and  role are empty\r\n\r\n\r\n\r\n### Environment\r\n\r\n* Operating system: Windows 10 1903\r\n* Python version:3.8.1\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version:1.3.16\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/815", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/815/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/815/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/815/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/815", "id": 607838497, "node_id": "MDU6SXNzdWU2MDc4Mzg0OTc=", "number": 815, "title": "Needless import to has_inherited_table in Customizing -> Model Class code example", "user": {"login": "karolpawlowski", "id": 2912430, "node_id": "MDQ6VXNlcjI5MTI0MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/2912430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/karolpawlowski", "html_url": "https://github.com/karolpawlowski", "followers_url": "https://api.github.com/users/karolpawlowski/followers", "following_url": "https://api.github.com/users/karolpawlowski/following{/other_user}", "gists_url": "https://api.github.com/users/karolpawlowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/karolpawlowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/karolpawlowski/subscriptions", "organizations_url": "https://api.github.com/users/karolpawlowski/orgs", "repos_url": "https://api.github.com/users/karolpawlowski/repos", "events_url": "https://api.github.com/users/karolpawlowski/events{/privacy}", "received_events_url": "https://api.github.com/users/karolpawlowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T20:39:19Z", "updated_at": "2020-05-26T04:13:33Z", "closed_at": "2020-05-26T04:13:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n### Expected Behavior\r\n\r\nExample in flask-sqlalchemy/docs/customizing.rst Model section shouldn't contain needless imports\r\n\r\n### Actual Behavior\r\n\r\nExample in flask-sqlalchemy/docs/customizing.rst Model section contains needless import to has_inherited_table which can cause confusion\r\n\r\n```python\r\nfrom sqlalchemy.ext.declarative import declared_attr, has_inherited_table\r\n```\r\n\r\n### Environment\r\n\r\n* Flask-SQLAlchemy version: 706982b (commit id when reported)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/813", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/813/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/813/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/813/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/813", "id": 602467265, "node_id": "MDU6SXNzdWU2MDI0NjcyNjU=", "number": 813, "title": "SQLAlchemy raises error when inserting Postgres array of enum column", "user": {"login": "HamishLacmane", "id": 16271451, "node_id": "MDQ6VXNlcjE2MjcxNDUx", "avatar_url": "https://avatars2.githubusercontent.com/u/16271451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HamishLacmane", "html_url": "https://github.com/HamishLacmane", "followers_url": "https://api.github.com/users/HamishLacmane/followers", "following_url": "https://api.github.com/users/HamishLacmane/following{/other_user}", "gists_url": "https://api.github.com/users/HamishLacmane/gists{/gist_id}", "starred_url": "https://api.github.com/users/HamishLacmane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HamishLacmane/subscriptions", "organizations_url": "https://api.github.com/users/HamishLacmane/orgs", "repos_url": "https://api.github.com/users/HamishLacmane/repos", "events_url": "https://api.github.com/users/HamishLacmane/events{/privacy}", "received_events_url": "https://api.github.com/users/HamishLacmane/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-18T14:03:11Z", "updated_at": "2020-04-18T15:52:50Z", "closed_at": "2020-04-18T15:52:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI opened the following with Expected Behaviour, Actual behaviour, Stacktrace, MVCE, versions and all info on stackoverflow but haven't got a response. I did see a developer of this did edit my post to make it more suitable and jsut want to bring this potential bug to your attention :) \r\nhttps://stackoverflow.com/questions/61224799/sqlalchemy-raises-error-when-inserting-postgres-array-of-enum-column \r\n\r\n* Python version: 3.8.2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/809", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/809/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/809/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/809/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/809", "id": 585416128, "node_id": "MDU6SXNzdWU1ODU0MTYxMjg=", "number": 809, "title": "Creating custom data type (Flask-Form instance) for data type in db.Column.", "user": {"login": "AriG0934", "id": 40582177, "node_id": "MDQ6VXNlcjQwNTgyMTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/40582177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AriG0934", "html_url": "https://github.com/AriG0934", "followers_url": "https://api.github.com/users/AriG0934/followers", "following_url": "https://api.github.com/users/AriG0934/following{/other_user}", "gists_url": "https://api.github.com/users/AriG0934/gists{/gist_id}", "starred_url": "https://api.github.com/users/AriG0934/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AriG0934/subscriptions", "organizations_url": "https://api.github.com/users/AriG0934/orgs", "repos_url": "https://api.github.com/users/AriG0934/repos", "events_url": "https://api.github.com/users/AriG0934/events{/privacy}", "received_events_url": "https://api.github.com/users/AriG0934/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-21T02:56:51Z", "updated_at": "2020-08-17T22:36:36Z", "closed_at": "2020-03-21T04:40:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to create a custom data type/structure that is passed through ```db.Column()```? I want to have a column that creates a flask_form instance for the associated registered user.  \r\n\r\n---\r\n\r\n### Expected Behavior\r\n\r\nFrom https://docs.sqlalchemy.org/en/13/core/custom_types.html#creating-new-types I found information to create types in sqlalchemy \r\n```python\r\n\r\nfrom flask_wtf import FlaskForm\r\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField, IntegerField\r\nfrom wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError\r\n\r\nimport sqlalchemy.types as types\r\n\r\nclass MyForm(FlaskForm):\r\n    name = StringField('Name:', validators=[DataRequired(), Length(min=2, max=20)])\r\n    submit = SubmitField('Sign In')\r\n\r\nclass SurveyForm(types.UserDefinedType):\r\n    def __init__(self):\r\n        self.survey_form = MyForm()\r\n\r\nclass User(db.Model, UserMixin):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    form = db.Column(db.SurveyForm(), nullable=False)\r\n```\r\nAnd when I create an instance of the User:\r\n```python\r\nuser = User(form=MyForm())\r\ndb.session.add(user)\r\ndb.session.commit()\r\n```\r\n\r\nAnd when I need to access/pass the form in routes:\r\n```python\r\n@app.route('/')\r\ndef index():\r\n    user = User.query.get(1)\r\n    form = user.form\r\n    return render_template(url_for('index.html'), form=form)\r\n```\r\n\r\n### Actual Behavior\r\n\r\nWhen trying the above code I get:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"run.py\", line 1, in <module>\r\n    from app import app, db\r\n  File \"/c/Users/arigr/code/text/app/__init__.py\", line 21, in <module>\r\n    from app import routes\r\n  File \"/c/Users/arigr/code/text/app/routes.py\", line 3, in <module>\r\n    from app.forms import SurveyForm, LoginForm, RegistrationForm, UpdateAccountForm\r\n  File \"/c/Users/arigr/code/text/app/forms.py\", line 5, in <module>\r\n    from app.models import User\r\n  File \"/c/Users/arigr/code/text/app/models.py\", line 38, in <module>\r\n    class User(db.Model, UserMixin):\r\n  File \"/c/Users/arigr/code/text/app/models.py\", line 47, in User\r\n    form = db.Column(SurveyForm(), nullable=False)\r\n  File \"/c/Users/arigr/code/text/app/models.py\", line 23, in __init__\r\n    self.survey_form = MyForm()\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/wtforms/form.py\", line 212, in __call__\r\n    return type.__call__(cls, *args, **kwargs)\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/flask_wtf/form.py\", line 87, in __init__\r\n    super(FlaskForm, self).__init__(formdata=formdata, **kwargs)\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/wtforms/form.py\", line 272, in __init__\r\n    super(Form, self).__init__(self._unbound_fields, meta=meta_obj, prefix=prefix)\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/wtforms/form.py\", line 44, in __init__\r\n    translations = self._get_translations()\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/wtforms/form.py\", line 85, in _get_translations\r\n    return self.meta.get_translations(self)\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/flask_wtf/form.py\", line 71, in get_translations\r\n    if not current_app.config.get('WTF_I18N_ENABLED', True):\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/werkzeug/local.py\", line 347, in __getattr__\r\n    return getattr(self._get_current_object(), name)\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/werkzeug/local.py\", line 306, in _get_current_object\r\n    return self.__local()\r\n  File \"/c/Users/arigr/code/text/.venv/lib/python3.6/site-packages/flask/globals.py\", line 52, in _find_app\r\n    raise RuntimeError(_app_ctx_err_msg)\r\nRuntimeError: Working outside of application context.\r\n```\r\n\r\n### Environment\r\n\r\n* Operating system: WSL Ubuntu Subsystem in Windows\r\n* Python version: Python 3.6.8\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version: 1.3.15\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/807", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/807/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/807/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/807/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/807", "id": 571064591, "node_id": "MDU6SXNzdWU1NzEwNjQ1OTE=", "number": 807, "title": "There are two instances of different models. If one instance executes db.session.commit (), the other instance immediately print (obj .__ dict__) will be empty.", "user": {"login": "pcloth", "id": 18551791, "node_id": "MDQ6VXNlcjE4NTUxNzkx", "avatar_url": "https://avatars1.githubusercontent.com/u/18551791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcloth", "html_url": "https://github.com/pcloth", "followers_url": "https://api.github.com/users/pcloth/followers", "following_url": "https://api.github.com/users/pcloth/following{/other_user}", "gists_url": "https://api.github.com/users/pcloth/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcloth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcloth/subscriptions", "organizations_url": "https://api.github.com/users/pcloth/orgs", "repos_url": "https://api.github.com/users/pcloth/repos", "events_url": "https://api.github.com/users/pcloth/events{/privacy}", "received_events_url": "https://api.github.com/users/pcloth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-26T04:40:11Z", "updated_at": "2020-02-26T05:00:19Z", "closed_at": "2020-02-26T04:51:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "---\r\n\r\n### Expected behavior\r\nmodel .__ dict__ Fields where data can be obtained\r\n\r\n```sh\r\nroot@c57f84919524:/webroot# python manage.py shell\r\n>>> from app.models import *\r\n>>> u = User.query.filter().first()\r\n>>> img = ProjectImages.query.filter().first()\r\n>>> print(img.__dict__)\r\n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x7f5b40df7040>, 'id': 1, 'created_at': datetime.datetime(2020, 2, 20, 21, 34, 14), 'image': 'https://cdn.yttys.com/item_1520582553119_0649002690.jpg', 'project_id': 1, 'delete_flag': 0, 'sort': 1}\r\n>>> from app import db\r\n>>> db.session.add(u)\r\n>>> db.session.commit()\r\n>>> print(img.__dict__)\r\n{'_sa_instance_state': <sqlalchemy.orm.state.InstanceState object at 0x7f5b40df7040>}\r\n>>> \r\n```\r\n\r\n### Actual behavior\r\n```python\r\nobj = model.query.filter().first()\r\n\r\nother = model2.query.filter().first()\r\n\r\ndb.session.add(other)\r\n\r\ndb.session.commit()\r\n\r\nprint(obj .__ dict__)\r\n```\r\nThe final output is:\r\n```\r\ndict_keys (['_ sa_instance_state'])\r\n```\r\n\r\nThere are two instances of different models. If one instance executes db.session.commit (), the other instance immediately print (obj .__ dict__) will be empty.\r\n\r\n### surroundings\r\n\r\n* operating system:\r\n* Python version: 3.8.1\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version: 1.3.13", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/806", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/806/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/806/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/806", "id": 570025959, "node_id": "MDU6SXNzdWU1NzAwMjU5NTk=", "number": 806, "title": "not able to connect to MSSQL database with bind , db owner is not working with schema . access denied error is occuring  ", "user": {"login": "bharatpk0", "id": 30047987, "node_id": "MDQ6VXNlcjMwMDQ3OTg3", "avatar_url": "https://avatars3.githubusercontent.com/u/30047987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bharatpk0", "html_url": "https://github.com/bharatpk0", "followers_url": "https://api.github.com/users/bharatpk0/followers", "following_url": "https://api.github.com/users/bharatpk0/following{/other_user}", "gists_url": "https://api.github.com/users/bharatpk0/gists{/gist_id}", "starred_url": "https://api.github.com/users/bharatpk0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bharatpk0/subscriptions", "organizations_url": "https://api.github.com/users/bharatpk0/orgs", "repos_url": "https://api.github.com/users/bharatpk0/repos", "events_url": "https://api.github.com/users/bharatpk0/events{/privacy}", "received_events_url": "https://api.github.com/users/bharatpk0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-24T18:01:21Z", "updated_at": "2020-02-24T21:07:43Z", "closed_at": "2020-02-24T21:07:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "my Bind connection string for multiple databse \r\n\r\n{\"DB_EDW_REP\":\"mssql+pyodbc://user:password@12iVe@servername/EDW_REP?driver=SQL+Server\"}\r\n\r\nmy model \r\n\r\n\r\nclass OneCaseTask(db.Model):\r\n    __bind_key__  = 'DB_EDW_REP'\r\n    __tablename__  = \"TASK_BASE\"\r\n    __table_args__ = {'schema': \"ONE_CASE\"} # owner\r\n    CASE_ID = db.Column(db.Integer, primary_key=True)\r\n    TASK_ID = db.Column(db.Integer)\r\n    OVRG_AMT_TOTAL = db.Column(db.Float(7,2))\r\n\r\n    def __init__(self, name, price, store_id):\r\n        self.CASE_ID = CASE_ID\r\n        self.TASK_ID = TASK_ID\r\n        self.OVRG_AMT_TOTAL = OVRG_AMT_TOTAL\r\n\r\n\r\n\r\nplease help me ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/802", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/802/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/802/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/802/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/802", "id": 560197716, "node_id": "MDU6SXNzdWU1NjAxOTc3MTY=", "number": 802, "title": "Exceptions during DB Server reboot - no reconnect", "user": {"login": "caliph007", "id": 743333, "node_id": "MDQ6VXNlcjc0MzMzMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/743333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caliph007", "html_url": "https://github.com/caliph007", "followers_url": "https://api.github.com/users/caliph007/followers", "following_url": "https://api.github.com/users/caliph007/following{/other_user}", "gists_url": "https://api.github.com/users/caliph007/gists{/gist_id}", "starred_url": "https://api.github.com/users/caliph007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caliph007/subscriptions", "organizations_url": "https://api.github.com/users/caliph007/orgs", "repos_url": "https://api.github.com/users/caliph007/repos", "events_url": "https://api.github.com/users/caliph007/events{/privacy}", "received_events_url": "https://api.github.com/users/caliph007/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-05T07:49:06Z", "updated_at": "2020-05-26T16:05:47Z", "closed_at": "2020-05-26T16:05:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a standard setup of flask_sqlalchemy and an AWS RDS with postgresql.\r\n\r\nI initialize the DB adapter the standard way:\r\n\r\n```\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask import Flask\r\n\r\napp = Flask(__name__)\r\ndb = SQLAlchemy()\r\n\r\ndb.init_app(app)\r\n\r\nclass Example(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\r\n    username = db.Column(db.String(256))\r\n```\r\n\r\nIf I reboot the RDS server and a SELECT starts during reboot I get:\r\n\r\n> psycopg2.OperationalError: terminating connection due to administrator command SSL connection has been closed unexpectedly\r\n> \r\n> The above exception was the direct cause of the following exception:\r\n> \r\n> sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) terminating connection due to administrator command SSL connection has been closed unexpectedly\r\n\r\nThat I understand. The DB is unavailable.\r\n\r\nBUT: After that the application cannot recover from the situation because:\r\n\r\n> sqlalchemy.exc.InvalidRequestError: Can't reconnect until invalid transaction is rolled back\r\n> \r\n> The above exception was the direct cause of the following exception: sqlalchemy.exc.StatementError:\r\n> \r\n> (sqlalchemy.exc.InvalidRequestError) Can't reconnect until invalid transaction is rolled back\r\n\r\nI understand the application throws exceptions during reboot.\r\n\r\nBut what puzzles me that it never recovers.\r\n\r\nThere is no write transaction to the DB! I don't understand what rollback the exception is describing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/801", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/801/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/801/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/801/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/801", "id": 558550710, "node_id": "MDU6SXNzdWU1NTg1NTA3MTA=", "number": 801, "title": "Query are sending INSERT request with back_propagate", "user": {"login": "Noezor", "id": 8218350, "node_id": "MDQ6VXNlcjgyMTgzNTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8218350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Noezor", "html_url": "https://github.com/Noezor", "followers_url": "https://api.github.com/users/Noezor/followers", "following_url": "https://api.github.com/users/Noezor/following{/other_user}", "gists_url": "https://api.github.com/users/Noezor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Noezor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Noezor/subscriptions", "organizations_url": "https://api.github.com/users/Noezor/orgs", "repos_url": "https://api.github.com/users/Noezor/repos", "events_url": "https://api.github.com/users/Noezor/events{/privacy}", "received_events_url": "https://api.github.com/users/Noezor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-01T14:49:13Z", "updated_at": "2020-02-01T14:51:05Z", "closed_at": "2020-02-01T14:51:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am not sure this is a bug or not, but it seems strange that launching a query would send an INSERT request.\r\n\r\nHere is a repository to replicate the bug. https://github.com/Noezor/example_flask_sqlalchemy_bug/\r\n\r\n### Expected Behavior\r\n\r\nFor the models :\r\n\r\n```python\r\nfrom config import db\r\n\r\nclass Parent(db.Model):\r\n    __tablename__ = \"parent\"\r\n\r\n    id = db.Column(db.Integer(), primary_key  = True)\r\n    name = db.Column(db.String, unique = True)\r\n\r\n    children = db.relationship(\"Child\", back_populates=\"parent\")\r\n\r\nclass Child(db.Model):\r\n    __tablename__ = \"child\"\r\n\r\n    id = db.Column(db.Integer(), primary_key = True)\r\n    \r\n    name = db.Column(db.String(32), unique = True)\r\n    \r\n    parent_id = db.Column(db.Integer, db.ForeignKey(\"parent.id\"))\r\n    parent = db.relationship(\"Parent\", back_populates=\"children\")\r\n\r\n```\r\nAnd now the testscript.\r\n\r\n```python\r\nfrom config import db\r\nfrom model import Child, Parent\r\n\r\nparent = Parent(name='John')\r\nif not Parent.query.filter(Parent.name == parent.name).one_or_none():\r\n    db.session.add(parent)\r\n    db.session.commit()\r\nelse :\r\n    parent = Parent.query.filter(Parent.name == parent.name).one_or_none()\r\n\r\nchild1 = Child(name=\"Toto\",parent = parent)\r\n\r\nif not Child.query.filter(Child.name == \"Toto\").one_or_none() :\r\n    db.session.add(child1)\r\n    db.session.commit()\r\nelse :\r\n    child1 = Child.query.filter(Child.name == \"Toto\").one_or_none()\r\n\r\nprint(\"success\")\r\n```\r\n At first launch, the problem should work fine. At second launch, once the database is populated, there should not be problem either as the query will detect that the database already contains added elements.\r\n\r\n### Actual Behavior\r\n\r\nAt first launch, everything is working fine. On the other hand, at second launch, it seems that line \"if not Child.query.filter(Child.name == \"Toto\").one_or_none() :\" is sending an INSERT request.\r\n\r\n```pytb\r\n2020-02-01 15:23:28,552 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1\r\n2020-02-01 15:23:28,552 INFO sqlalchemy.engine.base.Engine ()\r\n2020-02-01 15:23:28,553 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1\r\n2020-02-01 15:23:28,554 INFO sqlalchemy.engine.base.Engine ()\r\n2020-02-01 15:23:28,555 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)\r\n2020-02-01 15:23:28,556 INFO sqlalchemy.engine.base.Engine SELECT parent.id AS parent_id, parent.name AS parent_name \r\nFROM parent \r\nWHERE parent.name = ?\r\n2020-02-01 15:23:28,557 INFO sqlalchemy.engine.base.Engine ('John',)\r\n2020-02-01 15:23:28,560 INFO sqlalchemy.engine.base.Engine SELECT parent.id AS parent_id, parent.name AS parent_name \r\nFROM parent \r\nWHERE parent.name = ?\r\n2020-02-01 15:23:28,560 INFO sqlalchemy.engine.base.Engine ('John',)\r\n**2020-02-01 15:23:28,567 INFO sqlalchemy.engine.base.Engine INSERT INTO child (name, parent_id) VALUES (?, ?)**\r\n2020-02-01 15:23:28,568 INFO sqlalchemy.engine.base.Engine ('Toto', 1)\r\n2020-02-01 15:23:28,569 INFO sqlalchemy.engine.base.Engine ROLLBACK\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/base.py\", line 1182, in _execute_context\r\n    context)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/default.py\", line 470, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlite3.IntegrityError: UNIQUE constraint failed: child.name\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/pionn/.vscode-insiders/extensions/ms-python.python-2020.1.58038/pythonFiles/ptvsd_launcher.py\", line 43, in <module>\r\n    main(ptvsdArgs)\r\n  File \"/home/pionn/.vscode-insiders/extensions/ms-python.python-2020.1.58038/pythonFiles/lib/python/old_ptvsd/ptvsd/__main__.py\", line 432, in main\r\n    run()\r\n  File \"/home/pionn/.vscode-insiders/extensions/ms-python.python-2020.1.58038/pythonFiles/lib/python/old_ptvsd/ptvsd/__main__.py\", line 316, in run_file\r\n    runpy.run_path(target, run_name='__main__')\r\n  File \"/usr/lib/python3.6/runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"/usr/lib/python3.6/runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  **File \"/home/pionn/minimum_bug_sqlalchemy/test.py\", line 13, in <module>\r\n    if not Child.query.filter(Child.name == \"Toto\").one_or_none() :**\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/query.py\", line 2784, in one_or_none\r\n    ret = list(self)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/query.py\", line 2854, in __iter__\r\n    self.session._autoflush()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/session.py\", line 1407, in _autoflush\r\n    util.raise_from_cause(e)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/compat.py\", line 203, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/compat.py\", line 187, in reraise\r\n    raise value\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/session.py\", line 1397, in _autoflush\r\n    self.flush()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/session.py\", line 2171, in flush\r\n    self._flush(objects)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/session.py\", line 2291, in _flush\r\n    transaction.rollback(_capture_exception=True)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/langhelpers.py\", line 66, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/compat.py\", line 187, in reraise\r\n    raise value\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/session.py\", line 2255, in _flush\r\n    flush_context.execute()\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/unitofwork.py\", line 389, in execute\r\n    rec.execute(self)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/unitofwork.py\", line 548, in execute\r\n    uow\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/persistence.py\", line 181, in save_obj\r\n    mapper, table, insert)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/orm/persistence.py\", line 835, in _emit_insert_statements\r\n    execute(statement, params)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/base.py\", line 945, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/sql/elements.py\", line 263, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/base.py\", line 1053, in _execute_clauseelement\r\n    compiled_sql, distilled_params\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/base.py\", line 1189, in _execute_context\r\n    context)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/base.py\", line 1402, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/compat.py\", line 203, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/util/compat.py\", line 186, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/base.py\", line 1182, in _execute_context\r\n    context)\r\n  File \"/usr/lib/python3/dist-packages/sqlalchemy/engine/default.py\", line 470, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.IntegrityError: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (sqlite3.IntegrityError) UNIQUE constraint failed: child.name [SQL: 'INSERT INTO child (name, parent_id) VALUES (?, ?)'] [parameters: ('Toto', 1)]\r\n```\r\nI believe it happends through back_propagate as, if removed, the \"bug\" dissapears. Same if I don't specify a parent for the child.\r\n\r\n### Environment\r\n\r\n* Operating system: Ubuntu 18.14\r\n* Python version: 3.6.3\r\n* Flask-SQLAlchemy version: 2.4.1 \r\n* SQLAlchemy version: 1.3.12\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/800", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/800/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/800/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/800", "id": 553262141, "node_id": "MDU6SXNzdWU1NTMyNjIxNDE=", "number": 800, "title": "sqlalchemy.exc.InvalidRequestError: Table 'users' is already defined for this MetaData instance. Specify 'extend_existing=True' to redefine options and columns on an existing Table object.", "user": {"login": "sunshineinwater", "id": 15187861, "node_id": "MDQ6VXNlcjE1MTg3ODYx", "avatar_url": "https://avatars0.githubusercontent.com/u/15187861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunshineinwater", "html_url": "https://github.com/sunshineinwater", "followers_url": "https://api.github.com/users/sunshineinwater/followers", "following_url": "https://api.github.com/users/sunshineinwater/following{/other_user}", "gists_url": "https://api.github.com/users/sunshineinwater/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunshineinwater/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunshineinwater/subscriptions", "organizations_url": "https://api.github.com/users/sunshineinwater/orgs", "repos_url": "https://api.github.com/users/sunshineinwater/repos", "events_url": "https://api.github.com/users/sunshineinwater/events{/privacy}", "received_events_url": "https://api.github.com/users/sunshineinwater/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-22T01:57:53Z", "updated_at": "2020-01-22T02:50:41Z", "closed_at": "2020-01-22T02:50:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "sqlalchemy.exc.InvalidRequestError: Table 'users' is already defined for this MetaData instance. Specify 'extend_existing=True' to redefine options and columns on an existing Table object.\r\n\r\n### Environment\r\nI face the error the same as: #672 \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/799", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/799/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/799/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/799/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/799", "id": 551859497, "node_id": "MDU6SXNzdWU1NTE4NTk0OTc=", "number": 799, "title": "When only set SQLALCHEMY_BINDS, the pool_size can't be set", "user": {"login": "zhongxinghong", "id": 32119584, "node_id": "MDQ6VXNlcjMyMTE5NTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/32119584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongxinghong", "html_url": "https://github.com/zhongxinghong", "followers_url": "https://api.github.com/users/zhongxinghong/followers", "following_url": "https://api.github.com/users/zhongxinghong/following{/other_user}", "gists_url": "https://api.github.com/users/zhongxinghong/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongxinghong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongxinghong/subscriptions", "organizations_url": "https://api.github.com/users/zhongxinghong/orgs", "repos_url": "https://api.github.com/users/zhongxinghong/repos", "events_url": "https://api.github.com/users/zhongxinghong/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongxinghong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-01-19T03:21:39Z", "updated_at": "2020-02-24T20:52:54Z", "closed_at": "2020-02-24T20:52:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm only set `SQLALCHEMY_BINDS` for ALL of my tables, and leave the `SQLALCHEMY_DATABASE_URI` as default `sqlite:///:memory:`. I use MySQL so all uri in BINDS are like `mysql+pymysql://host:post/database`. \r\n\r\nThen I found out I can't set `pool_size` in `SQLALCHEMY_ENGINE_OPTIONS`, or I will get an error:\r\n```\r\nTypeError: Invalid argument(s) 'pool_size' sent to create_engine(), using configuration SQLiteDialect_pysqlite/StaticPool/Engine.  Please check that the keyword arguments are appropriate for this combination of components.\r\n```\r\n\r\nI check out the source code, in `flask_sqlalchemy.__init__.apply_driver_hacks`, I found that this is because the `SQLALCHEMY_DATABASE_URI` is leave to `None`, then the `sa_uri` from `get_uri` is `sqlite:///:memory:`, then the default `poolclass` will be set to `StaticPool`. This pool only hold one connection so I can't give it `pool_size` parameter. \r\n\r\nSo if I want to set the `pool_size` I should also set `poolclass` to `sqlalchemy.pool.QueuePool`.\r\n\r\nIt used to bother me for a few days. Maybe the documentation should be more detailed. From current docs, I know the default `pool_size` is 5 (but actually the `pool_size` of mysql driver is 10 ...), so I think I can change it by passing the `pool_size` field to `options`. The `SQLALCHEMY_DATABASE_URI` is not required, but the docs don't mention what will happen if i leave it to default. And I don't know the default `poolclass` has been set to `StaticPool`, which is not what I expected.\r\n\r\n- Flask-SQLAlchemy: 2.4.0    \r\n- SQLAlchemy: 1.3.8 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/798", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/798/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/798/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/798/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/798", "id": 543798251, "node_id": "MDU6SXNzdWU1NDM3OTgyNTE=", "number": 798, "title": "include __all__ in __init__.py file ", "user": {"login": "sahasrara62", "id": 18409140, "node_id": "MDQ6VXNlcjE4NDA5MTQw", "avatar_url": "https://avatars1.githubusercontent.com/u/18409140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sahasrara62", "html_url": "https://github.com/sahasrara62", "followers_url": "https://api.github.com/users/sahasrara62/followers", "following_url": "https://api.github.com/users/sahasrara62/following{/other_user}", "gists_url": "https://api.github.com/users/sahasrara62/gists{/gist_id}", "starred_url": "https://api.github.com/users/sahasrara62/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sahasrara62/subscriptions", "organizations_url": "https://api.github.com/users/sahasrara62/orgs", "repos_url": "https://api.github.com/users/sahasrara62/repos", "events_url": "https://api.github.com/users/sahasrara62/events{/privacy}", "received_events_url": "https://api.github.com/users/sahasrara62/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-30T08:45:57Z", "updated_at": "2019-12-30T15:08:45Z", "closed_at": "2019-12-30T15:05:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nthis is suggestion for improvement\r\n\r\ninclude `__all__` in the `__init__.py` file , to tell the user all the public method to use, will make it easy to understand and implement, read the code\r\n\r\n```python\r\nPaste a minimal example that causes the problem.\r\n```\r\nthis is suggestion for  further improvement in the flask-sqlalchemy\r\n\r\n### Actual Behavior\r\n\r\nTell us what happens instead.\r\n\r\n```pytb\r\nPaste the full traceback if there was an exception.\r\n```\r\n\r\n### Environment\r\n\r\n* Operating system: ubuntu 18.04\r\n* Python version: 3.7.4\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version: '1.3.10'\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/797", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/797/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/797/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/797/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/797", "id": 541795873, "node_id": "MDU6SXNzdWU1NDE3OTU4NzM=", "number": 797, "title": "Adding Replication Master/Slave (FEATURE REQUEST)", "user": {"login": "AnderUstarroz", "id": 8544110, "node_id": "MDQ6VXNlcjg1NDQxMTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/8544110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AnderUstarroz", "html_url": "https://github.com/AnderUstarroz", "followers_url": "https://api.github.com/users/AnderUstarroz/followers", "following_url": "https://api.github.com/users/AnderUstarroz/following{/other_user}", "gists_url": "https://api.github.com/users/AnderUstarroz/gists{/gist_id}", "starred_url": "https://api.github.com/users/AnderUstarroz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AnderUstarroz/subscriptions", "organizations_url": "https://api.github.com/users/AnderUstarroz/orgs", "repos_url": "https://api.github.com/users/AnderUstarroz/repos", "events_url": "https://api.github.com/users/AnderUstarroz/events{/privacy}", "received_events_url": "https://api.github.com/users/AnderUstarroz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-23T15:16:37Z", "updated_at": "2019-12-23T15:27:33Z", "closed_at": "2019-12-23T15:27:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "flask-sqlalchemy is a great library, but it could be even better adding support for replication, a feature quite common on all production environments.\r\nThe idea would be adding some options to allow configuration  to allow read and write only on the defined databases, for instance:\r\n\r\n```\r\nSQLALCHEMY_DATABASE_URI = 'sqlite:///master.db' # Only Write\r\nSQLALCHEMY_BINDS = {\r\n    'slave': 'sqlite:///slave.db'  # Only Read\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/796", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/796/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/796/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/796/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/796", "id": 536587660, "node_id": "MDU6SXNzdWU1MzY1ODc2NjA=", "number": 796, "title": "Pass instalation extras to SQLAlchemy", "user": {"login": "mvolfik", "id": 31281386, "node_id": "MDQ6VXNlcjMxMjgxMzg2", "avatar_url": "https://avatars3.githubusercontent.com/u/31281386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mvolfik", "html_url": "https://github.com/mvolfik", "followers_url": "https://api.github.com/users/mvolfik/followers", "following_url": "https://api.github.com/users/mvolfik/following{/other_user}", "gists_url": "https://api.github.com/users/mvolfik/gists{/gist_id}", "starred_url": "https://api.github.com/users/mvolfik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mvolfik/subscriptions", "organizations_url": "https://api.github.com/users/mvolfik/orgs", "repos_url": "https://api.github.com/users/mvolfik/repos", "events_url": "https://api.github.com/users/mvolfik/events{/privacy}", "received_events_url": "https://api.github.com/users/mvolfik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-11T20:08:07Z", "updated_at": "2019-12-11T20:28:04Z", "closed_at": "2019-12-11T20:27:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Expected Behavior\r\n\r\nWhen passing extras during installation, Flask-SQLAlchemy should pass them to SQLAlchemy.\r\nSo if I  `pip install flask-sqlalchemy[postgresql]`  \r\nor specify `flask-sqlalchemy = {version = \"*\", extras = [\"postgresql\"]}` in Pipfile,  \r\nthe module `psycopg2` (as specified in [SQLAlchemy setup.py](https://github.com/sqlalchemy/sqlalchemy/blob/926952c4afe0b2e16c4a74f05958bded7b932760/setup.py#L168)) should get installed.\r\n\r\n### Actual Behavior\r\n\r\nNothing happens, I have to specify dependency `psycopg2` manually\r\n\r\n### Environment (imo irrelevant...)\r\n\r\n* Operating system: Docker container, Debian 10 buster\r\n* Python version: 3.7.4\r\n* Flask-SQLAlchemy version: 2.4.1\r\n* SQLAlchemy version: 1.3.11\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/795", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/795/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/795/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/795/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/795", "id": 535277852, "node_id": "MDU6SXNzdWU1MzUyNzc4NTI=", "number": 795, "title": "Document differences between Flask-SQLAlchemy and SQLAlchemy", "user": {"login": "cal97g", "id": 1664656, "node_id": "MDQ6VXNlcjE2NjQ2NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/1664656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cal97g", "html_url": "https://github.com/cal97g", "followers_url": "https://api.github.com/users/cal97g/followers", "following_url": "https://api.github.com/users/cal97g/following{/other_user}", "gists_url": "https://api.github.com/users/cal97g/gists{/gist_id}", "starred_url": "https://api.github.com/users/cal97g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cal97g/subscriptions", "organizations_url": "https://api.github.com/users/cal97g/orgs", "repos_url": "https://api.github.com/users/cal97g/repos", "events_url": "https://api.github.com/users/cal97g/events{/privacy}", "received_events_url": "https://api.github.com/users/cal97g/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-09T20:30:44Z", "updated_at": "2019-12-09T21:16:00Z", "closed_at": "2019-12-09T21:16:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be very useful to have a quick reference to exactly what Flask-SQLAlchemy is abstracting away or ways in which default SQLAlchemy behaviour has been altered.\r\n\r\nThe reason for this is due to the (well deserved) popularity of this library the majority of SQLAlchemy content refers directly to this version and may not be applicable to \"vanilla\" SQLAlchemy.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/794", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/794/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/794/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/794/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/794", "id": 530764123, "node_id": "MDU6SXNzdWU1MzA3NjQxMjM=", "number": 794, "title": "Cannot run SQLAlchemy", "user": {"login": "Bobtroopo", "id": 53283372, "node_id": "MDQ6VXNlcjUzMjgzMzcy", "avatar_url": "https://avatars2.githubusercontent.com/u/53283372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bobtroopo", "html_url": "https://github.com/Bobtroopo", "followers_url": "https://api.github.com/users/Bobtroopo/followers", "following_url": "https://api.github.com/users/Bobtroopo/following{/other_user}", "gists_url": "https://api.github.com/users/Bobtroopo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bobtroopo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bobtroopo/subscriptions", "organizations_url": "https://api.github.com/users/Bobtroopo/orgs", "repos_url": "https://api.github.com/users/Bobtroopo/repos", "events_url": "https://api.github.com/users/Bobtroopo/events{/privacy}", "received_events_url": "https://api.github.com/users/Bobtroopo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-01T17:19:51Z", "updated_at": "2019-12-01T17:21:35Z", "closed_at": "2019-12-01T17:21:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI am trying to run a script to add users to a database. and every time I run the script the error runs into not being able to identify the module.\r\n\r\nmy init.py file is below:\r\n\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\n\r\napp=Flask(__name__)\r\ndb = SQLAlchemy(app)\r\ndb.init_app(app)\r\n\r\n\r\nfrom App import views, models\r\nI have tried the following to install\r\n\r\n$ flask/bin/pip install Flask-SQLAlchemy\r\nalso\r\n\r\n$ flask/bin/pip install flask-sqlalchemy\r\nand I even tried it using pip install using the virtual environment.\r\nthe error is :\r\n\r\nApp/__init__.py\", line 3, in <module>\r\n    from flask_sqlalchemy import SQLAlchemy\r\nImportError: No module named flask_sqlalchemy\r\n\r\nI also changed the flask_sqlalchemy to the old style of flask.ext.sqlalchemy which pops the same error.\r\n\r\nIronically when I run the shell and try adding user or password and do a\r\n\r\ndb.session.add(something)\r\ndb.session.commit()\r\nthe code gets executed, without an error.\r\n\r\nWhere am I going wrong at this? Please help.\r\nI found this link: https://github.com/pallets/flask-sqlalchemy/issues/325, that has same problem, yet unclear answer that doesn't work.\r\nThanks\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/793", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/793/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/793/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/793/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/793", "id": 527711077, "node_id": "MDU6SXNzdWU1Mjc3MTEwNzc=", "number": 793, "title": "About Flask-SQLAlchemy: (mysql.connector.errors.OperationalError) MySQL Connection not available", "user": {"login": "Raul1718", "id": 23331838, "node_id": "MDQ6VXNlcjIzMzMxODM4", "avatar_url": "https://avatars2.githubusercontent.com/u/23331838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Raul1718", "html_url": "https://github.com/Raul1718", "followers_url": "https://api.github.com/users/Raul1718/followers", "following_url": "https://api.github.com/users/Raul1718/following{/other_user}", "gists_url": "https://api.github.com/users/Raul1718/gists{/gist_id}", "starred_url": "https://api.github.com/users/Raul1718/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Raul1718/subscriptions", "organizations_url": "https://api.github.com/users/Raul1718/orgs", "repos_url": "https://api.github.com/users/Raul1718/repos", "events_url": "https://api.github.com/users/Raul1718/events{/privacy}", "received_events_url": "https://api.github.com/users/Raul1718/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-24T15:04:42Z", "updated_at": "2019-11-24T16:43:17Z", "closed_at": "2019-11-24T16:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "First, I introduce my project,The configuration is as follows:\r\n```\r\n# config.py\r\nMYSQL_URL = 'mysql+mysqlconnector://xxx/db_name'\r\nDEBUG = True\r\nSQLALCHEMY_ECHO = True\r\nSQLALCHEMY_DATABASE_URI = MYSQL_URL\r\nSQLALCHEMY_TRACK_MODIFICATIONS = False\r\nSQLALCHEMY_POOL_RECYCLE = 3000\r\nSQLALCHEMY_ENCODING = \"utf8mb4\"\r\n```\r\n```\r\n# application.py\r\nfrom flask_sqlalchemy import SQLAlchemy\r\ndb = SQLAlchemy()\r\n......\r\nself.config.from_pyfile('config.py')\r\ndb.init_app(self)\r\n```\r\nMy current function is: all the previous functions are normal, database addition, deletion, modification and query are also normal, and then enter a scanning process, which is a third-party scanning tool. After scanning, a string of scanning results (JSON string) with a large amount of data is generated. Then I cycle the JSON string, take out the IP (a large number of IP), and query its ID according to IP in the database, exception is reported for this process:\r\n`(mysql.connector.errors.OperationalError) MySQL Connection not available\r\n`\r\nDuring this scanning process, when the scan data is relatively small, the scanning time is relatively short. After testing, when the scanning time is short, no exception will be reported, and the program runs normally. But when the amount of data scanned is large, the query database will report the above exception after the scanning is completed.\r\n\r\nIt's strange, isn't it: the scanning time is long, there is no interaction between the scanning process and the database, and the connection with the database is automatically disconnected?\r\n\r\nMy MySQL configuration is as follows:\r\n\r\n![MX3yXq.png](https://s2.ax1x.com/2019/11/24/MX3yXq.png)\r\n\r\nAt last, please ask me how to solve it.Thanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/789", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/789/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/789/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/789/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/789", "id": 508454974, "node_id": "MDU6SXNzdWU1MDg0NTQ5NzQ=", "number": 789, "title": "Current quickstart documentation might be a little confusing about create_all()", "user": {"login": "cpaulik", "id": 380927, "node_id": "MDQ6VXNlcjM4MDkyNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/380927?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpaulik", "html_url": "https://github.com/cpaulik", "followers_url": "https://api.github.com/users/cpaulik/followers", "following_url": "https://api.github.com/users/cpaulik/following{/other_user}", "gists_url": "https://api.github.com/users/cpaulik/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpaulik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpaulik/subscriptions", "organizations_url": "https://api.github.com/users/cpaulik/orgs", "repos_url": "https://api.github.com/users/cpaulik/repos", "events_url": "https://api.github.com/users/cpaulik/events{/privacy}", "received_events_url": "https://api.github.com/users/cpaulik/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 518878555, "node_id": "MDU6TGFiZWw1MTg4Nzg1NTU=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": null}, {"id": 549245861, "node_id": "MDU6TGFiZWw1NDkyNDU4NjE=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": null}, {"id": 549246255, "node_id": "MDU6TGFiZWw1NDkyNDYyNTU=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-17T12:52:13Z", "updated_at": "2020-05-26T04:14:19Z", "closed_at": "2020-05-26T04:14:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Current documentation claims that:\r\n\r\n```\r\nTo create the initial database, just import the db object from an interactive Python shell and run the SQLAlchemy.create_all() method to create the tables and database:\r\n\r\n>>> from yourapplication import db\r\n>>> db.create_all()\r\n\r\nBoom, and there is your database.\r\n```\r\nBut the `create_all()` function does not seem to create the database, only the tables. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/787", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/787/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/787/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/787", "id": 505903595, "node_id": "MDU6SXNzdWU1MDU5MDM1OTU=", "number": 787, "title": "Bump lowest supported versions", "user": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/2", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2/labels", "id": 767681, "node_id": "MDk6TWlsZXN0b25lNzY3Njgx", "number": 2, "title": "3.0", "description": "Tracks items that are a high priority and should be in the first 3.x release.", "creator": {"login": "immunda", "id": 524365, "node_id": "MDQ6VXNlcjUyNDM2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/524365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immunda", "html_url": "https://github.com/immunda", "followers_url": "https://api.github.com/users/immunda/followers", "following_url": "https://api.github.com/users/immunda/following{/other_user}", "gists_url": "https://api.github.com/users/immunda/gists{/gist_id}", "starred_url": "https://api.github.com/users/immunda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immunda/subscriptions", "organizations_url": "https://api.github.com/users/immunda/orgs", "repos_url": "https://api.github.com/users/immunda/repos", "events_url": "https://api.github.com/users/immunda/events{/privacy}", "received_events_url": "https://api.github.com/users/immunda/received_events", "type": "User", "site_admin": false}, "open_issues": 10, "closed_issues": 27, "state": "open", "created_at": "2014-08-27T17:06:57Z", "updated_at": "2020-05-27T14:43:18Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2019-10-11T14:59:35Z", "updated_at": "2019-10-11T16:09:07Z", "closed_at": "2019-10-11T16:09:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "SQLAlchemy 1.2 is the lowest actively supported version: https://www.sqlalchemy.org/download.html#relstatus\r\n\r\nSince Flask went 1.0 and it's been a while now, let's use that as the minimum. 1.0.4 resolves issues with Pytest (#731).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/786", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/786/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/786/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/786", "id": 502274305, "node_id": "MDU6SXNzdWU1MDIyNzQzMDU=", "number": 786, "title": "Pagination fencepost error", "user": {"login": "evan-csp", "id": 56135563, "node_id": "MDQ6VXNlcjU2MTM1NTYz", "avatar_url": "https://avatars2.githubusercontent.com/u/56135563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evan-csp", "html_url": "https://github.com/evan-csp", "followers_url": "https://api.github.com/users/evan-csp/followers", "following_url": "https://api.github.com/users/evan-csp/following{/other_user}", "gists_url": "https://api.github.com/users/evan-csp/gists{/gist_id}", "starred_url": "https://api.github.com/users/evan-csp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evan-csp/subscriptions", "organizations_url": "https://api.github.com/users/evan-csp/orgs", "repos_url": "https://api.github.com/users/evan-csp/repos", "events_url": "https://api.github.com/users/evan-csp/events{/privacy}", "received_events_url": "https://api.github.com/users/evan-csp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-03T20:14:00Z", "updated_at": "2019-10-04T15:17:21Z", "closed_at": "2019-10-04T15:17:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Pagination seems to have an issue where per_page is set to the exact total number of items in the unpaginated response, in some, but not all circumstances.\r\n\r\nIn this example, staff is defined as a relationship on the School model as such:\r\n`staff = db.relationship(\r\n        'User',\r\n        secondary='grant',\r\n        primaryjoin='School.id==Grant.school_staff_target_id',\r\n        secondaryjoin='Grant.user_id==User.id',\r\n        lazy='dynamic',\r\n        backref='schools_staff'\r\n    )`\r\n\r\nI query without pagination like this, and I get the expected number of staff, two:\r\n`staff = School.query.filter_by(id='5d2ab3bb1f28426f8148e47543b1cbee').one()\\\r\n        .staff.filter_by(deleted=False).all()`\r\n`Staff: [<User 56fde169-f7bd-4ca1-9e4d-2268a0d71dc7>, <User b3769431-b48a-4303-8ec6-b2f0763d21f1>]`\r\n\r\nIf I paginate setting per_page=2, I correctly get has_next=False, but items only has one result:\r\n`staff = School.query.filter_by(id='5d2ab3bb1f28426f8148e47543b1cbee').one()\\\r\n        .staff.filter_by(deleted=False).paginate(1, 2)`\r\n`Staff: [<User 56fde169-f7bd-4ca1-9e4d-2268a0d71dc7>]`\r\n\r\nIf I paginate setting per_page>2, such as 3, items has two results:\r\n`staff = School.query.filter_by(id='5d2ab3bb1f28426f8148e47543b1cbee').one()\\\r\n        .staff.filter_by(deleted=False).paginate(1, 3)`\r\n`Staff: [<User 56fde169-f7bd-4ca1-9e4d-2268a0d71dc7>, <User b3769431-b48a-4303-8ec6-b2f0763d21f1>]`\r\n\r\n\r\nThis may not actually be a fencepost error. A comprehensive output is below:\r\n\r\nStaff ORM query: School.query.filter_by(id='5d2ab3bb1f28426f8148e47543b1cbee').one().staff.filter_by(deleted=False).paginate(1, 2)\r\nStaff: [<User 56fde169-f7bd-4ca1-9e4d-2268a0d71dc7>]\r\nStaff pages: 1\r\nStaff has_next False\r\nStaff per_page: 2\r\nStaff total: 1\r\nStaff query: SELECT user.id AS user_id, user.legacy_id AS user_legacy_id, user.email AS user_email, user.first_name AS user_first_name, user.last_name AS user_last_name, user.password AS user_password, user.deleted AS user_deleted \r\nFROM user, grant \r\nWHERE ? = grant.school_staff_target_id AND grant.user_id = user.id AND user.deleted = 0\r\n\r\n\r\nStaff ORM query: School.query.filter_by(id='5d2ab3bb1f28426f8148e47543b1cbee').one().staff.filter_by(deleted=False).paginate(1, 3)\r\nStaff: [<User 56fde169-f7bd-4ca1-9e4d-2268a0d71dc7>, <User b3769431-b48a-4303-8ec6-b2f0763d21f1>]\r\nStaff pages: 1\r\nStaff has_next False\r\nStaff per_page: 3\r\nStaff total: 2\r\nStaff query: SELECT user.id AS user_id, user.legacy_id AS user_legacy_id, user.email AS user_email, user.first_name AS user_first_name, user.last_name AS user_last_name, user.password AS user_password, user.deleted AS user_deleted \r\nFROM user, grant \r\nWHERE ? = grant.school_staff_target_id AND grant.user_id = user.id AND user.deleted = 0\r\n\r\n\r\nStaff ORM query: School.query.filter_by(id='5d2ab3bb1f28426f8148e47543b1cbee').one().staff.filter_by(deleted=False).all()\r\nStaff: [User 56fde169-f7bd-4ca1-9e4d-2268a0d71dc7, User b3769431-b48a-4303-8ec6-b2f0763d21f1]", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/785", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/785/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/785/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/785/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/785", "id": 502152694, "node_id": "MDU6SXNzdWU1MDIxNTI2OTQ=", "number": 785, "title": "SQLALCHEMY_POOL_RECYCLE replacement for version 3.0", "user": {"login": "YaPeL", "id": 647358, "node_id": "MDQ6VXNlcjY0NzM1OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/647358?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaPeL", "html_url": "https://github.com/YaPeL", "followers_url": "https://api.github.com/users/YaPeL/followers", "following_url": "https://api.github.com/users/YaPeL/following{/other_user}", "gists_url": "https://api.github.com/users/YaPeL/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaPeL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaPeL/subscriptions", "organizations_url": "https://api.github.com/users/YaPeL/orgs", "repos_url": "https://api.github.com/users/YaPeL/repos", "events_url": "https://api.github.com/users/YaPeL/events{/privacy}", "received_events_url": "https://api.github.com/users/YaPeL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-03T15:55:52Z", "updated_at": "2019-10-03T16:03:47Z", "closed_at": "2019-10-03T16:03:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone, I saw on the documentation that this key is going to be removed for version 3.0, the problem I have, is that currently, on my project, we need to set this, so my question is, how can I achieve the same thing for 3.0?  thanks.\r\n\r\nEDIT: got replaced by SQLALCHEMY_ENGINE_OPTIONS", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/781", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/781/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/781/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/781", "id": 488751673, "node_id": "MDU6SXNzdWU0ODg3NTE2NzM=", "number": 781, "title": "reflect with database constraints.", "user": {"login": "TimBogevich", "id": 3168756, "node_id": "MDQ6VXNlcjMxNjg3NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/3168756?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimBogevich", "html_url": "https://github.com/TimBogevich", "followers_url": "https://api.github.com/users/TimBogevich/followers", "following_url": "https://api.github.com/users/TimBogevich/following{/other_user}", "gists_url": "https://api.github.com/users/TimBogevich/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimBogevich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimBogevich/subscriptions", "organizations_url": "https://api.github.com/users/TimBogevich/orgs", "repos_url": "https://api.github.com/users/TimBogevich/repos", "events_url": "https://api.github.com/users/TimBogevich/events{/privacy}", "received_events_url": "https://api.github.com/users/TimBogevich/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T18:17:34Z", "updated_at": "2019-09-03T18:38:05Z", "closed_at": "2019-09-03T18:38:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello, when I reflect table \r\n> db.reflect()\r\n> table_class_objects = type(class_name, (db.Model,), class_definition)\r\n\r\nTable reflects, primary keys reflect, and constraints for PK reflect as will...\r\nBut constraints for other columns are not reflected.\r\nFor example I set NOT NULL constraint for columns and sqlalchemy doesn't see it.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/778", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/778/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/778/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/778", "id": 486165966, "node_id": "MDU6SXNzdWU0ODYxNjU5NjY=", "number": 778, "title": "2.4.0 has been released without 2.3.3 changes", "user": {"login": "hanc1208", "id": 6322585, "node_id": "MDQ6VXNlcjYzMjI1ODU=", "avatar_url": "https://avatars2.githubusercontent.com/u/6322585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanc1208", "html_url": "https://github.com/hanc1208", "followers_url": "https://api.github.com/users/hanc1208/followers", "following_url": "https://api.github.com/users/hanc1208/following{/other_user}", "gists_url": "https://api.github.com/users/hanc1208/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanc1208/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanc1208/subscriptions", "organizations_url": "https://api.github.com/users/hanc1208/orgs", "repos_url": "https://api.github.com/users/hanc1208/repos", "events_url": "https://api.github.com/users/hanc1208/events{/privacy}", "received_events_url": "https://api.github.com/users/hanc1208/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/12", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/12", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/12/labels", "id": 4687701, "node_id": "MDk6TWlsZXN0b25lNDY4NzcwMQ==", "number": 12, "title": "2.4.1", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2019-09-24T14:27:07Z", "updated_at": "2020-05-25T17:26:32Z", "due_on": null, "closed_at": "2020-05-25T17:26:32Z"}, "comments": 5, "created_at": "2019-08-28T05:20:35Z", "updated_at": "2019-09-25T07:17:58Z", "closed_at": "2019-09-24T14:36:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I couldn't find any commits of https://github.com/pallets/flask-sqlalchemy/pull/651 in 2.4.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/777", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/777/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/777/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/777/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/777", "id": 486100117, "node_id": "MDU6SXNzdWU0ODYxMDAxMTc=", "number": 777, "title": "Debug mode doubles the queries made to mysql database in your session.", "user": {"login": "Carnivlaking", "id": 16451392, "node_id": "MDQ6VXNlcjE2NDUxMzky", "avatar_url": "https://avatars2.githubusercontent.com/u/16451392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Carnivlaking", "html_url": "https://github.com/Carnivlaking", "followers_url": "https://api.github.com/users/Carnivlaking/followers", "following_url": "https://api.github.com/users/Carnivlaking/following{/other_user}", "gists_url": "https://api.github.com/users/Carnivlaking/gists{/gist_id}", "starred_url": "https://api.github.com/users/Carnivlaking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Carnivlaking/subscriptions", "organizations_url": "https://api.github.com/users/Carnivlaking/orgs", "repos_url": "https://api.github.com/users/Carnivlaking/repos", "events_url": "https://api.github.com/users/Carnivlaking/events{/privacy}", "received_events_url": "https://api.github.com/users/Carnivlaking/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-28T00:31:52Z", "updated_at": "2019-08-28T00:46:44Z", "closed_at": "2019-08-28T00:38:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say if I want to add a user instance into a mysql database table instead of just inserting the instance once into the table it inserts two of the same instance. And if i wish to delete one of those instances with delete.first() it deletes both of the instances created. Just seems like an inconvience.Gets messy when you want to add unique keys because it will automatically drop you from your enviorment production because of an Integrity Error.\r\n\r\nHere are the versions im using:\r\nOS: Linux Mint 19.2 Cinnamon\r\nPython : Python 3.6.8\r\nmysql : 5.7.27-0ubuntu0.18.04.1\r\nFlask: 1.1.1\r\nFlask-Session: 0.3.1\r\nFlask-SQLAlchemy: 2.4.0\r\nFlask-WTF: 0.14.2\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/776", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/776/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/776/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/776", "id": 485893707, "node_id": "MDU6SXNzdWU0ODU4OTM3MDc=", "number": 776, "title": "Connections stay in `idle in transaction` state when db.session isn't explicity used", "user": {"login": "shnela", "id": 3773836, "node_id": "MDQ6VXNlcjM3NzM4MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/3773836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnela", "html_url": "https://github.com/shnela", "followers_url": "https://api.github.com/users/shnela/followers", "following_url": "https://api.github.com/users/shnela/following{/other_user}", "gists_url": "https://api.github.com/users/shnela/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnela/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnela/subscriptions", "organizations_url": "https://api.github.com/users/shnela/orgs", "repos_url": "https://api.github.com/users/shnela/repos", "events_url": "https://api.github.com/users/shnela/events{/privacy}", "received_events_url": "https://api.github.com/users/shnela/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T15:52:13Z", "updated_at": "2019-09-03T15:23:17Z", "closed_at": "2019-09-03T15:23:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've a problem with `idle in transaction` connections which aren't affected by [`shutdown_session`](https://github.com/pallets/flask-sqlalchemy/blob/master/flask_sqlalchemy/__init__.py#L847)\r\n\r\nHere're simplified views for my application:\r\n\r\n```python\r\nfrom dagama import db\r\nfrom dagama.contracts import bp\r\nfrom dagama.contracts.models import Contract\r\n\r\n\r\n@bp.route('/')\r\ndef contracts():\r\n    contracts_qs = db.session.query(Contract)\r\n    n = contracts_qs.count()\r\n    return Response()\r\n\r\n@bp.route('/<int:id>/')\r\ndef contract_details(id):\r\n    contract = Contract.query.filter(Contract.id == id).order_by(Contract.version.desc()).first_or_404()\r\n    return Response()\r\n```\r\n\r\nAnd here are stats from production db:\r\n```sql\r\ndatalake=# SELECT pid, application_name, client_addr, client_port, backend_start, xact_start, query_start,  wait_event, state, left(query, 64) FROM pg_stat_activity WHERE APPLICATION_NAME = 'dagama' OR client_addr = '172.17.0.2' ORDER BY query_start DESC;\r\n  pid  | application_name | client_addr | client_port |         backend_start         |          xact_start           |          query_start          | wait_event |        state        |                               left\r\n-------+------------------+-------------+-------------+-------------------------------+-------------------------------+-------------------------------+------------+---------------------+------------------------------------------------------------------\r\n 41599 | dagama           | 172.17.0.2  |       60396 | 2019-08-27 14:34:43.75638+02  |                               | 2019-08-27 14:34:43.793666+02 | ClientRead | idle                | ROLLBACK\r\n 18338 |                  | 172.17.0.2  |       58062 | 2019-08-27 14:09:13.919567+02 |                               | 2019-08-27 14:10:55.758383+02 | ClientRead | idle                | ROLLBACK\r\n 30387 | dagama           | 172.17.0.2  |       43526 | 2019-08-27 14:10:55.324834+02 | 2019-08-27 14:10:55.329896+02 | 2019-08-27 14:10:55.371686+02 | ClientRead | idle in transaction | SELECT metadata.rules.id AS metadata_rules_id, metadata.rules.co\r\n 18154 | dagama           | 172.17.0.2  |       57712 | 2019-08-27 14:09:11.633017+02 | 2019-08-27 14:09:13.906523+02 | 2019-08-27 14:09:13.982879+02 | ClientRead | idle in transaction | SELECT metadata.rules.id AS metadata_rules_id, metadata.rules.co\r\n(4 rows)\r\n```\r\n\r\nCalling `contract_details()` results with connection with `state = idle in transaction`, but using `db.session` like in `contracts()` directly nicely rolls back and closes the transaction (`xact_start` is null).  \r\nFlask-SQLAlchemy should manually close thread-local session [in shutdown_session](https://github.com/pallets/flask-sqlalchemy/blob/master/flask_sqlalchemy/__init__.py#L847), but it does only for `db.session`, so I have to manually rollback transactions which didn't call `db.session` explicity:\r\n```python\r\n@bp.route('/<int:id>/')\r\ndef contract_details(id):\r\n    contract = Contract.query.filter(Contract.id == id).order_by(Contract.version.desc()).first_or_404()\r\n    db.session.object_session(contract).rollback()\r\n    return Response()\r\n```\r\n\r\n**Additional notes**\r\nI've described the problem on [StackOverflow](https://stackoverflow.com/questions/57675679/flask-sqlalchemy-get-rid-of-idle-in-transaction).  \r\nI've noticed similar problems in your issue section e.g. #531", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/775", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/775/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/775/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/775", "id": 484320250, "node_id": "MDU6SXNzdWU0ODQzMjAyNTA=", "number": 775, "title": "str object should make to list at Model.id._in(str) would be better", "user": {"login": "tsbxmw", "id": 15834891, "node_id": "MDQ6VXNlcjE1ODM0ODkx", "avatar_url": "https://avatars1.githubusercontent.com/u/15834891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsbxmw", "html_url": "https://github.com/tsbxmw", "followers_url": "https://api.github.com/users/tsbxmw/followers", "following_url": "https://api.github.com/users/tsbxmw/following{/other_user}", "gists_url": "https://api.github.com/users/tsbxmw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsbxmw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsbxmw/subscriptions", "organizations_url": "https://api.github.com/users/tsbxmw/orgs", "repos_url": "https://api.github.com/users/tsbxmw/repos", "events_url": "https://api.github.com/users/tsbxmw/events{/privacy}", "received_events_url": "https://api.github.com/users/tsbxmw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-23T04:10:22Z", "updated_at": "2019-08-23T04:12:16Z", "closed_at": "2019-08-23T04:12:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nclass Project(db.Model):\r\n       id = db.Column(db.Integer) \r\n\r\n### when i want to use '_in', to get all id in [123], but i get the result : id in [1,2,3]\r\ndef test():\r\n       ids = '123'\r\n       data = Project.query.filter(Project.id._in(ids)).all()\r\n       return data\r\n\r\n###  so i think here add some check, to make it easy to use\r\n@comparison_op\r\ndef in_op(a, b):\r\n    # some check here with\r\n    # if type(b) is str: b = [b]\r\n    return a.in_(b)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/774", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/774/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/774/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/774/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/774", "id": 483682723, "node_id": "MDU6SXNzdWU0ODM2ODI3MjM=", "number": 774, "title": "Paginator inconsistent with query results", "user": {"login": "aropie", "id": 21988782, "node_id": "MDQ6VXNlcjIxOTg4Nzgy", "avatar_url": "https://avatars3.githubusercontent.com/u/21988782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aropie", "html_url": "https://github.com/aropie", "followers_url": "https://api.github.com/users/aropie/followers", "following_url": "https://api.github.com/users/aropie/following{/other_user}", "gists_url": "https://api.github.com/users/aropie/gists{/gist_id}", "starred_url": "https://api.github.com/users/aropie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aropie/subscriptions", "organizations_url": "https://api.github.com/users/aropie/orgs", "repos_url": "https://api.github.com/users/aropie/repos", "events_url": "https://api.github.com/users/aropie/events{/privacy}", "received_events_url": "https://api.github.com/users/aropie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-21T22:32:14Z", "updated_at": "2019-08-22T16:25:07Z", "closed_at": "2019-08-22T16:25:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working with a MySQL database. The problem is that when comparing `len(session.query(SomeModel).all()) ` with `session.query(SomeModel).paginate().total` I'm getting different results. Any insight on what the problem may be?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/773", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/773/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/773/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/773", "id": 483475118, "node_id": "MDU6SXNzdWU0ODM0NzUxMTg=", "number": 773, "title": "No documentation for possible workarounds when using multiple binds with identical tablenames", "user": {"login": "4lph4-Ph4un", "id": 25401310, "node_id": "MDQ6VXNlcjI1NDAxMzEw", "avatar_url": "https://avatars1.githubusercontent.com/u/25401310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4lph4-Ph4un", "html_url": "https://github.com/4lph4-Ph4un", "followers_url": "https://api.github.com/users/4lph4-Ph4un/followers", "following_url": "https://api.github.com/users/4lph4-Ph4un/following{/other_user}", "gists_url": "https://api.github.com/users/4lph4-Ph4un/gists{/gist_id}", "starred_url": "https://api.github.com/users/4lph4-Ph4un/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4lph4-Ph4un/subscriptions", "organizations_url": "https://api.github.com/users/4lph4-Ph4un/orgs", "repos_url": "https://api.github.com/users/4lph4-Ph4un/repos", "events_url": "https://api.github.com/users/4lph4-Ph4un/events{/privacy}", "received_events_url": "https://api.github.com/users/4lph4-Ph4un/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-21T14:59:05Z", "updated_at": "2020-05-26T16:00:46Z", "closed_at": "2020-05-26T16:00:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Don't know if I'm alone on this one, but it seems to be there's not really a documentation for this one, apart from few haphazard and unsure snippets on some issues.\r\n\r\nI personally do not want to move away from flask-sqlalchemy in infras where multiple bindings are needed. Does anyone else feel documenting this would be helpful?\r\n\r\nEDIT:\r\n\r\nI'm currently using a structure like this to provide different MetaDatas, but I'm not versed enough to take account what implications this solution may have in the long run:\r\n\r\n```python\r\nfrom flask_sqlalchemy.model import Model, DefaultMeta \r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom src.app import DB as db\r\n\r\n\r\nReplicaBase = db.make_declarative_base(\r\n    declarative_base(cls=Model, name=\"Model\", metaclass=DefaultMeta))\r\n\r\n\r\nclass AsMaster(db.Model):\r\n    __abstract__ = True\r\n    __bind_key__ = \"master\"\r\n\r\n\r\nclass AsReplica(ReplicaBase):\r\n    __abstract__ = True\r\n    __bind_key__ = \"replica\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/772", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/772/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/772/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/772/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/772", "id": 483426334, "node_id": "MDU6SXNzdWU0ODM0MjYzMzQ=", "number": 772, "title": "What is the future for separate MetaData when using multiple database bindings?", "user": {"login": "4lph4-Ph4un", "id": 25401310, "node_id": "MDQ6VXNlcjI1NDAxMzEw", "avatar_url": "https://avatars1.githubusercontent.com/u/25401310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4lph4-Ph4un", "html_url": "https://github.com/4lph4-Ph4un", "followers_url": "https://api.github.com/users/4lph4-Ph4un/followers", "following_url": "https://api.github.com/users/4lph4-Ph4un/following{/other_user}", "gists_url": "https://api.github.com/users/4lph4-Ph4un/gists{/gist_id}", "starred_url": "https://api.github.com/users/4lph4-Ph4un/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4lph4-Ph4un/subscriptions", "organizations_url": "https://api.github.com/users/4lph4-Ph4un/orgs", "repos_url": "https://api.github.com/users/4lph4-Ph4un/repos", "events_url": "https://api.github.com/users/4lph4-Ph4un/events{/privacy}", "received_events_url": "https://api.github.com/users/4lph4-Ph4un/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-21T13:37:19Z", "updated_at": "2019-08-21T14:27:49Z", "closed_at": "2019-08-21T14:04:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "There was some planning/discussion about the subject some time ago. What's the status? Will it become possible to use same table names across different bindings?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/770", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/770/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/770/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/770", "id": 479327697, "node_id": "MDU6SXNzdWU0NzkzMjc2OTc=", "number": 770, "title": "Weir behavoir on relations", "user": {"login": "eamanu", "id": 7605307, "node_id": "MDQ6VXNlcjc2MDUzMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7605307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eamanu", "html_url": "https://github.com/eamanu", "followers_url": "https://api.github.com/users/eamanu/followers", "following_url": "https://api.github.com/users/eamanu/following{/other_user}", "gists_url": "https://api.github.com/users/eamanu/gists{/gist_id}", "starred_url": "https://api.github.com/users/eamanu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eamanu/subscriptions", "organizations_url": "https://api.github.com/users/eamanu/orgs", "repos_url": "https://api.github.com/users/eamanu/repos", "events_url": "https://api.github.com/users/eamanu/events{/privacy}", "received_events_url": "https://api.github.com/users/eamanu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-11T03:18:42Z", "updated_at": "2019-08-12T12:15:59Z", "closed_at": "2019-08-11T04:20:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I don't know if this is the correct place for this, but I don't found a solucion\r\n\r\nI will write this with a example. If I have 2 tables, with a relationship between both:\r\n\r\n```\r\nclass C(db.Model):\r\n    id = ...\r\n    ....\r\n    fs = db.relationship('F', backref='companies')\r\n  \r\n    ....\r\n\r\nclass F(db.Model):\r\n    id = ...\r\n    state = db.Column(db.String(255)) # OK or NOK\r\n    c = db.relationship('C', back_populate='fs'\r\n    ....\r\n\r\n```\r\nIf a make the next query:\r\n\r\n```\r\nq = C.query.filter(C.fs.any(state='OK')).all()\r\n```\r\nIf I run ```len(q)``` the result is according with my database. But, if I run:\r\n```len(q[0].f)```I have whole F data for  C (q[0]). seems like when I want the\r\ncolumn that represent the relationship, that search whole data on database.\r\n\r\nSo if I run:\r\n\r\n```\r\nfor i in q[0].fs:\r\n    print(i.state)\r\n```\r\n\r\nI have for example:\r\n\r\n```\r\n'OK'\r\n'OK'\r\n'NOK'\r\n'NOK'\r\n ```\r\nSo, the ```q``` result  \"does not remember\" the ```C.fs.any(state='OK')``` filter\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/769", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/769/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/769/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/769", "id": 478739046, "node_id": "MDU6SXNzdWU0Nzg3MzkwNDY=", "number": 769, "title": "how do I get the version?", "user": {"login": "invegat", "id": 10525116, "node_id": "MDQ6VXNlcjEwNTI1MTE2", "avatar_url": "https://avatars0.githubusercontent.com/u/10525116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invegat", "html_url": "https://github.com/invegat", "followers_url": "https://api.github.com/users/invegat/followers", "following_url": "https://api.github.com/users/invegat/following{/other_user}", "gists_url": "https://api.github.com/users/invegat/gists{/gist_id}", "starred_url": "https://api.github.com/users/invegat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invegat/subscriptions", "organizations_url": "https://api.github.com/users/invegat/orgs", "repos_url": "https://api.github.com/users/invegat/repos", "events_url": "https://api.github.com/users/invegat/events{/privacy}", "received_events_url": "https://api.github.com/users/invegat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-09T00:10:38Z", "updated_at": "2019-08-09T01:19:44Z", "closed_at": "2019-08-09T01:19:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "print(DB)  <SQLAlchemy engine=postgres://cbzzmuglaifvrs:***@ec2-174-129-225-9.compute-1.amazonaws.com:5432/da4fit45q0u0p0\r\n\r\nIs there a version number somewhere in there? \r\n\r\nbeen unable to get a version with a 'tables' parameter  Signature: DB.drop_all(bind='__all__', app=None)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/767", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/767/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/767/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/767", "id": 473321921, "node_id": "MDU6SXNzdWU0NzMzMjE5MjE=", "number": 767, "title": "Documentation suggestion - Schemas initialise models", "user": {"login": "williamjulianvicary", "id": 1242716, "node_id": "MDQ6VXNlcjEyNDI3MTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1242716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/williamjulianvicary", "html_url": "https://github.com/williamjulianvicary", "followers_url": "https://api.github.com/users/williamjulianvicary/followers", "following_url": "https://api.github.com/users/williamjulianvicary/following{/other_user}", "gists_url": "https://api.github.com/users/williamjulianvicary/gists{/gist_id}", "starred_url": "https://api.github.com/users/williamjulianvicary/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/williamjulianvicary/subscriptions", "organizations_url": "https://api.github.com/users/williamjulianvicary/orgs", "repos_url": "https://api.github.com/users/williamjulianvicary/repos", "events_url": "https://api.github.com/users/williamjulianvicary/events{/privacy}", "received_events_url": "https://api.github.com/users/williamjulianvicary/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-26T11:54:24Z", "updated_at": "2019-07-29T09:15:36Z", "closed_at": "2019-07-26T15:10:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "EDIT: This isn't related to Flask-SQLAlchemy, see here for related issue:\r\nhttps://github.com/marshmallow-code/flask-marshmallow/issues/143", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/764", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/764/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/764/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/764/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/764", "id": 469096314, "node_id": "MDU6SXNzdWU0NjkwOTYzMTQ=", "number": 764, "title": "Can't find sqlalchemy's exceptions", "user": {"login": "flyingdutchman", "id": 26379223, "node_id": "MDQ6VXNlcjI2Mzc5MjIz", "avatar_url": "https://avatars3.githubusercontent.com/u/26379223?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flyingdutchman", "html_url": "https://github.com/flyingdutchman", "followers_url": "https://api.github.com/users/flyingdutchman/followers", "following_url": "https://api.github.com/users/flyingdutchman/following{/other_user}", "gists_url": "https://api.github.com/users/flyingdutchman/gists{/gist_id}", "starred_url": "https://api.github.com/users/flyingdutchman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flyingdutchman/subscriptions", "organizations_url": "https://api.github.com/users/flyingdutchman/orgs", "repos_url": "https://api.github.com/users/flyingdutchman/repos", "events_url": "https://api.github.com/users/flyingdutchman/events{/privacy}", "received_events_url": "https://api.github.com/users/flyingdutchman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-17T09:51:22Z", "updated_at": "2019-07-17T10:05:13Z", "closed_at": "2019-07-17T10:05:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been trying to import the exception `IntegrityError` to use it in a try/catch bloc.\r\n\r\nSince it is always advised to access SQLAlchemy through the flask-sqlalchemy imports, I tried to access the class with `db.exc.IntegrityError`\r\n\r\nBut then I get the following error:\r\n\r\n    AttributeError: 'SQLAlchemy' object has no attribute 'exc'\r\n\r\nIs it a normal behavior and I should import from `from sqlalchemy.exc import IntegrityError\r\n` directly or is it a bug ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/763", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/763/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/763/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/763/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/763", "id": 467039467, "node_id": "MDU6SXNzdWU0NjcwMzk0Njc=", "number": 763, "title": "flask-sqlalchemy 2.4 breaks create_engine code written before version 2.4", "user": {"login": "shalikashvili", "id": 48773840, "node_id": "MDQ6VXNlcjQ4NzczODQw", "avatar_url": "https://avatars0.githubusercontent.com/u/48773840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shalikashvili", "html_url": "https://github.com/shalikashvili", "followers_url": "https://api.github.com/users/shalikashvili/followers", "following_url": "https://api.github.com/users/shalikashvili/following{/other_user}", "gists_url": "https://api.github.com/users/shalikashvili/gists{/gist_id}", "starred_url": "https://api.github.com/users/shalikashvili/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shalikashvili/subscriptions", "organizations_url": "https://api.github.com/users/shalikashvili/orgs", "repos_url": "https://api.github.com/users/shalikashvili/repos", "events_url": "https://api.github.com/users/shalikashvili/events{/privacy}", "received_events_url": "https://api.github.com/users/shalikashvili/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-11T18:21:47Z", "updated_at": "2020-05-26T22:11:29Z", "closed_at": "2020-05-26T22:11:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "The create_engine method _requires_ the engine_opts parameter, thus causing pre 2.4 code to throw TypeError exception. The engine_opts parameter should be optional", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/759", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/759/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/759/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/759", "id": 464106710, "node_id": "MDU6SXNzdWU0NjQxMDY3MTA=", "number": 759, "title": "How to connect db before app run?", "user": {"login": "luoling1993", "id": 16378228, "node_id": "MDQ6VXNlcjE2Mzc4MjI4", "avatar_url": "https://avatars0.githubusercontent.com/u/16378228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luoling1993", "html_url": "https://github.com/luoling1993", "followers_url": "https://api.github.com/users/luoling1993/followers", "following_url": "https://api.github.com/users/luoling1993/following{/other_user}", "gists_url": "https://api.github.com/users/luoling1993/gists{/gist_id}", "starred_url": "https://api.github.com/users/luoling1993/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luoling1993/subscriptions", "organizations_url": "https://api.github.com/users/luoling1993/orgs", "repos_url": "https://api.github.com/users/luoling1993/repos", "events_url": "https://api.github.com/users/luoling1993/events{/privacy}", "received_events_url": "https://api.github.com/users/luoling1993/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-04T07:24:28Z", "updated_at": "2019-07-04T07:27:19Z", "closed_at": "2019-07-04T07:27:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to init something in my blue_print, I implemented it with classmethod. And in the classmethod, I should connect to the db. But get some error`No application found. Either work inside a view function or push`.\r\n```python\r\n# factory.py\r\napp = Flask(__name__)\r\ndb.init_app(app)\r\nwith app.app_context():\r\n    db.create_all(app=app)\r\napp.register_blueprint(bp)  # blue print\r\n\r\n\r\n# api.py\r\ndef init():\r\n    SomeClass.init()\r\nbp = Blueprint('bp', __name__, init)\r\n\r\n# someclass.py\r\nclass SomeClass(object):\r\n    @classmethod\r\n    def init(cls):\r\n        # some logit must be connect to db and query\r\n        pass\r\n```\r\nI want to initialization the config from db while app run.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/758", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/758/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/758/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/758", "id": 462994631, "node_id": "MDU6SXNzdWU0NjI5OTQ2MzE=", "number": 758, "title": "How to use a return value from a function as the default value for a column?", "user": {"login": "Zhenye-Na", "id": 32248549, "node_id": "MDQ6VXNlcjMyMjQ4NTQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/32248549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zhenye-Na", "html_url": "https://github.com/Zhenye-Na", "followers_url": "https://api.github.com/users/Zhenye-Na/followers", "following_url": "https://api.github.com/users/Zhenye-Na/following{/other_user}", "gists_url": "https://api.github.com/users/Zhenye-Na/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zhenye-Na/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zhenye-Na/subscriptions", "organizations_url": "https://api.github.com/users/Zhenye-Na/orgs", "repos_url": "https://api.github.com/users/Zhenye-Na/repos", "events_url": "https://api.github.com/users/Zhenye-Na/events{/privacy}", "received_events_url": "https://api.github.com/users/Zhenye-Na/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-02T02:53:19Z", "updated_at": "2019-07-02T04:36:38Z", "closed_at": "2019-07-02T04:36:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI originally asked this question on StackOverflow but got no answers, so I think maybe I could ask here for more details. My question is as follows:\r\n\r\nI have used `flask-sqlalchemy` to create a model for my database\r\n\r\n```python\r\nclass User(db.Model, UserMixin):\r\n    \"\"\"A user who has an account on the website.\"\"\"\r\n    __tablename__ = 'users'\r\n\r\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\r\n    first_name = db.Column(db.String, nullable=False)\r\n    last_name = db.Column(db.String, nullable=False)\r\n\r\n    # here are some irrelevant columns ...\r\n\r\n    image_file = db.Column(db.String, nullable=False, default='default.jpg')\r\n```\r\n\r\nI am making my default image for the user profile picture as a hard-coded image saved in `static/img` folder. However, I would like to use gravatar which used a hash version of using email to create a github default flavored profile picture.\r\n\r\nI have the function\r\n\r\n```python\r\ndef avatar(self, size=128):\r\n    digest = md5(self.email.lower().encode('utf-8')).hexdigest()\r\n    return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(digest, size)\r\n```\r\n\r\nI would like to use the return value from the `avatar()` function as the default image. I tried to pass `avatar` and `self.avatar` as the argument for `default=`. However, they both do not work.\r\n\r\nDo you have any opinions or guides on how to solve this problem?\r\n\r\nThank you so much!!\r\n\r\nBest,\r\nZion", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/757", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/757/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/757/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/757", "id": 462803431, "node_id": "MDU6SXNzdWU0NjI4MDM0MzE=", "number": 757, "title": "Global \"db\" object versus request-scoped \"g.db\" object", "user": {"login": "gbrener", "id": 2840348, "node_id": "MDQ6VXNlcjI4NDAzNDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2840348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gbrener", "html_url": "https://github.com/gbrener", "followers_url": "https://api.github.com/users/gbrener/followers", "following_url": "https://api.github.com/users/gbrener/following{/other_user}", "gists_url": "https://api.github.com/users/gbrener/gists{/gist_id}", "starred_url": "https://api.github.com/users/gbrener/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gbrener/subscriptions", "organizations_url": "https://api.github.com/users/gbrener/orgs", "repos_url": "https://api.github.com/users/gbrener/repos", "events_url": "https://api.github.com/users/gbrener/events{/privacy}", "received_events_url": "https://api.github.com/users/gbrener/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-01T16:22:38Z", "updated_at": "2019-07-01T19:18:34Z", "closed_at": "2019-07-01T16:23:46Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "Hi Flask-SQLAlchemy, the [quickstart document](https://github.com/pallets/flask-sqlalchemy/blob/3aaca4ecee1e31aebf8632b07f58279ed8f374e2/docs/quickstart.rst) illustrates using a global `db` object shared across the project, but the [main Flask tutorial](http://flask.pocoo.org/docs/1.0/tutorial/database/) recommends storing the `db` object in a [request-scoped namespace object](http://flask.pocoo.org/docs/1.0/api/#flask.g) `g`. Is there a recommended way to use Flask-SQLAlchemy with the request-scoped object pattern? I could not find an example of this in the Flask-SQLAlchemy repository.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/756", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/756/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/756/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/756/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/756", "id": 459722507, "node_id": "MDU6SXNzdWU0NTk3MjI1MDc=", "number": 756, "title": "How can I query key's value in a text column from my table?", "user": {"login": "SuFIND", "id": 30424839, "node_id": "MDQ6VXNlcjMwNDI0ODM5", "avatar_url": "https://avatars2.githubusercontent.com/u/30424839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SuFIND", "html_url": "https://github.com/SuFIND", "followers_url": "https://api.github.com/users/SuFIND/followers", "following_url": "https://api.github.com/users/SuFIND/following{/other_user}", "gists_url": "https://api.github.com/users/SuFIND/gists{/gist_id}", "starred_url": "https://api.github.com/users/SuFIND/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SuFIND/subscriptions", "organizations_url": "https://api.github.com/users/SuFIND/orgs", "repos_url": "https://api.github.com/users/SuFIND/repos", "events_url": "https://api.github.com/users/SuFIND/events{/privacy}", "received_events_url": "https://api.github.com/users/SuFIND/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-24T07:00:20Z", "updated_at": "2019-06-24T08:09:34Z", "closed_at": "2019-06-24T08:09:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,all.\r\nThere is a problem that has bothered me in recent days. I designed an org_score table using the MySql 5.7 database. In the table I designed \"range\" column of text type, using json string to store time.\r\nThe contents of this field are as follows\uff1a\r\n\r\n`\r\n{\u201ctimeStart\u201d:\"2017-01-01\",\"timeEnd\":\"2017-02-01\"}\r\n`\r\n\r\nI can use the sql of `SELECT * FROM org_score WHERE range->'$.timeStart' >= '2017-01-01';`\r\n\r\nThis way I can directly query the timeStart key under range.  But I don't know how to use the ORM,  statement of flask-sqlalchemy. Go check this result.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/755", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/755/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/755/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/755/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/755", "id": 459578841, "node_id": "MDU6SXNzdWU0NTk1Nzg4NDE=", "number": 755, "title": "Documentation PDF", "user": {"login": "soerendip", "id": 3391614, "node_id": "MDQ6VXNlcjMzOTE2MTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3391614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soerendip", "html_url": "https://github.com/soerendip", "followers_url": "https://api.github.com/users/soerendip/followers", "following_url": "https://api.github.com/users/soerendip/following{/other_user}", "gists_url": "https://api.github.com/users/soerendip/gists{/gist_id}", "starred_url": "https://api.github.com/users/soerendip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soerendip/subscriptions", "organizations_url": "https://api.github.com/users/soerendip/orgs", "repos_url": "https://api.github.com/users/soerendip/repos", "events_url": "https://api.github.com/users/soerendip/events{/privacy}", "received_events_url": "https://api.github.com/users/soerendip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-23T13:54:19Z", "updated_at": "2019-06-23T14:40:18Z", "closed_at": "2019-06-23T14:40:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nis it possible to get the documentation as pdf? I saw some closed issues about this, but the solutions given there do not work anymore. It would be nice to have a link to a pdf version on this site: http://flask.pocoo.org/docs/1.0/\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/754", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/754/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/754/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/754", "id": 458703730, "node_id": "MDU6SXNzdWU0NTg3MDM3MzA=", "number": 754, "title": "SQLALCHEMY_DATABASE_URI can't affect while using foreign key?", "user": {"login": "imcoolair", "id": 52042293, "node_id": "MDQ6VXNlcjUyMDQyMjkz", "avatar_url": "https://avatars1.githubusercontent.com/u/52042293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imcoolair", "html_url": "https://github.com/imcoolair", "followers_url": "https://api.github.com/users/imcoolair/followers", "following_url": "https://api.github.com/users/imcoolair/following{/other_user}", "gists_url": "https://api.github.com/users/imcoolair/gists{/gist_id}", "starred_url": "https://api.github.com/users/imcoolair/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imcoolair/subscriptions", "organizations_url": "https://api.github.com/users/imcoolair/orgs", "repos_url": "https://api.github.com/users/imcoolair/repos", "events_url": "https://api.github.com/users/imcoolair/events{/privacy}", "received_events_url": "https://api.github.com/users/imcoolair/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-20T14:48:41Z", "updated_at": "2019-06-20T15:04:07Z", "closed_at": "2019-06-20T15:04:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I using the following codes can't create tables.\r\n\r\n```\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask import Flask\r\n\r\n\r\napp = Flask(__name__)\r\n\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@127.0.0.1/db1?charset=utf8mb4'\r\napp.config['SQLALCHEMY_BINDS'] = {\r\n    'db2': 'mysql+pymysql://root:@127.0.0.1/db2?charset=utf8mb4',\r\n}\r\n\r\n\r\ndb = SQLAlchemy(app)\r\n\r\n\r\nclass Table1(db.Model):\r\n    __tablename__ = \"table1\"\r\n    \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    relation_id = db.Column(db.Integer, db.ForeignKey('db2.table2.id'))\r\n\r\n\r\nclass Table2(db.Model):\r\n    __bind_key__ = \"db2\"\r\n    __tablename__ = \"table2\"\r\n    __table_args__ = {'schema': 'db2'}\r\n    \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    \r\ndb.create_all()\r\n```\r\n\r\nBut while I add ``SQLALCHEMY_DATABASE_URI`` to ``SQLALCHEMY_BINDS``, and set ``__bind_key__`` and ``__table_args__ ``  for Table1, everything works OK.\r\n\r\n```\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask import Flask\r\n\r\n\r\napp = Flask(__name__)\r\n\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@127.0.0.1/db1?charset=utf8mb4'\r\napp.config['SQLALCHEMY_BINDS'] = {\r\n    'db1': app.config['SQLALCHEMY_DATABASE_URI'],\r\n    'db2': 'mysql+pymysql://root:@127.0.0.1/db2?charset=utf8mb4',\r\n}\r\n\r\n\r\ndb = SQLAlchemy(app)\r\n\r\n\r\nclass Table1(db.Model):\r\n    __tablename__ = \"table1\"\r\n    __bind_key__ = \"db1\"\r\n    __table_args__ = {'schema': 'db1'}\r\n    \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    relation_id = db.Column(db.Integer, db.ForeignKey('db2.table2.id'))\r\n\r\n\r\nclass Table2(db.Model):\r\n    __bind_key__ = \"db2\"\r\n    __tablename__ = \"table2\"\r\n    __table_args__ = {'schema': 'db2'}\r\n    \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    \r\ndb.create_all()\r\n```\r\n\r\nAlso, while I delete the ``relation_id`` in Table1, everything works OK.\r\n```\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask import Flask\r\n\r\n\r\napp = Flask(__name__)\r\n\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:@127.0.0.1/db1?charset=utf8mb4'\r\napp.config['SQLALCHEMY_BINDS'] = {\r\n    'db2': 'mysql+pymysql://root:@127.0.0.1/db2?charset=utf8mb4',\r\n}\r\n\r\n\r\ndb = SQLAlchemy(app)\r\n\r\n\r\nclass Table1(db.Model):\r\n    __tablename__ = \"table1\"\r\n    \r\n    id = db.Column(db.Integer, primary_key=True)\r\n\r\n\r\nclass Table2(db.Model):\r\n    __bind_key__ = \"db2\"\r\n    __tablename__ = \"table2\"\r\n    __table_args__ = {'schema': 'db2'}\r\n    \r\n    id = db.Column(db.Integer, primary_key=True)\r\n    \r\ndb.create_all()\r\n```\r\n\r\nIs the feature while using foreign key must define in ``SQLALCHEMY_BINDS`` ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/753", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/753/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/753/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/753/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/753", "id": 458041382, "node_id": "MDU6SXNzdWU0NTgwNDEzODI=", "number": 753, "title": "raise_from_cause should try to use exception.__traceback__", "user": {"login": "ReallyLiri", "id": 16985735, "node_id": "MDQ6VXNlcjE2OTg1NzM1", "avatar_url": "https://avatars2.githubusercontent.com/u/16985735?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ReallyLiri", "html_url": "https://github.com/ReallyLiri", "followers_url": "https://api.github.com/users/ReallyLiri/followers", "following_url": "https://api.github.com/users/ReallyLiri/following{/other_user}", "gists_url": "https://api.github.com/users/ReallyLiri/gists{/gist_id}", "starred_url": "https://api.github.com/users/ReallyLiri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ReallyLiri/subscriptions", "organizations_url": "https://api.github.com/users/ReallyLiri/orgs", "repos_url": "https://api.github.com/users/ReallyLiri/repos", "events_url": "https://api.github.com/users/ReallyLiri/events{/privacy}", "received_events_url": "https://api.github.com/users/ReallyLiri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-19T14:17:00Z", "updated_at": "2019-06-19T14:21:40Z", "closed_at": "2019-06-19T14:19:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "nevermind, its my own confusion :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/752", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/752/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/752/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/752/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/752", "id": 457546695, "node_id": "MDU6SXNzdWU0NTc1NDY2OTU=", "number": 752, "title": "Suggestion to update API documentation for SQLAlchemy", "user": {"login": "jlorieau", "id": 17363669, "node_id": "MDQ6VXNlcjE3MzYzNjY5", "avatar_url": "https://avatars0.githubusercontent.com/u/17363669?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlorieau", "html_url": "https://github.com/jlorieau", "followers_url": "https://api.github.com/users/jlorieau/followers", "following_url": "https://api.github.com/users/jlorieau/following{/other_user}", "gists_url": "https://api.github.com/users/jlorieau/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlorieau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlorieau/subscriptions", "organizations_url": "https://api.github.com/users/jlorieau/orgs", "repos_url": "https://api.github.com/users/jlorieau/repos", "events_url": "https://api.github.com/users/jlorieau/events{/privacy}", "received_events_url": "https://api.github.com/users/jlorieau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-18T15:22:58Z", "updated_at": "2019-06-18T15:52:15Z", "closed_at": "2019-06-18T15:45:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The API documentation for the SQLAlchemy class provides the following example:\r\n```python\r\ndb = SQLAlchemy()\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n    db.init_app(app)\r\n    return app\r\n```\r\n\r\nhttps://flask-sqlalchemy.palletsprojects.com/en/2.x/api/\r\n\r\nHowever, it appears that the application context is needed to property configure the database:\r\n\r\n```python\r\ndb = SQLAlchemy()\r\n\r\ndef create_app():\r\n    app = Flask(__name__)\r\n    with app.app_context():\r\n        db.init_app(app)\r\n    return app\r\n```\r\n\r\nas per https://stackoverflow.com/questions/46540664/no-application-found-either-work-inside-a-view-function-or-push-an-application\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/751", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/751/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/751/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/751", "id": 454716402, "node_id": "MDU6SXNzdWU0NTQ3MTY0MDI=", "number": 751, "title": "Some master code not included in latest release", "user": {"login": "CrystalPea", "id": 20957548, "node_id": "MDQ6VXNlcjIwOTU3NTQ4", "avatar_url": "https://avatars3.githubusercontent.com/u/20957548?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CrystalPea", "html_url": "https://github.com/CrystalPea", "followers_url": "https://api.github.com/users/CrystalPea/followers", "following_url": "https://api.github.com/users/CrystalPea/following{/other_user}", "gists_url": "https://api.github.com/users/CrystalPea/gists{/gist_id}", "starred_url": "https://api.github.com/users/CrystalPea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CrystalPea/subscriptions", "organizations_url": "https://api.github.com/users/CrystalPea/orgs", "repos_url": "https://api.github.com/users/CrystalPea/repos", "events_url": "https://api.github.com/users/CrystalPea/events{/privacy}", "received_events_url": "https://api.github.com/users/CrystalPea/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-11T14:13:51Z", "updated_at": "2019-06-11T15:46:19Z", "closed_at": "2019-06-11T15:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nThis PR was merged in March 2018: https://github.com/pallets/flask-sqlalchemy/pull/613/files\r\n\r\nbut for some reason it was not released in version 2.4.0\r\n\r\nCould you please advise why this is and if it will be included in a release soon?\r\n\r\nI'm asking because organisation I work for uses the `count` argument on `paginate()` function included in that PR and we were positive it would be included in the next release since it was merged into master.\r\n\r\nI'm looking forward to hearing from you.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/750", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/750/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/750/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/750", "id": 454473728, "node_id": "MDU6SXNzdWU0NTQ0NzM3Mjg=", "number": 750, "title": "exception no route to host takes upto 30 secs", "user": {"login": "gil0109", "id": 19917617, "node_id": "MDQ6VXNlcjE5OTE3NjE3", "avatar_url": "https://avatars1.githubusercontent.com/u/19917617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gil0109", "html_url": "https://github.com/gil0109", "followers_url": "https://api.github.com/users/gil0109/followers", "following_url": "https://api.github.com/users/gil0109/following{/other_user}", "gists_url": "https://api.github.com/users/gil0109/gists{/gist_id}", "starred_url": "https://api.github.com/users/gil0109/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gil0109/subscriptions", "organizations_url": "https://api.github.com/users/gil0109/orgs", "repos_url": "https://api.github.com/users/gil0109/repos", "events_url": "https://api.github.com/users/gil0109/events{/privacy}", "received_events_url": "https://api.github.com/users/gil0109/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-11T04:21:14Z", "updated_at": "2019-06-11T15:40:49Z", "closed_at": "2019-06-11T15:40:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are connected to patroni (HA PostgresSQL).  \r\n\r\nWhen testing HA, when I delete the master database pod, patroni setups up the route to the backup master.  This takes about 300ms. \r\n\r\nWhen this happens, \r\n\r\nThe exception takes between 10=30s for the exception: \"could not connect to server: No route to host\"\r\n\r\n2019-06-03 20:01:**08**.658011 - call before exception\r\nDelay of about 10s (can be up to 30 s)\r\n2019-06-03 20:01:**18**.695091 - SQLAlchemyError of no route to host\r\n\r\nIs there a way to control the retry/timeout for this exception?  I noticed other database connection exceptions come up right away such as SQLAlchemyError [Message:  (psycopg2.OperationalError) server closed the connection unexpectedly].  It seems the only one that is delayed is the no route to host.\r\n\r\nMore details below of the logging we have:\r\n\r\n==> api_call_with_retry: Try #: 2; time: 2019-06-03 20:01:08.657124\r\n--> delay: 200; total delay: 200\r\n--> elapsed: 0:00:00.200595; total elapsed: 0:00:00.228596\r\n++> POST API call time before csr = statement: 2019-06-03 20:01:08.657280\r\n++> Time before citizen = statement: 2019-06-03 20:01:08.658011\r\n--> SQLAlchemyError: 2019-06-03 20:01:18.695091\r\n\r\n== Long Delay ===================================================================================================\r\n--> Message: (psycopg2.OperationalError) could not connect to server: No route to host\r\nIs the server running on host \"patroni-mastertheq\" (172.50.176.13) and accepting\r\nTCP/IP connections on port 5432?\r\n\r\n(Background on this error at: http://sqlalche.me/e/e3q8 )\r\n--> rollback time: 0:00:00.000207\r\n\r\nOther troubleshooting:  I also connected to the database using psql from the API pod and confirmed that the database connection drops and reconnects in less than a second.  So, I am assuming I can rule out the networking stack as the delay.\r\n\r\nAny help would be appreciated.\r\n\r\nThanks in advance...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/749", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/749/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/749/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/749/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/749", "id": 451828946, "node_id": "MDU6SXNzdWU0NTE4Mjg5NDY=", "number": 749, "title": "What does 'sqlite://' connection string connects to?", "user": {"login": "MiaMish", "id": 20612302, "node_id": "MDQ6VXNlcjIwNjEyMzAy", "avatar_url": "https://avatars3.githubusercontent.com/u/20612302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MiaMish", "html_url": "https://github.com/MiaMish", "followers_url": "https://api.github.com/users/MiaMish/followers", "following_url": "https://api.github.com/users/MiaMish/following{/other_user}", "gists_url": "https://api.github.com/users/MiaMish/gists{/gist_id}", "starred_url": "https://api.github.com/users/MiaMish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MiaMish/subscriptions", "organizations_url": "https://api.github.com/users/MiaMish/orgs", "repos_url": "https://api.github.com/users/MiaMish/repos", "events_url": "https://api.github.com/users/MiaMish/events{/privacy}", "received_events_url": "https://api.github.com/users/MiaMish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-04T07:00:05Z", "updated_at": "2019-06-04T14:15:56Z", "closed_at": "2019-06-04T12:03:56Z", "author_association": "NONE", "active_lock_reason": "off-topic", "body": "I was looking at the some tests:\r\nhttps://github.com/pallets/flask-sqlalchemy/blob/master/tests/test_binds.py\r\n\r\nThey use the following connection string definitions:\r\n\r\n```\r\napp.config['SQLALCHEMY_BINDS'] = {\r\n      'foo': 'sqlite://',\r\n      'bar': 'sqlite://'\r\n}\r\n```\r\n\r\nWhat does it mean? What does it connect to? Is it the same as `'sqlite:///:memory:'`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/746", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/746/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/746/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/746/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/746", "id": 450791334, "node_id": "MDU6SXNzdWU0NTA3OTEzMzQ=", "number": 746, "title": "error connecting to mysql in docker containers", "user": {"login": "thiagoalmedeiros", "id": 1594367, "node_id": "MDQ6VXNlcjE1OTQzNjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1594367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoalmedeiros", "html_url": "https://github.com/thiagoalmedeiros", "followers_url": "https://api.github.com/users/thiagoalmedeiros/followers", "following_url": "https://api.github.com/users/thiagoalmedeiros/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoalmedeiros/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoalmedeiros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoalmedeiros/subscriptions", "organizations_url": "https://api.github.com/users/thiagoalmedeiros/orgs", "repos_url": "https://api.github.com/users/thiagoalmedeiros/repos", "events_url": "https://api.github.com/users/thiagoalmedeiros/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoalmedeiros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-31T13:08:38Z", "updated_at": "2019-08-01T13:30:38Z", "closed_at": "2019-05-31T14:03:26Z", "author_association": "NONE", "active_lock_reason": "off-topic", "body": "I have an application that works normally when I use a desktop environment. However, when I put in a docker environment the following error is returned:\r\n\r\n```\r\nBrokenFilesystemWarning)\r\n172.19.0.1 - - [31/May/2019 12:43:18] \"GET /data/ HTTP/1.1\" 500 -\r\nTraceback (most recent call last):\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2309, in __call__\r\nreturn self.wsgi_app(environ, start_response)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask_socketio/__init__.py\", line 43, in __call__\r\nstart_response)\r\nFile \"/usr/local/lib/python3.6/dist-packages/engineio/middleware.py\", line 67, in __call__\r\nreturn self.wsgi_app(environ, start_response)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2295, in wsgi_app\r\nresponse = self.handle_exception(e)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\nreturn cors_after_request(app.make_response(f(*args, **kwargs)))\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1741, in handle_exception\r\nreraise(exc_type, exc_value, tb)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\", line 35, in reraise\r\nraise value\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 2292, in wsgi_app\r\nresponse = self.full_dispatch_request()\r\n File \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1815, in full_dispatch_request\r\nrv = self.handle_user_exception(e)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask_cors/extension.py\", line 161, in wrapped_function\r\nreturn cors_after_request(app.make_response(f(*args, **kwargs)))\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1718, in handle_user_exception\r\nreraise(exc_type, exc_value, tb)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/_compat.py\", line 35, in reraise\r\n raise value\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1813, in full_dispatch_request\r\nrv = self.dispatch_request()\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask/app.py\", line 1799, in dispatch_request\r\nreturn self.view_functions[rule.endpoint](**req.view_args)\r\nFile \"/usr/local/lib/python3.6/dist-packages/flask_cors/decorator.py\", line 128, in wrapped_function\r\nresp = make_response(f(*args, **kwargs))\r\nFile \"/tmp/app/views/main.py\", line 63, in data\r\nbd_data = get_db_data()\r\nFile \"/tmp/app/views/main.py\", line 81, in get_db_data\r\nconn = MySQLdb.connect(user=\"root\", passwd=\"root\", db=\"test\")\r\nFile \"/usr/local/lib/python3.6/dist-packages/MySQLdb/__init__.py\", line 85, in Connect\r\nreturn Connection(*args, **kwargs)\r\nFile \"/usr/local/lib/python3.6/dist-packages/MySQLdb/connections.py\", line 204, in __init__\r\nsuper(Connection, self).__init__(*args, **kwargs2)\r\n_mysql_exceptions.OperationalError: (2002, \"Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\")\r\n```\r\n\r\n\r\nHere is the file for docker compose:\r\n\r\n```\r\nversion: '3'\r\nservices:\r\n    db:\r\n        image: mysql\r\n        container_name: container-db\r\n        environment:\r\n            - MYSQL_ROOT_PASSWORD=root\r\n            - MYSQL_DATABASE=test\r\n        ports:\r\n            - \"3306:3306\"\r\n        volumes:\r\n            - ./mysql:/var/lib/mysql\r\n        networks:\r\n            - app-tier\r\n        restart: always \r\n    service:\r\n        image: service-image\r\n        container_name: container-service\r\n        ports:\r\n            - \"8080:8080\"\r\n        entrypoint: [\"./wait-for-it.sh\",\"db:3306\",\"--timeout=0\",\"--strict\",\"--\",\"python\",\"run.py\"]\r\n        depends_on:\r\n            - db\r\n        networks:\r\n            - app-tier\r\n        restart: always\r\n        environment:\r\n            DB_HOST: db:3306\r\n            YOLO_VERSION: v2\r\n    app:\r\n        image: view-image\r\n        container_name: container-view-app\r\n        ports:\r\n            - \"80:80\"\r\n        depends_on:\r\n            - service\r\n        networks:\r\n            - app-tier\r\n        restart: always\r\nnetworks:\r\n  app-tier:\r\n    driver: bridge\r\n```\r\n\r\nand the variables that I pass to SQLAlchemy:\r\n\r\n```\r\nDB_USERNAME = 'root'\r\nDB_PASSWORD = 'root'\r\nDB_NAME = 'test'\r\n\r\nDB_HOST = str(os.environ.get('DB_HOST'))\r\nYOLO_VERSION = str(os.environ.get('YOLO_VERSION'))\r\n\r\n\r\nSQLALCHEMY_DATABASE_URI = 'mysql://' + DB_USERNAME + ':' + DB_PASSWORD + '@'+DB_HOST+'/' + DB_NAME\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/745", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/745/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/745/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/745/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/745", "id": 449593431, "node_id": "MDU6SXNzdWU0NDk1OTM0MzE=", "number": 745, "title": "forked process - remove engine", "user": {"login": "slippers", "id": 1882613, "node_id": "MDQ6VXNlcjE4ODI2MTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1882613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slippers", "html_url": "https://github.com/slippers", "followers_url": "https://api.github.com/users/slippers/followers", "following_url": "https://api.github.com/users/slippers/following{/other_user}", "gists_url": "https://api.github.com/users/slippers/gists{/gist_id}", "starred_url": "https://api.github.com/users/slippers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slippers/subscriptions", "organizations_url": "https://api.github.com/users/slippers/orgs", "repos_url": "https://api.github.com/users/slippers/repos", "events_url": "https://api.github.com/users/slippers/events{/privacy}", "received_events_url": "https://api.github.com/users/slippers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-29T04:34:18Z", "updated_at": "2020-03-02T21:57:24Z", "closed_at": "2019-05-29T11:53:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "using flask and celery and was wondering if anybody would share their solution to forking process.  When a process is forked by uwsig or celery the app get copied along with the session.  so the various sessions clobber each other.  celery offers a simple check if forked.  currently using uwsgi lazy-apps which is not ideal.  \r\n\r\nchecking if forked.\r\n[SessionManager](http://docs.celeryproject.org/en/latest/_modules/celery/backends/database/session.html?highlight=sqlalchemy)\r\n\r\ni see that the create_scoped_session can be altered with scopefunc.  are there any examples?\r\n\r\nthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/743", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/743/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/743/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/743/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/743", "id": 448930199, "node_id": "MDU6SXNzdWU0NDg5MzAxOTk=", "number": 743, "title": "how to use multiprocessing in flask-sqlclchemy?", "user": {"login": "zlg358", "id": 34515772, "node_id": "MDQ6VXNlcjM0NTE1Nzcy", "avatar_url": "https://avatars3.githubusercontent.com/u/34515772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zlg358", "html_url": "https://github.com/zlg358", "followers_url": "https://api.github.com/users/zlg358/followers", "following_url": "https://api.github.com/users/zlg358/following{/other_user}", "gists_url": "https://api.github.com/users/zlg358/gists{/gist_id}", "starred_url": "https://api.github.com/users/zlg358/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zlg358/subscriptions", "organizations_url": "https://api.github.com/users/zlg358/orgs", "repos_url": "https://api.github.com/users/zlg358/repos", "events_url": "https://api.github.com/users/zlg358/events{/privacy}", "received_events_url": "https://api.github.com/users/zlg358/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-27T16:18:21Z", "updated_at": "2019-05-27T17:23:07Z", "closed_at": "2019-05-27T17:23:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two connections in my project.\r\nSQLALCHEMY_BINDS = {\"a_bind\": mysql1, \"b_bind\": mysql2}\r\n```python\r\nfrom multiprocessing import Pool\r\n\r\nclass Table1:\r\n    __bind_key__=\"a_bind\"\r\n    id=...\r\n\r\nclass Table2:\r\n    __bind_key__=\"b_bind\"\r\n    id=...\r\n\r\ndef fun(single_element):\r\n    result=Table1.query(id=single_element).all()\r\n    new_data=[Table2(id=i.name) for i in result]\r\n    db.session.add_all(new_data)\r\n    db.session.commit()\r\n    db.session.remove()\r\n\r\npool=Pool(10)\r\npool.apply_async(fun, element_list)\r\npool.close()\r\npool.join()\r\n```\r\nAbove code, which is not work. why? Is there any extra settings?\r\nthe problem can be solved with the package of [SQLAlchemy](https://www.sqlalchemy.org/), but is not work in flask-sqlalchemy.\r\nthanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/741", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/741/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/741/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/741/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/741", "id": 447357126, "node_id": "MDU6SXNzdWU0NDczNTcxMjY=", "number": 741, "title": "comparing adjacent rows in R ", "user": {"login": "StephZank", "id": 49258845, "node_id": "MDQ6VXNlcjQ5MjU4ODQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/49258845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/StephZank", "html_url": "https://github.com/StephZank", "followers_url": "https://api.github.com/users/StephZank/followers", "following_url": "https://api.github.com/users/StephZank/following{/other_user}", "gists_url": "https://api.github.com/users/StephZank/gists{/gist_id}", "starred_url": "https://api.github.com/users/StephZank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/StephZank/subscriptions", "organizations_url": "https://api.github.com/users/StephZank/orgs", "repos_url": "https://api.github.com/users/StephZank/repos", "events_url": "https://api.github.com/users/StephZank/events{/privacy}", "received_events_url": "https://api.github.com/users/StephZank/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-05-22T21:44:47Z", "updated_at": "2019-05-22T21:59:07Z", "closed_at": "2019-05-22T21:59:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, \r\n\r\nIn my dataframe, I have a column \"dates\" and I would like for R to walk through each row of dates in a loop to see if the date before or after it is within a 3-14 day range, and if not, it's indexed to a list to be removed at the end of the loop. \r\n\r\nfor example: \r\nmy_dates <- c( 1/4/2019, 1/18/2019, 4/3/2019, 2/20/2019, 4/5/2019)\r\nI would want to remove the entire row containing 2/20/2019 because there is no other date that is within 3-14 days of that date. \r\n\r\nAny help would be greatly appreciated! \r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/739", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/739/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/739/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/739/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/739", "id": 445854841, "node_id": "MDU6SXNzdWU0NDU4NTQ4NDE=", "number": 739, "title": "create_engine() missing 1 required positional argument: 'engine_opts", "user": {"login": "jjRick", "id": 50807451, "node_id": "MDQ6VXNlcjUwODA3NDUx", "avatar_url": "https://avatars1.githubusercontent.com/u/50807451?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjRick", "html_url": "https://github.com/jjRick", "followers_url": "https://api.github.com/users/jjRick/followers", "following_url": "https://api.github.com/users/jjRick/following{/other_user}", "gists_url": "https://api.github.com/users/jjRick/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjRick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjRick/subscriptions", "organizations_url": "https://api.github.com/users/jjRick/orgs", "repos_url": "https://api.github.com/users/jjRick/repos", "events_url": "https://api.github.com/users/jjRick/events{/privacy}", "received_events_url": "https://api.github.com/users/jjRick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-19T19:26:53Z", "updated_at": "2019-05-20T19:40:27Z", "closed_at": "2019-05-20T19:40:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use `db.create_engine` to connect to a second database in a view. My app was working yesterday, but after I tried it on a new machine with a fresh virtualenv, it's no longer working. I think this is due to the changes in #684.\r\n\r\n```python\r\nx = 'postgres://*****' \r\nengine = db.create_engine(x)\r\n```\r\n\r\n```pytb\r\ncreate_engine() missing 1 required positional argument: 'engine_opts'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/738", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/738/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/738/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/738/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/738", "id": 444984663, "node_id": "MDU6SXNzdWU0NDQ5ODQ2NjM=", "number": 738, "title": "Relationship update using flask marshmallow does not work", "user": {"login": "liorchen", "id": 1812356, "node_id": "MDQ6VXNlcjE4MTIzNTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1812356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liorchen", "html_url": "https://github.com/liorchen", "followers_url": "https://api.github.com/users/liorchen/followers", "following_url": "https://api.github.com/users/liorchen/following{/other_user}", "gists_url": "https://api.github.com/users/liorchen/gists{/gist_id}", "starred_url": "https://api.github.com/users/liorchen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liorchen/subscriptions", "organizations_url": "https://api.github.com/users/liorchen/orgs", "repos_url": "https://api.github.com/users/liorchen/repos", "events_url": "https://api.github.com/users/liorchen/events{/privacy}", "received_events_url": "https://api.github.com/users/liorchen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-16T14:20:59Z", "updated_at": "2019-05-16T14:57:44Z", "closed_at": "2019-05-16T14:57:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\n\r\nThe following code produces constraint error (unable to update foreign key with null value:\r\n\r\n```\r\nclass Model1(db.Model):\r\n  __tablename__ = \"model1\"\r\n  id = db.Column(db.Integer, primary_key=True)\r\n  field1 = db.Column(db.String, nullable=True)\r\n  model2 = db.relationship('Model2', uselist=False, back_populates='alert', lazy='select')\r\n\r\nclass Model2(db.Model):\r\n  __tablename__ = \"model2\"\r\n  id = db.Column(db.Integer, primary_key=True)\r\n  model1_id = db.Column(db.Integer, db.ForeignKey('model1.id'), nullable=False)\r\n  field11 = db.Column(db.String, nullable=True)\r\n\r\nclass Model2Schema(ModelSchema):\r\n    class Meta:\r\n        model = Model2\r\n        sqla_session = db.session\r\n\r\nclass Model1Schema(ModelSchema):\r\n    model2 = Nested(Model2, many=True,\r\n                          exclude=('id', 'model2',))\r\n\r\n    class Meta:\r\n        model = Model2\r\n        sqla_session = db.session\r\n\r\nmodel1 = Model1.query.get_or_404(1)\r\njson = { \"id\": 1, \"field1\": \"asdasd\" , \"model2\": { \"field11\": \"asdasdasdas\" } } \r\nModel1Schema().load(json, instance=model1, partial=True)\r\ndb.session.commit()\r\n```\r\nthe exception thrown is that updating model2 fails due to an attempt to set model1_id to null\r\nany idea if that's a bug or am I doing anything wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/737", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/737/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/737/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/737/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/737", "id": 443911485, "node_id": "MDU6SXNzdWU0NDM5MTE0ODU=", "number": 737, "title": "versioned_session not working with Flask and SQL Alchemy", "user": {"login": "bmakan", "id": 15369567, "node_id": "MDQ6VXNlcjE1MzY5NTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/15369567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bmakan", "html_url": "https://github.com/bmakan", "followers_url": "https://api.github.com/users/bmakan/followers", "following_url": "https://api.github.com/users/bmakan/following{/other_user}", "gists_url": "https://api.github.com/users/bmakan/gists{/gist_id}", "starred_url": "https://api.github.com/users/bmakan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bmakan/subscriptions", "organizations_url": "https://api.github.com/users/bmakan/orgs", "repos_url": "https://api.github.com/users/bmakan/repos", "events_url": "https://api.github.com/users/bmakan/events{/privacy}", "received_events_url": "https://api.github.com/users/bmakan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-14T13:20:28Z", "updated_at": "2019-05-14T13:35:30Z", "closed_at": "2019-05-14T13:35:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried solutions presented in #175 and some other similar but nothing seems to be working correctly. My schema has `version` column and `[mytable]_history` table created, but changes don't get saved in it.\r\n\r\nBased on [this answer](https://github.com/pallets/flask-sqlalchemy/issues/175#issuecomment-164362976), expected it would work with:\r\n```python\r\ndb = SQLAlchemy(app)\r\nversioned_session(db.session)\r\n```\r\n\r\nWhat's the correct way of using the versioning (if it's still supported)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/735", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/735/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/735/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/735/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/735", "id": 443026072, "node_id": "MDU6SXNzdWU0NDMwMjYwNzI=", "number": 735, "title": "Better support for enum", "user": {"login": "xim", "id": 169057, "node_id": "MDQ6VXNlcjE2OTA1Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/169057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xim", "html_url": "https://github.com/xim", "followers_url": "https://api.github.com/users/xim/followers", "following_url": "https://api.github.com/users/xim/following{/other_user}", "gists_url": "https://api.github.com/users/xim/gists{/gist_id}", "starred_url": "https://api.github.com/users/xim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xim/subscriptions", "organizations_url": "https://api.github.com/users/xim/orgs", "repos_url": "https://api.github.com/users/xim/repos", "events_url": "https://api.github.com/users/xim/events{/privacy}", "received_events_url": "https://api.github.com/users/xim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-11T18:58:12Z", "updated_at": "2019-05-11T21:10:09Z", "closed_at": "2019-05-11T19:20:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to be able to use an sqlachemy Enum column, and have the name stored to DB while the value is shown in the UI. I've tried the na\u00efve approach:\r\n\r\n```\r\nclass PageType(enum.Enum):\r\n    html = 'HTML page'\r\n    raw = 'Raw text'\r\n\r\nclass Page(db.Model):\r\n    [...]\r\n    page_type = Column(db.Enum(PageType, name='page_type'))\r\n\r\nclass PageAdmin(sqla.ModelView):\r\n    [...]\r\n\r\nadmin.add_view(PageAdmin(Page, db.session))\r\n```\r\n\r\nThis works, but shows \"Page Type\" with the options {html,raw} instead of what I'd like, {HTML page,Raw text}\r\n\r\nDoing e.g. `page_type = Column(db.Enum(*[e.value for e in PageType], name='page_type'))` works, but will save the full value in the db instead of the enum name, and looks ugly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/733", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/733/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/733/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/733/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/733", "id": 442187785, "node_id": "MDU6SXNzdWU0NDIxODc3ODU=", "number": 733, "title": "Support of Apache Phoenix", "user": {"login": "archenroot", "id": 553512, "node_id": "MDQ6VXNlcjU1MzUxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/553512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/archenroot", "html_url": "https://github.com/archenroot", "followers_url": "https://api.github.com/users/archenroot/followers", "following_url": "https://api.github.com/users/archenroot/following{/other_user}", "gists_url": "https://api.github.com/users/archenroot/gists{/gist_id}", "starred_url": "https://api.github.com/users/archenroot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/archenroot/subscriptions", "organizations_url": "https://api.github.com/users/archenroot/orgs", "repos_url": "https://api.github.com/users/archenroot/repos", "events_url": "https://api.github.com/users/archenroot/events{/privacy}", "received_events_url": "https://api.github.com/users/archenroot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-09T11:26:48Z", "updated_at": "2019-05-09T11:28:17Z", "closed_at": "2019-05-09T11:27:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found some old apache phoenix projects, but not sure if it is or not integrated in flask-sqlalchemy at moment. PHoenix has bit (not much) different dialect (UPSERT instead of INSERT & UPDATE, etc.) which comes from fact its SQL access layer into Hbase.\r\n\r\nAny hints welcomed, otherwise I use now phoenixdb module with pure SQL.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/732", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/732/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/732/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/732/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/732", "id": 441939920, "node_id": "MDU6SXNzdWU0NDE5Mzk5MjA=", "number": 732, "title": "Add code of conduct", "user": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 549246255, "node_id": "MDU6TGFiZWw1NDkyNDYyNTU=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/good%20first%20issue", "name": "good first issue", "color": "fbca04", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-08T21:28:37Z", "updated_at": "2019-05-31T13:58:30Z", "closed_at": "2019-05-31T13:58:30Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Let's add a code of conduct to be consistent with other Pallets projects. We can copy this one from `Flask`: https://github.com/pallets/flask/pull/3178.\r\n\r\nThis can be either created with the wizard or with a PR that adds a `CODE_OF_CONDUCT.md` file.\r\n\r\nWizard instructions:\r\n- Go to the [repo community page](https://github.com/pallets/flask-sqlalchemy/community)\r\n- Click on \"Add\" next to \"Code of conduct\"\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/729", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/729/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/729/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/729/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/729", "id": 441220701, "node_id": "MDU6SXNzdWU0NDEyMjA3MDE=", "number": 729, "title": "Deprecate configs in version 3?", "user": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-05-07T13:02:48Z", "updated_at": "2020-05-26T15:36:20Z", "closed_at": "2020-05-26T15:36:19Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The [docs indicate](https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/#configuration-keys) that a number of config settings will be deprecated in version 3. Is it too soon to work on removing those settings for version 3?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/728", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/728/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/728/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/728/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/728", "id": 440932772, "node_id": "MDU6SXNzdWU0NDA5MzI3NzI=", "number": 728, "title": "Create GitHub issue template for new issues", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/9", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/9", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/9/labels", "id": 4124337, "node_id": "MDk6TWlsZXN0b25lNDEyNDMzNw==", "number": 9, "title": "2.x", "description": "Collecting issues and PRs that might not go into the next 2.x release but that we want to ship before 3.0.", "creator": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2019-03-09T07:14:01Z", "updated_at": "2020-05-25T19:03:40Z", "due_on": null, "closed_at": "2020-05-25T19:03:07Z"}, "comments": 3, "created_at": "2019-05-06T22:40:02Z", "updated_at": "2019-10-10T03:27:37Z", "closed_at": "2019-10-10T03:27:37Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I'd like to see FSA have an issue template that would show up when users create new issues that asks them to provide:\r\n\r\n* OS Details\r\n* Python, SQLAlchemy, and Flask-SQLAlchemy versions\r\n* A [MCVE](https://stackoverflow.com/help/mcve)\r\n* A reminder that FSA is a thin wrapper that combines Flask and SQLAlchemy and to double-check that their issues is really an FSA issue and not an SQLAlchemy issue before submitting.\r\n* A reminder that GitHub issues are not to be used for support requests and point them to other places (Stack Overflow) for that kind of help.\r\n* A reminder to **be extra nice** since [unkind people are the hardest part about maintaining OSS](https://www.youtube.com/watch?v=tzFWz5fiVKU&feature=youtu.be&t=49m32s)??", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/725", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/725/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/725/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/725/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/725", "id": 440762881, "node_id": "MDU6SXNzdWU0NDA3NjI4ODE=", "number": 725, "title": "Add testing and docs dependencies to setup.py", "user": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-06T15:42:48Z", "updated_at": "2019-05-09T16:15:29Z", "closed_at": "2019-05-06T16:03:31Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "While working on a new contributing document for this project (#723), I found that testing and documentation dependencies aren't included in [Flask-SQLAlchemy](https://github.com/pallets/flask-sqlalchemy/blob/master/setup.py)'s setup.py file like they are in [Flask](https://github.com/pallets/flask/blob/master/setup.py#L44-L56)'s.\r\n\r\nIf you agree that testing and documentation dependencies should be in the `setup.py` file, I can figure out which dependencies Flask-SQLAlchemy needs and add them to the `setup.py` file.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/724", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/724/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/724/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/724/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/724", "id": 440694028, "node_id": "MDU6SXNzdWU0NDA2OTQwMjg=", "number": 724, "title": "SQLALCHEMY_ECHO logger handler error", "user": {"login": "revmischa", "id": 245131, "node_id": "MDQ6VXNlcjI0NTEzMQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/245131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revmischa", "html_url": "https://github.com/revmischa", "followers_url": "https://api.github.com/users/revmischa/followers", "following_url": "https://api.github.com/users/revmischa/following{/other_user}", "gists_url": "https://api.github.com/users/revmischa/gists{/gist_id}", "starred_url": "https://api.github.com/users/revmischa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revmischa/subscriptions", "organizations_url": "https://api.github.com/users/revmischa/orgs", "repos_url": "https://api.github.com/users/revmischa/repos", "events_url": "https://api.github.com/users/revmischa/events{/privacy}", "received_events_url": "https://api.github.com/users/revmischa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/9", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/9", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/9/labels", "id": 4124337, "node_id": "MDk6TWlsZXN0b25lNDEyNDMzNw==", "number": 9, "title": "2.x", "description": "Collecting issues and PRs that might not go into the next 2.x release but that we want to ship before 3.0.", "creator": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2019-03-09T07:14:01Z", "updated_at": "2020-05-25T19:03:40Z", "due_on": null, "closed_at": "2020-05-25T19:03:07Z"}, "comments": 9, "created_at": "2019-05-06T13:14:39Z", "updated_at": "2019-05-06T22:33:22Z", "closed_at": "2019-05-06T22:33:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I set `SQLALCHEMY_ECHO=1` I get:\r\n```\r\n  File \"/Users/cyber/dev/jb/bleh/api/monitor.py\", line 25, in get\r\n    return {'ok': bool(db.engine.execute(\"SELECT 1\").scalar())}\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/flask_sqlalchemy/__init__.py\", line 937, in engine\r\n    return self.get_engine()\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/flask_sqlalchemy/__init__.py\", line 956, in get_engine\r\n    return connector.get_engine()\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/flask_sqlalchemy/__init__.py\", line 561, in get_engine\r\n    self._engine = rv = self._sa.create_engine(sa_url, options)\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/flask_sqlalchemy/__init__.py\", line 966, in create_engine\r\n    return sqlalchemy.create_engine(sa_url, **engine_opts)\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/sqlalchemy/engine/__init__.py\", line 435, in create_engine\r\n    return strategy.create(*args, **kwargs)\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/sqlalchemy/engine/strategies.py\", line 177, in create\r\n    engine = engineclass(pool, dialect, u, **engine_args)\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/sqlalchemy/engine/base.py\", line 1864, in __init__\r\n    self.echo = echo\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/sqlalchemy/log.py\", line 222, in __set__\r\n    instance_logger(instance, echoflag=value)\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/sqlalchemy/log.py\", line 199, in instance_logger\r\n    logger = InstanceLogger(echoflag, name)\r\n  File \"/Users/cyber/.virtualenvs/bleh-kgiLTi-5/lib/python3.7/site-packages/sqlalchemy/log.py\", line 96, in __init__\r\n    if self._echo_map[echo] <= logging.INFO and not self.logger.handlers:\r\nKeyError: '1'\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/723", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/723/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/723/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/723/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/723", "id": 440542873, "node_id": "MDU6SXNzdWU0NDA1NDI4NzM=", "number": 723, "title": "Add a contributing guidelines document?", "user": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 518878555, "node_id": "MDU6TGFiZWw1MTg4Nzg1NTU=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-06T05:14:32Z", "updated_at": "2020-05-26T15:14:19Z", "closed_at": "2020-05-26T15:14:19Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hi there! \ud83d\udc4b \r\n\r\nThanks for creating a great package - we use it for our [FEC API](https://github.com/fecgov/openFEC). In preparation for PyCon sprints, I was checking out your project and found that there isn't a contributing guide.\r\n\r\nHere's the [GitHub info](https://help.github.com/en/articles/setting-guidelines-for-repository-contributors) on why contributing guidelines are helpful - I'd be happy to work on this issue if you'd like! \r\n\r\nThanks again,\r\nLaura", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/719", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/719/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/719/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/719/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/719", "id": 435271995, "node_id": "MDU6SXNzdWU0MzUyNzE5OTU=", "number": 719, "title": "Version 2.4.0 - get_or_404()", "user": {"login": "clintonm9", "id": 12244813, "node_id": "MDQ6VXNlcjEyMjQ0ODEz", "avatar_url": "https://avatars3.githubusercontent.com/u/12244813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clintonm9", "html_url": "https://github.com/clintonm9", "followers_url": "https://api.github.com/users/clintonm9/followers", "following_url": "https://api.github.com/users/clintonm9/following{/other_user}", "gists_url": "https://api.github.com/users/clintonm9/gists{/gist_id}", "starred_url": "https://api.github.com/users/clintonm9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clintonm9/subscriptions", "organizations_url": "https://api.github.com/users/clintonm9/orgs", "repos_url": "https://api.github.com/users/clintonm9/repos", "events_url": "https://api.github.com/users/clintonm9/events{/privacy}", "received_events_url": "https://api.github.com/users/clintonm9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-19T18:55:22Z", "updated_at": "2019-04-19T19:21:15Z", "closed_at": "2019-04-19T19:21:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why has version 2.4.0 never been released? I would like to use the get_or_404() query method.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/714", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/714/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/714/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/714/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/714", "id": 433751072, "node_id": "MDU6SXNzdWU0MzM3NTEwNzI=", "number": 714, "title": "SSL for Amazon Aurora PostgreSQL", "user": {"login": "JyothiGandi", "id": 12841596, "node_id": "MDQ6VXNlcjEyODQxNTk2", "avatar_url": "https://avatars3.githubusercontent.com/u/12841596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JyothiGandi", "html_url": "https://github.com/JyothiGandi", "followers_url": "https://api.github.com/users/JyothiGandi/followers", "following_url": "https://api.github.com/users/JyothiGandi/following{/other_user}", "gists_url": "https://api.github.com/users/JyothiGandi/gists{/gist_id}", "starred_url": "https://api.github.com/users/JyothiGandi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JyothiGandi/subscriptions", "organizations_url": "https://api.github.com/users/JyothiGandi/orgs", "repos_url": "https://api.github.com/users/JyothiGandi/repos", "events_url": "https://api.github.com/users/JyothiGandi/events{/privacy}", "received_events_url": "https://api.github.com/users/JyothiGandi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-16T12:24:30Z", "updated_at": "2019-04-16T12:34:35Z", "closed_at": "2019-04-16T12:34:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to add SSL to encrypt a connection to Amazon Aurora DB like below. But it was throwing an error. Am I missing something?\r\n\r\n>   File \"...venv/lib/python2.7/site-packages/sqlalchemy/engine/default.py\", line 393, in connect\r\n    return self.dbapi.connect(*cargs, **cparams)\r\nTypeError: connect() got an unexpected keyword argument 'ssl_ca'\r\n\r\n\r\n### Config:\r\nFlask==0.12.4\r\nFlask-SQLAlchemy==2.3.2\r\npg8000==1.12.5\r\n...\r\n\r\n### Code\r\n```\r\nSQLALCHEMY_DATABASE_URI = \"postgresql+pg8000://my-user-name:my-user-password@qwertyuiop.us-east-1.rds.amazonaws.com:5432/my-db-name?ssl_ca=etc/rds-combined-ca-bundle.pem\"\r\n\r\ndef create_app(load_admin=True):\r\n    ...\r\n    app = Flask(__name__,\r\n                template_folder=settings.STATIC_ASSETS_PATH,\r\n                static_folder=settings.STATIC_ASSETS_PATH,\r\n                static_path='/static')\r\n\r\n    # configure our database\r\n    app.config['SQLALCHEMY_DATABASE_URI'] = settings.SQLALCHEMY_DATABASE_URI\r\n    app.config.update(settings.all_settings())\r\n\r\n    provision_app(app)\r\n    db.init_app(app)\r\n    ....\r\n    return app\r\n\r\n```\r\n\r\nLink:\r\nhttps://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/713", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/713/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/713/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/713/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/713", "id": 432743136, "node_id": "MDU6SXNzdWU0MzI3NDMxMzY=", "number": 713, "title": "Changes won\u2019t commit to database", "user": {"login": "johnroper100", "id": 9782943, "node_id": "MDQ6VXNlcjk3ODI5NDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9782943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/johnroper100", "html_url": "https://github.com/johnroper100", "followers_url": "https://api.github.com/users/johnroper100/followers", "following_url": "https://api.github.com/users/johnroper100/following{/other_user}", "gists_url": "https://api.github.com/users/johnroper100/gists{/gist_id}", "starred_url": "https://api.github.com/users/johnroper100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/johnroper100/subscriptions", "organizations_url": "https://api.github.com/users/johnroper100/orgs", "repos_url": "https://api.github.com/users/johnroper100/repos", "events_url": "https://api.github.com/users/johnroper100/events{/privacy}", "received_events_url": "https://api.github.com/users/johnroper100/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-12T20:58:08Z", "updated_at": "2019-04-12T20:59:50Z", "closed_at": "2019-04-12T20:59:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to import rows into my database in bulk, but the changes aren\u2019t saving to the database. Any ideas why?\r\n\r\nHere is my code: \r\n\r\n```\r\nfor row in media:\r\n        if row[5] == 'Blend':\r\n            blend = Blend.query.filter_by(old_ID=row[4]).first()\r\n            if blend:\r\n                blend.imagefolder = \"/\".join((row[16].split(\"/\")[4:])[:-1])\r\n                blend.images.append(ntpath.basename(row[16]))\r\n                db.session.commit()\r\n```\r\n\r\nNeither blend.imagefolder or blend.images changes are saving.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/712", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/712/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/712/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/712/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/712", "id": 432197332, "node_id": "MDU6SXNzdWU0MzIxOTczMzI=", "number": 712, "title": "Should flask_sqlalchemy.Model.__init__ be overrideable?", "user": {"login": "rascalking", "id": 707505, "node_id": "MDQ6VXNlcjcwNzUwNQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/707505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rascalking", "html_url": "https://github.com/rascalking", "followers_url": "https://api.github.com/users/rascalking/followers", "following_url": "https://api.github.com/users/rascalking/following{/other_user}", "gists_url": "https://api.github.com/users/rascalking/gists{/gist_id}", "starred_url": "https://api.github.com/users/rascalking/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rascalking/subscriptions", "organizations_url": "https://api.github.com/users/rascalking/orgs", "repos_url": "https://api.github.com/users/rascalking/repos", "events_url": "https://api.github.com/users/rascalking/events{/privacy}", "received_events_url": "https://api.github.com/users/rascalking/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-11T19:11:37Z", "updated_at": "2019-04-11T19:44:35Z", "closed_at": "2019-04-11T19:30:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some custom types (json-encoded lists/dicts), but working with newly-created instances of models that include those types can be awkward.  I end up needing to pepper code that deals with those models with a bunch of boilerplate like the following:\r\n\r\n```\r\nif instance.field is None:\r\n    instance.field = []\r\ninstance.field.append('thing')\r\n```\r\n\r\nI've supplied column defaults, but my understanding is those don't come into play until the instance is attached to a session and flushed.  SQLAlchemy's [docs on object initialization](https://docs.sqlalchemy.org/en/latest/orm/constructors.html#constructors-and-object-initialization) suggest that I should be able to override `__init__` on my model to do what I'm trying to do.\r\n\r\nTo avoid needing to do that for each individual model that uses those types, I wanted to use introspection in my base class.  Which, given that I'm working under flask-sqlalchemy, I thought meant doing it on the class I pass in as my `model_class`.\r\n\r\nThat doesn't seem to be doing what I expected, and I wanted to see if my expectations are off before I start a code dive to figure out why.\r\n\r\nHere's a variation on the quickstart sample from the flask-sqlalchemy docs:\r\n\r\n```\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import Model, SQLAlchemy\r\n\r\n\r\nclass BaseModel(Model):\r\n    def __init__(self, *args, **kwargs):\r\n        print('BaseModel.__init__')\r\n        super().__init__(*args, **kwargs)\r\n\r\napp = Flask(__name__)\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\r\ndb = SQLAlchemy(app, model_class=BaseModel)\r\n\r\n\r\nclass User(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(80), unique=True, nullable=False)\r\n    email = db.Column(db.String(120), unique=True, nullable=False)\r\n\r\n    def __repr__(self):\r\n        return '<User %r>' % self.username\r\n\r\n\r\nclass Group(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    groupname = db.Column(db.String(80), unique=True, nullable=False)\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        print('Group.__init__')\r\n        super().__init__(*args, **kwargs)\r\n```\r\n\r\nWhen I create a `User` instance, I'd expect to see `BaseModel.__init__` printed.  When I create a `Group` instance, I'd expect to see that as well as `Group.__init__` printed.  Here's what actually happens (python 3.6.7, flask-sqlalchemy 2.3.2, sqlalchemy 1.3.2):\r\n\r\n```\r\n>>> from app import *\r\n>>> db.create_all()\r\n>>> user = User()\r\n>>> group = Group()\r\nGroup.__init__\r\n>>>\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/711", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/711/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/711/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/711/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/711", "id": 429356397, "node_id": "MDU6SXNzdWU0MjkzNTYzOTc=", "number": 711, "title": "Support for backup node connection.", "user": {"login": "brishi19791", "id": 11882248, "node_id": "MDQ6VXNlcjExODgyMjQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/11882248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brishi19791", "html_url": "https://github.com/brishi19791", "followers_url": "https://api.github.com/users/brishi19791/followers", "following_url": "https://api.github.com/users/brishi19791/following{/other_user}", "gists_url": "https://api.github.com/users/brishi19791/gists{/gist_id}", "starred_url": "https://api.github.com/users/brishi19791/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brishi19791/subscriptions", "organizations_url": "https://api.github.com/users/brishi19791/orgs", "repos_url": "https://api.github.com/users/brishi19791/repos", "events_url": "https://api.github.com/users/brishi19791/events{/privacy}", "received_events_url": "https://api.github.com/users/brishi19791/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-04T15:51:46Z", "updated_at": "2019-04-04T19:58:39Z", "closed_at": "2019-04-04T19:58:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\nI have Postgres DB two node cluster and using SQLALCHEMY_DATABASE_URI were we can give only one node details. But how can i achieve a scenario were if the given node goes down SQLALCHEMY will connect to the other backup node. Is there an option of giving the backup node details in SQLALCHEMY_DATABASE_URI?\r\nThanks in advance,\r\n-Rishi", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/710", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/710/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/710/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/710/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/710", "id": 428512628, "node_id": "MDU6SXNzdWU0Mjg1MTI2Mjg=", "number": 710, "title": "Support multi-helper table for many-many-many-... relationship", "user": {"login": "Mon-ius", "id": 25671258, "node_id": "MDQ6VXNlcjI1NjcxMjU4", "avatar_url": "https://avatars2.githubusercontent.com/u/25671258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mon-ius", "html_url": "https://github.com/Mon-ius", "followers_url": "https://api.github.com/users/Mon-ius/followers", "following_url": "https://api.github.com/users/Mon-ius/following{/other_user}", "gists_url": "https://api.github.com/users/Mon-ius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mon-ius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mon-ius/subscriptions", "organizations_url": "https://api.github.com/users/Mon-ius/orgs", "repos_url": "https://api.github.com/users/Mon-ius/repos", "events_url": "https://api.github.com/users/Mon-ius/events{/privacy}", "received_events_url": "https://api.github.com/users/Mon-ius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-03T01:01:53Z", "updated_at": "2020-03-06T02:03:18Z", "closed_at": "2019-04-03T01:38:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have written the following codes to achieve my ideas, but failed. For sure, I use the `flask-sqlalchemy`  instead of `sqlalchemy`.\r\n\r\n```\r\nMentor = db.Table('Mentor',\r\n                     db.Column('id_student', db.Integer,\r\n                               db.ForeignKey('student.id')),\r\n                     db.Column('id_teacher', db.Integer,\r\n                               db.ForeignKey('teacher.id')),\r\n                     db.Column('id_course', db.Integer,\r\n                               db.ForeignKey('course.id'))\r\n                )\r\n```\r\n```\r\n\r\nclass Student(db.Model):  # Student ORM\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(64), index=True, unique=True)\r\n \r\n    teachers = db.relationship(\r\n        'Teacher', secondary=Mentor, lazy='dynamic')\r\n    courses = db.relationship(\r\n        'Course', secondary=Mentor, lazy='dynamic')\r\n\r\n    def __repr__(self):\r\n        return '<Student {}>'.format(self.username)\r\n\r\nclass Teacher(db.Model):  # Teacher ORM\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    username = db.Column(db.String(64), index=True, unique=True)\r\n\r\n\r\n    students = db.relationship(\r\n        'Student', secondary=Mentor, lazy='dynamic')\r\n    courses = db.relationship(\r\n        'Course', secondary=Mentor, lazy='dynamic')\r\n\r\n    def __repr__(self):\r\n        return '<Teacher {}>'.format(self.username)\r\n\r\nclass Course(db.Model):  # Course ORM\r\n    id = db.Column(db.Integer, primary_key=True)\r\n\r\n    teachers = db.relationship(\r\n        'Teacher', secondary=Mentor, lazy='dynamic')\r\n    students = db.relationship(\r\n        'Student', secondary=Mentor, lazy='dynamic')\r\n\r\n    def __repr__(self):\r\n        return '<Course {}>'.format(self.name)\r\n```\r\n\r\nAbove are the mini code for demonstrate  what I am talking about. But apparently, I failed to this target. \r\nFor example:\r\n\r\n<s1,t1,c1>\r\n<s1,t2,c2>\r\n<s2,t1,c3>\r\n<s2,t2,c4>\r\n\r\nHere are the test code:\r\n\r\n```\r\ndef test():\r\n    s1 = Student(username=\"student1_\"+str(uuid.uuid4()))\r\n    s2 = Student(username=\"student2_\"+str(uuid.uuid4()))\r\n    t1 = Teacher(username=\"teacher1_\"+str(uuid.uuid4()))\r\n    t2 = Teacher(username=\"teacher2_\"+str(uuid.uuid4()))\r\n\r\n    c1 = Course()\r\n    c2 = Course()\r\n    c3 = Course()\r\n    c4 = Course()\r\n\r\n    t1.students.append(s1)\r\n    t1.courses.append(c1)\r\n    \r\n\r\n    t1.students.append(s2)\r\n    t1.courses.append(c2)\r\n\r\n    t2.students.append(s1)\r\n    t2.courses.append(c3)\r\n\r\n    t2.students.append(s2)\r\n    t2.courses.append(c4)\r\n\r\n    db.session.add(t1)\r\n    db.session.add(t2)\r\n    db.session.commit()\r\n\r\n```\r\n\r\nI anyone knows the effective way to make good use of `db.Table`, plz tell me thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/709", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/709/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/709/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/709/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/709", "id": 426185464, "node_id": "MDU6SXNzdWU0MjYxODU0NjQ=", "number": 709, "title": "TypeError: ping_connection() takes 2 positional arguments but 3 were given", "user": {"login": "kdhindsa", "id": 707427, "node_id": "MDQ6VXNlcjcwNzQyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/707427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdhindsa", "html_url": "https://github.com/kdhindsa", "followers_url": "https://api.github.com/users/kdhindsa/followers", "following_url": "https://api.github.com/users/kdhindsa/following{/other_user}", "gists_url": "https://api.github.com/users/kdhindsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdhindsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdhindsa/subscriptions", "organizations_url": "https://api.github.com/users/kdhindsa/orgs", "repos_url": "https://api.github.com/users/kdhindsa/repos", "events_url": "https://api.github.com/users/kdhindsa/events{/privacy}", "received_events_url": "https://api.github.com/users/kdhindsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-27T21:11:25Z", "updated_at": "2019-03-29T21:56:19Z", "closed_at": "2019-03-29T21:56:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am migrating my codebase to python 3 and in the process of upgrading versions of dependencies I stumbled upon this error which seems to be originating from Flask-SQLAlchemy. \r\n\r\nThe stacktrace is pasted below.\r\n\r\nThe line that causes this error is the following:\r\n\r\n`from flask_sqlalchemy import SQLAlchemy`\r\n`db = SQLAlchemy(app)`\r\n`db.session.remove()`\r\n`db.drop_all()`\r\n\r\ndb.drop_all() is the one that starts a chain of method calls which eventually results in `fn(*args, **kw)` blowing up because `ping_connection()` is passed the wrong number of arguments.\r\n\r\n\r\nStacktrace:\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nself = <sqlalchemy.event.attr._EmptyListener object at 0x10ef97c18>\r\nargs = (<sqlite3.Connection object at 0x10eedaab0>, <sqlalchemy.pool.base._ConnectionRecord object at 0x10eeca0b8>, <sqlalchemy.pool.base._ConnectionFairy object at 0x110a857b8>)\r\nkw = {}, fn = <function ping_connection at 0x10d12e950>\r\n\r\n    def __call__(self, *args, **kw):\r\n        \"\"\"Execute this event.\"\"\"\r\n\r\n        for fn in self.parent_listeners:\r\n>           fn(*args, **kw)\r\nE           TypeError: ping_connection() takes 2 positional arguments but 3 were given\r\n\r\n../build/golinks/venv/lib/python3.7/site-packages/sqlalchemy/event/attr.py:259: TypeError", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/708", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/708/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/708/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/708/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/708", "id": 425866287, "node_id": "MDU6SXNzdWU0MjU4NjYyODc=", "number": 708, "title": "flask\u672c\u5730\u6d4b\u8bd5\u73af\u5883\u65e0\u6cd5\u5b9e\u65f6\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e", "user": {"login": "sullfu", "id": 29268518, "node_id": "MDQ6VXNlcjI5MjY4NTE4", "avatar_url": "https://avatars3.githubusercontent.com/u/29268518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sullfu", "html_url": "https://github.com/sullfu", "followers_url": "https://api.github.com/users/sullfu/followers", "following_url": "https://api.github.com/users/sullfu/following{/other_user}", "gists_url": "https://api.github.com/users/sullfu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sullfu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sullfu/subscriptions", "organizations_url": "https://api.github.com/users/sullfu/orgs", "repos_url": "https://api.github.com/users/sullfu/repos", "events_url": "https://api.github.com/users/sullfu/events{/privacy}", "received_events_url": "https://api.github.com/users/sullfu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-27T10:05:12Z", "updated_at": "2019-03-27T10:18:33Z", "closed_at": "2019-03-27T10:18:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "\u7ebf\u4e0a\u73af\u5883\u548c\u672c\u5730\u6d4b\u8bd5\u73af\u5883(werkzeug)\u90fd\u672a\u8bbe\u7f6eSQLALCHEMY_COMMIT_ON_TEARDOWN\u4f46\u662f\u7ebf\u4e0a\u73af\u5883\u53ef\u4ee5\u5b9e\u65f6\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff0c\u4e3a\u4ec0\u4e48\u672c\u5730\u6d4b\u8bd5\u73af\u5883\u5374\u65e0\u6cd5\u5b9e\u65f6\u83b7\u53d6\u3002\u672a\u8bbe\u7f6e\u5176\u4ed6\u7684\u81ea\u52a8\u63d0\u4ea4\u8bbe\u7f6e\u3002", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/707", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/707/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/707/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/707/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/707", "id": 425601135, "node_id": "MDU6SXNzdWU0MjU2MDExMzU=", "number": 707, "title": "Remove \"convert_unicode\"", "user": {"login": "diogobaeder", "id": 207168, "node_id": "MDQ6VXNlcjIwNzE2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/207168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diogobaeder", "html_url": "https://github.com/diogobaeder", "followers_url": "https://api.github.com/users/diogobaeder/followers", "following_url": "https://api.github.com/users/diogobaeder/following{/other_user}", "gists_url": "https://api.github.com/users/diogobaeder/gists{/gist_id}", "starred_url": "https://api.github.com/users/diogobaeder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diogobaeder/subscriptions", "organizations_url": "https://api.github.com/users/diogobaeder/orgs", "repos_url": "https://api.github.com/users/diogobaeder/repos", "events_url": "https://api.github.com/users/diogobaeder/events{/privacy}", "received_events_url": "https://api.github.com/users/diogobaeder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-26T19:10:48Z", "updated_at": "2019-03-26T19:18:22Z", "closed_at": "2019-03-26T19:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe \"convert_unicode\" argument is being used in flask-sqlalchemy, however it's deprecated in SQLAlchemy:\r\n\r\n```\r\nSADeprecationWarning: The create_engine.convert_unicode parameter and corresponding dialect-level parameters are deprecated, and will be removed in a future release.  Modern DBAPIs support Python Unicode natively and this parameter is unnecessary.\r\n    default.DefaultDialect.__init__(self, **kwargs)\r\n```\r\n\r\nSo the options here should probably be an empty dict, right?: https://github.com/pallets/flask-sqlalchemy/blob/50944e77522d4aa005fc3c833b5a2042280686d3/flask_sqlalchemy/__init__.py#L558\r\n\r\nThanks,\r\nDiogo", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/706", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/706/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/706/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/706/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/706", "id": 423972774, "node_id": "MDU6SXNzdWU0MjM5NzI3NzQ=", "number": 706, "title": "Mixed-up names in docs explaining relationships", "user": {"login": "pfabri", "id": 16960025, "node_id": "MDQ6VXNlcjE2OTYwMDI1", "avatar_url": "https://avatars3.githubusercontent.com/u/16960025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfabri", "html_url": "https://github.com/pfabri", "followers_url": "https://api.github.com/users/pfabri/followers", "following_url": "https://api.github.com/users/pfabri/following{/other_user}", "gists_url": "https://api.github.com/users/pfabri/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfabri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfabri/subscriptions", "organizations_url": "https://api.github.com/users/pfabri/orgs", "repos_url": "https://api.github.com/users/pfabri/repos", "events_url": "https://api.github.com/users/pfabri/events{/privacy}", "received_events_url": "https://api.github.com/users/pfabri/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 518878555, "node_id": "MDU6TGFiZWw1MTg4Nzg1NTU=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/8", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/8", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/8/labels", "id": 4024097, "node_id": "MDk6TWlsZXN0b25lNDAyNDA5Nw==", "number": 8, "title": "2.4", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "closed", "created_at": "2019-02-02T21:20:44Z", "updated_at": "2019-05-06T18:32:07Z", "due_on": null, "closed_at": "2019-05-06T18:32:07Z"}, "comments": 2, "created_at": "2019-03-21T22:40:35Z", "updated_at": "2019-04-18T16:48:17Z", "closed_at": "2019-04-18T16:48:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I believe that [section detailing relationships](http://flask-sqlalchemy.pocoo.org/2.3/models/#one-to-many-relationships) has a naming mix-up in the model definitions.\r\n\r\n**At first there is:**\r\n\r\n    class Person(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String(50), nullable=False)\r\n    addresses = db.relationship('Address', backref='person', lazy=True)\r\n\r\n**But further down it changes to this, where backrefs are explained in more detail:**\r\n\r\n\tclass User(db.Model): # this should read: Person(db.Model)...\r\n\tid = db.Column(db.Integer, primary_key=True)\r\n\tname = db.Column(db.String(50), nullable=False)\r\n\taddresses = db.relationship('Address', lazy='select',\r\n\tbackref=db.backref('person', lazy='joined'))\r\n\r\nI think this is quite misleading and it's easy to think that this is a third table, which somehow connects to the two others defined earlier. It certainly had me confused for a while.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/704", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/704/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/704/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/704/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/704", "id": 421799751, "node_id": "MDU6SXNzdWU0MjE3OTk3NTE=", "number": 704, "title": "how to create database with flask-sqlalchemy?", "user": {"login": "my3188", "id": 5450674, "node_id": "MDQ6VXNlcjU0NTA2NzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5450674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/my3188", "html_url": "https://github.com/my3188", "followers_url": "https://api.github.com/users/my3188/followers", "following_url": "https://api.github.com/users/my3188/following{/other_user}", "gists_url": "https://api.github.com/users/my3188/gists{/gist_id}", "starred_url": "https://api.github.com/users/my3188/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/my3188/subscriptions", "organizations_url": "https://api.github.com/users/my3188/orgs", "repos_url": "https://api.github.com/users/my3188/repos", "events_url": "https://api.github.com/users/my3188/events{/privacy}", "received_events_url": "https://api.github.com/users/my3188/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-16T11:54:23Z", "updated_at": "2019-03-16T12:16:46Z", "closed_at": "2019-03-16T12:16:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "how to create database with flask-sqlalchemy? Use only flask-sqlalchemy,not sqlalchemy!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/702", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/702/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/702/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/702/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/702", "id": 421220098, "node_id": "MDU6SXNzdWU0MjEyMjAwOTg=", "number": 702, "title": "Travis isn't building any PRs that are targeting the 2.x-maintenance branch", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-14T20:06:25Z", "updated_at": "2019-04-18T15:22:54Z", "closed_at": "2019-04-18T15:22:54Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Looks like they aren't building because of our `branches` setting in `.travis.yml`.\r\n\r\nRef: https://docs.travis-ci.com/user/common-build-problems/#i-pushed-a-commit-and-cant-find-its-corresponding-build\r\n\r\nFor now, appending \"-maintenance\" onto branch names I'm creating works.  Ideally, we'd be able to tell travis to build any branch that has a PR...but, not going to worry about that at the moment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/699", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/699/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/699/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/699/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/699", "id": 421180707, "node_id": "MDU6SXNzdWU0MjExODA3MDc=", "number": 699, "title": "Set SQLALCHEMY_TRACK_MODIFICATIONS to False by default", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "lbeaufort", "id": 31420082, "node_id": "MDQ6VXNlcjMxNDIwMDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/31420082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbeaufort", "html_url": "https://github.com/lbeaufort", "followers_url": "https://api.github.com/users/lbeaufort/followers", "following_url": "https://api.github.com/users/lbeaufort/following{/other_user}", "gists_url": "https://api.github.com/users/lbeaufort/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbeaufort/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbeaufort/subscriptions", "organizations_url": "https://api.github.com/users/lbeaufort/orgs", "repos_url": "https://api.github.com/users/lbeaufort/repos", "events_url": "https://api.github.com/users/lbeaufort/events{/privacy}", "received_events_url": "https://api.github.com/users/lbeaufort/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/2", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2/labels", "id": 767681, "node_id": "MDk6TWlsZXN0b25lNzY3Njgx", "number": 2, "title": "3.0", "description": "Tracks items that are a high priority and should be in the first 3.x release.", "creator": {"login": "immunda", "id": 524365, "node_id": "MDQ6VXNlcjUyNDM2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/524365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immunda", "html_url": "https://github.com/immunda", "followers_url": "https://api.github.com/users/immunda/followers", "following_url": "https://api.github.com/users/immunda/following{/other_user}", "gists_url": "https://api.github.com/users/immunda/gists{/gist_id}", "starred_url": "https://api.github.com/users/immunda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immunda/subscriptions", "organizations_url": "https://api.github.com/users/immunda/orgs", "repos_url": "https://api.github.com/users/immunda/repos", "events_url": "https://api.github.com/users/immunda/events{/privacy}", "received_events_url": "https://api.github.com/users/immunda/received_events", "type": "User", "site_admin": false}, "open_issues": 10, "closed_issues": 27, "state": "open", "created_at": "2014-08-27T17:06:57Z", "updated_at": "2020-05-27T14:43:18Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2019-03-14T18:32:18Z", "updated_at": "2019-05-08T16:25:20Z", "closed_at": "2019-05-08T16:25:20Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/694", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/694/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/694/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/694/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/694", "id": 419542458, "node_id": "MDU6SXNzdWU0MTk1NDI0NTg=", "number": 694, "title": "Phasing out python2 ?", "user": {"login": "ticosax", "id": 1174343, "node_id": "MDQ6VXNlcjExNzQzNDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1174343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ticosax", "html_url": "https://github.com/ticosax", "followers_url": "https://api.github.com/users/ticosax/followers", "following_url": "https://api.github.com/users/ticosax/following{/other_user}", "gists_url": "https://api.github.com/users/ticosax/gists{/gist_id}", "starred_url": "https://api.github.com/users/ticosax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ticosax/subscriptions", "organizations_url": "https://api.github.com/users/ticosax/orgs", "repos_url": "https://api.github.com/users/ticosax/repos", "events_url": "https://api.github.com/users/ticosax/events{/privacy}", "received_events_url": "https://api.github.com/users/ticosax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-11T15:46:55Z", "updated_at": "2019-03-11T16:15:32Z", "closed_at": "2019-03-11T15:49:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "1st of January 2020, python2 will be officially unsupported.\r\nHow do you plan to get rid of it ? that's something we should think about it, maybe for the 3.0 milestone ?\r\n\r\nAlso we could think about stop supporting older unsupported versions of python3.\r\nas of today only `>=3.6` makes sense:\r\n\r\n> python3.4 September 29, 2017\r\npython3.5 March 17, 2019\r\n\r\nhttps://www.python.org/dev/peps/pep-0398/#x-end-of-life\r\nhttps://www.python.org/dev/peps/pep-0429/", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/691", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/691/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/691/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/691/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/691", "id": 419049680, "node_id": "MDU6SXNzdWU0MTkwNDk2ODA=", "number": 691, "title": "What does \"sqlite:///:memory:\" mean?", "user": {"login": "Aselka2019", "id": 46418719, "node_id": "MDQ6VXNlcjQ2NDE4NzE5", "avatar_url": "https://avatars2.githubusercontent.com/u/46418719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aselka2019", "html_url": "https://github.com/Aselka2019", "followers_url": "https://api.github.com/users/Aselka2019/followers", "following_url": "https://api.github.com/users/Aselka2019/following{/other_user}", "gists_url": "https://api.github.com/users/Aselka2019/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aselka2019/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aselka2019/subscriptions", "organizations_url": "https://api.github.com/users/Aselka2019/orgs", "repos_url": "https://api.github.com/users/Aselka2019/repos", "events_url": "https://api.github.com/users/Aselka2019/events{/privacy}", "received_events_url": "https://api.github.com/users/Aselka2019/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-03-09T08:47:15Z", "updated_at": "2020-04-13T15:19:43Z", "closed_at": "2019-03-09T08:49:29Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "I've been following basic tutorial on how to create a web application with a Postgres DB. I've followed the tutorial to the letter but I'm getting an error message and not the results shown in the tut. Can anyone who knows more tell me what I'm doing wrong?\r\n\r\nI have the following code in app.py:\r\n\r\n```python\r\nfrom flask import Flask, render_template, request\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\napp = Flask(__name__)\r\napp.config['SQLAlchemy_DATABASE_URI']='postgresql://postgres:password@localhost/height_collector'\r\ndb=SQLAlchemy(app)\r\n\r\nclass Data(db.Model):\r\n    __tablename__=\"data\"\r\n    id=db.Column(db.Integer, primary_key=True)\r\n    email_=db.Column(db.String(120), unique=True)\r\n    height_=db.Column(db.Integer)\r\n\r\n    def __init__(self, email_, height_):\r\n        self.email_=email_\r\n\t    self.height_=height_\r\n```\r\n\r\nand then in prompt command i run python then \r\n\r\n    from app import db\r\n\r\nthen i receive belwo message\r\n\r\n> neither sqlalchemy_database_uri nor sqlalchemy_binds is set. defaulting sqlalchemy_database_uri to sqlite:///:memory", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/690", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/690/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/690/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/690/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/690", "id": 419023925, "node_id": "MDU6SXNzdWU0MTkwMjM5MjU=", "number": 690, "title": "Add Mac/Windows CI builds", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/10", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/10", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/10/labels", "id": 4124353, "node_id": "MDk6TWlsZXN0b25lNDEyNDM1Mw==", "number": 10, "title": "3.x", "description": "Tracks items that we are confident should get done but change observable behavior and so need to wait until the next major version bump.\r\n\r\nThey are also aren't high enough priority to be scheduled for the next release (e.g. 3.0).", "creator": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 10, "state": "open", "created_at": "2019-03-09T07:29:06Z", "updated_at": "2020-05-26T20:05:44Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2019-03-09T02:33:50Z", "updated_at": "2020-05-26T15:40:07Z", "closed_at": "2020-05-26T15:40:07Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Flask has Windows CI: https://github.com/pallets/flask/blob/master/.appveyor.yml\r\n\r\nBut [removed support for MacOS](https://github.com/pallets/flask/commit/537df96632f12c2bd2cb5ae933844229f029f7b5).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/689", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/689/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/689/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/689/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/689", "id": 419004518, "node_id": "MDU6SXNzdWU0MTkwMDQ1MTg=", "number": 689, "title": "Travis: nightly & pypy testing.  Still needed?", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-09T00:05:29Z", "updated_at": "2019-03-09T07:43:01Z", "closed_at": "2019-03-09T07:43:01Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Werkeug & Flask both run CI builds for pypy & Python nightly.  However, the travis config lists both of those in `allow_failures`.  If CI isn't going to fail, why test it in CI at all.  Just leave it as an option in tox?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/688", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/688/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/688/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/688/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/688", "id": 419002658, "node_id": "MDU6SXNzdWU0MTkwMDI2NTg=", "number": 688, "title": "Add flake8 and/or other style helpers", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/10", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/10", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/10/labels", "id": 4124353, "node_id": "MDk6TWlsZXN0b25lNDEyNDM1Mw==", "number": 10, "title": "3.x", "description": "Tracks items that we are confident should get done but change observable behavior and so need to wait until the next major version bump.\r\n\r\nThey are also aren't high enough priority to be scheduled for the next release (e.g. 3.0).", "creator": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "open_issues": 5, "closed_issues": 10, "state": "open", "created_at": "2019-03-09T07:29:06Z", "updated_at": "2020-05-26T20:05:44Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2019-03-08T23:56:35Z", "updated_at": "2020-05-26T15:39:42Z", "closed_at": "2020-05-26T15:39:41Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "See https://github.com/pallets/werkzeug/blob/master/.pre-commit-config.yaml for reference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/686", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/686/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/686/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/686/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/686", "id": 418987597, "node_id": "MDU6SXNzdWU0MTg5ODc1OTc=", "number": 686, "title": "Tox docs build failing", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1265072528, "node_id": "MDU6TGFiZWwxMjY1MDcyNTI4", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/pr-is-ready", "name": "pr-is-ready", "color": "8cf458", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/8", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/8", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/8/labels", "id": 4024097, "node_id": "MDk6TWlsZXN0b25lNDAyNDA5Nw==", "number": 8, "title": "2.4", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "closed", "created_at": "2019-02-02T21:20:44Z", "updated_at": "2019-05-06T18:32:07Z", "due_on": null, "closed_at": "2019-05-06T18:32:07Z"}, "comments": 2, "created_at": "2019-03-08T22:48:32Z", "updated_at": "2019-03-14T18:26:46Z", "closed_at": "2019-03-14T18:26:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "At least on the 2.x branch, see #684:\r\n\r\n> docs_html: /home/travis/build/pallets/flask-sqlalchemy/.tox/docs_html/lib/python3.6/site-packages/flask_sqlalchemy/init.py:docstring of flask_sqlalchemy.SignallingSession.get_bind:63:Unknown\r\ninterpreted text role \"paramref\".", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/685", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/685/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/685/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/685/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/685", "id": 418977538, "node_id": "MDU6SXNzdWU0MTg5Nzc1Mzg=", "number": 685, "title": "Supported Python and dependency versions", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/2", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2/labels", "id": 767681, "node_id": "MDk6TWlsZXN0b25lNzY3Njgx", "number": 2, "title": "3.0", "description": "Tracks items that are a high priority and should be in the first 3.x release.", "creator": {"login": "immunda", "id": 524365, "node_id": "MDQ6VXNlcjUyNDM2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/524365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immunda", "html_url": "https://github.com/immunda", "followers_url": "https://api.github.com/users/immunda/followers", "following_url": "https://api.github.com/users/immunda/following{/other_user}", "gists_url": "https://api.github.com/users/immunda/gists{/gist_id}", "starred_url": "https://api.github.com/users/immunda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immunda/subscriptions", "organizations_url": "https://api.github.com/users/immunda/orgs", "repos_url": "https://api.github.com/users/immunda/repos", "events_url": "https://api.github.com/users/immunda/events{/privacy}", "received_events_url": "https://api.github.com/users/immunda/received_events", "type": "User", "site_admin": false}, "open_issues": 10, "closed_issues": 27, "state": "open", "created_at": "2014-08-27T17:06:57Z", "updated_at": "2020-05-27T14:43:18Z", "due_on": null, "closed_at": null}, "comments": 8, "created_at": "2019-03-08T22:11:35Z", "updated_at": "2020-05-26T15:56:15Z", "closed_at": "2020-05-26T15:54:54Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I'd like to get a version support matrix defined and documented.  Currently, tox is setup to run\r\n\r\n* Python 2.6, 2.7, 3.3-3.6, pypy w/ Flask and SA at their latest released versions\r\n* Some of those same versions w/ Flask 0.10 and SA 0.8\r\n\r\nI would assume support for 2.6 and 3.3 should be able to be dropped considering tox won't even run those versions.  See: https://github.com/pallets/flask-sqlalchemy/pull/684\r\n\r\nHowever, can we \"officially\" do that without a major point release?  refs: #682 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/683", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/683/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/683/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/683/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/683", "id": 418952444, "node_id": "MDU6SXNzdWU0MTg5NTI0NDQ=", "number": 683, "title": "Fix references to version 3.0 in docstring of SQLAlchemy", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1265072528, "node_id": "MDU6TGFiZWwxMjY1MDcyNTI4", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/pr-is-ready", "name": "pr-is-ready", "color": "8cf458", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/8", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/8", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/8/labels", "id": 4024097, "node_id": "MDk6TWlsZXN0b25lNDAyNDA5Nw==", "number": 8, "title": "2.4", "description": "", "creator": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 16, "state": "closed", "created_at": "2019-02-02T21:20:44Z", "updated_at": "2019-05-06T18:32:07Z", "due_on": null, "closed_at": "2019-05-06T18:32:07Z"}, "comments": 1, "created_at": "2019-03-08T20:50:09Z", "updated_at": "2019-03-14T18:27:13Z", "closed_at": "2019-03-14T18:27:13Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This in in the 2.3 maintenance branch, so I assume these changes were released earlier than 3.0:\r\n\r\n```\r\n    .. versionadded:: 3.0\r\n       The `query_class` parameter was added, to allow customisation\r\n       of the query class, in place of the default of :class:`BaseQuery`.\r\n\r\n       The `model_class` parameter was added, which allows a custom model\r\n       class to be used in place of :class:`Model`.\r\n\r\n    .. versionchanged:: 3.0\r\n       Utilise the same query class across `session`, `Model.query` and `Query`.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/682", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/682/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/682/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/682/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/682", "id": 418538594, "node_id": "MDU6SXNzdWU0MTg1Mzg1OTQ=", "number": 682, "title": "Intentions for Milestone 3.0?  Release philosphy?", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/2", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/2/labels", "id": 767681, "node_id": "MDk6TWlsZXN0b25lNzY3Njgx", "number": 2, "title": "3.0", "description": "Tracks items that are a high priority and should be in the first 3.x release.", "creator": {"login": "immunda", "id": 524365, "node_id": "MDQ6VXNlcjUyNDM2NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/524365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immunda", "html_url": "https://github.com/immunda", "followers_url": "https://api.github.com/users/immunda/followers", "following_url": "https://api.github.com/users/immunda/following{/other_user}", "gists_url": "https://api.github.com/users/immunda/gists{/gist_id}", "starred_url": "https://api.github.com/users/immunda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immunda/subscriptions", "organizations_url": "https://api.github.com/users/immunda/orgs", "repos_url": "https://api.github.com/users/immunda/repos", "events_url": "https://api.github.com/users/immunda/events{/privacy}", "received_events_url": "https://api.github.com/users/immunda/received_events", "type": "User", "site_admin": false}, "open_issues": 10, "closed_issues": 27, "state": "open", "created_at": "2014-08-27T17:06:57Z", "updated_at": "2020-05-27T14:43:18Z", "due_on": null, "closed_at": null}, "comments": 10, "created_at": "2019-03-07T22:14:45Z", "updated_at": "2020-05-26T15:38:31Z", "closed_at": "2020-05-26T15:38:30Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I see https://github.com/pallets/flask-sqlalchemy/issues/166 has been assigned Milestone 3.0.  That milestone currently has 3 closed issues but 10 open issues assigned.  There are no issues assigned to the 2.4 milestone.\r\n\r\nI'd like to be able to do the work on #166 and get it released relatively quickly.  Any objections to continuing to make minor version releases in the 2.x series while we \"build up\" to 3.0?\r\n\r\nAlso, on that note, what is the \"big picture\" for milestone 3.0?  Why the major version bump?  Are there incompatible changes already committed and/or being contemplated?\r\n\r\nI personally am a proponent of frequent releases assuming you aren't intentionally introducing incompatibilities, docs are updated, and all tests are passing.  If bugs are introduced accidentally, they can be fixed relatively quickly and a new release made.  I also believe in having scripts/tools for automating the release to make releases relatively painless.  Any objections to adopting this philosophy for releases going forward?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/681", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/681/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/681/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/681/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/681", "id": 418074272, "node_id": "MDU6SXNzdWU0MTgwNzQyNzI=", "number": 681, "title": "convert_unicode deprecation warning with SQLAlchemy 1.3", "user": {"login": "zgoda", "id": 141999, "node_id": "MDQ6VXNlcjE0MTk5OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/141999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zgoda", "html_url": "https://github.com/zgoda", "followers_url": "https://api.github.com/users/zgoda/followers", "following_url": "https://api.github.com/users/zgoda/following{/other_user}", "gists_url": "https://api.github.com/users/zgoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/zgoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zgoda/subscriptions", "organizations_url": "https://api.github.com/users/zgoda/orgs", "repos_url": "https://api.github.com/users/zgoda/repos", "events_url": "https://api.github.com/users/zgoda/events{/privacy}", "received_events_url": "https://api.github.com/users/zgoda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-07T00:37:38Z", "updated_at": "2019-03-07T13:44:04Z", "closed_at": "2019-03-07T13:06:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "> _venv/lib/python3.7/site-packages/sqlalchemy/dialects/sqlite/base.py:1433: SADeprecationWarning: The create_engine.convert_unicode parameter and corresponding dialect-level parameters are deprecated, and will be removed in a future release.  Modern DBAPIs support Python Unicode natively and this parameter is unnecessary.\r\n>     default.DefaultDialect.__init__(self, **kwargs)\r\n> \r\n\r\nI guess this comes from `get_engine()` (https://github.com/pallets/flask-sqlalchemy/blob/master/flask_sqlalchemy/__init__.py#L558).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/680", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/680/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/680/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/680/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/680", "id": 417526906, "node_id": "MDU6SXNzdWU0MTc1MjY5MDY=", "number": 680, "title": "More restrictive version lock of SQLAlchemy in setup.py", "user": {"login": "nickjj", "id": 813219, "node_id": "MDQ6VXNlcjgxMzIxOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/813219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickjj", "html_url": "https://github.com/nickjj", "followers_url": "https://api.github.com/users/nickjj/followers", "following_url": "https://api.github.com/users/nickjj/following{/other_user}", "gists_url": "https://api.github.com/users/nickjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickjj/subscriptions", "organizations_url": "https://api.github.com/users/nickjj/orgs", "repos_url": "https://api.github.com/users/nickjj/repos", "events_url": "https://api.github.com/users/nickjj/events{/privacy}", "received_events_url": "https://api.github.com/users/nickjj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-03-05T22:15:07Z", "updated_at": "2019-03-05T23:39:25Z", "closed_at": "2019-03-05T22:44:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just installed Flask-SQLAlchemy 2.1 today (part of an older code base) but it pulled down SQLAlchemy 1.3.0 which is brand new. SQLAlchemy 1.3.0 has a number of backwards incompatible changes with 1.2 and previous releases which is wreaking havoc in a code base.\r\n\r\nA big one is:\r\n\r\n_[sql] [bug] Fully removed the behavior of strings passed directly as components of a select() or Query object being coerced to text() constructs automatically; the warning that has been emitted is now an ArgumentError or in the case of order_by() / group_by() a CompileError. This has emitted a warning since version 1.0 however its presence continues to create concerns for the potential of mis-use of this behavior._\r\n\r\nThe expected behavior IMO would be that Flask-SQLAlchemy version locks something more specific in setup.py for SQLAlchemy and then you can manage bumping it up with new Flask-SQLAlchemy releases.\r\n\r\nRight now it just pulls in versions >= 0.8.0 which is very dangerous.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/678", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/678/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/678/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/678/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/678", "id": 413847571, "node_id": "MDU6SXNzdWU0MTM4NDc1NzE=", "number": 678, "title": "Best way to import Initial Data to some tables", "user": {"login": "bcochofel", "id": 10865083, "node_id": "MDQ6VXNlcjEwODY1MDgz", "avatar_url": "https://avatars0.githubusercontent.com/u/10865083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bcochofel", "html_url": "https://github.com/bcochofel", "followers_url": "https://api.github.com/users/bcochofel/followers", "following_url": "https://api.github.com/users/bcochofel/following{/other_user}", "gists_url": "https://api.github.com/users/bcochofel/gists{/gist_id}", "starred_url": "https://api.github.com/users/bcochofel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bcochofel/subscriptions", "organizations_url": "https://api.github.com/users/bcochofel/orgs", "repos_url": "https://api.github.com/users/bcochofel/repos", "events_url": "https://api.github.com/users/bcochofel/events{/privacy}", "received_events_url": "https://api.github.com/users/bcochofel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-24T17:47:29Z", "updated_at": "2019-02-24T18:04:28Z", "closed_at": "2019-02-24T18:04:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI have some tables that I want to have some initial values because of some dependencies.\r\nI've tried using event.listens_for on 'after_create' but that's starting to get a bit messy \u00abcause I need lots of data. \r\nI was thinking of having something like .csv files with the values I want to ensure that exist on some table but I don't know if this is the best method.\r\n\r\nWhat should I use for this? The most efficient way to ensure everytime I run the app that those values exist on some tables.\r\n\r\nThanks,\r\nBruno", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/677", "repository_url": "https://api.github.com/repos/pallets/flask-sqlalchemy", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/677/labels{/name}", "comments_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/677/comments", "events_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/issues/677/events", "html_url": "https://github.com/pallets/flask-sqlalchemy/issues/677", "id": 412800874, "node_id": "MDU6SXNzdWU0MTI4MDA4NzQ=", "number": 677, "title": "Documentation search page render invalid link for results", "user": {"login": "greyli", "id": 12967000, "node_id": "MDQ6VXNlcjEyOTY3MDAw", "avatar_url": "https://avatars3.githubusercontent.com/u/12967000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/greyli", "html_url": "https://github.com/greyli", "followers_url": "https://api.github.com/users/greyli/followers", "following_url": "https://api.github.com/users/greyli/following{/other_user}", "gists_url": "https://api.github.com/users/greyli/gists{/gist_id}", "starred_url": "https://api.github.com/users/greyli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/greyli/subscriptions", "organizations_url": "https://api.github.com/users/greyli/orgs", "repos_url": "https://api.github.com/users/greyli/repos", "events_url": "https://api.github.com/users/greyli/events{/privacy}", "received_events_url": "https://api.github.com/users/greyli/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 518878555, "node_id": "MDU6TGFiZWw1MTg4Nzg1NTU=", "url": "https://api.github.com/repos/pallets/flask-sqlalchemy/labels/docs", "name": "docs", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "davidism", "id": 1242887, "node_id": "MDQ6VXNlcjEyNDI4ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1242887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidism", "html_url": "https://github.com/davidism", "followers_url": "https://api.github.com/users/davidism/followers", "following_url": "https://api.github.com/users/davidism/following{/other_user}", "gists_url": "https://api.github.com/users/davidism/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidism/subscriptions", "organizations_url": "https://api.github.com/users/davidism/orgs", "repos_url": "https://api.github.com/users/davidism/repos", "events_url": "https://api.github.com/users/davidism/events{/privacy}", "received_events_url": "https://api.github.com/users/davidism/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/9", "html_url": "https://github.com/pallets/flask-sqlalchemy/milestone/9", "labels_url": "https://api.github.com/repos/pallets/flask-sqlalchemy/milestones/9/labels", "id": 4124337, "node_id": "MDk6TWlsZXN0b25lNDEyNDMzNw==", "number": 9, "title": "2.x", "description": "Collecting issues and PRs that might not go into the next 2.x release but that we want to ship before 3.0.", "creator": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2019-03-09T07:14:01Z", "updated_at": "2020-05-25T19:03:40Z", "due_on": null, "closed_at": "2020-05-25T19:03:07Z"}, "comments": 3, "created_at": "2019-02-21T08:22:06Z", "updated_at": "2019-04-18T17:18:49Z", "closed_at": "2019-04-18T17:18:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Something was wrong in the search page. When you search something ( http://flask-sqlalchemy.pocoo.org/2.3/search/?q=model ), all the result items' disgest show the source of 404 page:\r\n\r\n![image](https://user-images.githubusercontent.com/12967000/53060990-47f02e00-34f7-11e9-8cdf-1513fbd7c391.png)\r\n\r\nClick the result link will got the Nginx 404 page ( http://flask-sqlalchemy.pocoo.org/2.3/search/models/?highlight=model ):\r\n\r\n![image](https://user-images.githubusercontent.com/12967000/53061016-68b88380-34f7-11e9-8641-1d3fdba78ca7.png)\r\n\r\nIMO, this problem result from the redundant \"/search\" part in the result URL (see image above), remove it you will get the correct page ( http://flask-sqlalchemy.pocoo.org/2.3/models/?highlight=model ). \r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}