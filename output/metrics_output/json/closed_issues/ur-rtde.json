{"total_count": 1149, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pybind/pybind11/issues/2415", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2415/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2415/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2415/events", "html_url": "https://github.com/pybind/pybind11/issues/2415", "id": 682534708, "node_id": "MDU6SXNzdWU2ODI1MzQ3MDg=", "number": 2415, "title": "fail to include boost ", "user": {"login": "HiLiHeYi", "id": 63164791, "node_id": "MDQ6VXNlcjYzMTY0Nzkx", "avatar_url": "https://avatars1.githubusercontent.com/u/63164791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HiLiHeYi", "html_url": "https://github.com/HiLiHeYi", "followers_url": "https://api.github.com/users/HiLiHeYi/followers", "following_url": "https://api.github.com/users/HiLiHeYi/following{/other_user}", "gists_url": "https://api.github.com/users/HiLiHeYi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HiLiHeYi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HiLiHeYi/subscriptions", "organizations_url": "https://api.github.com/users/HiLiHeYi/orgs", "repos_url": "https://api.github.com/users/HiLiHeYi/repos", "events_url": "https://api.github.com/users/HiLiHeYi/events{/privacy}", "received_events_url": "https://api.github.com/users/HiLiHeYi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-20T08:43:28Z", "updated_at": "2020-08-20T14:33:45Z", "closed_at": "2020-08-20T14:33:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have boost installed in my system but pybind shows me every time file not found. ` #include <boost/progress.hpp>` this is how I include the file. Do I have to do some extra steps to include boost ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2406", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2406/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2406/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2406/events", "html_url": "https://github.com/pybind/pybind11/issues/2406", "id": 680815017, "node_id": "MDU6SXNzdWU2ODA4MTUwMTc=", "number": 2406, "title": "[BUG] CMP0069", "user": {"login": "rongrong1314", "id": 52197737, "node_id": "MDQ6VXNlcjUyMTk3NzM3", "avatar_url": "https://avatars1.githubusercontent.com/u/52197737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rongrong1314", "html_url": "https://github.com/rongrong1314", "followers_url": "https://api.github.com/users/rongrong1314/followers", "following_url": "https://api.github.com/users/rongrong1314/following{/other_user}", "gists_url": "https://api.github.com/users/rongrong1314/gists{/gist_id}", "starred_url": "https://api.github.com/users/rongrong1314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rongrong1314/subscriptions", "organizations_url": "https://api.github.com/users/rongrong1314/orgs", "repos_url": "https://api.github.com/users/rongrong1314/repos", "events_url": "https://api.github.com/users/rongrong1314/events{/privacy}", "received_events_url": "https://api.github.com/users/rongrong1314/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-08-18T08:46:31Z", "updated_at": "2020-08-19T16:26:27Z", "closed_at": "2020-08-19T16:26:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, when I using the latest pybind11 master commit in one of my projects, I get the following error:\r\n\r\n**CMake Error at /opt/cmake-3.10.3-Linux-x86_64/share/cmake-3.10/Modules/CheckIPOSupported.cmake:138 (message):\r\n  Policy CMP0069 is not set\r\nCall Stack (most recent call first):\r\n  /usr/local/share/cmake/pybind11/pybind11Tools.cmake:189 (check_ipo_supported)\r\n  CMakeLists.txt:34 (pybind11_add_module)**\r\n\r\nMy camke version is  3.10, python is 3.8.\r\nI tried to upgrade cmake , but it didn't work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2403", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2403/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2403/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2403/events", "html_url": "https://github.com/pybind/pybind11/issues/2403", "id": 680444269, "node_id": "MDU6SXNzdWU2ODA0NDQyNjk=", "number": 2403, "title": "[BUG] \"__doc__\" attribute of static method is not set.", "user": {"login": "pkerichang", "id": 7808212, "node_id": "MDQ6VXNlcjc4MDgyMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7808212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pkerichang", "html_url": "https://github.com/pkerichang", "followers_url": "https://api.github.com/users/pkerichang/followers", "following_url": "https://api.github.com/users/pkerichang/following{/other_user}", "gists_url": "https://api.github.com/users/pkerichang/gists{/gist_id}", "starred_url": "https://api.github.com/users/pkerichang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pkerichang/subscriptions", "organizations_url": "https://api.github.com/users/pkerichang/orgs", "repos_url": "https://api.github.com/users/pkerichang/repos", "events_url": "https://api.github.com/users/pkerichang/events{/privacy}", "received_events_url": "https://api.github.com/users/pkerichang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-08-17T18:33:28Z", "updated_at": "2020-08-18T22:33:31Z", "closed_at": "2020-08-18T22:09:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "The staticmethod wrapper class makes pybind11-generated static methods behave similarly to Python's static methods, which is a great improvement.  However, for some reason the docstring of the underlying function is not passed to the staticmethod.\r\n\r\nTo reproduce, simply define a static method with any docstring (such as \"Hello World!\"), build the pybind11 library and import in python, then you'll see the docstring is no longer there when you call the `help()` method on the static method object.\r\n\r\nAfter some trial and error, modifying the `def_static()` method in `pybind11.h` as follows solves the issue:\r\n\r\n```\r\n    template <typename Func, typename... Extra> class_ &\r\n    def_static(const char *name_, Func &&f, const Extra&... extra) {\r\n        static_assert(!std::is_member_function_pointer<Func>::value,\r\n                \"def_static(...) called with a non-static member function pointer\");\r\n        cpp_function cf(std::forward<Func>(f), name(name_), scope(*this),\r\n                        sibling(getattr(*this, name_, none())), extra...);\r\n\r\n        auto tmp = staticmethod(cf);\r\n        PyCFunctionObject *fun_ptr = (PyCFunctionObject *) cf.ptr();\r\n        if (fun_ptr->m_ml->ml_doc) {\r\n            tmp.attr(\"__doc__\") = strdup(const_cast<char *>(fun_ptr->m_ml->ml_doc));\r\n        }\r\n\r\n        attr(cf.name()) = tmp;\r\n        return *this;\r\n    }\r\n```\r\n\r\nI'm hesitant to submit a PR as I don't know if this is the proper way to set the doc string of a staticmethod (I can't find any documentations on manipulating Python objects in C/C++ online).\r\n\r\nIf this turns out to be a good fix then I can submit a PR.  Otherwise, just letting you know this bug exists.  Having good docstring is important to me as I use a stub generation script (similar to the one in Mypy object) to generator python stub files for pybind11 libraries to make IDE programming easier.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2398", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2398/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2398/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2398/events", "html_url": "https://github.com/pybind/pybind11/issues/2398", "id": 679654832, "node_id": "MDU6SXNzdWU2Nzk2NTQ4MzI=", "number": 2398, "title": "Flaky timing Windows test in CI", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2276698623, "node_id": "MDU6TGFiZWwyMjc2Njk4NjIz", "url": "https://api.github.com/repos/pybind/pybind11/labels/ci%20flake", "name": "ci flake", "color": "fef2c0", "default": false, "description": "Known CI issues. Failures should be ignored in CI"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-15T22:53:47Z", "updated_at": "2020-08-16T15:18:48Z", "closed_at": "2020-08-16T15:18:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "There's occasionally a diff of a 1 second in the test that compares two times, mostly on Windows, probably due to the shared infrastructure. We should probably loosen it up just a bit, or maybe compute a bound by running the python clock both before and after, etc.\r\n\r\n\r\nhttps://github.com/pybind/pybind11/blob/cd856992121b0a98bbe6e15d9a886f2b43f3d972/tests/test_chrono.py#L8-L25", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2386", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2386/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2386/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2386/events", "html_url": "https://github.com/pybind/pybind11/issues/2386", "id": 677552823, "node_id": "MDU6SXNzdWU2Nzc1NTI4MjM=", "number": 2386, "title": "  CMake's 'find_host_package(PythonInterp 2.7)' founds wrong Python version:", "user": {"login": "yaoganxingwei", "id": 49362562, "node_id": "MDQ6VXNlcjQ5MzYyNTYy", "avatar_url": "https://avatars0.githubusercontent.com/u/49362562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaoganxingwei", "html_url": "https://github.com/yaoganxingwei", "followers_url": "https://api.github.com/users/yaoganxingwei/followers", "following_url": "https://api.github.com/users/yaoganxingwei/following{/other_user}", "gists_url": "https://api.github.com/users/yaoganxingwei/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaoganxingwei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaoganxingwei/subscriptions", "organizations_url": "https://api.github.com/users/yaoganxingwei/orgs", "repos_url": "https://api.github.com/users/yaoganxingwei/repos", "events_url": "https://api.github.com/users/yaoganxingwei/events{/privacy}", "received_events_url": "https://api.github.com/users/yaoganxingwei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-12T09:45:31Z", "updated_at": "2020-08-19T16:26:27Z", "closed_at": "2020-08-19T16:26:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "CMake Warning at cmake/OpenCVDetectPython.cmake:81 (message):\r\n  CMake's 'find_host_package(PythonInterp 2.7)' founds wrong Python version:\r\n\r\n  PYTHON_EXECUTABLE=D:/Program Files/python/python.exe\r\n\r\n  PYTHON_VERSION_STRING=3.8.1\r\n\r\n  Consider specify 'PYTHON2_EXECUTABLE' variable via CMake command line or\r\n  environment variables\r\n\r\nCall Stack (most recent call first):\r\n  cmake/OpenCVDetectPython.cmake:271 (find_python)\r\n  CMakeLists.txt:595 (include)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2385", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2385/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2385/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2385/events", "html_url": "https://github.com/pybind/pybind11/issues/2385", "id": 677487879, "node_id": "MDU6SXNzdWU2Nzc0ODc4Nzk=", "number": 2385, "title": "Wrong python system path import when add PCL library in CMakelists", "user": {"login": "ltphy", "id": 32784614, "node_id": "MDQ6VXNlcjMyNzg0NjE0", "avatar_url": "https://avatars1.githubusercontent.com/u/32784614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltphy", "html_url": "https://github.com/ltphy", "followers_url": "https://api.github.com/users/ltphy/followers", "following_url": "https://api.github.com/users/ltphy/following{/other_user}", "gists_url": "https://api.github.com/users/ltphy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltphy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltphy/subscriptions", "organizations_url": "https://api.github.com/users/ltphy/orgs", "repos_url": "https://api.github.com/users/ltphy/repos", "events_url": "https://api.github.com/users/ltphy/events{/privacy}", "received_events_url": "https://api.github.com/users/ltphy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-08-12T08:07:10Z", "updated_at": "2020-08-13T12:31:28Z", "closed_at": "2020-08-13T06:20:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nI use Python C++ Interface to access the python module by Pybind11 and import the python module in C++ code.\r\nThere is a wrong python path imported when including PCL library together with Pybind11 in CMakelists.txt file, but it imports the python environment correctly when there is only pybind11.\r\n\r\n**Installation**\r\n```\r\nconda install pybind11\r\n```\r\n**Expected Behavior**\r\nShould import the python from the current environment path.\r\n\r\n## Reproducible example code\r\n\r\nWhen CMakelists only includes pybind11, the python path environment is used correctly.\r\n* Python code: \r\n```\r\nimport sys\r\nprint(sys.path)\r\n```\r\n```\r\n['/home/phy/.conda/envs/env/lib/python37.zip', '/home/phy/.conda/envs/env/lib/python3.7', '/home/phy/.conda/envs/env/lib/python3.7/lib-dynload', '/home/phy/.local/lib/python3.7/site-packages', '/home/phy/.conda/envs/env/lib/python3.7/site-packages', '/home/phy/.conda/envs/env/lib/python3.7/site-packages/PyYAML-5.3.1-py3.7-linux-x86_64.egg', '/home/phy/.conda/envs/env/lib/python3.7/site-packages/numba-0.50.1-py3.7-linux-x86_64.egg', '/home/phy/.conda/envs/env/lib/python3.7/site-packages/llvmlite-0.33.0-py3.7-linux-x86_64.egg', '/home/phy/env']\r\n```\r\nHowever when I include the PCL directories in CMakeLists.txt, the python path is changed to the python2 system path.\r\n* python code:\r\n```\r\nimport sys\r\nprint(sys.path)\r\n```\r\n```\r\n['/usr/lib/python2.7', '/usr/lib/python2.7/plat-x86_64-linux-gnu', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/home/phy/.local/lib/python2.7/site-packages', '/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages', u'.',]\r\n```\r\n* CMakelists.txt:\r\n```\r\ncmake_minimum_required(VERSION 2.8 FATAL_ERROR)\r\nproject(cli_cplusplus)\r\nfind_package(Python3 COMPONENTS Interpreter)\r\nfind_package( pybind11 REQUIRED)\r\nfind_package( PCL 1.8 REQUIRED)\r\ninclude_directories(${PYTHON_INCLUDE_DIRS})\r\ninclude_directories( ${Boost_INCLUDE_DIR} ${PCL_INCLUDE_DIRS})\r\nlink_directories(${PCL_LIBRARY_DIRS})\r\nadd_definitions(\"-Wall -DCPU_ONLY -std=c++11 -O3 -g\")\r\ntarget_link_libraries (main PRIVATE pybind11::embed ${PCL_LIBRARIES} -lstdc++fs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2383", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2383/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2383/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2383/events", "html_url": "https://github.com/pybind/pybind11/issues/2383", "id": 677234581, "node_id": "MDU6SXNzdWU2NzcyMzQ1ODE=", "number": 2383, "title": "Segfault when __repr__ throws", "user": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 232625247, "node_id": "MDU6TGFiZWwyMzI2MjUyNDc=", "url": "https://api.github.com/repos/pybind/pybind11/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-11T22:16:51Z", "updated_at": "2020-08-18T11:14:35Z", "closed_at": "2020-08-18T11:14:35Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nIf a `__repr__` throws, then passing an invalid object causes a segfault.\r\n\r\n## Reproducible example code\r\n\r\n```diff\r\ndiff --git a/tests/test_exceptions.cpp b/tests/test_exceptions.cpp\r\nindex 372d0ae..8244322 100644\r\n--- a/tests/test_exceptions.cpp\r\n+++ b/tests/test_exceptions.cpp\r\n@@ -218,4 +218,7 @@ TEST_SUBMODULE(exceptions, m) {\r\n         }\r\n     });\r\n\r\n+    // Test repr that cannot be displayed\r\n+    m.def(\"simple_bool_passthrough\", [](bool x){return x;});\r\n+\r\n }\r\ndiff --git a/tests/test_exceptions.py b/tests/test_exceptions.py\r\nindex b794e3d..64bdc63 100644\r\n--- a/tests/test_exceptions.py\r\n+++ b/tests/test_exceptions.py\r\n@@ -179,3 +179,14 @@ def test_nested_throws(capture):\r\n     with pytest.raises(m.MyException5) as excinfo:\r\n         m.try_catch(m.MyException, pycatch, m.MyException, m.throws5)\r\n     assert str(excinfo.value) == \"this is a helper-defined translated exception\"\r\n+\r\n+\r\n+# This can often happen if you wrap a pybind11 class in a Python wrapper\r\n+def test_invalid_repr():\r\n+\r\n+    class MyRepr(object):\r\n+        def __repr__(self):\r\n+            raise AttributeError(\"Example error\")\r\n+\r\n+\r\n+    m.simple_bool_passthrough(MyRepr())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2381", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2381/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2381/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2381/events", "html_url": "https://github.com/pybind/pybind11/issues/2381", "id": 676690017, "node_id": "MDU6SXNzdWU2NzY2OTAwMTc=", "number": 2381, "title": "Recent CMake changes prefer pybind11 installed in /usr/local/include to development files [macOS]", "user": {"login": "jbarlow83", "id": 1825843, "node_id": "MDQ6VXNlcjE4MjU4NDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1825843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbarlow83", "html_url": "https://github.com/jbarlow83", "followers_url": "https://api.github.com/users/jbarlow83/followers", "following_url": "https://api.github.com/users/jbarlow83/following{/other_user}", "gists_url": "https://api.github.com/users/jbarlow83/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbarlow83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbarlow83/subscriptions", "organizations_url": "https://api.github.com/users/jbarlow83/orgs", "repos_url": "https://api.github.com/users/jbarlow83/repos", "events_url": "https://api.github.com/users/jbarlow83/events{/privacy}", "received_events_url": "https://api.github.com/users/jbarlow83/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-08-11T08:36:19Z", "updated_at": "2020-08-12T13:33:09Z", "closed_at": "2020-08-12T13:33:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nCheckout HEAD -  commit 17320463\r\n```\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake [check]\r\n```\r\n\r\nThis is a regression compared to v2.5.0, where commands above work without issue.\r\n\r\ncmake: 3.18.1\r\nclang: Apple clang version 11.0.0 (clang-1100.0.33.17)\r\nmake: GNU Make 3.81\r\n\r\nResult:\r\n\r\n```\r\n[  2%] Building CXX object tests/CMakeFiles/pybind11_cross_module_tests.dir/pybind11_cross_module_tests.cpp.o\r\n~/src/pybind11/tests/pybind11_cross_module_tests.cpp:10:\r\n~/src/pybind11/tests/pybind11_tests.h:56:1: error: unknown type name 'PYBIND11_NAMESPACE_BEGIN'\r\nPYBIND11_NAMESPACE_BEGIN(pybind11)\r\n^\r\n~/src/pybind11/tests/pybind11_tests.h:56:35: error: expected ';' after top level declarator\r\nPYBIND11_NAMESPACE_BEGIN(pybind11)\r\n                                  ^\r\n                                  ;\r\n~/src/pybind11/tests/pybind11_tests.h:64:1: error: unknown type name 'PYBIND11_NAMESPACE_END'\r\nPYBIND11_NAMESPACE_END(detail)\r\n^\r\n~/src/pybind11/tests/pybind11_tests.h:64:31: error: expected ';' after top level declarator\r\nPYBIND11_NAMESPACE_END(detail)\r\n                              ^\r\n                              ;\r\n~/src/pybind11/tests/pybind11_cross_module_tests.cpp:11:\r\n~/src/pybind11/tests/local_bindings.h:12:19: error: no template named 'LocalBase'\r\nusing LocalType = LocalBase<0>;\r\n                  ^\r\n~/src/pybind11/tests/local_bindings.h:14:22: error: no template named 'LocalBase'\r\nusing NonLocalType = LocalBase<1>;\r\n                     ^\r\n~/src/pybind11/tests/local_bindings.h:16:19: error: no template named 'LocalBase'\r\nusing NonLocal2 = LocalBase<2>;\r\n                  ^\r\n~/src/pybind11/tests/local_bindings.h:18:23: error: no template named 'LocalBase'\r\nusing LocalExternal = LocalBase<3>;\r\n                      ^\r\n~/src/pybind11/tests/local_bindings.h:20:26: error: no template named 'LocalBase'\r\nusing MixedLocalGlobal = LocalBase<4>;\r\n                         ^\r\n~/src/pybind11/tests/local_bindings.h:22:26: error: no template named 'LocalBase'\r\nusing MixedGlobalLocal = LocalBase<5>;\r\n                         ^\r\n~/src/pybind11/tests/local_bindings.h:25:23: error: no template named 'LocalBase'\r\nusing ExternalType1 = LocalBase<6>;\r\n                      ^\r\n~/src/pybind11/tests/local_bindings.h:26:23: error: no template named 'LocalBase'\r\nusing ExternalType2 = LocalBase<7>;\r\n                      ^\r\n~/src/pybind11/tests/local_bindings.h:28:30: error: use of undeclared identifier 'LocalType'\r\nusing LocalVec = std::vector<LocalType>;\r\n                             ^\r\n~/src/pybind11/tests/local_bindings.h:29:31: error: use of undeclared identifier 'NonLocal2'\r\nusing LocalVec2 = std::vector<NonLocal2>;\r\n                              ^\r\n~/src/pybind11/tests/local_bindings.h:30:50: error: use of undeclared identifier 'LocalType'\r\nusing LocalMap = std::unordered_map<std::string, LocalType>;\r\n                                                 ^\r\n~/src/pybind11/tests/local_bindings.h:31:33: error: use of undeclared identifier 'NonLocalType'\r\nusing NonLocalVec = std::vector<NonLocalType>;\r\n                                ^\r\n~/src/pybind11/tests/local_bindings.h:32:34: error: use of undeclared identifier 'NonLocal2'\r\nusing NonLocalVec2 = std::vector<NonLocal2>;\r\n                                 ^\r\n~/src/pybind11/tests/local_bindings.h:33:53: error: use of undeclared identifier 'NonLocalType'\r\nusing NonLocalMap = std::unordered_map<std::string, NonLocalType>;\r\n                                                    ^\r\n~/src/pybind11/tests/local_bindings.h:36:22: error: use of undeclared identifier 'LocalVec'\r\nPYBIND11_MAKE_OPAQUE(LocalVec);\r\n                     ^\r\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\r\n20 errors generated.\r\nmake[2]: *** [tests/CMakeFiles/pybind11_cross_module_tests.dir/pybind11_cross_module_tests.cpp.o] Error 1\r\nmake[1]: *** [tests/CMakeFiles/pybind11_cross_module_tests.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n\r\n\r\nThe same errors occurs in each of these cases:\r\n* attempt this with homebrew python (3.8) in the system environment\r\n* attempt the same through a virtual environment\r\n* `pip install .` is used to install pybind11 \r\n* `pip install -e .` is used to install pybind11 in edit mode\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2379", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2379/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2379/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2379/events", "html_url": "https://github.com/pybind/pybind11/issues/2379", "id": 676468419, "node_id": "MDU6SXNzdWU2NzY0Njg0MTk=", "number": 2379, "title": "Warning when compiling under Visual Studio 16.7.0", "user": {"login": "MichaelGoulding", "id": 18077959, "node_id": "MDQ6VXNlcjE4MDc3OTU5", "avatar_url": "https://avatars3.githubusercontent.com/u/18077959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelGoulding", "html_url": "https://github.com/MichaelGoulding", "followers_url": "https://api.github.com/users/MichaelGoulding/followers", "following_url": "https://api.github.com/users/MichaelGoulding/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelGoulding/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelGoulding/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelGoulding/subscriptions", "organizations_url": "https://api.github.com/users/MichaelGoulding/orgs", "repos_url": "https://api.github.com/users/MichaelGoulding/repos", "events_url": "https://api.github.com/users/MichaelGoulding/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelGoulding/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-10T23:06:56Z", "updated_at": "2020-08-14T16:15:50Z", "closed_at": "2020-08-14T16:15:50Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nWarning C26817\r\nPotentially expensive copy of variable 'vh' in range-for loop. Consider making it a const reference (es.71).\r\ninclude\\pybind11\\cast.h:461\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2375", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2375/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2375/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2375/events", "html_url": "https://github.com/pybind/pybind11/issues/2375", "id": 675594624, "node_id": "MDU6SXNzdWU2NzU1OTQ2MjQ=", "number": 2375, "title": "Thx", "user": {"login": "Redface28", "id": 69325712, "node_id": "MDQ6VXNlcjY5MzI1NzEy", "avatar_url": "https://avatars3.githubusercontent.com/u/69325712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Redface28", "html_url": "https://github.com/Redface28", "followers_url": "https://api.github.com/users/Redface28/followers", "following_url": "https://api.github.com/users/Redface28/following{/other_user}", "gists_url": "https://api.github.com/users/Redface28/gists{/gist_id}", "starred_url": "https://api.github.com/users/Redface28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Redface28/subscriptions", "organizations_url": "https://api.github.com/users/Redface28/orgs", "repos_url": "https://api.github.com/users/Redface28/repos", "events_url": "https://api.github.com/users/Redface28/events{/privacy}", "received_events_url": "https://api.github.com/users/Redface28/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-08T22:00:09Z", "updated_at": "2020-08-09T16:28:54Z", "closed_at": "2020-08-09T16:28:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need these repository", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2373", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2373/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2373/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2373/events", "html_url": "https://github.com/pybind/pybind11/issues/2373", "id": 675526887, "node_id": "MDU6SXNzdWU2NzU1MjY4ODc=", "number": 2373, "title": "pybind11_add_module unexpected error after PR #2368", "user": {"login": "MonkeyBreaker", "id": 26163575, "node_id": "MDQ6VXNlcjI2MTYzNTc1", "avatar_url": "https://avatars0.githubusercontent.com/u/26163575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MonkeyBreaker", "html_url": "https://github.com/MonkeyBreaker", "followers_url": "https://api.github.com/users/MonkeyBreaker/followers", "following_url": "https://api.github.com/users/MonkeyBreaker/following{/other_user}", "gists_url": "https://api.github.com/users/MonkeyBreaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/MonkeyBreaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MonkeyBreaker/subscriptions", "organizations_url": "https://api.github.com/users/MonkeyBreaker/orgs", "repos_url": "https://api.github.com/users/MonkeyBreaker/repos", "events_url": "https://api.github.com/users/MonkeyBreaker/events{/privacy}", "received_events_url": "https://api.github.com/users/MonkeyBreaker/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-08-08T13:37:49Z", "updated_at": "2020-08-17T09:15:06Z", "closed_at": "2020-08-17T09:15:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nAfter integrating latest PR #2368 on our library, building started producing errors:\r\n\r\n```\r\n You have called ADD_LIBRARY for library '' without any source files. ...\r\n```\r\n\r\nAfter looking into the documentation, I could not find the issue, but looking into the PR, I saw that when using `pybind11_add_module`, it explicitly uses the keyword `MODULE`, and from what I understood in the documentation\r\n\r\n> MODULE or SHARED may be given to specify the type of library. If no type is given, MODULE is used by default which ensures the creation of a Python-exclusive module. \r\n\r\nI don't know if it isn't any more the case. and now the `MODULE` keyword **must** be used?\r\n\r\nBecause when I use the keyword `MODULE` everything compiles just fine.\r\n\r\nI tested `pybind11` before the last merge of #2368 and without using the keyword `MODULE` it compiles just fine.\r\n\r\n## Reproducible example code\r\n\r\nMaybe I'm crazy but the simple example from the [documentation](https://pybind11.readthedocs.io/en/latest/compiling.html#building-with-cmake) does not work on my machine:\r\n\r\n```cmake\r\ncmake_minimum_required(VERSION 3.7)\r\nproject(example)\r\n\r\nadd_subdirectory(pybind11)\r\npybind11_add_module(example my_file.cpp)\r\n```\r\n\r\nThank you for the great library,\r\nJuli\u00e1n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2357", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2357/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2357/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2357/events", "html_url": "https://github.com/pybind/pybind11/issues/2357", "id": 671162541, "node_id": "MDU6SXNzdWU2NzExNjI1NDE=", "number": 2357, "title": "Pybind11 on Windows might need a CMake version newer than 3.10.1?", "user": {"login": "patrikhuber", "id": 4967343, "node_id": "MDQ6VXNlcjQ5NjczNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4967343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrikhuber", "html_url": "https://github.com/patrikhuber", "followers_url": "https://api.github.com/users/patrikhuber/followers", "following_url": "https://api.github.com/users/patrikhuber/following{/other_user}", "gists_url": "https://api.github.com/users/patrikhuber/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrikhuber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrikhuber/subscriptions", "organizations_url": "https://api.github.com/users/patrikhuber/orgs", "repos_url": "https://api.github.com/users/patrikhuber/repos", "events_url": "https://api.github.com/users/patrikhuber/events{/privacy}", "received_events_url": "https://api.github.com/users/patrikhuber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-08-01T20:14:03Z", "updated_at": "2020-08-19T16:26:26Z", "closed_at": "2020-08-19T16:26:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After updating to the latest master commit of pybind11, my AppVeyor build on Windows is hitting an error:\r\n\r\n```\r\n-- pybind11 v2.6.0 dev\r\n-- Found PythonInterp: C:\\Python36-x64\\python.exe (found version \"3.6.8\") \r\n-- Found PythonLibs: C:/Python36-x64/libs/python36.lib\r\n-- Configuring done\r\nCMake Error at 3rdparty/pybind11/tools/pybind11Tools.cmake:152 (target_link_libraries):\r\n  Error evaluating generator expression:\r\n    $<COMPILE_LANGUAGE:CXX>\r\n  $<COMPILE_LANGUAGE:...> may not be used with Visual Studio generators.\r\nCall Stack (most recent call first):\r\n  python/CMakeLists.txt:1 (pybind11_add_module)\r\n```\r\n(and a few repetitions of that error). Full build log is here, if you can access it: https://ci.appveyor.com/project/patrikhuber/eos/builds/34429669\r\n\r\nThis is with cmake-3.10.1 from https://cmake.org/files/v3.10/cmake-3.10.1-win64-x64.zip. According to the pybind11 CMake requirements, the minimum is 3.7 so this should work?\r\n\r\nEnvironment: AppVeyor `os: Visual Studio 2017`, and CMake Generator \"Visual Studio 15 Win64\".\r\n\r\n\r\nIf I change my AppVeyor build script to cmake-3.18.1 (https://github.com/Kitware/CMake/releases/download/v3.18.1/cmake-3.18.1-win64-x64.zip), then it works, no error.\r\n\r\nI could try a few cmake versions in-between, if that helps. The repo/branch for this is https://github.com/patrikhuber/eos/blob/fix-appveyor-pybind11-cmake/appveyor.yml.\r\n\r\nI have no issues upgrading my CMake version, no need to fix this for ancient CMake versions. People should be on latest CMake versions anyway :-) But I thought it would be good to report this, so that if appropriate, you might want to update the minimum required version for pybind11. Or perhaps I'm making some mistake!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2356", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2356/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2356/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2356/events", "html_url": "https://github.com/pybind/pybind11/issues/2356", "id": 671085770, "node_id": "MDU6SXNzdWU2NzEwODU3NzA=", "number": 2356, "title": "Clearer install instructions needed", "user": {"login": "SourceCodeDeleted", "id": 54761251, "node_id": "MDQ6VXNlcjU0NzYxMjUx", "avatar_url": "https://avatars1.githubusercontent.com/u/54761251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SourceCodeDeleted", "html_url": "https://github.com/SourceCodeDeleted", "followers_url": "https://api.github.com/users/SourceCodeDeleted/followers", "following_url": "https://api.github.com/users/SourceCodeDeleted/following{/other_user}", "gists_url": "https://api.github.com/users/SourceCodeDeleted/gists{/gist_id}", "starred_url": "https://api.github.com/users/SourceCodeDeleted/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SourceCodeDeleted/subscriptions", "organizations_url": "https://api.github.com/users/SourceCodeDeleted/orgs", "repos_url": "https://api.github.com/users/SourceCodeDeleted/repos", "events_url": "https://api.github.com/users/SourceCodeDeleted/events{/privacy}", "received_events_url": "https://api.github.com/users/SourceCodeDeleted/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-01T18:23:52Z", "updated_at": "2020-08-01T19:41:29Z", "closed_at": "2020-08-01T19:39:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I like this project and I like that they are code examples which appear to make this project seem simple to use and install. However, there aren't install instructions in the README.md .\r\n\r\nI was reading the documentation and while code examples are good, I think the install instructions there are leaving some to be desired.\r\n\r\n```\r\n#include <pybind11/pybind11.h>\r\n\r\nint add(int i, int j) {\r\n    return i + j;\r\n}\r\n\r\nPYBIND11_MODULE(example, m) {\r\n    m.doc() = \"pybind11 example plugin\"; // optional module docstring\r\n\r\n    m.def(\"add\", &add, \"A function which adds two numbers\");\r\n}\r\n```\r\n\r\n\r\n```\r\nc++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` pybindtest.cpp -o pybindtest `python3-config --extension-suffix`\r\nc++: error: .cpython-36m-x86_64-linux-gnu.so: No such file or directory\r\n```\r\n\r\nTo me it looks like it is looking in the incorrect directory for the Python dev package. Or I need to builld something additionally which I cannot figure out at this time. \r\n\r\nWhat am I missing in the install of this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2355", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2355/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2355/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2355/events", "html_url": "https://github.com/pybind/pybind11/issues/2355", "id": 670944151, "node_id": "MDU6SXNzdWU2NzA5NDQxNTE=", "number": 2355, "title": "CMake warning about `INTERPROCEDURAL_OPTIMIZATION` from vcpkg.cmake", "user": {"login": "patrikhuber", "id": 4967343, "node_id": "MDQ6VXNlcjQ5NjczNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/4967343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/patrikhuber", "html_url": "https://github.com/patrikhuber", "followers_url": "https://api.github.com/users/patrikhuber/followers", "following_url": "https://api.github.com/users/patrikhuber/following{/other_user}", "gists_url": "https://api.github.com/users/patrikhuber/gists{/gist_id}", "starred_url": "https://api.github.com/users/patrikhuber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/patrikhuber/subscriptions", "organizations_url": "https://api.github.com/users/patrikhuber/orgs", "repos_url": "https://api.github.com/users/patrikhuber/repos", "events_url": "https://api.github.com/users/patrikhuber/events{/privacy}", "received_events_url": "https://api.github.com/users/patrikhuber/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2020-08-01T15:04:35Z", "updated_at": "2020-08-19T16:26:27Z", "closed_at": "2020-08-19T16:26:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nHi,\r\n\r\nI'm using the latest pybind11 master commit (as of today) - as a submodule, not from vcpkg. I'm including that pybind11 commit in one of my projects. That project happens to have a few dependencies, and I'm using vcpkg for those. When clicking \"Generate\" in the CMake GUI, I get the following warning:\r\n\r\n```\r\npybind11 v2.6.0 dev\r\nConfiguring done\r\nCMake Warning (dev) at C:/Users/User/vcpkg/scripts/buildsystems/vcpkg.cmake:362 (_add_library):\r\n  Policy CMP0069 is not set: INTERPROCEDURAL_OPTIMIZATION is enforced when\r\n  enabled.  Run \"cmake --help-policy CMP0069\" for policy details.  Use the\r\n  cmake_policy command to set the policy and suppress this warning.\r\n\r\n  INTERPROCEDURAL_OPTIMIZATION property will be ignored for target\r\n  'python-bindings'.\r\nCall Stack (most recent call first):\r\n  3rdparty/pybind11/tools/pybind11Tools.cmake:150 (add_library)\r\n  python/CMakeLists.txt:1 (pybind11_add_module)\r\nThis warning is for project developers.  Use -Wno-dev to suppress it.\r\n\r\nGenerating done\r\n```\r\n\r\nIt's probably safe to ignore it but a red message during the \"build\" stage is always unsatisfactory. When I enable `PYBIND11_CLASSIC_LTO`, the warning disappears.\r\nI'm using cmake-3.18.0.\r\n\r\nI don't fully understand the warning - is this something vcpkg have to fix in their `vcpkg/scripts/buildsystems/vcpkg.cmake` file? If so, I could open an issue there, but I wanted to check here first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2354", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2354/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2354/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2354/events", "html_url": "https://github.com/pybind/pybind11/issues/2354", "id": 670780734, "node_id": "MDU6SXNzdWU2NzA3ODA3MzQ=", "number": 2354, "title": "how can I convert a python int which is longer than 64 bit to c++", "user": {"login": "leafwaltz", "id": 22277588, "node_id": "MDQ6VXNlcjIyMjc3NTg4", "avatar_url": "https://avatars0.githubusercontent.com/u/22277588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leafwaltz", "html_url": "https://github.com/leafwaltz", "followers_url": "https://api.github.com/users/leafwaltz/followers", "following_url": "https://api.github.com/users/leafwaltz/following{/other_user}", "gists_url": "https://api.github.com/users/leafwaltz/gists{/gist_id}", "starred_url": "https://api.github.com/users/leafwaltz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leafwaltz/subscriptions", "organizations_url": "https://api.github.com/users/leafwaltz/orgs", "repos_url": "https://api.github.com/users/leafwaltz/repos", "events_url": "https://api.github.com/users/leafwaltz/events{/privacy}", "received_events_url": "https://api.github.com/users/leafwaltz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-01T11:23:08Z", "updated_at": "2020-08-01T13:17:41Z", "closed_at": "2020-08-01T13:13:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "how can I convert a python int which is longer than 64 bit to c++?\r\nFor example:\r\nin python:  a_long_int(0b1111...(512bits)...1111)\r\nin c++: a_long_int(some_type value);\r\n\r\na c++ int param not takes effect\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2351", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2351/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2351/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2351/events", "html_url": "https://github.com/pybind/pybind11/issues/2351", "id": 670223022, "node_id": "MDU6SXNzdWU2NzAyMjMwMjI=", "number": 2351, "title": "Pure virtual overloaded functions", "user": {"login": "skgbanga", "id": 8398696, "node_id": "MDQ6VXNlcjgzOTg2OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8398696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skgbanga", "html_url": "https://github.com/skgbanga", "followers_url": "https://api.github.com/users/skgbanga/followers", "following_url": "https://api.github.com/users/skgbanga/following{/other_user}", "gists_url": "https://api.github.com/users/skgbanga/gists{/gist_id}", "starred_url": "https://api.github.com/users/skgbanga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skgbanga/subscriptions", "organizations_url": "https://api.github.com/users/skgbanga/orgs", "repos_url": "https://api.github.com/users/skgbanga/repos", "events_url": "https://api.github.com/users/skgbanga/events{/privacy}", "received_events_url": "https://api.github.com/users/skgbanga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-31T20:53:10Z", "updated_at": "2020-08-10T23:48:48Z", "closed_at": "2020-08-01T14:02:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Note that this question combines two sections in the documentation:\r\n\r\n - https://pybind11.readthedocs.io/en/stable/advanced/classes.html#overriding-virtual-functions-in-python\r\n - https://pybind11.readthedocs.io/en/stable/classes.html#overloaded-methods\r\n\r\nConsider this simple c++ class:\r\n\r\n```cpp\r\nstruct Loaded {\r\n  void func(int) { std::cout << \"int\\n\"; }\r\n  void func(double) { std::cout << \"double\\n\"; }\r\n};\r\n```\r\n\r\nAs explained in the documentation, one can create python bindings for this via:\r\n\r\n```cpp\r\nPYBIND11_MODULE(pyfoo, m) {\r\n  py::class_<Loaded>(m, \"Loaded\")\r\n      .def(py::init<>())\r\n      .def(\"func\", py::overload_cast<int>(&Loaded::func))\r\n      .def(\"func\", py::overload_cast<double>(&Loaded::func));\r\n```\r\n\r\nAnd everything works perfectly on the python side.\r\n\r\n```python\r\n>>> loaded = pyfoo.Loaded()\r\n>>> loaded.func(10)\r\nint\r\n>>> loaded.func(10.0)\r\ndouble\r\n```\r\n\r\n(It is a bit weird that one can do overloading in python via this).\r\n\r\nNow consider another class:\r\n\r\n```cpp\r\nclass Listener {\r\n public:\r\n  virtual ~Listener() = default;\r\n\r\n  virtual void func(int) = 0;\r\n  virtual void func(double) = 0;\r\n};\r\n```\r\n\r\nAs explained in the documentation, this requires us to setup a trampoline like this:\r\n\r\n```cpp\r\nclass PyListener : public Listener {\r\n public:\r\n  void func(int i) override {\r\n    PYBIND11_OVERLOAD_PURE(void, Listener, func, i);\r\n  }\r\n  void func(double d) override {\r\n    PYBIND11_OVERLOAD_PURE(void, Listener, func, d);\r\n  }\r\n};\r\n\r\nPYBIND11_MODULE(pyfoo, m) {\r\n  py::class_<Listener, PyListener>(m, \"Listener\")\r\n      .def(py::init<>())\r\n      .def(\"func\", py::overload_cast<int>(&Listener::func))\r\n      .def(\"func\", py::overload_cast<double>(&Listener::func));\r\n}\r\n```\r\n\r\nNow, my question is: How does one override these methods on the python side. Python clearly doesn't support overloading, so how can I write my own class in this case. \r\n\r\nFailed attempt:\r\n\r\n```python\r\n>>> import pyfoo\r\n>>> class Listener(pyfoo.Listener):\r\n...     def func(self, n: int):\r\n...             print(\"int\")\r\n...     def func(self, n: float):\r\n...             print(\"float\")\r\n...\r\n>>> l = Listener()\r\n>>> l.func(10)\r\nfloat\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2350", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2350/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2350/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2350/events", "html_url": "https://github.com/pybind/pybind11/issues/2350", "id": 670193138, "node_id": "MDU6SXNzdWU2NzAxOTMxMzg=", "number": 2350, "title": "creating stub pyi files automatically from pybind projects", "user": {"login": "daltairwalter", "id": 31971208, "node_id": "MDQ6VXNlcjMxOTcxMjA4", "avatar_url": "https://avatars1.githubusercontent.com/u/31971208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daltairwalter", "html_url": "https://github.com/daltairwalter", "followers_url": "https://api.github.com/users/daltairwalter/followers", "following_url": "https://api.github.com/users/daltairwalter/following{/other_user}", "gists_url": "https://api.github.com/users/daltairwalter/gists{/gist_id}", "starred_url": "https://api.github.com/users/daltairwalter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daltairwalter/subscriptions", "organizations_url": "https://api.github.com/users/daltairwalter/orgs", "repos_url": "https://api.github.com/users/daltairwalter/repos", "events_url": "https://api.github.com/users/daltairwalter/events{/privacy}", "received_events_url": "https://api.github.com/users/daltairwalter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-07-31T20:26:04Z", "updated_at": "2020-08-04T23:32:11Z", "closed_at": "2020-08-03T12:30:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if there was a way to automatically create stub .pyi files for intellisense from pybind11.\r\n\r\nI am not sure if this is better done in pybind11 or in an external scraper utility that tries to analyze the __dict__ of the pyd.  It seems like there are some advantages if this could be done inside of pybind11 though.\r\n1. Annotations and comments could be added in the primary source location.\r\n2. It may be possible to provide more type information.\r\n3. It could be used on embedded code instead of strictly being possible for pyd's.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2344", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2344/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2344/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2344/events", "html_url": "https://github.com/pybind/pybind11/issues/2344", "id": 668533690, "node_id": "MDU6SXNzdWU2Njg1MzM2OTA=", "number": 2344, "title": "certain numpy code hangs in embed python", "user": {"login": "zhouw", "id": 2098924, "node_id": "MDQ6VXNlcjIwOTg5MjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2098924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhouw", "html_url": "https://github.com/zhouw", "followers_url": "https://api.github.com/users/zhouw/followers", "following_url": "https://api.github.com/users/zhouw/following{/other_user}", "gists_url": "https://api.github.com/users/zhouw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhouw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhouw/subscriptions", "organizations_url": "https://api.github.com/users/zhouw/orgs", "repos_url": "https://api.github.com/users/zhouw/repos", "events_url": "https://api.github.com/users/zhouw/events{/privacy}", "received_events_url": "https://api.github.com/users/zhouw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-07-30T09:20:48Z", "updated_at": "2020-07-30T15:17:39Z", "closed_at": "2020-07-30T15:17:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nI was trying to execute embedded python script in a multi-threaded C++ application. Certain numpy operations hang if not executed from the main thread. I suspect these numpy operations may mess up with GIL in underlying c++ module.\r\n\r\nC++17, MSVC 2017 x64, Python 3.7 x64, numpy 1.18.4\r\n\r\n## Reproducible example code\r\n\r\n```\r\nint main()\r\n{\r\n    py::scoped_interpreter interpreter{};\r\n    \r\n    py::exec(\"import numpy as np;print(np.nan < np.random.rand(1,50));\");   // this works\r\n    \r\n    auto fut = std::async(std::launch::async, [] {\r\n        py::exec(\"import numpy as np; print(np.random.rand(1,50));\");  // this works\r\n        py::exec(\"print(np.nan < np.random.rand(1,50));\");             // this hangs\r\n    });\r\n    fut.wait();\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2339", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2339/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2339/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2339/events", "html_url": "https://github.com/pybind/pybind11/issues/2339", "id": 667861534, "node_id": "MDU6SXNzdWU2Njc4NjE1MzQ=", "number": 2339, "title": "ImportError: No module named __builtins__", "user": {"login": "pavelschon", "id": 14923302, "node_id": "MDQ6VXNlcjE0OTIzMzAy", "avatar_url": "https://avatars3.githubusercontent.com/u/14923302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavelschon", "html_url": "https://github.com/pavelschon", "followers_url": "https://api.github.com/users/pavelschon/followers", "following_url": "https://api.github.com/users/pavelschon/following{/other_user}", "gists_url": "https://api.github.com/users/pavelschon/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavelschon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavelschon/subscriptions", "organizations_url": "https://api.github.com/users/pavelschon/orgs", "repos_url": "https://api.github.com/users/pavelschon/repos", "events_url": "https://api.github.com/users/pavelschon/events{/privacy}", "received_events_url": "https://api.github.com/users/pavelschon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-29T13:50:20Z", "updated_at": "2020-07-30T09:20:43Z", "closed_at": "2020-07-30T09:20:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nIt is not possible to import `__builtins__`.\r\nThe error which is thrown is:\r\n```\r\nImportError: No module named __builtins__\r\n```\r\n\r\n## Reproducible example code\r\n```c++\r\nconst auto builtins_module = py::module::import(\"__builtins__\");\r\nconst auto hex_func = builtins_module.attr(\"hex\");\r\n```\r\nNote that the above code works in _BoostPython_.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2337", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2337/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2337/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2337/events", "html_url": "https://github.com/pybind/pybind11/issues/2337", "id": 667029736, "node_id": "MDU6SXNzdWU2NjcwMjk3MzY=", "number": 2337, "title": "Problems of exposing const char * field in struct", "user": {"login": "zhanghb97", "id": 25127316, "node_id": "MDQ6VXNlcjI1MTI3MzE2", "avatar_url": "https://avatars0.githubusercontent.com/u/25127316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhanghb97", "html_url": "https://github.com/zhanghb97", "followers_url": "https://api.github.com/users/zhanghb97/followers", "following_url": "https://api.github.com/users/zhanghb97/following{/other_user}", "gists_url": "https://api.github.com/users/zhanghb97/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhanghb97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhanghb97/subscriptions", "organizations_url": "https://api.github.com/users/zhanghb97/orgs", "repos_url": "https://api.github.com/users/zhanghb97/repos", "events_url": "https://api.github.com/users/zhanghb97/events{/privacy}", "received_events_url": "https://api.github.com/users/zhanghb97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-28T12:22:39Z", "updated_at": "2020-07-29T14:13:56Z", "closed_at": "2020-07-28T21:16:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI found binding a struct contains `const char *` field may cause problems in my project. When I get a struct object from a function, the `const char *` field will be empty.\r\nHere I use a prototype to show three situations:\r\n```\r\n// struct contains const char * field and other field.\r\nstruct A {\r\n  const char *a1;\r\n  int a2;\r\n};\r\ntypedef struct A A;\r\nA initA(const char *a1, int a2) {\r\n  return A{a1, a2};\r\n}\r\n\r\n// struct contains const char * field and a nested struct.\r\nstruct B {\r\n  const char * b;\r\n  A a;\r\n};\r\ntypedef struct B B;\r\nB initB(const char *b, A a) {\r\n  return B{b, a};\r\n}\r\n\r\n// struct only contains const char * field.\r\nstruct C {\r\n  const char *c;\r\n};\r\ntypedef struct C C;\r\n\r\nC initC(const char *c) {\r\n  return C{c};\r\n}\r\n```\r\nAnd I use the following code to expose the fields in the struct:\r\n```\r\nPYBIND11_MODULE(test, m) {\r\n  py::class_<A>(m, \"A\")\r\n    .def_readwrite(\"a1\", &A::a1)\r\n    .def_readwrite(\"a2\", &A::a2);\r\n  m.def(\"initA\", &initA);\r\n  \r\n  py::class_<B>(m, \"B\")\r\n    .def_readwrite(\"b\", &B::b)\r\n    .def_readwrite(\"a\", &B::a);\r\n  m.def(\"initB\", &initB);\r\n\r\n  py::class_<C>(m, \"C\")\r\n    .def_readwrite(\"c\", &C::c);\r\n  m.def(\"initC\", &initC);\r\n}\r\n```\r\nThe results:\r\n```\r\n>>> import test\r\n>>> test_a = test.initA(\"test_a\", 10)\r\n>>> test_b = test.initB(\"test_b\", test_a)\r\n>>> test_c = test.initC(\"test_c\")\r\n>>> print(test_a.a1)\r\n\r\n>>> print(test_b.b)\r\n\r\n>>> print(test_c.c)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xf0 in position 0: invalid continuation byte\r\n```\r\nThe expected output should be:\r\n```\r\n>>> print(test_a.a1)\r\ntest_a\r\n>>> print(test_b.b)\r\ntest_b\r\n>>> print(test_c.c)\r\ntest_c\r\n```\r\nBut the actual output is empty and UnicodeDecodeError. I tried `def_readonly` and `def_readwrite` to expose the `const char *` field, but they cause the same problem. I'm not sure is this because the lifetime of `const char *` has already ended when I want to print it? And why the string caused the UnicodeDecodeError? Am I missing something important, how could I solve these problems without touching the source code?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2332", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2332/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2332/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2332/events", "html_url": "https://github.com/pybind/pybind11/issues/2332", "id": 665939346, "node_id": "MDU6SXNzdWU2NjU5MzkzNDY=", "number": 2332, "title": "Why pybind11 generated enum type is not PEP 435 compatible. say, it doesn't have value attribute and it's not iterable.", "user": {"login": "frank-xlj", "id": 12624107, "node_id": "MDQ6VXNlcjEyNjI0MTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/12624107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frank-xlj", "html_url": "https://github.com/frank-xlj", "followers_url": "https://api.github.com/users/frank-xlj/followers", "following_url": "https://api.github.com/users/frank-xlj/following{/other_user}", "gists_url": "https://api.github.com/users/frank-xlj/gists{/gist_id}", "starred_url": "https://api.github.com/users/frank-xlj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frank-xlj/subscriptions", "organizations_url": "https://api.github.com/users/frank-xlj/orgs", "repos_url": "https://api.github.com/users/frank-xlj/repos", "events_url": "https://api.github.com/users/frank-xlj/events{/privacy}", "received_events_url": "https://api.github.com/users/frank-xlj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-27T03:01:54Z", "updated_at": "2020-07-27T10:25:20Z", "closed_at": "2020-07-27T10:24:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure you've completed the following steps before submitting your issue -- thank you!\r\n\r\n1. Check if your question has already been answered in the [FAQ](http://pybind11.readthedocs.io/en/latest/faq.html) section.\r\n2. Make sure you've read the [documentation](http://pybind11.readthedocs.io/en/latest/). Your issue may be addressed there.\r\n3. If those resources didn't help and you only have a short question (not a bug report), consider asking in the [Gitter chat room](https://gitter.im/pybind/Lobby).\r\n4. If you have a genuine bug report or a more complex question which is not answered in the previous items (or not suitable for chat), please fill in the details below.\r\n5. Include a self-contained and minimal piece of code that reproduces the problem. If that's not possible, try to make the description as clear as possible.\r\n\r\n*After reading, remove this checklist and the template text in parentheses below.*\r\n\r\n## Issue description\r\n\r\n(Provide a short description, state the expected behavior and what actually happens.)\r\n\r\n## Reproducible example code\r\n\r\n(The code should be minimal, have no external dependencies, isolate the function(s) that cause breakage. Submit matched and complete C++ and Python snippets that can be easily compiled and run to diagnose the issue.)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2331", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2331/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2331/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2331/events", "html_url": "https://github.com/pybind/pybind11/issues/2331", "id": 665935729, "node_id": "MDU6SXNzdWU2NjU5MzU3Mjk=", "number": 2331, "title": "ModuleNotFoundError: import of builtins halted; None in sys.modules", "user": {"login": "tlsdmstn56-2", "id": 66994566, "node_id": "MDQ6VXNlcjY2OTk0NTY2", "avatar_url": "https://avatars2.githubusercontent.com/u/66994566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlsdmstn56-2", "html_url": "https://github.com/tlsdmstn56-2", "followers_url": "https://api.github.com/users/tlsdmstn56-2/followers", "following_url": "https://api.github.com/users/tlsdmstn56-2/following{/other_user}", "gists_url": "https://api.github.com/users/tlsdmstn56-2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlsdmstn56-2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlsdmstn56-2/subscriptions", "organizations_url": "https://api.github.com/users/tlsdmstn56-2/orgs", "repos_url": "https://api.github.com/users/tlsdmstn56-2/repos", "events_url": "https://api.github.com/users/tlsdmstn56-2/events{/privacy}", "received_events_url": "https://api.github.com/users/tlsdmstn56-2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-27T02:50:32Z", "updated_at": "2020-07-27T13:24:26Z", "closed_at": "2020-07-27T13:24:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nError occur at the end of python script\r\n\r\n```\r\nterminate called after throwing an instance of 'pybind11::error_already_set'\r\n  what():  ModuleNotFoundError: import of builtins halted; None in sys.modules\r\nAborted (core dumped)\r\n```\r\n\r\n## Reproducible example code\r\n\r\nI made modifications on [pybind/cmake_example](https://github.com/pybind/cmake_example).\r\n\r\nTherefore if you update `main.cpp` to the following code, you can easily compile and test it.\r\n\r\n```cpp\r\n// use pybind version: v.2.5.0\r\n#include <pybind11/pybind11.h>\r\n#include <pybind11/numpy.h>\r\n#include <pybind11/iostream.h>\r\n#include <pybind11/stl.h>\r\n\r\n#include <vector>\r\n#include <iostream>\r\n\r\nnamespace py = pybind11;\r\n\r\ntemplate <typename T>\r\npy::array_t<T> to_numpy(std::vector<T> &&v)\r\n{\r\n    auto new_vec = new std::vector<T>(std::move(v));\r\n    py::capsule clear = py::capsule((void *)new_vec, [](void *vec) {\r\n        py::scoped_ostream_redirect output;\r\n        std::cout << \"delete vector\\n\";\r\n        delete reinterpret_cast<std::vector<T> *>(vec);\r\n    });\r\n    return py::array_t<T>({new_vec->size()}, {sizeof(T)}, new_vec->data(), clear);\r\n}\r\n\r\nPYBIND11_MODULE(cmake_example, m)\r\n{\r\n    m.def(\r\n        \"get_vector\", []() {\r\n            return to_numpy<int>(std::vector<int>(10000, 0));\r\n        },\r\n        \"\");\r\n}\r\n\r\n```\r\n\r\nThis is the used python script\r\n\r\n```python\r\nimport cmake_example as ce\r\n\r\nif __name__ == \"__main__\":\r\n    for _ in range(10):\r\n        vec = ce.get_vector()\r\n    # del vec\r\n```\r\nAnd stdout of the script is:\r\n```\r\n$ python3 test.py\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\ndelete vector\r\nterminate called after throwing an instance of 'pybind11::error_already_set'\r\n  what():  ModuleNotFoundError: import of builtins halted; None in sys.modules\r\nAborted (core dumped)\r\n```\r\n\r\nHowever when I add `del vec` (removing `#` from the python code above), this issue disappeared.\r\n\r\nIs there someone who has the same issue?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2329", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2329/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2329/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2329/events", "html_url": "https://github.com/pybind/pybind11/issues/2329", "id": 665771722, "node_id": "MDU6SXNzdWU2NjU3NzE3MjI=", "number": 2329, "title": "register a function in PYBIND11_MODULE(my_module, m) to by called during import my_module", "user": {"login": "xunleiwu", "id": 7860803, "node_id": "MDQ6VXNlcjc4NjA4MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7860803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xunleiwu", "html_url": "https://github.com/xunleiwu", "followers_url": "https://api.github.com/users/xunleiwu/followers", "following_url": "https://api.github.com/users/xunleiwu/following{/other_user}", "gists_url": "https://api.github.com/users/xunleiwu/gists{/gist_id}", "starred_url": "https://api.github.com/users/xunleiwu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xunleiwu/subscriptions", "organizations_url": "https://api.github.com/users/xunleiwu/orgs", "repos_url": "https://api.github.com/users/xunleiwu/repos", "events_url": "https://api.github.com/users/xunleiwu/events{/privacy}", "received_events_url": "https://api.github.com/users/xunleiwu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-26T12:31:59Z", "updated_at": "2020-07-26T12:42:27Z", "closed_at": "2020-07-26T12:41:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "## How to register/export a function in PYBIND11_MODULE(my_module, m) so that in Python, import my_module will invoke such function?\r\n\r\ninclude <pybind11/pybind11.h>\r\nint checkLicense(...) { \r\n... \r\n}\r\n\r\nint add(int i, int j) {\r\nreturn i + j;\r\n}\r\n\r\nPYBIND11_MODULE(my_module, m) {\r\nm.doc() = \"pybind11 my_module plugin\"; // optional module docstring\r\nm.def(\"add\", &add, \"A function which adds two numbers\");\r\n}\r\n\r\nI have asked the question in https://gitter.im/pybind/Lobby#. I have not got a working answer. I wonder whether I have to inherit py::module and customize a constructor in the derived class calling checkLicense(). If so, would you please provide an example? Thank you all very much.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2323", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2323/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2323/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2323/events", "html_url": "https://github.com/pybind/pybind11/issues/2323", "id": 664870981, "node_id": "MDU6SXNzdWU2NjQ4NzA5ODE=", "number": 2323, "title": "lister_caster did not be called constructed function(using Debug build)", "user": {"login": "wanghuancoder", "id": 26922892, "node_id": "MDQ6VXNlcjI2OTIyODky", "avatar_url": "https://avatars2.githubusercontent.com/u/26922892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wanghuancoder", "html_url": "https://github.com/wanghuancoder", "followers_url": "https://api.github.com/users/wanghuancoder/followers", "following_url": "https://api.github.com/users/wanghuancoder/following{/other_user}", "gists_url": "https://api.github.com/users/wanghuancoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/wanghuancoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wanghuancoder/subscriptions", "organizations_url": "https://api.github.com/users/wanghuancoder/orgs", "repos_url": "https://api.github.com/users/wanghuancoder/repos", "events_url": "https://api.github.com/users/wanghuancoder/events{/privacy}", "received_events_url": "https://api.github.com/users/wanghuancoder/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-24T02:13:10Z", "updated_at": "2020-07-29T14:11:48Z", "closed_at": "2020-07-29T14:11:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\nHello!\r\nWe used pybind11(v2.2.4) in Paddle(https://github.com/PaddlePaddle/Paddle). And there is crash when using Debug build\uff08Release OK\uff09\u3002\r\n1.\r\nThe crash is triggered at:\r\nhttps://github.com/pybind/pybind11/blob/v2.2.4/include/pybind11/stl.h#L144\r\na1be85f\r\n`144                    value.clear();`\r\n\r\nDue to struct list_caster did not be called constructed function, thus the vector 'value' did not be called constructed function eather.\r\nThus, vector 'value' size is big whitout of initialization\u3002value.clear() triggered the crash.\r\n\r\nThe list_caster is holded by variable 'argcasters' of 'argument_loader' at:\r\nhttps://github.com/pybind/pybind11/blob/v2.2.4/include/pybind11/cast.h#L1877\r\na1be85f\r\n`1877               std::tuple<make_caster<Args>...> argcasters;`\r\n2.\r\nWhen crashed\uff0c\r\n'std::tuple<make_caster<Args>...> argcasters;' is:\r\nstd::tuple<pybind11::detail::type_caster<paddle::operators::reader::OrderedMultiDeviceLoDTensorBlockingQueue, void>, pybind11::detail::type_caster<std::vector<paddle::framework::LoDTensor, std::allocator<paddle::framework::LoDTensor> >, void> > argcasters;\r\n(Provide a short description, state the expected behavior and what actually happens.)\r\n\r\n## Reproducible example code\r\nPlease see #https://github.com/PaddlePaddle/Paddle/issues/24863\r\n(The code should be minimal, have no external dependencies, isolate the function(s) that cause breakage. Submit matched and complete C++ and Python snippets that can be easily compiled and run to diagnose the issue.)\r\n\r\nEDIT (@YannickJadoul): *After reading, remove this checklist and the template text in parentheses below.*", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2318", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2318/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2318/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2318/events", "html_url": "https://github.com/pybind/pybind11/issues/2318", "id": 664399840, "node_id": "MDU6SXNzdWU2NjQzOTk4NDA=", "number": 2318, "title": "Missing .git in submodule URL.", "user": {"login": "xkszltl", "id": 5203025, "node_id": "MDQ6VXNlcjUyMDMwMjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5203025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xkszltl", "html_url": "https://github.com/xkszltl", "followers_url": "https://api.github.com/users/xkszltl/followers", "following_url": "https://api.github.com/users/xkszltl/following{/other_user}", "gists_url": "https://api.github.com/users/xkszltl/gists{/gist_id}", "starred_url": "https://api.github.com/users/xkszltl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xkszltl/subscriptions", "organizations_url": "https://api.github.com/users/xkszltl/orgs", "repos_url": "https://api.github.com/users/xkszltl/repos", "events_url": "https://api.github.com/users/xkszltl/events{/privacy}", "received_events_url": "https://api.github.com/users/xkszltl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-23T11:29:27Z", "updated_at": "2020-07-23T17:21:10Z", "closed_at": "2020-07-23T17:21:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nhttps://github.com/pybind/pybind11/blob/96c67636132dc25f87ca59e40cb4d40a965fc137/.gitmodules#L3\r\n\r\nThis line should end with `.git`.\r\nAlthough GitHub allows access both with/without it, in our case we mirror the repo to our own git server for speed and this doesn't work.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2315", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2315/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2315/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2315/events", "html_url": "https://github.com/pybind/pybind11/issues/2315", "id": 664119206, "node_id": "MDU6SXNzdWU2NjQxMTkyMDY=", "number": 2315, "title": "Instantiate a python subclass with an already-created cpp instance", "user": {"login": "dfb", "id": 739849, "node_id": "MDQ6VXNlcjczOTg0OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/739849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfb", "html_url": "https://github.com/dfb", "followers_url": "https://api.github.com/users/dfb/followers", "following_url": "https://api.github.com/users/dfb/following{/other_user}", "gists_url": "https://api.github.com/users/dfb/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfb/subscriptions", "organizations_url": "https://api.github.com/users/dfb/orgs", "repos_url": "https://api.github.com/users/dfb/repos", "events_url": "https://api.github.com/users/dfb/events{/privacy}", "received_events_url": "https://api.github.com/users/dfb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-22T23:59:03Z", "updated_at": "2020-07-23T13:20:52Z", "closed_at": "2020-07-23T13:20:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, this isn't a bug so much as looking for some direction. I'm using pybind11 to wrap classes in a 3rd party game engine. It is already designed to allow you to create your own subclasses, but one wrinkle is that you can't create objects directly (via e.g. `new MySubclass`) but instead have to call a factory function the engine provides. My goal is to create Python subclasses for this engine, but due to the way objects are instantiated, I need to figure out how to take a C++ instance of a base class and then dynamically extend it to become an instance of the Python subclass.\r\n\r\nThe engine provides an `Actor` base class, and I extend it in C++ as `MyActor`, and I set up pybind11 bindings for it, along with a trampoline class `PyMyActor` so that it can be subclassed in Python:\r\n\r\n```c++\r\nclass Actor  // provided by the engine\r\n\r\nclass MyActor : public Actor // my subclass; I use compile-time macros to expose this class to the engine\r\n\r\nclass PyMAyctor : public MyActor // my trampoline class\r\n\r\nPYBIND11_EMBEDDED_MODULE(engine, m) {\r\n  py:class_<MyActor, PyMyActor>(m, \"MyActor\") ...\r\n\r\n  m.def(\"spawn\", [](py::object klass) -> py::object\r\n  {\r\n      MyActor *inst = engine.spawn<MyActor>();\r\n      // TODO: \"extend\" this to be an instance of klass\r\n  });\r\n}\r\n```\r\n\r\nand then in Python something like:\r\n\r\n```py\r\nimport engine\r\nclass Foo(engine.MyActor):\r\n   pass\r\n...\r\nnewActor = engine.spawn(Foo)\r\n```\r\n\r\nThe engine will only ever know about my base class (and/or maybe the trampoline class, if needed) as that is all that is known about at compile time. The `spawn` function in C++ would normally just create a new instance by calling the passed in class, but that's not possible here because the engine needs to create the C++ object - so basically I need to split apart the instantiation process that pybind11 does, and only do the \"stuff\" after that C++ object is created (creating the corresponding Python object for the subclass).\r\n\r\nAs a hacky proof of concept, I modified `pybind11_object_new` to allow me to override the type object:\r\n\r\n```c++\r\nPyTypeObject *nextType = nullptr; // an unguarded global variable, wheeee\r\nextern \"C\" inline PyObject *pybind11_object_new(PyTypeObject *type, PyObject *, PyObject *) {\r\n    if (nextType != nullptr)\r\n    {\r\n        type = nextType;\r\n        nextType = nullptr;\r\n    }\r\n    return make_new_instance(type);\r\n}\r\n```\r\n\r\nand then in my `spawn` function I tried:\r\n\r\n```c++\r\n    py::detail::nextType = (PyTypeObject*)klass.ptr();\r\n    PyMyActor *inst = engine.spawn<PyMyActor>();\r\n```\r\n\r\nbut that didn't trigger the pybind11 code that instantiated the Python subclass (pybind11_object_new wasn't called AFAICT) so I'm obviously not hooking in at the right place.\r\n\r\nSo to recap, I'm looking for a way to do:\r\n\r\n```c++\r\npy::object klassFromPython; // provded by the caller\r\npy::object inst = klassFromPython();\r\n```\r\n\r\nExcept that instead of having pybind11 creating the C++ object and the Python object, I provide the C++ object and then it does the rest of the usual steps. Many thanks for any ideas/suggestions (even incomplete ones)!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2313", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2313/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2313/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2313/events", "html_url": "https://github.com/pybind/pybind11/issues/2313", "id": 663282916, "node_id": "MDU6SXNzdWU2NjMyODI5MTY=", "number": 2313, "title": "How can I filter print messages of python on a C++ apllication embeded with python?", "user": {"login": "Bollos00", "id": 53309405, "node_id": "MDQ6VXNlcjUzMzA5NDA1", "avatar_url": "https://avatars2.githubusercontent.com/u/53309405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bollos00", "html_url": "https://github.com/Bollos00", "followers_url": "https://api.github.com/users/Bollos00/followers", "following_url": "https://api.github.com/users/Bollos00/following{/other_user}", "gists_url": "https://api.github.com/users/Bollos00/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bollos00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bollos00/subscriptions", "organizations_url": "https://api.github.com/users/Bollos00/orgs", "repos_url": "https://api.github.com/users/Bollos00/repos", "events_url": "https://api.github.com/users/Bollos00/events{/privacy}", "received_events_url": "https://api.github.com/users/Bollos00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-21T20:19:43Z", "updated_at": "2020-07-21T20:38:36Z", "closed_at": "2020-07-21T20:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good afternoon,\r\n\r\nFirst of all congratulation to the developers for the great work they are doing.\r\n\r\nI am working on a C++ application and I have recently -- successfully -- embedded using this library. However, I am not able to filter the messages that come from my python script.\r\n\r\nFor instance, when I run the following program in c++\r\n```c++\r\n#include \"pybind11/pybind11.h\"\r\n#include \"pybind11/embed.h\"\r\nnamespace py = pybind11;\r\n\r\nint main()\r\n{\r\n    py::initialize_interpreter();\r\n    {\r\n        py::print(\"Hello world from python embedded!\");\r\n        py::exec(\"print(\\'Hello again from python embedded!\\')\");\r\n    }\r\n    py::finalize_interpreter();\r\n    return 0;\r\n}\r\n```\r\nI get -- as expected -- this outuput:\r\n```c++\r\nHello world from python embedded!\r\nHello again from python embedded!\r\n```\r\n\r\nBut what I want to do is filter those print messages and treat them on a predefined funcion. For instance, I want that all print messages passes to the follow function:\r\n```c++\r\nvoid treatPythonPrintMessage(const char* message)\r\n{\r\n    // do something with 'message' here\r\n}\r\n```\r\n\r\nSo every time call \r\n```python\r\nprint(msg)\r\n```\r\non my python script, the `msg` goes to the function `treatPythonPrintMessage`.\r\n\r\nHow can I do it?\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2308", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2308/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2308/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2308/events", "html_url": "https://github.com/pybind/pybind11/issues/2308", "id": 661365746, "node_id": "MDU6SXNzdWU2NjEzNjU3NDY=", "number": 2308, "title": "how to pass numpy array to c++ by value", "user": {"login": "xdaniel9", "id": 22068439, "node_id": "MDQ6VXNlcjIyMDY4NDM5", "avatar_url": "https://avatars1.githubusercontent.com/u/22068439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xdaniel9", "html_url": "https://github.com/xdaniel9", "followers_url": "https://api.github.com/users/xdaniel9/followers", "following_url": "https://api.github.com/users/xdaniel9/following{/other_user}", "gists_url": "https://api.github.com/users/xdaniel9/gists{/gist_id}", "starred_url": "https://api.github.com/users/xdaniel9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xdaniel9/subscriptions", "organizations_url": "https://api.github.com/users/xdaniel9/orgs", "repos_url": "https://api.github.com/users/xdaniel9/repos", "events_url": "https://api.github.com/users/xdaniel9/events{/privacy}", "received_events_url": "https://api.github.com/users/xdaniel9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T04:46:28Z", "updated_at": "2020-07-20T11:01:50Z", "closed_at": "2020-07-20T11:01:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "here is my function signature\r\n```\r\nauto fun(py::array_t<double, py::array::c_style | py::array::forcecast> x)\r\n```\r\nMy question is that how to pass x to this function by value, currently, if I pass x with dtype `np.float64`, then x is passed by reference.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2306", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2306/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2306/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2306/events", "html_url": "https://github.com/pybind/pybind11/issues/2306", "id": 659664285, "node_id": "MDU6SXNzdWU2NTk2NjQyODU=", "number": 2306, "title": "Reducing compile time memory consumption strategies", "user": {"login": "atom-moyer", "id": 15901369, "node_id": "MDQ6VXNlcjE1OTAxMzY5", "avatar_url": "https://avatars0.githubusercontent.com/u/15901369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atom-moyer", "html_url": "https://github.com/atom-moyer", "followers_url": "https://api.github.com/users/atom-moyer/followers", "following_url": "https://api.github.com/users/atom-moyer/following{/other_user}", "gists_url": "https://api.github.com/users/atom-moyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/atom-moyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atom-moyer/subscriptions", "organizations_url": "https://api.github.com/users/atom-moyer/orgs", "repos_url": "https://api.github.com/users/atom-moyer/repos", "events_url": "https://api.github.com/users/atom-moyer/events{/privacy}", "received_events_url": "https://api.github.com/users/atom-moyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-17T21:48:40Z", "updated_at": "2020-07-18T18:00:57Z", "closed_at": "2020-07-18T18:00:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI have a project that wraps a C++ template class (map) into many precompiled forms to work with most combinations of numpy datatypes. However this takes a lot of memory during compilations to compile all of these combinations into one module.\r\n\r\nIs there a simple way to break up compilation of all these template instances and keep them in one module, or do I need to make several dummy modules and keep track of which module each class is compiled to in python?\r\n\r\nI tried to naive approach which is just splitting up the module into multiple C++ files (this reduced memory consumption), but creating the same module in the different files could not be handled during linking I believe.\r\n\r\nHere is a link to the repo: https://github.com/atom-moyer/getpy\r\n\r\nThanks,\r\nAdam", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2305", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2305/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2305/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2305/events", "html_url": "https://github.com/pybind/pybind11/issues/2305", "id": 659654091, "node_id": "MDU6SXNzdWU2NTk2NTQwOTE=", "number": 2305, "title": "PyType_Slot *slots; /* terminated by slot==0. ", "user": {"login": "nyckmaia", "id": 4555404, "node_id": "MDQ6VXNlcjQ1NTU0MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4555404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyckmaia", "html_url": "https://github.com/nyckmaia", "followers_url": "https://api.github.com/users/nyckmaia/followers", "following_url": "https://api.github.com/users/nyckmaia/following{/other_user}", "gists_url": "https://api.github.com/users/nyckmaia/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyckmaia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyckmaia/subscriptions", "organizations_url": "https://api.github.com/users/nyckmaia/orgs", "repos_url": "https://api.github.com/users/nyckmaia/repos", "events_url": "https://api.github.com/users/nyckmaia/events{/privacy}", "received_events_url": "https://api.github.com/users/nyckmaia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-17T21:33:08Z", "updated_at": "2020-07-18T20:50:12Z", "closed_at": "2020-07-18T20:50:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I generated successfully the Linux Makefile to build a Pybind11 module from a C++ code. No errors.\r\nHere below is the compilation process: \r\n```\r\n$ make\r\nScanning dependencies of target Plugin_autogen\r\n[ 14%] Automatic MOC and UIC for target Plugin\r\n[ 14%] Built target Plugin_autogen\r\n[ 28%] Generating ui_dialog.h\r\nScanning dependencies of target Plugin\r\n[ 42%] Building CXX object CMakeFiles/Plugin.dir/Plugin_autogen/mocs_compilation.cpp.o\r\n[ 57%] Building CXX object CMakeFiles/Plugin.dir/dialog.cpp.o\r\n[ 71%] Building CXX object CMakeFiles/Plugin.dir/plugin.cpp.o\r\n[ 85%] Building CXX object CMakeFiles/Plugin.dir/py_plugin.cpp.o\r\nIn file included from /usr/include/python3.8/pytime.h:6,\r\n                 from /usr/include/python3.8/Python.h:85,\r\n                 from /home/nyck/Desktop/FEM/rotortest/rtt-plugin/pybind11/include/pybind11/detail/common.h:112,\r\n                 from /home/nyck/Desktop/FEM/rotortest/rtt-plugin/pybind11/include/pybind11/pytypes.h:12,\r\n                 from /home/nyck/Desktop/FEM/rotortest/rtt-plugin/pybind11/include/pybind11/cast.h:13,\r\n                 from /home/nyck/Desktop/FEM/rotortest/rtt-plugin/pybind11/include/pybind11/attr.h:13,\r\n                 from /home/nyck/Desktop/FEM/rotortest/rtt-plugin/pybind11/include/pybind11/pybind11.h:44,\r\n                 from /home/nyck/Desktop/FEM/rotortest/rtt-plugin/py_plugin.cpp:4:\r\n/usr/include/python3.8/object.h:190:23: error: expected unqualified-id before \u2018;\u2019 token\r\n  190 |     PyType_Slot *slots; /* terminated by slot==0. */\r\n      |                       ^\r\nmake[2]: *** [CMakeFiles/Plugin.dir/build.make:106: CMakeFiles/Plugin.dir/py_plugin.cpp.o] Error 1\r\nmake[1]: *** [CMakeFiles/Makefile2:97: CMakeFiles/Plugin.dir/all] Error 2\r\nmake: *** [Makefile:84: all] Error 2\r\n```\r\nAbove is the file where I put the Pybind11 code: `py_plugin.cpp`:\r\n```\r\n#ifdef PYBIND\r\n#include \"plugin.h\"\r\n\r\n#include <pybind11/pybind11.h>\r\n#include <pybind11/stl.h>\r\n#include <pybind11/iostream.h>\r\n#include \"pybind11_json/pybind11_json.hpp\"\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(Plugin, m) {\r\n\r\n    m.doc() = \"Plugin class binding\";\r\n\r\n    // bindings to MusicXML class\r\n    py::class_<Plugin> cls(m, \"Plugin\");\r\n    \r\n    // Default constructor \r\n    cls.def(py::init<>());\r\n    //--------------------- //\r\n\r\n    // ===== CUSTOM GET METHODS ===== //\r\n    cls.def(\"getOutputVar1\", &Plugin::getOutputVar1);\r\n    //--------------------- //\r\n    cls.def(\"getOutputVar2\", &Plugin::getOutputVar2);\r\n    //--------------------- //\r\n    cls.def(\"getOutputVar3\", &Plugin::getOutputVar3);\r\n    //--------------------- //\r\n        \r\n    // ===== DEFAULT PLUGIN API METHODS ===== //\r\n    cls.def(\"enableWriteResultsToFile\", &Plugin::enableWriteResultsToFile);\r\n    //--------------------- //\r\n    cls.def(\"start\", &Plugin::start, \r\n        py::call_guard<py::scoped_ostream_redirect, py::scoped_estream_redirect>());\r\n    //--------------------- //\r\n}\r\n#endif\r\n```\r\nSo, the py_plugin.cpp:4 is:\r\n```\r\n#include <pybind11/pybind11.h>\r\n```\r\nBut the error is inside another file:\r\n```\r\n/usr/include/python3.8/object.h:190:23: error: expected unqualified-id before \u2018;\u2019 token\r\n  190 |     PyType_Slot *slots; /* terminated by slot==0. */\r\n```\r\n\r\n**How can I fix it?**\r\n\r\n**My system:**\r\n - Ubuntu 20.04 x64\r\n - GCC 9.3\r\n - CMake 3.16.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2304", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2304/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2304/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2304/events", "html_url": "https://github.com/pybind/pybind11/issues/2304", "id": 658744378, "node_id": "MDU6SXNzdWU2NTg3NDQzNzg=", "number": 2304, "title": "Import modules in embedded Python (with C++)", "user": {"login": "hassan-aman", "id": 39269889, "node_id": "MDQ6VXNlcjM5MjY5ODg5", "avatar_url": "https://avatars2.githubusercontent.com/u/39269889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hassan-aman", "html_url": "https://github.com/hassan-aman", "followers_url": "https://api.github.com/users/hassan-aman/followers", "following_url": "https://api.github.com/users/hassan-aman/following{/other_user}", "gists_url": "https://api.github.com/users/hassan-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/hassan-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hassan-aman/subscriptions", "organizations_url": "https://api.github.com/users/hassan-aman/orgs", "repos_url": "https://api.github.com/users/hassan-aman/repos", "events_url": "https://api.github.com/users/hassan-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/hassan-aman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-17T01:50:03Z", "updated_at": "2020-07-17T04:39:20Z", "closed_at": "2020-07-17T04:39:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "(My apologies for asking questions again and again)\r\n\r\nI have two files:\r\n_mts.py:_\r\n\r\n```\r\ndef add(a, b):\r\n    return a + b\r\n```\r\n\r\nand _main.py_\r\n```\r\nprint('Hello, world!')\r\n```\r\n\r\nAnd I have my C++ code\r\n```\r\npy::initialize_interpreter(); // I am purposely not using eval_file because in the future I might not be using files, but strings instead.\r\npy::exec(readFile(\"mts.py\"));\r\npy::exec(readFile(\"main.py\"));\r\npy::finalize_interpreter();\r\n```\r\n\r\nMy question is, how can I import 'mts.py' in 'main.py'? i.e. How can I call 'add' in 'main.py'?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2302", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2302/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2302/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2302/events", "html_url": "https://github.com/pybind/pybind11/issues/2302", "id": 658393716, "node_id": "MDU6SXNzdWU2NTgzOTM3MTY=", "number": 2302, "title": "pybind11 'callable' always returns 'True'", "user": {"login": "hassan-aman", "id": 39269889, "node_id": "MDQ6VXNlcjM5MjY5ODg5", "avatar_url": "https://avatars2.githubusercontent.com/u/39269889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hassan-aman", "html_url": "https://github.com/hassan-aman", "followers_url": "https://api.github.com/users/hassan-aman/followers", "following_url": "https://api.github.com/users/hassan-aman/following{/other_user}", "gists_url": "https://api.github.com/users/hassan-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/hassan-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hassan-aman/subscriptions", "organizations_url": "https://api.github.com/users/hassan-aman/orgs", "repos_url": "https://api.github.com/users/hassan-aman/repos", "events_url": "https://api.github.com/users/hassan-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/hassan-aman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-16T17:17:30Z", "updated_at": "2020-07-16T18:22:11Z", "closed_at": "2020-07-16T18:06:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a python script (simple.py) with this:\r\n```\r\nclass Component:\r\n    name = 'Tagged'\r\n    speed = 23\r\n    rotSpeed = 0.1\r\n```\r\nAnd in my C++ code:\r\n```\r\npybind11::object component = pybind11::globals()[\"Component\"]();\r\npybind11::object callable = pybind11::module::import(\"builtins\").attr(\"callable\");\r\n\r\nif (callable(component.attr(\"rotSpeed\")))\r\n    std::cout << \"Property is callable\" << std::endl; // <-- It always prints this!\r\n```\r\n\r\nHow can I determine through C++ if a property is a function or not?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2300", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2300/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2300/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2300/events", "html_url": "https://github.com/pybind/pybind11/issues/2300", "id": 657689957, "node_id": "MDU6SXNzdWU2NTc2ODk5NTc=", "number": 2300, "title": "Error \"already registered!\" for module_local", "user": {"login": "fnrizzi", "id": 18708772, "node_id": "MDQ6VXNlcjE4NzA4Nzcy", "avatar_url": "https://avatars0.githubusercontent.com/u/18708772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnrizzi", "html_url": "https://github.com/fnrizzi", "followers_url": "https://api.github.com/users/fnrizzi/followers", "following_url": "https://api.github.com/users/fnrizzi/following{/other_user}", "gists_url": "https://api.github.com/users/fnrizzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnrizzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnrizzi/subscriptions", "organizations_url": "https://api.github.com/users/fnrizzi/orgs", "repos_url": "https://api.github.com/users/fnrizzi/repos", "events_url": "https://api.github.com/users/fnrizzi/events{/privacy}", "received_events_url": "https://api.github.com/users/fnrizzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-15T22:06:05Z", "updated_at": "2020-07-16T12:59:20Z", "closed_at": "2020-07-15T22:56:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nHello! I am trying to use the `module_local` to create bindings for the same class under two different modules. But I keep getting a \"already registered!\" error. Not sure if what I am using is the best way to do this. But the doc seems to suggest so. \r\n\r\n## Reproducible example code\r\n\r\n```c++\r\ntemplate <typename T> \r\nstruct MyFoo{\r\n  T a_={};\r\n  MyFoo(T b) : a_(b){}\r\n  T get() const{ return a_; }\r\n};\r\n\r\nPYBIND11_MODULE(mymod, mParent)\r\n{\r\n  pybind11::module m1 = mParent.def_submodule(\"M1\");\r\n  pybind11::class_<MyFoo<int>>(m1, \"MyFoo\", pybind11::module_local())\r\n    .def(pybind11::init<int>());\r\n\r\n  pybind11::module m2 = mParent.def_submodule(\"M2\");\r\n  pybind11::class_<MyFoo<int>>(m2, \"MyFoo\", pybind11::module_local())\r\n    .def(pybind11::init<int>());\r\n}\r\n```\r\nthis gives me this error: `E   ImportError: generic_type: type \"MyFoo\" is already registered!`\r\nI am using pybind11 v2.5 and gcc8.4.0 on macOS. Any help would be much appreciated! thanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2297", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2297/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2297/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2297/events", "html_url": "https://github.com/pybind/pybind11/issues/2297", "id": 656207229, "node_id": "MDU6SXNzdWU2NTYyMDcyMjk=", "number": 2297, "title": "Iterate object properties and keys through C++ Embedded Interface", "user": {"login": "hassan-aman", "id": 39269889, "node_id": "MDQ6VXNlcjM5MjY5ODg5", "avatar_url": "https://avatars2.githubusercontent.com/u/39269889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hassan-aman", "html_url": "https://github.com/hassan-aman", "followers_url": "https://api.github.com/users/hassan-aman/followers", "following_url": "https://api.github.com/users/hassan-aman/following{/other_user}", "gists_url": "https://api.github.com/users/hassan-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/hassan-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hassan-aman/subscriptions", "organizations_url": "https://api.github.com/users/hassan-aman/orgs", "repos_url": "https://api.github.com/users/hassan-aman/repos", "events_url": "https://api.github.com/users/hassan-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/hassan-aman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T23:07:55Z", "updated_at": "2020-07-14T04:06:54Z", "closed_at": "2020-07-14T03:50:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here is a simple script I have (script.py)\r\n```\r\nclass Script:\r\n    extraInfo = 'dog'\r\n    speed = 23\r\n```\r\n\r\nAnd here is the code (C++) I am using to compile and do stuff with it:\r\n```\r\npy::initialize_interpreter();\r\nPyRun_SimpleString(readFile(\"../scripting/scripts/script.py\").c_str());\r\n{\r\n\tpy::object script = py::globals()[\"Script\"]();\r\n        // How on earth am I suppose to iterate through the list of this object's properties? i.e. 'extraInfo' and 'speed'?\r\n}\r\npy::finalize_interpreter();\r\n```\r\n\r\nIn python I'd use the 'dir' function, but in C++, what's the solution?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2296", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2296/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2296/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2296/events", "html_url": "https://github.com/pybind/pybind11/issues/2296", "id": 655432737, "node_id": "MDU6SXNzdWU2NTU0MzI3Mzc=", "number": 2296, "title": "Remove stale readthedocs website https://pybind11-rtdtest.readthedocs.io/", "user": {"login": "YannickJadoul", "id": 8025744, "node_id": "MDQ6VXNlcjgwMjU3NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8025744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YannickJadoul", "html_url": "https://github.com/YannickJadoul", "followers_url": "https://api.github.com/users/YannickJadoul/followers", "following_url": "https://api.github.com/users/YannickJadoul/following{/other_user}", "gists_url": "https://api.github.com/users/YannickJadoul/gists{/gist_id}", "starred_url": "https://api.github.com/users/YannickJadoul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YannickJadoul/subscriptions", "organizations_url": "https://api.github.com/users/YannickJadoul/orgs", "repos_url": "https://api.github.com/users/YannickJadoul/repos", "events_url": "https://api.github.com/users/YannickJadoul/events{/privacy}", "received_events_url": "https://api.github.com/users/YannickJadoul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-12T16:32:49Z", "updated_at": "2020-07-16T15:57:52Z", "closed_at": "2020-07-16T15:57:52Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hi @dean0x7d, it seems you own this old (test version?) of the docs. Is that correct?\r\nI presume it would not serve any purpose anymore, and some users get confused, looking at an old version of the docs.\r\n\r\nIs it possible to remove it?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2295", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2295/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2295/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2295/events", "html_url": "https://github.com/pybind/pybind11/issues/2295", "id": 655411195, "node_id": "MDU6SXNzdWU2NTU0MTExOTU=", "number": 2295, "title": "Build issue on max OS", "user": {"login": "Jeff-avatar", "id": 67798742, "node_id": "MDQ6VXNlcjY3Nzk4NzQy", "avatar_url": "https://avatars0.githubusercontent.com/u/67798742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jeff-avatar", "html_url": "https://github.com/Jeff-avatar", "followers_url": "https://api.github.com/users/Jeff-avatar/followers", "following_url": "https://api.github.com/users/Jeff-avatar/following{/other_user}", "gists_url": "https://api.github.com/users/Jeff-avatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jeff-avatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jeff-avatar/subscriptions", "organizations_url": "https://api.github.com/users/Jeff-avatar/orgs", "repos_url": "https://api.github.com/users/Jeff-avatar/repos", "events_url": "https://api.github.com/users/Jeff-avatar/events{/privacy}", "received_events_url": "https://api.github.com/users/Jeff-avatar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2020-07-12T14:30:08Z", "updated_at": "2020-07-23T21:42:54Z", "closed_at": "2020-07-23T21:42:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nI downloaded pybind11 and ran the following steps as mentioned in the document - http://pybind11.readthedocs.io/en/master/basics.html\r\n\r\nmkdir build\r\ncd build\r\ncmake ..\r\nmake check -j 4\r\n\r\nThen I have the following make errors:\r\n```\r\nusername@user-macbook-pro-2 build % make check -j 4\r\n-- Install configuration: \"MinSizeRel\"\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/attr.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/embed.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/numpy.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/pybind11.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/operators.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/iostream.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/chrono.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/stl_bind.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/buffer_info.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/options.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/functional.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/stl.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail/typeid.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail/descr.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail/internals.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail/common.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail/class.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/detail/init.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/common.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/eval.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/cast.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/eigen.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/pytypes.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/include/pybind11/complex.h\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/share/cmake/pybind11/pybind11Config.cmake\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/share/cmake/pybind11/pybind11ConfigVersion.cmake\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/share/cmake/pybind11/FindPythonLibsNew.cmake\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/share/cmake/pybind11/pybind11Tools.cmake\r\n-- Up-to-date: /Users/zhihui/python_binding/pybind11-master/build/mock_install/share/cmake/pybind11/pybind11Targets.cmake\r\n[  0%] Built target mock_install\r\n[ 81%] Built target pybind11_tests\r\n[ 85%] Built target pybind11_cross_module_tests\r\n[ 89%] Built target cross_module_gil_utils\r\n[ 93%] Built target external_module\r\n[100%] Built target test_embed\r\n[100%] Built target test_installed_function\r\nmake[3]: *** [tests/test_cmake_build/CMakeFiles/test_installed_embed] Error 1\r\nmake[2]: *** [tests/test_cmake_build/CMakeFiles/test_installed_embed.dir/all] Error 2\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[3]: *** [tests/test_cmake_build/CMakeFiles/test_subdirectory_target] Error 1\r\nmake[3]: *** [tests/test_cmake_build/CMakeFiles/test_subdirectory_embed] Error 1\r\nmake[3]: *** [tests/test_cmake_build/CMakeFiles/test_subdirectory_function] Error 1\r\nmake[2]: *** [tests/test_cmake_build/CMakeFiles/test_subdirectory_target.dir/all] Error 2\r\nmake[2]: *** [tests/test_cmake_build/CMakeFiles/test_subdirectory_embed.dir/all] Error 2\r\nmake[2]: *** [tests/test_cmake_build/CMakeFiles/test_subdirectory_function.dir/all] Error 2\r\nmake[1]: *** [tests/CMakeFiles/check.dir/rule] Error 2\r\nmake: *** [check] Error 2\r\n ```\r\nAny body has an idea to solve this problem? Thank you very much. I am on a macbook pro with MacOS Catalina Version 10.15.4. And I have python 2.7 and python 3.7 installed on my Mac.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2288", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2288/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2288/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2288/events", "html_url": "https://github.com/pybind/pybind11/issues/2288", "id": 654816952, "node_id": "MDU6SXNzdWU2NTQ4MTY5NTI=", "number": 2288, "title": "Is there any way to manipulate python dict in-place in c++", "user": {"login": "chenbohua3", "id": 19526090, "node_id": "MDQ6VXNlcjE5NTI2MDkw", "avatar_url": "https://avatars3.githubusercontent.com/u/19526090?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenbohua3", "html_url": "https://github.com/chenbohua3", "followers_url": "https://api.github.com/users/chenbohua3/followers", "following_url": "https://api.github.com/users/chenbohua3/following{/other_user}", "gists_url": "https://api.github.com/users/chenbohua3/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenbohua3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenbohua3/subscriptions", "organizations_url": "https://api.github.com/users/chenbohua3/orgs", "repos_url": "https://api.github.com/users/chenbohua3/repos", "events_url": "https://api.github.com/users/chenbohua3/events{/privacy}", "received_events_url": "https://api.github.com/users/chenbohua3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-10T14:21:25Z", "updated_at": "2020-07-10T15:05:36Z", "closed_at": "2020-07-10T15:05:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "As described [here](https://pybind11.readthedocs.io/en/latest/faq.html#limitations-involving-reference-arguments), immutable objects can not be manipulated by sending reference argument. However, dict is mutable. So Is there any way to manipulate python dict in-place in c++ by sending reference?\r\n\r\n```\r\nvoid f(std::unordered_map<int*, int*>& data) {\r\n  data[1] = 1;\r\n}\r\n```\r\nwith:\r\n```\r\n.def(\"f\", &f)\r\n```\r\n\r\nso we will get:\r\n```\r\ndata = {}\r\nf(data)\r\n# data = {1: 1} now\r\n```\r\n\r\nI have tried codes above and found it does not work. Do i miss something or this goal is just unattainable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2285", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2285/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2285/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2285/events", "html_url": "https://github.com/pybind/pybind11/issues/2285", "id": 654439594, "node_id": "MDU6SXNzdWU2NTQ0Mzk1OTQ=", "number": 2285, "title": "ImportError: undefined symbol", "user": {"login": "viviyoyo", "id": 34588366, "node_id": "MDQ6VXNlcjM0NTg4MzY2", "avatar_url": "https://avatars3.githubusercontent.com/u/34588366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viviyoyo", "html_url": "https://github.com/viviyoyo", "followers_url": "https://api.github.com/users/viviyoyo/followers", "following_url": "https://api.github.com/users/viviyoyo/following{/other_user}", "gists_url": "https://api.github.com/users/viviyoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/viviyoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viviyoyo/subscriptions", "organizations_url": "https://api.github.com/users/viviyoyo/orgs", "repos_url": "https://api.github.com/users/viviyoyo/repos", "events_url": "https://api.github.com/users/viviyoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/viviyoyo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-10T01:10:17Z", "updated_at": "2020-07-10T04:12:07Z", "closed_at": "2020-07-10T04:12:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\nafter binding and try to import python_lib.so, got ImportError: xf_aml_python.so: undefined symbol.\r\n\r\n\r\n## Reproducible example code\r\n```\r\nclass SwiftMT103Checker {\r\n....\r\npublic:\r\n    int initialize(const std::string& xclbinPath,\r\n                   const std::string& stopKeywordsFileName,\r\n                   const std::string& peopleFileName,\r\n                   const std::string& entitiesFileName,\r\n                   const std::string& BICRefDataFileName,\r\n                   const int cardID);\r\n}\r\n```\r\nfor the above class SwiftMT103Checker  initialize function I tried binding as:\r\n```\r\nPYBIND11_MODULE(xf_aml_python, m) {\r\n   py::class_<SwiftMT103Checker> (m,\"SwiftMT103Checker\")\r\n       .def(py::init())\r\n       .def(\"getVecStop\", &SwiftMT103Checker::getVecStop )\r\n       .def(\"getVecPeople\", &SwiftMT103Checker::getVecPeople )\r\n       .def(\"getVecEntity\", &SwiftMT103Checker::getVecEntity )\r\n       .def(\"getVecBIC\", &SwiftMT103Checker::getVecBIC )\r\n       .def(\"initialize\", &SwiftMT103Checker::initialize)\r\n       .def(\"check\", &SwiftMT103Checker::check);\r\n}\r\n```\r\nI am able to compile to the xf_aml_python.so\r\nin test.py, when I try to import class SwiftMT103Checker\r\n```\r\nfrom xf_aml_python import UnscopedEnum, SwiftMT103, SwiftMT103CheckResult,**SwiftMT103Checker**\r\n```\r\nit gave me Error: \r\n```\r\nImportError: xf_aml_python.so: undefined symbol: _ZN2xf3aml17SwiftMT103Checker10initializeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES9_S9_S9_S9_i\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2280", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2280/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2280/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2280/events", "html_url": "https://github.com/pybind/pybind11/issues/2280", "id": 652040524, "node_id": "MDU6SXNzdWU2NTIwNDA1MjQ=", "number": 2280, "title": "std::vector member of boost::optional struct is emptied if any members of the struct are accessed", "user": {"login": "steinmig", "id": 64299434, "node_id": "MDQ6VXNlcjY0Mjk5NDM0", "avatar_url": "https://avatars2.githubusercontent.com/u/64299434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steinmig", "html_url": "https://github.com/steinmig", "followers_url": "https://api.github.com/users/steinmig/followers", "following_url": "https://api.github.com/users/steinmig/following{/other_user}", "gists_url": "https://api.github.com/users/steinmig/gists{/gist_id}", "starred_url": "https://api.github.com/users/steinmig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steinmig/subscriptions", "organizations_url": "https://api.github.com/users/steinmig/orgs", "repos_url": "https://api.github.com/users/steinmig/repos", "events_url": "https://api.github.com/users/steinmig/events{/privacy}", "received_events_url": "https://api.github.com/users/steinmig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 19, "created_at": "2020-07-07T06:28:27Z", "updated_at": "2020-07-07T19:23:57Z", "closed_at": "2020-07-07T18:55:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am totally confused by this behavior and after running around in circles, I hope you guys can help me. <br />\r\nI have a hierarchical data structure of 3 structs in C++, which I renamed in my minimum working example (mwe) House, Room, and Objects. Room is a boost::optional type and has a std::vector<Object> member containing all Objects in this room. The Objects are just a container for some numbers.<br />\r\nI am aware that this is  overly complex for such information, but it is necessary in the original code and cannot be changed easily. I tried to change it into a std::experimental::optional since we do not use c++17, but this broke some parts in our c++ code.<br />\r\n\r\nIn C++, I have no issues at all and the boost::optional and all member variables work perfectly. But after binding everything I run into the weird problem that the std::vector objects is emptied as soon as I access any member variables of the Room. This can be either the length, width, area or the objects itself as shown in the python example. If the objects are accessed for the first time, they are actually returned normally, but when trying the second access they are gone as if the had been moved. The same behavior applies if you perform x = myHouse.kitchen.objects.copy(). The list is in x and can even be accessed multiple times, but the information in kitchen is immediately lost. Weirdly, this also only applies to the objects and all other double members can be accessed indefinitely.<br />\r\nFor convenience of compiling everything for the mwe, I stuffed everything into a single cpp file, which is obviously not the case in the original code. The mwe is included as a zip file and is executed with the .py file. The c++ code is compiled and included via cppimport, but also manual compilation does not change anything. <br />\r\nHere is the complete code, if you don't want to download the zip: <br/>\r\nmwe.cpp: <br />\r\n\r\n```cpp\r\n\r\n#include <boost/optional.hpp>\r\n#include <iostream>\r\n#include <map>\r\n#include <string>\r\n#include <vector>\r\n#include <pybind11/complex.h>\r\n#include <pybind11/pybind11.h>\r\n#include <pybind11/stl.h>\r\n\r\n/* implementing structs */\r\nstruct Object {\r\n  Object() = default;\r\n  Object(double price, double height) : price(price), height(height) {\r\n  };\r\n\r\n  double price = 0.0;\r\n  double height = 0.0;\r\n};\r\n\r\nstruct Room {\r\n  Room() = default;\r\n\r\n  double length;\r\n  double width;\r\n  std::vector<Object> objects; // this is the buggy vector\r\n\r\n  double area() const {\r\n    return length * width;\r\n  };\r\n};\r\n\r\nstruct House {\r\n  House() = default;\r\n\r\n  boost::optional<Room> bedroom;\r\n  boost::optional<Room> kitchen;\r\n  boost::optional<Room> livingroom;\r\n\r\n  std::map<std::string, std::vector<Object>> getObjects() {\r\n    std::map<std::string, std::vector<Object>> out;\r\n    if (bedroom) {\r\n      out.insert(std::make_pair(\"bedroom\", bedroom->objects));\r\n    }\r\n    if (kitchen) {\r\n      out.insert(std::make_pair(\"kitchen\", kitchen->objects));\r\n    }\r\n    if (livingroom) {\r\n      out.insert(std::make_pair(\"livingroom\", livingroom->objects));\r\n    }\r\n    return out;\r\n  };\r\n};\r\n\r\n/* everything works fine in C++ -> get data this way to have complete object map */\r\nHouse initSomethingInCpp() {\r\n  auto myHouse = House();\r\n  myHouse.bedroom = Room();\r\n  myHouse.kitchen = Room();\r\n\r\n  myHouse.bedroom->length = 10.0;\r\n  myHouse.bedroom->width = 2.0;\r\n  myHouse.kitchen->length = 5.0;\r\n  myHouse.kitchen->width = 3.0;\r\n\r\n  std::vector<Object> bedroomObjects;\r\n  std::vector<Object> kitchenObjects;\r\n\r\n  Object closet = Object(100.0, 2.5);\r\n  Object bed = Object(200.0, 1.0);\r\n  Object oven = Object(500.0, 1.5);\r\n  Object table = Object(50.0, 1.5);\r\n\r\n  bedroomObjects.push_back(closet);\r\n  bedroomObjects.push_back(bed);\r\n  kitchenObjects.push_back(oven);\r\n  kitchenObjects.push_back(table);\r\n\r\n  myHouse.bedroom->objects = bedroomObjects;\r\n  myHouse.kitchen->objects = kitchenObjects;\r\n\r\n  return myHouse;\r\n};\r\n\r\nnamespace pybind11 {\r\n/* taking care of boost type */\r\nnamespace detail {\r\n/* boost::optional */\r\ntemplate<typename T>\r\nstruct type_caster<boost::optional<T>> : optional_caster<boost::optional<T>> {};\r\n} // namespace detail\r\n} // namespace pybind11\r\n\r\n\r\n/* binding structs */\r\nvoid init_house(pybind11::module& main) {\r\n  pybind11::class_<House> house(main, \"House\");\r\n  house.def(pybind11::init<>());\r\n\r\n  house.def_readwrite(\"bedroom\", &House::bedroom);\r\n  house.def_readwrite(\"kitchen\", &House::kitchen);\r\n  house.def_readwrite(\"livingroom\", &House::livingroom);\r\n  house.def(\"get_objects\", &House::getObjects);\r\n};\r\n\r\nvoid init_room(pybind11::module& main) {\r\n  pybind11::class_<Room> room(main, \"Room\");\r\n  room.def(pybind11::init<>());\r\n  room.def_readwrite(\"length\", &Room::length);\r\n  room.def_readwrite(\"width\", &Room::width);\r\n  room.def_readwrite(\"objects\", &Room::objects);\r\n  room.def_property_readonly(\"area\", &Room::area);\r\n};\r\n\r\nvoid init_objects(pybind11::module& main) {\r\n  pybind11::class_<Object> object(main, \"Object\");\r\n  object.def(pybind11::init<>());\r\n  object.def(pybind11::init<double, double>());\r\n\r\n  object.def_readonly(\"price\", &Object::price);\r\n  object.def_readonly(\"heigth\", &Object::height);\r\n};\r\n\r\n/* define module and bind init_in_cpp function */\r\nPYBIND11_MODULE(mwe, m) {\r\n init_house(m);\r\n init_room(m);\r\n init_objects(m);\r\n m.def(\"init_something_in_cpp\", &initSomethingInCpp);\r\n};\r\n```\r\n\r\n<br />\r\nexecute.py: <br />\r\n\r\n```python\r\nimport cppimport\r\n#cppimport.set_quiet(False)\r\n#cppimport.force_rebuild()\r\nmod = cppimport.imp('mwe')\r\n\r\n# get data\r\nmyHouse = mod.init_something_in_cpp()\r\n\r\nprint(\"\\n\")\r\nprint(\"all data is here\")\r\nobjs = myHouse.get_objects()\r\nprint(objs)\r\nprint(myHouse.kitchen.area) # by accessing kitchen members, the objects list is emptied\r\nprint(\"\\n\")\r\n\r\nprint(\"kitchen objects are now missing\")\r\nobjs = myHouse.get_objects()\r\nprint(objs)\r\nprint(\"but area still works:\")\r\nprint(myHouse.kitchen.area) # everything but objects still works\r\nprint(\"\\n\")\r\n\r\nprint(\"also works directly with same variable\")\r\nprint(\"bedroom objects are accessed:\")\r\nprint(myHouse.bedroom.objects)\r\nprint(\"bedroom objects are accessed again:\")\r\nprint(myHouse.bedroom.objects)\r\n```\r\n\r\n<br />\r\nThe execution gives the following output:<br />\r\n\r\nall data is here\r\n{'bedroom': [<mwe.Object object at 0x7fbc9c2a43f0>, <mwe.Object object at 0x7fbc9c2a4670>], 'kitchen': [<mwe.Object object at 0x7fbc9c2a4c30>, <mwe.Object object at 0x7fbc9c2a4df0>]}\r\n15.0\r\n<br />\r\n\r\nkitchen objects are now missing\r\n{'bedroom': [<mwe.Object object at 0x7fbc9c2a4e70>, <mwe.Object object at 0x7fbc9c2a4eb0>], 'kitchen': []}\r\nbut area still works:\r\n15.0\r\n<br />\r\n\r\nalso works directly with same variable\r\nbedroom objects are accessed:\r\n[<mwe.Object object at 0x7fbc9c2a4c30>, <mwe.Object object at 0x7fbc9c2a4df0>]\r\nbedroom objects are accessed again:\r\n[]\r\n<br />\r\n\r\n[mwe.zip](https://github.com/pybind/pybind11/files/4882801/mwe.zip)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2278", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2278/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2278/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2278/events", "html_url": "https://github.com/pybind/pybind11/issues/2278", "id": 651450076, "node_id": "MDU6SXNzdWU2NTE0NTAwNzY=", "number": 2278, "title": "error: no matching function for call to \u2018pybind11::class_<Operations<int> >", "user": {"login": "matthrx", "id": 49817172, "node_id": "MDQ6VXNlcjQ5ODE3MTcy", "avatar_url": "https://avatars0.githubusercontent.com/u/49817172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthrx", "html_url": "https://github.com/matthrx", "followers_url": "https://api.github.com/users/matthrx/followers", "following_url": "https://api.github.com/users/matthrx/following{/other_user}", "gists_url": "https://api.github.com/users/matthrx/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthrx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthrx/subscriptions", "organizations_url": "https://api.github.com/users/matthrx/orgs", "repos_url": "https://api.github.com/users/matthrx/repos", "events_url": "https://api.github.com/users/matthrx/events{/privacy}", "received_events_url": "https://api.github.com/users/matthrx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T11:05:20Z", "updated_at": "2020-07-08T00:10:45Z", "closed_at": "2020-07-08T00:10:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am trying to use the pybind11 library with a very basic example. I am trying to apply pybind11 to a template class doing basic operations (for the example). I did research for a long time in order to know whether someone had faced a similar mistake but so far they are fruitless, that's why I decided to open this issue.\r\n\r\nHere is the template class Operations (i don't include the cpp file as function are extremely simple)\r\n![subtract](https://user-images.githubusercontent.com/49817172/86586404-1eb72d00-bf88-11ea-96c6-963c78a6b554.png)\r\n\r\n\r\nAnd here is the file used to bind it to a python library \r\n![binding](https://user-images.githubusercontent.com/49817172/86586559-5a51f700-bf88-11ea-949f-3845df23beb9.png)\r\n\r\nWhen I attempt to install it, I have the following error : \r\nerror: no matching function for call to \u2018pybind11::class_<Operations<int> >::def(std::__cxx11::basic_string<char>, int (Operations<int>::*)(int, int))\u2019\r\n   26 |       .def(\"subtract\"+type, &operations::subtract);\r\n\r\nThank you for your time\r\n\r\nPS : It is the first time I open an issue, I am sincerely sorry if I was not supposed to do it for this kind of error that I think is only because I did something wrong. Obviously, I looked into the faq.html of pybind11 and found nothing relevant for my case. I didn't add the CMakeLists.txt and the setup.py, I will, if you think the error might come from them.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2276", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2276/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2276/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2276/events", "html_url": "https://github.com/pybind/pybind11/issues/2276", "id": 650205762, "node_id": "MDU6SXNzdWU2NTAyMDU3NjI=", "number": 2276, "title": "Derived class (in Python) cannot access Base class (in Python) methods", "user": {"login": "colombojrj", "id": 3207971, "node_id": "MDQ6VXNlcjMyMDc5NzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/3207971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colombojrj", "html_url": "https://github.com/colombojrj", "followers_url": "https://api.github.com/users/colombojrj/followers", "following_url": "https://api.github.com/users/colombojrj/following{/other_user}", "gists_url": "https://api.github.com/users/colombojrj/gists{/gist_id}", "starred_url": "https://api.github.com/users/colombojrj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colombojrj/subscriptions", "organizations_url": "https://api.github.com/users/colombojrj/orgs", "repos_url": "https://api.github.com/users/colombojrj/repos", "events_url": "https://api.github.com/users/colombojrj/events{/privacy}", "received_events_url": "https://api.github.com/users/colombojrj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-02T21:10:53Z", "updated_at": "2020-07-08T00:15:08Z", "closed_at": "2020-07-08T00:15:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I have studied the documentation (very good by the way) and the issues section on github. But I did not find the solution. If this is not an issue then I am sorry.\r\n\r\nIt is worth noting that the [Classes - Combining virtual functions and inheritance](https://pybind11.readthedocs.io/en/master/advanced/classes.html#combining-virtual-functions-and-inheritance) is not what I want to do.\r\n\r\n## Issue description\r\n\r\nMy case of use is the following: I have a c++ class that makes things very fast. But I want to use that class from Python because Python is so nice and easy. So far, I also want to add more nice features by creating derived (python) classes.\r\n\r\n## Reproducible example code\r\n\r\n```\r\n#include <iostream>\r\n#include <pybind11/pybind11.h>\r\n\r\nclass Base {\r\npublic:\r\n\tBase() {};\r\n\t~Base() {};\r\n\tvoid my_method_cpp() { std::cout << \"My method\" << std::endl; }\r\n};\r\n\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(file, m) {\r\n\tpy::class_<Base> base(m, \"Base\");\r\n\r\n\tbase.def(py::init());\r\n\r\n\tbase.def(\"my_method_cpp\", &Base::my_method_cpp);\r\n}\r\n```\r\n\r\nThen I compiled it with:\r\n\r\nc++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` file.cpp -o file`python3-config --extension-suffix`\r\n\r\nAnd I test it with the following test.py:\r\n\r\n```\r\nfrom file import *\r\n\r\nclass Derived(Base):\r\n\tdef __init__(self):\r\n\t\tBase().__init__(self)\r\n\r\n\tdef my_method_python(self):\r\n\t\tmy_method_cpp()\r\n\r\nif __name__ == '__main__':\r\n\r\n\tbase = Base()\r\n\tbase.my_method_cpp()\r\n\r\n\tderived = Derived()\r\n\tderived.my_method_python()\r\n```\r\n\r\n### Obtained result:\r\n\r\n```\r\npython3 test.py \r\nMy method\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 16, in <module>\r\n    derived.my_method_python()\r\n  File \"test.py\", line 8, in my_method_python\r\n    my_method_cpp()\r\nNameError: name 'my_method_cpp' is not defined\r\n```\r\n\r\n### Expected result:\r\n\r\nMy method\r\nMy method\r\n\r\n### Workaround to get the expected result:\r\n\r\n```\r\nfrom file import *\r\n\r\nclass Derived(Base):\r\n\tdef __init__(self):\r\n\t\tsuper().__init__()\r\n\r\n\tdef my_method_python(self):\r\n\t\tsuper().my_method_cpp()\r\n\r\nif __name__ == '__main__':\r\n\r\n\tbase = Base()\r\n\tbase.my_method_cpp()\r\n\r\n\tderived = Derived()\r\n\tderived.my_method_python()\r\n```\r\n\r\nThanks in advance. And again, if this problem was previously solved, then I am sorry.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2274", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2274/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2274/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2274/events", "html_url": "https://github.com/pybind/pybind11/issues/2274", "id": 646994970, "node_id": "MDU6SXNzdWU2NDY5OTQ5NzA=", "number": 2274, "title": "C++ Class Object Method Numpy Array Argument Example", "user": {"login": "benjamincommeau2", "id": 48326633, "node_id": "MDQ6VXNlcjQ4MzI2NjMz", "avatar_url": "https://avatars0.githubusercontent.com/u/48326633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benjamincommeau2", "html_url": "https://github.com/benjamincommeau2", "followers_url": "https://api.github.com/users/benjamincommeau2/followers", "following_url": "https://api.github.com/users/benjamincommeau2/following{/other_user}", "gists_url": "https://api.github.com/users/benjamincommeau2/gists{/gist_id}", "starred_url": "https://api.github.com/users/benjamincommeau2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benjamincommeau2/subscriptions", "organizations_url": "https://api.github.com/users/benjamincommeau2/orgs", "repos_url": "https://api.github.com/users/benjamincommeau2/repos", "events_url": "https://api.github.com/users/benjamincommeau2/events{/privacy}", "received_events_url": "https://api.github.com/users/benjamincommeau2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-28T20:00:55Z", "updated_at": "2020-07-08T12:46:39Z", "closed_at": "2020-07-08T12:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any example code of a C++ class object having a method that accepts an argument that is a numpy array? I have been only able to verify that C++ scripts containing a module of methods works, but class objects with methods do not work for me.\r\n\r\n- Below is my C++ class object taken and modified from a C++ Method Module example.\r\n\r\n```\r\n<%\r\ncfg['compiler_args'] = ['-std=c++17']\r\nsetup_pybind11(cfg)\r\n%>\r\n\r\n#include <pybind11/pybind11.h>\r\n#include <pybind11/numpy.h>\r\n\r\nnamespace py = pybind11;\r\n\r\n\r\nclass mine{\r\nprivate:\r\npublic:\r\n  mine(){};\r\n// Passing in a generic array\r\ndouble sum(py::array xs) {\r\n    py::buffer_info info = xs.request();\r\n    auto ptr = static_cast<double *>(info.ptr);\r\n\r\n    int n = 1;\r\n    for (auto r: info.shape) {\r\n      n *= r;\r\n    }\r\n\r\n    double s = 0.0;\r\n    for (int i = 0; i <n; i++) {\r\n        s += *ptr++;\r\n    }\r\n\r\n    return s;\r\n}\r\n};\r\n\r\nPYBIND11_MODULE(code,m) {\r\n    pybind11::class_<mine>(m,\"mine\")\r\n    .def(py::init<>())\r\n    .def(\"sum\", &mine::sum)\r\n;\r\n    //return m.ptr();\r\n}\r\n```\r\n\r\n- Below is my python test code\r\n\r\n```\r\nimport cppimport\r\nimport numpy as np\r\n\r\ncode0 = cppimport.imp(\"code\")\r\ncode=code0.mine\r\n\r\n\r\nif __name__ == '__main__':\r\n    xs = np.arange(12).reshape(3,4).astype('float')\r\n    print(type(xs[0,0]))\r\n    print(xs.flags)\r\n    print(\"np :\", xs.sum())\r\n    print(\"cpp:\", code.sum(xs))\r\n```\r\n\r\n- Below is my terminal output\r\n\r\n```\r\n<class 'numpy.float64'>\r\nC_CONTIGUOUS : True\r\nF_CONTIGUOUS : False\r\nOWNDATA : True\r\nWRITEABLE : True\r\nALIGNED : True\r\nWRITEBACKIFCOPY : False\r\nUPDATEIFCOPY : False\r\nnp : 66.0\r\nTraceback (most recent call last):\r\nFile \"code.py\", line 13, in <module>\r\nprint(\"cpp:\", code.sum(xs))\r\nTypeError: sum(): incompatible function arguments. The following argument types are supported:\r\n1. (self: code.mine, arg0: array) -> float\r\nInvoked with: array([[ 0.,  1.,  2.,  3.],\r\n                     [ 4.,  5.,  6.,  7.],\r\n                     [ 8.,  9., 10., 11.]])\r\n```\r\n\r\nEDIT (@YannickJadoul): Cleaned up formatting. Please use ``` to quote multiline code blocks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2272", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2272/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2272/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2272/events", "html_url": "https://github.com/pybind/pybind11/issues/2272", "id": 646775598, "node_id": "MDU6SXNzdWU2NDY3NzU1OTg=", "number": 2272, "title": "problem translate main from C++ to python", "user": {"login": "HiLiHeYi", "id": 63164791, "node_id": "MDQ6VXNlcjYzMTY0Nzkx", "avatar_url": "https://avatars1.githubusercontent.com/u/63164791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HiLiHeYi", "html_url": "https://github.com/HiLiHeYi", "followers_url": "https://api.github.com/users/HiLiHeYi/followers", "following_url": "https://api.github.com/users/HiLiHeYi/following{/other_user}", "gists_url": "https://api.github.com/users/HiLiHeYi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HiLiHeYi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HiLiHeYi/subscriptions", "organizations_url": "https://api.github.com/users/HiLiHeYi/orgs", "repos_url": "https://api.github.com/users/HiLiHeYi/repos", "events_url": "https://api.github.com/users/HiLiHeYi/events{/privacy}", "received_events_url": "https://api.github.com/users/HiLiHeYi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-27T22:02:59Z", "updated_at": "2020-07-08T00:00:33Z", "closed_at": "2020-07-08T00:00:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nint main(int argc, char *argv[]) {\r\n\r\n    std::cout << \"hello from app\" << std::endl;\r\n    return 0;\r\n}\r\n\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(cmake_example, m) {\r\n    \r\n    m.def(\"main\", &main);\r\n}\r\n```\r\n```\r\nnote: in instantiation of function template specialization 'pybind11::module::def<int (*)(int, char **), char [86]>' requested here\r\n      m.def(\"main\", &main);\r\n\r\n        ^\r\n```\r\nHey, \r\nI started to use pybind11 last week and it worked for some simple functions like ``` int add( int a , int b ) ```.  But for some reasons, it doesn't work for the main func. Someone maybe knows a solution ? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2271", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2271/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2271/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2271/events", "html_url": "https://github.com/pybind/pybind11/issues/2271", "id": 646659521, "node_id": "MDU6SXNzdWU2NDY2NTk1MjE=", "number": 2271, "title": "How to interpret/expose a C++ raw memory as a numpy array *view* in Python?", "user": {"login": "ShuhuaGao", "id": 20141984, "node_id": "MDQ6VXNlcjIwMTQxOTg0", "avatar_url": "https://avatars1.githubusercontent.com/u/20141984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShuhuaGao", "html_url": "https://github.com/ShuhuaGao", "followers_url": "https://api.github.com/users/ShuhuaGao/followers", "following_url": "https://api.github.com/users/ShuhuaGao/following{/other_user}", "gists_url": "https://api.github.com/users/ShuhuaGao/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShuhuaGao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShuhuaGao/subscriptions", "organizations_url": "https://api.github.com/users/ShuhuaGao/orgs", "repos_url": "https://api.github.com/users/ShuhuaGao/repos", "events_url": "https://api.github.com/users/ShuhuaGao/events{/privacy}", "received_events_url": "https://api.github.com/users/ShuhuaGao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-06-27T10:59:19Z", "updated_at": "2020-06-28T11:54:02Z", "closed_at": "2020-06-27T15:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is a question or more likey a feature request.\r\n\r\n## Issue description\r\nSupposing I have a block of memory in C++ (say, which may be an std::vector or a C array), how can I expose it as a numpy array to Python? More specifically, the numpy array should be a **view** rather than a copy of the memory, just like [`numpy.frombuffer`](https://numpy.org/doc/stable/reference/generated/numpy.frombuffer.html) or [`Eigen::Map`](https://eigen.tuxfamily.org/dox-devel/group__TutorialMapClass.html). \r\n\r\nThe discussion on gitter did not yield a solution. This issue is related to #1042 \r\n\r\n## Reproducible example code\r\nAccording to the suggestion by @YannickJadoul  on [gitter](https://gitter.im/pybind/Lobby?at=5e88ee0c2bcf8411ad955e36), I have tried the empty `py::capsule`, but it did not work. A minimal example is below.\r\n```c++\r\nstruct Group {\r\n    int indices[5] = {1, 2, 3, 4, 5};\r\n};\r\n\r\n// I hope the returned py::array_t is a view that interprets memory in the C array \r\npy::array_t<int> get_indices(Group& g) {\r\n    // an empty capsule\r\n    return py::array_t<int>{5, g.indices, py::capsule{}};\r\n}\r\n\r\nPYBIND11_MODULE(mymodule, m) {\r\npy::class_<Group>(m, \"Group\", \"doc of the Group struct\")\r\n        .def(py::init<>())\r\n        .def_property_readonly(\"indices\", &get_indices)\r\n        .def( // to facilitate examination of indices\r\n            \"print_indices\",\r\n            [](const Group& g) {\r\n                py::print(\"The indices is now: \");\r\n                for (auto i : g.indices) py::print(i);\r\n            },\r\n            \"print the content of indices\");\r\n}\r\n```\r\nTest it in Python\r\n```python\r\ng = mymodule.Group()\r\ng.print_indices()  # 1 2 3 4 5\r\ng.indices[0] = -1\r\ng.print_indices()  # still 1 2 3 4 5\r\n```\r\nIt would be great if a similar `frombuffer` method is available for `py::array` and `py::array_t` (without copying and without ownership), though I am not sure whether it is too difficult to do so.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2270", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2270/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2270/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2270/events", "html_url": "https://github.com/pybind/pybind11/issues/2270", "id": 646476500, "node_id": "MDU6SXNzdWU2NDY0NzY1MDA=", "number": 2270, "title": "Replace the return type of make_iterator from \"iterator\" to \"typing.Iterator\"", "user": {"login": "AWhetter", "id": 3090295, "node_id": "MDQ6VXNlcjMwOTAyOTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3090295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AWhetter", "html_url": "https://github.com/AWhetter", "followers_url": "https://api.github.com/users/AWhetter/followers", "following_url": "https://api.github.com/users/AWhetter/following{/other_user}", "gists_url": "https://api.github.com/users/AWhetter/gists{/gist_id}", "starred_url": "https://api.github.com/users/AWhetter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AWhetter/subscriptions", "organizations_url": "https://api.github.com/users/AWhetter/orgs", "repos_url": "https://api.github.com/users/AWhetter/repos", "events_url": "https://api.github.com/users/AWhetter/events{/privacy}", "received_events_url": "https://api.github.com/users/AWhetter/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T19:48:16Z", "updated_at": "2020-06-29T09:48:45Z", "closed_at": "2020-06-29T09:48:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nCurrently when declaring a method that returns the result of `py::make_iterator()`, the type signature in the docstring uses the return type `iterator`, which is not a valid Python type. In the example below we see the docstring:\r\n\r\n```\r\n__iter__(self: numbers.Numbers) -> iterator\\n\r\n```\r\n\r\nI was hoping that the type could instead be switched to either `typing.Iterator` or `Iterator`.\r\n\r\n```\r\n__iter__(self: numbers.Numbers) -> typing.Iterator\\n\r\n```\r\n\r\nThe use case where this is coming up:\r\nI'm generating type stubs of a pybind module using stubgen. When running mypy with the generated stubs I see the following error:\r\n\r\n```\r\nerror: name 'iterator' is not defined\r\n```\r\n\r\n## Reproducible example code\r\n\r\n```cpp\r\n\r\n#include <pybind11/pybind11.h>\r\n\r\nnamespace py = pybind11;\r\n\r\nstatic const std::vector<string> numbers = {\"1\", \"2\", \"3\"};\r\n\r\nclass Numbers {\r\n    std::vector<int>::iterator begin() { return numbers.begin(); }\r\n    std::vector<int>::iterator end() { return numbers.end(); }\r\n}\r\n\r\nPYBIND11_MODULE(numbers, m) {\r\n    py::class<Numbers>(m, \"Numbers\")\r\n        .def(\"__iter__\",\r\n            [](const Numbers& self) {\r\n                return py::make_iterator(self.begin(), self.end());\r\n            },\r\n            py::keep_alive<0, 1>()\r\n        )\r\n    ;\r\n}\r\n\r\n```\r\n\r\n```python\r\n>>> import numbers\r\n>>> numbers.Numbers.__iter__.__doc__\r\n'__iter__(self: numbers.Numbers) -> iterator\\n'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2264", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2264/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2264/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2264/events", "html_url": "https://github.com/pybind/pybind11/issues/2264", "id": 645902043, "node_id": "MDU6SXNzdWU2NDU5MDIwNDM=", "number": 2264, "title": "[Feature Request]  Create uninstall target for CMake", "user": {"login": "acxz", "id": 17132214, "node_id": "MDQ6VXNlcjE3MTMyMjE0", "avatar_url": "https://avatars2.githubusercontent.com/u/17132214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acxz", "html_url": "https://github.com/acxz", "followers_url": "https://api.github.com/users/acxz/followers", "following_url": "https://api.github.com/users/acxz/following{/other_user}", "gists_url": "https://api.github.com/users/acxz/gists{/gist_id}", "starred_url": "https://api.github.com/users/acxz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acxz/subscriptions", "organizations_url": "https://api.github.com/users/acxz/orgs", "repos_url": "https://api.github.com/users/acxz/repos", "events_url": "https://api.github.com/users/acxz/events{/privacy}", "received_events_url": "https://api.github.com/users/acxz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-25T23:06:30Z", "updated_at": "2020-07-31T01:16:51Z", "closed_at": "2020-07-31T01:16:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nRight now there is no uninstall target for CMake, which makes it hard to uninstall pybind11 after installing it from source. I believe having the ability to sudo make uninstall is very helpful and much wanted.\r\n\r\n## Reproducible example code\r\n\r\nN/A\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2263", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2263/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2263/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2263/events", "html_url": "https://github.com/pybind/pybind11/issues/2263", "id": 644350444, "node_id": "MDU6SXNzdWU2NDQzNTA0NDQ=", "number": 2263, "title": "docstring type hint incorrect for argument depending on class declaration order", "user": {"login": "ixje", "id": 6625537, "node_id": "MDQ6VXNlcjY2MjU1Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6625537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ixje", "html_url": "https://github.com/ixje", "followers_url": "https://api.github.com/users/ixje/followers", "following_url": "https://api.github.com/users/ixje/following{/other_user}", "gists_url": "https://api.github.com/users/ixje/gists{/gist_id}", "starred_url": "https://api.github.com/users/ixje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ixje/subscriptions", "organizations_url": "https://api.github.com/users/ixje/orgs", "repos_url": "https://api.github.com/users/ixje/repos", "events_url": "https://api.github.com/users/ixje/events{/privacy}", "received_events_url": "https://api.github.com/users/ixje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-24T06:18:04Z", "updated_at": "2020-07-07T12:11:52Z", "closed_at": "2020-07-07T11:54:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nThe generated type-hint for the argument in the initialiser of class B (see below) is invalid and shows the internal namespace instead of the module. Output of `main.py` (again see below)\r\n```\r\n__init__(...)\r\n    __init__(self: cmake_example.B, arg0: testns::A) -> None\r\n```  \r\n\r\nNote that the code is functional (although useless). To get the correct type hints we have to define `py::class_<A>(m, \"A\")` before `py::class_<B>(m, \"B\")`\r\n```\r\n__init__(...)\r\n    __init__(self: cmake_example.B, arg0: cmake_example.A) -> None\r\n```\r\n\r\n**expected behaviour**\r\nI'd expected to see type hints resolved correctly, regardless of class declaration order.\r\n\r\n## Reproducible example code\r\n\r\ncmakelists.txt\r\n```cmake\r\ncmake_minimum_required(VERSION 2.8.12)\r\nproject(cmake_example)\r\n\r\nset(PYTHON_EXECUTABLE ${CMAKE_CURRENT_SOURCE_DIR}/venv/bin/python3)\r\n\r\ninclude(FetchContent)\r\nFetchContent_Declare(\r\n        pybind11\r\n        GIT_REPOSITORY https://github.com/pybind/pybind11.git\r\n        GIT_TAG        v2.5.0\r\n)\r\nFetchContent_MakeAvailable(pybind11)\r\npybind11_add_module(cmake_example src/main.cpp)\r\n```\r\nmain.cpp\r\n```cpp\r\n#include <pybind11/pybind11.h>\r\n\r\nnamespace py = pybind11;\r\nnamespace testns {\r\n    class A {\r\n        A() =default;\r\n    };\r\n\r\n    class B {\r\n    public:\r\n        B(A* a) {}\r\n    };\r\n};\r\n\r\nusing namespace testns;\r\n\r\n\r\nPYBIND11_MODULE(cmake_example, m) {\r\n    py::class_<B>(m, \"B\")\r\n            .def(py::init([](A* a) {\r\n                return B(a);\r\n            }));\r\n\r\n    py::class_<A>(m, \"A\")\r\n            .def(py::init());\r\n}\r\n```\r\nmain.py\r\n```python\r\nimport cmake_example\r\n\r\nif __name__ == '__main__':\r\n    print(help(cmake_example.B.__init__))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2262", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2262/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2262/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2262/events", "html_url": "https://github.com/pybind/pybind11/issues/2262", "id": 644075237, "node_id": "MDU6SXNzdWU2NDQwNzUyMzc=", "number": 2262, "title": "pybind11 created method does not work with `inspect.ismethod(method)` nor isinstance(method, types.MethodType)", "user": {"login": "xush6528", "id": 7608630, "node_id": "MDQ6VXNlcjc2MDg2MzA=", "avatar_url": "https://avatars2.githubusercontent.com/u/7608630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xush6528", "html_url": "https://github.com/xush6528", "followers_url": "https://api.github.com/users/xush6528/followers", "following_url": "https://api.github.com/users/xush6528/following{/other_user}", "gists_url": "https://api.github.com/users/xush6528/gists{/gist_id}", "starred_url": "https://api.github.com/users/xush6528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xush6528/subscriptions", "organizations_url": "https://api.github.com/users/xush6528/orgs", "repos_url": "https://api.github.com/users/xush6528/repos", "events_url": "https://api.github.com/users/xush6528/events{/privacy}", "received_events_url": "https://api.github.com/users/xush6528/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-06-23T19:03:48Z", "updated_at": "2020-07-08T00:24:41Z", "closed_at": "2020-07-08T00:24:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "```py\r\n\r\nmethod = MyPyBindClass.some_method\r\n\r\nprint(type(method))\r\n# <class 'instancemethod'>\r\n\r\nimport inspect\r\nprint(inspect.ismethod(method))\r\n# False\r\n\r\nimport types\r\nprint(isinstance(method, types.MethodType))\r\n# False\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2257", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2257/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2257/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2257/events", "html_url": "https://github.com/pybind/pybind11/issues/2257", "id": 642418549, "node_id": "MDU6SXNzdWU2NDI0MTg1NDk=", "number": 2257, "title": "NULL co_filename crashes construction of C++ exception description", "user": {"login": "RonAvitzur", "id": 67202307, "node_id": "MDQ6VXNlcjY3MjAyMzA3", "avatar_url": "https://avatars2.githubusercontent.com/u/67202307?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RonAvitzur", "html_url": "https://github.com/RonAvitzur", "followers_url": "https://api.github.com/users/RonAvitzur/followers", "following_url": "https://api.github.com/users/RonAvitzur/following{/other_user}", "gists_url": "https://api.github.com/users/RonAvitzur/gists{/gist_id}", "starred_url": "https://api.github.com/users/RonAvitzur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RonAvitzur/subscriptions", "organizations_url": "https://api.github.com/users/RonAvitzur/orgs", "repos_url": "https://api.github.com/users/RonAvitzur/repos", "events_url": "https://api.github.com/users/RonAvitzur/events{/privacy}", "received_events_url": "https://api.github.com/users/RonAvitzur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-20T17:53:11Z", "updated_at": "2020-06-20T18:40:51Z", "closed_at": "2020-06-20T18:40:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When frame->f_code->co_filename == NULL pybind11 crashes constructing the C++ exception \r\n\r\nUsing PyBind11 on Xcode 11 on macOS, I'm seeing a runtime error in cast.h in `PYBIND11_NOINLINE inline std::string error_string` at `handle(frame->f_code->co_filename).cast<std::string>()` \r\nwhen co_filename is NULL as the constructed handle isn't a valid python object. \r\nThis is inside of\r\n\r\n    pybind11::detail::object_api<pybind11::handle>::operator()<(pybind11::return_value_policy)1, char&>(char&) const at cast.h:2159\r\n    pybind11::detail::simple_collector<(pybind11::return_value_policy)1>::call(_object*) const at cast.h:2006\r\n    pybind11::error_already_set::error_already_set() at pytypes.h:326\r\n\r\nMy code looks something like:\r\n\r\n    py::initialize_interpreter();\r\n    py::module SymPy = py::module::import(\"sympy\");\r\n    py::object simplify = SymPy.attr(\"simplify\");\r\n    py::object parse = SymPy.attr(\"parse_expr\");\r\n    try { py::object result = simplify(parse(\"a+1=b+1\")); }\r\n    catch (...) {}\r\n\r\nChanging cast.h to ignore NULL co_filename avoids this, \r\n\r\n    (frame->f_code->co_filename ? handle(frame->f_code->co_filename).cast<std::string>() : \"\")\r\n\r\nbut since I'm brand new to both Python, pybind11 and sympy and have no idea what the underlying problem is, I don't know if the bandaid on the symptom leaves a more fundamental problem lurking. The problem is solely in constructing the error string for the C++ exception, so it seems a low priority.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2255", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2255/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2255/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2255/events", "html_url": "https://github.com/pybind/pybind11/issues/2255", "id": 640708811, "node_id": "MDU6SXNzdWU2NDA3MDg4MTE=", "number": 2255, "title": "unresolved external symbol for method bindings only with multiple projects", "user": {"login": "ktnr", "id": 11096873, "node_id": "MDQ6VXNlcjExMDk2ODcz", "avatar_url": "https://avatars0.githubusercontent.com/u/11096873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktnr", "html_url": "https://github.com/ktnr", "followers_url": "https://api.github.com/users/ktnr/followers", "following_url": "https://api.github.com/users/ktnr/following{/other_user}", "gists_url": "https://api.github.com/users/ktnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktnr/subscriptions", "organizations_url": "https://api.github.com/users/ktnr/orgs", "repos_url": "https://api.github.com/users/ktnr/repos", "events_url": "https://api.github.com/users/ktnr/events{/privacy}", "received_events_url": "https://api.github.com/users/ktnr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-17T20:07:35Z", "updated_at": "2020-07-07T13:22:28Z", "closed_at": "2020-07-07T13:22:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nIn the solution there two projects:\r\n- CppSource (contains a normal C++ project for which I want to create python bindings)\r\n- CppSource.Bindings (imports the required .h files from CppSource and creates the bindings)\r\n\r\nCreating the bindings for classes and their public members works fine. Methods also work, but only methods that are not inherited from base classes. For base class methods I get a compilation error:\r\n`Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tLNK2001\tunresolved external symbol \"public: void __cdecl ICoordinate::SetPosition(int,int,int)\" (?SetPosition@ICoordinate@@QEAAXHHH@Z)\tContainerPacking.Bindings\r\n`\r\n\r\nThe error only occurs when the bindings are created in a separate project. When put into the same project there is no error.\r\n\r\nI'd like to keep the projects separate. But I'm happy to be convinced that doing so is a bad idea.\r\n\r\n## Reproducible example code\r\n\r\nCppSource \r\nContainer.h\r\n```\r\nstruct ICoordinate\r\n{\r\n  public:\r\n    int X = 0;\r\n    int Y = 0;\r\n    int Z = 0;\r\n\r\n    void SetPosition(int x, int y, int z);\r\n\r\n  protected:\r\n    ICoordinate() = default;\r\n    ICoordinate(int x, int y, int z) : X(x), Y(y), Z(z) {}\r\n};\r\n\r\nclass Box : public ICoordinate\r\n{\r\n  public:\r\n    void Translate(int dx, int dy, int dz)\r\n    {\r\n        X += dx;\r\n        Y += dy;\r\n        Z += dz;\r\n    }\r\n};\r\n```\r\n\r\nCppSource.Bindings \r\n.cpp file\r\n```\r\n#include \"../ContainerPacking/src/Container.h\"\r\n\r\n#include <pybind11/pybind11.h>\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(containerpacking, m)\r\n{\r\n    py::class_<Box>(m, \"Box\")\r\n        .def(py::init())\r\n        .def(\"translate\", &Box::Translate)\r\n        ////.def(\"setPosition\", &Box::SetPosition) // error when uncommented\r\n        .def_readwrite(\"X\", &Box::X)\r\n        .def_readwrite(\"Y\", &Box::Y)\r\n        .def_readwrite(\"Z\", &Box::Z);\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2248", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2248/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2248/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2248/events", "html_url": "https://github.com/pybind/pybind11/issues/2248", "id": 637607992, "node_id": "MDU6SXNzdWU2Mzc2MDc5OTI=", "number": 2248, "title": "Getting strange error of `expected primary-expression before token`", "user": {"login": "chinmay5", "id": 16525717, "node_id": "MDQ6VXNlcjE2NTI1NzE3", "avatar_url": "https://avatars1.githubusercontent.com/u/16525717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chinmay5", "html_url": "https://github.com/chinmay5", "followers_url": "https://api.github.com/users/chinmay5/followers", "following_url": "https://api.github.com/users/chinmay5/following{/other_user}", "gists_url": "https://api.github.com/users/chinmay5/gists{/gist_id}", "starred_url": "https://api.github.com/users/chinmay5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chinmay5/subscriptions", "organizations_url": "https://api.github.com/users/chinmay5/orgs", "repos_url": "https://api.github.com/users/chinmay5/repos", "events_url": "https://api.github.com/users/chinmay5/events{/privacy}", "received_events_url": "https://api.github.com/users/chinmay5/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-12T09:13:04Z", "updated_at": "2020-06-12T11:25:21Z", "closed_at": "2020-06-12T11:25:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using Pytorch 1.2 in order to build my code for MaskRCNN and things worked on version 1.3 however, they are failing once I switched to version 1.2 ,\r\n\r\n```\r\nauto input_ = input.contiguous(), rois_ = rois.contiguous();\r\n  AT_DISPATCH_FLOATING_TYPES_AND_HALF(\r\n      input.scalar_type(), \"ROIPool_forward\", [&] {\r\n        RoIPoolForward<scalar_t>(\r\n            input_.data_ptr<scalar_t>(),\r\n            spatial_scale,\r\n            channels,\r\n            width,\r\n            height,\r\n            length,\r\n            pooled_width,\r\n            pooled_height,\r\n            pooled_length,\r\n            rois_.data_ptr<scalar_t>(),\r\n            num_rois,\r\n            output.data_ptr<scalar_t>(),\r\n            argmax.data_ptr<int>());\r\n      });\r\n  return std::make_tuple(output, argmax);\r\n```\r\n\r\nThe error I get is\r\n![image](https://user-images.githubusercontent.com/16525717/84486306-876afc80-ac9d-11ea-98c1-0996239d0d5f.png)\r\n\r\nNot sure what the actual error is here. Any help shall be highly appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2239", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2239/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2239/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2239/events", "html_url": "https://github.com/pybind/pybind11/issues/2239", "id": 629282446, "node_id": "MDU6SXNzdWU2MjkyODI0NDY=", "number": 2239, "title": "How to return a string containing null characters to Python", "user": {"login": "LeoHsiao1", "id": 45813403, "node_id": "MDQ6VXNlcjQ1ODEzNDAz", "avatar_url": "https://avatars2.githubusercontent.com/u/45813403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoHsiao1", "html_url": "https://github.com/LeoHsiao1", "followers_url": "https://api.github.com/users/LeoHsiao1/followers", "following_url": "https://api.github.com/users/LeoHsiao1/following{/other_user}", "gists_url": "https://api.github.com/users/LeoHsiao1/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoHsiao1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoHsiao1/subscriptions", "organizations_url": "https://api.github.com/users/LeoHsiao1/orgs", "repos_url": "https://api.github.com/users/LeoHsiao1/repos", "events_url": "https://api.github.com/users/LeoHsiao1/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoHsiao1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-02T15:09:50Z", "updated_at": "2020-06-03T10:25:18Z", "closed_at": "2020-06-03T10:25:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\nI want to know how to return a string containing null characters to Python.\r\n\r\n## Reproducible example code\r\n```cpp\r\nPYBIND11_MODULE(example, m)\r\n{\r\n    m.def(\"return_bytes\",\r\n          []() {\r\n              return py::bytes(\"Hello\\x00\\x00World\");\r\n              // return py::str(\"Hello\\x00\\x00World\");\r\n              // return std::string(\"Hello\\x00\\x00World\");\r\n          });\r\n}\r\n```\r\n```python\r\n>>> import example\r\n>>> example.return_bytes()\r\nb'Hello'\r\n```\r\nAs you can see, the string returned by pybind11 is truncated by `\\x00`.  And I want to get the full string:`Hello\\x00\\x00World`\r\nLooking forward to your guidance.\r\n\r\nI found a relevant [tutorial](https://pybind11.readthedocs.io/en/master/advanced/cast/strings.html#returning-c-strings-to-python), and a relevant [Issue](https://github.com/pybind/pybind11/pull/48#issue-54584365), but they did not solve my problem.\r\n\r\nBy the way, I already know a way to pass a string containing null characters to C++:\r\n```cpp\r\nPYBIND11_MODULE(example, m)\r\n{\r\n    m.def(\"input_bytes\",\r\n          [](const char *data, long size) {\r\n              char *buffer = (char *)calloc(size, sizeof(data));\r\n              if(buffer)\r\n                memcpy(buffer, data, size);\r\n          });\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2237", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2237/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2237/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2237/events", "html_url": "https://github.com/pybind/pybind11/issues/2237", "id": 628839467, "node_id": "MDU6SXNzdWU2Mjg4Mzk0Njc=", "number": 2237, "title": "Can't open the output file", "user": {"login": "lamar-nyckmaia", "id": 63808976, "node_id": "MDQ6VXNlcjYzODA4OTc2", "avatar_url": "https://avatars3.githubusercontent.com/u/63808976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lamar-nyckmaia", "html_url": "https://github.com/lamar-nyckmaia", "followers_url": "https://api.github.com/users/lamar-nyckmaia/followers", "following_url": "https://api.github.com/users/lamar-nyckmaia/following{/other_user}", "gists_url": "https://api.github.com/users/lamar-nyckmaia/gists{/gist_id}", "starred_url": "https://api.github.com/users/lamar-nyckmaia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lamar-nyckmaia/subscriptions", "organizations_url": "https://api.github.com/users/lamar-nyckmaia/orgs", "repos_url": "https://api.github.com/users/lamar-nyckmaia/repos", "events_url": "https://api.github.com/users/lamar-nyckmaia/events{/privacy}", "received_events_url": "https://api.github.com/users/lamar-nyckmaia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-02T01:51:44Z", "updated_at": "2020-06-02T01:55:34Z", "closed_at": "2020-06-02T01:55:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wrote a C++ class that have a method that writes a HDF5 file in the disk and **it works good in a \"native C++\" environment (g++ and Terminal).**\r\n\r\nSo, now I did the Pybind11 binding of this class and **it runs on Python without erros. All methods are working good.**\r\n\r\nMy problem is **only** about the output HDF5 file after I run this method **in the Python environment.**\r\nWhen I run this code in the Python environment I got a HDF5 that **I can't open to read the data inside of it.**\r\n```\r\nh5dump error: unable to open file \"test.h5\"\r\n```\r\nBut the same C++ code runs good in \"native Terminal\" g++ compiled process. Like using:\r\n```\r\n./my_app\r\n```\r\nI got the same test.h5 output file, but in this case, this file open good:\r\n\r\n```\r\nh5dump test.h5 \r\n\r\nHDF5 \"test.h5\" {\r\nGROUP \"/\" {\r\n   GROUP \"path\" {\r\n      GROUP \"to\" {\r\n         DATASET \"double\" {\r\n            DATATYPE  H5T_IEEE_F64LE\r\n            DATASPACE  SCALAR\r\n            DATA {\r\n            (0): 0.12345\r\n            }\r\n         }\r\n         DATASET \"integer\" {\r\n            DATATYPE  H5T_STD_I32LE\r\n            DATASPACE  SCALAR\r\n            DATA {\r\n            (0): 1\r\n            }\r\n         }\r\n         DATASET \"string\" {\r\n            DATATYPE  H5T_STRING {\r\n               STRSIZE H5T_VARIABLE;\r\n               STRPAD H5T_STR_NULLTERM;\r\n               CSET H5T_CSET_UTF8;\r\n               CTYPE H5T_C_S1;\r\n            }\r\n            DATASPACE  SCALAR\r\n            DATA {\r\n            (0): \"mancal\"\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n}\r\n```\r\n**What is the difference** between the output HDF5 file generated in the Python module run-time and the \"native\" C++ run-time?\r\n\r\n**How can I fix it?**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2236", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2236/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2236/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2236/events", "html_url": "https://github.com/pybind/pybind11/issues/2236", "id": 628814077, "node_id": "MDU6SXNzdWU2Mjg4MTQwNzc=", "number": 2236, "title": "Link external library error", "user": {"login": "lamar-nyckmaia", "id": 63808976, "node_id": "MDQ6VXNlcjYzODA4OTc2", "avatar_url": "https://avatars3.githubusercontent.com/u/63808976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lamar-nyckmaia", "html_url": "https://github.com/lamar-nyckmaia", "followers_url": "https://api.github.com/users/lamar-nyckmaia/followers", "following_url": "https://api.github.com/users/lamar-nyckmaia/following{/other_user}", "gists_url": "https://api.github.com/users/lamar-nyckmaia/gists{/gist_id}", "starred_url": "https://api.github.com/users/lamar-nyckmaia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lamar-nyckmaia/subscriptions", "organizations_url": "https://api.github.com/users/lamar-nyckmaia/orgs", "repos_url": "https://api.github.com/users/lamar-nyckmaia/repos", "events_url": "https://api.github.com/users/lamar-nyckmaia/events{/privacy}", "received_events_url": "https://api.github.com/users/lamar-nyckmaia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-02T00:30:01Z", "updated_at": "2020-06-02T01:06:02Z", "closed_at": "2020-06-02T01:06:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having problems trying to link my Pybind module with a installed HDF5 library.\r\n\r\nHere is my CMakeLists.txt:\r\n```\r\ncmake_minimum_required(VERSION 3.0)\r\nproject(\"Plugin\")\r\n\r\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14\")\r\n\r\n# Add all maialib source files\r\nfile(GLOB plugin_src\r\n    \"./plugin.cpp\"\r\n    \"./py_plugin.cpp\"\r\n)\r\n\r\nadd_definitions(-DPYBIND)\r\n\r\nfind_package(PythonLibs)\r\n\r\nINCLUDE_DIRECTORIES(\"/usr/local/Cellar/hdf5/1.12.0/include\")\r\n\r\ninclude_directories(${PYTHON_INCLUDE_DIRS})\r\n\r\nadd_subdirectory(pybind11)\r\npybind11_add_module(pluginlib ${plugin_src})\r\n\r\ntarget_include_directories(pluginlib PUBLIC include)\r\n\r\nLINK_DIRECTORIES(\"/usr/local/Cellar/hdf5/1.12.0/lib\")\r\n\r\nLINK_LIBRARIES(pluginlib PUBLIC hdf5)\r\n```\r\n\r\n - **CMake:** Ok!\r\n - **Make:** Ok! No erros!\r\n\r\nSo, when I tried to import it on Python, I got this error message below:\r\n\r\n```\r\nImportError: dlopen(/Users/nyckstudio/Desktop/out/pluginlib.cpython-37m-darwin.so, 2): \r\nSymbol not found: _H5P_CLS_ATTRIBUTE_CREATE_ID_g\r\n  Referenced from: /Users/nyckstudio/Desktop/out/pluginlib.cpython-37m-darwin.so\r\n  Expected in: flat namespace\r\n in /Users/nyckstudio/Desktop/out/pluginlib.cpython-37m-darwin.so\r\n```\r\n\r\nI understand that my problem is related with the linker and the HDF5 library.\r\n\r\nHere is just a simple example (_without_ `pybind11`) about how I compile the a application called `app` that uses the same source `plugin.cpp` using `g++`:\r\n\r\n```\r\ng++ -Wall app.cpp plugin.cpp -I. -I /usr/local/Cellar/hdf5/1.12.0/include -o app -std=c++11 -L /usr/local/Cellar/hdf5/1.12.0/lib -lhdf5\r\n```\r\n\r\nSo, I have to pass a:\r\n - `include` directory\r\n - `lib` directory\r\n - `-libName` for each library (in this case, just one)  \r\n\r\n**So, what is wrong in my CMake/Pybind project? How can I fix it?**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2235", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2235/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2235/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2235/events", "html_url": "https://github.com/pybind/pybind11/issues/2235", "id": 627872246, "node_id": "MDU6SXNzdWU2Mjc4NzIyNDY=", "number": 2235, "title": "Dynamic module loading error: Can't add new modules after the interpreter has been initialized", "user": {"login": "rlake", "id": 372855, "node_id": "MDQ6VXNlcjM3Mjg1NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/372855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rlake", "html_url": "https://github.com/rlake", "followers_url": "https://api.github.com/users/rlake/followers", "following_url": "https://api.github.com/users/rlake/following{/other_user}", "gists_url": "https://api.github.com/users/rlake/gists{/gist_id}", "starred_url": "https://api.github.com/users/rlake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rlake/subscriptions", "organizations_url": "https://api.github.com/users/rlake/orgs", "repos_url": "https://api.github.com/users/rlake/repos", "events_url": "https://api.github.com/users/rlake/events{/privacy}", "received_events_url": "https://api.github.com/users/rlake/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T02:06:56Z", "updated_at": "2020-07-02T01:18:56Z", "closed_at": "2020-07-02T01:18:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a project that's modular (as dylibs) and many of these provide a Python API, though loading and using them is optional. Each dylib is setup as follows (pseudocode):\r\n\r\n(main.dylib)\r\nvoid load_optional_dylib(std::string name);\r\nPYBIND_EMBEDDED_MODULE(main, m)\r\n.def(\"load_plugin\", &load_optional_dylib)\r\n...\r\n(optional.dylib)\r\nPYBIND_EMBEDDED_MODULE(optional, m)\r\n...\r\n(repeat for many optional dylibs)\r\n\r\nThe main program loads \"main.dylib\" and calls \"py::initialize_interpreter\". Under Python control, one of the APIs provides a user the ability to load an optional dylib.\r\n\r\nAt this point, when \"optional.dylib\" is initialized by the dynamic linker an exception is raised \"Can't add new modules after the interpreter has been initialized\". \r\n\r\nI'm not sure if this is a bug/enhancement request... my line of thinking is this is similar to Python's dynamic modules through \"importlib\" so it'd be nice to know if this is possible and whether a best practice exists.\r\n\r\nAs it stands I have a workaround to preload all dylibs before \"py::initialize_interpreter\" is called, such that the 2nd load time becomes a no-op and my program behaves as expected.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2232", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2232/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2232/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2232/events", "html_url": "https://github.com/pybind/pybind11/issues/2232", "id": 626424508, "node_id": "MDU6SXNzdWU2MjY0MjQ1MDg=", "number": 2232, "title": "Linker errors: undefined reference to Py_GetVersion", "user": {"login": "pavelschon", "id": 14923302, "node_id": "MDQ6VXNlcjE0OTIzMzAy", "avatar_url": "https://avatars3.githubusercontent.com/u/14923302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pavelschon", "html_url": "https://github.com/pavelschon", "followers_url": "https://api.github.com/users/pavelschon/followers", "following_url": "https://api.github.com/users/pavelschon/following{/other_user}", "gists_url": "https://api.github.com/users/pavelschon/gists{/gist_id}", "starred_url": "https://api.github.com/users/pavelschon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pavelschon/subscriptions", "organizations_url": "https://api.github.com/users/pavelschon/orgs", "repos_url": "https://api.github.com/users/pavelschon/repos", "events_url": "https://api.github.com/users/pavelschon/events{/privacy}", "received_events_url": "https://api.github.com/users/pavelschon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-28T11:11:48Z", "updated_at": "2020-07-08T13:32:21Z", "closed_at": "2020-07-07T10:38:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting linker errors like below. Obviously when I add `-lpython27 ` erros are gone, but isn't pybind11 _header-only, no linkage_ ? Could you please clarify?\r\n```\r\nundefined reference to `Py_GetVersion'\r\nundefined reference to `PyExc_ImportError'\r\nundefined reference to `PyErr_Format'\r\nundefined reference to `PyExc_ImportError'\r\nundefined reference to `PyErr_SetString'\r\nundefined reference to `PyExc_ImportError'\r\nundefined reference to `PyErr_SetString'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2231", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2231/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2231/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2231/events", "html_url": "https://github.com/pybind/pybind11/issues/2231", "id": 626239730, "node_id": "MDU6SXNzdWU2MjYyMzk3MzA=", "number": 2231, "title": "Cannot add a new item to a std::map in the pybind-ed C++ class.", "user": {"login": "KohMat", "id": 13505518, "node_id": "MDQ6VXNlcjEzNTA1NTE4", "avatar_url": "https://avatars1.githubusercontent.com/u/13505518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KohMat", "html_url": "https://github.com/KohMat", "followers_url": "https://api.github.com/users/KohMat/followers", "following_url": "https://api.github.com/users/KohMat/following{/other_user}", "gists_url": "https://api.github.com/users/KohMat/gists{/gist_id}", "starred_url": "https://api.github.com/users/KohMat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KohMat/subscriptions", "organizations_url": "https://api.github.com/users/KohMat/orgs", "repos_url": "https://api.github.com/users/KohMat/repos", "events_url": "https://api.github.com/users/KohMat/events{/privacy}", "received_events_url": "https://api.github.com/users/KohMat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-28T06:01:00Z", "updated_at": "2020-07-07T10:55:15Z", "closed_at": "2020-07-07T10:26:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nCannot add a new item to a std::map which is the member variable in the pybind-ed C++ class in Python.\r\n\r\n## Reproducible example code\r\n\r\nThere is the \"A\" class.\r\n\r\n```c++\r\n#include <map>\r\n#include <pybind11/pybind11.h>\r\n#include <pybind11/stl.h>\r\n\r\nclass A {\r\n public:\r\n    std::map<std::string, double> container;\r\n};\r\n\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(python_example, m) {\r\n    py::class_<A>(m, \"A\")\r\n        .def(py::init<>())\r\n        .def_readwrite(\"container\", &A::container);\r\n}\r\n```\r\n\r\nCall the A class in Python and tried adding a new item in the `container` member but it's empty.\r\n\r\n```python\r\nPython 3.6.9 (default, Apr 18 2020, 01:56:04) \r\n[GCC 8.4.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import python_example\r\n>>> a = python_example.A()\r\n>>> a.container\r\n{}\r\n>>> a.container[\"aaa\"] = 1.0\r\n>>> a.container\r\n{}\r\n>>> \r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2230", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2230/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2230/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2230/events", "html_url": "https://github.com/pybind/pybind11/issues/2230", "id": 625716432, "node_id": "MDU6SXNzdWU2MjU3MTY0MzI=", "number": 2230, "title": "How to saving and loading multiple objects or args in pickle file", "user": {"login": "Huelse", "id": 37256164, "node_id": "MDQ6VXNlcjM3MjU2MTY0", "avatar_url": "https://avatars3.githubusercontent.com/u/37256164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Huelse", "html_url": "https://github.com/Huelse", "followers_url": "https://api.github.com/users/Huelse/followers", "following_url": "https://api.github.com/users/Huelse/following{/other_user}", "gists_url": "https://api.github.com/users/Huelse/gists{/gist_id}", "starred_url": "https://api.github.com/users/Huelse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Huelse/subscriptions", "organizations_url": "https://api.github.com/users/Huelse/orgs", "repos_url": "https://api.github.com/users/Huelse/repos", "events_url": "https://api.github.com/users/Huelse/events{/privacy}", "received_events_url": "https://api.github.com/users/Huelse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-27T13:53:18Z", "updated_at": "2020-06-03T08:22:30Z", "closed_at": "2020-06-03T08:22:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "It's different from https://stackoverflow.com/questions/20716812/saving-and-loading-multiple-objects-in-pickle-file/20725705#20725705\r\n\r\nHere is my problem:\r\nFirst, obj1 need obj2 to build, so I have to pass these two objects into the `__getstate__`, like `pickle.dump((obj1, obj2), file_obj)`, then read both objects in `__getstate__`. It failed, the pickle only give back one obj, the second one can't get in c++. `py:: tuple t` as **one** input doesn't work.\r\n\r\nSo is there any way I can do it? or add some args in `pickle.load()`?\r\nThanks a lot.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2229", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2229/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2229/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2229/events", "html_url": "https://github.com/pybind/pybind11/issues/2229", "id": 624779194, "node_id": "MDU6SXNzdWU2MjQ3NzkxOTQ=", "number": 2229, "title": "Unknown CMake command \"pybind11_add_module\"", "user": {"login": "Zach0806", "id": 65952143, "node_id": "MDQ6VXNlcjY1OTUyMTQz", "avatar_url": "https://avatars0.githubusercontent.com/u/65952143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zach0806", "html_url": "https://github.com/Zach0806", "followers_url": "https://api.github.com/users/Zach0806/followers", "following_url": "https://api.github.com/users/Zach0806/following{/other_user}", "gists_url": "https://api.github.com/users/Zach0806/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zach0806/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zach0806/subscriptions", "organizations_url": "https://api.github.com/users/Zach0806/orgs", "repos_url": "https://api.github.com/users/Zach0806/repos", "events_url": "https://api.github.com/users/Zach0806/events{/privacy}", "received_events_url": "https://api.github.com/users/Zach0806/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-26T10:32:23Z", "updated_at": "2020-07-07T20:34:09Z", "closed_at": "2020-07-07T20:34:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hallo,\r\n\r\nWhen I run CMake, I get this error: \r\n\r\nCMake Error at python/openpose/CMakeLists.txt:6 (pybind11_add_module):\r\n  Unknown CMake command \"pybind11_add_module\".\r\n\r\nIs there anyone who knows how to solve this problem?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2227", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2227/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2227/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2227/events", "html_url": "https://github.com/pybind/pybind11/issues/2227", "id": 623728558, "node_id": "MDU6SXNzdWU2MjM3Mjg1NTg=", "number": 2227, "title": "Is a python installation needed on the client's computer when running the resulting exe with pybind11 embedded?", "user": {"login": "NewAndConfused", "id": 65829484, "node_id": "MDQ6VXNlcjY1ODI5NDg0", "avatar_url": "https://avatars1.githubusercontent.com/u/65829484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NewAndConfused", "html_url": "https://github.com/NewAndConfused", "followers_url": "https://api.github.com/users/NewAndConfused/followers", "following_url": "https://api.github.com/users/NewAndConfused/following{/other_user}", "gists_url": "https://api.github.com/users/NewAndConfused/gists{/gist_id}", "starred_url": "https://api.github.com/users/NewAndConfused/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NewAndConfused/subscriptions", "organizations_url": "https://api.github.com/users/NewAndConfused/orgs", "repos_url": "https://api.github.com/users/NewAndConfused/repos", "events_url": "https://api.github.com/users/NewAndConfused/events{/privacy}", "received_events_url": "https://api.github.com/users/NewAndConfused/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-23T19:41:34Z", "updated_at": "2020-07-07T13:27:27Z", "closed_at": "2020-07-07T13:27:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I embedded pybind11 into my C++ project using CMake with the instructions found here: https://pybind11.readthedocs.io/en/stable/advanced/embedding.html\r\n\r\nEverything works fine and the exe compiles and runs, but I found that the exe will not run on any computer that does not already have python installed. Does that mean I did something incorrectly with my embedding? Or is that expected behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2225", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2225/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2225/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2225/events", "html_url": "https://github.com/pybind/pybind11/issues/2225", "id": 623368466, "node_id": "MDU6SXNzdWU2MjMzNjg0NjY=", "number": 2225, "title": "New warnings with Clang10", "user": {"login": "apollo13", "id": 81547, "node_id": "MDQ6VXNlcjgxNTQ3", "avatar_url": "https://avatars1.githubusercontent.com/u/81547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apollo13", "html_url": "https://github.com/apollo13", "followers_url": "https://api.github.com/users/apollo13/followers", "following_url": "https://api.github.com/users/apollo13/following{/other_user}", "gists_url": "https://api.github.com/users/apollo13/gists{/gist_id}", "starred_url": "https://api.github.com/users/apollo13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apollo13/subscriptions", "organizations_url": "https://api.github.com/users/apollo13/orgs", "repos_url": "https://api.github.com/users/apollo13/repos", "events_url": "https://api.github.com/users/apollo13/events{/privacy}", "received_events_url": "https://api.github.com/users/apollo13/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-22T17:15:10Z", "updated_at": "2020-07-12T12:16:46Z", "closed_at": "2020-07-12T12:16:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nAfter upgrading to Clang10 I see new warnings (which result in errors due to `-Werror`) on my builds with pybind11 2.5.0:\r\n```\r\n/home/florian/sources/bap_server/so/pybind11/include/pybind11/pybind11.h:1093:9: error: expression result unused [-Werror,-Wunused-value]\r\n        PYBIND11_EXPAND_SIDE_EFFECTS(add_base<options>(record));\r\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/florian/sources/bap_server/so/pybind11/include/pybind11/detail/common.h:662:47: note: expanded from macro 'PYBIND11_EXPAND_SIDE_EFFECTS'\r\n#define PYBIND11_EXPAND_SIDE_EFFECTS(PATTERN) pybind11::detail::expand_side_effects{ ((PATTERN), void(), false)..., false }\r\n                                              ^                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/home/florian/sources/bap_server/so/gina/gina.cpp:176:4: note: in instantiation of function template specialization 'pybind11::class_<bap::GINACallbackWrapper>::class_<>' requested here\r\n   py::class_<bap::GINACallbackWrapper>(m, \"GINACallbackWrapper\").def(\"callback\", &bap::GINACallbackWrapper::callback);\r\n```\r\n\r\n## Reproducible example code\r\n\r\nAs far as I can see this would happen for every usage of `class_` and should immediately show up as soon as Clang10 is used and `-Wunused-value` is enabled. I was able to locally disable it via:\r\n```\r\n#pragma clang diagnostic push\r\n#pragma clang diagnostic ignored \"-Wunused-value\"\r\n        /* Register base classes specified via template arguments to class_, if any */\r\n        PYBIND11_EXPAND_SIDE_EFFECTS(add_base<options>(record));\r\n#pragma clang diagnostic pop\r\n``` \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2224", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2224/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2224/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2224/events", "html_url": "https://github.com/pybind/pybind11/issues/2224", "id": 623259515, "node_id": "MDU6SXNzdWU2MjMyNTk1MTU=", "number": 2224, "title": "Pybind11 doesn't compile with CPython 3.9b1", "user": {"login": "bstaletic", "id": 7791699, "node_id": "MDQ6VXNlcjc3OTE2OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7791699?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstaletic", "html_url": "https://github.com/bstaletic", "followers_url": "https://api.github.com/users/bstaletic/followers", "following_url": "https://api.github.com/users/bstaletic/following{/other_user}", "gists_url": "https://api.github.com/users/bstaletic/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstaletic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstaletic/subscriptions", "organizations_url": "https://api.github.com/users/bstaletic/orgs", "repos_url": "https://api.github.com/users/bstaletic/repos", "events_url": "https://api.github.com/users/bstaletic/events{/privacy}", "received_events_url": "https://api.github.com/users/bstaletic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-22T14:46:02Z", "updated_at": "2020-07-07T08:36:18Z", "closed_at": "2020-07-07T08:36:17Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "CPython recently released version 3.9.0b1. As is the wonderful custom, it comes with breaking changes.\r\n\r\n> > Is pybind affected by python 3.9 breaking changes?\r\n> \r\n> [Yes](https://github.com/pybind/pybind11/blob/master/include/pybind11/detail/internals.h#L276) and [yes](https://github.com/pybind/pybind11/blob/master/include/pybind11/pybind11.h#L1971)\r\n\r\n> Useful links:\r\n> \r\n> - https://docs.python.org/3.9/whatsnew/3.9.html#deprecated\r\n> - https://docs.python.org/3.9/whatsnew/3.9.html#removed\r\n> - https://bugs.python.org/issue37878\r\n> - https://github.com/python/cpython/pull/15315\r\n> - https://github.com/python/cpython/pull/18892\r\n> - https://bugs.python.org/issue39877\r\n\r\n`PyEval_InitThreads()` is deprecated and now does exactly nothing.\r\n`PyThreadState_DeleteCurrent()` is \"removed\", or rather renamed to `_PyThreadState_DeleteCurrent()`. This one was never documented and the reason for the rename is \"why would anyone ever use this function?\"", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2222", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2222/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2222/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2222/events", "html_url": "https://github.com/pybind/pybind11/issues/2222", "id": 622428253, "node_id": "MDU6SXNzdWU2MjI0MjgyNTM=", "number": 2222, "title": "bind_vector only works for unsigned int, not work for int, not work for other native types either", "user": {"login": "frank-xlj", "id": 12624107, "node_id": "MDQ6VXNlcjEyNjI0MTA3", "avatar_url": "https://avatars1.githubusercontent.com/u/12624107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frank-xlj", "html_url": "https://github.com/frank-xlj", "followers_url": "https://api.github.com/users/frank-xlj/followers", "following_url": "https://api.github.com/users/frank-xlj/following{/other_user}", "gists_url": "https://api.github.com/users/frank-xlj/gists{/gist_id}", "starred_url": "https://api.github.com/users/frank-xlj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frank-xlj/subscriptions", "organizations_url": "https://api.github.com/users/frank-xlj/orgs", "repos_url": "https://api.github.com/users/frank-xlj/repos", "events_url": "https://api.github.com/users/frank-xlj/events{/privacy}", "received_events_url": "https://api.github.com/users/frank-xlj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-21T11:12:17Z", "updated_at": "2020-07-07T08:58:18Z", "closed_at": "2020-07-07T08:58:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Make sure you've completed the following steps before submitting your issue -- thank you!\r\n\r\n1. Check if your question has already been answered in the [FAQ](http://pybind11.readthedocs.io/en/latest/faq.html) section.\r\n2. Make sure you've read the [documentation](http://pybind11.readthedocs.io/en/latest/). Your issue may be addressed there.\r\n3. If those resources didn't help and you only have a short question (not a bug report), consider asking in the [Gitter chat room](https://gitter.im/pybind/Lobby).\r\n4. If you have a genuine bug report or a more complex question which is not answered in the previous items (or not suitable for chat), please fill in the details below.\r\n5. Include a self-contained and minimal piece of code that reproduces the problem. If that's not possible, try to make the description as clear as possible.\r\n\r\n*After reading, remove this checklist and the template text in parentheses below.*\r\n\r\n## Issue description\r\nI am using VS2017 15.9.19. Python3.6.4-64bit.\r\npy::bind_vector<std::vector<int>>(m, \"VectorInt\", py::buffer_protocol()); \r\n\r\npython:\r\nv_int = m.VectorInt([0, 0])\r\nassert len(v_int) == 2\r\n\r\nIt throws 'access violation' error when running the test. But it works fine if using 'unsigned int'.\r\n\r\n## Reproducible example code\r\n\r\n(The code should be minimal, have no external dependencies, isolate the function(s) that cause breakage. Submit matched and complete C++ and Python snippets that can be easily compiled and run to diagnose the issue.)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2214", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2214/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2214/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2214/events", "html_url": "https://github.com/pybind/pybind11/issues/2214", "id": 618811412, "node_id": "MDU6SXNzdWU2MTg4MTE0MTI=", "number": 2214, "title": "PGI compiler issues", "user": {"login": "XL64", "id": 1560114, "node_id": "MDQ6VXNlcjE1NjAxMTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1560114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XL64", "html_url": "https://github.com/XL64", "followers_url": "https://api.github.com/users/XL64/followers", "following_url": "https://api.github.com/users/XL64/following{/other_user}", "gists_url": "https://api.github.com/users/XL64/gists{/gist_id}", "starred_url": "https://api.github.com/users/XL64/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XL64/subscriptions", "organizations_url": "https://api.github.com/users/XL64/orgs", "repos_url": "https://api.github.com/users/XL64/repos", "events_url": "https://api.github.com/users/XL64/events{/privacy}", "received_events_url": "https://api.github.com/users/XL64/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-15T08:58:16Z", "updated_at": "2020-05-15T09:00:24Z", "closed_at": "2020-05-15T09:00:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nWhen building the tests with PGI Compilers some errors are raised.\r\nTo be able to build them I needed to allow more recursion :\r\n```\r\n  if (CMAKE_CXX_COMPILER_ID\u00b7STREQUAL\u00b7PGI)\r\n    target_compile_options(${target_name} PRIVATE -Wc,--pending_instantiations=0)\r\n  endif()\r\n```\r\nI also needed to comment out some test because they raised more complex errors: test_smart_ptr.cpp and  test_virtual_functions.cpp\r\n\r\nI am not enough C++ expert to fix them:\r\n```\r\ncd /appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11-build/tests && /data_local/sw/pgi/20.04/linuxpower/20.4/bin/pgc++  -DPYBIND11_TEST_EIGEN -Dpybind11_tests_EXPORTS -I/appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11/include -I/data_local/sw/anaconda3/include/python3.7m -I/appli_RD/LACOSTE/OMEGA/cmakesuperbuild/build-gnu/eigen/src/eigen_project  -O2 -s -DNDEBUG -fPIC   -std=c++14 -Wc,--pending_instantiations=0 -o CMakeFiles/pybind11_tests.dir/test_smart_ptr.cpp.o -c /appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11/tests/test_smart_ptr.cpp\r\nAt end of source: warning: routine is both \"inline\" and \"noinline\"\r\n\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76807  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76808  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 169)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76809  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 172)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76810  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 142)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76811  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76812  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 142)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76813  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76814  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 241)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76815  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 244)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76816  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 264)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76817  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76818  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 264)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76819  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76820  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 540)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76821  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   76822  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 540)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   81567  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 102)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   81568  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 767)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   81569  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 750)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   81570  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 760)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   81571  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/tuple: 745)\r\nPGC++-S-0000-Internal compiler error. getsname: illegal stype   81574  (/usr/lib/gcc/ppc64le-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/move.h: 77)\r\n```\r\nand\r\n```\r\n[  7%] Building CXX object tests/CMakeFiles/pybind11_tests.dir/test_virtual_functions.cpp.o\r\ncd /appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11-build/tests && /data_local/sw/pgi/20.04/linuxpower/20.4/bin/pgc++  -DPYBIND11_TEST_EIGEN -Dpybind11_tests_EXPORTS -I/appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11/include -I/data_local/sw/anaconda3/include/python3.7m -I/appli_RD/LACOSTE/OMEGA/cmakesuperbuild/build-gnu/eigen/src/eigen_project  -O2 -s -DNDEBUG -fPIC   -std=c++14 -Wc,--pending_instantiations=0 -o CMakeFiles/pybind11_tests.dir/test_virtual_functions.cpp.o -c /appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11/tests/test_virtual_functions.cpp\r\nAt end of source: warning: routine is both \"inline\" and \"noinline\"\r\n\r\n\"/appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind11/include/\r\n          pybind11/cast.h\", line 1707: error: function\r\n          \"NonCopyable::NonCopyable(const NonCopyable &)\" (declared at line 104\r\n          of\r\n          \"/appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix/src/pybind1\r\n          1/tests/test_virtual_functions.cpp\") cannot be referenced -- it is a\r\n          deleted function\r\n      return cast_op<T>(load_type<T>(handle));\r\n             ^\r\n          detected during:\r\n            instantiation of \"T pybind11::cast<T,<unnamed>>(const\r\n                      pybind11::handle &) [with T=NonCopyable, <unnamed>=0]\" at\r\n                      line 1759\r\n            instantiation of\r\n                      \"pybind11::detail::enable_if_t<pybind11::detail::negation\r\n                      <pybind11::detail::any_of<pybind11::detail::move_always<T\r\n                      , void>, pybind11::detail::move_if_unreferenced<T,\r\n                      void>>>::value, T> pybind11::cast<T>(pybind11::object &&)\r\n                      [with T=NonCopyable]\" at line 1789\r\n            instantiation of \"pybind11::detail::enable_if_t<<expression>, T>\r\n                      pybind11::detail::cast_safe<T>(pybind11::object &&) [with\r\n                      T=NonCopyable]\" at line 142 of\r\n                      \"/appli_RD/LACOSTE/DNG/diva-nextgen/build/pybind11-prefix\r\n                      /src/pybind11/tests/test_virtual_functions.cpp\"\r\n```\r\n```\r\n\r\n\r\n## Reproducible example code\r\n\r\nUse PGI compiler to build the code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2210", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2210/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2210/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2210/events", "html_url": "https://github.com/pybind/pybind11/issues/2210", "id": 618328723, "node_id": "MDU6SXNzdWU2MTgzMjg3MjM=", "number": 2210, "title": "question about slice?", "user": {"login": "Peterisfar", "id": 31852119, "node_id": "MDQ6VXNlcjMxODUyMTE5", "avatar_url": "https://avatars2.githubusercontent.com/u/31852119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Peterisfar", "html_url": "https://github.com/Peterisfar", "followers_url": "https://api.github.com/users/Peterisfar/followers", "following_url": "https://api.github.com/users/Peterisfar/following{/other_user}", "gists_url": "https://api.github.com/users/Peterisfar/gists{/gist_id}", "starred_url": "https://api.github.com/users/Peterisfar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Peterisfar/subscriptions", "organizations_url": "https://api.github.com/users/Peterisfar/orgs", "repos_url": "https://api.github.com/users/Peterisfar/repos", "events_url": "https://api.github.com/users/Peterisfar/events{/privacy}", "received_events_url": "https://api.github.com/users/Peterisfar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T15:34:37Z", "updated_at": "2020-07-07T09:01:14Z", "closed_at": "2020-07-07T09:01:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "how to change the python code \"a[0:3, 0:2]=b[0:3, 0:2]\" in c++\uff1f", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2209", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2209/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2209/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2209/events", "html_url": "https://github.com/pybind/pybind11/issues/2209", "id": 618079746, "node_id": "MDU6SXNzdWU2MTgwNzk3NDY=", "number": 2209, "title": "scoped_estream_redirect does not capture FILE* stderr", "user": {"login": "Getshi", "id": 3384847, "node_id": "MDQ6VXNlcjMzODQ4NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/3384847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Getshi", "html_url": "https://github.com/Getshi", "followers_url": "https://api.github.com/users/Getshi/followers", "following_url": "https://api.github.com/users/Getshi/following{/other_user}", "gists_url": "https://api.github.com/users/Getshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Getshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Getshi/subscriptions", "organizations_url": "https://api.github.com/users/Getshi/orgs", "repos_url": "https://api.github.com/users/Getshi/repos", "events_url": "https://api.github.com/users/Getshi/events{/privacy}", "received_events_url": "https://api.github.com/users/Getshi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T09:35:05Z", "updated_at": "2020-07-07T21:15:23Z", "closed_at": "2020-07-07T21:15:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "The error stream redirection functionality provided by pybind11 does not work for the FILE* stderr, but only captures std::cerr.\r\n\r\n```\r\nm.def(\"printerr\",\r\n []() {\r\n   std::cerr << \"This error is printed in the ipynb.\\n\";\r\n   std::string str = \"This error is printed in the console\\n\";\r\n   fprintf(stderr, str.c_str());\r\n },\r\n py::call_guard<py::scoped_ostream_redirect,\r\n py::scoped_estream_redirect>());\r\n```\r\nFor me, this is mainly a minor hickup in coding logging functionality, where instead of `vfprintf(stderr,...)` I have to first write to a `char*` buffer with `vsnprintf(buf, ...)` and then do `std::cerr << buf;`.\r\nIf there is an easy fix on pybind's side for capturing both, that would be nice, otherwise mentioning this in the documentation could help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2208", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2208/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2208/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2208/events", "html_url": "https://github.com/pybind/pybind11/issues/2208", "id": 618076461, "node_id": "MDU6SXNzdWU2MTgwNzY0NjE=", "number": 2208, "title": "(deep)copy doesn't work on Python2", "user": {"login": "MatthijsBurgh", "id": 18014833, "node_id": "MDQ6VXNlcjE4MDE0ODMz", "avatar_url": "https://avatars2.githubusercontent.com/u/18014833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthijsBurgh", "html_url": "https://github.com/MatthijsBurgh", "followers_url": "https://api.github.com/users/MatthijsBurgh/followers", "following_url": "https://api.github.com/users/MatthijsBurgh/following{/other_user}", "gists_url": "https://api.github.com/users/MatthijsBurgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthijsBurgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthijsBurgh/subscriptions", "organizations_url": "https://api.github.com/users/MatthijsBurgh/orgs", "repos_url": "https://api.github.com/users/MatthijsBurgh/repos", "events_url": "https://api.github.com/users/MatthijsBurgh/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthijsBurgh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T09:30:16Z", "updated_at": "2020-06-09T15:49:36Z", "closed_at": "2020-06-09T15:49:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "##  Issue description\r\nBoth `copy` and `deepcopy` throw a `TypeError` in Python 2.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/travis/build/orocos/orocos_kinematics_dynamics/python_orocos_kdl/tests/framestest.py\", line 436, in testCopy\r\n    self.testCopyImpl(copy)\r\n  File \"/home/travis/build/orocos/orocos_kinematics_dynamics/python_orocos_kdl/tests/framestest.py\", line 419, in testCopyImpl\r\n    v2 = copy(v1)\r\n  File \"/usr/lib/python2.7/copy.py\", line 96, in copy\r\n    return _reconstruct(x, rv, 0)\r\n  File \"/usr/lib/python2.7/copy.py\", line 329, in _reconstruct\r\n    y = callable(*args)\r\n  File \"/usr/lib/python2.7/copy_reg.py\", line 93, in __newobj__\r\n    return cls.__new__(cls, *args)\r\nTypeError: pybind11_object.__new__(PyKDL.Vector) is not safe, use object.__new__()\r\n```\r\n(https://travis-ci.org/github/orocos/orocos_kinematics_dynamics/jobs/686926468#L1035)\r\n\r\nThere are no issues with Python 3. In the documentation nothing is mentioned about (deep)copy. Should this work out of the box like it does on Python 3? Should the user implement his own custom `__deepcopy__` methods?\r\n\r\n## Reproducible example code\r\nBinding code of the `Vector` is here: https://github.com/orocos/orocos_kinematics_dynamics/blob/master/python_orocos_kdl/PyKDL/pybind11/frames.cpp\r\nC++ code of the `Vector` is here: https://github.com/orocos/orocos_kinematics_dynamics/blob/master/orocos_kdl/src/frames.hpp#L160\r\nI refer here to `Vector`, as it one of the simplest classes, but the problem happens at all classes in the module.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2207", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2207/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2207/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2207/events", "html_url": "https://github.com/pybind/pybind11/issues/2207", "id": 616545278, "node_id": "MDU6SXNzdWU2MTY1NDUyNzg=", "number": 2207, "title": "Embedding call function with args and kwargs", "user": {"login": "viewpointsa", "id": 22960684, "node_id": "MDQ6VXNlcjIyOTYwNjg0", "avatar_url": "https://avatars1.githubusercontent.com/u/22960684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viewpointsa", "html_url": "https://github.com/viewpointsa", "followers_url": "https://api.github.com/users/viewpointsa/followers", "following_url": "https://api.github.com/users/viewpointsa/following{/other_user}", "gists_url": "https://api.github.com/users/viewpointsa/gists{/gist_id}", "starred_url": "https://api.github.com/users/viewpointsa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viewpointsa/subscriptions", "organizations_url": "https://api.github.com/users/viewpointsa/orgs", "repos_url": "https://api.github.com/users/viewpointsa/repos", "events_url": "https://api.github.com/users/viewpointsa/events{/privacy}", "received_events_url": "https://api.github.com/users/viewpointsa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-12T10:30:15Z", "updated_at": "2020-05-12T13:11:48Z", "closed_at": "2020-05-12T13:11:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm embedding python into C++, and I want to call function with args, and kwargs :\r\n\r\n```\r\nPyObject* pyJsonModule = PyImport_ImportModule(\"json\");\r\nPyObject* pyJsonDic = PyModule_GetDict(pyJsonModule); \r\nPyObject* pyLoadsFct = PyDict_GetItemString(pyJsonDic, \"dumps\");\r\nPyObject *args = Py_BuildValue(\"(O)\", (const PyObject*)o);\r\nPyObject *keywords = PyDict_New();\r\nPyDict_SetItemString(keywords, \"indent\", PyLong_FromLong(4) );\r\nPyDict_SetItemString(keywords, \"sort_keys\", Py_True );\r\nPyDict_SetItemString(keywords, \"ensure_ascii\", Py_False );\r\nPyObject* pyObject = PyObject_Call( pyLoadsFct, args, keywords );\r\n```\r\n\r\nHow to translate that to pybind ?\r\n\r\n```\r\npy::module json = py::module::import(\"json\");\r\npy::dict args( \"indent\"_a=4, \"sort_keys\"_a=py::cast(true), \"ensure_ascii\"_a=py::cast(false) );\r\npy::kwargs kwargs(args);\r\nauto ret = json.attr(\"dumps\")(o,kwargs); // ?\r\n```\r\n\r\nps: thanks for this amazing python binder", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2206", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2206/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2206/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2206/events", "html_url": "https://github.com/pybind/pybind11/issues/2206", "id": 615583562, "node_id": "MDU6SXNzdWU2MTU1ODM1NjI=", "number": 2206, "title": "Dangling references with reference data members", "user": {"login": "orgarten", "id": 10799869, "node_id": "MDQ6VXNlcjEwNzk5ODY5", "avatar_url": "https://avatars1.githubusercontent.com/u/10799869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/orgarten", "html_url": "https://github.com/orgarten", "followers_url": "https://api.github.com/users/orgarten/followers", "following_url": "https://api.github.com/users/orgarten/following{/other_user}", "gists_url": "https://api.github.com/users/orgarten/gists{/gist_id}", "starred_url": "https://api.github.com/users/orgarten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/orgarten/subscriptions", "organizations_url": "https://api.github.com/users/orgarten/orgs", "repos_url": "https://api.github.com/users/orgarten/repos", "events_url": "https://api.github.com/users/orgarten/events{/privacy}", "received_events_url": "https://api.github.com/users/orgarten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-11T04:45:55Z", "updated_at": "2020-05-12T10:37:03Z", "closed_at": "2020-05-12T10:37:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI have some issues with dangling references which I was not able to solve.\r\n\r\n## Issue description\r\n\r\nUsing a wrapped class, which holds a reference type data member, results in a dangling reference. In the example code below, this happens when I want to use the function ```print_first_3_elements```. Apparently, the reference is not valid anymore. The same happens if I use pointers instead of references. Printing the values of the ```std::vector``` within the constructor seems to be working just fine.\r\n\r\nA workaround is to copy the data, however, my data could be quite big, therefore I would like to avoid copying if possible.\r\n\r\n### Unsuccessful attempts to solve the issue:\r\n* disabling the garbage collector in python\r\n* using pointers instead of references\r\n\r\nMaybe anybody has an idea how to mitigate this issue. Thanks in advance!\r\n\r\n## Reproducible example code\r\nmain.cpp\r\n```cpp\r\n#include <pybind11/pybind11.h>\r\n#include <pybind11/stl.h>\r\nnamespace py = pybind11;\r\n\r\nclass A {\r\nprivate:\r\n\tconst std::vector<double>& data;\r\npublic:\r\n\texplicit A(const std::vector<double>& data_) : data(data_) {\r\n\t\tstd::cout << data[0] << \" -> \";\r\n\t\tstd::cout << data[1] << \" -> \";\r\n\t\tstd::cout << data[2] << \"\\n\";\r\n\t}\r\n\r\n\tvoid\r\n\tprint_first_3_elements() const {\r\n\t\tstd::cout << data[0] << \" -> \";\r\n\t\tstd::cout << data[1] << \" -> \";\r\n\t\tstd::cout << data[2] << \"\\n\";\r\n\t}\r\n};\r\n\r\nPYBIND11_MODULE(pybind_test_mod, m) {\r\n\tpy::class_<A> cls(m, \"A\");\r\n\r\n\tcls.def(py::init<const std::vector<double>&>(), py::keep_alive<1,2>());\r\n\tcls.def(\"print_first_3_elements\", &A::print_first_3_elements);\r\n}\r\n```\r\nWhen using the module in Python as follows, I get a segfault for the second function call.\r\n```py\r\ndata = np.array([1., 2., 3., 4., 5., 6., 7.], dtype=np.float64)\r\na = pybind_test_mod.A(data)  # this works\r\na.print_first_3_elements() # this segfaults\r\n```\r\nDesired output:\r\n```\r\n1 -> 2 -> 3\r\n1 -> 2 -> 3\r\n```\r\nOutput from example above:\r\n```\r\n1 -> 2 -> 3\r\n[1]    5345 segmentation fault (core dumped)  python simple_test.py\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2205", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2205/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2205/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2205/events", "html_url": "https://github.com/pybind/pybind11/issues/2205", "id": 614151710, "node_id": "MDU6SXNzdWU2MTQxNTE3MTA=", "number": 2205, "title": "example/ directory missing or read the docs and PDF needs updating", "user": {"login": "prniii", "id": 1914387, "node_id": "MDQ6VXNlcjE5MTQzODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1914387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prniii", "html_url": "https://github.com/prniii", "followers_url": "https://api.github.com/users/prniii/followers", "following_url": "https://api.github.com/users/prniii/following{/other_user}", "gists_url": "https://api.github.com/users/prniii/gists{/gist_id}", "starred_url": "https://api.github.com/users/prniii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prniii/subscriptions", "organizations_url": "https://api.github.com/users/prniii/orgs", "repos_url": "https://api.github.com/users/prniii/repos", "events_url": "https://api.github.com/users/prniii/events{/privacy}", "received_events_url": "https://api.github.com/users/prniii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-07T15:34:31Z", "updated_at": "2020-07-07T15:54:43Z", "closed_at": "2020-07-07T15:54:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\nPDF references examples in example/ directory that's not in the repository.  All of the ones called out below are referenced on the Advanced topics page \r\nhttps://pybind11-rtdtest.readthedocs.io/en/stable/advanced.html\r\n\r\nPDF document calls out example/example2.cpp as example for stl data types.  Should that be instead test/test_stl.cpp ?\r\nSimilarly PDF calls out example/example6.cpp for binding sequence type and slicing protocol.  is that test/test_sequences_and_iterators.cpp\r\n\r\nexample/example3.cpp overloaded operators...\r\nexample/example5.cpp callbacks and anonymous functions\r\nexample/example7.cpp demonstrate using buffer protocol\r\nexample/example8.cpp custom reference-counting holder types...\r\nexample/example10.cpp demonstrate using vectorize()\r\nexample/example11.cpp usage of args and kwargs\r\nexample/example12.cpp override virtual functions...\r\nexample/example13.cpp keep_alive protocol...\r\nexample/example14.cpp create and expose opaque types\r\nexample/example15.cpp how to pickle and unpickle types\r\nexample/eigen.cpp how to pass Eigen sparse and dense data types\r\n\r\n\r\n## Reproducible example code\r\n\r\nDocumentation inconsistency or missing examples/ directory from repository.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2204", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2204/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2204/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2204/events", "html_url": "https://github.com/pybind/pybind11/issues/2204", "id": 613267822, "node_id": "MDU6SXNzdWU2MTMyNjc4MjI=", "number": 2204, "title": "Return array of struct variables from C++ function", "user": {"login": "sharod", "id": 3380293, "node_id": "MDQ6VXNlcjMzODAyOTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/3380293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharod", "html_url": "https://github.com/sharod", "followers_url": "https://api.github.com/users/sharod/followers", "following_url": "https://api.github.com/users/sharod/following{/other_user}", "gists_url": "https://api.github.com/users/sharod/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharod/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharod/subscriptions", "organizations_url": "https://api.github.com/users/sharod/orgs", "repos_url": "https://api.github.com/users/sharod/repos", "events_url": "https://api.github.com/users/sharod/events{/privacy}", "received_events_url": "https://api.github.com/users/sharod/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T12:05:15Z", "updated_at": "2020-07-07T21:16:25Z", "closed_at": "2020-07-07T21:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to return an array of struct variables from a function in C++. But I am unable to find a way to do that. Please help me with this. I am providing a sample of the c++ code describing what I am trying to do:\r\n\r\n`#include <pybind11/pybind11.h>\r\n#include <stdlib.h>\r\n#include <stdio.h>\r\n#include <pybind11/stl.h>\r\n\r\nnamespace py = pybind11;\r\n\r\nstruct sample{\r\n  int a;\r\n};\r\n\r\nstd::array<sample,2> test(int i, int j) {\r\n    sample p;\r\n    p.a=i;\r\n    sample q;\r\n    q.a=j;\r\n    std::array<sample,2> arr={p,q};\r\n    return arr;\r\n}\r\n\r\nPYBIND11_MODULE(example, m) {\r\n    m.doc() = \"pybind11 example plugin\"; \r\n    m.def(\"test\", &test, \"A function to return array of structs\");\r\n}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2202", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2202/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2202/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2202/events", "html_url": "https://github.com/pybind/pybind11/issues/2202", "id": 612913749, "node_id": "MDU6SXNzdWU2MTI5MTM3NDk=", "number": 2202, "title": "what is the proper way to install pybind?", "user": {"login": "roeey777", "id": 16445835, "node_id": "MDQ6VXNlcjE2NDQ1ODM1", "avatar_url": "https://avatars3.githubusercontent.com/u/16445835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roeey777", "html_url": "https://github.com/roeey777", "followers_url": "https://api.github.com/users/roeey777/followers", "following_url": "https://api.github.com/users/roeey777/following{/other_user}", "gists_url": "https://api.github.com/users/roeey777/gists{/gist_id}", "starred_url": "https://api.github.com/users/roeey777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roeey777/subscriptions", "organizations_url": "https://api.github.com/users/roeey777/orgs", "repos_url": "https://api.github.com/users/roeey777/repos", "events_url": "https://api.github.com/users/roeey777/events{/privacy}", "received_events_url": "https://api.github.com/users/roeey777/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-05T21:43:47Z", "updated_at": "2020-07-07T21:20:26Z", "closed_at": "2020-07-07T21:20:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\nI have a question about pybind11 installation process, I've looked at the way this package is installed with `conda-forge` and it got me thinking: why in they install pybind11 via `cmake` **and** `setuptools`?\r\nboth of them installs the same headers to different locations\r\n- `cmake` installs the headers to `/include` and the `*Config.cmake` files to `/share/cmake/pybind11`\r\n- `python setuptools` install the headers to `/include/python<major.minor>/site-packages/pybind11/include/pybind11`\r\n\r\nWhy both of them are needed? Can I use only one of `cmake` or `setuptools` without using the other?\r\n- If I choose to build using`cmake` then I will surly use `find_package(Python REQUIRED)` and then I will have all the headers located within `python` include directory (because of the setuptools installation) which makes the pure `cmake` installation redundant (there is no need to `find_package(pybind11 REQUIRED)`).\r\n- If I choose to build using `setuptools` then I surely don't need any of the `*Config.cmake` files.\r\n\r\n`python` is obviously installed when working with `pybind11` so is there any reason to prefer `cmake` build over `setuptools`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2201", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2201/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2201/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2201/events", "html_url": "https://github.com/pybind/pybind11/issues/2201", "id": 612339131, "node_id": "MDU6SXNzdWU2MTIzMzkxMzE=", "number": 2201, "title": "CMake 3.12+ Python Find Routines, IPO/LTO", "user": {"login": "ax3l", "id": 1353258, "node_id": "MDQ6VXNlcjEzNTMyNTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/1353258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ax3l", "html_url": "https://github.com/ax3l", "followers_url": "https://api.github.com/users/ax3l/followers", "following_url": "https://api.github.com/users/ax3l/following{/other_user}", "gists_url": "https://api.github.com/users/ax3l/gists{/gist_id}", "starred_url": "https://api.github.com/users/ax3l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ax3l/subscriptions", "organizations_url": "https://api.github.com/users/ax3l/orgs", "repos_url": "https://api.github.com/users/ax3l/repos", "events_url": "https://api.github.com/users/ax3l/events{/privacy}", "received_events_url": "https://api.github.com/users/ax3l/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 325683609, "node_id": "MDU6TGFiZWwzMjU2ODM2MDk=", "url": "https://api.github.com/repos/pybind/pybind11/labels/build%20system", "name": "build system", "color": "207de5", "default": false, "description": ""}, {"id": 232625251, "node_id": "MDU6TGFiZWwyMzI2MjUyNTE=", "url": "https://api.github.com/repos/pybind/pybind11/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "henryiii", "id": 4616906, "node_id": "MDQ6VXNlcjQ2MTY5MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4616906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/henryiii", "html_url": "https://github.com/henryiii", "followers_url": "https://api.github.com/users/henryiii/followers", "following_url": "https://api.github.com/users/henryiii/following{/other_user}", "gists_url": "https://api.github.com/users/henryiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/henryiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/henryiii/subscriptions", "organizations_url": "https://api.github.com/users/henryiii/orgs", "repos_url": "https://api.github.com/users/henryiii/repos", "events_url": "https://api.github.com/users/henryiii/events{/privacy}", "received_events_url": "https://api.github.com/users/henryiii/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-05-05T05:01:43Z", "updated_at": "2020-08-19T16:26:27Z", "closed_at": "2020-08-19T16:26:27Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "CMake 3.12.0+ deprecates the old find modules for Python and unifies them into a new call find module:\r\n- https://cmake.org/cmake/help/v3.17/module/FindPythonInterp.html\r\n- https://cmake.org/cmake/help/v3.12/module/FindPython.html\r\n\r\nWe should consider mid to long-term to update our CMake scripts accordingly, as soon as we can require CMake 3.12+ ([released July 2018](https://blog.kitware.com/cmake-3-12-0-available-for-download/)).\r\n\r\nFurthermore, CMake 3.9.0+ introduces an abstraction for IPO/LTO, which can simplify our code base.\r\n- https://cmake.org/cmake/help/v3.9/module/CheckIPOSupported.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2199", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2199/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2199/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2199/events", "html_url": "https://github.com/pybind/pybind11/issues/2199", "id": 610946853, "node_id": "MDU6SXNzdWU2MTA5NDY4NTM=", "number": 2199, "title": "NAMESPACE_BEGIN macro redefinition", "user": {"login": "Trigve", "id": 1944454, "node_id": "MDQ6VXNlcjE5NDQ0NTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1944454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Trigve", "html_url": "https://github.com/Trigve", "followers_url": "https://api.github.com/users/Trigve/followers", "following_url": "https://api.github.com/users/Trigve/following{/other_user}", "gists_url": "https://api.github.com/users/Trigve/gists{/gist_id}", "starred_url": "https://api.github.com/users/Trigve/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Trigve/subscriptions", "organizations_url": "https://api.github.com/users/Trigve/orgs", "repos_url": "https://api.github.com/users/Trigve/repos", "events_url": "https://api.github.com/users/Trigve/events{/privacy}", "received_events_url": "https://api.github.com/users/Trigve/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-01T20:16:09Z", "updated_at": "2020-07-08T22:14:41Z", "closed_at": "2020-07-08T22:14:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nThe NAMESPACE_BEGIN is very generic name and therefor there could be the name clash (for instance CryptoPP does use the NAMESPACE_BEGIN also).\r\n\r\nIt could be fixed renaming the NAMESPACE_BEGIN -> PYBIND11_NAMESPACE_BEGIN. I think this is the only macro that hasn't the PYBIND11 prefix.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2194", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2194/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2194/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2194/events", "html_url": "https://github.com/pybind/pybind11/issues/2194", "id": 608684257, "node_id": "MDU6SXNzdWU2MDg2ODQyNTc=", "number": 2194, "title": "make_iterator question.", "user": {"login": "aractnido", "id": 7954219, "node_id": "MDQ6VXNlcjc5NTQyMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/7954219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aractnido", "html_url": "https://github.com/aractnido", "followers_url": "https://api.github.com/users/aractnido/followers", "following_url": "https://api.github.com/users/aractnido/following{/other_user}", "gists_url": "https://api.github.com/users/aractnido/gists{/gist_id}", "starred_url": "https://api.github.com/users/aractnido/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aractnido/subscriptions", "organizations_url": "https://api.github.com/users/aractnido/orgs", "repos_url": "https://api.github.com/users/aractnido/repos", "events_url": "https://api.github.com/users/aractnido/events{/privacy}", "received_events_url": "https://api.github.com/users/aractnido/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T23:45:31Z", "updated_at": "2020-07-07T21:32:44Z", "closed_at": "2020-07-07T21:32:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting in VC++:\r\n\r\nC2027: use of undefined type 'pybind11::detail::process_attribute<std::shared_ptr<IEnumerable<T>>,void>'\r\n\r\nWhen doing:\r\n```\r\npy::iterator CreatePyIter(unique_ptr<IEnumerable> enumerable)\r\n{\r\n    auto begin = enumerable.cbegin();\r\n    auto end = enumerable.cend();\r\n    // Move the enumerable inside the iterator.\r\n    shared_ptr<IEnumerable<T>> keepAlive(enumerable.release());\r\n    return py::make_iterator</*pybind11::return_value_policy::??*/>(begin, end, move(keepAlive));\r\n}\r\n```\r\n'begin' and 'end' are just iterators that use a raw pointer. The enumerable parameter is originally allocated as unique ptr and then I try to tell make_iterator that it can own it. It could own it as a unique_ptr or shared_ptr, either way would be fine.\r\n\r\n1. What is this error about? Do I need to declare IEnumerable before pybind11 headers?\r\n2. What is the right policy? Ideally I would like to forget about the IEnumerable object and let the caller of 'CreatePyIter' own it. Ideally too, I would like avoid the object to be kept alive longer than the current thread's lifetime (there is a special thread_local allocator).\r\n\r\nThank you so much.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2193", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2193/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2193/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2193/events", "html_url": "https://github.com/pybind/pybind11/issues/2193", "id": 608597067, "node_id": "MDU6SXNzdWU2MDg1OTcwNjc=", "number": 2193, "title": "function argument by reference for changing array size ", "user": {"login": "lovecoffeeandmilk", "id": 26327479, "node_id": "MDQ6VXNlcjI2MzI3NDc5", "avatar_url": "https://avatars2.githubusercontent.com/u/26327479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lovecoffeeandmilk", "html_url": "https://github.com/lovecoffeeandmilk", "followers_url": "https://api.github.com/users/lovecoffeeandmilk/followers", "following_url": "https://api.github.com/users/lovecoffeeandmilk/following{/other_user}", "gists_url": "https://api.github.com/users/lovecoffeeandmilk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lovecoffeeandmilk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lovecoffeeandmilk/subscriptions", "organizations_url": "https://api.github.com/users/lovecoffeeandmilk/orgs", "repos_url": "https://api.github.com/users/lovecoffeeandmilk/repos", "events_url": "https://api.github.com/users/lovecoffeeandmilk/events{/privacy}", "received_events_url": "https://api.github.com/users/lovecoffeeandmilk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T20:32:47Z", "updated_at": "2020-07-07T21:34:53Z", "closed_at": "2020-07-07T21:34:52Z", "author_association": "NONE", "active_lock_reason": null, "body": " if I write a function  void foo(std::vector<int> & array) { array.resize(100); }\r\nIn Python, I run it like this \r\narray = []\r\nfoo(array)\r\nprint(len(array))\r\n\r\nsince array is mutable, why the output is still 0, rather than 100 ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2192", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2192/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2192/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2192/events", "html_url": "https://github.com/pybind/pybind11/issues/2192", "id": 608213182, "node_id": "MDU6SXNzdWU2MDgyMTMxODI=", "number": 2192, "title": "pybind11 incompatible function arguments. The following argument types are supported: 1. (arg0: _GstPadProbeInfo) -> capsule", "user": {"login": "charmed12", "id": 32194224, "node_id": "MDQ6VXNlcjMyMTk0MjI0", "avatar_url": "https://avatars0.githubusercontent.com/u/32194224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/charmed12", "html_url": "https://github.com/charmed12", "followers_url": "https://api.github.com/users/charmed12/followers", "following_url": "https://api.github.com/users/charmed12/following{/other_user}", "gists_url": "https://api.github.com/users/charmed12/gists{/gist_id}", "starred_url": "https://api.github.com/users/charmed12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/charmed12/subscriptions", "organizations_url": "https://api.github.com/users/charmed12/orgs", "repos_url": "https://api.github.com/users/charmed12/repos", "events_url": "https://api.github.com/users/charmed12/events{/privacy}", "received_events_url": "https://api.github.com/users/charmed12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T10:40:11Z", "updated_at": "2020-07-08T11:55:08Z", "closed_at": "2020-07-08T11:55:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "i want to call a c++ function via python using pybind11, the c ++ function declaration is like billow :\r\n\r\nvoid *getimage ( GstPadProbeInfo * info)\r\nIn python i called it using :\r\n\r\nimage=example.getimage(info)\r\ninfo python type is gi.repository.GstPadProbeInfo when i run the code i get\r\n\r\nincompatible function arguments. The following argument types are supported: 1. (arg0: _GstPadProbeInfo) -> capsule\r\n\r\nhow i can resolve this issues , please help me", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2191", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2191/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2191/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2191/events", "html_url": "https://github.com/pybind/pybind11/issues/2191", "id": 608186776, "node_id": "MDU6SXNzdWU2MDgxODY3NzY=", "number": 2191, "title": "Overriding __eq__ does not set __hash__ to None", "user": {"login": "ixje", "id": 6625537, "node_id": "MDQ6VXNlcjY2MjU1Mzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6625537?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ixje", "html_url": "https://github.com/ixje", "followers_url": "https://api.github.com/users/ixje/followers", "following_url": "https://api.github.com/users/ixje/following{/other_user}", "gists_url": "https://api.github.com/users/ixje/gists{/gist_id}", "starred_url": "https://api.github.com/users/ixje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ixje/subscriptions", "organizations_url": "https://api.github.com/users/ixje/orgs", "repos_url": "https://api.github.com/users/ixje/repos", "events_url": "https://api.github.com/users/ixje/events{/privacy}", "received_events_url": "https://api.github.com/users/ixje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2020-04-28T10:00:35Z", "updated_at": "2020-07-26T23:44:26Z", "closed_at": "2020-07-26T23:44:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nThe Python documentation [states](https://docs.python.org/3/reference/datamodel.html#object.__hash__)\r\n\r\n> A class that overrides `__eq__()` and does not define `__hash__()` will have its `__hash__()` implicitly set to None. When the `__hash__()` method of a class is None, instances of the class will raise an appropriate TypeError when a program attempts to retrieve their hash value, and will also be correctly identified as unhashable when checking `isinstance(obj, collections.abc.Hashable)`.\r\n\r\nThus if we override `__eq__` but not `__hash__` we should get an unhashable type (e.g. cannot be used in a `set` container). Pybind however seems to always have a `__hash__` implemented, regardless if we override `__eq__`. The expected behaviour is that `__hash__` is set to `None`\r\n\r\n## Reproducible example code\r\nIn Python it exhibits the following behaviour\r\n\r\n```python\r\nfrom collections import abc\r\n\r\nclass MyClass1:\r\n    pass\r\n\r\nclass MyClass2:\r\n    def __eq__(self, other):\r\n        return True\r\n\r\ndef main():\r\n    c1 = MyClass1()\r\n    c2 = MyClass2()\r\n    print(isinstance(c1, abc.Hashable)) # True \r\n    print(isinstance(c2, abc.Hashable)) # False <- OK\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\nUsing pybind\r\n```cpp\r\n#include <pybind11/pybind11.h>\r\nnamespace py = pybind11;\r\n\r\nclass DummyClass {};\r\nclass DummyClass2 {};\r\n\r\nPYBIND11_MODULE(DummyClass, m) {\r\n    py::class_<DummyClass>(m, \"MyClass1\")\r\n            .def(py::init());\r\n    py::class_<DummyClass2>(m, \"MyClass2\")\r\n            .def(py::init())\r\n            .def(\"__eq__\", [](py::object&) { return true; });\r\n}\r\n```\r\n```python\r\nfrom collections import abc\r\nfrom lib.DummyClass import MyClass1, MyClass2\r\n\r\ndef main():\r\n    c1 = MyClass1()\r\n    c2 = MyClass2()\r\n    print(isinstance(c1, abc.Hashable)) # True \r\n    print(isinstance(c2, abc.Hashable)) # True <- NOT OK\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n# The workaround\r\nA workaround is to manually add `.attr(\"__hash__\") = py::none()`\r\n\r\nI'm assuming it should be possible to detect if there is a `__eq__` override without any `__hash__` override and then set the attribute. This would resolve the deviating/unexpected behaviour.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2190", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2190/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2190/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2190/events", "html_url": "https://github.com/pybind/pybind11/issues/2190", "id": 608011341, "node_id": "MDU6SXNzdWU2MDgwMTEzNDE=", "number": 2190, "title": "Code fails to compile when binding the std::deque of Non copy/move-constructible  elements (similar to #487)", "user": {"login": "ashhasthantra", "id": 46032175, "node_id": "MDQ6VXNlcjQ2MDMyMTc1", "avatar_url": "https://avatars0.githubusercontent.com/u/46032175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashhasthantra", "html_url": "https://github.com/ashhasthantra", "followers_url": "https://api.github.com/users/ashhasthantra/followers", "following_url": "https://api.github.com/users/ashhasthantra/following{/other_user}", "gists_url": "https://api.github.com/users/ashhasthantra/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashhasthantra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashhasthantra/subscriptions", "organizations_url": "https://api.github.com/users/ashhasthantra/orgs", "repos_url": "https://api.github.com/users/ashhasthantra/repos", "events_url": "https://api.github.com/users/ashhasthantra/events{/privacy}", "received_events_url": "https://api.github.com/users/ashhasthantra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T04:15:00Z", "updated_at": "2020-07-08T18:13:23Z", "closed_at": "2020-07-08T18:13:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I see that there was an issue #487 which was supposedly fixed by #490. My code fails compilation with an error \"use of deleted function\" when binding the std::deque containing non copy/move-constructible  elements.\r\nIs there a fix for this issue? I couldn't find the changes which #490 claims. I am checked in master branch of pybind11 and I still get the same error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2187", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2187/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2187/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2187/events", "html_url": "https://github.com/pybind/pybind11/issues/2187", "id": 607144811, "node_id": "MDU6SXNzdWU2MDcxNDQ4MTE=", "number": 2187, "title": "Import error for nested classes with the same name but in different scopes", "user": {"login": "jslee02", "id": 4038467, "node_id": "MDQ6VXNlcjQwMzg0Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4038467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jslee02", "html_url": "https://github.com/jslee02", "followers_url": "https://api.github.com/users/jslee02/followers", "following_url": "https://api.github.com/users/jslee02/following{/other_user}", "gists_url": "https://api.github.com/users/jslee02/gists{/gist_id}", "starred_url": "https://api.github.com/users/jslee02/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jslee02/subscriptions", "organizations_url": "https://api.github.com/users/jslee02/orgs", "repos_url": "https://api.github.com/users/jslee02/repos", "events_url": "https://api.github.com/users/jslee02/events{/privacy}", "received_events_url": "https://api.github.com/users/jslee02/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-26T23:45:41Z", "updated_at": "2020-07-26T23:49:22Z", "closed_at": "2020-07-26T23:49:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nNot sure if this is a pybind11 problem or not, but it fails to import when there are nested classes with the same name but in different scopes.\r\n\r\nThe following code builds fine with no errors, but only import error happens. If the second \"Option\" (for `Derived::Option`) is renamed to something else, then the import error disappears.\r\n\r\nI believe this binding code is legitimate because it works in equivalent Python code.\r\n\r\n```python\r\nclass Base:\r\n    class Option:\r\n        def __init__(self):\r\n            print('Base.Option')\r\n\r\n    def __init__(self):\r\n        print('Base')\r\n\r\n\r\nclass Derived(Base):\r\n    class Option(Base.Option):\r\n        def __init__(self):\r\n            print('Derived.Option')\r\n\r\n    def __init__(self):\r\n        print('Derived')\r\n\r\n\r\nb = Base()\r\nd = Derived()\r\n\r\no1 = Base.Option()\r\no2 = Derived.Option()\r\n\r\n#---------\r\n# Output:\r\n#---------\r\n# Base\r\n# Derived\r\n# Base.Option\r\n# Derived.Option\r\n```\r\n\r\n## Reproducible example code\r\n\r\n- compiler: GCC 9.2.1\r\n- pybind11: v2.5\r\n- Python: v3.5.2\r\n\r\n```cpp\r\n#include <pybind11/pybind11.h>\r\n\r\nclass Base {\r\npublic:\r\n  Base() = default;\r\n  class Option {\r\n  public:\r\n    Option() = default;\r\n  };\r\n};\r\n\r\nclass Derived : public Base {\r\npublic:\r\n  Derived() = default;\r\n  class Option : public Base::Option {\r\n  public:\r\n    Option() = default;\r\n  };\r\n};\r\n\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(example, m) {\r\n  auto base = py::class_<Base>(m, \"Base\").def(py::init<>());\r\n  py::class_<Base::Option>(base, \"Option\").def(py::init<>());\r\n\r\n  auto derived = py::class_<Derived, Base>(m, \"Derived\").def(py::init<>());\r\n  py::class_<Derived::Option, Base::Option>(derived, \"Option\").def(py::init<>());\r\n}\r\n```\r\n\r\n```python\r\nPython 3.5.2 (default, Apr 16 2020, 17:47:17) \r\n[GCC 5.4.0 20160609] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import example\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nImportError: generic_type: cannot initialize type \"Option\": an object with that name is already defined\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2185", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2185/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2185/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2185/events", "html_url": "https://github.com/pybind/pybind11/issues/2185", "id": 607010157, "node_id": "MDU6SXNzdWU2MDcwMTAxNTc=", "number": 2185, "title": "overload pure vitual function that return std::map", "user": {"login": "yyfcc17", "id": 14891271, "node_id": "MDQ6VXNlcjE0ODkxMjcx", "avatar_url": "https://avatars1.githubusercontent.com/u/14891271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yyfcc17", "html_url": "https://github.com/yyfcc17", "followers_url": "https://api.github.com/users/yyfcc17/followers", "following_url": "https://api.github.com/users/yyfcc17/following{/other_user}", "gists_url": "https://api.github.com/users/yyfcc17/gists{/gist_id}", "starred_url": "https://api.github.com/users/yyfcc17/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yyfcc17/subscriptions", "organizations_url": "https://api.github.com/users/yyfcc17/orgs", "repos_url": "https://api.github.com/users/yyfcc17/repos", "events_url": "https://api.github.com/users/yyfcc17/events{/privacy}", "received_events_url": "https://api.github.com/users/yyfcc17/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-26T13:15:56Z", "updated_at": "2020-07-07T21:41:52Z", "closed_at": "2020-07-07T21:41:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello, i try to make a trampoline of a abstract class, but build failed. here is my trampoline code:\r\n\r\n```\r\nclass PyParameterOptimizer : public ParameterOptimizer {\r\n        public:\r\n            /* Inherit the constructors */\r\n            using ParameterOptimizer::ParameterOptimizer;\r\n\r\n            virtual void onAppend(Express::VARP parameter) override {\r\n                PYBIND11_OVERLOAD_PURE(void, ParameterOptimizer, append, parameter);\r\n            }\r\n            virtual void onRemove(Express::VARP parameter) override {\r\n                PYBIND11_OVERLOAD_PURE(void, ParameterOptimizer, remove, parameter);\r\n            }\r\n            virtual std::map<VARP, VARP> onGetNextParameter(VARP loss) override {\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n            }\r\n        };\r\n```\r\n\r\nit is the `onGetNextParameter` function, when build, it reports:\r\n```\r\nerror: expected '(' after 'static_cast'\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n                ^\r\npybind11/pybind11.h:2164:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE'\r\n    PYBIND11_OVERLOAD_PURE_NAME(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), #fn, fn, __VA_ARGS__)\r\n    ^\r\npybind11/pybind11.h:2129:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE_NAME'\r\n    PYBIND11_OVERLOAD_INT(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), name, __VA_ARGS__) \\\r\n    ^\r\npybind11/pybind11.h:2092:86: note: expanded from macro 'PYBIND11_OVERLOAD_INT'\r\n        pybind11::function overload = pybind11::get_overload(static_cast<const cname *>(this), name); \\\r\n                                                                                     ^\r\nMNN.cc:2447:17: error: expected expression\r\npybind11/pybind11.h:2164:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE'\r\n    PYBIND11_OVERLOAD_PURE_NAME(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), #fn, fn, __VA_ARGS__)\r\n    ^\r\npybind11/pybind11.h:2129:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE_NAME'\r\n    PYBIND11_OVERLOAD_INT(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), name, __VA_ARGS__) \\\r\n    ^\r\npybind11/pybind11.h:2092:87: note: expanded from macro 'PYBIND11_OVERLOAD_INT'\r\n        pybind11::function overload = pybind11::get_overload(static_cast<const cname *>(this), name); \\\r\n                                                                                      ^\r\nMNN.cc:2447:82: error: use of undeclared identifier 'compute_info_and_update'\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n                                                                                 ^\r\nMNN.cc:2447:45: error: too few template arguments for class template 'map'\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n                                            ^\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/map:898:28: note: template is declared here\r\nclass _LIBCPP_TEMPLATE_VIS map\r\n                           ^\r\nMNN.cc:2447:17: error: type name requires a specifier or qualifier\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n                ^\r\npybind11/pybind11.h:2164:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE'\r\n    PYBIND11_OVERLOAD_PURE_NAME(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), #fn, fn, __VA_ARGS__)\r\n\r\npybind11/pybind11.h:2129:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE_NAME'\r\n    PYBIND11_OVERLOAD_INT(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), name, __VA_ARGS__) \\\r\n    ^\r\npybind11/pybind11.h:2099:62: note: expanded from macro 'PYBIND11_OVERLOAD_INT'\r\n            else return pybind11::detail::cast_safe<ret_type>(std::move(o)); \\\r\n                                                             ^\r\nMNN.cc:2447:17: error: unknown type name 'o'\r\npybind11/pybind11.h:2164:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE'\r\n    PYBIND11_OVERLOAD_PURE_NAME(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), #fn, fn, __VA_ARGS__)\r\n    ^\r\npybind11/pybind11.h:2129:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE_NAME'\r\n    PYBIND11_OVERLOAD_INT(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), name, __VA_ARGS__) \\\r\n    ^\r\npybind11/pybind11.h:2099:73: note: expanded from macro 'PYBIND11_OVERLOAD_INT'\r\n            else return pybind11::detail::cast_safe<ret_type>(std::move(o)); \\\r\n                                                                        ^\r\nMNN.cc:2447:17: error: definition or redeclaration of 'move' not allowed inside a function\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npybind11/pybind11.h:2164:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE'\r\n    PYBIND11_OVERLOAD_PURE_NAME(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), #fn, fn, __VA_ARGS__)\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npybind11/pybind11.h:2129:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE_NAME'\r\n    PYBIND11_OVERLOAD_INT(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), name, __VA_ARGS__) \\\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npybind11/pybind11.h:2099:68: note: expanded from macro 'PYBIND11_OVERLOAD_INT'\r\n            else return pybind11::detail::cast_safe<ret_type>(std::move(o)); \\\r\n                                                              ~~~~~^\r\nMNN.cc:2447:17: error: a function type is not allowed here\r\n                PYBIND11_OVERLOAD_PURE(std::map<VARP, VARP>, ParameterOptimizer, compute_info_and_update, loss);\r\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npybind11/pybind11.h:2164:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE'\r\n    PYBIND11_OVERLOAD_PURE_NAME(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), #fn, fn, __VA_ARGS__)\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npybind11/pybind11.h:2129:5: note: expanded from macro 'PYBIND11_OVERLOAD_PURE_NAME'\r\n    PYBIND11_OVERLOAD_INT(PYBIND11_TYPE(ret_type), PYBIND11_TYPE(cname), name, __VA_ARGS__) \\\r\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npybind11/pybind11.h:2099:68: note: expanded from macro 'PYBIND11_OVERLOAD_INT'\r\n            else return pybind11::detail::cast_safe<ret_type>(std::move(o)); \\\r\n```\r\n\r\nwhy does this happen? thank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2182", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2182/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2182/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2182/events", "html_url": "https://github.com/pybind/pybind11/issues/2182", "id": 606760114, "node_id": "MDU6SXNzdWU2MDY3NjAxMTQ=", "number": 2182, "title": "recursive implicit conversion fails, although boost::python work at this situation", "user": {"login": "hzhangxyz", "id": 11623447, "node_id": "MDQ6VXNlcjExNjIzNDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/11623447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hzhangxyz", "html_url": "https://github.com/hzhangxyz", "followers_url": "https://api.github.com/users/hzhangxyz/followers", "following_url": "https://api.github.com/users/hzhangxyz/following{/other_user}", "gists_url": "https://api.github.com/users/hzhangxyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hzhangxyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hzhangxyz/subscriptions", "organizations_url": "https://api.github.com/users/hzhangxyz/orgs", "repos_url": "https://api.github.com/users/hzhangxyz/repos", "events_url": "https://api.github.com/users/hzhangxyz/events{/privacy}", "received_events_url": "https://api.github.com/users/hzhangxyz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-04-25T12:31:39Z", "updated_at": "2020-07-11T21:40:55Z", "closed_at": "2020-07-11T21:40:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nrecursive implicit conversion fails.\r\n\r\n## Reproducible example code\r\n\r\nM.cpp:\r\n```\r\n#include <pybind11/pybind11.h>\r\n\r\nstruct S {\r\n   S(int) {}\r\n};\r\n\r\nstruct E {\r\n   E(S) {}\r\n};\r\n\r\nstruct T {\r\n   T(E) {}\r\n};\r\n\r\nnamespace py = pybind11;\r\n\r\nPYBIND11_MODULE(M, m) {\r\n   py::class_<S>(m, \"S\").def(py::init<int>());\r\n   py::implicitly_convertible<int, S>();\r\n   py::class_<E>(m, \"E\").def(py::init<S>());\r\n   py::implicitly_convertible<S, E>();\r\n   py::class_<T>(m, \"T\").def(py::init<E>());\r\n}\r\n```\r\n\r\nmain.py\r\n```\r\nfrom M import *\r\nprint(\"int -> S -> E -> T\")\r\nT(E(S(2333)))\r\nprint(\"int -> E -> T\")\r\nT(E(2333))\r\nprint(\"int -> S -> T\")\r\nT(S(2333))\r\nprint(\"int -> T\")\r\nT(2333)\r\n```\r\n\r\n## what happen\r\nthe above three construction success but `T(2333)` fail. It say\r\n```\r\nint -> S -> E -> T\r\nint -> E -> T\r\nint -> S -> T\r\nint -> T\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 9, in <module>\r\n    T(2333)\r\nTypeError: __init__(): incompatible constructor arguments. The following argument types are supported:\r\n    1. M.T(arg0: M.E)\r\n\r\nInvoked with: 2333\r\n```\r\n\r\n## environment\r\narch linux\r\ngcc 9.3.0\r\npython 3.8.2\r\npybind11 2.5.0\r\n\r\n## what else\r\nBTW boost::python works well at this situation\r\n\r\nM.cpp\r\n```\r\n#include <boost/python.hpp>\r\n\r\nstruct S {\r\n   S(int) {}\r\n};\r\n\r\nstruct E {\r\n   E(S) {}\r\n};\r\n\r\nstruct T {\r\n   T(E) {}\r\n};\r\n\r\nnamespace py = boost::python;\r\n\r\nBOOST_PYTHON_MODULE(M) {\r\n   py::class_<S>(\"S\", py::no_init).def(py::init<int>());\r\n   py::implicitly_convertible<int, S>();\r\n   py::class_<E>(\"E\", py::no_init).def(py::init<S>());\r\n   py::implicitly_convertible<S, E>();\r\n   py::class_<T>(\"T\", py::no_init).def(py::init<E>());\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2180", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2180/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2180/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2180/events", "html_url": "https://github.com/pybind/pybind11/issues/2180", "id": 605356840, "node_id": "MDU6SXNzdWU2MDUzNTY4NDA=", "number": 2180, "title": "Build failed with Visual Studio 2017 and CUDA 10.2", "user": {"login": "SimeonEhrig", "id": 10682583, "node_id": "MDQ6VXNlcjEwNjgyNTgz", "avatar_url": "https://avatars3.githubusercontent.com/u/10682583?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimeonEhrig", "html_url": "https://github.com/SimeonEhrig", "followers_url": "https://api.github.com/users/SimeonEhrig/followers", "following_url": "https://api.github.com/users/SimeonEhrig/following{/other_user}", "gists_url": "https://api.github.com/users/SimeonEhrig/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimeonEhrig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimeonEhrig/subscriptions", "organizations_url": "https://api.github.com/users/SimeonEhrig/orgs", "repos_url": "https://api.github.com/users/SimeonEhrig/repos", "events_url": "https://api.github.com/users/SimeonEhrig/events{/privacy}", "received_events_url": "https://api.github.com/users/SimeonEhrig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-23T08:51:29Z", "updated_at": "2020-07-22T09:32:46Z", "closed_at": "2020-07-07T23:26:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nThe nvcc compiler crashes at a minimal example, when I compile with VS 2017 and CUDA 10.2 on Windows 10.\r\n\r\n```bash\r\ncmake -G\"Visual Studio 15 2017 Win64\" ..\r\n-- Selecting Windows SDK version 10.0.17763.0 to target Windows 10.0.18363.\r\n-- The CXX compiler identification is MSVC 19.16.27039.0\r\n-- The CUDA compiler identification is NVIDIA 10.2.89\r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x64/cl.exe\r\n-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x64/cl.exe -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Check for working CUDA compiler: C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2/bin/nvcc.exe\r\n-- Check for working CUDA compiler: C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.2/bin/nvcc.exe -- works\r\n-- Detecting CUDA compiler ABI info\r\n-- Detecting CUDA compiler ABI info - done\r\n-- Found PythonInterp: C:/Users/user/miniconda3/envs/pybind11_conda/python.exe (found suitable version \"3.8.2\", minimum required is \"3.6\")\r\n-- Found PythonLibs: C:/Users/user/miniconda3/envs/pybind11_conda/libs/python38.lib (found suitable version \"3.8.2\", minimum required is \"3.6\")\r\n-- Found PythonInterp: C:/Users/user/miniconda3/envs/pybind11_conda/python.exe (found version \"3.8.2\")\r\n-- Found PythonLibs: C:/Users/user/miniconda3/envs/pybind11_conda/libs/Python38.lib\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: C:/Users/user/project/simple_cuda/build_conda\r\n(pybind11_conda) PS C:\\Users\\user\\project\\simple_cuda\\build_conda> cmake --build .\r\nMicrosoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Checking Build System\r\n  Building Custom Rule C:/Users/user/project/simple_cuda/CMakeLists.txt\r\n  Compiling CUDA source file ..\\module.cu...\r\n\r\n  C:\\Users\\user\\project\\simple_cuda\\build_conda>\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\bin\\nvcc.exe\" -gencode=arch=compute_30,code=\\\"sm\r\n  _30,compute_30\\\" --use-local-env -ccbin \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX86\\x64\" -x cu\r\n  -IC:\\Users\\user\\miniconda3\\envs\\pybind11_conda\\include -I\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\include\"     --keep-dir x64\\Debug -ma\r\n  xrregcount=0  --machine 64 --compile -cudart static -Xcompiler=\"/EHsc -Zi -Ob0\" -g   -D_WINDOWS -D\"CMAKE_INTDIR=\\\"Debug\\\"\" -Dbinding_EXPORTS -D\"CMAKE_INTD\r\n  IR=\\\"Debug\\\"\" -Dbinding_EXPORTS -D_WINDLL -D_MBCS -Xcompiler \"/EHsc /W3 /nologo /Od /Fdbinding.dir\\Debug\\vc141.pdb /FS /Zi /RTC1 /MDd /GR\" -o binding.dir\\\r\n  Debug\\module.obj \"C:\\Users\\user\\project\\simple_cuda\\module.cu\"\r\nc:\\users\\user\\miniconda3\\envs\\pybind11_conda\\include\\pybind11\\cast.h(1495): error : expression must be a pointer to a complete object type [C:\\Users\\simeo\r\nn\\project\\simple_cuda\\build_conda\\binding.vcxproj]\r\n\r\n  1 error detected in the compilation of \"C:/Users/user/AppData/Local/Temp/tmpxft_000017ec_00000000-5_module.cpp4.ii\".\r\n  module.cu\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\VC\\VCTargets\\BuildCustomizations\\CUDA 10.2.targets(764,9): error MSB3721: The com\r\nmand \"\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\bin\\nvcc.exe\" -gencode=arch=compute_30,code=\\\"sm_30,compute_30\\\" --use-local-env -ccbin \"C:\\\r\nProgram Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX86\\x64\" -x cu  -IC:\\Users\\user\\miniconda3\\envs\\pybind11_con\r\nda\\include -I\"C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.2\\include\"     --keep-dir x64\\Debug -maxrregcount=0  --machine 64 --compile -cudart sta\r\ntic -Xcompiler=\"/EHsc -Zi -Ob0\" -g   -D_WINDOWS -D\"CMAKE_INTDIR=\\\"Debug\\\"\" -Dbinding_EXPORTS -D\"CMAKE_INTDIR=\\\"Debug\\\"\" -Dbinding_EXPORTS -D_WINDLL -D_MBCS\r\n-Xcompiler \"/EHsc /W3 /nologo /Od /Fdbinding.dir\\Debug\\vc141.pdb /FS /Zi /RTC1 /MDd /GR\" -o binding.dir\\Debug\\module.obj \"C:\\Users\\user\\project\\simple_cud\r\na\\module.cu\"\" exited with code 2. [C:\\Users\\user\\project\\simple_cuda\\build_conda\\binding.vcxproj]\r\n```\r\n\r\n## Reproducible example code\r\n\r\n`module.cu`:\r\n``` C++\r\n#include <pybind11/pybind11.h>\r\n\r\nint add(int i, int j){\r\n\treturn i + j;\r\n}\r\n\r\nPYBIND11_MODULE(binding, m) {\r\n\tm.def(\"add\", &add, \"A function which adds two numbers\");\r\n}\r\n```\r\n\r\n`CMakeLists.txt`:\r\n```cmake\r\ncmake_minimum_required(VERSION 3.14)\r\nproject(test LANGUAGES CXX CUDA)\r\n\r\nfind_package(PythonInterp 3.6 REQUIRED)\r\nfind_package(PythonLibs 3.6 REQUIRED)\r\nfind_package(pybind11 REQUIRED)\r\n\r\ninclude_directories(${PYTHON_INCLUDE_DIRS})\r\n\r\nadd_library(binding SHARED module.cu)\r\nset_target_properties(binding PROPERTIES SUFFIX \".pyd\")\r\ntarget_link_libraries(binding\r\n  ${PYTHON_LIBRARIES}\r\n  cudart)\r\n```\r\n\r\n## Workaround\r\nI found a solution at this issue: https://github.com/pytorch/pytorch/issues/11004\r\nI replace the line `explicit operator type&() { return *(this->value); }` (cast.h:1495) with `explicit operator type&() { return *(static_cast<type *>(this->value)); }`. This works fine for me but I don't know if it is a good solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2179", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2179/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2179/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2179/events", "html_url": "https://github.com/pybind/pybind11/issues/2179", "id": 605033818, "node_id": "MDU6SXNzdWU2MDUwMzM4MTg=", "number": 2179, "title": "[regression in 2.5.0] --record {pist} doesn't record .h files", "user": {"login": "yurivict", "id": 271906, "node_id": "MDQ6VXNlcjI3MTkwNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/271906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yurivict", "html_url": "https://github.com/yurivict", "followers_url": "https://api.github.com/users/yurivict/followers", "following_url": "https://api.github.com/users/yurivict/following{/other_user}", "gists_url": "https://api.github.com/users/yurivict/gists{/gist_id}", "starred_url": "https://api.github.com/users/yurivict/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yurivict/subscriptions", "organizations_url": "https://api.github.com/users/yurivict/orgs", "repos_url": "https://api.github.com/users/yurivict/repos", "events_url": "https://api.github.com/users/yurivict/events{/privacy}", "received_events_url": "https://api.github.com/users/yurivict/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-22T20:01:11Z", "updated_at": "2020-06-10T22:21:31Z", "closed_at": "2020-06-10T22:21:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "While trying to update the FreeBSD port I encountered these errors:\r\n```\r\n===> Checking for items in STAGEDIR missing from pkg-plist\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/attr.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/buffer_info.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/cast.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/chrono.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/common.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/complex.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/detail/class.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/detail/common.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/detail/descr.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/detail/init.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/detail/internals.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/detail/typeid.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/eigen.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/embed.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/eval.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/functional.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/iostream.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/numpy.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/operators.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/options.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/pybind11.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/pytypes.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/stl.h\r\nError: Orphaned: %%PYTHON_SITELIBDIR%%/pybind11/include/pybind11/stl_bind.h\r\n===> Checking for items in pkg-plist which are not in STAGEDIR\r\n```\r\n\r\nSee https://pip.pypa.io/en/stable/reference/pip_install/ for a ```setup.py install --record``` example.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2178", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2178/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2178/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2178/events", "html_url": "https://github.com/pybind/pybind11/issues/2178", "id": 604768420, "node_id": "MDU6SXNzdWU2MDQ3Njg0MjA=", "number": 2178, "title": "Cast chrono time_point to numpy datetime64", "user": {"login": "m4ce", "id": 1254063, "node_id": "MDQ6VXNlcjEyNTQwNjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1254063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4ce", "html_url": "https://github.com/m4ce", "followers_url": "https://api.github.com/users/m4ce/followers", "following_url": "https://api.github.com/users/m4ce/following{/other_user}", "gists_url": "https://api.github.com/users/m4ce/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4ce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4ce/subscriptions", "organizations_url": "https://api.github.com/users/m4ce/orgs", "repos_url": "https://api.github.com/users/m4ce/repos", "events_url": "https://api.github.com/users/m4ce/events{/privacy}", "received_events_url": "https://api.github.com/users/m4ce/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-22T13:42:28Z", "updated_at": "2020-07-24T22:35:32Z", "closed_at": "2020-07-24T22:35:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a numpy structured array that needs returning from C++ to python. As part of the struct, there's a time field which is a system_clock::time_point.\r\n\r\nI am unable to cast a time_point to numpy datetime64. The only way I have is to change the field to an int64 and store the timestamp in there. However, if I then want to cast it to datetime64 in python, a copy is made. I'd like to avoid any copy if possible.\r\n\r\nI was looking through the source code and I see NPY_DATETIME is not handled. My understanding is that support could be added to pybind11 given a time_point holds a duration? \r\n\r\nError:\r\n```\r\nImportError: NumPy type info missing for NSt3__16chrono10time_pointINS0_12system_clockENS0_8durationIxNS_5ratioILl1ELl1000000EEEEEEE\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2177", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2177/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2177/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2177/events", "html_url": "https://github.com/pybind/pybind11/issues/2177", "id": 604521532, "node_id": "MDU6SXNzdWU2MDQ1MjE1MzI=", "number": 2177, "title": "gil_scoped_release causes segmentation fault when used in a pure C++ context", "user": {"login": "luator", "id": 9333121, "node_id": "MDQ6VXNlcjkzMzMxMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/9333121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luator", "html_url": "https://github.com/luator", "followers_url": "https://api.github.com/users/luator/followers", "following_url": "https://api.github.com/users/luator/following{/other_user}", "gists_url": "https://api.github.com/users/luator/gists{/gist_id}", "starred_url": "https://api.github.com/users/luator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luator/subscriptions", "organizations_url": "https://api.github.com/users/luator/orgs", "repos_url": "https://api.github.com/users/luator/repos", "events_url": "https://api.github.com/users/luator/events{/privacy}", "received_events_url": "https://api.github.com/users/luator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-22T07:26:37Z", "updated_at": "2020-07-07T12:34:42Z", "closed_at": "2020-07-07T11:18:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nUsing `pybind11::gil_scoped_release` causes a segmentation fault when calling the function in C++ directly.\r\n\r\nI have a a C++ class which has Python bindings but should also be usable directly in C++.  In our setup, it is necessary that this class releases the GIL in the destructor to avoid a dead lock in some specific situations. Since I did not find another way, I added \r\n\r\n    pybind11::gil_scoped_release release;\r\n\r\nIn the destructor of the C++ class.  This works well when using it from Python but when using this class from C++ directly, it results in a segmentation fault.\r\n\r\nI would expect that `gil_scoped_release` simply does nothing in case there is no Python interpreter running.\r\n\r\nIs this a bug or intended behaviour?  In the latter case, is there another way to release the GIL in the destructor such that the class can still be used in C++ directly?\r\n\r\n\r\n## Reproducible example code\r\n\r\nFull reproducible example: https://github.com/luator/pybind11_segfault_example\r\n\r\nThe example class.  For the `hello` method the issue is avoided by using a `call_guard` but I did not find a non-intrusive solution for the destructor.\r\n```c++\r\nclass Foobar {\r\npublic:\r\n    ~Foobar() {\r\n        pybind11::gil_scoped_release release;  // <-- problematic line\r\n    }\r\n\r\n    void hello() {\r\n        std::cout << \"Hello World\" << std::endl;\r\n    }\r\n};\r\n\r\nPYBIND11_MODULE(py_foobar, m) {\r\n    pybind11::class_<Foobar>(m, \"Foobar\")\r\n        .def(pybind11::init<>())\r\n        .def(\"hello\",\r\n             &Foobar::hello,\r\n             pybind11::call_guard<pybind11::gil_scoped_release>());\r\n}\r\n```\r\nCauses a segfault on destruction when used directly in C++ like this:\r\n```c++\r\nint main()\r\n{\r\n    Foobar foo;\r\n    foo.hello();\r\n}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2174", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2174/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2174/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2174/events", "html_url": "https://github.com/pybind/pybind11/issues/2174", "id": 603078568, "node_id": "MDU6SXNzdWU2MDMwNzg1Njg=", "number": 2174, "title": "Custom excepthook in embeded python code", "user": {"login": "LinasBeres", "id": 20227275, "node_id": "MDQ6VXNlcjIwMjI3Mjc1", "avatar_url": "https://avatars0.githubusercontent.com/u/20227275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinasBeres", "html_url": "https://github.com/LinasBeres", "followers_url": "https://api.github.com/users/LinasBeres/followers", "following_url": "https://api.github.com/users/LinasBeres/following{/other_user}", "gists_url": "https://api.github.com/users/LinasBeres/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinasBeres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinasBeres/subscriptions", "organizations_url": "https://api.github.com/users/LinasBeres/orgs", "repos_url": "https://api.github.com/users/LinasBeres/repos", "events_url": "https://api.github.com/users/LinasBeres/events{/privacy}", "received_events_url": "https://api.github.com/users/LinasBeres/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-20T09:18:00Z", "updated_at": "2020-07-07T23:57:11Z", "closed_at": "2020-07-07T23:57:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I have a custom sys.excepthook in some python code that I am running, which doesn't seem to be working when I run it through embeding the python interpreter. Is there any way for me to make this work?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2173", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2173/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2173/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2173/events", "html_url": "https://github.com/pybind/pybind11/issues/2173", "id": 603004671, "node_id": "MDU6SXNzdWU2MDMwMDQ2NzE=", "number": 2173, "title": "Ignore.", "user": {"login": "RoelVdP", "id": 2000941, "node_id": "MDQ6VXNlcjIwMDA5NDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/2000941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoelVdP", "html_url": "https://github.com/RoelVdP", "followers_url": "https://api.github.com/users/RoelVdP/followers", "following_url": "https://api.github.com/users/RoelVdP/following{/other_user}", "gists_url": "https://api.github.com/users/RoelVdP/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoelVdP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoelVdP/subscriptions", "organizations_url": "https://api.github.com/users/RoelVdP/orgs", "repos_url": "https://api.github.com/users/RoelVdP/repos", "events_url": "https://api.github.com/users/RoelVdP/events{/privacy}", "received_events_url": "https://api.github.com/users/RoelVdP/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-20T07:22:10Z", "updated_at": "2020-04-20T09:19:56Z", "closed_at": "2020-04-20T09:19:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please delete this ticket.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2172", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2172/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2172/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2172/events", "html_url": "https://github.com/pybind/pybind11/issues/2172", "id": 602526914, "node_id": "MDU6SXNzdWU2MDI1MjY5MTQ=", "number": 2172, "title": "Embedded module name cannot be an existing C++ symbol", "user": {"login": "aslze", "id": 36175101, "node_id": "MDQ6VXNlcjM2MTc1MTAx", "avatar_url": "https://avatars0.githubusercontent.com/u/36175101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aslze", "html_url": "https://github.com/aslze", "followers_url": "https://api.github.com/users/aslze/followers", "following_url": "https://api.github.com/users/aslze/following{/other_user}", "gists_url": "https://api.github.com/users/aslze/gists{/gist_id}", "starred_url": "https://api.github.com/users/aslze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aslze/subscriptions", "organizations_url": "https://api.github.com/users/aslze/orgs", "repos_url": "https://api.github.com/users/aslze/repos", "events_url": "https://api.github.com/users/aslze/events{/privacy}", "received_events_url": "https://api.github.com/users/aslze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-18T18:52:36Z", "updated_at": "2020-07-10T14:31:04Z", "closed_at": "2020-07-10T14:31:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nYou cannot create an embedded module whose name is an existing C++ namespace or other symbol. I think this should not be a strange situation: creating a Python module that wraps a C++ library and takes its namespace as name.\r\n\r\nThis fails if `physics` is already a C++ namespace:\r\n\r\n```c++\r\nPYBIND11_EMBEDDED_MODULE(physics, m)\r\n```\r\n\r\nThe `PYBIND11_EMBEDDED_MODULE(name, variable)` macro prefixes `name` many times when defining its needed symbols to avoid clashes, except once, when defining the actual `pybind11::detail::embedded_module` object. I doubt this object's name is relevant in the C++ side, what is relevant is the real module name, seen by Python.\r\n\r\n## Proposed solution\r\n\r\nI would prefix that object just like the others. Line 64 in \"embed.h\":\r\n\r\n```c++\r\npybind11::detail::embedded_module name(PYBIND11_TOSTRING(name)\r\n```\r\n\r\nCould be changed to:\r\n\r\n```c++\r\npybind11::detail::embedded_module PYBIND11_CONCAT(pybind11_module_, name)(PYBIND11_TOSTRING(name)\r\n```\r\n\r\nIn the above example the global object created would be `pybind11_module_physics` which does not collide.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2171", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2171/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2171/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2171/events", "html_url": "https://github.com/pybind/pybind11/issues/2171", "id": 602421889, "node_id": "MDU6SXNzdWU2MDI0MjE4ODk=", "number": 2171, "title": "lld-link error:  could not open 'python37.lib'", "user": {"login": "jamiebk", "id": 1830258, "node_id": "MDQ6VXNlcjE4MzAyNTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1830258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamiebk", "html_url": "https://github.com/jamiebk", "followers_url": "https://api.github.com/users/jamiebk/followers", "following_url": "https://api.github.com/users/jamiebk/following{/other_user}", "gists_url": "https://api.github.com/users/jamiebk/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamiebk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamiebk/subscriptions", "organizations_url": "https://api.github.com/users/jamiebk/orgs", "repos_url": "https://api.github.com/users/jamiebk/repos", "events_url": "https://api.github.com/users/jamiebk/events{/privacy}", "received_events_url": "https://api.github.com/users/jamiebk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-18T09:48:08Z", "updated_at": "2020-07-24T22:45:41Z", "closed_at": "2020-07-24T22:45:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nOn windows, using CMake+clang to compile for windows. This means linking using lld-link.exe rather than link.exe. The argument for the python lib is being passed to lld-link as 'Python37.lib' though the file is actually 'python37.lib' (different capitalization). This wouldn't normally be a problem on windows, of course, but in this case lld-link is complaining \"error : could not open 'python37.lib': no such file or directory\". Confusingly, it uses the correct case in the error message.\r\n\r\nThe capitalization in question comes from FindPythonLibsNew.cmake:\r\n```\r\nif(CMAKE_HOST_WIN32 AND NOT (MSYS OR MINGW))\r\n    set(PYTHON_LIBRARY\r\n        \"${PYTHON_PREFIX}/libs/Python${PYTHON_LIBRARY_SUFFIX}.lib\")\r\n\r\n    # when run in a venv, PYTHON_PREFIX points to it. But the libraries remain in the\r\n    # original python installation. They may be found relative to PYTHON_INCLUDE_DIR.\r\n    if(NOT EXISTS \"${PYTHON_LIBRARY}\")\r\n        get_filename_component(_PYTHON_ROOT ${PYTHON_INCLUDE_DIR} DIRECTORY)\r\n        set(PYTHON_LIBRARY\r\n            \"${_PYTHON_ROOT}/libs/Python${PYTHON_LIBRARY_SUFFIX}.lib\")\r\n    endif()\r\n...\r\n```\r\nChanging the section above to use lowercase 'python' rather than 'Python' fixes the problem, i.e.:\r\n```\r\nif(CMAKE_HOST_WIN32 AND NOT (MSYS OR MINGW))\r\n    set(PYTHON_LIBRARY\r\n        \"${PYTHON_PREFIX}/libs/python${PYTHON_LIBRARY_SUFFIX}.lib\")\r\n\r\n    # when run in a venv, PYTHON_PREFIX points to it. But the libraries remain in the\r\n    # original python installation. They may be found relative to PYTHON_INCLUDE_DIR.\r\n    if(NOT EXISTS \"${PYTHON_LIBRARY}\")\r\n        get_filename_component(_PYTHON_ROOT ${PYTHON_INCLUDE_DIR} DIRECTORY)\r\n        set(PYTHON_LIBRARY\r\n            \"${_PYTHON_ROOT}/libs/python${PYTHON_LIBRARY_SUFFIX}.lib\")\r\n    endif()\r\n...\r\n```\r\n\r\n## Reproducible example code\r\n\r\n* Visual studio 2019, with the current VS-installer versions of Python (3.7.3) and (Clang 9.0.0)\r\n* Config in CMakeSettings.json is just the x64-Clang-Debug default from visual studio.\r\n* pybind11 installed through vcpkg, though I've also checked the issue still occurs with the current pybind11 master as a subrepo.\r\n\r\n[repro.zip](https://github.com/pybind/pybind11/files/4496391/repro.zip)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2170", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2170/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2170/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2170/events", "html_url": "https://github.com/pybind/pybind11/issues/2170", "id": 601868432, "node_id": "MDU6SXNzdWU2MDE4Njg0MzI=", "number": 2170, "title": "PYBIND11_NUMPY_DTYPE access array element", "user": {"login": "m4ce", "id": 1254063, "node_id": "MDQ6VXNlcjEyNTQwNjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1254063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4ce", "html_url": "https://github.com/m4ce", "followers_url": "https://api.github.com/users/m4ce/followers", "following_url": "https://api.github.com/users/m4ce/following{/other_user}", "gists_url": "https://api.github.com/users/m4ce/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4ce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4ce/subscriptions", "organizations_url": "https://api.github.com/users/m4ce/orgs", "repos_url": "https://api.github.com/users/m4ce/repos", "events_url": "https://api.github.com/users/m4ce/events{/privacy}", "received_events_url": "https://api.github.com/users/m4ce/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-17T10:23:33Z", "updated_at": "2020-04-17T11:28:28Z", "closed_at": "2020-04-17T11:28:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "```c++\r\nstruct Bar {\r\n  int x;\r\n};\r\n\r\nstruct Foo {\r\n  int a;\r\n  Bar b;\r\n  std::array<Bar, 10> c;\r\n};\r\n\r\nPYBIND11_NUMPY_DTYPE(Foo, a, b.x, c[0].x);\r\n```\r\n\r\nIt doesn't compile :/\r\n\r\n```\r\nerror: offsetof requires array type, 'std::array<Bar, 10>' invalid\r\n```\r\n\r\nIs there any reason for such limitation? It works if I try to access the member of a struct though.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2169", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2169/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2169/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2169/events", "html_url": "https://github.com/pybind/pybind11/issues/2169", "id": 601088051, "node_id": "MDU6SXNzdWU2MDEwODgwNTE=", "number": 2169, "title": "pybind11 not working with clang 10.0.0 and c++20: use of overloaded != operator is ambiguous", "user": {"login": "cstatz", "id": 547003, "node_id": "MDQ6VXNlcjU0NzAwMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/547003?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cstatz", "html_url": "https://github.com/cstatz", "followers_url": "https://api.github.com/users/cstatz/followers", "following_url": "https://api.github.com/users/cstatz/following{/other_user}", "gists_url": "https://api.github.com/users/cstatz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cstatz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cstatz/subscriptions", "organizations_url": "https://api.github.com/users/cstatz/orgs", "repos_url": "https://api.github.com/users/cstatz/repos", "events_url": "https://api.github.com/users/cstatz/events{/privacy}", "received_events_url": "https://api.github.com/users/cstatz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-16T14:09:52Z", "updated_at": "2020-04-26T07:27:09Z", "closed_at": "2020-04-26T07:20:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\n\r\nI know it is early, but maybe someone has already seen this kind of error:\r\n\r\nJust including pybind11 and trying to compile with clang 10.0.0 (the real one, not apple) and cpp-std=c++20 yields multiple errors of kind:\r\n\r\npybind11/cast.h:309:19: error: use of overloaded operator '!=' is ambiguous (with operand types 'pybind11::detail::values_and_holders::iterator' and 'pybind11::detail::values_and_holders::iterator') errors.\r\n\r\n** Update: **  pybind11 version 2.5.0\r\n\r\n## Expected behavior\r\n\r\nThe code compiles like is does with previous c++-standards.  \r\n\r\n## Reproducible example code\r\n\r\nclang++ -std=c++20 -I<pybind11include> -I<pythoninclude> -c main.cxx\r\n\r\nThe main.cxx just is:\r\n#include <pybind11/pybind11.h>\r\n\r\n[main.cxx.zip](https://github.com/pybind/pybind11/files/4487609/main.cxx.zip)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2168", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2168/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2168/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2168/events", "html_url": "https://github.com/pybind/pybind11/issues/2168", "id": 600776725, "node_id": "MDU6SXNzdWU2MDA3NzY3MjU=", "number": 2168, "title": "[2.5.0] catch is now called catch2", "user": {"login": "tuxmaster5000", "id": 837503, "node_id": "MDQ6VXNlcjgzNzUwMw==", "avatar_url": "https://avatars0.githubusercontent.com/u/837503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuxmaster5000", "html_url": "https://github.com/tuxmaster5000", "followers_url": "https://api.github.com/users/tuxmaster5000/followers", "following_url": "https://api.github.com/users/tuxmaster5000/following{/other_user}", "gists_url": "https://api.github.com/users/tuxmaster5000/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuxmaster5000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuxmaster5000/subscriptions", "organizations_url": "https://api.github.com/users/tuxmaster5000/orgs", "repos_url": "https://api.github.com/users/tuxmaster5000/repos", "events_url": "https://api.github.com/users/tuxmaster5000/events{/privacy}", "received_events_url": "https://api.github.com/users/tuxmaster5000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-16T06:18:26Z", "updated_at": "2020-07-24T22:25:07Z", "closed_at": "2020-07-24T22:25:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To use the system catch lib for testing, a little patch is needed.\r\n```\r\ndiff -Nuar pybind11-2.5.0.org/tools/FindCatch.cmake pybind11-2.5.0/tools/FindCatch.cmake\r\n--- pybind11-2.5.0.org/tools/FindCatch.cmake\t2020-04-16 07:33:50.871360486 +0200\r\n+++ pybind11-2.5.0/tools/FindCatch.cmake\t2020-04-16 08:14:30.524482052 +0200\r\n@@ -38,7 +38,7 @@\r\n endfunction()\r\n \r\n # Look for catch locally\r\n-find_path(CATCH_INCLUDE_DIR NAMES catch.hpp PATH_SUFFIXES catch)\r\n+find_path(CATCH_INCLUDE_DIR NAMES catch.hpp PATH_SUFFIXES catch2)\r\n if(CATCH_INCLUDE_DIR)\r\n   _get_catch_version()\r\n endif()\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2163", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2163/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2163/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2163/events", "html_url": "https://github.com/pybind/pybind11/issues/2163", "id": 598647429, "node_id": "MDU6SXNzdWU1OTg2NDc0Mjk=", "number": 2163, "title": "Memory access violation when using threads in Pybind11", "user": {"login": "Coderx7", "id": 5382892, "node_id": "MDQ6VXNlcjUzODI4OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5382892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Coderx7", "html_url": "https://github.com/Coderx7", "followers_url": "https://api.github.com/users/Coderx7/followers", "following_url": "https://api.github.com/users/Coderx7/following{/other_user}", "gists_url": "https://api.github.com/users/Coderx7/gists{/gist_id}", "starred_url": "https://api.github.com/users/Coderx7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Coderx7/subscriptions", "organizations_url": "https://api.github.com/users/Coderx7/orgs", "repos_url": "https://api.github.com/users/Coderx7/repos", "events_url": "https://api.github.com/users/Coderx7/events{/privacy}", "received_events_url": "https://api.github.com/users/Coderx7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-13T03:27:33Z", "updated_at": "2020-04-17T08:04:52Z", "closed_at": "2020-04-15T09:38:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I created a `C++` wrapper to access my `Python` modules. everything is working until I try to use threads in my application.  \r\nOn my `Python` module there is a method which reads from a webcam (so its uses an infinite loop) and I send callbacks from `C++`  to get the image and other needed information from it.  \r\nSince we have a blocking method here, I decided to use threads.    \r\nThe threading on `Python` part seems not to be working on the `C++` side that is if I call the async counter part of the `webcam_feed` loop, none of my callbacks are actually executed (on python part the routines are all executed however, it seems it doesn't reach to C++ section somehow. I don't get any feedback in C++ side, however, on Python part, those routines responsible for executing the callbacks save the info to the disk so I know for sure they are executed).       \r\nI asked a separate question for it [here][1].         \r\nTherefore I decided to use the threading inside C++ client. However, whenever I execute the code (given below), I get an access violation whenever I want to use any methods after the thread is started.\r\nHere are the sample callbacks I have for now:  \r\n```cpp\r\n\r\nvoid default_callback(bool status, std::string id, py::array_t<uint8_t>& img)\r\n{\r\n\tauto rows = img.shape(0);\r\n\tauto cols = img.shape(1);\r\n\tauto type = CV_8UC3;\r\n\t\r\n\tcv::Mat img1(rows, cols, type, img.mutable_data());\r\n\r\n\tcv::imshow(\"from callback\", img1);\r\n\tcv::waitKey(1);\r\n\tauto timenow = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\r\n\tstd::cout << \"\\narg1: \" << status << \" arg2: \" << id << \" arg3: \" << typeid(img).name() << \" \" << ctime(&timenow) << std::endl;\r\n}\r\n\r\nvoid default_c_callback_temporary(bool status, char* message)\r\n{\r\n\tstd::cout << \"status is: \" << status << \" id/name: \" << message << \" ptr:\" << \"\" << std::endl;\r\n\tstd::ofstream myfile;\r\n\tmyfile.open(\"example.txt\");\r\n\tmyfile << \"Writing this to a file: \" << status << message << std::endl;\r\n\tmyfile.close();\r\n}\r\n```\r\nAnd this is the actual test\r\n```cpp\r\nvoid thread_test_start(Core* core)\r\n{\r\n\ttry\r\n\t{\r\n\t\tcore->SetCpuAffinity(2);\r\n\t\tcore->AddCallback(default_callback);\r\n\t\tcore->AddCallback_C_tmp(default_c_callback_temporary);\r\n        //set true to run the async version (implemented in python)\r\n\t\tcore->Start(false);\r\n\t}\r\n\tcatch (const std::exception& ex)\r\n\t{\r\n\t\tstd::cout << ex.what() << std::endl;\r\n\t}\r\n}\r\n\r\n\r\nint main()\r\n{\r\n\tCore* core = new Core(false);\r\n\tstd::thread t(thread_test_start, core);\r\n\t\r\n\tpy::print(core->GetCallbacks());\r\n\tstd::cout << \"\\nGet C Callbacks:\\n\";\r\n\tpy::print(core->GetCallbacks_C_tmp());\r\n\t\r\n\tstd::cout << \"\\nEverything done. press Enter to Exit\";\r\n\tt.join();\r\n\tstd::getchar();\r\n\treturn 0;\r\n}\r\n```\r\nThe call to `core->GetCallbacks()` causes the memory access violation:\r\n\r\n    Exception thrown at 0x000000006FCC6D80 (python36.dll) in TestDLL.exe: 0xC0000005: Access violation reading location 0x0000000000000010.\r\nAnd here is a snapshot showing the access violation error inside VS2019:  \r\n[![enter image description here][2]][2]\r\n\r\nDoing something like this is also the same :\r\n```cpp\r\n\r\nvoid thread_test_start2()\r\n{\r\n\ttry\r\n\t{\r\n\t\tCore* core = new Core(false);\r\n\t\tcore->SetCpuAffinity(2);\r\n\t\tcore->AddCallback(default_callback);\r\n\t\tcore->AddCallback_C_tmp(default_c_callback_temporary);\r\n\r\n\t\tstd::thread t(&Core::Start, core, false);\r\n\t\tpy::print(core->GetCallbacks());\r\n\t\tstd::cout << \"\\nGet C Callbacks:\\n\";\r\n\t\tpy::print(core->GetCallbacks_C_tmp());\r\n\t\tt.join();\r\n\t}\r\n\tcatch (const std::exception& ex)\r\n\t{\r\n\t\tstd::cout << ex.what() << std::endl;\r\n\t}\r\n}\r\n```\r\nresults in :  \r\n\r\n    Exception thrown at 0x000000006FCC0CDF (python36.dll) in TestDLL.exe: 0xC0000005: Access violation writing location 0x0000000000000020.\r\n\r\nlike the former one. \r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/61168438/is-it-possible-from-another-lanuage-to-call-a-method-in-python-that-is-executed\r\n  [2]: https://i.stack.imgur.com/645KG.png\r\n\r\n## Issue description \r\n\r\nwhen basic threading is used in a pybind11 project, it crashes due to memory access violation.\r\n\r\n## Reproducible example code\r\n\r\nHere is a sample visual studio project to re-create this issue : https://workupload.com/file/6LmfRtbztHK\r\n\r\nOpenCV related codes are commented out, if you have them, you can enable them in the project. Although they are not needed here, you should get the exception regardless. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2162", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2162/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2162/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2162/events", "html_url": "https://github.com/pybind/pybind11/issues/2162", "id": 598183836, "node_id": "MDU6SXNzdWU1OTgxODM4MzY=", "number": 2162, "title": "How to expose pybind11::object in C?", "user": {"login": "Coderx7", "id": 5382892, "node_id": "MDQ6VXNlcjUzODI4OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5382892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Coderx7", "html_url": "https://github.com/Coderx7", "followers_url": "https://api.github.com/users/Coderx7/followers", "following_url": "https://api.github.com/users/Coderx7/following{/other_user}", "gists_url": "https://api.github.com/users/Coderx7/gists{/gist_id}", "starred_url": "https://api.github.com/users/Coderx7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Coderx7/subscriptions", "organizations_url": "https://api.github.com/users/Coderx7/orgs", "repos_url": "https://api.github.com/users/Coderx7/repos", "events_url": "https://api.github.com/users/Coderx7/events{/privacy}", "received_events_url": "https://api.github.com/users/Coderx7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-04-11T03:56:09Z", "updated_at": "2020-04-15T05:33:55Z", "closed_at": "2020-04-15T05:33:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Issue description\r\nThis is not a pybind11 issue, however, I'm stuck because I dont know how to go about this using pybind's way of doing things. \r\nBasically I have a function in Python that accepts callbacks, and reurns an opencv image. \r\nI can create and send callbacks from C++ as well, using `py::object` directly or use `py::array_t` and it works well. \r\n```cpp\r\nvoid default_callback(bool status, std::string id, py::array_t<uint8_t>& img)\r\n{\r\n\tauto rows = img.shape(0);\r\n\tauto cols = img.shape(1);\r\n\tauto type = CV_8UC3;\r\n\tcv::Mat img1(rows, cols, type, img.mutable_data());\r\n\r\n\tcv::imshow(\"from callback\", img1);\r\n\tauto timenow = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\r\n\tstd::cout << \"\\narg1: \" << status << \" arg2: \" << id << \" arg3: \" << typeid(img).name() << \" \" << ctime(&timenow) << std::endl;\r\n}\r\n```\r\n\r\n\r\nHowever, I now decided to expose this in `C` so I can be able to call my dll from other languages such as C#, etc. \r\nI tried to use `void*`, \r\n```cpp\r\nvoid default_callback(bool status, char* id, void* img)\r\n{\r\n\t//cv::Mat img1(rows, cols, type, img.mutable_data());\r\n\t// cv::imshow(\"from callback\", img1);\r\n\tauto timenow = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\r\n\tstd::cout << \"\\narg1: \" << status << \" arg2: \" << id << \" arg3: \" << typeid(img).name() << \" \" << ctime(&timenow) << std::endl;\r\n}\r\n```\r\nbut on python part it results in an exception like this : \r\n```Traceback (most recent call last):\r\n  File \"C:\\Users\\Master\\Anaconda3\\Lib\\site-packages\\SNR\\utils.py\", line 257, in start\r\n    self._main_loop()\r\n  File \"C:\\Users\\Master\\Anaconda3\\Lib\\site-packages\\SNR\\utils.py\", line 301, in _main_loop\r\n    self._execute_callbacks(is_valid, name, frame)\r\n  File \"C:\\Users\\Master\\Anaconda3\\Lib\\site-packages\\SNR\\utils.py\", line 142, in _execute_callbacks\r\n    callback(*args)\r\nTypeError: (): incompatible function arguments. The following argument types are supported:\r\n    1. (arg0: bool, arg1: str, arg2: capsule) -> None\r\n\r\nInvoked with: True, '5', array([[[193, 217, 241],\r\n        [193, 217, 241],\r\n        [192, 216, 239],\r\n        ...,\r\n        [152, 154, 181],\r\n        [153, 156, 182],\r\n        [158, 160, 187]],\r\n\r\n       [[193, 217, 241],\r\n        [193, 217, 241],\r\n        [192, 216, 239],\r\n        ...,\r\n        [149, 152, 178],\r\n        [151, 153, 180],\r\n        [153, 156, 182]],\r\n\r\n       [[196, 215, 241],\r\n        [196, 215, 241],\r\n        [195, 214, 239],\r\n        ...,\r\n        [145, 146, 173],\r\n        [148, 148, 175],\r\n        [149, 149, 176]],\r\n\r\n       ...,\r\n\r\n       [[137, 139, 154],\r\n        [120, 122, 137],\r\n        [122, 117, 135],\r\n        ...,\r\n        [100, 109, 142],\r\n        [100, 109, 142],\r\n        [100, 109, 142]],\r\n\r\n       [[136, 145, 158],\r\n        [118, 128, 140],\r\n        [115, 115, 131],\r\n        ...,\r\n        [ 99, 108, 141],\r\n        [ 99, 110, 142],\r\n        [ 99, 110, 142]],\r\n\r\n       [[133, 143, 155],\r\n        [123, 133, 145],\r\n        [115, 115, 131],\r\n        ...,\r\n        [ 98, 106, 140],\r\n        [ 99, 110, 142],\r\n        [ 99, 110, 142]]], dtype=uint8)\r\n\r\n```\r\n\r\nI assumed since we are dealing with `PyObject `at the very least, void* should work! and I should be able to get the pointer and cast it and thus carry on what I am supposed to. but it seems wrong. \r\n\r\nWould greatly appreciate any kind of hint/solutions in this regard \r\n\r\n\r\n## Reproducible example code\r\nHere is a Visual Studio project file to reproduce the issue .\r\n[github_pybind Minimal_test.zip](https://github.com/pybind/pybind11/files/4468117/github_pybind.Minimal_test.zip)\r\n\r\nWhen the app crashes, a log file (which is also accessible from solution explorer) shows what happened in the python part. \r\nI commented out all opencv related codes, if you have it on your system you can enable them as well, but regardless of them, you can reproduce the issue. \r\n\r\n## Source files : \r\nHere are the files for those who dont want to download the vs project file.\r\nGitHub wouldn't allow me to upload the actual source files, so I added a `.txt` extension after all of them.\r\n\r\n[Core.h.txt](https://github.com/pybind/pybind11/files/4469967/Core.h.txt)\r\n[Core.cpp.txt](https://github.com/pybind/pybind11/files/4469966/Core.cpp.txt)\r\n[service_utils.py.txt](https://github.com/pybind/pybind11/files/4469968/service_utils.py.txt)\r\n[test.cpp.txt](https://github.com/pybind/pybind11/files/4469969/test.cpp.txt)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2161", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2161/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2161/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2161/events", "html_url": "https://github.com/pybind/pybind11/issues/2161", "id": 597998647, "node_id": "MDU6SXNzdWU1OTc5OTg2NDc=", "number": 2161, "title": "Accessing pointed values from C++ friend class", "user": {"login": "Lip651", "id": 43471995, "node_id": "MDQ6VXNlcjQzNDcxOTk1", "avatar_url": "https://avatars0.githubusercontent.com/u/43471995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lip651", "html_url": "https://github.com/Lip651", "followers_url": "https://api.github.com/users/Lip651/followers", "following_url": "https://api.github.com/users/Lip651/following{/other_user}", "gists_url": "https://api.github.com/users/Lip651/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lip651/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lip651/subscriptions", "organizations_url": "https://api.github.com/users/Lip651/orgs", "repos_url": "https://api.github.com/users/Lip651/repos", "events_url": "https://api.github.com/users/Lip651/events{/privacy}", "received_events_url": "https://api.github.com/users/Lip651/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-10T17:20:37Z", "updated_at": "2020-04-10T17:44:41Z", "closed_at": "2020-04-10T17:44:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to handle pointers within friend classes in PyBind11. The problem is that I am not able to retrieve the pointed values of a friend class object in Python. The toy example works, but the values are totally different than what they should be. I thought initially that it would be because of the friend class, but according to my readings and understanding I don't think it is. I also wasn't able to find anything in the documentation\r\n\r\n```\r\n#include <pybind11/pybind11.h>\r\n#include <iostream>\r\n#include <iomanip>\r\n#include <fstream>\r\n#include <sstream>\r\n#include <list>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <string>\r\n#include <cstring>\r\n\r\nnamespace py = pybind11;\r\n\r\nclass Owner;\r\nclass Pet {\r\n\r\n    friend Owner;\r\n\r\n    public:\r\n      std::string name;\r\n      int a;\r\n      Pet(const std::string name_, int b){\r\n          name = name_;\r\n          a = b;\r\n      }\r\n\r\n      Pet(const std::string name_){\r\n        name = name_;\r\n        a = 23;\r\n      }\r\n\r\n    int repr(){\r\n      return a;\r\n    }\r\n};\r\n\r\nclass Owner {\r\n\r\n      public:\r\n        int owner_id;\r\n        Pet* their_pet;\r\n\r\n      Owner(int owner_id_, Pet *their_pet_){\r\n        owner_id = owner_id_;\r\n        their_pet = their_pet_;\r\n      }\r\n};\r\n\r\n\r\nint retrieve(py::handle the_owner){\r\n  Owner an_owner = the_owner.cast<Owner>();\r\n  Pet* the_retrieved_pet = an_owner.their_pet;\r\n  int the_age = the_retrieved_pet->repr();\r\n  std::cout << the_age << std::endl;\r\n  return the_age;\r\n}\r\n\r\npy::object create_neat(){\r\n\r\n  Pet dog = Pet(\"rufus\", 2);\r\n  Pet* ptr_dog = &dog;\r\n  Owner owner_1 = Owner(1, ptr_dog);\r\n  py::object py_owner = py::cast(owner_1);\r\n  return py_owner;\r\n\r\n}\r\n\r\nPYBIND11_MODULE(example, m){\r\n  py::class_<Pet>(m, \"Pet\")\r\n      .def(py::init<const std::string>())\r\n      .def(\"repr\", &Pet::repr);\r\n\r\n  py::class_<Owner>(m, \"Owner\");\r\n\r\n  m.def(\"retrieve\", &retrieve, \"return the python object to its class\");\r\n\r\n  m.def(\"create_neat\", &create_neat, \"return the python object to its class\");\r\n}\r\n```\r\n\r\nCompilable with:\r\n\r\n`g++ -O3 -Wall -fopenmp -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` example.cpp -o example.so`\r\nIn Python\r\n\r\n```\r\nimport example\r\n\r\na = example.create_neat()\r\nb = example.retrieve(a)\r\n```\r\nb should be 2, and instead, it is a totally different value. Any help would be more than appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2159", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2159/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2159/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2159/events", "html_url": "https://github.com/pybind/pybind11/issues/2159", "id": 597552939, "node_id": "MDU6SXNzdWU1OTc1NTI5Mzk=", "number": 2159, "title": "ci: Travis Job for Python 3.8 on Linux does not actually run Python 3.8?", "user": {"login": "EricCousineau-TRI", "id": 26719449, "node_id": "MDQ6VXNlcjI2NzE5NDQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/26719449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricCousineau-TRI", "html_url": "https://github.com/EricCousineau-TRI", "followers_url": "https://api.github.com/users/EricCousineau-TRI/followers", "following_url": "https://api.github.com/users/EricCousineau-TRI/following{/other_user}", "gists_url": "https://api.github.com/users/EricCousineau-TRI/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricCousineau-TRI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricCousineau-TRI/subscriptions", "organizations_url": "https://api.github.com/users/EricCousineau-TRI/orgs", "repos_url": "https://api.github.com/users/EricCousineau-TRI/repos", "events_url": "https://api.github.com/users/EricCousineau-TRI/events{/privacy}", "received_events_url": "https://api.github.com/users/EricCousineau-TRI/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-04-09T21:05:58Z", "updated_at": "2020-07-31T00:45:48Z", "closed_at": "2020-07-31T00:45:47Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "## Issue description\r\n\r\nIf you look at any job `Python 3.8, c++17, gcc 7 (w/o numpy/scipy)` in Travis CI builds, they don't seem to actually be using Python 3.8. (Not sure if this is due to a patch I submitted...)\r\n\r\nCame across this is in [our fork](https://github.com/RobotLocomotion/pybind11), which effectively uses the same CI scripts here.\r\n\r\n## Reproducible example code\r\n\r\nSee this build:\r\n\r\nhttps://travis-ci.org/github/pybind/pybind11/jobs/640390164#L467\r\n> -- Found PythonInterp: /opt/pyenv/shims/python3 (found version \"3.6.7\") \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2157", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2157/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2157/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2157/events", "html_url": "https://github.com/pybind/pybind11/issues/2157", "id": 596989354, "node_id": "MDU6SXNzdWU1OTY5ODkzNTQ=", "number": 2157, "title": "Split class implementation code + Pybind11", "user": {"login": "nyckmaia", "id": 4555404, "node_id": "MDQ6VXNlcjQ1NTU0MDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/4555404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nyckmaia", "html_url": "https://github.com/nyckmaia", "followers_url": "https://api.github.com/users/nyckmaia/followers", "following_url": "https://api.github.com/users/nyckmaia/following{/other_user}", "gists_url": "https://api.github.com/users/nyckmaia/gists{/gist_id}", "starred_url": "https://api.github.com/users/nyckmaia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nyckmaia/subscriptions", "organizations_url": "https://api.github.com/users/nyckmaia/orgs", "repos_url": "https://api.github.com/users/nyckmaia/repos", "events_url": "https://api.github.com/users/nyckmaia/events{/privacy}", "received_events_url": "https://api.github.com/users/nyckmaia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-09T03:12:23Z", "updated_at": "2020-04-09T17:00:34Z", "closed_at": "2020-04-09T17:00:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a working Pybind11 module called `maialib`.\r\nInside this module I have C++ class called `MusicXML`.\r\nThis class is composed by:\r\n - `musicxml.h`\r\n- `musicxml.cpp` \r\n\r\nUntil now, all MusicXML class methods implementations was written inside the `musicxml.cpp`and **it works good!**\r\n\r\nNow, I would like to **split** some `MusicXML` methods into a **different** `*.cpp` files to get a better source-code organization.\r\n\r\nTo to that, I created a new `*.cpp` file called `orq_functions.cpp` and put only one `MusicXML` method inside of it called `my_method()` just to test.\r\n\r\nBut when I tried to compile **I got this linker error below:**\r\n\r\n```\r\nScanning dependencies of target maialib\r\n[ 16%] Building CXX object CMakeFiles/maialib.dir/src/maialib.cpp.o\r\n[ 33%] Building CXX object CMakeFiles/maialib.dir/src/pugixml.cpp.o\r\n[ 50%] Building CXX object CMakeFiles/maialib.dir/src/functions.cpp.o\r\n[ 66%] Building CXX object CMakeFiles/maialib.dir/src/orq_functions.cpp.o\r\n[ 83%] Building CXX object CMakeFiles/maialib.dir/src/musicxml.cpp.o\r\n[100%] Linking CXX shared module maialib.cpython-37m-darwin.so\r\nduplicate symbol 'MusicXMLClass(pybind11::module&)' in:\r\n    CMakeFiles/maialib.dir/src/orq_functions.cpp.o\r\n    CMakeFiles/maialib.dir/src/musicxml.cpp.o\r\nld: 1 duplicate symbol for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[2]: *** [maialib.cpython-37m-darwin.so] Error 1\r\nmake[1]: *** [CMakeFiles/maialib.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n```\r\n\r\nI known that **is not** a C++ code or a CMake problem because I can compile this library as a C++ static library with CMake and **I got no errors.**\r\n\r\n**To confirm that,** I just croped back the `my_method()` implementation to the original `musicxml.cpp` file and **all works good again!**\r\n\r\n**So, how can I use Pybind11 in this case?**\r\n\r\nHeader\r\n-------\r\nHere is the `MusicXML` class inside the `musicxml.h`:\r\n```\r\n#ifndef MUSICXML_H\r\n#define MUSICXML_H\r\n\r\nclass MusicXML\r\n{\r\nprivate:\r\n    // private members...\r\n\r\npublic:\r\n    MusicXML(const std::string fileName);\r\n\r\n    // Another methods declarations\r\n\r\n    const nlohmann::json my_method(nlohmann::json& config) const;\r\n};\r\n\r\n// ===== PYBIND11 ===== //\r\n\r\nvoid MusicXMLClass(py::module &m) {\r\n\r\n    m.doc() = \"MusicXML class binding\";\r\n\r\n    // bindings to MusicXML class\r\n    py::class_<MusicXML> cls(m, \"MusicXML\");\r\n\r\n    cls.def(\"my_method\", \r\n        [](MusicXML &self, py::object& pyConfig)\r\n        {\r\n            nlohmann::json config = py::object(pyConfig);\r\n            return py::object(self.my_method(config));\r\n        });\r\n}\r\n#endif\r\n```\r\nImplementation file 1\r\n------------------\r\nHere is the `musicxml.cpp`\r\n```\r\n#include \"musicxml.h\"\r\n\r\nMusicXML::MusicXML(const std::string fileName)\r\n{\r\n    // Constructor implementation\r\n}\r\n\r\n// Another MusicXML methods implementations\r\n```\r\nImplementation file 2\r\n----------------------\r\nHere is the `my_method()` implementation inside the new `orq_functions.cpp` file:\r\n```\r\n#include \"musicxml.h\"\r\n\r\nconst nlohmann::json MusicXML::my_method(nlohmann::json& config) const\r\n{\r\n    // Here is the code...\r\n}\r\n```\r\nCMake script\r\n--------------\r\nHere is just the Pybind11 part of my `CMakeLists.txt` file\r\n```\r\nfind_package(PythonLibs)\r\ninclude_directories(${PYTHON_INCLUDE_DIRS})\r\n\r\nadd_subdirectory(pybind11)\r\n\r\npybind11_add_module(maialib src/maialib.cpp src/orq_functions.cpp src/musicxml.cpp)\r\n\r\ntarget_include_directories(maialib PUBLIC include)\r\n```\r\n**Any ideas? Could you help me please?**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2155", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2155/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2155/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2155/events", "html_url": "https://github.com/pybind/pybind11/issues/2155", "id": 596662199, "node_id": "MDU6SXNzdWU1OTY2NjIxOTk=", "number": 2155, "title": "> Please take a look at:", "user": {"login": "turkus", "id": 1996784, "node_id": "MDQ6VXNlcjE5OTY3ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1996784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/turkus", "html_url": "https://github.com/turkus", "followers_url": "https://api.github.com/users/turkus/followers", "following_url": "https://api.github.com/users/turkus/following{/other_user}", "gists_url": "https://api.github.com/users/turkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/turkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/turkus/subscriptions", "organizations_url": "https://api.github.com/users/turkus/orgs", "repos_url": "https://api.github.com/users/turkus/repos", "events_url": "https://api.github.com/users/turkus/events{/privacy}", "received_events_url": "https://api.github.com/users/turkus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-08T15:23:40Z", "updated_at": "2020-04-08T15:24:02Z", "closed_at": "2020-04-08T15:24:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "> Please take a look at:\r\n> https://stackoverflow.com/a/61048783/6734406\r\n\r\nIs it somewhere documented??\r\n\r\n_Originally posted by @akozyreva in https://github.com/pybind/pybind11/issues/1670#issuecomment-610946007_\r\n\r\nYes, of course, there is a link under the phrase changelog in the answer on stackoverflow.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pybind/pybind11/issues/2153", "repository_url": "https://api.github.com/repos/pybind/pybind11", "labels_url": "https://api.github.com/repos/pybind/pybind11/issues/2153/labels{/name}", "comments_url": "https://api.github.com/repos/pybind/pybind11/issues/2153/comments", "events_url": "https://api.github.com/repos/pybind/pybind11/issues/2153/events", "html_url": "https://github.com/pybind/pybind11/issues/2153", "id": 595445358, "node_id": "MDU6SXNzdWU1OTU0NDUzNTg=", "number": 2153, "title": "Embedded python 3.8 interpreter crashes after one evaluation", "user": {"login": "prudhomm", "id": 151693, "node_id": "MDQ6VXNlcjE1MTY5Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/151693?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prudhomm", "html_url": "https://github.com/prudhomm", "followers_url": "https://api.github.com/users/prudhomm/followers", "following_url": "https://api.github.com/users/prudhomm/following{/other_user}", "gists_url": "https://api.github.com/users/prudhomm/gists{/gist_id}", "starred_url": "https://api.github.com/users/prudhomm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prudhomm/subscriptions", "organizations_url": "https://api.github.com/users/prudhomm/orgs", "repos_url": "https://api.github.com/users/prudhomm/repos", "events_url": "https://api.github.com/users/prudhomm/events{/privacy}", "received_events_url": "https://api.github.com/users/prudhomm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-06T21:38:06Z", "updated_at": "2020-04-07T07:31:15Z", "closed_at": "2020-04-07T07:30:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "multiple(well 2) embedded python interpreter calls crash with pytbind11+python 3.8. \r\nThe first works just fine, the second crashes.\r\n\r\nhere is a reproducer:\r\n\r\n```c++\r\n#include <pybind11/embed.h>\r\n#include <sstream>\r\n\r\nnamespace py = pybind11;\r\nusing namespace py::literals;\r\n\r\nint main(int argc, char** argv ) \r\n{\r\n    for( int i = 0; i < 2; ++i )\r\n    {\r\n        py::scoped_interpreter guard{};\r\n\r\n        auto locals = py::dict(\"f\"_a=\"[x**2,y**2,z**2]\");\r\n        std::ostringstream ostr;\r\n        ostr <<  \"from sympy import *\\n\"\r\n             << \"x,y,z = symbols('x y z');\"\r\n             << \"f=x**2;\\n\"\r\n             << \"print('f=', integrate(f,(x,0,1)))\\n\";\r\n        py::exec(ostr.str().c_str(), py::globals(), locals);\r\n    }\r\n}\r\n```\r\n`py:eval` and `py::eval_file` fail similarly. \r\nIt used to work fine with the previous 3.x versions.\r\n\r\nI used an 'old' version of pybind11 as well as HEAD to check the crash.\r\nam I missing something?\r\n\r\nhere is what the debugger says:\r\n<img width=\"1214\" alt=\"Screenshot 2020-04-06 23 18 23\" src=\"https://user-images.githubusercontent.com/151693/78607560-9a0d2380-785f-11ea-9041-7c089db58279.png\">\r\n", "performed_via_github_app": null, "score": 1.0}]}