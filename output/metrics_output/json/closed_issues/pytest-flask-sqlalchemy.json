{"total_count": 5, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/29", "repository_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy", "labels_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/29/comments", "events_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/29/events", "html_url": "https://github.com/jeancochrane/pytest-flask-sqlalchemy/issues/29", "id": 633739067, "node_id": "MDU6SXNzdWU2MzM3MzkwNjc=", "number": 29, "title": "[test_client] Is there a way to use test_client along with db_session fixture? ", "user": {"login": "imanebosch", "id": 22483212, "node_id": "MDQ6VXNlcjIyNDgzMjEy", "avatar_url": "https://avatars3.githubusercontent.com/u/22483212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imanebosch", "html_url": "https://github.com/imanebosch", "followers_url": "https://api.github.com/users/imanebosch/followers", "following_url": "https://api.github.com/users/imanebosch/following{/other_user}", "gists_url": "https://api.github.com/users/imanebosch/gists{/gist_id}", "starred_url": "https://api.github.com/users/imanebosch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imanebosch/subscriptions", "organizations_url": "https://api.github.com/users/imanebosch/orgs", "repos_url": "https://api.github.com/users/imanebosch/repos", "events_url": "https://api.github.com/users/imanebosch/events{/privacy}", "received_events_url": "https://api.github.com/users/imanebosch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-07T20:33:28Z", "updated_at": "2020-06-09T10:56:55Z", "closed_at": "2020-06-09T10:56:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to test a POST view using app.test_client() but after the new record is created in the database and asserts pass correctly, transactions are not rolled back and the sessionnever terminates. It's my first time using flask + pytest. May be I missed something.\r\n\r\nThese are my fixtures:\r\n\r\n```\r\n@pytest.fixture(scope=\"session\")\r\ndef app():\r\n    app = create_app(test=True)\r\n\r\n    # setUp\r\n    ctx = app.app_context()\r\n    ctx.push()\r\n\r\n    yield app\r\n\r\n    # tearDown\r\n    ctx.pop()\r\n```\r\n\r\n```\r\n@pytest.fixture(scope=\"session\")\r\ndef _db(app):\r\n\r\n    db.app = app\r\n\r\n    Migrate(app, db)\r\n    upgrade(revision=\"head\")\r\n    load_fixtures()\r\n\r\n    yield db\r\n\r\n    downgrade(revision=\"base\")\r\n```\r\n\r\n```\r\n@pytest.fixture\r\ndef client(app):\r\n    with app.test_client() as client:\r\n        yield client\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/14", "repository_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy", "labels_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/14/comments", "events_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/14/events", "html_url": "https://github.com/jeancochrane/pytest-flask-sqlalchemy/issues/14", "id": 417363167, "node_id": "MDU6SXNzdWU0MTczNjMxNjc=", "number": 14, "title": "Investigate errors in SQLAlchemy 1.3", "user": {"login": "jeancochrane", "id": 14170650, "node_id": "MDQ6VXNlcjE0MTcwNjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/14170650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeancochrane", "html_url": "https://github.com/jeancochrane", "followers_url": "https://api.github.com/users/jeancochrane/followers", "following_url": "https://api.github.com/users/jeancochrane/following{/other_user}", "gists_url": "https://api.github.com/users/jeancochrane/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeancochrane/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeancochrane/subscriptions", "organizations_url": "https://api.github.com/users/jeancochrane/orgs", "repos_url": "https://api.github.com/users/jeancochrane/repos", "events_url": "https://api.github.com/users/jeancochrane/events{/privacy}", "received_events_url": "https://api.github.com/users/jeancochrane/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 941319767, "node_id": "MDU6TGFiZWw5NDEzMTk3Njc=", "url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-03-05T15:43:06Z", "updated_at": "2019-04-04T05:57:32Z", "closed_at": "2019-04-04T00:52:07Z", "author_association": "OWNER", "active_lock_reason": null, "body": "After bringing in #6, we've had reports of unreliability with some tests:\r\n\r\n> @charness thank you for the fix, I couldn't trace this down for a long time!\r\n>\r\n> However, it introduced some flakiness in our test suite for several tests that do a commit and then check if the attribute changes. Have you had anything like it?\r\n>\r\n> The code is similar to this:\r\n\r\n```python\r\ndef test_should_confirm_account(db_session, app_client):\r\n    user = UserFactory()\r\n    token = user.generate_token_and_save_timestamp()\r\n\r\n    db_session.add(user)\r\n    # First commit or flush in some cases\r\n    db_session.commit()\r\n\r\n    # One more commit here:\r\n    response = app_client.post(\"/account/confirm\", json={\"token\": token})\r\n    assert response.status_code == 200\r\n\r\n    # Fails with:\r\n    # Instance <User at 0x108bf1d30> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3 \r\n    assert user.is_confirmed()\r\n```\r\n\r\nCheck to see if this example can be reproduced, and if so, investigate the root cause of the problem.\r\n\r\n**Edit 3/12**: This appears to be a problem with SQLAlchemy 1.3. Pinning your SQLAlchemy version to `<1.3` should fix any errors in the meantime while we figure out what exactly is going on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/7", "repository_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy", "labels_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/7/comments", "events_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/7/events", "html_url": "https://github.com/jeancochrane/pytest-flask-sqlalchemy/issues/7", "id": 385192936, "node_id": "MDU6SXNzdWUzODUxOTI5MzY=", "number": 7, "title": "Module scoped sessions", "user": {"login": "madsmtm", "id": 10577181, "node_id": "MDQ6VXNlcjEwNTc3MTgx", "avatar_url": "https://avatars2.githubusercontent.com/u/10577181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madsmtm", "html_url": "https://github.com/madsmtm", "followers_url": "https://api.github.com/users/madsmtm/followers", "following_url": "https://api.github.com/users/madsmtm/following{/other_user}", "gists_url": "https://api.github.com/users/madsmtm/gists{/gist_id}", "starred_url": "https://api.github.com/users/madsmtm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madsmtm/subscriptions", "organizations_url": "https://api.github.com/users/madsmtm/orgs", "repos_url": "https://api.github.com/users/madsmtm/repos", "events_url": "https://api.github.com/users/madsmtm/events{/privacy}", "received_events_url": "https://api.github.com/users/madsmtm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 941319773, "node_id": "MDU6TGFiZWw5NDEzMTk3NzM=", "url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-28T10:11:53Z", "updated_at": "2019-04-03T15:30:48Z", "closed_at": "2018-11-29T08:03:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for this awesome module!\r\n\r\nI was wondering if it is possible to make a session, which would persist changes only inside its fixture scope. So if I make changes to the `module` scoped session, they'll persist inside that module. Something that could be used like this:\r\n```py\r\n# File test_book.py\r\n@fixture(scope=\"module\", autouse=True)\r\ndef book(module_db_session):\r\n    book = Book(name=\"ABC\")\r\n    module_db_session.add(book)\r\n    module_db_session.commit()\r\n    return book\r\n\r\ndef test_book(db_session):\r\n    # Don't use the fixture model, since it'll be bound to the `module_db_session`\r\n    book = db_session.query(Book).get(1)\r\n    book.name = \"DEF\"\r\n    db_session.add(book)\r\n    db_session.commit()\r\n\r\ndef test_book_doesnt_persist(book):\r\n    assert book.name == \"ABC\"\r\n\r\n# File test_other.py\r\n@mark.xfail(reason=\"The book won't be available here!\")\r\ndef test_other(db_session):\r\n    db_session.query(Book).get(1)\r\n```\r\nThe reasoning behind this is mostly speed, since it's costly to create new instances every time you want to use them in a test.\r\n\r\nIs something like this at all possible, or will I have to use `setup_module` and `teardown_module`, and manually make sure that no changes are persisted?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/5", "repository_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy", "labels_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/5/comments", "events_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/5/events", "html_url": "https://github.com/jeancochrane/pytest-flask-sqlalchemy/issues/5", "id": 348495326, "node_id": "MDU6SXNzdWUzNDg0OTUzMjY=", "number": 5, "title": "Instance XXX has been deleted.  Use the make_transient() function to send this object back to the transient state.", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 941319767, "node_id": "MDU6TGFiZWw5NDEzMTk3Njc=", "url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2018-08-07T21:33:19Z", "updated_at": "2019-11-19T11:35:23Z", "closed_at": "2018-11-08T18:16:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I added `db_session` to a view test that used to pass and it now fails with:\r\n\r\n```\r\n/Users/alex/.pyenv/versions/xxxx/lib/python3.7/site-packages/sqlalchemy/orm/session.py:2106: in _save_or_update_impl\r\n    self._update_impl(state)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <sqlalchemy.orm.session.SignallingSession object at 0x1105460b8>\r\nstate = <sqlalchemy.orm.state.InstanceState object at 0x1105e27f0>\r\nrevert_deletion = False\r\n\r\n    def _update_impl(self, state, revert_deletion=False):\r\n        if state.key is None:\r\n            raise sa_exc.InvalidRequestError(\r\n                \"Instance '%s' is not persisted\" %\r\n                state_str(state))\r\n    \r\n        if state._deleted:\r\n            if revert_deletion:\r\n                if not state._attached:\r\n                    return\r\n                del state._deleted\r\n            else:\r\n                raise sa_exc.InvalidRequestError(\r\n                    \"Instance '%s' has been deleted.  \"\r\n                    \"Use the make_transient() \"\r\n                    \"function to send this object back \"\r\n                    \"to the transient state.\" %\r\n>                   state_str(state)\r\n                )\r\nE               sqlalchemy.exc.InvalidRequestError: Instance '<YYYY at 0x1105e28d0>' has been deleted.  Use the make_transient() function to send this object back to the transient state.\r\n\r\n/Users/alex/.pyenv/versions/xxxx/lib/python3.7/site-packages/sqlalchemy/orm/session.py:2080: InvalidRequestError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/4", "repository_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy", "labels_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/4/comments", "events_url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/issues/4/events", "html_url": "https://github.com/jeancochrane/pytest-flask-sqlalchemy/issues/4", "id": 348102228, "node_id": "MDU6SXNzdWUzNDgxMDIyMjg=", "number": 4, "title": "db_session needed?", "user": {"login": "cancan101", "id": 51059, "node_id": "MDQ6VXNlcjUxMDU5", "avatar_url": "https://avatars1.githubusercontent.com/u/51059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cancan101", "html_url": "https://github.com/cancan101", "followers_url": "https://api.github.com/users/cancan101/followers", "following_url": "https://api.github.com/users/cancan101/following{/other_user}", "gists_url": "https://api.github.com/users/cancan101/gists{/gist_id}", "starred_url": "https://api.github.com/users/cancan101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cancan101/subscriptions", "organizations_url": "https://api.github.com/users/cancan101/orgs", "repos_url": "https://api.github.com/users/cancan101/repos", "events_url": "https://api.github.com/users/cancan101/events{/privacy}", "received_events_url": "https://api.github.com/users/cancan101/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1018917998, "node_id": "MDU6TGFiZWwxMDE4OTE3OTk4", "url": "https://api.github.com/repos/jeancochrane/pytest-flask-sqlalchemy/labels/documentation", "name": "documentation", "color": "f9d0c4", "default": true, "description": "Information that could be cleared up in docs"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-08-06T22:24:09Z", "updated_at": "2019-02-14T03:28:20Z", "closed_at": "2019-02-14T03:27:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "A usage question / request for clarification in the docs, but does the test need to use the `db_session` fixture, or is there a way to shim all usages of the session throughout the code? That way I can make sure to rollback the transaction anywhere there is an exception.", "performed_via_github_app": null, "score": 1.0}]}