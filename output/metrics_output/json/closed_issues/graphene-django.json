{"total_count": 553, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1018", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1018/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1018/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1018/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/1018", "id": 672111611, "node_id": "MDU6SXNzdWU2NzIxMTE2MTE=", "number": 1018, "title": "graphql.error.base.GraphQLError: Expected value of type \"AuthUserType\" but got: Store.", "user": {"login": "MartinSchere", "id": 61954243, "node_id": "MDQ6VXNlcjYxOTU0MjQz", "avatar_url": "https://avatars0.githubusercontent.com/u/61954243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinSchere", "html_url": "https://github.com/MartinSchere", "followers_url": "https://api.github.com/users/MartinSchere/followers", "following_url": "https://api.github.com/users/MartinSchere/following{/other_user}", "gists_url": "https://api.github.com/users/MartinSchere/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinSchere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinSchere/subscriptions", "organizations_url": "https://api.github.com/users/MartinSchere/orgs", "repos_url": "https://api.github.com/users/MartinSchere/repos", "events_url": "https://api.github.com/users/MartinSchere/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinSchere/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-03T14:20:10Z", "updated_at": "2020-08-05T19:37:38Z", "closed_at": "2020-08-05T19:31:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **What is the current behavior?**\r\nGraphene is raising this error even when the mutation is executed correctly.\r\n\r\nThis is the code for the mutation:\r\n\r\n```\r\nclass CreateStore(graphene.Mutation):\r\n    store = graphene.Field(StoreType)\r\n\r\n    class Arguments:\r\n        username = graphene.String(required=True)\r\n        password = graphene.String(required=True)\r\n        latitude = graphene.Float(required=True)\r\n        longitude = graphene.Float(required=True)\r\n        opening_time = graphene.DateTime(required=True)\r\n        closing_time = graphene.DateTime(required=True)\r\n\r\n    def mutate(self, info, username, password, latitude, longitude, opening_time, closing_time):\r\n        auth_user = get_user_model()(\r\n            username=username,\r\n        )\r\n        auth_user.set_password(password)\r\n        store = Store(user=auth_user, name=username,\r\n                      location=Point(latitude, longitude, srid=4326),\r\n                      opening_time=opening_time, closing_time=closing_time)\r\n\r\n        auth_user.save()\r\n        store.save()\r\n        return CreateStore(store=store)\r\n```\r\nWhen executed, everything registers correctly but an error is being raised.\r\n\r\n* **What is the expected behavior?**\r\nNo errors being raised.\r\n\r\n* **Please tell us about your environment:**\r\n  \r\n  - Version: 2.10.0\r\n  - Platform: Windows\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1006", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1006/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1006/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1006/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/1006", "id": 660688151, "node_id": "MDU6SXNzdWU2NjA2ODgxNTE=", "number": 1006, "title": "How could I to filter the self foreign model field?", "user": {"login": "jiajiafish", "id": 32797796, "node_id": "MDQ6VXNlcjMyNzk3Nzk2", "avatar_url": "https://avatars0.githubusercontent.com/u/32797796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiajiafish", "html_url": "https://github.com/jiajiafish", "followers_url": "https://api.github.com/users/jiajiafish/followers", "following_url": "https://api.github.com/users/jiajiafish/following{/other_user}", "gists_url": "https://api.github.com/users/jiajiafish/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiajiafish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiajiafish/subscriptions", "organizations_url": "https://api.github.com/users/jiajiafish/orgs", "repos_url": "https://api.github.com/users/jiajiafish/repos", "events_url": "https://api.github.com/users/jiajiafish/events{/privacy}", "received_events_url": "https://api.github.com/users/jiajiafish/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458947, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDc=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%E2%9C%A8enhancement", "name": "\u2728enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-19T08:21:11Z", "updated_at": "2020-07-21T13:04:45Z", "closed_at": "2020-07-20T08:15:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "How could I filter on self foreign model \uff1f\r\nhere is mycode,notice my annotation,thanks.\r\n\r\n\r\nmodels.py\r\n```python\r\nclass TitleType(KpsMeta):\r\n    # TODO HardwareType\r\n    # name = models.CharField(max_length=30, null=False, default=\"trainee\")\r\n    category_choices = (\r\n         (\"BRANCH\",\"BRANCH\"),\r\n     (\"SUBFUNCTION\",\"SUBFUNCTION\"),\r\n     (\"CHILDBRANCH\",\"CHILDBRANCH\"),\r\n     (\"POSITION\",\"POSITION\"),\r\n    )\r\n    rank_choices=(('J',\"J\"),('I',\"I\"),('S',\"S\"),('G',\"G\"),('R',\"R\"),('E','E'),('C',\"C\"))\r\n    job_code = models.CharField(max_length=20, null=False, default=\"0000000\")\r\n    entity_name = \"TitleType\"\r\n    name = models.CharField(max_length=50, null=False, default=entity_name + \" unnamed\")\r\n    entity_type = models.CharField(max_length=50, null=False, default=entity_name)\r\n   #  **selfforeign model field**\r\n    parent_type = models.ForeignKey(\"self\", on_delete=models.SET_NULL, null=True, blank=True)\r\n    category = models.CharField(max_length=20, null=True, blank=True,default=\"POSITION\",\r\n                              choices=category_choices)\r\n    planed = models.PositiveSmallIntegerField(default=0)\r\n    rank = models.CharField(max_length=20, null=True, blank=True,default=\"E\", \r\n                              choices=rank_choices)\r\n    class Meta:\r\n        verbose_name = \"TitleType\"\r\n        verbose_name_plural = verbose_name\r\n```\r\n\r\nschema.py\r\n```python\r\ndef recursive_title(title_type):\r\n    title_arr = [title_type]\r\n    count = len(title_type.titletype_set.all())\r\n    if count>0:\r\n        for  i  in title_type.titletype_set.all():\r\n            title_arr += recursive_title(i)\r\n    return title_arr\r\nclass TitleTypeNode(DjangoObjectType):\r\n    original_id = graphene.Int()\r\n   # if I use the TitleTypeNode in TitleTypeNode \uff0cpython said it\u2018s not defined yet\r\n    recursive_titles = CustomDjangoFilterConnectionField(TitleTypeNode,filterset_class=TitleTypeFilter)\r\n    def resolve_original_id(self, info):\r\n        return self.id\r\n    def resolve_recursive_titles(self,info):\r\n        temAllTitle = recursive_title(self)\r\n        return temAllTitle\r\n    class Meta:\r\n        model = TitleType\r\n        interfaces = (relay.Node,)\r\n        connection_class = Connection\r\n\r\nclass TitleTypeFilter(django_filters.FilterSet):\r\n    def filter_id_in(self, qs, name, value):\r\n        return qs.filter(id__in=get_id_list(value))\r\n\r\n    def filter_id_exclude(self, qs, name, value):\r\n        return qs.exclude(id__in=get_id_list(value))\r\n\r\n    class Meta:\r\n        model = TitleType\r\n        fields = {\r\n            \"created_at\": ['gte', 'lte',\"exact\"],\r\n            \"updated_at\": ['gte', 'lte',\"exact\"],\r\n            \"planed\": ['gte', 'lte',\"exact\"],\r\n            \"desc\": [\"exact\", \"icontains\", \"istartswith\",\"contains\"],\r\n            \"name\": [\"exact\", \"icontains\", \"istartswith\", \"contains\"],\r\n            \"category\": [\"exact\", \"icontains\", \"istartswith\", \"contains\"],\r\n            \"rank\": [\"exact\", \"icontains\", \"istartswith\", \"contains\"],\r\n        }\r\n\r\n    order_by = django_filters.OrderingFilter(\r\n        fields=(\r\n            ('created_at', '-created_at'),\r\n            ('updated_at', '-updated_at'),\r\n        )\r\n    )\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1003", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1003/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1003/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/1003/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/1003", "id": 656031039, "node_id": "MDU6SXNzdWU2NTYwMzEwMzk=", "number": 1003, "title": "GraphiQL not working in v2.12.0", "user": {"login": "grebsai", "id": 17954650, "node_id": "MDQ6VXNlcjE3OTU0NjUw", "avatar_url": "https://avatars2.githubusercontent.com/u/17954650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grebsai", "html_url": "https://github.com/grebsai", "followers_url": "https://api.github.com/users/grebsai/followers", "following_url": "https://api.github.com/users/grebsai/following{/other_user}", "gists_url": "https://api.github.com/users/grebsai/gists{/gist_id}", "starred_url": "https://api.github.com/users/grebsai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grebsai/subscriptions", "organizations_url": "https://api.github.com/users/grebsai/orgs", "repos_url": "https://api.github.com/users/grebsai/repos", "events_url": "https://api.github.com/users/grebsai/events{/privacy}", "received_events_url": "https://api.github.com/users/grebsai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-07-13T17:50:20Z", "updated_at": "2020-07-13T21:09:52Z", "closed_at": "2020-07-13T21:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **What is the current behavior?**\r\n  \r\nIn version v2.12.0 the GraphiQL playground no longer works. I always get the error `Cannot read property '1' of null` in my response. In version v2.11.1 everything works fine.\r\n\r\n![nicememe ZbVai8zFifldc0UdeSZ](https://user-images.githubusercontent.com/17954650/87336205-c5c83580-c541-11ea-99bc-89dbb4d9fb31.png)\r\n\r\n* **Please tell us about your environment:**\r\n  \r\n  - Version: graphene-django v2.12.0; graphene v2.1.8\r\n  - Platform: Linux Ubuntu 20.04\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/998", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/998/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/998/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/998/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/998", "id": 648961738, "node_id": "MDU6SXNzdWU2NDg5NjE3Mzg=", "number": 998, "title": "\"Negative indexing is not supported\" after changes to relay", "user": {"login": "bellini666", "id": 134025, "node_id": "MDQ6VXNlcjEzNDAyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/134025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellini666", "html_url": "https://github.com/bellini666", "followers_url": "https://api.github.com/users/bellini666/followers", "following_url": "https://api.github.com/users/bellini666/following{/other_user}", "gists_url": "https://api.github.com/users/bellini666/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellini666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellini666/subscriptions", "organizations_url": "https://api.github.com/users/bellini666/orgs", "repos_url": "https://api.github.com/users/bellini666/repos", "events_url": "https://api.github.com/users/bellini666/events{/privacy}", "received_events_url": "https://api.github.com/users/bellini666/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-01T12:58:54Z", "updated_at": "2020-07-09T17:01:24Z", "closed_at": "2020-07-09T17:01:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "After the changes to relay connection I started noticing this issue in my project.\r\n\r\nIt happens when passing `after` with a higher number than the iterable's total length.\r\n\r\nThe fix is very simple and I'm already working on a PR which a should submit in some minutes.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/bellini/dev/cliqueimudei/cliqueimudei/backend/cm/urls.py\", line 53, in execute_graphql_request\r\n    raise error.original_error\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/promise/promise.py\", line 489, in _resolve_from_executor\r\n    executor(resolve, reject)\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/promise/promise.py\", line 756, in executor\r\n    return resolve(f(*args, **kwargs))\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/graphql/execution/middleware.py\", line 75, in make_it_promise\r\n    return next(*args, **kwargs)\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/graphene_django/fields.py\", line 216, in connection_resolver\r\n    return on_resolve(iterable)\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/graphene_django/fields.py\", line 153, in resolve_connection\r\n    connection = connection_from_list_slice(\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/graphql_relay/connection/arrayconnection.py\", line 82, in connection_from_list_slice\r\n    _slice = list_slice[\r\n  File \"/home/bellini/.virtualenvs/cm/lib/python3.8/site-packages/django/db/models/query.py\", line 290, in __getitem__\r\n    assert ((not isinstance(k, slice) and (k >= 0)) or\r\nAssertionError: Negative indexing is not supported.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/995", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/995/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/995/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/995/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/995", "id": 646366742, "node_id": "MDU6SXNzdWU2NDYzNjY3NDI=", "number": 995, "title": "ModuleNotFoundError: No module named 'graphene_django'", "user": {"login": "raymondfx", "id": 26685061, "node_id": "MDQ6VXNlcjI2Njg1MDYx", "avatar_url": "https://avatars2.githubusercontent.com/u/26685061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raymondfx", "html_url": "https://github.com/raymondfx", "followers_url": "https://api.github.com/users/raymondfx/followers", "following_url": "https://api.github.com/users/raymondfx/following{/other_user}", "gists_url": "https://api.github.com/users/raymondfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/raymondfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raymondfx/subscriptions", "organizations_url": "https://api.github.com/users/raymondfx/orgs", "repos_url": "https://api.github.com/users/raymondfx/repos", "events_url": "https://api.github.com/users/raymondfx/events{/privacy}", "received_events_url": "https://api.github.com/users/raymondfx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T16:12:29Z", "updated_at": "2020-06-26T17:50:20Z", "closed_at": "2020-06-26T17:50:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Note: for support questions, please use stackoverflow**. This repository's issues are reserved for feature requests and bug reports.\r\n\r\n* **What is the current behavior?**\r\n```\r\nWatching for file changes with StatReloader\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 926, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/utils/autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/utils/autoreload.py\", line 76, in raise_last_exception\r\n    raise _exception[1]\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/core/management/__init__.py\", line 357, in execute\r\n    autoreload.check_errors(django.setup)()\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/utils/autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/apps/registry.py\", line 91, in populate\r\n    app_config = AppConfig.create(entry)\r\n  File \"/Users/raymondkorir/Library/Python/3.7/lib/python/site-packages/django/apps/config.py\", line 90, in create\r\n    module = import_module(entry)\r\n  File \"/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 965, in _find_and_load_unlocked\r\nModuleNotFoundError: No module named 'graphene_django'\r\n```\r\n\r\n\r\n\r\n* **If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem** via\r\na github repo, https://repl.it or similar (you can use this template as a starting point: https://repl.it/@jkimbo/Graphene-Django-Example).\r\n\r\n\r\n\r\n* **What is the expected behavior?**\r\n\r\n\r\n\r\n* **What is the motivation / use case for changing the behavior?**\r\n\r\n\r\n\r\n* **Please tell us about your environment:**\r\n  \r\n  - Version: \r\n  - Platform: \r\n\r\n* **Other information** (e.g. detailed explanation, stacktraces, related issues, suggestions how to fix, links for us to have context, eg. stackoverflow)\r\n\r\npip freeze \r\n```\r\ngraphene==2.1.8\r\ngraphene-django==2.11.0\r\ngraphql-core==2.3.2\r\ngraphql-relay==2.0.1\r\ngunicorn==20.0.4\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/991", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/991/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/991/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/991/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/991", "id": 639374818, "node_id": "MDU6SXNzdWU2MzkzNzQ4MTg=", "number": 991, "title": "How to get subfields after serializer mutation ? ", "user": {"login": "sandeshnaroju", "id": 19370489, "node_id": "MDQ6VXNlcjE5MzcwNDg5", "avatar_url": "https://avatars3.githubusercontent.com/u/19370489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandeshnaroju", "html_url": "https://github.com/sandeshnaroju", "followers_url": "https://api.github.com/users/sandeshnaroju/followers", "following_url": "https://api.github.com/users/sandeshnaroju/following{/other_user}", "gists_url": "https://api.github.com/users/sandeshnaroju/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandeshnaroju/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandeshnaroju/subscriptions", "organizations_url": "https://api.github.com/users/sandeshnaroju/orgs", "repos_url": "https://api.github.com/users/sandeshnaroju/repos", "events_url": "https://api.github.com/users/sandeshnaroju/events{/privacy}", "received_events_url": "https://api.github.com/users/sandeshnaroju/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-16T05:11:26Z", "updated_at": "2020-06-17T10:37:58Z", "closed_at": "2020-06-17T10:37:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, I am trying to get the the subfield after serializer mutation in return. In the below code, After mutation it is returning `UUID` for the `supplier` field. But I need the subfields of the `supplier`.  \r\n\r\nThis is the serializer \r\n\r\n```\r\nclass InventorySerializer(serializers.ModelSerializer):\r\n\r\n    class Meta:\r\n        model = Inventory\r\n        fields = '__all__'\r\n        extra_kwargs = {\r\n            'id': {'read_only': False, 'required': False},\r\n        }\r\n\r\n```\r\nMODEL:\r\n\r\n```\r\n\r\nclass Inventory(models.Model):\r\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\r\n\r\n    product_name = models.CharField(max_length=50, null=True)\r\n    supplier = models.ForeignKey(Supplier, related_name='inventory_supplier', on_delete=models.CASCADE, null=True,\r\n                                 blank=True)\r\n    class Meta:\r\n        db_table = \"inventories\"\r\n\r\n```\r\nSchema code:\r\n```\r\nclass InventoryMutationSerializer(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = InventorySerializer\r\n        model_operations = ['create', 'update']\r\n        lookup_field = 'id'\r\n\r\n```\r\n\r\nMUTATION:\r\n\r\n```\r\n  mutation createInventory(\r\n    $productName: String!\r\n    $supplier: String\r\n  ) {\r\n    mutateInventory(\r\n      input: {\r\n        productName: $productName\r\n        supplier: $supplier\r\n      }\r\n    ) {\r\n      id\r\n      productName\r\n      supplier{\r\n        id\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n```\r\n\r\nI need `supplier` subfields after mutation in return. How to achieve it?\r\n\r\n\r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/989", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/989/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/989/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/989/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/989", "id": 638055660, "node_id": "MDU6SXNzdWU2MzgwNTU2NjA=", "number": 989, "title": "Constraining subqueries", "user": {"login": "atticuslin", "id": 8561497, "node_id": "MDQ6VXNlcjg1NjE0OTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/8561497?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atticuslin", "html_url": "https://github.com/atticuslin", "followers_url": "https://api.github.com/users/atticuslin/followers", "following_url": "https://api.github.com/users/atticuslin/following{/other_user}", "gists_url": "https://api.github.com/users/atticuslin/gists{/gist_id}", "starred_url": "https://api.github.com/users/atticuslin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atticuslin/subscriptions", "organizations_url": "https://api.github.com/users/atticuslin/orgs", "repos_url": "https://api.github.com/users/atticuslin/repos", "events_url": "https://api.github.com/users/atticuslin/events{/privacy}", "received_events_url": "https://api.github.com/users/atticuslin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458947, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDc=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%E2%9C%A8enhancement", "name": "\u2728enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-13T00:02:08Z", "updated_at": "2020-06-14T22:14:02Z", "closed_at": "2020-06-14T22:14:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a schema containing students and the sections of classes that they are enrolled in.\r\n\r\n```\r\nsection = graphene.Field(SectionType,\r\n\t\tid = graphene.Int(),\r\n\t\tname = graphene.String(),\r\n\t)\r\n\r\nstudent = graphene.Field(StudentType, \r\n\t\tid = graphene.Int(),\r\n\t\tfirst_name = graphene.String(),\r\n\t\tlast_name = graphene.String(),\r\n\t\tsection = graphene.Argument(SectionInput),\r\n```\r\n\r\nI am wanting to be able to query with the functionality of \"Give me all of the students who are in section with id:2. Something like this:\r\n\r\n```\r\n{\r\n  students {\r\n    id\r\n    firstName\r\n    lastName\r\n    section(id: 2) {\r\n      id\r\n      name\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI have been searching for quite a while and can't seem to find any way to do it. Is this possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/985", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/985/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/985/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/985/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/985", "id": 634232250, "node_id": "MDU6SXNzdWU2MzQyMzIyNTA=", "number": 985, "title": "Wrong supported python versions in PyPi metadata", "user": {"login": "AndreyMZ", "id": 9609370, "node_id": "MDQ6VXNlcjk2MDkzNzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/9609370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreyMZ", "html_url": "https://github.com/AndreyMZ", "followers_url": "https://api.github.com/users/AndreyMZ/followers", "following_url": "https://api.github.com/users/AndreyMZ/following{/other_user}", "gists_url": "https://api.github.com/users/AndreyMZ/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreyMZ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreyMZ/subscriptions", "organizations_url": "https://api.github.com/users/AndreyMZ/orgs", "repos_url": "https://api.github.com/users/AndreyMZ/repos", "events_url": "https://api.github.com/users/AndreyMZ/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreyMZ/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-08T06:33:21Z", "updated_at": "2020-06-10T16:41:12Z", "closed_at": "2020-06-10T16:41:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to [the test configuration](https://github.com/graphql-python/graphene-django/blob/c00203499b00d40a696a092ab3c64759eddad0f8/.github/workflows/tests.yml#L10-L15) it looks like graphene-django:\r\n1. Supports Python 3.7, 3.8.\r\n2. Does not support Python 3.4, 3.5.\r\n\r\nBut [the metadata](https://github.com/graphql-python/graphene-django/blob/c00203499b00d40a696a092ab3c64759eddad0f8/setup.py#L48-L54) of the [`graphql-python`](https://pypi.org/project/graphene-django/) project on PyPi differs.\r\n\r\n**What is the current behavior?**\r\n\r\nhttps://pypi.org/project/graphene-django/\r\n\r\n> Programming Language\r\n> * Python :: 2\r\n> * Python :: 2.7\r\n> * Python :: 3\r\n> * Python :: 3.4\r\n> * Python :: 3.5\r\n> * Python :: 3.6\r\n> * Python :: Implementation :: PyPy\r\n\r\n**What is the expected behavior?**\r\n\r\n> Framework\r\n> * Django\r\n> * Django :: 1.11\r\n> * Django :: 2.2\r\n> * Django :: 3.0\r\n>\r\n> Programming Language\r\n> * Python :: 2\r\n> * Python :: 2.7\r\n> * Python :: 3\r\n> * Python :: 3.6\r\n> * Python :: 3.7\r\n> * Python :: 3.8\r\n> * Python :: Implementation :: PyPy\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/983", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/983/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/983/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/983/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/983", "id": 633469397, "node_id": "MDU6SXNzdWU2MzM0NjkzOTc=", "number": 983, "title": "Generated schema contains empty descriptions (v3)", "user": {"login": "DoctorJohn", "id": 14076775, "node_id": "MDQ6VXNlcjE0MDc2Nzc1", "avatar_url": "https://avatars1.githubusercontent.com/u/14076775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DoctorJohn", "html_url": "https://github.com/DoctorJohn", "followers_url": "https://api.github.com/users/DoctorJohn/followers", "following_url": "https://api.github.com/users/DoctorJohn/following{/other_user}", "gists_url": "https://api.github.com/users/DoctorJohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/DoctorJohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DoctorJohn/subscriptions", "organizations_url": "https://api.github.com/users/DoctorJohn/orgs", "repos_url": "https://api.github.com/users/DoctorJohn/repos", "events_url": "https://api.github.com/users/DoctorJohn/events{/privacy}", "received_events_url": "https://api.github.com/users/DoctorJohn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-07T14:38:38Z", "updated_at": "2020-06-10T16:21:48Z", "closed_at": "2020-06-10T16:21:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "While working on #976 I noticed that verious tests expect fields to have an empty description. In `/graphene_django/tests/test_types.py` for example, `\\\"\"\"\\\"\"\"` is expected within the generated schemas all over the place.\r\n\r\nThis is not the case on master. Furthermore the generated schema is not parsable by an GraphQL client I'm working with due to these empty descriptions.\r\n\r\nI'll start working on an PR to fix this behaviour and related tests.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/975", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/975/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/975/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/975/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/975", "id": 631048580, "node_id": "MDU6SXNzdWU2MzEwNDg1ODA=", "number": 975, "title": "Schema management command broken in 3.0.0b1", "user": {"login": "DoctorJohn", "id": 14076775, "node_id": "MDQ6VXNlcjE0MDc2Nzc1", "avatar_url": "https://avatars1.githubusercontent.com/u/14076775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DoctorJohn", "html_url": "https://github.com/DoctorJohn", "followers_url": "https://api.github.com/users/DoctorJohn/followers", "following_url": "https://api.github.com/users/DoctorJohn/following{/other_user}", "gists_url": "https://api.github.com/users/DoctorJohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/DoctorJohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DoctorJohn/subscriptions", "organizations_url": "https://api.github.com/users/DoctorJohn/orgs", "repos_url": "https://api.github.com/users/DoctorJohn/repos", "events_url": "https://api.github.com/users/DoctorJohn/events{/privacy}", "received_events_url": "https://api.github.com/users/DoctorJohn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-04T18:17:00Z", "updated_at": "2020-06-06T16:13:22Z", "closed_at": "2020-06-06T16:13:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "In version `3.0.0b1` (#705), schema generation via the management command fails with the following exception if the schema contains translatable descriptions (taken from django form field `help_text`s).\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 21, in <module>\r\n    main()\r\n  File \"./manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/django/core/management/__init__.py\", line 395, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/django/core/management/base.py\", line 328, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/django/core/management/base.py\", line 369, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphene_django/management/commands/graphql_schema.py\", line 113, in handle\r\n    self.get_schema(schema, out, indent)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphene_django/management/commands/graphql_schema.py\", line 70, in get_schema\r\n    self.save_graphql_file(out, schema)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphene_django/management/commands/graphql_schema.py\", line 59, in save_graphql_file\r\n    outfile.write(print_schema(schema.graphql_schema))\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 39, in print_schema\r\n    return print_filtered_schema(\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 61, in print_filtered_schema\r\n    \"\\n\\n\".join(\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 65, in <genexpr>\r\n    (print_type(type_) for type_ in types),\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 128, in print_type\r\n    return print_object(type_)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 162, in print_object\r\n    + print_fields(type_)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 198, in print_fields\r\n    fields = [\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 199, in <listcomp>\r\n    print_description(field, \"  \", not i)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/utilities/print_schema.py\", line 282, in print_description\r\n    block_string = print_block_string(description, \"\", prefer_multiple_lines)\r\n  File \"/home/username/.virtualenvs/project/lib/python3.8/site-packages/graphql/language/block_string.py\", line 91, in print_block_string\r\n    result += value.replace(\"\\n\", \"\\n\" + indentation) if indentation else value\r\nTypeError: can only concatenate str (not \"__proxy__\") to str\r\n```\r\n\r\nSchema generation fails when descriptions originally taken of django form fields are processed. Some of them are translatable and thus instances of `django.utils.functional.__proxy__` ([django docs](https://docs.djangoproject.com/en/dev/ref/unicode/#translated-strings)). However, the involved graphql core utility functions expect descriptions to be strings and thus fail to concatenate such descriptions with other strings.\r\n\r\nAn easy fix would be to cast the `value` argument of the `print_block_string` in `graphql/utilities/print_schema.py` to `str`. However, there might be a cleaner way that allows us to fix the issue from within the `graphene-django` package.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/972", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/972/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/972/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/972/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/972", "id": 625052764, "node_id": "MDU6SXNzdWU2MjUwNTI3NjQ=", "number": 972, "title": "Instantiate Middleware from string", "user": {"login": "wkoot", "id": 3715211, "node_id": "MDQ6VXNlcjM3MTUyMTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3715211?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wkoot", "html_url": "https://github.com/wkoot", "followers_url": "https://api.github.com/users/wkoot/followers", "following_url": "https://api.github.com/users/wkoot/following{/other_user}", "gists_url": "https://api.github.com/users/wkoot/gists{/gist_id}", "starred_url": "https://api.github.com/users/wkoot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wkoot/subscriptions", "organizations_url": "https://api.github.com/users/wkoot/orgs", "repos_url": "https://api.github.com/users/wkoot/repos", "events_url": "https://api.github.com/users/wkoot/events{/privacy}", "received_events_url": "https://api.github.com/users/wkoot/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458947, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDc=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%E2%9C%A8enhancement", "name": "\u2728enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-26T17:24:21Z", "updated_at": "2020-05-26T19:28:09Z", "closed_at": "2020-05-26T19:28:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Is your feature request related to a problem? Please describe.**\r\nI want to be able to put strings in the MIDDLEWARE setting, as in default Django settings:\r\n```\r\nGRAPHENE = {\r\n    'MIDDLEWARE': [\r\n        'package1.middleware',\r\n        'package2.middleware',\r\n    ]\r\n}\r\n```\r\n\r\n**Describe the solution you'd like**\r\nThe helper method `graphene_django.views.instantiate_middleware` should parse strings to classes and instantiate them.\r\nYou could use `django.utils.module_loading.import_string`, which has been around since Django 1.7: https://github.com/django/django/blob/1.7/django/utils/module_loading.py\r\n\r\n**Describe alternatives you've considered**\r\nI've currently subclassed `GraphQLView` to set self.middleware instead, but I would rather not have to.\r\n\r\n**Additional context**\r\n-\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/954", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/954/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/954/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/954/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/954", "id": 611100715, "node_id": "MDU6SXNzdWU2MTExMDA3MTU=", "number": 954, "title": "GraphQL django not able to fetch particular ID", "user": {"login": "maratheameya3", "id": 33648650, "node_id": "MDQ6VXNlcjMzNjQ4NjUw", "avatar_url": "https://avatars2.githubusercontent.com/u/33648650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maratheameya3", "html_url": "https://github.com/maratheameya3", "followers_url": "https://api.github.com/users/maratheameya3/followers", "following_url": "https://api.github.com/users/maratheameya3/following{/other_user}", "gists_url": "https://api.github.com/users/maratheameya3/gists{/gist_id}", "starred_url": "https://api.github.com/users/maratheameya3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maratheameya3/subscriptions", "organizations_url": "https://api.github.com/users/maratheameya3/orgs", "repos_url": "https://api.github.com/users/maratheameya3/repos", "events_url": "https://api.github.com/users/maratheameya3/events{/privacy}", "received_events_url": "https://api.github.com/users/maratheameya3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-02T03:54:05Z", "updated_at": "2020-05-28T04:54:12Z", "closed_at": "2020-05-28T04:54:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "My node looks like - \r\n```\r\nclass CustomNode(graphene.relay.Node):\r\n    \"\"\"\r\n        For fetching object id instead of Node id\r\n    \"\"\"\r\n\r\n    class Meta:\r\n        name = 'Node'\r\n\r\n    @staticmethod\r\n    def to_global_id(type, id):\r\n        return id\r\n\r\n\r\nclass ReportFileNode(DjangoObjectType):\r\n    database_id = graphene.Int()\r\n\r\n    class Meta:\r\n        model = ReportFile\r\n        interfaces = (CustomNode,)\r\n        filter_fields: List[str] = ['id']\r\n        convert_choices_to_enum = False\r\n```\r\nAnd my graphql query schema is like -\r\n```\r\nclass Query(graphene.ObjectType):\r\n    all_report_files = DjangoFilterConnectionField(ReportFileNode)\r\n```\r\nBut when I query like this : \r\n```\r\nquery {\r\n  allReportFiles(id: \"367\") {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nI get returned all the records and not just the one I queried.\r\nAlso I have one more requirement that I should be able to input a list of ids and only those records should be fetched.\r\n\r\nWhen I don't use the custom node then this query works - \r\n```\r\nquery {\r\n  allReportFiles(id: [\"UmVwb3J0RmlsZU5vZGU6MzY1\", \"UmVwb3J0RmlsZU5vZGU6MzY3\"]) {\r\n    edges {\r\n      node {\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nBut I need the global IDs to be displayed and used.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/953", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/953/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/953/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/953/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/953", "id": 610736417, "node_id": "MDU6SXNzdWU2MTA3MzY0MTc=", "number": 953, "title": "Graphene returns null when DjangoForm is invalid instead of reporting error", "user": {"login": "Quickinline", "id": 39879172, "node_id": "MDQ6VXNlcjM5ODc5MTcy", "avatar_url": "https://avatars3.githubusercontent.com/u/39879172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Quickinline", "html_url": "https://github.com/Quickinline", "followers_url": "https://api.github.com/users/Quickinline/followers", "following_url": "https://api.github.com/users/Quickinline/following{/other_user}", "gists_url": "https://api.github.com/users/Quickinline/gists{/gist_id}", "starred_url": "https://api.github.com/users/Quickinline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Quickinline/subscriptions", "organizations_url": "https://api.github.com/users/Quickinline/orgs", "repos_url": "https://api.github.com/users/Quickinline/repos", "events_url": "https://api.github.com/users/Quickinline/events{/privacy}", "received_events_url": "https://api.github.com/users/Quickinline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-01T12:53:17Z", "updated_at": "2020-05-01T12:57:54Z", "closed_at": "2020-05-01T12:57:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the DjangoFormMutation class, here's my code:\r\n\r\n```\r\nclass CreateDeveloperMutation(DjangoFormMutation):\r\n\tclass Meta:\r\n\t\tform_class = ProfileForm\r\n\r\n\tdeveloper = graphene.Field(DeveloperNode)\r\n```\r\nthe ProfileForm is defined here:\r\n I was testing the form validation (hence the Exception raised at the save method)\r\n\r\n```\r\nclass ProfileForm(forms.Form):\r\n\tfirstName = forms.CharField(max_length=40)\r\n\tlastName = forms.CharField(max_length=40)\r\n\tpassword = forms.CharField(widget=forms.PasswordInput, validators=[validate_password])\r\n\temail = forms.EmailField()\r\n\r\n\tdef save(self):\r\n\t\traise Exception('Form Validated')\r\n```\r\nWhile testing I inserted a wrong value in the email field and the response was null, instead of raising a graphql error and outputting the validation error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/949", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/949/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/949/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/949/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/949", "id": 608159761, "node_id": "MDU6SXNzdWU2MDgxNTk3NjE=", "number": 949, "title": "Error in GraphQL Mutation Expected value of type ID", "user": {"login": "modbender", "id": 25717245, "node_id": "MDQ6VXNlcjI1NzE3MjQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/25717245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/modbender", "html_url": "https://github.com/modbender", "followers_url": "https://api.github.com/users/modbender/followers", "following_url": "https://api.github.com/users/modbender/following{/other_user}", "gists_url": "https://api.github.com/users/modbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/modbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/modbender/subscriptions", "organizations_url": "https://api.github.com/users/modbender/orgs", "repos_url": "https://api.github.com/users/modbender/repos", "events_url": "https://api.github.com/users/modbender/events{/privacy}", "received_events_url": "https://api.github.com/users/modbender/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-28T09:20:52Z", "updated_at": "2020-05-02T19:40:35Z", "closed_at": "2020-05-02T19:40:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Model\r\n```python\r\nclass Series(models.Model):\r\n    title = models.CharField(max_length=255, unique=True, db_index=True)\r\n    desc = RichTextUploadingField(verbose_name=\"Description\", default= \"Coming Soon...\", max_length=10000)\r\n    series_type = models.ForeignKey(SeriesType, on_delete=models.CASCADE)\r\n    SERIES_STATUS = (\r\n        (0, 'Not Yet Released'),\r\n        (1, 'Done')\r\n    )\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    status = models.PositiveSmallIntegerField(choices=SERIES_STATUS, default=0)\r\n```\r\n\r\n\r\nSchema\r\n```python\r\nclass SeriesNode(DjangoObjectType):\r\n\r\n    class Meta:\r\n        model = models.Series\r\n        filter_fields = ['title', 'alt']\r\n        interfaces = (relay.Node, )\r\n\r\nclass SeriesMutation(DjangoModelFormMutation):\r\n    series = graphene.Field(SeriesNode)\r\n\r\n    class Meta:\r\n        form_class = forms.AdvancedAddSeries\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    create_series = SeriesMutation.Field()\r\n```\r\nQuery Mutation\r\n```gql\r\nmutation CreateSeries($input: SeriesMutationInput!){\r\n  createSeries(input:$input){\r\n    series{\r\n      title\r\n      desc\r\n      seriesType{\r\n        id\r\n      }\r\n      \r\n    }\r\n    errors{\r\n      field\r\n      messages\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nQuery Variables\r\n```json\r\n{\r\n  \"input\": {\r\n    \"title\": \"Series1\",\r\n    \"desc\": \"to be updated\",\r\n    \"seriesType\": {\r\n      \t\"id\": \"U2VyaWVzVHlwZU5vZGU6Mg==\"\r\n    },\r\n    \"user\": {\r\n      \"id\": \"VXNlck5vZGU6MQ==\"\r\n    },\r\n    \"status\": \"A_0\"\r\n  }\r\n}\r\n```\r\nImage of Error\r\n![Image of Error](https://i.imgur.com/X9e6jiq.png)\r\n\r\nReply\r\n```json\r\n{\r\n  \"data\": {\r\n    \"createSeries\": {\r\n      \"series\": null,\r\n      \"errors\": [\r\n        {\r\n          \"field\": \"series_type\",\r\n          \"messages\": [\r\n            \"Select a valid choice. That choice is not one of the available choices.\"\r\n          ]\r\n        },\r\n        {\r\n          \"field\": \"status\",\r\n          \"messages\": [\r\n            \"Select a valid choice. A_0 is not one of the available choices.\"\r\n          ]\r\n        },\r\n        {\r\n          \"field\": \"user\",\r\n          \"messages\": [\r\n            \"Select a valid choice. That choice is not one of the available choices.\"\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/946", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/946/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/946/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/946/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/946", "id": 606083936, "node_id": "MDU6SXNzdWU2MDYwODM5MzY=", "number": 946, "title": "How can the mutation return be a required variable.", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T06:50:21Z", "updated_at": "2020-05-03T02:48:13Z", "closed_at": "2020-05-03T02:48:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\nmutation {\r\n    addNumber{\r\n        number\r\n    }\r\n}\r\n```\r\nHow can I make `number` required?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/944", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/944/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/944/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/944/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/944", "id": 605674151, "node_id": "MDU6SXNzdWU2MDU2NzQxNTE=", "number": 944, "title": "How to generate non nullable queries?", "user": {"login": "honi", "id": 130202, "node_id": "MDQ6VXNlcjEzMDIwMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/130202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honi", "html_url": "https://github.com/honi", "followers_url": "https://api.github.com/users/honi/followers", "following_url": "https://api.github.com/users/honi/following{/other_user}", "gists_url": "https://api.github.com/users/honi/gists{/gist_id}", "starred_url": "https://api.github.com/users/honi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honi/subscriptions", "organizations_url": "https://api.github.com/users/honi/orgs", "repos_url": "https://api.github.com/users/honi/repos", "events_url": "https://api.github.com/users/honi/events{/privacy}", "received_events_url": "https://api.github.com/users/honi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-23T16:27:15Z", "updated_at": "2020-05-09T15:47:23Z", "closed_at": "2020-05-09T11:30:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is my model and schema:\r\n```python\r\nclass AccountRegion(models.Model):\r\n    name = models.CharField(_('name'), max_length=128)\r\n\r\nclass AccountRegionType(DjangoObjectType):\r\n    class Meta:\r\n        model = AccountRegion\r\n\r\nclass Query(graphene.ObjectType):\r\n    account_regions = graphene.List(AccountRegionType)\r\n\r\n    def resolve_account_regions(self, info):\r\n        return AccountRegion.objects.all()\r\n```\r\n\r\nWhen generating the GraphQL schema using the `graphql_schema` management command, I get this output:\r\n```graphql\r\nschema {\r\n  query: Query\r\n}\r\n\r\ntype AccountRegionType {\r\n  id: String!\r\n  name: String!\r\n}\r\n\r\ntype Query {\r\n  accountRegions: [AccountRegionType]\r\n}\r\n```\r\n\r\nWhat I need is to generate the query so it looks like this (notice the double `!`):\r\n```graphql\r\n...\r\ntype Query {\r\n  accountRegions: [AccountRegionType!]!\r\n}\r\n```\r\n\r\nIf I modify my query like this:\r\n```python\r\nclass Query(graphene.ObjectType):\r\n    account_regions = graphene.List(AccountRegionType, required=True)\r\n    ...\r\n```\r\n\r\nI'm able to generate this schema:\r\n```graphql\r\n...\r\ntype Query {\r\n  accountRegions: [AccountRegionType]!\r\n}\r\n```\r\n\r\nBut I'm not sure how to specify that within the `accountRegions` result array, the full `AccountRegionType` object will be present.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/943", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/943/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/943/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/943/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/943", "id": 603723487, "node_id": "MDU6SXNzdWU2MDM3MjM0ODc=", "number": 943, "title": "Date type not accepting ISO DateTime string.", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-21T05:46:15Z", "updated_at": "2020-04-25T13:13:35Z", "closed_at": "2020-04-25T13:13:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This causes error\r\n![Screenshot from 2020-04-21 10-55-09](https://user-images.githubusercontent.com/16081083/79829710-71d60680-83c1-11ea-8ac7-a56c53760752.png)\r\nBut this works fine\r\n![Screenshot from 2020-04-21 10-55-54](https://user-images.githubusercontent.com/16081083/79830046-3a1b8e80-83c2-11ea-8715-77b23497d7f6.png)\r\n\r\nIs it a bug or feature?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/937", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/937/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/937/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/937/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/937", "id": 602436638, "node_id": "MDU6SXNzdWU2MDI0MzY2Mzg=", "number": 937, "title": "DjangoFormMutation and DjangoModelFormMutation ignore provided form_class", "user": {"login": "leotsem", "id": 101666, "node_id": "MDQ6VXNlcjEwMTY2Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/101666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leotsem", "html_url": "https://github.com/leotsem", "followers_url": "https://api.github.com/users/leotsem/followers", "following_url": "https://api.github.com/users/leotsem/following{/other_user}", "gists_url": "https://api.github.com/users/leotsem/gists{/gist_id}", "starred_url": "https://api.github.com/users/leotsem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leotsem/subscriptions", "organizations_url": "https://api.github.com/users/leotsem/orgs", "repos_url": "https://api.github.com/users/leotsem/repos", "events_url": "https://api.github.com/users/leotsem/events{/privacy}", "received_events_url": "https://api.github.com/users/leotsem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-18T11:18:52Z", "updated_at": "2020-04-27T01:53:55Z", "closed_at": "2020-04-20T13:12:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to create a simple DjangoModelFormMutation and getting this error when creating the Mutation class:\r\n\r\n> form_class is required for DjangoModelFormMutation\r\n\r\nUpdate: Applies to both DjangoModelFormMutation and DjangoFormMutation.\r\n\r\n```\r\n# projects/forms.py\r\nclass ProjectCreateForm(ModelForm):\r\n    class Meta:\r\n        model = Project\r\n        fields = (\"name\",)\r\n```\r\n```\r\n# projects/schema.py\r\nclass ProjectType(DjangoObjectType):\r\n    class Meta:\r\n        model = Project\r\n\r\n\r\nclass ProjectCreateMutation(DjangoModelFormMutation):\r\n    project = graphene.Field(ProjectType)\r\n\r\n    class Meta:\r\n        form_class = ProjectCreateForm\r\n```\r\n```\r\n# schema.py\r\nclass Mutation(projects.schema.ProjectCreateMutation, graphene.ObjectType):\r\n    pass\r\n\r\n\r\nschema = graphene.Schema(mutation=Mutation)\r\n```\r\n\r\nUsing:\r\n`graphene-django==2.9.1` but also tried 2.8.2 due to potentially relevant changes introduced in 2.9.0\r\n`graphene==2.1.8`\r\n`django==2.2.12`\r\n\r\nFeels like I'm missing something obvious, any idea what that might be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/923", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/923/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/923/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/923/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/923", "id": 595332830, "node_id": "MDU6SXNzdWU1OTUzMzI4MzA=", "number": 923, "title": "Order Union by created_at", "user": {"login": "spaceinvader161", "id": 16842420, "node_id": "MDQ6VXNlcjE2ODQyNDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/16842420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaceinvader161", "html_url": "https://github.com/spaceinvader161", "followers_url": "https://api.github.com/users/spaceinvader161/followers", "following_url": "https://api.github.com/users/spaceinvader161/following{/other_user}", "gists_url": "https://api.github.com/users/spaceinvader161/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaceinvader161/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaceinvader161/subscriptions", "organizations_url": "https://api.github.com/users/spaceinvader161/orgs", "repos_url": "https://api.github.com/users/spaceinvader161/repos", "events_url": "https://api.github.com/users/spaceinvader161/events{/privacy}", "received_events_url": "https://api.github.com/users/spaceinvader161/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-06T18:29:11Z", "updated_at": "2020-04-07T08:36:49Z", "closed_at": "2020-04-07T08:36:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a graphene.Union of two models and i'm tying to order the response by created_at field witch both models have. Is there of doing that?\r\n\r\n**Schema.py**\r\n```python\r\n\r\nclass PostUnion(graphene.Union):\r\n\tclass Meta:\r\n\t\ttypes = (PostType, Post2Type)\r\n\t\r\n\t@classmethod\r\n\tdef resolve_type(cls, instance, info):\r\n\t\t# This function tells Graphene what Graphene type the instance is\r\n\t\tif isinstance(instance, Post):\r\n\t\t\treturn PostType\r\n\t\tif isinstance(instance, Post2):\r\n\t\t \treturn Post2Type\r\n\t\treturn PostUnion.resolve_type(instance, info, search)\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    all_posts = graphene.List(PostUnion, search=graphene.String(), limit=graphene.Int())\r\n\r\n    def resolve_all_posts(self, info, search=None, limit=None):\r\n        if search:\r\n            filter = (\r\n                Q(id__icontains=search) |\r\n                Q(title__icontains=search)\r\n            )\r\n            return (list(Post.objects.filter(filter)) + list(Post2.objects.filter(filter)))[:limit]\r\n\r\n        return (list(Post.objects.all()) + list(Post2.objects.all()))[:limit]\r\n\r\n```\r\n```graphql\r\n{\r\n  allPosts(Order: \"created_at\") {\r\n    ... on PostType {\r\n      id\r\n      title\r\n      createdAt\r\n    }\r\n    ... on Post2Type {\r\n      id\r\n      title\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/922", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/922/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/922/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/922/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/922", "id": 593798389, "node_id": "MDU6SXNzdWU1OTM3OTgzODk=", "number": 922, "title": "DjangoModelFormMutation getting \"an invalid keyword argument for Mutation\" error instead of model form errors", "user": {"login": "Aljabri-Salman", "id": 27647022, "node_id": "MDQ6VXNlcjI3NjQ3MDIy", "avatar_url": "https://avatars1.githubusercontent.com/u/27647022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aljabri-Salman", "html_url": "https://github.com/Aljabri-Salman", "followers_url": "https://api.github.com/users/Aljabri-Salman/followers", "following_url": "https://api.github.com/users/Aljabri-Salman/following{/other_user}", "gists_url": "https://api.github.com/users/Aljabri-Salman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aljabri-Salman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aljabri-Salman/subscriptions", "organizations_url": "https://api.github.com/users/Aljabri-Salman/orgs", "repos_url": "https://api.github.com/users/Aljabri-Salman/repos", "events_url": "https://api.github.com/users/Aljabri-Salman/events{/privacy}", "received_events_url": "https://api.github.com/users/Aljabri-Salman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-04T11:04:27Z", "updated_at": "2020-04-12T19:03:36Z", "closed_at": "2020-04-12T15:23:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using DjangoModelFormMutation and getting a modelform error the mutation shows an invalid keyword argument for Mutation as shown below. I am supposed to get errors for the field name showing \"This name has already been registered.\" However I am getting graphql.error.located_error.GraphQLLocatedError: 'name' is an invalid keyword argument for CategoryMutation\r\n\r\n```python\r\n# model\r\nclass Category(models.Model):\r\n    name = models.CharField(max_length=10, unique=True,\r\n                 error_messages={'unique':\"This name has already been registered.\"})\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n#model form\r\nclass CategoryForm(ModelForm):\r\n    class Meta:\r\n        model = Category\r\n        exclude = []\r\n\r\n# create category mutation\r\nclass CategoryMutation(DjangoModelFormMutation):\r\n    category = graphene.Field(CategoryType)\r\n    class Meta:\r\n        form_class = CategoryForm\r\n```\r\n\r\nmutation:\r\n```\r\nmutation {\r\n  categoryCreate(input: {name: \"spices\"}) {\r\n    errors {\r\n      field,\r\n      messages\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nresults when the name is not unique:\r\n```\r\n{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"'name' is an invalid keyword argument for CategoryMutation\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 3\r\n        }\r\n      ],\r\n      \"path\": [\r\n        \"categoryCreate\"\r\n      ]\r\n    }\r\n  ],\r\n  \"data\": {\r\n    \"categoryCreate\": null\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/917", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/917/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/917/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/917/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/917", "id": 592587187, "node_id": "MDU6SXNzdWU1OTI1ODcxODc=", "number": 917, "title": "Problem with GraphQLTestCase", "user": {"login": "fneitzel", "id": 10213803, "node_id": "MDQ6VXNlcjEwMjEzODAz", "avatar_url": "https://avatars1.githubusercontent.com/u/10213803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fneitzel", "html_url": "https://github.com/fneitzel", "followers_url": "https://api.github.com/users/fneitzel/followers", "following_url": "https://api.github.com/users/fneitzel/following{/other_user}", "gists_url": "https://api.github.com/users/fneitzel/gists{/gist_id}", "starred_url": "https://api.github.com/users/fneitzel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fneitzel/subscriptions", "organizations_url": "https://api.github.com/users/fneitzel/orgs", "repos_url": "https://api.github.com/users/fneitzel/repos", "events_url": "https://api.github.com/users/fneitzel/events{/privacy}", "received_events_url": "https://api.github.com/users/fneitzel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T12:18:19Z", "updated_at": "2020-04-02T22:43:36Z", "closed_at": "2020-04-02T22:43:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have the following test, following the tutorial:\r\n\r\n```\r\n    def test_query(self):\r\n        response = self.query('''\r\n            query{\r\n                links{\r\n                    id\r\n                    description\r\n                    url\r\n                }\r\n            }\r\n        ''',\r\n        op_name='links'\r\n        )\r\n\r\n        print(response.content)\r\n        content = json.loads(response.content)\r\n\r\n        # This validates the status code and if you get errors\r\n        self.assertResponseNoErrors(response)\r\n```\r\n**Using the same query in GraphiQL GUI returns data as expected.**\r\n\r\nBut I always receive this error:\r\n\r\n> Traceback (most recent call last):\r\n>   File \"/<project>/databases/links/tests.py\", line 34, in test_query\r\n>     content = json.loads(response.content)\r\n>   File \"/usr/lib/python3.8/json/__init__.py\", line 357, in loads\r\n>     return _default_decoder.decode(s)\r\n>   File \"/usr/lib/python3.8/json/decoder.py\", line 337, in decode\r\n>     obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n>   File \"/usr/lib/python3.8/json/decoder.py\", line 355, in raw_decode\r\n>     raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\n> json.decoder.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\r\n> \r\n> response.content is:\r\n> b'\\n<!doctype html>\\n<html lang=\"en\">\\n<head>\\n  <title>Not Found</title>\\n</head>\\n<body>\\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\\n</body>\\n</html>\\n'\r\n\r\nI use graphene-django 2.9\r\n\r\nCan anybody hint what I do wrong?\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/912", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/912/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/912/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/912/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/912", "id": 589116227, "node_id": "MDU6SXNzdWU1ODkxMTYyMjc=", "number": 912, "title": "Query multiple models in one response", "user": {"login": "spaceinvader161", "id": 16842420, "node_id": "MDQ6VXNlcjE2ODQyNDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/16842420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaceinvader161", "html_url": "https://github.com/spaceinvader161", "followers_url": "https://api.github.com/users/spaceinvader161/followers", "following_url": "https://api.github.com/users/spaceinvader161/following{/other_user}", "gists_url": "https://api.github.com/users/spaceinvader161/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaceinvader161/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaceinvader161/subscriptions", "organizations_url": "https://api.github.com/users/spaceinvader161/orgs", "repos_url": "https://api.github.com/users/spaceinvader161/repos", "events_url": "https://api.github.com/users/spaceinvader161/events{/privacy}", "received_events_url": "https://api.github.com/users/spaceinvader161/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-27T12:58:40Z", "updated_at": "2020-04-07T08:38:03Z", "closed_at": "2020-04-01T14:45:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Both Post and Post2 models have the same fields is there a way to combine them in a single response?\r\n\r\n```\r\nimport graphene\r\nfrom graphene_django import DjangoObjectType\r\nfrom .models import Post, Post2\r\n\r\nclass PostType(DjangoObjectType):\r\n    class Meta:\r\n        model = Post\r\n\r\nclass Post2Type(DjangoObjectType):\r\n    class Meta:\r\n        model = Post2\r\n\r\nclass Query(graphene.ObjectType):\r\n    post = graphene.List(PostType)\r\n    post2 = graphene.List(Post2Type)\r\n\r\n    def resolve_post(self, info):\r\n        return Post.objects.all()\r\n\r\n    def resolve_post2(self, info):\r\n        return Post2.objects.all()\r\n```\r\n\r\nWhat i get:\r\n```\r\n{\r\n  \"data\": {\r\n    \"post\": [\r\n      {\r\n        \"title\": \"post 1\"\r\n      }\r\n    ],\r\n    \"post2\": [\r\n      {\r\n        \"title\": \"post test\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nWhat i want to get:\r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"allPost\": [\r\n      {\r\n        \"title\": \"post 1\"\r\n      },\r\n      {\r\n        \"title\": \"post test\"\r\n      }\r\n  }\r\n}\r\n```\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/909", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/909/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/909/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/909/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/909", "id": 584409070, "node_id": "MDU6SXNzdWU1ODQ0MDkwNzA=", "number": 909, "title": "iterable gets refiltered by resolve_queryset but iterable might be promise", "user": {"login": "frankchen211", "id": 1912625, "node_id": "MDQ6VXNlcjE5MTI2MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1912625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frankchen211", "html_url": "https://github.com/frankchen211", "followers_url": "https://api.github.com/users/frankchen211/followers", "following_url": "https://api.github.com/users/frankchen211/following{/other_user}", "gists_url": "https://api.github.com/users/frankchen211/gists{/gist_id}", "starred_url": "https://api.github.com/users/frankchen211/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frankchen211/subscriptions", "organizations_url": "https://api.github.com/users/frankchen211/orgs", "repos_url": "https://api.github.com/users/frankchen211/repos", "events_url": "https://api.github.com/users/frankchen211/events{/privacy}", "received_events_url": "https://api.github.com/users/frankchen211/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-19T13:23:17Z", "updated_at": "2020-08-17T00:25:10Z", "closed_at": "2020-08-17T00:25:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to use DataLoader but I got a problem in DjangoConnectionField.\r\nAccording to the comment, does that means I can't DataLoader here?  My iterable here is Promise.\r\n\r\nhttps://github.com/graphql-python/graphene-django/blob/0da06d4d54d3e73d43d88534259f55733ab7609b/graphene_django/fields.py#L176\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/907", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/907/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/907/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/907/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/907", "id": 583412863, "node_id": "MDU6SXNzdWU1ODM0MTI4NjM=", "number": 907, "title": "CharField with Choices set causes assertion error", "user": {"login": "hairypalm", "id": 19241276, "node_id": "MDQ6VXNlcjE5MjQxMjc2", "avatar_url": "https://avatars0.githubusercontent.com/u/19241276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hairypalm", "html_url": "https://github.com/hairypalm", "followers_url": "https://api.github.com/users/hairypalm/followers", "following_url": "https://api.github.com/users/hairypalm/following{/other_user}", "gists_url": "https://api.github.com/users/hairypalm/gists{/gist_id}", "starred_url": "https://api.github.com/users/hairypalm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hairypalm/subscriptions", "organizations_url": "https://api.github.com/users/hairypalm/orgs", "repos_url": "https://api.github.com/users/hairypalm/repos", "events_url": "https://api.github.com/users/hairypalm/events{/privacy}", "received_events_url": "https://api.github.com/users/hairypalm/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-18T02:12:28Z", "updated_at": "2020-08-21T20:29:35Z", "closed_at": "2020-08-21T20:29:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Simply using a choices option with a mutation results in \r\n\r\n**AssertionError at /graphql\r\nFound different types with the same name in the schema: fob, fob.**\r\n\r\n**fob** is a CharField on the Contract model.  Taking out the **choices=** option removes the error.\r\n\r\nThis same model in the Query part of the schema works fine and produces an enum type.  In the Mutation, using a SerializerMutation base, causes this exception.  This is regardless of whether the Contact is in the Query part or not.\r\n\r\n```\r\nclass Contract(models.Model):\r\n    buyer = models.ForeignKey('Company', on_delete=models.CASCADE, related_name='purchases')\r\n    FOB = Choices('Origin', 'Destination')\r\n    fob = models.CharField(choices=FOB, max_length=20, default='', blank=True)\r\n\r\nclass ContractSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Contract\r\n        fields = '__all__'\r\n\r\nclass ContractMutation(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = ContractSerializer\r\n\r\nclass Mutation(object):\r\n    contract = ContractMutation.Field()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/897", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/897/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/897/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/897/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/897", "id": 577355104, "node_id": "MDU6SXNzdWU1NzczNTUxMDQ=", "number": 897, "title": "ModuleNotFoundError: No module named 'graphene_django'", "user": {"login": "ManuBoca92", "id": 32060289, "node_id": "MDQ6VXNlcjMyMDYwMjg5", "avatar_url": "https://avatars2.githubusercontent.com/u/32060289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ManuBoca92", "html_url": "https://github.com/ManuBoca92", "followers_url": "https://api.github.com/users/ManuBoca92/followers", "following_url": "https://api.github.com/users/ManuBoca92/following{/other_user}", "gists_url": "https://api.github.com/users/ManuBoca92/gists{/gist_id}", "starred_url": "https://api.github.com/users/ManuBoca92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ManuBoca92/subscriptions", "organizations_url": "https://api.github.com/users/ManuBoca92/orgs", "repos_url": "https://api.github.com/users/ManuBoca92/repos", "events_url": "https://api.github.com/users/ManuBoca92/events{/privacy}", "received_events_url": "https://api.github.com/users/ManuBoca92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-07T16:06:34Z", "updated_at": "2020-03-09T08:50:59Z", "closed_at": "2020-03-09T08:50:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\nPlease I need your help. I am trying to use this module but I keep getting errors. I think it might be a bug with the dependencies, but not sure. Please see my setup\r\n\r\n`requirements.txt` file\r\n```\r\nDjango==3.0.4\r\ndjango-filter==2.2.0\r\ndjango-graphiql==0.4.4\r\ngraphene==2.1.8\r\ngraphene-django==2.8.2\r\npylint==2.4.4\r\nyapf==0.29.0\r\n```\r\n\r\n`settings.py` file\r\n```\r\nINSTALLED_APPS = [\r\n   'company',\r\n   'graphene_django',\r\n]\r\n\r\nGRAPHENE = {\r\n    'SCHEMA': 'startupql.schema.schema' \r\n```\r\nMy `schema.py` file is inside both my django project `startupql` and  django app `company`\r\n\r\nI have tried to find the solution and searched for similar issues but couldn't resolve it. Please help! I am using `python 3.8.1` in my venv.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/896", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/896/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/896/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/896/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/896", "id": 576812923, "node_id": "MDU6SXNzdWU1NzY4MTI5MjM=", "number": 896, "title": "UserWarning on GeoJSONType fields", "user": {"login": "kikeh", "id": 2196582, "node_id": "MDQ6VXNlcjIxOTY1ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2196582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kikeh", "html_url": "https://github.com/kikeh", "followers_url": "https://api.github.com/users/kikeh/followers", "following_url": "https://api.github.com/users/kikeh/following{/other_user}", "gists_url": "https://api.github.com/users/kikeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/kikeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kikeh/subscriptions", "organizations_url": "https://api.github.com/users/kikeh/orgs", "repos_url": "https://api.github.com/users/kikeh/repos", "events_url": "https://api.github.com/users/kikeh/events{/privacy}", "received_events_url": "https://api.github.com/users/kikeh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458950, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTA=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}, {"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T09:44:05Z", "updated_at": "2020-08-04T08:41:56Z", "closed_at": "2020-08-04T08:41:56Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, I'm getting a warning from `graphene_django` and would like to discuss possible solutions to this, since it is a special case.\r\n\r\nThe latest version of `graphene_django` (2.8.2) added a `UserWarning` that warns you that you have an attribute of a model in the `fields` of its Node, which is not a model field:\r\n\r\n```python\r\nUserWarning: Field name \"name\" matches an attribute on Django model \"MyModel\" but it's not a model field so Graphene cannot determine what type it should be. Either define the type of the field on DjangoObjectType \"MyModelNode\" or remove it from the \"fields\" list.\r\n```\r\n\r\nIn our case this is not true, `name` is a model field, but we are using a special type: GeoJSONType ([`django-graphql-geojson`](https://github.com/flavors/django-graphql-geojson/)), which follows a specific format: [GeoJSON](https://geojson.org/). This format returns in its first level of information the geometry information and in a second level the other requested information in a field called `properties`:\r\n\r\n```sh\r\n(Pdb++) _meta.fields\r\nOrderedFields(\r\n    [\r\n        ('type', <graphene.types.field.Field object at 0x7f616fd62f50>),\r\n        ('id', <graphene.types.field.Field object at 0x7f616fc3e090>),\r\n        ('location', <graphene.types.field.Field object at 0x7f616fc41290>),\r\n        ('bbox', <graphene.types.field.Field object at 0x7f616fd64ad0>),\r\n        ('properties', <graphene.types.field.Field object at 0x7f616fd62610>),\r\n    ]\r\n)\r\n```\r\n\r\nSo when `graphene_django` validates its fields it doesn't find those fields by simply:\r\n\r\n```sh\r\n> graphene_django/types.py(67)\r\n# all_field_names = set(fields.keys())\r\n(Pdb++) all_field_names\r\n['type', 'id', 'location', 'bbox', 'properties']\r\n```\r\n\r\nbecause it is in a deeper level `properties`:\r\n\r\n```sh\r\n(Pdb++) _meta.fields['properties']\r\n['name', ... ]\r\n```\r\n\r\nSo I would like to know what would be the thoughts about the GeoJSONType and its format from the `graphene_django` point of view. Would you consider validating fields in a special way for this type of models (with a different format but backed by a standard as GeoJSON)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/894", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/894/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/894/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/894/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/894", "id": 576721539, "node_id": "MDU6SXNzdWU1NzY3MjE1Mzk=", "number": 894, "title": "How can I use middleware to specific resolver", "user": {"login": "csvwolf", "id": 8280645, "node_id": "MDQ6VXNlcjgyODA2NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/8280645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csvwolf", "html_url": "https://github.com/csvwolf", "followers_url": "https://api.github.com/users/csvwolf/followers", "following_url": "https://api.github.com/users/csvwolf/following{/other_user}", "gists_url": "https://api.github.com/users/csvwolf/gists{/gist_id}", "starred_url": "https://api.github.com/users/csvwolf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csvwolf/subscriptions", "organizations_url": "https://api.github.com/users/csvwolf/orgs", "repos_url": "https://api.github.com/users/csvwolf/repos", "events_url": "https://api.github.com/users/csvwolf/events{/privacy}", "received_events_url": "https://api.github.com/users/csvwolf/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-06T06:14:48Z", "updated_at": "2020-08-03T07:39:27Z", "closed_at": "2020-08-03T07:39:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to set cookie by a resolver input value like:\r\n\r\n```python\r\n@decorator_from_middleware_with_args(TestMiddleare)\r\ndef resolve_is_user_canary(self, info, user_token):\r\n    return True\r\n```\r\n\r\nUnfortunately, I can't `get_response` without middleware, what should I do to set a cookie without a global middleware?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/893", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/893/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/893/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/893/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/893", "id": 576211144, "node_id": "MDU6SXNzdWU1NzYyMTExNDQ=", "number": 893, "title": "execute_graphql_request caused warnings", "user": {"login": "jedie", "id": 71315, "node_id": "MDQ6VXNlcjcxMzE1", "avatar_url": "https://avatars1.githubusercontent.com/u/71315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedie", "html_url": "https://github.com/jedie", "followers_url": "https://api.github.com/users/jedie/followers", "following_url": "https://api.github.com/users/jedie/following{/other_user}", "gists_url": "https://api.github.com/users/jedie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedie/subscriptions", "organizations_url": "https://api.github.com/users/jedie/orgs", "repos_url": "https://api.github.com/users/jedie/repos", "events_url": "https://api.github.com/users/jedie/events{/privacy}", "received_events_url": "https://api.github.com/users/jedie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-05T12:15:55Z", "updated_at": "2020-07-07T15:55:20Z", "closed_at": "2020-07-07T15:55:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`graphene_django.views.GraphQLView.execute_graphql_request()` will generate these warnings:\r\n\r\n```\r\nDeprecationWarning: The 'root' alias has been deprecated. Please use 'root_value' instead.\r\nDeprecationWarning: The 'context' alias has been deprecated. Please use 'context_value' instead.\r\nDeprecationWarning: The 'variables' alias has been deprecated. Please use 'variable_values' instead.\r\n```\r\n\r\nThe warnings are generated here: `.../graphql/execution/executor.py:92: in execute`\r\n\r\nIt's graphene-django v2.8.1 and graphene v2.1.8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/892", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/892/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/892/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/892/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/892", "id": 575938434, "node_id": "MDU6SXNzdWU1NzU5Mzg0MzQ=", "number": 892, "title": "Freezing the Page (ListView and so on)", "user": {"login": "robertomorati", "id": 3457738, "node_id": "MDQ6VXNlcjM0NTc3Mzg=", "avatar_url": "https://avatars3.githubusercontent.com/u/3457738?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertomorati", "html_url": "https://github.com/robertomorati", "followers_url": "https://api.github.com/users/robertomorati/followers", "following_url": "https://api.github.com/users/robertomorati/following{/other_user}", "gists_url": "https://api.github.com/users/robertomorati/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertomorati/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertomorati/subscriptions", "organizations_url": "https://api.github.com/users/robertomorati/orgs", "repos_url": "https://api.github.com/users/robertomorati/repos", "events_url": "https://api.github.com/users/robertomorati/events{/privacy}", "received_events_url": "https://api.github.com/users/robertomorati/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-05T01:54:40Z", "updated_at": "2020-03-05T02:03:26Z", "closed_at": "2020-03-05T02:03:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nCanceled....\r\n\r\nI really appreciate the attention,\r\nRoberto Morati", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/889", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/889/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/889/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/889/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/889", "id": 573896745, "node_id": "MDU6SXNzdWU1NzM4OTY3NDU=", "number": 889, "title": "Ordering filter in foreign key sets missing", "user": {"login": "samkit-jain", "id": 15127115, "node_id": "MDQ6VXNlcjE1MTI3MTE1", "avatar_url": "https://avatars1.githubusercontent.com/u/15127115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samkit-jain", "html_url": "https://github.com/samkit-jain", "followers_url": "https://api.github.com/users/samkit-jain/followers", "following_url": "https://api.github.com/users/samkit-jain/following{/other_user}", "gists_url": "https://api.github.com/users/samkit-jain/gists{/gist_id}", "starred_url": "https://api.github.com/users/samkit-jain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samkit-jain/subscriptions", "organizations_url": "https://api.github.com/users/samkit-jain/orgs", "repos_url": "https://api.github.com/users/samkit-jain/repos", "events_url": "https://api.github.com/users/samkit-jain/events{/privacy}", "received_events_url": "https://api.github.com/users/samkit-jain/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-02T11:03:32Z", "updated_at": "2020-07-31T02:19:29Z", "closed_at": "2020-07-31T02:19:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\nimport django_filters\r\nimport graphene\r\nfrom graphene_django import DjangoObjectType\r\nfrom graphene_django.filter import DjangoFilterConnectionField\r\n\r\nfrom api.models import Children, Parent\r\n\r\n\r\nclass ParentNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Parent\r\n        filter_fields = [\"parent_id\"]\r\n        interfaces = (graphene.relay.Node,)\r\n\r\n\r\nclass ChildrenNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Children\r\n        filter_fields = [\"name\", \"parent__parent_id\"]\r\n        interfaces = (graphene.relay.Node,)\r\n\r\n\r\nclass ParentFilter(django_filters.FilterSet):\r\n    parent_id = django_filters.CharFilter(lookup_expr=\"iexact\")\r\n\r\n    class Meta:\r\n        model = Parent\r\n        fields = [\"parent_id\"]\r\n\r\n    order_by = django_filters.OrderingFilter(fields=((\"created_at\", \"created_at\"), (\"updated_at\", \"updated_at\"),))\r\n\r\n\r\nclass ChildrenFilter(django_filters.FilterSet):\r\n    name = django_filters.CharFilter(lookup_expr=\"icontains\")\r\n    parent__parent_id = django_filters.CharFilter(lookup_expr=\"iexact\")\r\n\r\n    class Meta:\r\n        model = Children\r\n        fields = [\"name\", \"parent__parent_id\"]\r\n\r\n    order_by = django_filters.OrderingFilter(fields=((\"created_at\", \"created_at\"), (\"updated_at\", \"updated_at\"),))\r\n\r\n\r\nclass Query(object):\r\n    parents = graphene.relay.Node.Field(ParentNode)\r\n    all_parents = DjangoFilterConnectionField(ParentNode, filterset_class=ParentFilter)\r\n\r\n    children = graphene.relay.Node.Field(ChildrenNode)\r\n    all_children = DjangoFilterConnectionField(ChildrenNode, filterset_class=ChildrenFilter)\r\n```\r\n\r\nHere, the `Children` table is having the `Parent` as the foreign key. When querying `allChildren` in the GraphQL like\r\n```gql\r\nquery {\r\n  allChildren(orderBy: \"-created_at\") {\r\n    edges {\r\n      node {\r\n        name\r\n        parentsSet {\r\n          edges {\r\n            node {\r\n            \tparentId\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nthe `parentsSet` `NodeConnection` contains `before`, `after`, `first`, `last` and `parentId` as the valid filter fields. Why is it missing the `orderBy` field and how can it be added to it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/888", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/888/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/888/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/888/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/888", "id": 573822594, "node_id": "MDU6SXNzdWU1NzM4MjI1OTQ=", "number": 888, "title": "How to include fieldSet of a model? ", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-02T09:07:41Z", "updated_at": "2020-03-04T05:28:36Z", "closed_at": "2020-03-04T05:28:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If a model is a foreign key to another model \r\n\r\n```\r\nclass UserType(DjangoObjectType):\r\n    class Meta:\r\n        model = User\r\n\r\n```\r\ngives a field called `postsSet`.\r\n\r\nBut when only some fields are required \r\n```\r\nclass UserType(DjangoObjectType):\r\n    class Meta:\r\n        model = User\r\n        fields = ['id', 'username']\r\n```\r\nHow can the `postsSet` be retrieved? Its not possible to add `postsSet` to fields. \r\nOne way is to create a field in the class and have a resolver. Is there any other way?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/880", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/880/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/880/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/880/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/880", "id": 567845370, "node_id": "MDU6SXNzdWU1Njc4NDUzNzA=", "number": 880, "title": "How to retrieve the \"connection_args\" in a connection?", "user": {"login": "oOoBlackHoleSunoOo", "id": 58712791, "node_id": "MDQ6VXNlcjU4NzEyNzkx", "avatar_url": "https://avatars0.githubusercontent.com/u/58712791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oOoBlackHoleSunoOo", "html_url": "https://github.com/oOoBlackHoleSunoOo", "followers_url": "https://api.github.com/users/oOoBlackHoleSunoOo/followers", "following_url": "https://api.github.com/users/oOoBlackHoleSunoOo/following{/other_user}", "gists_url": "https://api.github.com/users/oOoBlackHoleSunoOo/gists{/gist_id}", "starred_url": "https://api.github.com/users/oOoBlackHoleSunoOo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oOoBlackHoleSunoOo/subscriptions", "organizations_url": "https://api.github.com/users/oOoBlackHoleSunoOo/orgs", "repos_url": "https://api.github.com/users/oOoBlackHoleSunoOo/repos", "events_url": "https://api.github.com/users/oOoBlackHoleSunoOo/events{/privacy}", "received_events_url": "https://api.github.com/users/oOoBlackHoleSunoOo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-19T21:02:47Z", "updated_at": "2020-07-19T00:40:25Z", "closed_at": "2020-07-19T00:40:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello, for a current page logic i need  the \"first\" Value of the connection_args in a `Connection` resolver.  Unfortunately i can only retrieve the \"first\" value in my `resolve_all_vogel(self, info, **kwargs):` of the `ObjectType` via `**kwargs.` I tried many things via` root.<...>` or `info.<...> ` to retrieve the value but it seems i missed something. In the Docs found only `connection_args` related topics to the `ObjectType`.\r\n\r\nAn Alternative would be to know the Value (or Index?) of the current slice of the arrayconnection.  If there is something like that.\r\n\r\nthanks for every hint.\r\n```\r\nclass ExtendedConnection(Connection):\r\n      \r\n    class Meta:\r\n        abstract = True\r\n\r\n    total_results = Int()\r\n    current_page = Int()\r\n   <...>\r\n    def resolve_current_page(self, info, *args, **kwargs):\r\n        print(kwargs) # --- empty\r\n        if bool(root.page_info.start_cursor) == True:\r\n            # variables\r\n            firstVal = ???? \r\n            cursorVal = cursor_to_offset(root.page_info.start_cursor)\r\n            a = int(1)\r\n            # formular\r\n            startCursor = int(cursorVal) + a\r\n            p1 = (startCursor / firstVal) + a   \r\n            p2 = 1 / firstVal\r\n            pages = p1 - p2\r\n            return round(pages, 0)\r\n        return \r\n\r\n<...>\r\n\r\nclass VogelType(DjangoObjectType):\r\n    class Meta:\r\n        model = Birds\r\n        filter_fields =  {\r\n            'id':  ['exact', 'icontains'],\r\n \r\n            'name': ['exact', 'icontains', 'istartswith', 'iendswith'],\r\n        }\r\n        interfaces = (relay.Node, )\r\n        connection_class = ExtendedConnection\r\n\r\n<...>\r\n\r\nclass VogelQuery(ObjectType):\r\n\r\n    all_vogel = DjangoFilterConnectionField(VogelType)\r\n\r\n    def resolve_all_vogel(self, info, **kwargs):\r\n         print(kwargs) # --- returns the value for example \"{'first': 2, 'name__icontains': 'a'}\"   \r\n        return \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/875", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/875/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/875/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/875/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/875", "id": 562300156, "node_id": "MDU6SXNzdWU1NjIzMDAxNTY=", "number": 875, "title": "Resolve warning from ForeignKey in exclude statement (warnings added in 2.8.1.)", "user": {"login": "lassesteffen", "id": 29383763, "node_id": "MDQ6VXNlcjI5MzgzNzYz", "avatar_url": "https://avatars1.githubusercontent.com/u/29383763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lassesteffen", "html_url": "https://github.com/lassesteffen", "followers_url": "https://api.github.com/users/lassesteffen/followers", "following_url": "https://api.github.com/users/lassesteffen/following{/other_user}", "gists_url": "https://api.github.com/users/lassesteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lassesteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lassesteffen/subscriptions", "organizations_url": "https://api.github.com/users/lassesteffen/orgs", "repos_url": "https://api.github.com/users/lassesteffen/repos", "events_url": "https://api.github.com/users/lassesteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/lassesteffen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-10T03:17:30Z", "updated_at": "2020-02-17T11:11:21Z", "closed_at": "2020-02-17T11:11:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the awesome work team! Since 2.8.1 I get these warning from `graphene_django` (and many more which are similar, because I added same fields to the exclude tag\r\n\r\n1. My `orders.Project` model has a ForeignKey called `tenant` mapping to `users.Tenant`. I can access the Tenant in graphql direct from the project if I do not put it in the exclude (works even though the warning is there)\r\n```bash\r\n  warnings.warn(\r\n/usr/local/lib/python3.8/site-packages/graphene_django/types.py:76: UserWarning: Field name \"tenant\" matches an attribute on Django model \"orders.Project\" but it's not a model field so Graphene cannot determine what type it should be. Either define the type of the field on DjangoObjectType \"ProjectNode\" or remove it from the \"fields\" list.\r\n```\r\n\r\n2. Same situation as above. But this time other way around. Since I am using relay I could normally query the field by` membership_set { edges { node { id} } }` if not putting it in exclude. If adding it to exclude I get this warning.\r\n```bash\r\n  warnings.warn(\r\n/usr/local/lib/python3.8/site-packages/graphene_django/types.py:76: UserWarning: Field name \"project_set\" matches an attribute on Django model \"users.Tenant\" but it's not a model field so Graphene cannot determine what type it should be. Either define the type of the field on DjangoObjectType \"TenantNode\" or remove it from the \"fields\" list.\r\n```\r\n\r\nQuestion: Is this intended? If yes how do can I resolve it? I have read through the PRs related to the latest version (I can definitely see where this error comes from), but am still clueless.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/872", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/872/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/872/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/872/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/872", "id": 561627272, "node_id": "MDU6SXNzdWU1NjE2MjcyNzI=", "number": 872, "title": "Need custom fields in the graphql response on the basis of db values", "user": {"login": "monikadixit", "id": 19951102, "node_id": "MDQ6VXNlcjE5OTUxMTAy", "avatar_url": "https://avatars1.githubusercontent.com/u/19951102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monikadixit", "html_url": "https://github.com/monikadixit", "followers_url": "https://api.github.com/users/monikadixit/followers", "following_url": "https://api.github.com/users/monikadixit/following{/other_user}", "gists_url": "https://api.github.com/users/monikadixit/gists{/gist_id}", "starred_url": "https://api.github.com/users/monikadixit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monikadixit/subscriptions", "organizations_url": "https://api.github.com/users/monikadixit/orgs", "repos_url": "https://api.github.com/users/monikadixit/repos", "events_url": "https://api.github.com/users/monikadixit/events{/privacy}", "received_events_url": "https://api.github.com/users/monikadixit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-07T13:08:17Z", "updated_at": "2020-02-12T08:32:58Z", "closed_at": "2020-02-12T08:32:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi , I have table which has totalCpuCount, diffCount, wisbCount, totalRequests etc etc (CapacityModel) per day basis for each application , I need to calculate the avg of the day and return the response in the custom fields. I cant store these custom field in the db \r\n\r\nBasically in the response I get the list of node for each application (per date) but I want the average for the day. \r\n\r\nschema.py\r\n```python\r\nclass CapacityNode(DjangoObjectType):\r\n    deltas = generic.GenericScalar()\r\n    class Meta:\r\n        model = CapacityModel\r\n        filter_fields = ['date', 'type', 'name', 'app']\r\n        interfaces = (relay.Node,)\r\n\r\n\r\nclass Query(ObjectType):    \r\n    capacity = relay.Node.Field(CapacityNode)\r\n    all_capacity = DjangoFilterConnectionField(CapacityNode)\r\n```\r\n\r\nI need response something like \r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"allCapacity\": {\r\n      \"edges\": [\r\n        {\r\n          \"node\": {\r\n            \"date\": \"2019-10-12\",\r\n            \"avgTotalCpuCount\": 11716,\r\n            \"avgDiffCount\": -1375,\r\n            \"avgWisbCount\": 2808,\r\n            \"avgTotalRequests\": 247927\r\n            \"avgSkynetDefineInDnsCount\": 1430,\r\n            \"avgCmsNonGenesisCount\": 1547,\r\n            \"avgPoolCount\": 10,}\r\n\t\t  }\r\n\t\t}\r\n      ]\r\n\t}\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/865", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/865/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/865/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/865/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/865", "id": 557101998, "node_id": "MDU6SXNzdWU1NTcxMDE5OTg=", "number": 865, "title": "Create/Update using SerializerMutation", "user": {"login": "adrengifo", "id": 9063027, "node_id": "MDQ6VXNlcjkwNjMwMjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/9063027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrengifo", "html_url": "https://github.com/adrengifo", "followers_url": "https://api.github.com/users/adrengifo/followers", "following_url": "https://api.github.com/users/adrengifo/following{/other_user}", "gists_url": "https://api.github.com/users/adrengifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrengifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrengifo/subscriptions", "organizations_url": "https://api.github.com/users/adrengifo/orgs", "repos_url": "https://api.github.com/users/adrengifo/repos", "events_url": "https://api.github.com/users/adrengifo/events{/privacy}", "received_events_url": "https://api.github.com/users/adrengifo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-29T20:37:44Z", "updated_at": "2020-02-07T17:39:57Z", "closed_at": "2020-02-07T17:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using both \"create\"/\"update in model_operations, there is no way to distinguish from an update or a create when writing the mutation query. Looking at the codebase it seems that if Update in model_operations, and there is an input, it will try to get the object or throw a 404. \r\n\r\nCan update/create be used in one mutation class? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/864", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/864/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/864/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/864/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/864", "id": 556947936, "node_id": "MDU6SXNzdWU1NTY5NDc5MzY=", "number": 864, "title": "How to get `only_fields = ((),)` behavior? Goal: only shows fields declared in object type.", "user": {"login": "tony", "id": 26336, "node_id": "MDQ6VXNlcjI2MzM2", "avatar_url": "https://avatars0.githubusercontent.com/u/26336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tony", "html_url": "https://github.com/tony", "followers_url": "https://api.github.com/users/tony/followers", "following_url": "https://api.github.com/users/tony/following{/other_user}", "gists_url": "https://api.github.com/users/tony/gists{/gist_id}", "starred_url": "https://api.github.com/users/tony/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tony/subscriptions", "organizations_url": "https://api.github.com/users/tony/orgs", "repos_url": "https://api.github.com/users/tony/repos", "events_url": "https://api.github.com/users/tony/events{/privacy}", "received_events_url": "https://api.github.com/users/tony/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T15:45:14Z", "updated_at": "2020-05-09T11:28:20Z", "closed_at": "2020-05-09T11:28:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "First: Apologies for this if it's not descriptive or covered by graphene-django. I actually think this is something that's requested in other issues, via #671 #97\r\n\r\nWhen updating graphene-django from 2.4.0 -> 2.8.0, behavior with `only_fields = ((), )` changed\r\n\r\nI inherited this as a code snippet and don't know where it's from.\r\n\r\nWhat it used to do: Only fields that were in defined in the graphene object type would be shown.\r\n\r\nIs there a way to get the equivalent to that?\r\n\r\nAlso, is there a way to get computed fields to also show via `fields = ()`?\r\n\r\nAssume this example:\r\n\r\n```python\r\nfrom django.db import models\r\n\r\nclass Reporter(models.Model):\r\n    first_name = models.CharField(max_length=30)\r\n    last_name = models.CharField(max_length=30)\r\n    email = models.EmailField()\r\n\r\n    def website(self):\r\n        return \"https://www.google.com\"\r\n```\r\n\r\nBefore: Only showed model fields declared in object type\r\nNow: \r\n\r\n`fields = ((),)` gives:\r\n\r\n```\r\n  File \"lib/python3.7/site-packages/graphene/utils/subclass_with_meta.py\", line 52, in __init_subclass__\r\n    super_class.__init_subclass_with_meta__(**options)\r\n  File \"lib/python3.7/site-packages/graphene_django/types.py\", line 174, in __init_subclass_with_meta__\r\n    construct_fields(model, registry, fields, exclude, convert_choices_to_enum),\r\n  File \"lib/python3.7/site-packages/graphene_django/types.py\", line 42, in construct_fields\r\n    if hasattr(model, name):\r\n```\r\n\r\nChanging to `fields = []` will show all fields on model.\r\n\r\nThe problem with this is its very exhaustive maintain a blacklist of fields via `exclude`. Since the model lives elsewhere in the code, it's thought of a bit separately. (Aside: This issue also exists in `django.contrib.admin` itself.)\r\n\r\n```python\r\nclass Reporter(DjangoObjectType):\r\n    first_name = graphene.String(required=True, description='First name')\r\n    class Meta:\r\n        model = ReporterModel\r\n        fields = []\r\n\r\n# expected\r\nfields = list(Reporter._meta.fields.keys())\r\nassert fields == [\"first_name\"]\r\n```\r\n\r\nBefore: Allowed computed fields\r\nNow: `Exception: \"my_computed field\" exists on model <class 'mymodel.Reporter'> but it's not a field.`\r\n\r\n```python\r\nclass Reporter(DjangoObjectType):\r\n    website = graphene.String(required=True, description='First name')\r\n    class Meta:\r\n        model = ReporterModel\r\n        fields = ['website']\r\n\r\n# Expected\r\nfields = list(Reporter._meta.fields.keys())\r\nassert fields == [\"website\"]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/859", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/859/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/859/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/859/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/859", "id": 556550169, "node_id": "MDU6SXNzdWU1NTY1NTAxNjk=", "number": 859, "title": "How to get annotated objects in query.", "user": {"login": "marcojulioarg", "id": 11341835, "node_id": "MDQ6VXNlcjExMzQxODM1", "avatar_url": "https://avatars3.githubusercontent.com/u/11341835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcojulioarg", "html_url": "https://github.com/marcojulioarg", "followers_url": "https://api.github.com/users/marcojulioarg/followers", "following_url": "https://api.github.com/users/marcojulioarg/following{/other_user}", "gists_url": "https://api.github.com/users/marcojulioarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcojulioarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcojulioarg/subscriptions", "organizations_url": "https://api.github.com/users/marcojulioarg/orgs", "repos_url": "https://api.github.com/users/marcojulioarg/repos", "events_url": "https://api.github.com/users/marcojulioarg/events{/privacy}", "received_events_url": "https://api.github.com/users/marcojulioarg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-28T23:27:46Z", "updated_at": "2020-07-26T11:52:43Z", "closed_at": "2020-07-26T11:52:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I have the following schema:\r\n\r\n```\r\nclass EstacionType(DjangoObjectType):\r\n    class Meta:\r\n        model = Estacion\r\n\r\nclass Query(graphene.ObjectType):\r\n    estaciones = graphene.List(EstacionType)\r\n\r\n    def resolve_estaciones(self, info, **kwargs):\r\n        return Estacion.objects.annotate(\r\n            latest_gasolina_regular=Subquery(\r\n                Precio.objects.filter(estacion__place_id=OuterRef(\"pk\"),\r\n                                      producto=\"GR\").order_by('-updated').values(\"valor\")[:1]\r\n                ),\r\n            latest_gasolina_premium=Subquery(\r\n                Precio.objects.filter(estacion__place_id=OuterRef(\"pk\"),\r\n                                      producto=\"GP\").order_by('-updated').values(\"valor\")[:1]\r\n                ),\r\n            latest_diesel_regular=Subquery(\r\n                Precio.objects.filter(estacion__place_id=OuterRef(\"pk\"),\r\n                                      producto=\"DR\").order_by('-updated').values(\"valor\")[:1]\r\n                ),\r\n            latest_diesel_premium=Subquery(\r\n                Precio.objects.filter(estacion__place_id=OuterRef(\"pk\"),\r\n                                      producto=\"DP\").order_by('-updated').values(\"valor\")[:1]\r\n                ),\r\n            )\r\n\r\n\r\nschema = graphene.Schema(query=Query)\r\n```\r\nBut the annotated fields are not showing on the query with GraphiQL, any ideas? Thank you in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/857", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/857/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/857/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/857/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/857", "id": 555768750, "node_id": "MDU6SXNzdWU1NTU3Njg3NTA=", "number": 857, "title": "Cookbook example requirements file needs updating", "user": {"login": "airstrike", "id": 152812, "node_id": "MDQ6VXNlcjE1MjgxMg==", "avatar_url": "https://avatars1.githubusercontent.com/u/152812?v=4", "gravatar_id": "", "url": "https://api.github.com/users/airstrike", "html_url": "https://github.com/airstrike", "followers_url": "https://api.github.com/users/airstrike/followers", "following_url": "https://api.github.com/users/airstrike/following{/other_user}", "gists_url": "https://api.github.com/users/airstrike/gists{/gist_id}", "starred_url": "https://api.github.com/users/airstrike/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/airstrike/subscriptions", "organizations_url": "https://api.github.com/users/airstrike/orgs", "repos_url": "https://api.github.com/users/airstrike/repos", "events_url": "https://api.github.com/users/airstrike/events{/privacy}", "received_events_url": "https://api.github.com/users/airstrike/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-27T18:59:01Z", "updated_at": "2020-01-31T14:20:19Z", "closed_at": "2020-01-31T14:20:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running pip install -r requirements.txt on the cookbook example results in an error due to stale dependencies. \r\n\r\nSee\r\nhttps://github.com/graphql-python/graphene-django/blob/62ecbae61449c080d0651895840dea1ed079cf0a/examples/cookbook/requirements.txt#L3\r\n\r\n`graphql-relay 2.0.1 has requirement graphql-core<3,>=2.2 but you'll have graphql-core 3.0.2 which is incompatible.`\r\n\r\nSame message for graphene 2.1.8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/856", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/856/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/856/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/856/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/856", "id": 555160565, "node_id": "MDU6SXNzdWU1NTUxNjA1NjU=", "number": 856, "title": "Mutations from form set or inline form set", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-26T00:51:34Z", "updated_at": "2020-06-24T04:21:59Z", "closed_at": "2020-06-24T04:21:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi to everyone\r\n\r\nI'm writing an API with some complex mutations input (composite input). I already tried to use django form set and inline form set but it does not works.\r\n\r\nAny way to serialize form set and inline form set to graphene list?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/855", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/855/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/855/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/855/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/855", "id": 553220007, "node_id": "MDU6SXNzdWU1NTMyMjAwMDc=", "number": 855, "title": "All queries are firing a second request", "user": {"login": "jdgreenberger", "id": 2753924, "node_id": "MDQ6VXNlcjI3NTM5MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2753924?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdgreenberger", "html_url": "https://github.com/jdgreenberger", "followers_url": "https://api.github.com/users/jdgreenberger/followers", "following_url": "https://api.github.com/users/jdgreenberger/following{/other_user}", "gists_url": "https://api.github.com/users/jdgreenberger/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdgreenberger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdgreenberger/subscriptions", "organizations_url": "https://api.github.com/users/jdgreenberger/orgs", "repos_url": "https://api.github.com/users/jdgreenberger/repos", "events_url": "https://api.github.com/users/jdgreenberger/events{/privacy}", "received_events_url": "https://api.github.com/users/jdgreenberger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-21T23:53:25Z", "updated_at": "2020-01-29T11:14:47Z", "closed_at": "2020-01-22T18:19:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not totally sure when this problem emerged, but it appears as though Graphene Django is generating a second duplicate request. I'm using Django 3. Here are the steps I've taken to debug:\r\n\r\n1. Established that only one http request is sent to my Django server, yet resolvers are fired twice.\r\n2. Set the `graphql` url to point to a custom view that subclasses GraphQLView. When I immediately return from the `dispatch` method, there is only one request processed.\r\n3. If I switch to return the superclass GraphQLView.dispatch, two requests are processed.\r\n4. If I set the `graphql` url to point directly to the lib GraphQLView and add print statements in the source code, I see two request objects processed in the dispatch method.\r\n\r\nDo you have any idea what's happening? My best guess based on the above steps would be that graphene is somehow triggering another duplicate request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/852", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/852/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/852/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/852/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/852", "id": 548594628, "node_id": "MDU6SXNzdWU1NDg1OTQ2Mjg=", "number": 852, "title": "How to create/update related models in one mutation ", "user": {"login": "tkrugg", "id": 2982512, "node_id": "MDQ6VXNlcjI5ODI1MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2982512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkrugg", "html_url": "https://github.com/tkrugg", "followers_url": "https://api.github.com/users/tkrugg/followers", "following_url": "https://api.github.com/users/tkrugg/following{/other_user}", "gists_url": "https://api.github.com/users/tkrugg/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkrugg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkrugg/subscriptions", "organizations_url": "https://api.github.com/users/tkrugg/orgs", "repos_url": "https://api.github.com/users/tkrugg/repos", "events_url": "https://api.github.com/users/tkrugg/events{/privacy}", "received_events_url": "https://api.github.com/users/tkrugg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-01-12T16:37:04Z", "updated_at": "2020-02-14T15:06:59Z", "closed_at": "2020-02-02T09:34:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nI'm struggling to write a mutation that does the following:\r\n- creates/update a model \r\n- creates/updates related models \r\n\r\nIn short, \r\n\r\n- when I send the following mutation:\r\n  ```graphql\r\n  mutation MyMutation {\r\n   createTeam(\r\n     input: {\r\n       name: \"Avengers\"\r\n       players: [\r\n         { firstName: \"Iron\", lastName: \"Man\" }\r\n         { firstName: \"Captain\", lastName: \"America\" }\r\n       ]\r\n     }\r\n   ) {\r\n     id\r\n   }\r\n  }\r\n\r\n  ```\r\n- I expect to see 1 team and 2 players created,\r\n- Instead, I see 1 team created, 0 players created.\r\n  \r\nI have the following models and DRF serialisers:\r\n\r\n```py\r\n# models.py\r\nfrom django.db import models\r\n\r\n\r\nclass Team(models.Model):\r\n    name = models.CharField(max_length=200)\r\n\r\n\r\nclass Player(models.Model):\r\n    first_name = models.CharField(max_length=200)\r\n    last_name = models.CharField(max_length=200)\r\n    team = models.ForeignKey(Team, related_name='team', on_delete=models.CASCADE)\r\n\r\n\r\n\r\n# serializers.py\r\nfrom rest_framework import serializers\r\nfrom .models import Payer, Team\r\n\r\n\r\nclass PlayerSerializer(serializers.ModelSerializer):\r\n    class Meta:\r\n        model = Player\r\n        fields = ['id', 'first_name', 'last_name', 'team']\r\n\r\n\r\nclass TeamSerializer(serializers.ModelSerializer):\r\n    players = PlayerSerializer(many=True, read_only=True)\r\n\r\n    class Meta:\r\n        model = Team\r\n        fields = ['id', 'name', 'players']\r\n```\r\n\r\n\r\nI used the DRF serializers to create my `createTeam` mutation.\r\n\r\n\r\n```python\r\n# types\r\nclass TeamType(DjangoObjectType):\r\n    class Meta:\r\n        model = Team\r\n\r\n\r\nclass PlayerType(DjangoObjectType):\r\n    class Meta:\r\n        model = Player\r\n\r\n\r\n\r\n\r\n# mutations\r\nclass TeamMutation(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = TeamSerializer\r\n        model_operations = ['create', 'update']\r\n        lookup_field = 'id'\r\n\r\n\r\nclass PlayerMutation(SerializerMutation):\r\n    class Meta:\r\n        serializer_class = PlayerSerializer\r\n        model_operations = ['create', 'update']\r\n        lookup_field = 'id'\r\n\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    create_team = TeamMutation.Field()\r\n    create_player = PlayerMutation.Field()\r\n``` \r\nWhat am I not doing right? Sorry for the long post. Thank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/850", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/850/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/850/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/850/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/850", "id": 547782220, "node_id": "MDU6SXNzdWU1NDc3ODIyMjA=", "number": 850, "title": "Add custom header support to GraphiQL", "user": {"login": "MythicManiac", "id": 8225825, "node_id": "MDQ6VXNlcjgyMjU4MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/8225825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MythicManiac", "html_url": "https://github.com/MythicManiac", "followers_url": "https://api.github.com/users/MythicManiac/followers", "following_url": "https://api.github.com/users/MythicManiac/following{/other_user}", "gists_url": "https://api.github.com/users/MythicManiac/gists{/gist_id}", "starred_url": "https://api.github.com/users/MythicManiac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MythicManiac/subscriptions", "organizations_url": "https://api.github.com/users/MythicManiac/orgs", "repos_url": "https://api.github.com/users/MythicManiac/repos", "events_url": "https://api.github.com/users/MythicManiac/events{/privacy}", "received_events_url": "https://api.github.com/users/MythicManiac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458948, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDg=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/help%20wanted", "name": "help wanted", "color": "128A0C", "default": true, "description": null}, {"id": 444458947, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDc=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%E2%9C%A8enhancement", "name": "\u2728enhancement", "color": "84b6eb", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-09T23:32:44Z", "updated_at": "2020-08-07T09:13:27Z", "closed_at": "2020-08-07T09:13:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Related issue: https://github.com/graphql/graphiql/issues/500\r\n\r\nGraphiQL by default does not implement a way to pass custom request headers, which are still fairly commonly used for example by authentication middleware. It would be nice if graphene-django's built-in GraphiQL view had support for doing authenticated requests with custom HTTP headers.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/849", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/849/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/849/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/849/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/849", "id": 546963262, "node_id": "MDU6SXNzdWU1NDY5NjMyNjI=", "number": 849, "title": "Abstract model \"self\" foreign key has wrong type", "user": {"login": "p7g", "id": 22457086, "node_id": "MDQ6VXNlcjIyNDU3MDg2", "avatar_url": "https://avatars3.githubusercontent.com/u/22457086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/p7g", "html_url": "https://github.com/p7g", "followers_url": "https://api.github.com/users/p7g/followers", "following_url": "https://api.github.com/users/p7g/following{/other_user}", "gists_url": "https://api.github.com/users/p7g/gists{/gist_id}", "starred_url": "https://api.github.com/users/p7g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/p7g/subscriptions", "organizations_url": "https://api.github.com/users/p7g/orgs", "repos_url": "https://api.github.com/users/p7g/repos", "events_url": "https://api.github.com/users/p7g/events{/privacy}", "received_events_url": "https://api.github.com/users/p7g/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-08T16:20:11Z", "updated_at": "2020-06-06T16:42:01Z", "closed_at": "2020-06-06T16:42:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Apologies if this is a duplicate.\r\n\r\nIf you have an abstract model with a foreign key to `'self'`, the type of the resulting graphql field in a subclass is always the type of the first one in the schema. I think this might be because the django fields hash to the same value, so subclasses' fields use the existing graphene field in the registry.\r\n\r\nHere is a minimum reproduction of the issue:\r\n\r\n```python\r\nclass A(Model):\r\n\tclass Meta:\r\n\t\tabstract = True\r\n\r\n\tforeign = ForeignKey('self', on_delete=CASCADE)\r\n\r\nclass B(A): pass\r\nclass C(A): pass\r\n\r\nclass BNode(graphene_django.DjangoObjectType):\r\n\tclass Meta:\r\n\t\tmodel = B\r\n\r\nclass CNode(graphene_django.DjangoObjectType):\r\n\tclass Meta:\r\n\t\tmodel = C\r\n\r\nclass Schema(graphene.ObjectType):\r\n\tb = graphene.Field(BNode)\r\n\tc = graphene.Field(CNode)\r\n```\r\n\r\nAnd here is an excerpt of the resulting schema (note that `CNode`'s `foreign` field has the type `BNode`):\r\n\r\n```json\r\n{\r\n    \"fields\": [\r\n    {\r\n        \"args\": [],\r\n        \"deprecationReason\": null,\r\n        \"description\": \"\",\r\n        \"isDeprecated\": false,\r\n        \"name\": \"foreign\",\r\n        \"type\": {\r\n        \"kind\": \"NON_NULL\",\r\n        \"name\": null,\r\n        \"ofType\": {\r\n            \"kind\": \"OBJECT\",\r\n            \"name\": \"BNode\",\r\n            \"ofType\": null\r\n        }\r\n        }\r\n    }\r\n    ],\r\n    \"kind\": \"OBJECT\",\r\n    \"name\": \"CNode\",\r\n}\r\n```\r\n\r\nThe current workaround is something like this:\r\n\r\n```python\r\nclass CNode(graphene_django.DjangoObjectType):\r\n\tclass Meta:\r\n\t\tmodel = C\r\n\r\n\tforeign = graphene.Field('whateverthismoduleis.CNode')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/846", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/846/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/846/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/846/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/846", "id": 545841838, "node_id": "MDU6SXNzdWU1NDU4NDE4Mzg=", "number": 846, "title": "Any example for round trip (N+1) problem solution with Relay & filter ?", "user": {"login": "zayazayazaya", "id": 40307019, "node_id": "MDQ6VXNlcjQwMzA3MDE5", "avatar_url": "https://avatars1.githubusercontent.com/u/40307019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayazayazaya", "html_url": "https://github.com/zayazayazaya", "followers_url": "https://api.github.com/users/zayazayazaya/followers", "following_url": "https://api.github.com/users/zayazayazaya/following{/other_user}", "gists_url": "https://api.github.com/users/zayazayazaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayazayazaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayazayazaya/subscriptions", "organizations_url": "https://api.github.com/users/zayazayazaya/orgs", "repos_url": "https://api.github.com/users/zayazayazaya/repos", "events_url": "https://api.github.com/users/zayazayazaya/events{/privacy}", "received_events_url": "https://api.github.com/users/zayazayazaya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-06T17:20:56Z", "updated_at": "2020-08-17T00:25:11Z", "closed_at": "2020-08-17T00:25:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/845", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/845/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/845/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/845/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/845", "id": 545244823, "node_id": "MDU6SXNzdWU1NDUyNDQ4MjM=", "number": 845, "title": "v2.8.0 not compatible with Django 3.0.2 regarding six", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-04T05:39:24Z", "updated_at": "2020-04-09T09:54:10Z", "closed_at": "2020-04-09T09:54:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I upgraded Django and graphene django but when I make a request I get this error \r\n```\r\nCould not import 'fieldrecords.schema.schema' for Graphene setting 'SCHEMA'. ImportError: cannot import name 'six'.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/844", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/844/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/844/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/844/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/844", "id": 544838665, "node_id": "MDU6SXNzdWU1NDQ4Mzg2NjU=", "number": 844, "title": "Query all the models fields and not the requested fields", "user": {"login": "aguaguilar", "id": 20654080, "node_id": "MDQ6VXNlcjIwNjU0MDgw", "avatar_url": "https://avatars0.githubusercontent.com/u/20654080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aguaguilar", "html_url": "https://github.com/aguaguilar", "followers_url": "https://api.github.com/users/aguaguilar/followers", "following_url": "https://api.github.com/users/aguaguilar/following{/other_user}", "gists_url": "https://api.github.com/users/aguaguilar/gists{/gist_id}", "starred_url": "https://api.github.com/users/aguaguilar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aguaguilar/subscriptions", "organizations_url": "https://api.github.com/users/aguaguilar/orgs", "repos_url": "https://api.github.com/users/aguaguilar/repos", "events_url": "https://api.github.com/users/aguaguilar/events{/privacy}", "received_events_url": "https://api.github.com/users/aguaguilar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T03:42:13Z", "updated_at": "2020-01-03T04:17:27Z", "closed_at": "2020-01-03T04:17:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi graphene-django users!\r\n\r\nI have two models:\r\n```\r\nclass Type(models.Model):\r\n    name = models.CharField(max_length=255)\r\n\r\n    def __str__(self):\r\n        return f'{self.name}'\r\n\r\n\r\nclass Pet(models.Model):\r\n    name = models.CharField(max_length=255)\r\n    color = models.CharField(max_length=255)\r\n    type = models.ForeignKey(Type, related_name=\"pets\", on_delete=models.CASCADE,\r\n                             null=True, blank=True)\r\n\r\n    def __str__(self):\r\n        return f'{self.type.name} {self.name}'\r\n```\r\nThe schema:\r\n```\r\nclass Type(DjangoObjectType):\r\n    class Meta:\r\n        model = TypeModel\r\n\r\n    @classmethod\r\n    def get_node(cls, info, id):\r\n        return TypeModel.objects.get(id=id)\r\n\r\n\r\nclass TypeConnector(graphene.Connection):\r\n    count = graphene.Int()\r\n\r\n    class Meta:\r\n        node = Type\r\n\r\n    def resolve_count(root, info):\r\n        return len(root.edges)\r\n\r\n\r\nclass Pet(DjangoObjectType):\r\n    class Meta:\r\n        model = PetModel\r\n        interfaces = (relay.Node,)\r\n\r\n    @classmethod\r\n    def get_node(cls, info, id):\r\n        return PetModel.objects.get(id=id)\r\n\r\n\r\nclass PetConnector(graphene.Connection):\r\n    count = graphene.Int()\r\n\r\n    class Meta:\r\n        node = Pet\r\n\r\n    def resolve_count(root, info):\r\n        return len(root.edges)\r\n\r\n\r\nclass Schema(ObjectType):\r\n    pets = graphene.ConnectionField(PetConnector)\r\n    types = graphene.ConnectionField(TypeConnector)\r\n\r\n    def resolve_pets(self, info, **kwargs):\r\n        # TODO: Query for requested fields only\r\n        return PetModel.objects.all()\r\n\r\n    def resolve_types(self, info, **kwargs):\r\n        # TODO: Query for requested fields only\r\n        return TypeModel.objects.all()\r\n\r\n```\r\n\r\nOne of the goals of GraphQL is the performance. To make it the GraphQL must request to the database only the requested fields via GraphQL request (e.g: GraphiQL)\r\n\r\nIf I request the following query:\r\n```\r\n{\r\n  pets {\r\n    edges {\r\n      node {\r\n        color\r\n        type {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\ngraphene-django library generate the follow SQL:\r\n```\r\n2020-01-03 03:16:18.184 UTC [136] LOG:  statement: SELECT \"pets_pet\".\"id\", \"pets_pet\".\"name\", \"pets_pet\".\"color\", \"pets_pet\".\"type_id\" FROM \"pets_pet\"\r\n2020-01-03 03:16:18.189 UTC [136] LOG:  statement: SELECT \"pets_type\".\"id\", \"pets_type\".\"name\" FROM \"pets_type\" WHERE \"pets_type\".\"id\" = 1 LIMIT 21\r\n```\r\nIt gets all the fields of the models! Is the same of the API Rest problems and does not conest with the GraphQL guidelines.\r\n\r\nIf I request the field `color` from the `pets` model I hope that the query will be:\r\n```\r\nSELECT \"pets_pet\".\"color\" FROM \"pets_pet\"\r\n```\r\nAnd... how does foreign key resolve with this approach?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/843", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/843/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/843/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/843/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/843", "id": 544112333, "node_id": "MDU6SXNzdWU1NDQxMTIzMzM=", "number": 843, "title": "AssertionError: Found different types with the same name in the schema: ...", "user": {"login": "arielnmz", "id": 24735547, "node_id": "MDQ6VXNlcjI0NzM1NTQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/24735547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielnmz", "html_url": "https://github.com/arielnmz", "followers_url": "https://api.github.com/users/arielnmz/followers", "following_url": "https://api.github.com/users/arielnmz/following{/other_user}", "gists_url": "https://api.github.com/users/arielnmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielnmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielnmz/subscriptions", "organizations_url": "https://api.github.com/users/arielnmz/orgs", "repos_url": "https://api.github.com/users/arielnmz/repos", "events_url": "https://api.github.com/users/arielnmz/events{/privacy}", "received_events_url": "https://api.github.com/users/arielnmz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-31T07:18:14Z", "updated_at": "2020-03-18T15:21:47Z", "closed_at": "2020-03-13T10:22:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I know this has been submitted a million times, and I know there are several solutions BUT, despite all things it seems there still isn't a way to actually know *where* the duplicates come from, e.g. The error message would read:\r\n\r\n    AssertionError: Found different types with the same name in the schema: status, status.\r\n\r\nBut that doesn't give much information as to where do they come from. This is specially frustrating when plugging in projects. A suggestion would be to print the canonical name of the class the type is based on? something like 'my_module.types.ProblematicType'.\r\n\r\nAnyway, this issue arises specifically because I defined a Type based on an Enum on my types module and I'm using that everywhere, but still graphql complains about different types having the same name. I double checked and I don't even use that name anywhere in my project, so it must be a conflicting dependency, but which one? where is that type being defined? The only way to know would be unplugging all dependencies and start plugging them one by one to find the offenders but this would be so inefficient and frankly, very stupid.\r\n\r\n(in case you wonder I also searched in my `site-packages` and found nothing, so it must be auto generated somewhere...)\r\n\r\nI'm using these packages:\r\ndjango==2.2.9\r\ngraphene-django==2.7.1\r\ngraphene==2.1.8\r\n\r\nAnd my types worked just fine with these versions:\r\ndjango==2.1.5\r\ngraphene-django==2.2.0\r\ngraphene==2.1.3", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/840", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/840/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/840/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/840/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/840", "id": 543366354, "node_id": "MDU6SXNzdWU1NDMzNjYzNTQ=", "number": 840, "title": "Validate Meta.fields and Meta.exclude on DjangoObjectType", "user": {"login": "berekuk", "id": 89368, "node_id": "MDQ6VXNlcjg5MzY4", "avatar_url": "https://avatars0.githubusercontent.com/u/89368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/berekuk", "html_url": "https://github.com/berekuk", "followers_url": "https://api.github.com/users/berekuk/followers", "following_url": "https://api.github.com/users/berekuk/following{/other_user}", "gists_url": "https://api.github.com/users/berekuk/gists{/gist_id}", "starred_url": "https://api.github.com/users/berekuk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/berekuk/subscriptions", "organizations_url": "https://api.github.com/users/berekuk/orgs", "repos_url": "https://api.github.com/users/berekuk/repos", "events_url": "https://api.github.com/users/berekuk/events{/privacy}", "received_events_url": "https://api.github.com/users/berekuk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-29T11:45:02Z", "updated_at": "2019-12-31T13:55:46Z", "closed_at": "2019-12-31T13:55:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "tl;dr: DjangoObjectType ignores all unknown values in `Meta.fields`. It should compare the fields list with the available Model's fields instead.\r\n\r\n---\r\n\r\nI'm in the process of rewriting DRF-based backend to graphene-django, and I was surprised when my graphene-django generated schema was silently missing the fields I specified in `fields`.\r\n\r\n(I'm copy-pasting `fields` from DRF serializers to DjangoObjectType's Meta class).\r\n\r\nTurns out some of these fields were implemented as properties or methods on models, and I'm ok with writing custom resolvers for those (otherwise there's no way to detect types, at least in the absence of type hints), but I didn't expect DjangoObjectType to quietly accept unknown values.\r\n\r\nI believe the reason for this is that `graphene_django.types.construct_fields` iterates over model's fields, but it could/should iterate over `only_fields` too.\r\n\r\nImplementing the same check for `exclude` also seems like a good idea to me (otherwise you could make a typo in `exclude`, but never notice it until it's too late).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/834", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/834/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/834/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/834/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/834", "id": 542190329, "node_id": "MDU6SXNzdWU1NDIxOTAzMjk=", "number": 834, "title": "How can I integrate with GraphiQL explorer and GraphQL Voyager?", "user": {"login": "zayazayazaya", "id": 40307019, "node_id": "MDQ6VXNlcjQwMzA3MDE5", "avatar_url": "https://avatars1.githubusercontent.com/u/40307019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayazayazaya", "html_url": "https://github.com/zayazayazaya", "followers_url": "https://api.github.com/users/zayazayazaya/followers", "following_url": "https://api.github.com/users/zayazayazaya/following{/other_user}", "gists_url": "https://api.github.com/users/zayazayazaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayazayazaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayazayazaya/subscriptions", "organizations_url": "https://api.github.com/users/zayazayazaya/orgs", "repos_url": "https://api.github.com/users/zayazayazaya/repos", "events_url": "https://api.github.com/users/zayazayazaya/events{/privacy}", "received_events_url": "https://api.github.com/users/zayazayazaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-24T18:24:42Z", "updated_at": "2020-01-13T22:42:46Z", "closed_at": "2019-12-26T14:07:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/833", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/833/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/833/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/833/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/833", "id": 542190219, "node_id": "MDU6SXNzdWU1NDIxOTAyMTk=", "number": 833, "title": "Any native support for AND, OR for filters?", "user": {"login": "zayazayazaya", "id": 40307019, "node_id": "MDQ6VXNlcjQwMzA3MDE5", "avatar_url": "https://avatars1.githubusercontent.com/u/40307019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayazayazaya", "html_url": "https://github.com/zayazayazaya", "followers_url": "https://api.github.com/users/zayazayazaya/followers", "following_url": "https://api.github.com/users/zayazayazaya/following{/other_user}", "gists_url": "https://api.github.com/users/zayazayazaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayazayazaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayazayazaya/subscriptions", "organizations_url": "https://api.github.com/users/zayazayazaya/orgs", "repos_url": "https://api.github.com/users/zayazayazaya/repos", "events_url": "https://api.github.com/users/zayazayazaya/events{/privacy}", "received_events_url": "https://api.github.com/users/zayazayazaya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-24T18:24:03Z", "updated_at": "2020-06-06T12:11:07Z", "closed_at": "2020-05-23T01:00:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/832", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/832/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/832/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/832/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/832", "id": 542190123, "node_id": "MDU6SXNzdWU1NDIxOTAxMjM=", "number": 832, "title": "In and Range filter is not working.", "user": {"login": "zayazayazaya", "id": 40307019, "node_id": "MDQ6VXNlcjQwMzA3MDE5", "avatar_url": "https://avatars1.githubusercontent.com/u/40307019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayazayazaya", "html_url": "https://github.com/zayazayazaya", "followers_url": "https://api.github.com/users/zayazayazaya/followers", "following_url": "https://api.github.com/users/zayazayazaya/following{/other_user}", "gists_url": "https://api.github.com/users/zayazayazaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayazayazaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayazayazaya/subscriptions", "organizations_url": "https://api.github.com/users/zayazayazaya/orgs", "repos_url": "https://api.github.com/users/zayazayazaya/repos", "events_url": "https://api.github.com/users/zayazayazaya/events{/privacy}", "received_events_url": "https://api.github.com/users/zayazayazaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-24T18:23:21Z", "updated_at": "2019-12-26T14:12:18Z", "closed_at": "2019-12-26T14:12:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/831", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/831/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/831/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/831/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/831", "id": 542190009, "node_id": "MDU6SXNzdWU1NDIxOTAwMDk=", "number": 831, "title": "How can we solve round trip (N+1) problem with Relay & filter    ?", "user": {"login": "zayazayazaya", "id": 40307019, "node_id": "MDQ6VXNlcjQwMzA3MDE5", "avatar_url": "https://avatars1.githubusercontent.com/u/40307019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayazayazaya", "html_url": "https://github.com/zayazayazaya", "followers_url": "https://api.github.com/users/zayazayazaya/followers", "following_url": "https://api.github.com/users/zayazayazaya/following{/other_user}", "gists_url": "https://api.github.com/users/zayazayazaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayazayazaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayazayazaya/subscriptions", "organizations_url": "https://api.github.com/users/zayazayazaya/orgs", "repos_url": "https://api.github.com/users/zayazayazaya/repos", "events_url": "https://api.github.com/users/zayazayazaya/events{/privacy}", "received_events_url": "https://api.github.com/users/zayazayazaya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-24T18:22:33Z", "updated_at": "2020-01-06T17:20:22Z", "closed_at": "2019-12-26T14:10:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/830", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/830/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/830/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/830/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/830", "id": 540438789, "node_id": "MDU6SXNzdWU1NDA0Mzg3ODk=", "number": 830, "title": "Mutation input from Form/ModelForm", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T17:01:03Z", "updated_at": "2020-05-17T18:26:08Z", "closed_at": "2020-05-17T18:26:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings\r\n\r\nI'm working in a mutation with complex input, that is a input data with nesting objects.\r\nI found `DjangoFormInputObjectType` in graphene-django source code, but it's commented and doesn't work.\r\n\r\nMy idea is use `graphene.InputObjectType` input classes, but I don't know how to make a InputObjectType from django Form/ModelForm :(\r\n\r\nAny suggestions?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/824", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/824/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/824/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/824/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/824", "id": 533287469, "node_id": "MDU6SXNzdWU1MzMyODc0Njk=", "number": 824, "title": "How to test APIs that require JWT?", "user": {"login": "prabhupant", "id": 19776278, "node_id": "MDQ6VXNlcjE5Nzc2Mjc4", "avatar_url": "https://avatars1.githubusercontent.com/u/19776278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabhupant", "html_url": "https://github.com/prabhupant", "followers_url": "https://api.github.com/users/prabhupant/followers", "following_url": "https://api.github.com/users/prabhupant/following{/other_user}", "gists_url": "https://api.github.com/users/prabhupant/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabhupant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabhupant/subscriptions", "organizations_url": "https://api.github.com/users/prabhupant/orgs", "repos_url": "https://api.github.com/users/prabhupant/repos", "events_url": "https://api.github.com/users/prabhupant/events{/privacy}", "received_events_url": "https://api.github.com/users/prabhupant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-05T11:18:27Z", "updated_at": "2019-12-26T11:45:19Z", "closed_at": "2019-12-26T11:45:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been following the code as mentioned in the docs [here](https://docs.graphene-python.org/projects/django/en/latest/testing/) but its not working.I have the following issues/questions-\r\n\r\n1. As Django carries testing in an ephemeral database, how can I create a user so that I can validate JWT auth in all the APIs? This is the error log of a test query\r\n```\r\n404                                                                                                                                                                                                                \r\nfunctools.partial(<bound method Client._parse_json of <django.test.client.Client object at 0x7f0c87fb70f0>>, <HttpResponseNotFound status_code=404, \"text/html\">)\r\n```\r\n\r\n2. The `test_query_with_variables` function is not working and throws this error \r\n`TypeError: query() got an unexpected keyword argument 'variables'`\r\n \r\nPlease help with testing APIs that need JWT auth and also how to write test cases for them.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/823", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/823/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/823/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/823/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/823", "id": 533144471, "node_id": "MDU6SXNzdWU1MzMxNDQ0NzE=", "number": 823, "title": "DjangoModelFormMutation receive uncoded ID", "user": {"login": "javialon26", "id": 8138654, "node_id": "MDQ6VXNlcjgxMzg2NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/8138654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javialon26", "html_url": "https://github.com/javialon26", "followers_url": "https://api.github.com/users/javialon26/followers", "following_url": "https://api.github.com/users/javialon26/following{/other_user}", "gists_url": "https://api.github.com/users/javialon26/gists{/gist_id}", "starred_url": "https://api.github.com/users/javialon26/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javialon26/subscriptions", "organizations_url": "https://api.github.com/users/javialon26/orgs", "repos_url": "https://api.github.com/users/javialon26/repos", "events_url": "https://api.github.com/users/javialon26/events{/privacy}", "received_events_url": "https://api.github.com/users/javialon26/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-05T06:05:27Z", "updated_at": "2020-08-15T19:10:11Z", "closed_at": "2020-08-15T19:10:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi everyone\r\nAs already we know, queries with relay interface gives ID fields as base64; but form based mutations receive ID as natural string. Can we change to receive ID's as base64 like relay?\r\n\r\n```\r\nclass Genre(models.Model):\r\n  name = models.CharField(max_length=200)\r\n\r\n  def __str__(self):\r\n    return self.name\r\n\r\nclass GenreForm(forms.ModelForm):\r\n  class Meta:\r\n    model = Genre\r\n    fields = ['name']\r\n\r\nclass GenreNode(DjangoObjectType):\r\n  class Meta:\r\n    model = Genre\r\n    filter_fields = ['name']\r\n    interfaces = (relay.Node, )\r\n\r\nclass Queries(ObjectType):\r\n  genres = DjangoFilterConnectionField(GenreNode)\r\n  genre = relay.Node.Field(GenreNode)\r\n\r\nclass GenreMutation(DjangoModelFormMutation):\r\n  genre = Field(GenreNode)\r\n\r\n  class Meta:\r\n    form_class = GenreForm\r\n\r\nclass Mutations():\r\n  genre_mutation = GenreMutation.Field()\r\n```\r\n\r\nWhen you send the id as a relay id, you got this error:\r\n```\"invalid literal for int() with base 10: 'Q2F0ZWdvcnlOb2RlOjEy'\"```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/819", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/819/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/819/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/819/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/819", "id": 531604421, "node_id": "MDU6SXNzdWU1MzE2MDQ0MjE=", "number": 819, "title": "Return type of SerializerMutation", "user": {"login": "oaosman84", "id": 1301465, "node_id": "MDQ6VXNlcjEzMDE0NjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1301465?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oaosman84", "html_url": "https://github.com/oaosman84", "followers_url": "https://api.github.com/users/oaosman84/followers", "following_url": "https://api.github.com/users/oaosman84/following{/other_user}", "gists_url": "https://api.github.com/users/oaosman84/gists{/gist_id}", "starred_url": "https://api.github.com/users/oaosman84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oaosman84/subscriptions", "organizations_url": "https://api.github.com/users/oaosman84/orgs", "repos_url": "https://api.github.com/users/oaosman84/repos", "events_url": "https://api.github.com/users/oaosman84/events{/privacy}", "received_events_url": "https://api.github.com/users/oaosman84/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-02T23:22:46Z", "updated_at": "2020-08-08T00:08:23Z", "closed_at": "2020-03-16T00:25:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "It looks like the implementation of `SerializerMutation` takes the fields from the Serializer and adds them directly to the output type of the GraphQL Mutation. For instance, if I have a mutation that affects a `User` model, and I have a SerializerMutation from that, it will have output type of `UserMutationPayload` and the fields on `User` (e.g. name, id, etc) will be added directly to `UserMutationPayload`.\r\n\r\nThis is a bit different than most mutation return types (for instance, `DjangoModelFormMutation` would have a `user` object under `UserMutationPayload` with type `User`). It also breaks a bunch of caching behavior for clients like Apollo that depend on having the right `__typename` for objects that are returned.\r\n\r\nFixing this would require a breaking change to `SerializerMutation`, which I'd be open to implementing (we'd prob reuse a bunch of logic from `DjangoModelFormMutation`), so I don't know how people feel about that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/818", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/818/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/818/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/818/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/818", "id": 530622793, "node_id": "MDU6SXNzdWU1MzA2MjI3OTM=", "number": 818, "title": "@BossGrand  I have a similar issue, it errors out this `graphql.error.located_error.GraphQLLocatedError: 'ImageFieldFile' object has no attribute 'decode'`", "user": {"login": "udemezue01", "id": 16034417, "node_id": "MDQ6VXNlcjE2MDM0NDE3", "avatar_url": "https://avatars1.githubusercontent.com/u/16034417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udemezue01", "html_url": "https://github.com/udemezue01", "followers_url": "https://api.github.com/users/udemezue01/followers", "following_url": "https://api.github.com/users/udemezue01/following{/other_user}", "gists_url": "https://api.github.com/users/udemezue01/gists{/gist_id}", "starred_url": "https://api.github.com/users/udemezue01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udemezue01/subscriptions", "organizations_url": "https://api.github.com/users/udemezue01/orgs", "repos_url": "https://api.github.com/users/udemezue01/repos", "events_url": "https://api.github.com/users/udemezue01/events{/privacy}", "received_events_url": "https://api.github.com/users/udemezue01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-11-30T19:53:11Z", "updated_at": "2020-06-11T09:03:04Z", "closed_at": "2020-06-11T09:03:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "@BossGrand  I have a similar issue, it errors out this `graphql.error.located_error.GraphQLLocatedError: 'ImageFieldFile' object has no attribute 'decode'`\r\n\r\n_Originally posted by @horiyomi in https://github.com/graphql-python/graphene-django/issues/769#issuecomment-560012948_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/817", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/817/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/817/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/817/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/817", "id": 530452947, "node_id": "MDU6SXNzdWU1MzA0NTI5NDc=", "number": 817, "title": "Add ability to set headers in GraphQLTestCases", "user": {"login": "curlywurlycraig", "id": 5550263, "node_id": "MDQ6VXNlcjU1NTAyNjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/5550263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/curlywurlycraig", "html_url": "https://github.com/curlywurlycraig", "followers_url": "https://api.github.com/users/curlywurlycraig/followers", "following_url": "https://api.github.com/users/curlywurlycraig/following{/other_user}", "gists_url": "https://api.github.com/users/curlywurlycraig/gists{/gist_id}", "starred_url": "https://api.github.com/users/curlywurlycraig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/curlywurlycraig/subscriptions", "organizations_url": "https://api.github.com/users/curlywurlycraig/orgs", "repos_url": "https://api.github.com/users/curlywurlycraig/repos", "events_url": "https://api.github.com/users/curlywurlycraig/events{/privacy}", "received_events_url": "https://api.github.com/users/curlywurlycraig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-29T18:09:11Z", "updated_at": "2019-12-26T11:45:19Z", "closed_at": "2019-12-26T11:45:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When calling `self.query` within tests, there is currently no way to specify headers. It would be helpful to be able to specify headers in cases where, e.g., `GraphQLView` is overridden to check the `Authorization` header.\r\n\r\nI've identified the line that needs to be updated:\r\n\r\nhttps://github.com/graphql-python/graphene-django/blob/254e59c36fa289ddf86b32b528afeae54dfa1bb1/graphene_django/utils/testing.py#L56", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/815", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/815/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/815/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/815/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/815", "id": 530097019, "node_id": "MDU6SXNzdWU1MzAwOTcwMTk=", "number": 815, "title": "DjangoFilterConnectionField ignoring DjangoObjectType's get_queryset", "user": {"login": "bellini666", "id": 134025, "node_id": "MDQ6VXNlcjEzNDAyNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/134025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bellini666", "html_url": "https://github.com/bellini666", "followers_url": "https://api.github.com/users/bellini666/followers", "following_url": "https://api.github.com/users/bellini666/following{/other_user}", "gists_url": "https://api.github.com/users/bellini666/gists{/gist_id}", "starred_url": "https://api.github.com/users/bellini666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bellini666/subscriptions", "organizations_url": "https://api.github.com/users/bellini666/orgs", "repos_url": "https://api.github.com/users/bellini666/repos", "events_url": "https://api.github.com/users/bellini666/events{/privacy}", "received_events_url": "https://api.github.com/users/bellini666/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-28T23:10:57Z", "updated_at": "2019-11-29T09:13:17Z", "closed_at": "2019-11-29T09:13:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The PR #796 broke DjangoFilterConnectionField making it always get the raw queryset from the model to apply the filters in it.\r\n\r\nI noted this when trying to update my extension (https://github.com/0soft/graphene-django-plus/tree/master/graphene_django_plus) to work with 2.7.0 and seeing some tests failing. There I override DjangoObjectType's get_queryset method to add some permissioning checks and my tests broke when a query that should only return some objects that the test user had access returned everything.\r\n\r\nIMO this is a critical bug as people doing things like this (e.g. filtering objects for the current user) could potentially leak unwanted data.\r\n\r\nI'm sending a PR at this moment and hope you can release a quick fix ASAP.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/814", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/814/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/814/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/814/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/814", "id": 529996142, "node_id": "MDU6SXNzdWU1Mjk5OTYxNDI=", "number": 814, "title": "Django will drop `django.utils.six` in 3.0 ", "user": {"login": "Rocamonde", "id": 7037935, "node_id": "MDQ6VXNlcjcwMzc5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/7037935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rocamonde", "html_url": "https://github.com/Rocamonde", "followers_url": "https://api.github.com/users/Rocamonde/followers", "following_url": "https://api.github.com/users/Rocamonde/following{/other_user}", "gists_url": "https://api.github.com/users/Rocamonde/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rocamonde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rocamonde/subscriptions", "organizations_url": "https://api.github.com/users/Rocamonde/orgs", "repos_url": "https://api.github.com/users/Rocamonde/repos", "events_url": "https://api.github.com/users/Rocamonde/events{/privacy}", "received_events_url": "https://api.github.com/users/Rocamonde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-28T16:14:55Z", "updated_at": "2019-11-28T19:29:23Z", "closed_at": "2019-11-28T19:29:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "`django.utils.six` has been removed in Django 3.0rc1. Django users running version 3.0 won't be able to run `graphene-django`. (`settings.py` line 18: `from django.utils import six`)\r\n\r\nEither we depend directly on `six` or we drop Python 2 compatibility and all the Django versions that still support it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/813", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/813/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/813/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/813/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/813", "id": 529918078, "node_id": "MDU6SXNzdWU1Mjk5MTgwNzg=", "number": 813, "title": "Exception at /graphql Don't know how to convert the Django field routes.Route.route (<class 'django.contrib.gis.db.models.fields.MultiLineStringField'>)", "user": {"login": "jccari", "id": 15901326, "node_id": "MDQ6VXNlcjE1OTAxMzI2", "avatar_url": "https://avatars3.githubusercontent.com/u/15901326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jccari", "html_url": "https://github.com/jccari", "followers_url": "https://api.github.com/users/jccari/followers", "following_url": "https://api.github.com/users/jccari/following{/other_user}", "gists_url": "https://api.github.com/users/jccari/gists{/gist_id}", "starred_url": "https://api.github.com/users/jccari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jccari/subscriptions", "organizations_url": "https://api.github.com/users/jccari/orgs", "repos_url": "https://api.github.com/users/jccari/repos", "events_url": "https://api.github.com/users/jccari/events{/privacy}", "received_events_url": "https://api.github.com/users/jccari/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-28T13:38:25Z", "updated_at": "2020-03-14T21:36:21Z", "closed_at": "2020-03-14T21:36:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to do a query to my graphql api and I get the next error when i do a query to my api using postman.\r\nI understand that the error says it doesn't know how to convert the MultiLineStringField field **route=models.MultiLineStringField()** in my Route Model, and I think I should do it manually but I don't know where or how.\r\nThe graphql api is buildins using django 2.2.7, graphene 2.1.8.\r\n\r\nThis is the error:\r\n```\r\nException at /graphql\r\nDon't know how to convert the Django field routes.Route.route (<class 'django.contrib.gis.db.models.fields.MultiLineStringField'>)\r\nRequest Method: POST\r\nRequest URL:    http://localhost:8000/graphql\r\nDjango Version: 2.2.7\r\nException Type: Exception\r\nException Value:    \r\nDon't know how to convert the Django field routes.Route.route (<class 'django.contrib.gis.db.models.fields.MultiLineStringField'>)\r\nException Location: /home/jccari/code/gosip-server/venv/lib/python3.6/site-packages/graphene_django/converter.py in convert_django_field, line 95\r\nPython Executable:  /home/jccari/code/gosip-server/venv/bin/python\r\nPython Version: 3.6.8\r\nPython Path:    \r\n['/home/jccari/code/gosip-server',\r\n '/home/jccari/code/gosip-server/venv/lib/python36.zip',\r\n '/home/jccari/code/gosip-server/venv/lib/python3.6',\r\n '/home/jccari/code/gosip-server/venv/lib/python3.6/lib-dynload',\r\n '/usr/lib/python3.6',\r\n '/home/jccari/code/gosip-server/venv/lib/python3.6/site-packages']\r\nServer time:    Thu, 28 Nov 2019 00:30:29 +0000\r\n```\r\nThis is my Route model:\r\n```\r\nfrom django.contrib.gis.db import models\r\n\r\nclass Route(models.Model):\r\n    name = models.CharField(max_length=50)\r\n    route = models.MultiLineStringField()\r\n\r\n    def __str__(self):\r\n        return self.name\r\n```\r\nThis is my queries schema\r\n```\r\nimport graphene\r\nfrom graphene_django.types import DjangoObjectType, ObjectType\r\nfrom ..models import Route\r\n\r\nclass RouteType(DjangoObjectType):\r\n    class Meta:\r\n        model = Route\r\n\r\nclass Query(ObjectType):\r\n    route = graphene.Field(RouteType, id=graphene.Int())\r\n    routes = graphene.List(RouteType)\r\n\r\n    def resolve_route(self, info, **kwargs):\r\n        id = kwargs.get('id')\r\n        if id is not None:\r\n            return Route.objects.get(pk=id)\r\n        return None\r\n\r\n    def resolve_routes(self, info, **kwargs):\r\n        return Route.objects.all()\r\n```\r\nI've tried to solve using [this](https://github.com/graphql-python/graphene-django/issues/390) but I haven't had any luck. I appreciate any help. \r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/810", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/810/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/810/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/810/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/810", "id": 522774231, "node_id": "MDU6SXNzdWU1MjI3NzQyMzE=", "number": 810, "title": "Oneshot middleware", "user": {"login": "Speedy1991", "id": 15920408, "node_id": "MDQ6VXNlcjE1OTIwNDA4", "avatar_url": "https://avatars3.githubusercontent.com/u/15920408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Speedy1991", "html_url": "https://github.com/Speedy1991", "followers_url": "https://api.github.com/users/Speedy1991/followers", "following_url": "https://api.github.com/users/Speedy1991/following{/other_user}", "gists_url": "https://api.github.com/users/Speedy1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/Speedy1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Speedy1991/subscriptions", "organizations_url": "https://api.github.com/users/Speedy1991/orgs", "repos_url": "https://api.github.com/users/Speedy1991/repos", "events_url": "https://api.github.com/users/Speedy1991/events{/privacy}", "received_events_url": "https://api.github.com/users/Speedy1991/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458950, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTA=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-14T10:42:48Z", "updated_at": "2020-02-24T18:40:53Z", "closed_at": "2020-02-24T18:40:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\nCurrently I'm trying to add some one-shot-middlewares to the graphene schema (e.g. version check, policy check). The problem is, that the middleware get's fired for each field instead for a single request.\r\nI can't use the DjangoMiddlewares because the error doesn't get wrapped into the graphql response `error` field\r\n\r\nI found 2 solutions for this problem:\r\n1) I set a variable `_skip=False` in the middleware which is toggled to `True` before the first `next(...)` call, e.g.:\r\n\r\n```\r\nlass LatestPolicyAcceptedMiddleware:\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super(LatestPolicyAcceptedMiddleware, self).__init__(*args, **kwargs)\r\n        self._skip = False\r\n\r\n    def resolve(self, next, root, info, **kwargs):\r\n        if self._skip:\r\n            return next(root, info, **kwargs)\r\n        ...\r\n        self._skip = True\r\n        return next(root, info, **kwargs)\r\n```\r\n\r\nWell - that works but feels really odd.\r\n\r\n2) Patching the `GraphQLView.get_response` method like this:\r\n\r\n```\r\n    def get_response(self, request, data, show_graphiql=False):\r\n        try:\r\n            check_min_native_version(request)\r\n            latest_policy_check(request)\r\n            return super(PatchedGraphQLView, self).get_response(request, data, show_graphiql)\r\n        except (PolicyRequiredException, UpgradeNeededException) as e:\r\n            result = self.json_encode(request, {\"errors\": [self.format_error(e)], \"data\": None}, pretty=show_graphiql)\r\n            status_code = e.code\r\n            return result, status_code\r\n```\r\nThis feels also odd, but a way cleaner.\r\n\r\nSo - what's the best way to integrate a one-time middleware? It feels like the framework is missing this essential feature.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/808", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/808/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/808/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/808/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/808", "id": 515869107, "node_id": "MDU6SXNzdWU1MTU4NjkxMDc=", "number": 808, "title": "Using exact filter on Relay with ForeignKey model", "user": {"login": "sunnysid3up", "id": 17933228, "node_id": "MDQ6VXNlcjE3OTMzMjI4", "avatar_url": "https://avatars3.githubusercontent.com/u/17933228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunnysid3up", "html_url": "https://github.com/sunnysid3up", "followers_url": "https://api.github.com/users/sunnysid3up/followers", "following_url": "https://api.github.com/users/sunnysid3up/following{/other_user}", "gists_url": "https://api.github.com/users/sunnysid3up/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunnysid3up/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunnysid3up/subscriptions", "organizations_url": "https://api.github.com/users/sunnysid3up/orgs", "repos_url": "https://api.github.com/users/sunnysid3up/repos", "events_url": "https://api.github.com/users/sunnysid3up/events{/privacy}", "received_events_url": "https://api.github.com/users/sunnysid3up/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-01T02:14:00Z", "updated_at": "2020-02-13T03:30:46Z", "closed_at": "2020-02-13T03:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a problem when I try to filter a model with ForeignKey. I expect to get the result below if the ID is incorrect.\r\n```\r\n{\r\n    \"data\": {\r\n        \"forms\": {\r\n            \"edges\": []\r\n        }\r\n    }\r\n}\r\n```\r\nHowever, I get every single row in my table returned if the value of ID is incorrect. Filtering works as expected if the ID exists.\r\n\r\n```\r\n# models\r\nclass Province(models.Model):\r\n    name = models.CharField(max_length=50)\r\n\r\nclass City(models.Model):\r\n    province = models.ForeignKey(Province,\r\n                                 on_delete=models.CASCADE,\r\n                                 related_name='city')\r\n    name = models.CharField(max_length=50)\r\n```\r\n\r\n```\r\n# schema\r\nclass ProvinceNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Province\r\n        filter_fields = {'name': ['exact']}\r\n        interfaces = (relay.Node, )\r\n\r\n\r\nclass CityNode(DjangoObjectType):\r\n    class Meta:\r\n        model = City\r\n        filter_fields = {'province': ['exact']}\r\n        interfaces = (relay.Node, )\r\n\r\ncities = DjangoFilterConnectionField(queries.CityNode)\r\n```\r\n\r\n```\r\n# query\r\n{\r\n  cities(province: \"UHJvdmluY2VOb2RlOjE3\") {\r\n    edges {\r\n      node { id name province { id name } }\r\n    }\r\n  }\r\n}\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/807", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/807/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/807/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/807/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/807", "id": 511042450, "node_id": "MDU6SXNzdWU1MTEwNDI0NTA=", "number": 807, "title": "Cannot query foreign key field in GraphQLView", "user": {"login": "jsharp83", "id": 160281, "node_id": "MDQ6VXNlcjE2MDI4MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/160281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsharp83", "html_url": "https://github.com/jsharp83", "followers_url": "https://api.github.com/users/jsharp83/followers", "following_url": "https://api.github.com/users/jsharp83/following{/other_user}", "gists_url": "https://api.github.com/users/jsharp83/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsharp83/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsharp83/subscriptions", "organizations_url": "https://api.github.com/users/jsharp83/orgs", "repos_url": "https://api.github.com/users/jsharp83/repos", "events_url": "https://api.github.com/users/jsharp83/events{/privacy}", "received_events_url": "https://api.github.com/users/jsharp83/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-23T03:07:17Z", "updated_at": "2019-10-25T11:11:41Z", "closed_at": "2019-10-25T11:11:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a problem about querying foreign key field.\r\nAll fields I can retrieve except foreign key\r\n\r\n```\r\n// models.py\r\nfrom django.db import models\r\nfrom django.contrib.auth.models import User\r\nfrom users.models import UserProfile\r\n\r\nclass Video(models.Model):\r\n    title = models.TextField()\r\n    description = models.TextField()\r\n    author = models.ForeignKey(User, on_delete=models.CASCADE)      \r\n```\r\n```\r\n// schema.py\r\nclass VideoType(DjangoObjectType):\r\n    class Meta:\r\n        model = Video\r\n```\r\nMy query is like this\r\n\r\n```\r\nquery {\r\n  home_videos {\r\n    title\r\n    description\r\n    author\r\n  }\r\n}\r\n```\r\nFollowing is error message in GraphQLView.\r\n\r\n> Cannot query field author on type VideoType", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/806", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/806/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/806/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/806/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/806", "id": 510548115, "node_id": "MDU6SXNzdWU1MTA1NDgxMTU=", "number": 806, "title": "Add to convert_form_field single dispatch", "user": {"login": "AceFire6", "id": 4126778, "node_id": "MDQ6VXNlcjQxMjY3Nzg=", "avatar_url": "https://avatars1.githubusercontent.com/u/4126778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AceFire6", "html_url": "https://github.com/AceFire6", "followers_url": "https://api.github.com/users/AceFire6/followers", "following_url": "https://api.github.com/users/AceFire6/following{/other_user}", "gists_url": "https://api.github.com/users/AceFire6/gists{/gist_id}", "starred_url": "https://api.github.com/users/AceFire6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AceFire6/subscriptions", "organizations_url": "https://api.github.com/users/AceFire6/orgs", "repos_url": "https://api.github.com/users/AceFire6/repos", "events_url": "https://api.github.com/users/AceFire6/events{/privacy}", "received_events_url": "https://api.github.com/users/AceFire6/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-22T09:55:06Z", "updated_at": "2020-02-03T17:45:31Z", "closed_at": "2020-02-03T17:45:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to add more resolvers to the `convert_form_field` single dispatch function?\r\n\r\nI want to add a custom resolver to automatically be used to convert GraphQL IDs to database compatible integer IDs:\r\n\r\n```python\r\n@convert_form_field.register(ModelChoiceField)\r\ndef convert_form_field_to_id(field):\r\n    return ConvertedID(required=field.required)\r\n```\r\n\r\nIs something like this possible? Where would I put the initialisation of it so that it happens before all the mappings are done for the forms?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/804", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/804/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/804/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/804/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/804", "id": 509531322, "node_id": "MDU6SXNzdWU1MDk1MzEzMjI=", "number": 804, "title": "Request a mutation with invalid inputs return status code 200", "user": {"login": "no-dap", "id": 26595506, "node_id": "MDQ6VXNlcjI2NTk1NTA2", "avatar_url": "https://avatars0.githubusercontent.com/u/26595506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/no-dap", "html_url": "https://github.com/no-dap", "followers_url": "https://api.github.com/users/no-dap/followers", "following_url": "https://api.github.com/users/no-dap/following{/other_user}", "gists_url": "https://api.github.com/users/no-dap/gists{/gist_id}", "starred_url": "https://api.github.com/users/no-dap/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/no-dap/subscriptions", "organizations_url": "https://api.github.com/users/no-dap/orgs", "repos_url": "https://api.github.com/users/no-dap/repos", "events_url": "https://api.github.com/users/no-dap/events{/privacy}", "received_events_url": "https://api.github.com/users/no-dap/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-20T01:31:48Z", "updated_at": "2019-10-20T16:12:34Z", "closed_at": "2019-10-20T16:12:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "DjangoFormMutation and SerializerMutation return status code 200 even if inputs are invalid.  \r\nI found a test code that asserts 200 is correct but isn't it should be 400 rather than 200?  \r\n[graphene_django.tests.test_views.test_handles_field_errors_caught_by_graphql](https://github.com/graphql-python/graphene-django/blob/master/graphene_django/tests/test_views.py#L447)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/800", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/800/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/800/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/800/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/800", "id": 508039271, "node_id": "MDU6SXNzdWU1MDgwMzkyNzE=", "number": 800, "title": "Pass kwargs to custom FilterSet class.", "user": {"login": "jckw", "id": 11884004, "node_id": "MDQ6VXNlcjExODg0MDA0", "avatar_url": "https://avatars1.githubusercontent.com/u/11884004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jckw", "html_url": "https://github.com/jckw", "followers_url": "https://api.github.com/users/jckw/followers", "following_url": "https://api.github.com/users/jckw/following{/other_user}", "gists_url": "https://api.github.com/users/jckw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jckw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jckw/subscriptions", "organizations_url": "https://api.github.com/users/jckw/orgs", "repos_url": "https://api.github.com/users/jckw/repos", "events_url": "https://api.github.com/users/jckw/events{/privacy}", "received_events_url": "https://api.github.com/users/jckw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-16T19:01:13Z", "updated_at": "2020-03-05T12:23:47Z", "closed_at": "2019-10-29T18:25:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When using a DjangoFilterConnectionField it is currently possible to add different arguments whilst also using a custom filter set class:\r\n\r\n```\r\nclass PostsFilter(django_filters.FilterSet):\r\n    @property\r\n    def qs(self):\r\n        # would like to access some_field here to so some fancy filter stuff\r\n        return super().qs.filter(...)\r\n\r\n\r\nclass Query(ObjectType)\r\n    posts = DjangoFilterConnectionField(\r\n        Post, filterset_class=PostsFilter, some_field=graphene.String()\r\n    )\r\n```\r\n\r\nIs it possible to access `some_field` inside of the `qs` method of the custom filterset? Or is there a different recommended way of working with custom (non-field related) parameters and DjangoFilterConnectionField?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/799", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/799/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/799/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/799/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/799", "id": 506766022, "node_id": "MDU6SXNzdWU1MDY3NjYwMjI=", "number": 799, "title": "Conflicting argument and object type name", "user": {"login": "engineer-99b", "id": 19403893, "node_id": "MDQ6VXNlcjE5NDAzODkz", "avatar_url": "https://avatars0.githubusercontent.com/u/19403893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/engineer-99b", "html_url": "https://github.com/engineer-99b", "followers_url": "https://api.github.com/users/engineer-99b/followers", "following_url": "https://api.github.com/users/engineer-99b/following{/other_user}", "gists_url": "https://api.github.com/users/engineer-99b/gists{/gist_id}", "starred_url": "https://api.github.com/users/engineer-99b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/engineer-99b/subscriptions", "organizations_url": "https://api.github.com/users/engineer-99b/orgs", "repos_url": "https://api.github.com/users/engineer-99b/repos", "events_url": "https://api.github.com/users/engineer-99b/events{/privacy}", "received_events_url": "https://api.github.com/users/engineer-99b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-14T16:50:04Z", "updated_at": "2019-10-23T21:47:51Z", "closed_at": "2019-10-14T20:02:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a model with a property called `info`. I also have a mutation for creating an entry. \r\n\r\nI added `info` as an argument to the mutation. This mutation argument conflicts with the `info` argument of the `mutate()` method. \r\n\r\nThis is the response I got when executing the mutation operation:\r\n\r\n> resolve() got multiple values for argument 'info'\r\n\r\nI'm aware that the `kwargs` argument creates a duplicate `info` argument, thus causing the error.\r\n\r\nTo demonstrate the culprit:\r\n\r\n```\r\nmutation {\r\n  createExample(info: \"JC Denton. 23 years old.\") {\r\n    example {\r\n      ...\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n...\r\n\r\nclass CreateExampleMutation(graphene.Mutation):\r\n    class Arguments:\r\n        info = graphene.String()\r\n\r\n...\r\n```\r\n\r\n```\r\n...\r\n\r\ndef mutate(self, info, **kwargs):\r\n    pass\r\n\r\n# ->\r\n\r\ndef mutate(self, info, info):\r\n    pass\r\n\r\n...\r\n```\r\n\r\nI can accept any solution that does not require properties to be explicitly set.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/798", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/798/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/798/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/798/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/798", "id": 506286570, "node_id": "MDU6SXNzdWU1MDYyODY1NzA=", "number": 798, "title": "Updating the Docs with a `diff` view", "user": {"login": "athul", "id": 40897573, "node_id": "MDQ6VXNlcjQwODk3NTcz", "avatar_url": "https://avatars2.githubusercontent.com/u/40897573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/athul", "html_url": "https://github.com/athul", "followers_url": "https://api.github.com/users/athul/followers", "following_url": "https://api.github.com/users/athul/following{/other_user}", "gists_url": "https://api.github.com/users/athul/gists{/gist_id}", "starred_url": "https://api.github.com/users/athul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/athul/subscriptions", "organizations_url": "https://api.github.com/users/athul/orgs", "repos_url": "https://api.github.com/users/athul/repos", "events_url": "https://api.github.com/users/athul/events{/privacy}", "received_events_url": "https://api.github.com/users/athul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-13T07:29:33Z", "updated_at": "2019-10-31T23:31:31Z", "closed_at": "2019-10-31T23:31:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey,\r\nIt would be super cool if you could add a `diff` view in the docs for the https://docs.graphene-python.org/projects/django/en/latest/tutorial-plain/#getting-single-objects code block.    \r\nPlus you could also add the filename to be changed since there are two `schema.py`  files both in *cookbook* and *ingredients*.\r\n\r\nYou could update the sphinx configs to higlight diffs to display like this(example)\r\n```diff\r\n\r\n  import graphene\r\n\r\n  from graphene_django.types import DjangoObjectType\r\n\r\n  from cookbook.ingredients.models import Category, Ingredient\r\n\r\n\r\n  class CategoryType(DjangoObjectType):\r\n      class Meta:\r\n          model = Category\r\n\r\n\r\n  class IngredientType(DjangoObjectType):\r\n      class Meta:\r\n          model = Ingredient\r\n\r\n\r\n  class Query(object):\r\n+      category = graphene.Field(CategoryType,\r\n+                                id=graphene.Int(),\r\n+                                name=graphene.String())\r\n      all_categories = graphene.List(CategoryType)\r\n\r\n\r\n+      ingredient = graphene.Field(IngredientType,\r\n+                                  id=graphene.Int(),\r\n+                                  name=graphene.String())\r\n      all_ingredients = graphene.List(IngredientType)\r\n\r\n      def resolve_all_categories(self, info, **kwargs):\r\n+          return Category.objects.all()\r\n+\r\n+      def resolve_all_ingredients(self, info, **kwargs):\r\n+          return Ingredient.objects.all()\r\n+\r\n+      def resolve_category(self, info, **kwargs):\r\n+          id = kwargs.get('id')\r\n+          name = kwargs.get('name')\r\n+\r\n+          if id is not None:\r\n+              return Category.objects.get(pk=id)\r\n+\r\n+          if name is not None:\r\n+              return Category.objects.get(name=name)\r\n+\r\n+          return None\r\n+\r\n+      def resolve_ingredient(self, info, **kwargs):\r\n+          id = kwargs.get('id')\r\n+          name = kwargs.get('name')\r\n+\r\n+          if id is not None:\r\n+              return Ingredient.objects.get(pk=id)\r\n+\r\n+          if name is not None:\r\n+              return Ingredient.objects.get(name=name)\r\n+\r\n+          return None\r\n```\r\n\r\nThis way, people new to graphene could understand how the file should be changed.\r\n Thanks and I totally love this project :heart: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/795", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/795/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/795/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/795/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/795", "id": 505049453, "node_id": "MDU6SXNzdWU1MDUwNDk0NTM=", "number": 795, "title": "forgot password?", "user": {"login": "ajaiau0", "id": 50943424, "node_id": "MDQ6VXNlcjUwOTQzNDI0", "avatar_url": "https://avatars1.githubusercontent.com/u/50943424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaiau0", "html_url": "https://github.com/ajaiau0", "followers_url": "https://api.github.com/users/ajaiau0/followers", "following_url": "https://api.github.com/users/ajaiau0/following{/other_user}", "gists_url": "https://api.github.com/users/ajaiau0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaiau0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaiau0/subscriptions", "organizations_url": "https://api.github.com/users/ajaiau0/orgs", "repos_url": "https://api.github.com/users/ajaiau0/repos", "events_url": "https://api.github.com/users/ajaiau0/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaiau0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-10T05:47:38Z", "updated_at": "2019-10-18T10:28:22Z", "closed_at": "2019-10-18T10:28:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "how to use forgot password in django with graphql?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/792", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/792/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/792/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/792/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/792", "id": 501170337, "node_id": "MDU6SXNzdWU1MDExNzAzMzc=", "number": 792, "title": "2.5.0 to 2.6.0 error:  TypeError: issubclass() arg 1 must be a class", "user": {"login": "kayluhb", "id": 29550, "node_id": "MDQ6VXNlcjI5NTUw", "avatar_url": "https://avatars3.githubusercontent.com/u/29550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kayluhb", "html_url": "https://github.com/kayluhb", "followers_url": "https://api.github.com/users/kayluhb/followers", "following_url": "https://api.github.com/users/kayluhb/following{/other_user}", "gists_url": "https://api.github.com/users/kayluhb/gists{/gist_id}", "starred_url": "https://api.github.com/users/kayluhb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kayluhb/subscriptions", "organizations_url": "https://api.github.com/users/kayluhb/orgs", "repos_url": "https://api.github.com/users/kayluhb/repos", "events_url": "https://api.github.com/users/kayluhb/events{/privacy}", "received_events_url": "https://api.github.com/users/kayluhb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-01T22:05:00Z", "updated_at": "2020-03-13T10:05:36Z", "closed_at": "2020-03-13T10:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nThanks for all the work on the new release.\r\n\r\nI am however getting this error when upgrading to 2.6.0 from 2.5.0 and I just wanted to make sure I understand the change.\r\n\r\n```py\r\n Traceback (most recent call last):\r\n   File \"src/manage.py\", line 22, in <module>\r\n     execute_from_command_line(sys.argv)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/__init__.py\", line 381, in execute_from_command_line\r\n     utility.execute()\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/__init__.py\", line 375, in execute\r\n     self.fetch_command(subcommand).run_from_argv(self.argv)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/base.py\", line 323, in run_from_argv\r\n     self.execute(*args, **cmd_options)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/base.py\", line 361, in execute\r\n     self.check()\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/base.py\", line 390, in check\r\n     include_deployment_checks=include_deployment_checks,\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/commands/migrate.py\", line 65, in _run_checks\r\n     issues.extend(super()._run_checks(**kwargs))\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/management/base.py\", line 377, in _run_checks\r\n     return checks.run_checks(**kwargs)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/core/checks/registry.py\", line 72, in run_checks\r\n     new_errors = check(app_configs=app_configs)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/contrib/admin/checks.py\", line 111, in check_dependencies\r\n     if not _contains_subclass('django.contrib.auth.middleware.AuthenticationMiddleware', settings.MIDDLEWARE):\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/contrib/admin/checks.py\", line 43, in _contains_subclass\r\n     candidate_cls = import_string(path)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/django/utils/module_loading.py\", line 17, in import_string\r\n     module = import_module(module_path)\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/importlib/__init__.py\", line 127, in import_module\r\n     return _bootstrap._gcd_import(name[level:], package, level)\r\n   File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n   File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n   File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n   File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n   File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n   File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n   File \"/app/src/ems_api/middleware.py\", line 5, in <module>\r\n     from ems.schema import loaders as ems_loaders, nodes\r\n   File \"/app/src/ems/schema/nodes.py\", line 44, in <module>\r\n     class BenefitSetNode(graphene_django.DjangoObjectType):\r\n   File \"/app/src/ems/schema/nodes.py\", line 48, in BenefitSetNode\r\n     benefits = fields.DjangoListField(\"ems.schema.nodes.BenefitNode\")\r\n   File \"/root/.local/share/virtualenvs/app-4PlAip0Q/lib/python3.7/site-packages/graphene_django/fields.py\", line 23, in __init__\r\n     _type, DjangoObjectType\r\n TypeError: issubclass() arg 1 must be a class\r\n```\r\n\r\nDoes this mean I can no longer pass strings into `DjangoListField`?\r\n\r\ne.g. `benefits = fields.DjangoListField(\"ems.schema.nodes.BenefitNode\")`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/791", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/791/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/791/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/791/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/791", "id": 501101452, "node_id": "MDU6SXNzdWU1MDExMDE0NTI=", "number": 791, "title": "Disable creation in DjangoModelFormMutation", "user": {"login": "ckristhoff", "id": 2814894, "node_id": "MDQ6VXNlcjI4MTQ4OTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/2814894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckristhoff", "html_url": "https://github.com/ckristhoff", "followers_url": "https://api.github.com/users/ckristhoff/followers", "following_url": "https://api.github.com/users/ckristhoff/following{/other_user}", "gists_url": "https://api.github.com/users/ckristhoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckristhoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckristhoff/subscriptions", "organizations_url": "https://api.github.com/users/ckristhoff/orgs", "repos_url": "https://api.github.com/users/ckristhoff/repos", "events_url": "https://api.github.com/users/ckristhoff/events{/privacy}", "received_events_url": "https://api.github.com/users/ckristhoff/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-01T19:33:28Z", "updated_at": "2020-04-21T00:59:18Z", "closed_at": "2020-01-13T20:25:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Graphene + Django REST Framework lets disable create or update operation with `model_operations` option.\r\n\r\nHow to disable create in DjangoModelFormMutation?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/788", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/788/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/788/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/788/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/788", "id": 500426242, "node_id": "MDU6SXNzdWU1MDA0MjYyNDI=", "number": 788, "title": "Serializer mutation dosen't return many to many field in response with nested serializer", "user": {"login": "rdahal35", "id": 28887264, "node_id": "MDQ6VXNlcjI4ODg3MjY0", "avatar_url": "https://avatars3.githubusercontent.com/u/28887264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdahal35", "html_url": "https://github.com/rdahal35", "followers_url": "https://api.github.com/users/rdahal35/followers", "following_url": "https://api.github.com/users/rdahal35/following{/other_user}", "gists_url": "https://api.github.com/users/rdahal35/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdahal35/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdahal35/subscriptions", "organizations_url": "https://api.github.com/users/rdahal35/orgs", "repos_url": "https://api.github.com/users/rdahal35/repos", "events_url": "https://api.github.com/users/rdahal35/events{/privacy}", "received_events_url": "https://api.github.com/users/rdahal35/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T17:52:39Z", "updated_at": "2020-01-12T18:58:11Z", "closed_at": "2020-01-12T18:58:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "class EnergyDetailSerializer(serializers.ModelSerializer):\r\n\r\n    address = SellerAddressSerializer()\r\n    energy_source = EnergySourceSerializers()\r\n    payment_method = PaymentMethodSerializer(many=True)\r\n\r\n    class Meta:\r\n        model = EnergyDetail\r\n        exclude = ['seller']\r\n\r\n    def create(self, validated_data, seller):\r\n        energy = EnergyDetail.objects.all().first()\r\n        return energy\r\n\r\nclass EnergyDetailMutation(SerializerMutation):\r\n\r\n    class Meta:\r\n        serializer_class = EnergyDetailSerializer\r\n        model_operations = ['create', 'update']\r\n\r\n    @classmethod\r\n    def perform_mutate(cls, serializer, info):\r\n        if not info.context.user.is_authenticated:\r\n            raise Exception('Authentication credentials were not provided')\r\n        obj = serializer.create(serializer.validated_data,\r\n                                info.context.user.seller)\r\n        kwargs = {}\r\n        for f, field in serializer.fields.items():\r\n            if not field.write_only:\r\n                kwargs[f] = field.get_attribute(obj)\r\n\r\n        return cls(errors=None, **kwargs)\r\n\r\nAssertionError: User Error: expected iterable, but did not find one for field EnergyDetailMutationPayload.paymentMethod.\r\n\r\nI think it is trying to find enegry.payment_method and it does not return iterable values.\r\nBecause to get objects of many to many field we need to call .all() method\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/787", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/787/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/787/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/787/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/787", "id": 500142278, "node_id": "MDU6SXNzdWU1MDAxNDIyNzg=", "number": 787, "title": "Handling aggregate objects", "user": {"login": "SpyTec", "id": 6598829, "node_id": "MDQ6VXNlcjY1OTg4Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6598829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SpyTec", "html_url": "https://github.com/SpyTec", "followers_url": "https://api.github.com/users/SpyTec/followers", "following_url": "https://api.github.com/users/SpyTec/following{/other_user}", "gists_url": "https://api.github.com/users/SpyTec/gists{/gist_id}", "starred_url": "https://api.github.com/users/SpyTec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SpyTec/subscriptions", "organizations_url": "https://api.github.com/users/SpyTec/orgs", "repos_url": "https://api.github.com/users/SpyTec/repos", "events_url": "https://api.github.com/users/SpyTec/events{/privacy}", "received_events_url": "https://api.github.com/users/SpyTec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-09-30T08:58:16Z", "updated_at": "2020-07-27T13:25:22Z", "closed_at": "2020-07-27T12:25:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my application right now I've been aggregating database entries  and serving them in a REST API. Though when it comes to graphene I've not had any luck getting aggregates to works. Any help would be thankful\r\n\r\nCurrent code:\r\n```py\r\naggregated_snapshots = DjangoFilterConnectionField(IssueSnapshotNode)\r\n\r\ndef resolve_aggregated_snapshots(self, info, **kwargs):\r\n    return IssueSnapshot.objects.order_by() \\\r\n        .values('status', type=F('issue__type_name')) \\\r\n        .annotate(status_count=Count('status'))\r\n```\r\n\r\nError message returned:\r\n```\r\nMerging 'QuerySet' classes must involve the same values in each case\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/786", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/786/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/786/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/786/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/786", "id": 499998639, "node_id": "MDU6SXNzdWU0OTk5OTg2Mzk=", "number": 786, "title": "Post Request Fail When CSRF_USE_SESSIONS = True", "user": {"login": "Flavyoo", "id": 14948074, "node_id": "MDQ6VXNlcjE0OTQ4MDc0", "avatar_url": "https://avatars2.githubusercontent.com/u/14948074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flavyoo", "html_url": "https://github.com/Flavyoo", "followers_url": "https://api.github.com/users/Flavyoo/followers", "following_url": "https://api.github.com/users/Flavyoo/following{/other_user}", "gists_url": "https://api.github.com/users/Flavyoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flavyoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flavyoo/subscriptions", "organizations_url": "https://api.github.com/users/Flavyoo/orgs", "repos_url": "https://api.github.com/users/Flavyoo/repos", "events_url": "https://api.github.com/users/Flavyoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Flavyoo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-30T00:49:03Z", "updated_at": "2020-07-01T20:52:24Z", "closed_at": "2019-12-27T14:27:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the `CSRF_USE_SESSIONS` settings variable is set to `True` post requests can not be made as the request will be rejected. This is because the `CSRFTOKEN` is not provided, because it will not be stored in a cookie.\r\n\r\nDjango will end up giving this warning:  `Forbidden (CSRF token missing or incorrect.):`\r\n\r\nCurrently this issue can be prevented by passing the view to `csrf_exempt`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/784", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/784/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/784/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/784/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/784", "id": 498397174, "node_id": "MDU6SXNzdWU0OTgzOTcxNzQ=", "number": 784, "title": "How to define the input for a mutation created from a DRF serializer?", "user": {"login": "allen-munsch", "id": 33908344, "node_id": "MDQ6VXNlcjMzOTA4MzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/33908344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allen-munsch", "html_url": "https://github.com/allen-munsch", "followers_url": "https://api.github.com/users/allen-munsch/followers", "following_url": "https://api.github.com/users/allen-munsch/following{/other_user}", "gists_url": "https://api.github.com/users/allen-munsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/allen-munsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allen-munsch/subscriptions", "organizations_url": "https://api.github.com/users/allen-munsch/orgs", "repos_url": "https://api.github.com/users/allen-munsch/repos", "events_url": "https://api.github.com/users/allen-munsch/events{/privacy}", "received_events_url": "https://api.github.com/users/allen-munsch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-25T16:33:07Z", "updated_at": "2019-09-25T20:02:10Z", "closed_at": "2019-09-25T20:02:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "- https://stackoverflow.com/questions/58088895/graphqlerror-unknown-type-xyzmutationinput\r\n\r\nI've been looking around the internet, but haven't been able to figure out how to do this.\r\n\r\nI can add some documentation, with a bit of guidance, on how to do it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/782", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/782/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/782/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/782/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/782", "id": 497103648, "node_id": "MDU6SXNzdWU0OTcxMDM2NDg=", "number": 782, "title": "Slightly incorrect Travis pipeline", "user": {"login": "barseghyanartur", "id": 4925587, "node_id": "MDQ6VXNlcjQ5MjU1ODc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4925587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barseghyanartur", "html_url": "https://github.com/barseghyanartur", "followers_url": "https://api.github.com/users/barseghyanartur/followers", "following_url": "https://api.github.com/users/barseghyanartur/following{/other_user}", "gists_url": "https://api.github.com/users/barseghyanartur/gists{/gist_id}", "starred_url": "https://api.github.com/users/barseghyanartur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barseghyanartur/subscriptions", "organizations_url": "https://api.github.com/users/barseghyanartur/orgs", "repos_url": "https://api.github.com/users/barseghyanartur/repos", "events_url": "https://api.github.com/users/barseghyanartur/events{/privacy}", "received_events_url": "https://api.github.com/users/barseghyanartur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-23T13:37:34Z", "updated_at": "2019-12-31T13:56:06Z", "closed_at": "2019-12-31T13:56:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "In current implementation, when testing a tagged commit, PyPI release would be triggered after the first success. This is incorrect, since what works on Python 3.5 might not work on Python 3.6 (not even talking about Python 2, which is the first one to be tested in the list).\r\n\r\nThus, I suggest to set ``fast_finish`` to ``false`` so that release attempt would be made only once after all checks are finished (all tests passed).\r\n\r\n```yaml\r\n# ...\r\nmatrix:\r\n  fast_finish: false\r\n# ...\r\n```\r\n\r\nAlternatively, if my proposal above isn't acceptable (for whatever reason), then I suggest to add ``skip_existing: true`` to the ``deploy`` pipeline. The reason: Travis would report failures even if tests pass when testing for the second time (and further on). Currently, once Python 2 tests pass, release is made, then testing on Python 3.5 starts, tests pass, but the final step fails, since package is already on the PyPI. With ``skip_existing: true`` that would no longer happen.\r\n\r\n```yaml\r\n# ...\r\ndeploy:\r\n  skip_existing: true\r\n  provider: pypi\r\n# ...\r\n```\r\n\r\nLet me know if I shall submit a PR (please, mention which fix would be more appropriate/acceptable).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/781", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/781/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/781/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/781/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/781", "id": 496859632, "node_id": "MDU6SXNzdWU0OTY4NTk2MzI=", "number": 781, "title": "Filtering not working correctly with 2.6.0", "user": {"login": "lassesteffen", "id": 29383763, "node_id": "MDQ6VXNlcjI5MzgzNzYz", "avatar_url": "https://avatars1.githubusercontent.com/u/29383763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lassesteffen", "html_url": "https://github.com/lassesteffen", "followers_url": "https://api.github.com/users/lassesteffen/followers", "following_url": "https://api.github.com/users/lassesteffen/following{/other_user}", "gists_url": "https://api.github.com/users/lassesteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lassesteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lassesteffen/subscriptions", "organizations_url": "https://api.github.com/users/lassesteffen/orgs", "repos_url": "https://api.github.com/users/lassesteffen/repos", "events_url": "https://api.github.com/users/lassesteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/lassesteffen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-09-23T01:22:42Z", "updated_at": "2019-11-28T19:28:41Z", "closed_at": "2019-11-28T10:48:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Related to #750. Appreciate the fix for this problem!!\r\n\r\n### Problem\r\nWhen using filter_fields I get an error about using wrong types which started appearing in 2.4.0.\r\n`Variable \"userEmail\" of type \"String\" used in position expecting type \"ID\".` The error does not occur with graphene-django 2.3.2\r\n\r\n### Context\r\n- using django-filter 2.2.0\r\n- django 2.4.0\r\n- graphene-django 2.6.0\r\n### \r\n\r\n**model.py**\r\n```\r\nclass Membership(TimeStampedModel):\r\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\r\n    tenant = models.ForeignKey(Tenant, on_delete=models.CASCADE)\r\n\r\n\r\n\r\nclass User(TimeStampedModel, AbstractBaseUser, PermissionsMixin):\r\n    email = EmailField(unique=True, verbose_name=_('email'))\r\n\r\n    USERNAME_FIELD = 'email'\r\n    REQUIRED_FIELDS = []\r\n\r\n    objects = UserManager()\r\n```\r\n\r\n**Schema.py**\r\n```\r\nclass MembershipNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Membership\r\n        filter_fields = {\r\n            'id': ['exact'],\r\n            'user__email': ['exact'],\r\n        }\r\n        interfaces = (MembershipNodeInterface,)\r\n\r\n```\r\n\r\n**Query:**\r\n```\r\nQUERY_MEMBERSHIPS = '''\r\n    query memberships($tenant: String!, $userEmail: String) {\r\n        memberships(tenant: $tenant, user_Email: $userEmail) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    isFitter\r\n                    isMonitor\r\n                    isAdmin\r\n                    isStaff\r\n                }\r\n            }\r\n        }\r\n    }\r\n'''\r\n```\r\n\r\n**Result:**\r\n`Variable \"userEmail\" of type \"String\" used in position expecting type \"ID\".`\r\n\r\n\r\n\r\n\r\n### Solution\r\nShould be related to #750. Might be a special case due to the `email` being the identifying field of the `User`\r\n\r\n> I am confident it is related to this PR: https://github.com/graphql-python/graphene-django/pull/682/files . In graphene_django/filter/utils.py the way how to retrieve the Type of a field was changed.\r\n\r\nKeep on rocking :)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/779", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/779/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/779/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/779/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/779", "id": 495525137, "node_id": "MDU6SXNzdWU0OTU1MjUxMzc=", "number": 779, "title": "How to dynamically modify the query field name", "user": {"login": "lwxown", "id": 50621683, "node_id": "MDQ6VXNlcjUwNjIxNjgz", "avatar_url": "https://avatars0.githubusercontent.com/u/50621683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lwxown", "html_url": "https://github.com/lwxown", "followers_url": "https://api.github.com/users/lwxown/followers", "following_url": "https://api.github.com/users/lwxown/following{/other_user}", "gists_url": "https://api.github.com/users/lwxown/gists{/gist_id}", "starred_url": "https://api.github.com/users/lwxown/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lwxown/subscriptions", "organizations_url": "https://api.github.com/users/lwxown/orgs", "repos_url": "https://api.github.com/users/lwxown/repos", "events_url": "https://api.github.com/users/lwxown/events{/privacy}", "received_events_url": "https://api.github.com/users/lwxown/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-19T01:22:35Z", "updated_at": "2019-09-19T03:20:22Z", "closed_at": "2019-09-19T03:20:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n    Now there is a requirement, when my return field does not depend on model, if I want to dynamically modify the name of a custom field according to different scenarios, how to do it?\r\n                                                                                                                                                                           Thanks!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/778", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/778/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/778/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/778/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/778", "id": 495300013, "node_id": "MDU6SXNzdWU0OTUzMDAwMTM=", "number": 778, "title": "content-type is plain/text when using apollo fetchOptions no-cors", "user": {"login": "allen-munsch", "id": 33908344, "node_id": "MDQ6VXNlcjMzOTA4MzQ0", "avatar_url": "https://avatars1.githubusercontent.com/u/33908344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allen-munsch", "html_url": "https://github.com/allen-munsch", "followers_url": "https://api.github.com/users/allen-munsch/followers", "following_url": "https://api.github.com/users/allen-munsch/following{/other_user}", "gists_url": "https://api.github.com/users/allen-munsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/allen-munsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allen-munsch/subscriptions", "organizations_url": "https://api.github.com/users/allen-munsch/orgs", "repos_url": "https://api.github.com/users/allen-munsch/repos", "events_url": "https://api.github.com/users/allen-munsch/events{/privacy}", "received_events_url": "https://api.github.com/users/allen-munsch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-18T15:28:39Z", "updated_at": "2019-09-23T15:43:47Z", "closed_at": "2019-09-23T15:43:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "What about servers that use cors and send an OPTIONS request? This doesn't seem to forward the options() to the django `View` class that `GraphQLView` inherits from, graphql might not handle `OPTIONS` requests, just wondering if django should?:\r\n\r\nhttps://github.com/graphql-python/graphene-django/blob/b0cba398a1bacd9305c50e784b862785348fca2d/graphene_django/views.py#L118\r\n\r\nAlso.\r\n\r\nWould there be an issue if \"plain/text\" was also handled here?\r\n\r\n```\r\nelif content_type in [\"application/json\", \"plain/text\"]:\r\n```\r\n\r\nhttps://github.com/graphql-python/graphene-django/blob/b0cba398a1bacd9305c50e784b862785348fca2d/graphene_django/views.py#L206\r\n\r\nI tried using the apollo react library with `fetchOptions` because I was getting a `405 method not allowed`:\r\n\r\n```\r\nfetchOptions: {\r\n  mode: 'no-cors',\r\n},\r\n```\r\n\r\nbut had an issue with the content-type : https://github.com/apollographql/apollo-link/issues/275\r\n\r\n---\r\n\r\nOr is it the case, cors should be configured as part of the middleware? \r\n\r\nLike here: https://stackoverflow.com/questions/35760943/how-can-i-enable-cors-on-django-rest-framework\r\n\r\nOr, that the `GraphQLView` should be custom?\r\n\r\nI could add a quick blurb in the documentation somewhere?\r\n\r\nrelated: \r\n\r\n- https://github.com/graphql-python/graphene-django/issues/168\r\n- https://github.com/graphql-python/graphene-django/issues/288\r\n\r\nEdit: just found : https://github.com/graphql-python/graphene-django/wiki/CORS-CSRF\r\n\r\nI had also confused `apollo-boost` with `apollo-client`. Switched to `apollo-client` and used the following for `graphene-django` ( no `crsf_exempt` on the django url and no cors middleware )\r\n\r\n```\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport ApolloClient from 'apollo-client';\r\nimport { HttpLink} from 'apollo-link-http';\r\nimport {InMemoryCache as Cache} from \"apollo-cache-inmemory\";\r\nimport { ApolloLink } from 'apollo-link'\r\n\r\nconst uri = `http://127.0.0.1:8000/graphql`; // not localhost\r\nconst AuthLink = (operation, next) => {\r\n  const token = window.csrf_token;\r\n\r\n  operation.setContext(context => ({\r\n    ...context,\r\n    headers: {\r\n      ...context.headers,\r\n      \"X-CSRFToken\": token,\r\n    },\r\n  }));\r\n\r\n  return next(operation);\r\n};\r\n\r\nconst link = ApolloLink.from([\r\n  AuthLink,\r\n  new HttpLink({ uri }),\r\n]);\r\n\r\nconst apollo = new ApolloClient({\r\n  link,\r\n  cache: new Cache().restore({}),\r\n});\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/776", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/776/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/776/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/776/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/776", "id": 494737786, "node_id": "MDU6SXNzdWU0OTQ3Mzc3ODY=", "number": 776, "title": "get_node is not called on related objects", "user": {"login": "McPo", "id": 1295034, "node_id": "MDQ6VXNlcjEyOTUwMzQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1295034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/McPo", "html_url": "https://github.com/McPo", "followers_url": "https://api.github.com/users/McPo/followers", "following_url": "https://api.github.com/users/McPo/following{/other_user}", "gists_url": "https://api.github.com/users/McPo/gists{/gist_id}", "starred_url": "https://api.github.com/users/McPo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/McPo/subscriptions", "organizations_url": "https://api.github.com/users/McPo/orgs", "repos_url": "https://api.github.com/users/McPo/repos", "events_url": "https://api.github.com/users/McPo/events{/privacy}", "received_events_url": "https://api.github.com/users/McPo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-17T16:51:18Z", "updated_at": "2020-08-15T19:10:13Z", "closed_at": "2020-08-15T19:10:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently `get_node` is not called on related models. i.e.\r\n```\r\nclass Customer(models.Model):\r\n    display_name = models.CharField()\r\n    ....\r\n\r\nclass Member(models.Model):\r\n    customer = models.ForeignKey(Customer)\r\n    ....\r\n```\r\n\r\n```\r\nclass Customer(DjangoObjectType):\r\n    class Meta:\r\n        model = models.Customer\r\n        filter_fields = []\r\n        interfaces = [graphene.Node]\r\n\r\n    @classmethod\r\n    def get_node(cls, info, id):\r\n        print('NEVER CALLED')\r\n        return None\r\n```\r\n\r\nThen querying with\r\n\r\n```\r\nmember(id:\"...\") {\r\n    customer {\r\n        id\r\n    }\r\n}\r\n```\r\n\r\nDoes not result in `get_node` being called. this is because `get_node` is only called on Relay Nodes. However relay nodes expect an `ID` to be passed in via GraphQL. Instead I would like the `get_node` to be called with the id for the related object.\r\n\r\nIf this support was added it means you can add per-object level auth.\r\n\r\nFurthermore as `get_node` calls `get_queryset`, all you would have to do is to filter out all the objects a user isn't allowed to access i.e.\r\n\r\n```\r\nclass Customer(DjangoObjectType):\r\n\r\n    @classmethod\r\n    def get_queryset(cls, queryset, info):\r\n        return queryset.filter(admins__in=[info.context.user])\r\n```\r\n\r\nFor example lets say Im allowed to see a list of Members, some of those Members are not under the Customer that I am an admin of.  However I should still be able to interact with them, as they have some other relationship to my Customer. Maybe the Member is related to another Member under my Customer, and I can access them via that path. However I don't want to to give an admin the ability to view other Customers. This would achieve that.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/775", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/775/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/775/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/775/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/775", "id": 494540909, "node_id": "MDU6SXNzdWU0OTQ1NDA5MDk=", "number": 775, "title": "Django form returns inputs in payload but errors if you try to access", "user": {"login": "sandwichsudo", "id": 4517593, "node_id": "MDQ6VXNlcjQ1MTc1OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4517593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandwichsudo", "html_url": "https://github.com/sandwichsudo", "followers_url": "https://api.github.com/users/sandwichsudo/followers", "following_url": "https://api.github.com/users/sandwichsudo/following{/other_user}", "gists_url": "https://api.github.com/users/sandwichsudo/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandwichsudo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandwichsudo/subscriptions", "organizations_url": "https://api.github.com/users/sandwichsudo/orgs", "repos_url": "https://api.github.com/users/sandwichsudo/repos", "events_url": "https://api.github.com/users/sandwichsudo/events{/privacy}", "received_events_url": "https://api.github.com/users/sandwichsudo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-17T10:33:46Z", "updated_at": "2020-04-26T13:25:09Z", "closed_at": "2020-04-26T13:25:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hiya, I've made a simple DjangoFormMutation following [the docs](https://docs.graphene-python.org/projects/django/en/latest/mutations/#django-forms).\r\n\r\nIt looks like the form inputs are included in the payload type, but if you try and access them you get an error like `Cannot return null for non-nullable field MyMutationPayload.name.`\r\n\r\nI'm sure there is a good use-case for returning these fields, but there are some fields (like passwords) I'd prefer I could exclude from being returned. I've tried using `only_fields` and `exclude_fields` but they apply equally to input and output which isn't quite what I'm looking for.\r\n\r\nAre there any recommendations to remove form fields from the payload here please? Or should I just not be using `DjangoFormMutation` if I don't want the fields returned?\r\n\r\nThanks,\r\nGilly\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/773", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/773/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/773/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/773/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/773", "id": 493721129, "node_id": "MDU6SXNzdWU0OTM3MjExMjk=", "number": 773, "title": "Type included in interface only is not added to schema", "user": {"login": "jfulse", "id": 13033324, "node_id": "MDQ6VXNlcjEzMDMzMzI0", "avatar_url": "https://avatars2.githubusercontent.com/u/13033324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfulse", "html_url": "https://github.com/jfulse", "followers_url": "https://api.github.com/users/jfulse/followers", "following_url": "https://api.github.com/users/jfulse/following{/other_user}", "gists_url": "https://api.github.com/users/jfulse/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfulse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfulse/subscriptions", "organizations_url": "https://api.github.com/users/jfulse/orgs", "repos_url": "https://api.github.com/users/jfulse/repos", "events_url": "https://api.github.com/users/jfulse/events{/privacy}", "received_events_url": "https://api.github.com/users/jfulse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-15T10:32:30Z", "updated_at": "2019-10-30T14:30:23Z", "closed_at": "2019-10-30T14:30:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an interface type implemented by two concrete types\r\n\r\n```\r\n    class InterfaceType(graphene.Interface):\r\n        id = graphene.ID(required=True)\r\n        name = graphene.String(required=True)\r\n\r\n    class Type1(graphene_django.types.DjangoObjectType):\r\n        a_field = graphene.String(required=False)\r\n\r\n        class Meta:\r\n            model = Model1\r\n            interfaces = (InterfaceType,)\r\n\r\n    class Type2(graphene_django.types.DjangoObjectType):\r\n        another_field = graphene.String(required=False)\r\n\r\n        class Meta:\r\n            model = Model2\r\n            interfaces = (InterfaceType,)\r\n```\r\n\r\nThis works as long as some query or mutation uses `Type1` and `Type2` directly. But in my case they are only used indirectly, through `InterfaceType`.\r\n\r\nThe problem is when I try to request `aField` or `anotherField` through inline fragments:\r\n\r\n    query {\r\n        interfaceQuery {\r\n            id\r\n            name\r\n            ...on Type1 {\r\n                aField\r\n            }\r\n            ...on Type2 {\r\n                anotherField\r\n            }\r\n        }\r\n    }\r\n\r\nI get the error `\"Unknown type \"Type1\". Perhaps you meant ...\"`\r\n\r\nIt's like the types aren't added to the schema since they're not directly in use - but I still need them in order to query `aField` and `anotherField`.\r\n\r\nCan you spot a mistake in the above?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/771", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/771/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/771/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/771/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/771", "id": 491771947, "node_id": "MDU6SXNzdWU0OTE3NzE5NDc=", "number": 771, "title": "Support Django 3", "user": {"login": "Siecje", "id": 4069476, "node_id": "MDQ6VXNlcjQwNjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4069476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Siecje", "html_url": "https://github.com/Siecje", "followers_url": "https://api.github.com/users/Siecje/followers", "following_url": "https://api.github.com/users/Siecje/following{/other_user}", "gists_url": "https://api.github.com/users/Siecje/gists{/gist_id}", "starred_url": "https://api.github.com/users/Siecje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Siecje/subscriptions", "organizations_url": "https://api.github.com/users/Siecje/orgs", "repos_url": "https://api.github.com/users/Siecje/repos", "events_url": "https://api.github.com/users/Siecje/events{/privacy}", "received_events_url": "https://api.github.com/users/Siecje/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-10T16:16:27Z", "updated_at": "2019-10-19T19:34:55Z", "closed_at": "2019-10-18T21:40:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "`from django.utils import six` has been removed in Django version 3.\r\n\r\nhttps://github.com/graphql-python/graphene-django/blob/master/graphene_django/settings.py#L18", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/770", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/770/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/770/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/770/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/770", "id": 490955248, "node_id": "MDU6SXNzdWU0OTA5NTUyNDg=", "number": 770, "title": "Customize model fields parsing", "user": {"login": "ADR-007-SoftServe", "id": 48212581, "node_id": "MDQ6VXNlcjQ4MjEyNTgx", "avatar_url": "https://avatars3.githubusercontent.com/u/48212581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ADR-007-SoftServe", "html_url": "https://github.com/ADR-007-SoftServe", "followers_url": "https://api.github.com/users/ADR-007-SoftServe/followers", "following_url": "https://api.github.com/users/ADR-007-SoftServe/following{/other_user}", "gists_url": "https://api.github.com/users/ADR-007-SoftServe/gists{/gist_id}", "starred_url": "https://api.github.com/users/ADR-007-SoftServe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ADR-007-SoftServe/subscriptions", "organizations_url": "https://api.github.com/users/ADR-007-SoftServe/orgs", "repos_url": "https://api.github.com/users/ADR-007-SoftServe/repos", "events_url": "https://api.github.com/users/ADR-007-SoftServe/events{/privacy}", "received_events_url": "https://api.github.com/users/ADR-007-SoftServe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-09T08:32:25Z", "updated_at": "2019-09-09T08:54:02Z", "closed_at": "2019-09-09T08:54:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! I'm happy to use your library!\r\nBut looks like some changes could be required\r\n\r\nIs there a way to customize `get_choices` for custom model field?\r\nCurrently, I have to make such hacks to work with `django-enumfields`:\r\n```\r\ndef patch_get_choices():\r\n    def get_choices(choices):\r\n        converted_names = []\r\n\r\n        for value, help_text in choices:\r\n\r\n            # region patch\r\n            from enumfields import Enum as DjangoEnum\r\n\r\n            if isinstance(value, DjangoEnum):\r\n                yield value.name, value.value, value.label\r\n\r\n            # endregion\r\n\r\n            elif isinstance(help_text, (tuple, list)):\r\n                for choice in get_choices(help_text):\r\n                    yield choice\r\n            else:\r\n                name = convert_choice_name(value)\r\n                while name in converted_names:\r\n                    name += \"_\" + str(len(converted_names))\r\n                converted_names.append(name)\r\n                description = help_text\r\n                yield name, value, description\r\n\r\n    import graphene_django.converter\r\n    graphene_django.converter.get_choices = get_choices\r\n```\r\n\r\nBut even in this way I cannot use `value` in the response instead of `name`\r\nThe only way to select graphql field for custom model field is declare it many times (for each field of this type)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/769", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/769/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/769/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/769/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/769", "id": 490918694, "node_id": "MDU6SXNzdWU0OTA5MTg2OTQ=", "number": 769, "title": " I have an image field in my Django model and I am trying to get absolute path of the image field output from Graphene so as to connect to my client", "user": {"login": "udemezue01", "id": 16034417, "node_id": "MDQ6VXNlcjE2MDM0NDE3", "avatar_url": "https://avatars1.githubusercontent.com/u/16034417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udemezue01", "html_url": "https://github.com/udemezue01", "followers_url": "https://api.github.com/users/udemezue01/followers", "following_url": "https://api.github.com/users/udemezue01/following{/other_user}", "gists_url": "https://api.github.com/users/udemezue01/gists{/gist_id}", "starred_url": "https://api.github.com/users/udemezue01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udemezue01/subscriptions", "organizations_url": "https://api.github.com/users/udemezue01/orgs", "repos_url": "https://api.github.com/users/udemezue01/repos", "events_url": "https://api.github.com/users/udemezue01/events{/privacy}", "received_events_url": "https://api.github.com/users/udemezue01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-09T07:15:04Z", "updated_at": "2019-11-30T19:52:41Z", "closed_at": "2019-10-29T18:24:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "here is my code.\r\n\r\nclass ProfileType(DjangoObjectType): \r\n     class Meta: model = Profile\r\n\r\n     def resolve_avatar(self, info, **kwargs):\r\n\r\n    print(info.context.build_absolute_uri(self.avatar))```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/767", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/767/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/767/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/767/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/767", "id": 490225984, "node_id": "MDU6SXNzdWU0OTAyMjU5ODQ=", "number": 767, "title": "Filtering on Relay with ForeignKey Models", "user": {"login": "hasyemiraws", "id": 13167926, "node_id": "MDQ6VXNlcjEzMTY3OTI2", "avatar_url": "https://avatars3.githubusercontent.com/u/13167926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hasyemiraws", "html_url": "https://github.com/hasyemiraws", "followers_url": "https://api.github.com/users/hasyemiraws/followers", "following_url": "https://api.github.com/users/hasyemiraws/following{/other_user}", "gists_url": "https://api.github.com/users/hasyemiraws/gists{/gist_id}", "starred_url": "https://api.github.com/users/hasyemiraws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hasyemiraws/subscriptions", "organizations_url": "https://api.github.com/users/hasyemiraws/orgs", "repos_url": "https://api.github.com/users/hasyemiraws/repos", "events_url": "https://api.github.com/users/hasyemiraws/events{/privacy}", "received_events_url": "https://api.github.com/users/hasyemiraws/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-06T09:28:36Z", "updated_at": "2019-12-26T19:59:28Z", "closed_at": "2019-12-26T19:59:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I try using the filter class for related models using ForeignKey, I found a problem when using the filter_fields with Relay.\r\n\r\nSo I have two models, **Category** and **CategoryTranslation**: \r\n\r\n```\r\nclass Category(models.Model):\r\n   active = models.BooleanField(default=True)\r\n   products = models.ManyToManyField(\r\n        'Product', related_name='category_products', through='ProductCategory')\r\n   date_add = models.DateTimeField(auto_now_add=True)\r\n   date_upd = models.DateTimeField(auto_now=True)\r\n```\r\n\r\n```\r\nclass CategoryTranslation(SeoModelTranslation):\r\n    slug = models.SlugField(max_length=256, allow_unicode=True)\r\n    name = models.CharField(max_length=300, default=False)\r\n    lang = models.CharField(max_length=10)\r\n    category = models.ForeignKey(\r\n        Category, related_name='translations', on_delete=models.CASCADE)\r\n```  \r\n\r\nOn my schema, I add translations to the filter_field like this:\r\n\r\n```\r\nclass Category(DjangoObjectType):\r\n    class Meta:\r\n        interfaces = (graphene.relay.Node, )\r\n        model = models.Category\r\n        filter_fields = {\r\n            'id': ['exact', 'istartswith'],\r\n            'translations__name': ['exact', 'icontains', 'in'],\r\n            'translations__lang': ['exact']\r\n        }\r\n        connection_class = CountableConnection\r\n```\r\n\r\nBut the result that I got when I use icontains are wrong, cause it's showing me duplicate result. (Basically it will show the category times the number of the translations.\r\n\r\nSample result:\r\n```\r\n{\r\n  \"data\": {\r\n    \"categories\": {\r\n      \"edges\": [\r\n        {\r\n          \"node\": {\r\n            \"id\": \"Q2F0ZWdvcnk6Nw==\",\r\n            \"active\": true,\r\n            \"translations\": {\r\n              \"edges\": [\r\n                {\r\n                  \"node\": {\r\n                    \"id\": \"Q2F0ZWdvcnlUcmFuc2xhdGlvbjoxNg==\",\r\n                    \"lang\": \"es\",\r\n                    \"name\": \"es test\"\r\n                  }\r\n                },\r\n                {\r\n                  \"node\": {\r\n                    \"id\": \"Q2F0ZWdvcnlUcmFuc2xhdGlvbjoxNA==\",\r\n                    \"lang\": \"en\",\r\n                    \"name\": \"test en\"\r\n                  }\r\n                },\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        },{\r\n          \"node\": {\r\n            \"id\": \"Q2F0ZWdvcnk6Nw==\",\r\n            \"active\": true,\r\n            \"translations\": {\r\n              \"edges\": [\r\n                {\r\n                  \"node\": {\r\n                    \"id\": \"Q2F0ZWdvcnlUcmFuc2xhdGlvbjoxNg==\",\r\n                    \"lang\": \"es\",\r\n                    \"name\": \"es test\"\r\n                  }\r\n                },\r\n                {\r\n                  \"node\": {\r\n                    \"id\": \"Q2F0ZWdvcnlUcmFuc2xhdGlvbjoxNA==\",\r\n                    \"lang\": \"en\",\r\n                    \"name\": \"test en\"\r\n                  }\r\n                },\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }, {\r\n          \"node\": {\r\n            \"id\": \"Q2F0ZWdvcnk6MTI=\",\r\n            \"active\": true,\r\n            \"translations\": {\r\n              \"edges\": [\r\n                {\r\n                  \"node\": {\r\n                    \"id\": \"Q2F0ZWdvcnlUcmFuc2xhdGlvbjo2Mg==\",\r\n                    \"lang\": \"es\",\r\n                    \"name\": \"another category test es\"\r\n                  }\r\n                },\r\n                {\r\n                  \"node\": {\r\n                    \"id\": \"Q2F0ZWdvcnlUcmFuc2xhdGlvbjo2Mg==\",\r\n                    \"lang\": \"en\",\r\n                    \"name\": \"another category test en\"\r\n                  }\r\n                },\r\n               }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSo for example in the result, the first and the second is the same..\r\n\r\nMy sample query for that is like this: \r\n\r\n```\r\nquery allCategories {\r\n  categories(first: 10, translations_Name_Icontains: \"test\") {\r\n    edges {\r\n      node {\r\n        ........\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhat is it that I do wrong here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/766", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/766/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/766/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/766/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/766", "id": 489889766, "node_id": "MDU6SXNzdWU0ODk4ODk3NjY=", "number": 766, "title": "Add support for GEOS API types-- PointField, PolygonField etc.", "user": {"login": "EverWinter23", "id": 21227016, "node_id": "MDQ6VXNlcjIxMjI3MDE2", "avatar_url": "https://avatars0.githubusercontent.com/u/21227016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EverWinter23", "html_url": "https://github.com/EverWinter23", "followers_url": "https://api.github.com/users/EverWinter23/followers", "following_url": "https://api.github.com/users/EverWinter23/following{/other_user}", "gists_url": "https://api.github.com/users/EverWinter23/gists{/gist_id}", "starred_url": "https://api.github.com/users/EverWinter23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EverWinter23/subscriptions", "organizations_url": "https://api.github.com/users/EverWinter23/orgs", "repos_url": "https://api.github.com/users/EverWinter23/repos", "events_url": "https://api.github.com/users/EverWinter23/events{/privacy}", "received_events_url": "https://api.github.com/users/EverWinter23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-05T17:02:04Z", "updated_at": "2020-03-13T10:02:36Z", "closed_at": "2020-03-13T10:02:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Can we add support for fields offered by ``django.contrib.gis.geos``--  [GEOS](https://docs.djangoproject.com/en/2.2/ref/contrib/gis/geos/). ``django-graphql-geojson`` package comes closest to solving the problem, however, the particular implementation has a major drawback that it converts the whole *model* into *GeoJSON*, which causes problems with external interfaces which are defined on *non-geometric* fields. (May also break internal ones.)\r\n\r\nConverting *GEOS* fields into *GeoJSON* should more than sufficient for most use cases because it provides you with pre-built interfaces and filters on non-geometric types.\r\n\r\nHow would one go about adding support for serialization of these fields?  Having gone through the codebase-- adding them to ``converter.py`` coupled with ``tests.py`` should be sufficient or am I missing something?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/764", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/764/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/764/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/764/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/764", "id": 489812065, "node_id": "MDU6SXNzdWU0ODk4MTIwNjU=", "number": 764, "title": "It is possible to translate validation errors that graphene django provides?", "user": {"login": "claudio-evocorp", "id": 47366382, "node_id": "MDQ6VXNlcjQ3MzY2Mzgy", "avatar_url": "https://avatars2.githubusercontent.com/u/47366382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudio-evocorp", "html_url": "https://github.com/claudio-evocorp", "followers_url": "https://api.github.com/users/claudio-evocorp/followers", "following_url": "https://api.github.com/users/claudio-evocorp/following{/other_user}", "gists_url": "https://api.github.com/users/claudio-evocorp/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudio-evocorp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudio-evocorp/subscriptions", "organizations_url": "https://api.github.com/users/claudio-evocorp/orgs", "repos_url": "https://api.github.com/users/claudio-evocorp/repos", "events_url": "https://api.github.com/users/claudio-evocorp/events{/privacy}", "received_events_url": "https://api.github.com/users/claudio-evocorp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-05T14:43:37Z", "updated_at": "2019-10-21T11:42:59Z", "closed_at": "2019-10-21T11:42:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "`{\r\n  \"errors\": [\r\n    {\r\n      \"message\": \"Authentication credentials were not provided\",\r\n      \"locations\": [\r\n        {\r\n          \"line\": 2,\r\n          \"column\": 3\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"data\": {\r\n    \"viewer\": null\r\n  }\r\n}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/761", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/761/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/761/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/761/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/761", "id": 488679606, "node_id": "MDU6SXNzdWU0ODg2Nzk2MDY=", "number": 761, "title": "Question: Creating dynamic InputObjectType that includes field that is self-referential", "user": {"login": "seandavi", "id": 92435, "node_id": "MDQ6VXNlcjkyNDM1", "avatar_url": "https://avatars1.githubusercontent.com/u/92435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seandavi", "html_url": "https://github.com/seandavi", "followers_url": "https://api.github.com/users/seandavi/followers", "following_url": "https://api.github.com/users/seandavi/following{/other_user}", "gists_url": "https://api.github.com/users/seandavi/gists{/gist_id}", "starred_url": "https://api.github.com/users/seandavi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seandavi/subscriptions", "organizations_url": "https://api.github.com/users/seandavi/orgs", "repos_url": "https://api.github.com/users/seandavi/repos", "events_url": "https://api.github.com/users/seandavi/events{/privacy}", "received_events_url": "https://api.github.com/users/seandavi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T15:37:25Z", "updated_at": "2019-09-03T15:39:56Z", "closed_at": "2019-09-03T15:39:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to create an InputObjectType that has dynamic fields that is meant for complex filtering of fields but that also contains a couple of self-referencing fields to allow boolean operations (AND, OR). Here is a concrete example of what I am trying to do, taken from [here](https://www.contentful.com/developers/docs/references/graphql/#/reference/collection-filters):\r\n\r\n```\r\ninput FriendlyUserFilter {\r\n  sys: SysFilter\r\n  name: String\r\n  name_not: String\r\n  name_exists: Boolean\r\n  name_contains: String\r\n  # ... more name filters\r\n  age: Number\r\n  age_gt: Number\r\n  age_lt: Number\r\n  # ... more age filters\r\n  AND: [FriendlyUserFilter]\r\n  OR: [FriendlyUserFilter]\r\n}\r\n```\r\n\r\nI am using the technique described [here](https://github.com/graphql-python/graphene/issues/945#issuecomment-484588866) to do so. I'm curious how to implement the `AND` and `OR` functionality that includes a reference to the class itself. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/760", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/760/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/760/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/760/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/760", "id": 488232065, "node_id": "MDU6SXNzdWU0ODgyMzIwNjU=", "number": 760, "title": "SerializerMethodField method does not get called", "user": {"login": "B4rtware", "id": 34386047, "node_id": "MDQ6VXNlcjM0Mzg2MDQ3", "avatar_url": "https://avatars0.githubusercontent.com/u/34386047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/B4rtware", "html_url": "https://github.com/B4rtware", "followers_url": "https://api.github.com/users/B4rtware/followers", "following_url": "https://api.github.com/users/B4rtware/following{/other_user}", "gists_url": "https://api.github.com/users/B4rtware/gists{/gist_id}", "starred_url": "https://api.github.com/users/B4rtware/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/B4rtware/subscriptions", "organizations_url": "https://api.github.com/users/B4rtware/orgs", "repos_url": "https://api.github.com/users/B4rtware/repos", "events_url": "https://api.github.com/users/B4rtware/events{/privacy}", "received_events_url": "https://api.github.com/users/B4rtware/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-02T15:02:53Z", "updated_at": "2019-12-16T16:07:41Z", "closed_at": "2019-12-16T16:07:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am trying to understand how I would implement an additional field (token) inside the serializer class from rest_framework. This code snippet works in native django rest framework but unfortunately not in conjunction with graphene_django.\r\n\r\nUsing this serializer:\r\n```python\r\nfrom rest_framework import serializers\r\nfrom graphql_jwt.utils import jwt_payload, jwt_encode\r\nfrom django.contrib.auth.models import User\r\n\r\n\r\nclass UserSerializer(serializers.ModelSerializer):\r\n    # sending back token for initial login\r\n    token = serializers.SerializerMethodField()\r\n\r\n    def get_token(self, obj):\r\n        # generate new token\r\n        return jwt_encode(jwt_payload(obj))\r\n        \r\n    class Meta:\r\n        model = User\r\n        fields = [\"password\", \"username\", \"email\", \"token\"]\r\n```\r\n\r\nwith this graphql mutation:\r\n```graphql\r\nmutation {\r\n  createUser(input: {username: \"john_doe\", password: \"f\", email: \"john_doe@f.com\"}) {\r\n    errors {\r\n      messages\r\n    },\r\n    username,\r\n    token\r\n  }\r\n}\r\n```\r\n\r\nit returns the response:\r\n```json\r\n{\r\n  \"data\": {\r\n    \"createUser\": {\r\n      \"errors\": null,\r\n      \"username\": \"john_doe\",\r\n      \"token\": \"john_doe\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHere you can see that the token will be filled with the used username instead of a generated token.\r\n\r\nI really want to use those Serializer classes because of the validation function. I have already read about some limitations e.g \"extra_kwargs\" but did not found something specific about SerializerMethodField class. I have already thought about a workaround by initializing the Serializer class inside of a `class UserMutation(graphene.Mutation)` and calling its method `is_valid` but I hope for an explanation what I am doing wrong to use the documented procedure.\r\n\r\n---\r\nI would expect:\r\n```json\r\n{\r\n  \"data\": {\r\n    \"createUser\": {\r\n      \"errors\": null,\r\n      \"username\": \"john_doe\",\r\n      \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFstZSI6InlkbGFkbWluIiwiZXhwIjoxNTY3NDMwMdzk3LCJvcmlnSWFs0IjoxNTY3NDMwMDk3fQ.zt-XQN5k8zWrAMpNWN-xt_vRe6topM7kzFVSm6CT0Vs\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n---\r\n\r\n- CPython 3.7.4 64bit\r\n- Windows 10\r\n---\r\n- django                      2.2.4\r\n- graphene-django     2.5.0\r\n- djangorestframework 3.10.2", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/759", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/759/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/759/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/759/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/759", "id": 487600975, "node_id": "MDU6SXNzdWU0ODc2MDA5NzU=", "number": 759, "title": "Can you subclass a mutation?", "user": {"login": "Siecje", "id": 4069476, "node_id": "MDQ6VXNlcjQwNjk0NzY=", "avatar_url": "https://avatars3.githubusercontent.com/u/4069476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Siecje", "html_url": "https://github.com/Siecje", "followers_url": "https://api.github.com/users/Siecje/followers", "following_url": "https://api.github.com/users/Siecje/following{/other_user}", "gists_url": "https://api.github.com/users/Siecje/gists{/gist_id}", "starred_url": "https://api.github.com/users/Siecje/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Siecje/subscriptions", "organizations_url": "https://api.github.com/users/Siecje/orgs", "repos_url": "https://api.github.com/users/Siecje/repos", "events_url": "https://api.github.com/users/Siecje/events{/privacy}", "received_events_url": "https://api.github.com/users/Siecje/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-30T17:47:54Z", "updated_at": "2020-04-26T13:25:29Z", "closed_at": "2020-04-26T13:25:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "```Python\r\nclass CreateProject(graphene.Mutation):\r\n    id = graphene.ID()\r\n    class Arguments:\r\n        name = graphene.String(required=True)\r\n    def mutate(self, info, **args):\r\n        return CreateProject(id=1)\r\n\r\n\r\nclass CreateProject2(CreateProject):\r\n    def mutate(self, info, **args):\r\n        args['foo'] = 1\r\n        return super().mutate(info, **args)\r\n\r\n\r\nclass Mutation(graphene.ObjectType):\r\n    create_project = CreateProject2.Field()\r\n```\r\n\r\nI have subclassed a mutation but I'm getting this error.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/cody/Desktop/cookbook/venv/lib/python3.7/site-packages/promise/promise.py\", line 487, in _resolve_from_executor\r\n    executor(resolve, reject)\r\n  File \"/home/cody/Desktop/cookbook/venv/lib/python3.7/site-packages/promise/promise.py\", line 754, in executor\r\n    return resolve(f(*args, **kwargs))\r\n  File \"/home/cody/Desktop/cookbook/venv/lib/python3.7/site-packages/graphql/execution/middleware.py\", line 75, in make_it_promise\r\n    return next(*args, **kwargs)\r\n  File \"/home/cody/Desktop/cookbook/cookbook/schema.py\", line 20, in mutate\r\n    return super().mutate(info, **args)\r\ngraphql.error.located_error.GraphQLLocatedError: 'super' object has no attribute 'mutate'\r\n```\r\n\r\nhttps://github.com/Siecje/graphene-help/blob/master/cookbook/schema.py#L12\r\n\r\nHere is a small repo to reproduce the issue.\r\n\r\nhttps://github.com/Siecje/graphene-help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/758", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/758/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/758/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/758/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/758", "id": 485933084, "node_id": "MDU6SXNzdWU0ODU5MzMwODQ=", "number": 758, "title": "merge_querysets breaks annotations with DjangoFilterConnectionField", "user": {"login": "jarcoal", "id": 431261, "node_id": "MDQ6VXNlcjQzMTI2MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/431261?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jarcoal", "html_url": "https://github.com/jarcoal", "followers_url": "https://api.github.com/users/jarcoal/followers", "following_url": "https://api.github.com/users/jarcoal/following{/other_user}", "gists_url": "https://api.github.com/users/jarcoal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jarcoal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jarcoal/subscriptions", "organizations_url": "https://api.github.com/users/jarcoal/orgs", "repos_url": "https://api.github.com/users/jarcoal/repos", "events_url": "https://api.github.com/users/jarcoal/events{/privacy}", "received_events_url": "https://api.github.com/users/jarcoal/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-27T17:17:04Z", "updated_at": "2019-12-26T19:59:14Z", "closed_at": "2019-12-26T19:59:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "We recently updated to v2.5 and have found that many of our connections that use `DjangoFilterConnectionField` no longer work as expected (aka the filters aren't applied).\r\n\r\nAfter some digging it looks like any filter that uses annotations are having them stripped off by `DjangoConnectionField.merge_querysets` [here](https://github.com/graphql-python/graphene-django/blob/master/graphene_django/fields.py#L96).\r\n\r\nSpecifically it looks like PR #693 started this issue because before that `merge_querysets` wouldn't be called in many situations.\r\n\r\nThoughts?  Is there a better way to go handling annotations or this is just a bug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/757", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/757/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/757/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/757/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/757", "id": 485607600, "node_id": "MDU6SXNzdWU0ODU2MDc2MDA=", "number": 757, "title": "DjangoFormMutation and DjangoModelFormMutation returning empty lists is not according to spec", "user": {"login": "valberg", "id": 5782, "node_id": "MDQ6VXNlcjU3ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valberg", "html_url": "https://github.com/valberg", "followers_url": "https://api.github.com/users/valberg/followers", "following_url": "https://api.github.com/users/valberg/following{/other_user}", "gists_url": "https://api.github.com/users/valberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/valberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valberg/subscriptions", "organizations_url": "https://api.github.com/users/valberg/orgs", "repos_url": "https://api.github.com/users/valberg/repos", "events_url": "https://api.github.com/users/valberg/events{/privacy}", "received_events_url": "https://api.github.com/users/valberg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-27T06:22:15Z", "updated_at": "2019-12-09T08:15:19Z", "closed_at": "2019-12-09T08:15:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nAccording to the GraphQL spec (https://graphql.github.io/graphql-spec/June2018/#sec-Errors):\r\n\r\n > If no errors were encountered during the requested operation, the errors entry should not be present in the result.\r\n\r\nBut when using `DjangoFormMutation` and `DjangoModelFormMutation` errors are set to `[]`.\r\n\r\n```\r\n    @classmethod\r\n    def perform_mutate(cls, form, info):\r\n        form.save()\r\n        return cls(errors=[])\r\n```\r\n\r\nFrom https://github.com/graphql-python/graphene-django/blob/master/graphene_django/forms/mutation.py#L122-L125\r\n\r\nI know I can 'just override' `perform_mutate` and set `errors=None`, but shouldn't graphene-django follow the GraphQL spec? Or at least address this in the documentation?\r\n\r\nI can do a PR and do the work to get this \"in line with the spec\", just wanted to make sure I'm not missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/756", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/756/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/756/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/756/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/756", "id": 484356362, "node_id": "MDU6SXNzdWU0ODQzNTYzNjI=", "number": 756, "title": "How to use throttling in django-graphene?", "user": {"login": "amiyatulu", "id": 2051004, "node_id": "MDQ6VXNlcjIwNTEwMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2051004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amiyatulu", "html_url": "https://github.com/amiyatulu", "followers_url": "https://api.github.com/users/amiyatulu/followers", "following_url": "https://api.github.com/users/amiyatulu/following{/other_user}", "gists_url": "https://api.github.com/users/amiyatulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/amiyatulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amiyatulu/subscriptions", "organizations_url": "https://api.github.com/users/amiyatulu/orgs", "repos_url": "https://api.github.com/users/amiyatulu/repos", "events_url": "https://api.github.com/users/amiyatulu/events{/privacy}", "received_events_url": "https://api.github.com/users/amiyatulu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458951, "node_id": "MDU6TGFiZWw0NDQ0NTg5NTE=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-23T06:40:04Z", "updated_at": "2019-12-26T21:38:58Z", "closed_at": "2019-12-26T21:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "The answer says to use django-throttle-requests\r\n\r\n[Issue 676](https://github.com/graphql-python/graphene-django/issues/676)\r\n\r\nBut how to use it, it gives the following error:\r\n\r\nThis the error with django-throttle-requests\r\n`'ResolveInfo' object has no attribute 'META'`\r\n\r\nfor the code:\r\n\r\n```\r\nfrom django.utils.decorators import method_decorator\r\nfrom throttle.decorators import throttle\r\n\r\nclass CreatePageView(graphene.Mutation):\r\n    pageview = graphene.Field(PageViewType)\r\n    class Arguments:\r\n        subscriptionkey = graphene.String(required=True)\r\n\r\n    @method_decorator(throttle(zone='default'))\r\n    def mutate(self, info, subscriptionkey):\r\n        pv = PageView(subscriptionkey=subscriptionkey)\r\n        pv.save()\r\n        return CreatePageView(pageview=pv)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/754", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/754/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/754/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/754/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/754", "id": 482376897, "node_id": "MDU6SXNzdWU0ODIzNzY4OTc=", "number": 754, "title": "Is there a way to return a ChildClass object on a BaseClass Node?", "user": {"login": "kikeh", "id": 2196582, "node_id": "MDQ6VXNlcjIxOTY1ODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/2196582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kikeh", "html_url": "https://github.com/kikeh", "followers_url": "https://api.github.com/users/kikeh/followers", "following_url": "https://api.github.com/users/kikeh/following{/other_user}", "gists_url": "https://api.github.com/users/kikeh/gists{/gist_id}", "starred_url": "https://api.github.com/users/kikeh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kikeh/subscriptions", "organizations_url": "https://api.github.com/users/kikeh/orgs", "repos_url": "https://api.github.com/users/kikeh/repos", "events_url": "https://api.github.com/users/kikeh/events{/privacy}", "received_events_url": "https://api.github.com/users/kikeh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-19T15:24:18Z", "updated_at": "2019-08-20T17:02:30Z", "closed_at": "2019-08-20T17:02:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "### Context\r\n\r\nI am try to implement a generic `UploadAttachment` mutation that can accept different types of attachments (such as audio or photo), but I do want to keep the type of attachments as separate models with a base class:\r\n\r\n```python\r\n# models.py\r\n\r\nclass Attachment:\r\n    file = models.FileField()\r\n\r\n    class Meta:\r\n        abstract = True\r\n\r\nclass Photo(Attachment):\r\n    type = 'photo'\r\n\r\nclass Audio(Attachment):\r\n    type = 'audio'\r\n```\r\n\r\n```python\r\n# nodes.py\r\n\r\nclass AttachmentNode(DjangoObjectType):\r\n    type = graphene.String()\r\n    url = graphene.String()\r\n\r\n    class Meta:\r\n        model = Attachment\r\n        interfaces = [relay.Node]\r\n        fields = ['id']\r\n\r\n    def resolve_type(self, info):\r\n        return self.type\r\n\r\n    def resolve_url(self, info):\r\n        return self.file.url\r\n\r\nclass PhotoNode(AttachmentNode):\r\n\r\n    class Meta:\r\n        model = Photo\r\n\r\nclass AudioNode(AttachmentNode):\r\n\r\n    class Meta:\r\n        model = Audio\r\n```\r\n\r\n```python\r\n# mutations.py\r\n\r\nclass UploadAttachment(graphene.ClientIDMutation):\r\n\r\n    attachment = graphene.Field(AttachmentNode)\r\n\r\n    @classmethod\r\n    def mutate_and_get_payload(cls, root, info, **input):\r\n        context = info.context\r\n\r\n        if 'photo' in context.FILES:\r\n            attachment_model = Photo\r\n        elif 'audio' in context.FILES:\r\n            attachment_model = Audio\r\n\r\n        attachment = attachment_model.objects.create()\r\n\r\n        # do stuff with attachment\r\n\r\n        return cls(attachment=attachment)\r\n```\r\n\r\n### Question\r\n\r\nWhen I use this, everything works fine, except that I get a `GraphQLError`:\r\n`Expected value of type \"AttachmentNode\" but got: Audio.`\r\nwhich I understand, but would like to make it work.\r\n\r\nIs it possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/752", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/752/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/752/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/752/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/752", "id": 482005943, "node_id": "MDU6SXNzdWU0ODIwMDU5NDM=", "number": 752, "title": "DjangoObjectType representing same models, foreign key takes the last defined node", "user": {"login": "amiyatulu", "id": 2051004, "node_id": "MDQ6VXNlcjIwNTEwMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2051004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amiyatulu", "html_url": "https://github.com/amiyatulu", "followers_url": "https://api.github.com/users/amiyatulu/followers", "following_url": "https://api.github.com/users/amiyatulu/following{/other_user}", "gists_url": "https://api.github.com/users/amiyatulu/gists{/gist_id}", "starred_url": "https://api.github.com/users/amiyatulu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amiyatulu/subscriptions", "organizations_url": "https://api.github.com/users/amiyatulu/orgs", "repos_url": "https://api.github.com/users/amiyatulu/repos", "events_url": "https://api.github.com/users/amiyatulu/events{/privacy}", "received_events_url": "https://api.github.com/users/amiyatulu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-18T15:23:19Z", "updated_at": "2019-08-23T06:36:15Z", "closed_at": "2019-08-23T06:36:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "While querying comment using CommentNode, the foreign key article takes ArticleNode2 instead of ArticleNode1, how to explicitly say which DjangoObjectType of the same model to take?\r\n\r\n```\r\nclass ArticleNode1(DjangoObjectType):\r\n    class Meta:\r\n        model = Article\r\n        interfaces = (relay.Node, )\r\n\r\nclass ArticleNode2(DjangoObjectType):\r\n    class Meta:\r\n        model = Article\r\n        interfaces = (relay.Node, )\r\nclass CommentNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Comment\r\n        interfaces = (relay.Node, )\r\n```\r\n\r\nModels:\r\n\r\n```\r\nclass Article(models.Model):\r\n    title = models.CharField(max_length=255, unique=True)\r\n\r\nclass Comment(models.Model):\r\n    article = models.ForeignKey(\r\n        Article,\r\n        on_delete=models.CASCADE,\r\n    )\r\n    comment = models.CharField(max_length=255)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/751", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/751/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/751/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/751/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/751", "id": 481947212, "node_id": "MDU6SXNzdWU0ODE5NDcyMTI=", "number": 751, "title": "How do I make the pagination like using django rest framework?", "user": {"login": "TinchyChing", "id": 13182485, "node_id": "MDQ6VXNlcjEzMTgyNDg1", "avatar_url": "https://avatars3.githubusercontent.com/u/13182485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TinchyChing", "html_url": "https://github.com/TinchyChing", "followers_url": "https://api.github.com/users/TinchyChing/followers", "following_url": "https://api.github.com/users/TinchyChing/following{/other_user}", "gists_url": "https://api.github.com/users/TinchyChing/gists{/gist_id}", "starred_url": "https://api.github.com/users/TinchyChing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TinchyChing/subscriptions", "organizations_url": "https://api.github.com/users/TinchyChing/orgs", "repos_url": "https://api.github.com/users/TinchyChing/repos", "events_url": "https://api.github.com/users/TinchyChing/events{/privacy}", "received_events_url": "https://api.github.com/users/TinchyChing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-18T02:58:49Z", "updated_at": "2019-10-25T11:15:06Z", "closed_at": "2019-10-25T11:15:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I didn't see any docs about pagination, will that be coming in future?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/750", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/750/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/750/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/750/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/750", "id": 481529685, "node_id": "MDU6SXNzdWU0ODE1Mjk2ODU=", "number": 750, "title": "Bug: Supposedly wrong types in query with filter_fields since 2.4.0", "user": {"login": "lassesteffen", "id": 29383763, "node_id": "MDQ6VXNlcjI5MzgzNzYz", "avatar_url": "https://avatars1.githubusercontent.com/u/29383763?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lassesteffen", "html_url": "https://github.com/lassesteffen", "followers_url": "https://api.github.com/users/lassesteffen/followers", "following_url": "https://api.github.com/users/lassesteffen/following{/other_user}", "gists_url": "https://api.github.com/users/lassesteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lassesteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lassesteffen/subscriptions", "organizations_url": "https://api.github.com/users/lassesteffen/orgs", "repos_url": "https://api.github.com/users/lassesteffen/repos", "events_url": "https://api.github.com/users/lassesteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/lassesteffen/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 444458945, "node_id": "MDU6TGFiZWw0NDQ0NTg5NDU=", "url": "https://api.github.com/repos/graphql-python/graphene-django/labels/%F0%9F%90%9Bbug", "name": "\ud83d\udc1bbug", "color": "ee0701", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jkimbo", "id": 691952, "node_id": "MDQ6VXNlcjY5MTk1Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/691952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkimbo", "html_url": "https://github.com/jkimbo", "followers_url": "https://api.github.com/users/jkimbo/followers", "following_url": "https://api.github.com/users/jkimbo/following{/other_user}", "gists_url": "https://api.github.com/users/jkimbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkimbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkimbo/subscriptions", "organizations_url": "https://api.github.com/users/jkimbo/orgs", "repos_url": "https://api.github.com/users/jkimbo/repos", "events_url": "https://api.github.com/users/jkimbo/events{/privacy}", "received_events_url": "https://api.github.com/users/jkimbo/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 10, "created_at": "2019-08-16T09:43:08Z", "updated_at": "2019-10-10T08:20:16Z", "closed_at": "2019-09-22T20:15:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Problem\r\nWhen using filter_fields I get an error about using wrong types which started appearing in 2.4.0.\r\n`Variable \"startedAtNull\" of type \"Boolean\" used in position expecting type \"DateTime\".` The error does not occur with graphene-django 2.3.2\r\n\r\n### Context\r\n- using django-filter 2.2.0\r\n- django 2.4.0\r\n### \r\n**Schema.py**\r\n```\r\nDATETIME_FILTERS = ['exact', 'isnull', 'lt', 'lte', 'gt', 'gte', 'month', 'year', 'date']\r\n\r\nclass OrderNode(DjangoObjectType):\r\n    class Meta:\r\n        model = Order\r\n        exclude = ('tenant', )\r\n        filter_fields = {\r\n            'id': ['exact'],\r\n            'start_at': DATETIME_FILTERS,\r\n            'finish_at': DATETIME_FILTERS,\r\n            'finished_at': DATETIME_FILTERS,\r\n            'started_at': DATETIME_FILTERS,\r\n        }\r\n        interfaces = (OrderNodeInterface,)\r\n```\r\n\r\n**Query:**\r\n```\r\nORDERS_QUERY = '''\r\n    query order(\r\n        $tenant: String\r\n        $projectId: ID\r\n        $startedAtNull: Boolean\r\n    ) {\r\n        orders(\r\n            tenant: $tenant\r\n            project_Id: $projectId\r\n            startedAt_Isnull: $startedAtNull\r\n        ) {\r\n            edges {\r\n                node {\r\n                    id,\r\n                    city\r\n                }\r\n            }\r\n        }\r\n    }\r\n'''\r\n```\r\n\r\n**Result:**\r\n`Variable \"startedAtNull\" of type \"Boolean\" used in position expecting type \"DateTime\".`\r\n\r\n\r\n\r\n\r\n### Solution\r\nI am confident it is related to this PR: https://github.com/graphql-python/graphene-django/pull/682/files . In graphene_django/filter/utils.py the way how to retrieve the Type of a field was changed. Or maybe I misunderstood the changelog.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/graphql-python/graphene-django/issues/747", "repository_url": "https://api.github.com/repos/graphql-python/graphene-django", "labels_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/747/labels{/name}", "comments_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/747/comments", "events_url": "https://api.github.com/repos/graphql-python/graphene-django/issues/747/events", "html_url": "https://github.com/graphql-python/graphene-django/issues/747", "id": 481296033, "node_id": "MDU6SXNzdWU0ODEyOTYwMzM=", "number": 747, "title": "Type <class 'fieldrecords.schema.Mutation'> is not a valid ObjectType.", "user": {"login": "a-c-sreedhar-reddy", "id": 16081083, "node_id": "MDQ6VXNlcjE2MDgxMDgz", "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a-c-sreedhar-reddy", "html_url": "https://github.com/a-c-sreedhar-reddy", "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers", "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}", "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions", "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs", "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos", "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}", "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-15T19:13:55Z", "updated_at": "2019-08-15T22:37:32Z", "closed_at": "2019-08-15T22:37:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is my piece of code. \r\n\r\n```\r\n\r\nclass FieldMutation(graphene.Mutation):\r\n    class Arguments:\r\n        id = graphene.String(required=True)\r\n        name = graphene.String()\r\n        acres = graphene.Int()\r\n    field = graphene.Field(FieldType)\r\n\r\n    def mutate(self, info, **kwargs):\r\n        field = Field.objects.get(pk=kwargs.get(\"id\"))\r\n        field.name = kwargs.get(\"name\", field.name)\r\n        field.acres = kwargs.get(\"acres\", field.acres)\r\n        field.save()\r\n        return FieldMutation(field=field)\r\n\r\n\r\nclass Mutation:\r\n    update_field = FieldMutation.Field()\r\n\r\n\r\nschema = graphene.Schema(query=Query, mutation=Mutation)\r\n```", "performed_via_github_app": null, "score": 1.0}]}