{"total_count": 407, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/testing-cabal/mock/issues/491", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/491/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/491/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/491/events", "html_url": "https://github.com/testing-cabal/mock/issues/491", "id": 627520414, "node_id": "MDU6SXNzdWU2Mjc1MjA0MTQ=", "number": 491, "title": "spec_set/autospec/spec seems to not be reading attributes defined in class body", "user": {"login": "efagerberg", "id": 7632073, "node_id": "MDQ6VXNlcjc2MzIwNzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/7632073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efagerberg", "html_url": "https://github.com/efagerberg", "followers_url": "https://api.github.com/users/efagerberg/followers", "following_url": "https://api.github.com/users/efagerberg/following{/other_user}", "gists_url": "https://api.github.com/users/efagerberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/efagerberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efagerberg/subscriptions", "organizations_url": "https://api.github.com/users/efagerberg/orgs", "repos_url": "https://api.github.com/users/efagerberg/repos", "events_url": "https://api.github.com/users/efagerberg/events{/privacy}", "received_events_url": "https://api.github.com/users/efagerberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T20:28:38Z", "updated_at": "2020-06-03T13:56:05Z", "closed_at": "2020-06-03T10:36:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I really like that this library allows for really strict mocking however one thing I have noticed is that it seems like using spec on a mock does not properly read the class body for attributes like some of the documentation claims. For example this is a snippet of the Logger class in python 3.6's `logging` module\r\n```python\r\nclass Logger(Filterer):\r\n    name: str\r\n    level: int\r\n    parent: Union[Logger, PlaceHolder]\r\n    propagate: bool\r\n    handlers: List[Handler]\r\n    disabled: int\r\n```\r\n\r\nNow I want to mock that class ensuring that propagate gets set to False for example\r\n```python\r\nfrom unittest import mock\r\nfrom logging import Logger\r\n\r\nlogger = mock.Mock(spec_set=Logger)\r\nsetFalse(logger)\r\nassert logger.propagate is False\r\n*** AttributeError: Mock object has no attribute 'propagate'\r\n```\r\n\r\nI have noticed this does work when the value is initialized in the class body so for example\r\n\r\n```python\r\nclass Logger(Filterer):\r\n    name: str\r\n    level: int\r\n    parent: Union[Logger, PlaceHolder]\r\n    propagate: bool = False\r\n    handlers: List[Handler]\r\n    disabled: int\r\n```\r\n\r\nThis would not fail with the test in question.\r\n\r\nWondering if this is intended behavior or not or if I am misunderstanding something.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/490", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/490/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/490/events", "html_url": "https://github.com/testing-cabal/mock/issues/490", "id": 625050903, "node_id": "MDU6SXNzdWU2MjUwNTA5MDM=", "number": 490, "title": "Can no longer patch flask.g", "user": {"login": "rtaft", "id": 6473067, "node_id": "MDQ6VXNlcjY0NzMwNjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/6473067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtaft", "html_url": "https://github.com/rtaft", "followers_url": "https://api.github.com/users/rtaft/followers", "following_url": "https://api.github.com/users/rtaft/following{/other_user}", "gists_url": "https://api.github.com/users/rtaft/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtaft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtaft/subscriptions", "organizations_url": "https://api.github.com/users/rtaft/orgs", "repos_url": "https://api.github.com/users/rtaft/repos", "events_url": "https://api.github.com/users/rtaft/events{/privacy}", "received_events_url": "https://api.github.com/users/rtaft/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-26T17:21:11Z", "updated_at": "2020-07-08T08:25:16Z", "closed_at": "2020-05-28T06:43:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading from mock 3.0.5 to 4.0.0, I am no longer able to patch `flask.g`\r\n```\r\nfrom mock import patch\r\n\r\nimport flask\r\n\r\n\r\ndef some_function():\r\n    flask.g.somevariable = True\r\n    return flask.g.somevariable\r\n\r\n\r\n@patch('flask.g')\r\ndef test_some_function(mock_flask_global):\r\n    assert some_function()\r\n```\r\n\r\nThis raises the error:\r\n```\r\nname = 'g'\r\n\r\n    def _lookup_app_object(name):\r\n        top = _app_ctx_stack.top\r\n        if top is None:\r\n>           raise RuntimeError(_app_ctx_err_msg)\r\nE           RuntimeError: Working outside of application context.\r\nE           \r\nE           This typically means that you attempted to use functionality that needed\r\nE           to interface with the current application object in some way. To solve\r\nE           this, set up an application context with app.app_context().  See the\r\nE           documentation for more information.\r\n\r\nvenv/lib/python3.6/site-packages/flask/globals.py:45: RuntimeError\r\n============================== short test summary info =========================\r\nFAILED temp_test.py::test_some_function - RuntimeError: Working outside of application context.\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/489", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/489/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/489/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/489/events", "html_url": "https://github.com/testing-cabal/mock/issues/489", "id": 586762632, "node_id": "MDU6SXNzdWU1ODY3NjI2MzI=", "number": 489, "title": "Can we get mock supported in python 3.8", "user": {"login": "KrishnaYadav2102", "id": 47589547, "node_id": "MDQ6VXNlcjQ3NTg5NTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/47589547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KrishnaYadav2102", "html_url": "https://github.com/KrishnaYadav2102", "followers_url": "https://api.github.com/users/KrishnaYadav2102/followers", "following_url": "https://api.github.com/users/KrishnaYadav2102/following{/other_user}", "gists_url": "https://api.github.com/users/KrishnaYadav2102/gists{/gist_id}", "starred_url": "https://api.github.com/users/KrishnaYadav2102/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KrishnaYadav2102/subscriptions", "organizations_url": "https://api.github.com/users/KrishnaYadav2102/orgs", "repos_url": "https://api.github.com/users/KrishnaYadav2102/repos", "events_url": "https://api.github.com/users/KrishnaYadav2102/events{/privacy}", "received_events_url": "https://api.github.com/users/KrishnaYadav2102/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-24T07:51:34Z", "updated_at": "2020-03-24T10:23:58Z", "closed_at": "2020-03-24T07:53:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can we get mock supported in python 3.8\r\n\r\nGetting following error while running unittests in python3.8 environment\r\n`\r\nTraceback (most recent call last):\r\n  File \"/Users/krishnayadav/Krishna/repositorties/pytractor/src/pytractor/tests/unit/test_mixins.py\", line 236, in test_title\r\n    self.verify_super_property_called_with_wait('title')\r\n  File \"/Users/krishnayadav/Krishna/repositorties/pytractor/src/pytractor/tests/unit/test_mixins.py\", line 213, in verify_super_property_called_with_wait\r\n    with patch(\r\n  File \"/Users/krishnayadav/Krishna/repositorties/pytractor/venv3.8/lib/python3.8/site-packages/mock/mock.py\", line 1421, in __enter__\r\n    self.target = self.getter()\r\n  File \"/Users/krishnayadav/Krishna/repositorties/pytractor/venv3.8/lib/python3.8/site-packages/mock/mock.py\", line 1595, in <lambda>\r\n    getter = lambda: _importer(target)\r\n  File \"/Users/krishnayadav/Krishna/repositorties/pytractor/venv3.8/lib/python3.8/site-packages/mock/mock.py\", line 1245, in _importer\r\n    thing = __import__(import_path)\r\nModuleNotFoundError: No module named '__builtin__'\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/487", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/487/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/487/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/487/events", "html_url": "https://github.com/testing-cabal/mock/issues/487", "id": 566530601, "node_id": "MDU6SXNzdWU1NjY1MzA2MDE=", "number": 487, "title": "4.0.x: 'ValueError: Sentinels must not start with _' and others", "user": {"login": "2uasimojo", "id": 9142716, "node_id": "MDQ6VXNlcjkxNDI3MTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9142716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/2uasimojo", "html_url": "https://github.com/2uasimojo", "followers_url": "https://api.github.com/users/2uasimojo/followers", "following_url": "https://api.github.com/users/2uasimojo/following{/other_user}", "gists_url": "https://api.github.com/users/2uasimojo/gists{/gist_id}", "starred_url": "https://api.github.com/users/2uasimojo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/2uasimojo/subscriptions", "organizations_url": "https://api.github.com/users/2uasimojo/orgs", "repos_url": "https://api.github.com/users/2uasimojo/repos", "events_url": "https://api.github.com/users/2uasimojo/events{/privacy}", "received_events_url": "https://api.github.com/users/2uasimojo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-17T21:46:35Z", "updated_at": "2020-06-26T13:40:11Z", "closed_at": "2020-02-18T07:31:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "With 4.0.0 and 4.0.1, tests start failing in several OpenStack projects. Example 1:\r\n\r\n```\r\n    b'Traceback (most recent call last):'\r\n    b'  File \"/home/efried/openstack/nova/nova/tests/unit/virt/libvirt/test_host.py\", line 589, in test_cpu_features_bug_1217630'\r\n    b\"    with mock.patch('nova.virt.libvirt.host.libvirt') as mock_libvirt:\"\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/oslotest/mock_fixture.py\", line 171, in __enter__'\r\n    b'    _lazy_autospec_method(mocked_method, original_attr, eat_self)'\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/oslotest/mock_fixture.py\", line 27, in _lazy_autospec_method'\r\n    b'    _lazy_autospec = mock.create_autospec(original_method)'\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/mock/mock.py\", line 2679, in create_autospec'\r\n    b'    name=_name, **_kwargs)'\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/mock/mock.py\", line 2076, in __init__'\r\n    b'    _safe_super(MagicMixin, self).__init__(*args, **kw)'\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/mock/mock.py\", line 439, in __init__'\r\n    b'    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)'\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/mock/mock.py\", line 494, in _mock_add_spec'\r\n    b'    if iscoroutinefunction(getattr(spec, attr, None)):'\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/mock/backports.py\", line 34, in iscoroutinefunction'\r\n    b\"    getattr(obj, '_is_coroutine', None) is _is_coroutine\"\r\n    b'  File \"/home/efried/openstack/nova/.tox/py37/lib/python3.7/site-packages/oslo_utils/fixture.py\", line 82, in __getattr__'\r\n    b\"    raise ValueError('Sentinels must not start with _')\"\r\n    b'ValueError: Sentinels must not start with _'\r\n```\r\n(permalink to that source line: https://opendev.org/openstack/nova/src/commit/e69dbfa0d34d6b3f51282ac0ab51cdab3c2115e4/nova/tests/unit/virt/libvirt/test_host.py#L589)\r\n\r\nSwitching from `import mock` to `from unittest import mock` fixes this one.\r\n\r\nWe will add comments with other examples.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/486", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/486/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/486/events", "html_url": "https://github.com/testing-cabal/mock/issues/486", "id": 561854200, "node_id": "MDU6SXNzdWU1NjE4NTQyMDA=", "number": 486, "title": "egg_info for package mock produced metadata for project name unknown", "user": {"login": "jturel", "id": 1979598, "node_id": "MDQ6VXNlcjE5Nzk1OTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1979598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jturel", "html_url": "https://github.com/jturel", "followers_url": "https://api.github.com/users/jturel/followers", "following_url": "https://api.github.com/users/jturel/following{/other_user}", "gists_url": "https://api.github.com/users/jturel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jturel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jturel/subscriptions", "organizations_url": "https://api.github.com/users/jturel/orgs", "repos_url": "https://api.github.com/users/jturel/repos", "events_url": "https://api.github.com/users/jturel/events{/privacy}", "received_events_url": "https://api.github.com/users/jturel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-07T20:25:48Z", "updated_at": "2020-02-09T20:35:18Z", "closed_at": "2020-02-08T18:44:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're having issues in our project when building its test containers when installing mock per our test-requirements.txt:\r\n\r\n```\r\nflake8; python_version >= '2.7'\r\nmock; python_version >= '2.7'\r\nunittest2\r\n```\r\n\r\nResults in:\r\n```\r\nCollecting mock (from -r test-requirements.txt (line 2))\r\n  Downloading https://files.pythonhosted.org/packages/1c/fd/141c477591ab50e27cd16a4969c957f915f4fb3c6323a624c548f38b507f/mock-4.0.1.tar.gz (71kB)\r\n    100% |################################| 81kB 6.3MB/s \r\n  Running setup.py (path:/tmp/pip-build-nxyrPI/mock/setup.py) egg_info for package mock produced metadata for project name unknown. Fix your #egg=mock fragments.\r\n```\r\n\r\n<snip>\r\n\r\n```\r\nSuccessfully installed argparse configparser entrypoints enum34 flake8 functools32 linecache2 mccabe pycodestyle pyflakes traceback2 typing unittest2 unknown                                                       \r\n\r\n```\r\nNotice the 'unknown' \r\n\r\nAnd when running the tests:\r\n\r\n```\r\npython2 test/unittest_suite.py                                                                            \r\nTraceback (most recent call last):                                                                        \r\n  File \"test/unittest_suite.py\", line 38, in <module>                                            \r\n    map(__import__, modules)                                                                              \r\n  File \"/app/test/test_katello/test_enabled_report.py\", line 4, in <module>                               \r\n    from mock import patch                                                                                \r\nImportError: No module named mock \r\n```\r\n\r\nOur project: https://github.com/Katello/katello-host-tools/\r\nReproduced by `make docker-test` target which defaults to a CentOS7 container\r\n\r\nSeems to have happened with the 4.0.0 release. Let me know if I can provide any more useful information!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/484", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/484/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/484/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/484/events", "html_url": "https://github.com/testing-cabal/mock/issues/484", "id": 560921659, "node_id": "MDU6SXNzdWU1NjA5MjE2NTk=", "number": 484, "title": "Remove universal wheel tag and hide 4.0.0b1 and 4.0.0 releases to stop tools finding them.", "user": {"login": "lucky499", "id": 45645005, "node_id": "MDQ6VXNlcjQ1NjQ1MDA1", "avatar_url": "https://avatars2.githubusercontent.com/u/45645005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucky499", "html_url": "https://github.com/lucky499", "followers_url": "https://api.github.com/users/lucky499/followers", "following_url": "https://api.github.com/users/lucky499/following{/other_user}", "gists_url": "https://api.github.com/users/lucky499/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucky499/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucky499/subscriptions", "organizations_url": "https://api.github.com/users/lucky499/orgs", "repos_url": "https://api.github.com/users/lucky499/repos", "events_url": "https://api.github.com/users/lucky499/events{/privacy}", "received_events_url": "https://api.github.com/users/lucky499/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-02-06T10:34:38Z", "updated_at": "2020-03-09T13:55:06Z", "closed_at": "2020-02-06T19:05:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi ,\r\nI am using python2.7 code as my test codebase.\r\nfrom 5th Feb on when the mock module released it's latest version all my test cases are failing with below error. \r\n\r\nFile \"/usr/lib/python2.7/site-packages/mock/mock.py\", line 575\r\n    def reset_mock(self,  visited=None,*, return_value=False, side_effect=False):\r\n                                        ^\r\nSyntaxError: invalid syntax\r\n\r\n![image](https://user-images.githubusercontent.com/45645005/73929173-58f9a100-48fa-11ea-8372-02ba5ca507ae.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/483", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/483/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/483/events", "html_url": "https://github.com/testing-cabal/mock/issues/483", "id": 560900243, "node_id": "MDU6SXNzdWU1NjA5MDAyNDM=", "number": 483, "title": "Should the backports follow upstream releases? instead of alpha/beta/rcs.", "user": {"login": "doublethefish", "id": 2162172, "node_id": "MDQ6VXNlcjIxNjIxNzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2162172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doublethefish", "html_url": "https://github.com/doublethefish", "followers_url": "https://api.github.com/users/doublethefish/followers", "following_url": "https://api.github.com/users/doublethefish/following{/other_user}", "gists_url": "https://api.github.com/users/doublethefish/gists{/gist_id}", "starred_url": "https://api.github.com/users/doublethefish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doublethefish/subscriptions", "organizations_url": "https://api.github.com/users/doublethefish/orgs", "repos_url": "https://api.github.com/users/doublethefish/repos", "events_url": "https://api.github.com/users/doublethefish/events{/privacy}", "received_events_url": "https://api.github.com/users/doublethefish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-06T09:58:15Z", "updated_at": "2020-02-06T14:14:00Z", "closed_at": "2020-02-06T12:50:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The 4.0.0 release was a backport of a CPython alpha release, introducing all the risk of doing that to anyone consuming this repo (and possibly causing the maintainers more work as they might need to deal with the issues found).\r\n\r\nIs it a good idea for major release, like \"4.0.0\", to follow an alpha upstream, instead of a stable release e.g. Python3.9 when it eventually leaves alpha.\r\n\r\nThe suggestion is that, at the time or writing, the latest release of `import mock` should actually be the same as Python3.8.1's, with an optional 4.0.0 alpha/unstable version that follows the Python3.9alpha.\r\n\r\nIt is likely to reduce the maintainer's work if that was process was followed.\r\n\r\nIf the above isn't desired then it would be really useful to clarify what the policy is for backporting CPython versions e.g. specifying that the backport module _intentionally_ follows the CPython alpha releases and what the reasons for doing that are.\r\n\r\nOnce again, a massive thanks for the fast turnaround on this morning's issues.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/481", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/481/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/481/events", "html_url": "https://github.com/testing-cabal/mock/issues/481", "id": 560818389, "node_id": "MDU6SXNzdWU1NjA4MTgzODk=", "number": 481, "title": "Please add contribution guidelines", "user": {"login": "doublethefish", "id": 2162172, "node_id": "MDQ6VXNlcjIxNjIxNzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2162172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doublethefish", "html_url": "https://github.com/doublethefish", "followers_url": "https://api.github.com/users/doublethefish/followers", "following_url": "https://api.github.com/users/doublethefish/following{/other_user}", "gists_url": "https://api.github.com/users/doublethefish/gists{/gist_id}", "starred_url": "https://api.github.com/users/doublethefish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doublethefish/subscriptions", "organizations_url": "https://api.github.com/users/doublethefish/orgs", "repos_url": "https://api.github.com/users/doublethefish/repos", "events_url": "https://api.github.com/users/doublethefish/events{/privacy}", "received_events_url": "https://api.github.com/users/doublethefish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-06T07:01:17Z", "updated_at": "2020-02-06T07:05:29Z", "closed_at": "2020-02-06T07:05:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're unable to find the contribution guidelines. Please add contributing.md (or similar) or point us in the right direction to find them.\r\n\r\nWe would love to know how contribute and help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/480", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/480/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/480/events", "html_url": "https://github.com/testing-cabal/mock/issues/480", "id": 560817140, "node_id": "MDU6SXNzdWU1NjA4MTcxNDA=", "number": 480, "title": "Mock 4.0.0 \"missing X positional argument\" on instantiation of objects inherited from mock.MagicMock", "user": {"login": "doublethefish", "id": 2162172, "node_id": "MDQ6VXNlcjIxNjIxNzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2162172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doublethefish", "html_url": "https://github.com/doublethefish", "followers_url": "https://api.github.com/users/doublethefish/followers", "following_url": "https://api.github.com/users/doublethefish/following{/other_user}", "gists_url": "https://api.github.com/users/doublethefish/gists{/gist_id}", "starred_url": "https://api.github.com/users/doublethefish/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doublethefish/subscriptions", "organizations_url": "https://api.github.com/users/doublethefish/orgs", "repos_url": "https://api.github.com/users/doublethefish/repos", "events_url": "https://api.github.com/users/doublethefish/events{/privacy}", "received_events_url": "https://api.github.com/users/doublethefish/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-02-06T06:57:44Z", "updated_at": "2020-02-07T09:42:12Z", "closed_at": "2020-02-06T07:56:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have a test module that mocks tkinter items using mock.MagicMock. Using 4.0.0.\r\n\r\nSince yesterday's update we have an issue instantiating magicmock descendant objects and even access members that are magicmock objects ( e.g. `assert _some_magic_mock_descendant`) - here we focus on the former as it's a simpler repro case.\r\n\r\n### Minimal example\r\n```\r\n# mock tkinter\r\nTKINTER_MODULE_NAME = \"tkinter\"\r\nTKINTER_MOCK = types.ModuleType(TKINTER_MODULE_NAME)                                    sys.modules[TKINTER_MODULE_NAME] = TKINTER_MOCK                                         \r\nclass MockTkinterBase(mock.MagicMock):                  \r\nTKINTER_MOCK.ttk = MockTkinterBase  \r\nTKINTER_MOCK.Text = MockTkinterBase        \r\n```\r\n\r\n```\r\n# import this after importing the above\r\nimport tkinter as tk   # pulls in the above\r\n\r\n\r\nclass UISelectionDebugInfo(tk.LabelFrame):                                              \r\n     def __init__(self, parent):                                                         \r\n         super().__init__(parent=parent, text=\"Debug\")  # aok: all key-words explicit\r\n                                                                                         \r\n         self.text = tk.Text(self)  # fails: positional arg for parent\r\n```\r\n\r\n### Traceback of example error\r\n```\r\nTraceback (most recent call last):\r\n  File \"<...>test_canvas.py\", line 40, in _create_canvas                                     \r\n    canvas = UICanvas(parent=mock_tk.MockTkinterBase())                                        \r\n  File \"<...>tkinter/ui_canvas.py\", line 101, in _ui_init_ui                                 \r\n    self._debug_pane = UISelectionDebugInfo(parent=self)                                       \r\n  File \"<...>tkinter/ui_selection_debug_info.py\", line 6, in __init__                        \r\n    super().__init__(parent, text=\"Debug\")                                                     \r\n  File \"<...>lib/python3.7/site-packages/mock/mock.py\", line 2077, in __init__               \r\n    _safe_super(MagicMixin, self).__init__(*args, **kw)                                        \r\n  File \"<...>lib/python3.7/site-packages/mock/mock.py\", line 1085, in __init__               \r\n    _spec_state, _new_name, _new_parent, **kwargs                                              \r\n  File \"<...>lib/python3.7/site-packages/mock/mock.py\", line 439, in __init__                \r\n    self._mock_add_spec(spec, spec_set, _spec_as_instance, _eat_self)                          \r\n  File \"<...>lib/python3.7/site-packages/mock/mock.py\", line 494, in _mock_add_spec          \r\n    if iscoroutinefunction(getattr(spec, attr, None)):                                         \r\n  File \"<...>lib/python3.7/site-packages/mock/mock.py\", line 522, in __get_return_value   \r\n    _new_parent=self, _new_name='()'                                                           \r\n  File \"<...>lib/python3.7/site-packages/mock/mock.py\", line 1027, in _get_child_mock        \r\n    return klass(**kw)                                                                         \r\nTypeError: __init__() missing 1 required positional argument: 'parent'\r\n```\r\n\r\nOrthogonally, we see that that there are comments in other issues on this github account that refer to https://bugs.python.org but it's not clear to us when/where that should be the case, nor whether it is worth our time creating a PR to help on this issue. We will log an issue to add contribution guidelines and maybe come back and help fix this at some point.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/478", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/478/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/478/events", "html_url": "https://github.com/testing-cabal/mock/issues/478", "id": 560253280, "node_id": "MDU6SXNzdWU1NjAyNTMyODA=", "number": 478, "title": "Syntax Error in 4.0.0", "user": {"login": "chrisconlon-klaviyo", "id": 15344118, "node_id": "MDQ6VXNlcjE1MzQ0MTE4", "avatar_url": "https://avatars0.githubusercontent.com/u/15344118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisconlon-klaviyo", "html_url": "https://github.com/chrisconlon-klaviyo", "followers_url": "https://api.github.com/users/chrisconlon-klaviyo/followers", "following_url": "https://api.github.com/users/chrisconlon-klaviyo/following{/other_user}", "gists_url": "https://api.github.com/users/chrisconlon-klaviyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisconlon-klaviyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisconlon-klaviyo/subscriptions", "organizations_url": "https://api.github.com/users/chrisconlon-klaviyo/orgs", "repos_url": "https://api.github.com/users/chrisconlon-klaviyo/repos", "events_url": "https://api.github.com/users/chrisconlon-klaviyo/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisconlon-klaviyo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-05T09:46:11Z", "updated_at": "2020-02-05T09:59:57Z", "closed_at": "2020-02-05T09:59:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a syntax error [here](https://github.com/testing-cabal/mock/blob/ea9f71536da0ce3bd31e31b5f428f3495c6ab0dc/mock/mock.py#L575) in v4.0.0 that a build of mine accidentally pulled in after the release got published.\r\n\r\nI'll see if I can open a PR with a fix, but I'm starting here just to flag it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/477", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/477/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/477/events", "html_url": "https://github.com/testing-cabal/mock/issues/477", "id": 555251026, "node_id": "MDU6SXNzdWU1NTUyNTEwMjY=", "number": 477, "title": "Version 4.0 release", "user": {"login": "L1ghtn1ng", "id": 3628354, "node_id": "MDQ6VXNlcjM2MjgzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3628354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/L1ghtn1ng", "html_url": "https://github.com/L1ghtn1ng", "followers_url": "https://api.github.com/users/L1ghtn1ng/followers", "following_url": "https://api.github.com/users/L1ghtn1ng/following{/other_user}", "gists_url": "https://api.github.com/users/L1ghtn1ng/gists{/gist_id}", "starred_url": "https://api.github.com/users/L1ghtn1ng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/L1ghtn1ng/subscriptions", "organizations_url": "https://api.github.com/users/L1ghtn1ng/orgs", "repos_url": "https://api.github.com/users/L1ghtn1ng/repos", "events_url": "https://api.github.com/users/L1ghtn1ng/events{/privacy}", "received_events_url": "https://api.github.com/users/L1ghtn1ng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-26T16:17:42Z", "updated_at": "2020-01-26T16:26:19Z", "closed_at": "2020-01-26T16:20:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi just am wondering when #476 is going to be merged as this should be a saving grace as MacgicMock in py3.7 does not support being awaitable and this should hopefully fix my issue\r\n\r\n```_______________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_fragments_from_response ________________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4ade7b1e50>\r\n\r\n    async def test_fragments_from_response(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n>       test_result = await test_class_instance.fragments_from_response(self.OkResponse.response)\r\n\r\ntests/discovery/test_githubcode.py:77: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\njson_data = <Response [200]>\r\n\r\n    @staticmethod\r\n    async def fragments_from_response(json_data: dict) -> List[str]:\r\n>       items: List[Dict[str, Any]] = json_data.get('items') or list()\r\nE       AttributeError: 'Response' object has no attribute 'get'\r\n\r\ntheHarvester/discovery/githubcode.py:43: AttributeError\r\n___________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_invalid_fragments_from_response ____________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4addc83610>\r\n\r\n    async def test_invalid_fragments_from_response(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n        test_result = test_class_instance.fragments_from_response(self.MalformedResponse.response)\r\n>       assert test_result == []\r\nE       assert <coroutine object SearchGithubCode.fragments_from_response at 0x7f4addc7c320> == []\r\n\r\ntests/discovery/test_githubcode.py:84: AssertionError\r\n__________________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_handle_response_ok __________________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4ade4d6ad0>\r\n\r\n    async def test_handle_response_ok(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n        test_result = test_class_instance.handle_response(self.OkResponse.response)\r\n>       assert isinstance(test_result, SuccessResult)\r\nE       assert False\r\nE        +  where False = isinstance(<coroutine object SearchGithubCode.handle_response at 0x7f4addc7c830>, SuccessResult)\r\n\r\ntests/discovery/test_githubcode.py:90: AssertionError\r\n________________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_handle_response_retry _________________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4ade4d6890>\r\n\r\n    async def test_handle_response_retry(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n        test_result = test_class_instance.handle_response(self.RetryResponse.response)\r\n>       assert isinstance(test_result, RetryResult)\r\nE       assert False\r\nE        +  where False = isinstance(<coroutine object SearchGithubCode.handle_response at 0x7f4addc7cc20>, RetryResult)\r\n\r\ntests/discovery/test_githubcode.py:96: AssertionError\r\n_________________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_handle_response_fail _________________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4addc8b410>\r\n\r\n    async def test_handle_response_fail(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n        test_result = test_class_instance.handle_response(self.FailureResponse.response)\r\n>       assert isinstance(test_result, ErrorResult)\r\nE       assert False\r\nE        +  where False = isinstance(<coroutine object SearchGithubCode.handle_response at 0x7f4addc7ccb0>, ErrorResult)\r\n\r\ntests/discovery/test_githubcode.py:102: AssertionError\r\n______________________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_next_page _______________________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4ade4b3410>\r\n\r\n    async def test_next_page(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n        test_result = githubcode.SuccessResult(list(), next_page=2, last_page=4)\r\n>       assert(2 == test_class_instance.next_page_or_end(test_result))\r\nE       assert 2 == <coroutine object SearchGithubCode.next_page_or_end at 0x7f4addc69320>\r\nE        +  where <coroutine object SearchGithubCode.next_page_or_end at 0x7f4addc69320> = <function SearchGithubCode.next_page_or_end at 0x7f4ae1704440>(SuccessResult(fragments=[], next_page=2, last_page=4))\r\nE        +    where <function SearchGithubCode.next_page_or_end at 0x7f4ae1704440> = <theHarvester.discovery.githubcode.SearchGithubCode object at 0x7f4addc259d0>.next_page_or_end\r\n\r\ntests/discovery/test_githubcode.py:108: AssertionError\r\n______________________________________________________________________________________________________________________________________________________________________________________________________________________________ TestSearchGithubCode.test_last_page _______________________________________________________________________________________________________________________________________________________________________________________________________________________________\r\n\r\nself = <tests.discovery.test_githubcode.TestSearchGithubCode object at 0x7f4addc208d0>\r\n\r\n    async def test_last_page(self):\r\n        Core.github_key = MagicMock(return_value=\"lol\")\r\n        test_class_instance = githubcode.SearchGithubCode(word=\"test\", limit=500)\r\n        test_result = githubcode.SuccessResult(list(), None, None)\r\n>       assert(None is test_class_instance.next_page_or_end(test_result))\r\nE       assert None is <coroutine object SearchGithubCode.next_page_or_end at 0x7f4addc697a0>\r\nE        +  where <coroutine object SearchGithubCode.next_page_or_end at 0x7f4addc697a0> = <function SearchGithubCode.next_page_or_end at 0x7f4ae1704440>(SuccessResult(fragments=[], next_page=None, last_page=None))\r\nE        +    where <function SearchGithubCode.next_page_or_end at 0x7f4ae1704440> = <theHarvester.discovery.githubcode.SearchGithubCode object at 0x7f4addc31c50>.next_page_or_end\r\n\r\ntests/discovery/test_githubcode.py:114: AssertionError\r\n================================================================================================================================================================================================================================= 7 failed, 11 passed in 17.98s ==================================================================================================================================================================================================================================\r\nsys:1: RuntimeWarning: coroutine 'SearchGithubCode.fragments_from_response' was never awaited\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nsys:1: RuntimeWarning: coroutine 'SearchGithubCode.handle_response' was never awaited\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nsys:1: RuntimeWarning: coroutine 'SearchGithubCode.next_page_or_end' was never awaited\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/473", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/473/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/473/events", "html_url": "https://github.com/testing-cabal/mock/issues/473", "id": 507118408, "node_id": "MDU6SXNzdWU1MDcxMTg0MDg=", "number": 473, "title": "Add assert_not_called_with", "user": {"login": "valkheim", "id": 18068904, "node_id": "MDQ6VXNlcjE4MDY4OTA0", "avatar_url": "https://avatars2.githubusercontent.com/u/18068904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valkheim", "html_url": "https://github.com/valkheim", "followers_url": "https://api.github.com/users/valkheim/followers", "following_url": "https://api.github.com/users/valkheim/following{/other_user}", "gists_url": "https://api.github.com/users/valkheim/gists{/gist_id}", "starred_url": "https://api.github.com/users/valkheim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valkheim/subscriptions", "organizations_url": "https://api.github.com/users/valkheim/orgs", "repos_url": "https://api.github.com/users/valkheim/repos", "events_url": "https://api.github.com/users/valkheim/events{/privacy}", "received_events_url": "https://api.github.com/users/valkheim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-15T09:24:07Z", "updated_at": "2019-10-15T09:28:12Z", "closed_at": "2019-10-15T09:28:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "This would be nice to integrate an `assert_not_called_with` feature.\r\n\r\nI had to implement it to test a publish/subscribe patterns where multiple\r\nsubscibers got called but not with the same arguments.\r\n\r\nHere is my implementation:\r\n```\r\ndef assert_not_called_with(self, *args, **kwargs):\r\n    \"\"\"assert that the mock was never called with the specified arguments.\r\n    \"\"\"\r\n    try:\r\n        self.assert_called_with(*args, **kwargs)\r\n    except AssertionError:\r\n        return\r\n    raise AssertionError(\r\n        \"Expected %s to not have been called.\"\r\n        % self._format_mock_call_signature(args, kwargs)\r\n    )\r\n```\r\n\r\nAn alternative would had been to iterate the `call_args_list` but it wouldn't result in a clean one-line assert\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/472", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/472/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/472/events", "html_url": "https://github.com/testing-cabal/mock/issues/472", "id": 498305002, "node_id": "MDU6SXNzdWU0OTgzMDUwMDI=", "number": 472, "title": "should we mark as deprecated?", "user": {"login": "mcallaghan-bsm", "id": 48924626, "node_id": "MDQ6VXNlcjQ4OTI0NjI2", "avatar_url": "https://avatars1.githubusercontent.com/u/48924626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcallaghan-bsm", "html_url": "https://github.com/mcallaghan-bsm", "followers_url": "https://api.github.com/users/mcallaghan-bsm/followers", "following_url": "https://api.github.com/users/mcallaghan-bsm/following{/other_user}", "gists_url": "https://api.github.com/users/mcallaghan-bsm/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcallaghan-bsm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcallaghan-bsm/subscriptions", "organizations_url": "https://api.github.com/users/mcallaghan-bsm/orgs", "repos_url": "https://api.github.com/users/mcallaghan-bsm/repos", "events_url": "https://api.github.com/users/mcallaghan-bsm/events{/privacy}", "received_events_url": "https://api.github.com/users/mcallaghan-bsm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-25T13:57:21Z", "updated_at": "2019-09-25T14:15:19Z", "closed_at": "2019-09-25T14:11:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good day,\r\n\r\nAs per the documentation, for Python3.3 and above, this package is now part of the standard library and maintained in unittest.mock.\r\n> mock is now part of the Python standard library, available as unittest.mock in Python 3.3 onwards.\r\n\r\nIt can be a common mistake for developers to accidentally (or out of habit) to utilize `mock.mock.MagicMock`, rather than `unittest.mock.MagicMock`.\r\n\r\nWondering if it would be appropriate to deprecate this package at some point\r\nhttps://www.python.org/dev/peps/pep-0004/\r\n\r\nOf course, though, the package is still useful for Python2 or <Python3.3 ... so not sure how to handle that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/470", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/470/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/470/events", "html_url": "https://github.com/testing-cabal/mock/issues/470", "id": 496121330, "node_id": "MDU6SXNzdWU0OTYxMjEzMzA=", "number": 470, "title": "Add new mock features from Python 3.8", "user": {"login": "5j9", "id": 1055747, "node_id": "MDQ6VXNlcjEwNTU3NDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1055747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5j9", "html_url": "https://github.com/5j9", "followers_url": "https://api.github.com/users/5j9/followers", "following_url": "https://api.github.com/users/5j9/following{/other_user}", "gists_url": "https://api.github.com/users/5j9/gists{/gist_id}", "starred_url": "https://api.github.com/users/5j9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5j9/subscriptions", "organizations_url": "https://api.github.com/users/5j9/orgs", "repos_url": "https://api.github.com/users/5j9/repos", "events_url": "https://api.github.com/users/5j9/events{/privacy}", "received_events_url": "https://api.github.com/users/5j9/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-20T03:14:26Z", "updated_at": "2020-01-25T10:57:14Z", "closed_at": "2020-01-25T10:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "In Python 3.8 `unittest.mock` has had some improvements. It would be nice to see them in this library. The two features that I am currently looking for are:\r\n* `MagicMock` objects are now [awaitable](https://stackoverflow.com/questions/51394411/python-object-magicmock-cant-be-used-in-await-expression).\r\n* `call` objects are now named tuples. See the example in [documentation](https://docs.python.org/3.8/library/unittest.mock.html#unittest.mock.call.call_list):\r\n\r\n```python\r\n>>> kall.kwargs is kall[1]\r\nTrue\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/469", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/469/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/469/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/469/events", "html_url": "https://github.com/testing-cabal/mock/issues/469", "id": 495236718, "node_id": "MDU6SXNzdWU0OTUyMzY3MTg=", "number": 469, "title": "Source tarball does not distribute tests", "user": {"login": "ngie-eign", "id": 1574099, "node_id": "MDQ6VXNlcjE1NzQwOTk=", "avatar_url": "https://avatars1.githubusercontent.com/u/1574099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ngie-eign", "html_url": "https://github.com/ngie-eign", "followers_url": "https://api.github.com/users/ngie-eign/followers", "following_url": "https://api.github.com/users/ngie-eign/following{/other_user}", "gists_url": "https://api.github.com/users/ngie-eign/gists{/gist_id}", "starred_url": "https://api.github.com/users/ngie-eign/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ngie-eign/subscriptions", "organizations_url": "https://api.github.com/users/ngie-eign/orgs", "repos_url": "https://api.github.com/users/ngie-eign/repos", "events_url": "https://api.github.com/users/ngie-eign/events{/privacy}", "received_events_url": "https://api.github.com/users/ngie-eign/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-18T13:45:20Z", "updated_at": "2019-09-20T09:24:13Z", "closed_at": "2019-09-20T09:24:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some upstream groups rely on the tests to provide a green light on whether or not a port or upgrade is worth performing.\r\n\r\nmock has tests in git, but it doesn't make them available in the source project. Thus, there's no way to test the code without having a git checkout with the corresponding release tag.\r\n\r\n[Example](https://reviews.freebsd.org/D21654): I needed to pull the sources from GitHub using the commit hash, instead of using the release tagged tarball.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/467", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/467/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/467/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/467/events", "html_url": "https://github.com/testing-cabal/mock/issues/467", "id": 470933323, "node_id": "MDU6SXNzdWU0NzA5MzMzMjM=", "number": 467, "title": "pip install mock failed using local filesystem", "user": {"login": "sanket-rathi", "id": 22020597, "node_id": "MDQ6VXNlcjIyMDIwNTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/22020597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanket-rathi", "html_url": "https://github.com/sanket-rathi", "followers_url": "https://api.github.com/users/sanket-rathi/followers", "following_url": "https://api.github.com/users/sanket-rathi/following{/other_user}", "gists_url": "https://api.github.com/users/sanket-rathi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanket-rathi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanket-rathi/subscriptions", "organizations_url": "https://api.github.com/users/sanket-rathi/orgs", "repos_url": "https://api.github.com/users/sanket-rathi/repos", "events_url": "https://api.github.com/users/sanket-rathi/events{/privacy}", "received_events_url": "https://api.github.com/users/sanket-rathi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-22T07:19:06Z", "updated_at": "2019-07-22T15:21:56Z", "closed_at": "2019-07-22T07:22:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to install one python module that needs mock in air gap environment (I can not create wheel). So I downloaded all the required python modules source and trying to install using pip but it is failing to install mock. Then I tried to install only mock and that is failing too. I tried on different platforms (CentOS, Mac) and same result. It is trying to download pbr but that is already present in the directory. If I install pbr and then install mock it works. If I try in non air gap environment (with local) then also works because it download the package from web. Not sure why it is not using local pbr source to build and install. \r\nI need this for my environment. \r\n\r\n$ls -l mock-2.0.0.tar.gz six-1.12.0.tar.gz pbr-5.4.1.tar.gz\r\n-rw-r--r--  1 sanket  staff   73684 Jul 22 09:48 mock-2.0.0.tar.gz\r\n-rw-r--r--  1 sanket  staff  118704 Jul 22 09:49 pbr-5.4.1.tar.gz\r\n-rw-r--r--  1 sanket  staff   32725 Jul 22 09:49 six-1.12.0.tar.gz\r\n(python_venv)  ~/test/gsutil\r\n$\r\n(python_venv)  ~/test/gsutil\r\n$python3 -m pip install mock --no-index --find-links file:///$PWD\r\nLooking in links: file:////Users/sanket/test/gsutil\r\nCollecting mock\r\n    ERROR: Complete output from command python setup.py egg_info:\r\n    ERROR: Download error on https://pypi.org/simple/pbr/: [Errno 8] nodename nor servname provided, or not known -- Some packages may not be found!\r\n    Couldn't find index page for 'pbr' (maybe misspelled?)\r\n    Download error on https://pypi.org/simple/: [Errno 8] nodename nor servname provided, or not known -- Some packages may not be found!\r\n    No local packages or working download links found for pbr>=1.3\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/var/folders/7f/903rgbjj0492746b4rylp7bh0000gn/T/pip-install-wmeajk9x/mock/setup.py\", line 6, in <module>\r\n        pbr=True)\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/setuptools/__init__.py\", line 144, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/setuptools/__init__.py\", line 139, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/setuptools/dist.py\", line 717, in fetch_build_eggs\r\n        replace_conflicting=True,\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 782, in resolve\r\n        replace_conflicting=replace_conflicting\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 1065, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/pkg_resources/__init__.py\", line 1077, in obtain\r\n        return installer(requirement)\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/setuptools/dist.py\", line 784, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File \"/Users/sanket/test/python_venv/lib/python3.7/site-packages/setuptools/command/easy_install.py\", line 673, in easy_install\r\n        raise DistutilsError(msg)\r\n    distutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse('pbr>=1.3')\r\n    ----------------------------------------\r\nERROR: Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/7f/903rgbjj0492746b4rylp7bh0000gn/T/pip-install-wmeajk9x/mock/\r\n (python_venv)  ~/test/gsutil\r\n$\r\n\r\n\r\n\r\nIf Install pbr first separately then it works.\r\n\r\n(python_venv)  ~/test/gsutil\r\n$python3 -m pip install pbr --no-index --find-links file:///$PWD\r\nLooking in links: file:////Users/sanket/test/gsutil\r\nCollecting pbr\r\nInstalling collected packages: pbr\r\n  Running setup.py install for pbr ... done\r\nSuccessfully installed pbr-5.4.1\r\n(python_venv)  ~/test/gsutil\r\n$\r\n(python_venv)  ~/test/gsutil\r\n$python3 -m pip install mock --no-index --find-links file:///$PWD\r\nLooking in links: file:////Users/sanket/test/gsutil\r\nCollecting mock\r\nRequirement already satisfied: pbr>=0.11 in /Users/sanket/test/python_venv/lib/python3.7/site-packages (from mock) (5.4.1)\r\nCollecting six>=1.9 (from mock)\r\nInstalling collected packages: six, mock\r\n  Running setup.py install for six ... done\r\n  Running setup.py install for mock ... done\r\nSuccessfully installed mock-2.0.0 six-1.12.0\r\n(python_venv)  ~/test/gsutil\r\n$", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/466", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/466/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/466/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/466/events", "html_url": "https://github.com/testing-cabal/mock/issues/466", "id": 470644401, "node_id": "MDU6SXNzdWU0NzA2NDQ0MDE=", "number": 466, "title": "3.0.5: test suite fails (executed in build tree relies on already installed mock)", "user": {"login": "kloczek", "id": 31284574, "node_id": "MDQ6VXNlcjMxMjg0NTc0", "avatar_url": "https://avatars0.githubusercontent.com/u/31284574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kloczek", "html_url": "https://github.com/kloczek", "followers_url": "https://api.github.com/users/kloczek/followers", "following_url": "https://api.github.com/users/kloczek/following{/other_user}", "gists_url": "https://api.github.com/users/kloczek/gists{/gist_id}", "starred_url": "https://api.github.com/users/kloczek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kloczek/subscriptions", "organizations_url": "https://api.github.com/users/kloczek/orgs", "repos_url": "https://api.github.com/users/kloczek/repos", "events_url": "https://api.github.com/users/kloczek/events{/privacy}", "received_events_url": "https://api.github.com/users/kloczek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-07-20T07:06:22Z", "updated_at": "2019-11-15T12:23:36Z", "closed_at": "2019-07-22T06:22:44Z", "author_association": "NONE", "active_lock_reason": "resolved", "body": "<pre>+ /usr/bin/python3 setup.py test\r\nrunning test\r\nrunning egg_info\r\nwriting mock.egg-info/PKG-INFO\r\nwriting dependency_links to mock.egg-info/dependency_links.txt\r\nwriting requirements to mock.egg-info/requires.txt\r\nwriting top-level names to mock.egg-info/top_level.txt\r\nreading manifest file &apos;mock.egg-info/SOURCES.txt&apos;\r\nreading manifest template &apos;MANIFEST.in&apos;\r\nwriting manifest file &apos;mock.egg-info/SOURCES.txt&apos;\r\nrunning build_ext\r\nmock-3.0.5.mock.tests (unittest.loader._FailedTest) ... ERROR\r\ntest_attributes (mock.tests.testcallable.TestCallable) ... ok\r\ntest_create_autospec (mock.tests.testcallable.TestCallable) ... ok\r\ntest_create_autospec_instance (mock.tests.testcallable.TestCallable) ... ok\r\ntest_hierarchy (mock.tests.testcallable.TestCallable) ... ok\r\ntest_non_callable (mock.tests.testcallable.TestCallable) ... ok\r\ntest_patch_spec (mock.tests.testcallable.TestCallable) ... ok\r\ntest_patch_spec_callable_class (mock.tests.testcallable.TestCallable) ... ok\r\ntest_patch_spec_instance (mock.tests.testcallable.TestCallable) ... ok\r\ntest_patch_spec_set (mock.tests.testcallable.TestCallable) ... ok\r\ntest_patch_spec_set_instance (mock.tests.testcallable.TestCallable) ... ok\r\ntest_subclasses (mock.tests.testcallable.TestCallable) ... ok\r\ntest_any (mock.tests.testhelpers.AnyTest) ... ok\r\ntest_any_and_datetime (mock.tests.testhelpers.AnyTest) ... ok\r\ntest_any_mock_calls_comparison_order (mock.tests.testhelpers.AnyTest) ... ok\r\ntest_repr (mock.tests.testhelpers.AnyTest) ... ok\r\ntest_attribute_call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_any (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_list (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_ne (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_non_tuples (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_with_args (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_with_args_call_empty_name (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_with_call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_with_kwargs (mock.tests.testhelpers.CallTest) ... ok\r\ntest_call_with_name (mock.tests.testhelpers.CallTest) ... ok\r\ntest_empty__Call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_extended_call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_extended_not_equal (mock.tests.testhelpers.CallTest) ... ok\r\ntest_named_call_with_args (mock.tests.testhelpers.CallTest) ... ok\r\ntest_named_call_with_kwargs (mock.tests.testhelpers.CallTest) ... ok\r\ntest_named_empty_call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_nested_calls_not_equal (mock.tests.testhelpers.CallTest) ... ok\r\ntest_repr (mock.tests.testhelpers.CallTest) ... ok\r\ntest_two_args_call (mock.tests.testhelpers.CallTest) ... ok\r\ntest_attributes (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_data_descriptor (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_functions_with_self_in_odd_place (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_getattr_partial_function (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_on_bound_builtin_function (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_property (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_reset_mock (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_slots (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_autospec_socket (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_basic (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_builtin_functions_types (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_builtins (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_class_with_no_init (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_create_autospec_keyword_arguments (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_create_autospec_keyword_only_arguments (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_create_autospec_none (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_create_autospec_return_value (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_descriptors (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_function (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_function_as_instance_attribute (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_inherit (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_magic_methods (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_method_calls (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_mocking_unbound_methods (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_old_style_class_with_no_init (mock.tests.testhelpers.SpecSignatureTest) ... skipped &apos;no old style classes in Python 3&apos;\r\ntest_old_style_classes (mock.tests.testhelpers.SpecSignatureTest) ... skipped &apos;No old style classes in Python 3&apos;\r\ntest_recursive (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_signature_callable (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_signature_class (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_signature_noncallable (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_signature_old_style_class (mock.tests.testhelpers.SpecSignatureTest) ... skipped &apos;no old style classes in Python 3&apos;\r\ntest_skip_attributeerrors (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_as_list (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_function_assert_any_call (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_function_assert_has_calls (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_function_has_identifier_name (mock.tests.testhelpers.SpecSignatureTest) ... skipped &apos;Here to test our Py2 _isidentifier&apos;\r\ntest_spec_function_no_name (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_function_reset_mock (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_has_descriptor_returning_function (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_has_function_not_in_bases (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_inheritance_for_classes (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_inspect_signature (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_spec_set (mock.tests.testhelpers.SpecSignatureTest) ... ok\r\ntest_args_list_contains_call_list (mock.tests.testhelpers.TestCallList) ... ok\r\ntest_call_list_str (mock.tests.testhelpers.TestCallList) ... ok\r\ntest_call_list_unicode (mock.tests.testhelpers.TestCallList) ... skipped &apos;Unicode is properly handled with Python 3&apos;\r\ntest_propertymock (mock.tests.testhelpers.TestCallList) ... ok\r\ntest_propertymock_returnvalue (mock.tests.testhelpers.TestCallList) ... ok\r\ntest_call_magic_method (mock.tests.testhelpers.TestCallablePredicate) ... ok\r\ntest_classmethod (mock.tests.testhelpers.TestCallablePredicate) ... ok\r\ntest_non_callable_classmethod (mock.tests.testhelpers.TestCallablePredicate) ... ok\r\ntest_non_callable_staticmethod (mock.tests.testhelpers.TestCallablePredicate) ... ok\r\ntest_staticmethod (mock.tests.testhelpers.TestCallablePredicate) ... ok\r\ntest_type (mock.tests.testhelpers.TestCallablePredicate) ... ok\r\ntest_spec_inspect_signature_annotations (mock.tests.testhelpers_py3.CallTest) ... ok\r\ntest_attributes_and_return_value (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_bound_methods (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_changing_magic_set_in_initialization (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_comparison (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_deleting_magic_methods (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_descriptor_from_class (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_dict_methods (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_dir (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_division (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_divmod_and_rdivmod (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_equality (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_hash (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_iterable_as_iter_return_value (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_len_contains_iter (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_in_initialization (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_method_reset_mock (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_method_type (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_method_wrapping (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_methods_and_spec (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_methods_and_spec_set (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_methods_are_magic_mocks (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_methods_fspath (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_methods_isolated_between_mocks (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magic_mock_equality (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magicmock (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magicmock_defaults (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_magicmock_del (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_matmul (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_non_default_magic_methods (mock.tests.testmagicmethods.TestMockingMagicMethods) ... skipped &apos;no __cmp__ in Python 3&apos;\r\ntest_nonzero (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_numeric (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_repr (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_setting_unsupported_magic_method (mock.tests.testmagicmethods.TestMockingMagicMethods) ... /home/tkloczko/rpmbuild/BUILD/mock-3.0.5/mock/tests/testmagicmethods.py:430: DeprecationWarning: Please use assertRaisesRegex instead.\r\n  set_setattr\r\nok\r\ntest_str (mock.tests.testmagicmethods.TestMockingMagicMethods) ... ok\r\ntest_unicode (mock.tests.testmagicmethods.TestMockingMagicMethods) ... skipped &apos;no unicode in Python 3&apos;\r\ntest__name__ (mock.tests.testmock.MockTest) ... ok\r\ntest_adding_child_mock (mock.tests.testmock.MockTest) ... ok\r\ntest_adding_return_value_mock (mock.tests.testmock.MockTest) ... ok\r\ntest_all (mock.tests.testmock.MockTest) ... ok\r\ntest_arg_lists (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_any_call (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_any_call_with_function_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_once (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_once_message (mock.tests.testmock.MockTest) ... /home/tkloczko/rpmbuild/BUILD/mock-3.0.5/mock/tests/testmock.py:1571: DeprecationWarning: Please use assertRaisesRegex instead.\r\n  m.assert_called_once)\r\nok\r\ntest_assert_called_once_message_not_called (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_once_with (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_once_with_call_list (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_once_with_function_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_once_with_message (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_with (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_with_any (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_with_failure_message (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_with_function_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_with_message (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_called_with_method_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_has_calls (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_has_calls_any_order (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_has_calls_with_function_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_not_called (mock.tests.testmock.MockTest) ... ok\r\ntest_assert_not_called_message (mock.tests.testmock.MockTest) ... ok\r\ntest_attach_mock (mock.tests.testmock.MockTest) ... ok\r\ntest_attach_mock_return_value (mock.tests.testmock.MockTest) ... ok\r\ntest_attribute_access_returns_mocks (mock.tests.testmock.MockTest) ... ok\r\ntest_attribute_deletion (mock.tests.testmock.MockTest) ... ok\r\ntest_attributes_have_name_and_parent_set (mock.tests.testmock.MockTest) ... ok\r\ntest_autospec_side_effect (mock.tests.testmock.MockTest) ... ok\r\ntest_autospec_side_effect_exception (mock.tests.testmock.MockTest) ... ok\r\ntest_baseexceptional_side_effect (mock.tests.testmock.MockTest) ... ok\r\ntest_call (mock.tests.testmock.MockTest) ... ok\r\ntest_call_args_comparison (mock.tests.testmock.MockTest) ... ok\r\ntest_call_args_two_tuple (mock.tests.testmock.MockTest) ... ok\r\ntest_calls_equal_with_any (mock.tests.testmock.MockTest) ... ok\r\ntest_change_return_value_via_delegate (mock.tests.testmock.MockTest) ... ok\r\ntest_change_side_effect_via_delegate (mock.tests.testmock.MockTest) ... ok\r\ntest_child_mock_call_equal (mock.tests.testmock.MockTest) ... ok\r\ntest_class_assignable (mock.tests.testmock.MockTest) ... ok\r\ntest_configure_mock (mock.tests.testmock.MockTest) ... ok\r\ntest_constructor (mock.tests.testmock.MockTest) ... ok\r\ntest_copy (mock.tests.testmock.MockTest) ... ok\r\ntest_create_autospec_classmethod_and_staticmethod (mock.tests.testmock.MockTest) ... ok\r\ntest_create_autospec_with_name (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_return_value (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_return_value_and_side_effect (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_return_value_and_side_effect2 (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_return_value_and_side_effect_default (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_side_effect_exception (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_side_effect_function (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_side_effect_iterable (mock.tests.testmock.MockTest) ... ok\r\ntest_customize_wrapped_object_with_side_effect_iterable_with_default (mock.tests.testmock.MockTest) ... ok\r\ntest_dir (mock.tests.testmock.MockTest) ... ok\r\ntest_dir_does_not_include_deleted_attributes (mock.tests.testmock.MockTest) ... ok\r\ntest_dir_from_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_exceptional_side_effect (mock.tests.testmock.MockTest) ... ok\r\ntest_filter_dir (mock.tests.testmock.MockTest) ... ok\r\ntest_from_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_isinstance_under_settrace (mock.tests.testmock.MockTest) ... ok\r\ntest_magic_methods_mock_calls (mock.tests.testmock.MockTest) ... ok\r\ntest_manager_mock (mock.tests.testmock.MockTest) ... ok\r\ntest_method_calls_compare_easily (mock.tests.testmock.MockTest) ... ok\r\ntest_method_calls_recorded (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_add_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_add_spec_magic_methods (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_not_equal_leaf (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_not_equal_non_leaf (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_not_equal_non_leaf_attr (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_not_equal_non_leaf_call_versus_attr (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_not_equal_non_leaf_params_different (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_repr (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_call_repr_loop (mock.tests.testmock.MockTest) ... /home/tkloczko/rpmbuild/BUILD/mock-3.0.5/mock/tests/testmock.py:1183: DeprecationWarning: Please use assertRegex instead.\r\n  self.assertRegexpMatches(repr(m.foo()), r&quot;&lt;Mock name=&apos;mock\\(\\)&apos; id=&apos;\\d+&apos;&gt;&quot;)\r\nok\r\ntest_mock_calls (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_calls_contains (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_calls_create_autospec (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_does_not_raise_on_repeated_attribute_deletion (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_open_after_eof (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_open_alter_readline (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_open_dunder_iter_issue (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_open_reuse_issue_21750 (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_open_write (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_parents (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_raises_when_deleting_nonexistent_attribute (mock.tests.testmock.MockTest) ... ok\r\ntest_mock_unsafe (mock.tests.testmock.MockTest) ... ok\r\ntest_name_attribute_of_call (mock.tests.testmock.MockTest) ... ok\r\ntest_only_allowed_methods_exist (mock.tests.testmock.MockTest) ... ok\r\ntest_override_tuple_methods (mock.tests.testmock.MockTest) ... ok\r\ntest_parent_attribute_of_call (mock.tests.testmock.MockTest) ... ok\r\ntest_parent_propagation_with_create_autospec (mock.tests.testmock.MockTest) ... ok\r\ntest_repr (mock.tests.testmock.MockTest) ... ok\r\ntest_repr_with_spec (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_mock (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_mock_does_not_raise_on_attr_deletion (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_mock_on_mock_open_issue_18622 (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_mock_recursion (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_return (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_return_sideeffect (mock.tests.testmock.MockTest) ... ok\r\ntest_reset_sideeffect (mock.tests.testmock.MockTest) ... ok\r\ntest_return_value_in_constructor (mock.tests.testmock.MockTest) ... ok\r\ntest_setting_attribute_with_spec_set (mock.tests.testmock.MockTest) ... ok\r\ntest_setting_call (mock.tests.testmock.MockTest) ... ok\r\ntest_side_effect (mock.tests.testmock.MockTest) ... ok\r\ntest_side_effect_iterator (mock.tests.testmock.MockTest) ... ok\r\ntest_side_effect_iterator_default (mock.tests.testmock.MockTest) ... ok\r\ntest_side_effect_iterator_exceptions (mock.tests.testmock.MockTest) ... ok\r\ntest_side_effect_setting_iterator (mock.tests.testmock.MockTest) ... ok\r\ntest_sorted_call_signature (mock.tests.testmock.MockTest) ... ok\r\ntest_spec_class (mock.tests.testmock.MockTest) ... ok\r\ntest_spec_class_no_object_base (mock.tests.testmock.MockTest) ... ok\r\ntest_spec_list_subclass (mock.tests.testmock.MockTest) ... ok\r\ntest_spec_old_style_classes (mock.tests.testmock.MockTest) ... skipped &apos;no old style classes in Python 3&apos;\r\ntest_spec_set_old_style_classes (mock.tests.testmock.MockTest) ... skipped &apos;no old style classes in Python 3&apos;\r\ntest_subclass_with_properties (mock.tests.testmock.MockTest) ... ok\r\ntest_subclassing (mock.tests.testmock.MockTest) ... ok\r\ntest_wraps_attributes (mock.tests.testmock.MockTest) ... ok\r\ntest_wraps_call_with_nondefault_return_value (mock.tests.testmock.MockTest) ... ok\r\ntest_wraps_calls (mock.tests.testmock.MockTest) ... ok\r\ntest_wraps_prevents_automatic_creation_of_mocks (mock.tests.testmock.MockTest) ... ok\r\ntest_autospec (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_classmethod (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_function (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_inherits (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_keywords (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_name (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_staticmethod (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_with_new (mock.tests.testpatch.PatchTest) ... ok\r\ntest_autospec_with_object (mock.tests.testpatch.PatchTest) ... ok\r\ntest_callable_spec_as_list (mock.tests.testpatch.PatchTest) ... ok\r\ntest_cant_set_kwargs_when_passing_a_mock (mock.tests.testpatch.PatchTest) ... ok\r\ntest_create_and_specs (mock.tests.testpatch.PatchTest) ... ok\r\ntest_dotted_but_module_not_loaded (mock.tests.testpatch.PatchTest) ... ok\r\ntest_falsey_spec (mock.tests.testpatch.PatchTest) ... ok\r\ntest_get_only_proxy (mock.tests.testpatch.PatchTest) ... ok\r\ntest_get_set_delete_proxy (mock.tests.testpatch.PatchTest) ... ok\r\ntest_invalid_target (mock.tests.testpatch.PatchTest) ... ok\r\ntest_mock_calls_with_patch (mock.tests.testpatch.PatchTest) ... ok\r\ntest_multiple_patchobject (mock.tests.testpatch.PatchTest) ... ok\r\ntest_multiple_specs (mock.tests.testpatch.PatchTest) ... ok\r\ntest_name_preserved (mock.tests.testpatch.PatchTest) ... ok\r\ntest_nested_patch_failure (mock.tests.testpatch.PatchTest) ... ok\r\ntest_nested_patch_with_spec_as_list (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_class_decorating (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_create (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_failure (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_incompatible_with_autospec (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_incompatible_with_new (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_inherit_for_mocks (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_inherit_non_mock (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_keyword_arguments (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_patch (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_patch_object (mock.tests.testpatch.PatchTest) ... ok\r\ntest_new_callable_spec (mock.tests.testpatch.PatchTest) ... ok\r\ntest_not_callable_spec_as_list (mock.tests.testpatch.PatchTest) ... ok\r\ntest_object_lookup_is_quite_lazy (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_builtins_without_create (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_class_acts_with_spec_is_inherited (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_class_attribute (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_class_decorator (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_class_decorator (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_decorator_resolution (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_keyword_args (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_start_stop (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_test_prefix (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_with_clear (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_with_container_object (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_with_container_object_and_clear (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_with_string (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_dict_with_unicode (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_imports_lazily (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_keyword_args (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_local (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_create (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_create_mocks (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_create_mocks_different_order (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_create_mocks_patcher (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_decorating_class (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_failure (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_new_callable (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_new_callable_failure (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_no_kwargs (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_spec_set (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_stacked_decorators (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_multiple_string_subclasses (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_nested_autospec_repr (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_object_keyword_args (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_object_with_spec_as_boolean (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_propogrates_exc_on_exit (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_slots (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_spec_set (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_start_stop (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_stopall (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_test_prefix (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_create_mocks_non_existent_attributes (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_exception (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_spec (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_spec_as_boolean (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_spec_as_list (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_spec_mock_repr (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_with_static_methods (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patch_wont_create_by_default (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_class_decorator (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_start_stop (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_twice (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_with_create_mocks_non_existent_attributes (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_with_default_mock (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_with_none (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_with_spec (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_with_spec_as_list (mock.tests.testpatch.PatchTest) ... ok\r\ntest_patchobject_wont_create_by_default (mock.tests.testpatch.PatchTest) ... ok\r\ntest_single_patchobject (mock.tests.testpatch.PatchTest) ... ok\r\ntest_spec_set_inherit (mock.tests.testpatch.PatchTest) ... ok\r\ntest_spec_set_true (mock.tests.testpatch.PatchTest) ... ok\r\ntest_special_attrs (mock.tests.testpatch.PatchTest) ... ok\r\ntest_specs_false_instead_of_none (mock.tests.testpatch.PatchTest) ... ok\r\ntest_stop_idempotent (mock.tests.testpatch.PatchTest) ... ok\r\ntest_stop_without_start (mock.tests.testpatch.PatchTest) ... ok\r\ntest_stopall_lifo (mock.tests.testpatch.PatchTest) ... ok\r\ntest_tracebacks (mock.tests.testpatch.PatchTest) ... ok\r\ntest_wrapped_patch (mock.tests.testpatch.PatchTest) ... ok\r\ntest_wrapped_patch_dict (mock.tests.testpatch.PatchTest) ... ok\r\ntest_wrapped_patch_multiple (mock.tests.testpatch.PatchTest) ... ok\r\ntest_wrapped_patch_object (mock.tests.testpatch.PatchTest) ... ok\r\ntest_wrapped_several_times_patch (mock.tests.testpatch.PatchTest) ... ok\r\ntest_attribute_chain_is_maintained (mock.tests.testsealable.TestSealable) ... ok\r\ntest_attributes_return_more_mocks_by_default (mock.tests.testsealable.TestSealable) ... ok\r\ntest_call_chain_is_maintained (mock.tests.testsealable.TestSealable) ... ok\r\ntest_call_on_defined_sealed_mock_succeeds (mock.tests.testsealable.TestSealable) ... ok\r\ntest_call_on_sealed_mock_fails (mock.tests.testsealable.TestSealable) ... ok\r\ntest_existing_attributes_allowed_after_seal (mock.tests.testsealable.TestSealable) ... ok\r\ntest_existing_attributes_can_be_set_on_seal (mock.tests.testsealable.TestSealable) ... ok\r\ntest_initialized_attributes_allowed_after_seal (mock.tests.testsealable.TestSealable) ... ok\r\ntest_integration_with_spec_att_definition (mock.tests.testsealable.TestSealable)\r\nYou are not restricted when using mock with spec ... ok\r\ntest_integration_with_spec_method_definition (mock.tests.testsealable.TestSealable)\r\nYou need to defin the methods, even if they are in the spec ... ok\r\ntest_integration_with_spec_method_definition_respects_spec (mock.tests.testsealable.TestSealable)\r\nYou cannot define methods out of the spec ... ok\r\ntest_new_attributes_cannot_be_accessed_on_seal (mock.tests.testsealable.TestSealable) ... ok\r\ntest_new_attributes_cannot_be_set_on_child_of_seal (mock.tests.testsealable.TestSealable) ... ok\r\ntest_new_attributes_cannot_be_set_on_seal (mock.tests.testsealable.TestSealable) ... ok\r\ntest_sealed_exception_has_attribute_name (mock.tests.testsealable.TestSealable) ... ok\r\ntest_seals_dont_recurse_on_manual_attributes (mock.tests.testsealable.TestSealable) ... ok\r\ntest_seals_recurse_on_added_attributes (mock.tests.testsealable.TestSealable) ... ok\r\ntest_seals_recurse_on_magic_methods (mock.tests.testsealable.TestSealable) ... ok\r\ntestBases (mock.tests.testsentinel.SentinelTest) ... ok\r\ntestCopy (mock.tests.testsentinel.SentinelTest) ... ok\r\ntestDEFAULT (mock.tests.testsentinel.SentinelTest) ... ok\r\ntestPickle (mock.tests.testsentinel.SentinelTest) ... ok\r\ntestSentinelName (mock.tests.testsentinel.SentinelTest) ... ok\r\ntestSentinels (mock.tests.testsentinel.SentinelTest) ... ok\r\ntest_cant_uncache_sys (mock.tests.testsupport.TestUncache) ... ok\r\ntest_uncache_non_existent (mock.tests.testsupport.TestUncache) ... ok\r\ntest_dunder_iter_data (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_explicit_mock (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_interleaved_reads (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_mock_open (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_mock_open_context_manager (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_mock_open_context_manager_multiple_times (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_mock_open_read_with_argument (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_overriding_return_values (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_read_bytes (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_read_data (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_readline_bytes (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_readline_data (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_readlines_bytes (mock.tests.testwith.TestMockOpen) ... ok\r\ntest_readlines_data (mock.tests.testwith.TestMockOpen) ... ok\r\ntestContextManagerMocking (mock.tests.testwith.WithTest) ... ok\r\ntest_context_manager_with_magic_mock (mock.tests.testwith.WithTest) ... ok\r\ntest_dict_context_manager (mock.tests.testwith.WithTest) ... ok\r\ntest_double_patch_instance_method (mock.tests.testwith.WithTest) ... ok\r\ntest_patch_object_with_statement (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement_as (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement_exception (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement_imbricated (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement_nested (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement_same_attribute (mock.tests.testwith.WithTest) ... ok\r\ntest_with_statement_specified (mock.tests.testwith.WithTest) ... ok\r\nmock-3.0.5.mock.tests (unittest.loader._FailedTest) ... ERROR\r\n\r\n======================================================================\r\nERROR: mock-3.0.5.mock.tests (unittest.loader._FailedTest)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: mock-3.0.5.mock.tests\r\nTraceback (most recent call last):\r\n  File &quot;/usr/lib64/python3.7/unittest/loader.py&quot;, line 470, in _find_test_path\r\n    package = self._get_module_from_name(name)\r\n  File &quot;/usr/lib64/python3.7/unittest/loader.py&quot;, line 377, in _get_module_from_name\r\n    __import__(name)\r\nModuleNotFoundError: No module named &apos;mock-3&apos;\r\n\r\n\r\n======================================================================\r\nERROR: mock-3.0.5.mock.tests (unittest.loader._FailedTest)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: mock-3.0.5.mock.tests\r\nTraceback (most recent call last):\r\n  File &quot;/usr/lib64/python3.7/unittest/loader.py&quot;, line 470, in _find_test_path\r\n    package = self._get_module_from_name(name)\r\n  File &quot;/usr/lib64/python3.7/unittest/loader.py&quot;, line 377, in _get_module_from_name\r\n    __import__(name)\r\nModuleNotFoundError: No module named &apos;mock-3&apos;\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 408 tests in 0.557s\r\n\r\nFAILED (errors=2, skipped=9)\r\nTest failed: &lt;unittest.runner.TextTestResult run=408 errors=2 failures=0&gt;\r\nerror: Test failed: &lt;unittest.runner.TextTestResult run=408 errors=2 failures=0&gt;\r\nerror: Bad exit status from /var/tmp/rpm-tmp.nWjdAW (%check)\r\n</pre>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/465", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/465/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/465/events", "html_url": "https://github.com/testing-cabal/mock/issues/465", "id": 441599381, "node_id": "MDU6SXNzdWU0NDE1OTkzODE=", "number": 465, "title": "TypeError: unhashable type: '_ANY'.", "user": {"login": "byohay", "id": 15332602, "node_id": "MDQ6VXNlcjE1MzMyNjAy", "avatar_url": "https://avatars0.githubusercontent.com/u/15332602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/byohay", "html_url": "https://github.com/byohay", "followers_url": "https://api.github.com/users/byohay/followers", "following_url": "https://api.github.com/users/byohay/following{/other_user}", "gists_url": "https://api.github.com/users/byohay/gists{/gist_id}", "starred_url": "https://api.github.com/users/byohay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/byohay/subscriptions", "organizations_url": "https://api.github.com/users/byohay/orgs", "repos_url": "https://api.github.com/users/byohay/repos", "events_url": "https://api.github.com/users/byohay/events{/privacy}", "received_events_url": "https://api.github.com/users/byohay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-05-08T07:51:36Z", "updated_at": "2019-05-10T05:49:21Z", "closed_at": "2019-05-10T05:49:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Starting from mock 3.0.0, some of the tests we have failed because of this error:\r\n`TypeError: unhashable type: '_ANY'`.\r\n\r\nReproduction is very simple:\r\n\r\n```py\r\nfrom mock import ANY\r\n{ANY}\r\n```\r\n\r\nAnd the traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: unhashable type: '_ANY'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/464", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/464/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/464/events", "html_url": "https://github.com/testing-cabal/mock/issues/464", "id": 441467487, "node_id": "MDU6SXNzdWU0NDE0Njc0ODc=", "number": 464, "title": "AttributeError: attribute '__signature__' of 'type' objects is not writable", "user": {"login": "steog88", "id": 11961935, "node_id": "MDQ6VXNlcjExOTYxOTM1", "avatar_url": "https://avatars0.githubusercontent.com/u/11961935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steog88", "html_url": "https://github.com/steog88", "followers_url": "https://api.github.com/users/steog88/followers", "following_url": "https://api.github.com/users/steog88/following{/other_user}", "gists_url": "https://api.github.com/users/steog88/gists{/gist_id}", "starred_url": "https://api.github.com/users/steog88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steog88/subscriptions", "organizations_url": "https://api.github.com/users/steog88/orgs", "repos_url": "https://api.github.com/users/steog88/repos", "events_url": "https://api.github.com/users/steog88/events{/privacy}", "received_events_url": "https://api.github.com/users/steog88/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-05-07T22:10:16Z", "updated_at": "2019-05-08T15:06:00Z", "closed_at": "2019-05-08T14:51:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a problem with `mock>2.0.0`.\r\nWhen I want to patch a class with `autospec=True`, if the class itself has already the attribute `__signature__` and it is not writable, an `AttributeError` is raised when running `_check_signature`.\r\n\r\nIn the real case, the object I want to patch inherits `__signature__` from `PySide2.QtWidgets.QObject`, so renaming the property is not a viable option.\r\nAlthough my code is much more complicate, I can reproduce the error with the following code (save to `test_mock3.py` and run, I use `python` 2.7.15, `mock` 3.0.5, `unittest2` 1.1.0 and `PySide2`5.12.3):\r\n```\r\nimport unittest2 as unittest\r\nfrom mock import patch\r\nfrom PySide2.QtCore import QObject\r\n\r\nclass SampleClass(QObject):\r\n\tdef __init__(self, txt):\r\n\t\tself.txt = txt\r\n\r\nclass TestMock(unittest.TestCase):\r\n\tdef test_autospec(self):\r\n\t\twith patch(\"test_mock3.SampleClass\", autospec=True) as _c:\r\n\t\t\tb = SampleClass(\"b\")\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()\r\n```\r\n\r\nThe error is the following:\r\n```\r\n======================================================================\r\nERROR: test_autospec (__main__.TestMock)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"test_mock3.py\", line 13, in test_autospec\r\n    with patch(\"test_mock3.SampleClass\", return_value=a, autospec=True) as _c:\r\n  File \"/usr/lib64/python2.7/site-packages/mock/mock.py\", line 1476, in __enter__\r\n    _name=self.attribute, **kwargs)\r\n  File \"/usr/lib64/python2.7/site-packages/mock/mock.py\", line 2377, in create_autospec\r\n    _check_signature(spec, mock, is_type, instance)\r\n  File \"/usr/lib64/python2.7/site-packages/mock/mock.py\", line 198, in _check_signature\r\n    type(mock).__signature__ = sig\r\nAttributeError: attribute '__signature__' of 'type' objects is not writable\r\n```\r\n\r\nThe same code works with `mock==2.0.0`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/462", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/462/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/462/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/462/events", "html_url": "https://github.com/testing-cabal/mock/issues/462", "id": 441313761, "node_id": "MDU6SXNzdWU0NDEzMTM3NjE=", "number": 462, "title": "How to mock a exception class??", "user": {"login": "wencan", "id": 1072917, "node_id": "MDQ6VXNlcjEwNzI5MTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1072917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wencan", "html_url": "https://github.com/wencan", "followers_url": "https://api.github.com/users/wencan/followers", "following_url": "https://api.github.com/users/wencan/following{/other_user}", "gists_url": "https://api.github.com/users/wencan/gists{/gist_id}", "starred_url": "https://api.github.com/users/wencan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wencan/subscriptions", "organizations_url": "https://api.github.com/users/wencan/orgs", "repos_url": "https://api.github.com/users/wencan/repos", "events_url": "https://api.github.com/users/wencan/events{/privacy}", "received_events_url": "https://api.github.com/users/wencan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-07T16:01:40Z", "updated_at": "2019-05-07T16:02:49Z", "closed_at": "2019-05-07T16:02:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I need mock a exception class, and raise it.\r\nmy code:\r\n```python\r\nclass TestService(unittest.TestCase):\r\n    def test_raise(self):\r\n        class MyException(BaseException):\r\n            pass\r\n        \r\n        mockedException = mock.create_autospec(spec=MyException, instance=True)\r\n        self.assertIsInstance(mockedException, BaseException)\r\n        raise mockedException\r\n```\r\n\r\noutput:\r\n```\r\nTypeError: exceptions must derive from BaseException\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/461", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/461/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/461/events", "html_url": "https://github.com/testing-cabal/mock/issues/461", "id": 440922796, "node_id": "MDU6SXNzdWU0NDA5MjI3OTY=", "number": 461, "title": "Issues when installing mock through buildout", "user": {"login": "ZachArani", "id": 1368444, "node_id": "MDQ6VXNlcjEzNjg0NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1368444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ZachArani", "html_url": "https://github.com/ZachArani", "followers_url": "https://api.github.com/users/ZachArani/followers", "following_url": "https://api.github.com/users/ZachArani/following{/other_user}", "gists_url": "https://api.github.com/users/ZachArani/gists{/gist_id}", "starred_url": "https://api.github.com/users/ZachArani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ZachArani/subscriptions", "organizations_url": "https://api.github.com/users/ZachArani/orgs", "repos_url": "https://api.github.com/users/ZachArani/repos", "events_url": "https://api.github.com/users/ZachArani/events{/privacy}", "received_events_url": "https://api.github.com/users/ZachArani/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-05-06T22:17:36Z", "updated_at": "2019-06-06T15:41:43Z", "closed_at": "2019-05-07T20:58:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Had some issues with mock over the weekend on our Jenkins instance. Pulling the latest version of mock yielded this wonderful message from buildout:\r\n\r\n`Installing eggs.\r\nGetting distribution for 'mock'.\r\nwarning: install_lib: 'build/lib' does not exist -- no Python modules to install\r\n\r\nzip_safe flag not set; analyzing archive contents...\r\nWhile:\r\n  Installing eggs.\r\n  Getting distribution for 'mock'.\r\n\r\nAn internal error occurred due to a bug in either zc.buildout or in a\r\nrecipe being used:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/buildout.py\", line 2174, in main\r\n    getattr(buildout, command)(args)\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/buildout.py\", line 817, in install\r\n    installed_files = self[part]._call(recipe.install)\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/buildout.py\", line 1603, in _call\r\n    return f()\r\n  File \"/Users/jenkins/cache/nti.qa.buildout-eggs/zc.recipe.egg-2.0.7-py2.7.egg/zc/recipe/egg/egg.py\", line 227, in install\r\n    reqs, ws = self.working_set()\r\n  File \"/Users/jenkins/cache/nti.qa.buildout-eggs/zc.recipe.egg-2.0.7-py2.7.egg/zc/recipe/egg/egg.py\", line 87, in working_set\r\n    allow_unknown_extras=bool_option(buildout_section, 'allow-unknown-extras')\r\n  File \"/Users/jenkins/cache/nti.qa.buildout-eggs/zc.recipe.egg-2.0.7-py2.7.egg/zc/recipe/egg/egg.py\", line 168, in _working_set\r\n    allow_unknown_extras=allow_unknown_extras)\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 957, in install\r\n    return installer.install(specs, working_set)\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 730, in install\r\n    for dist in self._get_dist(req, ws):\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 574, in _get_dist\r\n    dists = [_move_to_eggs_dir_and_compile(dist, self._dest)]\r\n  File \"/Users/jenkins/jenkinsMaster/workspace/QA/Start Web-Sanity/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 1745, in _move_to_eggs_dir_and_compile\r\n    os.rename(tmp_loc, newloc)\r\nOSError: [Errno 66] Directory not empty\r\n```\r\n\r\nIf I delete my local buildout cache:\r\n\r\n```\r\nGetting distribution for 'mock'.\r\nwarning: install_lib: 'build/lib' does not exist -- no Python modules to install\r\n\r\nzip_safe flag not set; analyzing archive contents...\r\nWhile:\r\n  Installing eggs.\r\n  Getting distribution for 'mock'.\r\n\r\nAn internal error occurred due to a bug in either zc.buildout or in a\r\nrecipe being used:\r\nTraceback (most recent call last):\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/buildout.py\", line 2174, in main\r\n    getattr(buildout, command)(args)\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/buildout.py\", line 817, in install\r\n    installed_files = self[part]._call(recipe.install)\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/buildout.py\", line 1603, in _call\r\n    return f()\r\n  File \"/Users/jenkins/cache/nti.qa.buildout-eggs/zc.recipe.egg-2.0.7-py2.7.egg/zc/recipe/egg/egg.py\", line 227, in install\r\n    reqs, ws = self.working_set()\r\n  File \"/Users/jenkins/cache/nti.qa.buildout-eggs/zc.recipe.egg-2.0.7-py2.7.egg/zc/recipe/egg/egg.py\", line 87, in working_set\r\n    allow_unknown_extras=bool_option(buildout_section, 'allow-unknown-extras')\r\n  File \"/Users/jenkins/cache/nti.qa.buildout-eggs/zc.recipe.egg-2.0.7-py2.7.egg/zc/recipe/egg/egg.py\", line 168, in _working_set\r\n    allow_unknown_extras=allow_unknown_extras)\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 957, in install\r\n    return installer.install(specs, working_set)\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 730, in install\r\n    for dist in self._get_dist(req, ws):\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 574, in _get_dist\r\n    dists = [_move_to_eggs_dir_and_compile(dist, self._dest)]\r\n  File \"/Users/jenkins/nti-qa-buildout/eggs/zc.buildout-2.13.1-py2.7.egg/zc/buildout/easy_install.py\", line 1771, in _move_to_eggs_dir_and_compile\r\n    assert newdist is not None  # newloc above is missing our dist?!\r\n```\r\n\r\nRolling back to mock 2.00 did fix the issue. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/459", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/459/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/459/events", "html_url": "https://github.com/testing-cabal/mock/issues/459", "id": 439881876, "node_id": "MDU6SXNzdWU0Mzk4ODE4NzY=", "number": 459, "title": "License file missing from sdist", "user": {"login": "jakirkham", "id": 3019665, "node_id": "MDQ6VXNlcjMwMTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakirkham", "html_url": "https://github.com/jakirkham", "followers_url": "https://api.github.com/users/jakirkham/followers", "following_url": "https://api.github.com/users/jakirkham/following{/other_user}", "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions", "organizations_url": "https://api.github.com/users/jakirkham/orgs", "repos_url": "https://api.github.com/users/jakirkham/repos", "events_url": "https://api.github.com/users/jakirkham/events{/privacy}", "received_events_url": "https://api.github.com/users/jakirkham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-05-03T04:29:29Z", "updated_at": "2019-05-04T16:55:19Z", "closed_at": "2019-05-04T13:02:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Appears the license file is missing from the sdist in the recent release. Guess this is something pbr automated previously. Would it be possible to have the license file included in the future?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/458", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/458/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/458/events", "html_url": "https://github.com/testing-cabal/mock/issues/458", "id": 439550251, "node_id": "MDU6SXNzdWU0Mzk1NTAyNTE=", "number": 458, "title": "TypeError when patching a dictionary with a Unicode string literal on Python 2", "user": {"login": "micbou", "id": 10026824, "node_id": "MDQ6VXNlcjEwMDI2ODI0", "avatar_url": "https://avatars2.githubusercontent.com/u/10026824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/micbou", "html_url": "https://github.com/micbou", "followers_url": "https://api.github.com/users/micbou/followers", "following_url": "https://api.github.com/users/micbou/following{/other_user}", "gists_url": "https://api.github.com/users/micbou/gists{/gist_id}", "starred_url": "https://api.github.com/users/micbou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/micbou/subscriptions", "organizations_url": "https://api.github.com/users/micbou/orgs", "repos_url": "https://api.github.com/users/micbou/repos", "events_url": "https://api.github.com/users/micbou/events{/privacy}", "received_events_url": "https://api.github.com/users/micbou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-02T11:48:38Z", "updated_at": "2019-05-02T14:00:32Z", "closed_at": "2019-05-02T12:21:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Patching a dictionary with a Unicode string literal on Python 2 raises the exception `TypeError: string indices must be integers`. Running a `test.py` file containing the following code\r\n```python\r\nfrom mock import patch\r\n\r\nsome_dict = {}\r\n\r\nwith patch.dict(u'test.some_dict'):\r\n    pass\r\n```\r\nresults in\r\n```python\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 5, in <module>\r\n    with patch.dict(u'test.some_dict'):\r\n  File \"C:\\Python27\\lib\\site-packages\\mock\\mock.py\", line 1766, in __enter__\r\n    self._patch_dict()\r\n  File \"C:\\Python27\\lib\\site-packages\\mock\\mock.py\", line 1783, in _patch_dict\r\n    original[key] = in_dict[key]\r\nTypeError: string indices must be integers\r\n```\r\nThis is a regression introduced by commit 5268eda.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/457", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/457/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/457/events", "html_url": "https://github.com/testing-cabal/mock/issues/457", "id": 439489727, "node_id": "MDU6SXNzdWU0Mzk0ODk3Mjc=", "number": 457, "title": "s", "user": {"login": "vridashrava", "id": 6490984, "node_id": "MDQ6VXNlcjY0OTA5ODQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/6490984?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vridashrava", "html_url": "https://github.com/vridashrava", "followers_url": "https://api.github.com/users/vridashrava/followers", "following_url": "https://api.github.com/users/vridashrava/following{/other_user}", "gists_url": "https://api.github.com/users/vridashrava/gists{/gist_id}", "starred_url": "https://api.github.com/users/vridashrava/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vridashrava/subscriptions", "organizations_url": "https://api.github.com/users/vridashrava/orgs", "repos_url": "https://api.github.com/users/vridashrava/repos", "events_url": "https://api.github.com/users/vridashrava/events{/privacy}", "received_events_url": "https://api.github.com/users/vridashrava/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-02T09:04:48Z", "updated_at": "2019-05-02T09:08:03Z", "closed_at": "2019-05-02T09:08:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/456", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/456/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/456/events", "html_url": "https://github.com/testing-cabal/mock/issues/456", "id": 439488226, "node_id": "MDU6SXNzdWU0Mzk0ODgyMjY=", "number": 456, "title": "CI to ensure package is installable and importable.", "user": {"login": "banthar", "id": 65873, "node_id": "MDQ6VXNlcjY1ODcz", "avatar_url": "https://avatars3.githubusercontent.com/u/65873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/banthar", "html_url": "https://github.com/banthar", "followers_url": "https://api.github.com/users/banthar/followers", "following_url": "https://api.github.com/users/banthar/following{/other_user}", "gists_url": "https://api.github.com/users/banthar/gists{/gist_id}", "starred_url": "https://api.github.com/users/banthar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/banthar/subscriptions", "organizations_url": "https://api.github.com/users/banthar/orgs", "repos_url": "https://api.github.com/users/banthar/repos", "events_url": "https://api.github.com/users/banthar/events{/privacy}", "received_events_url": "https://api.github.com/users/banthar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-05-02T09:00:28Z", "updated_at": "2019-05-04T12:54:21Z", "closed_at": "2019-05-04T12:54:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running this on fresh Python installation:\r\n\r\n    pip install -U mock && python -c \"import mock\"\r\n\r\nfails with:\r\n\r\n\tCollecting mock\r\n\t  Downloading https://files.pythonhosted.org/packages/59/83/8fcdcf4babcc55290e50cbd54fcc9fcdd81c2e62eff27c1e6a2f23d79381/mock-3.0.0-py2.py3-none-any.whl\r\n\tInstalling collected packages: mock\r\n\tSuccessfully installed mock-3.0.0\r\n\tTraceback (most recent call last):\r\n\t  File \"<string>\", line 1, in <module>\r\n\t  File \"/usr/local/lib/python3.7/site-packages/mock/__init__.py\", line 2, in <module>\r\n\t\timport mock.mock as _mock\r\n\t  File \"/usr/local/lib/python3.7/site-packages/mock/mock.py\", line 68, in <module>\r\n\t\timport six\r\n\tModuleNotFoundError: No module named 'six'\r\n\r\nUsing previous mock version:\r\n\r\n    pip install \"mock<3.0.0\" && python -c \"import mock\"\r\n\r\nworks without issue:\r\n\r\n\tCollecting mock<3.0.0\r\n\t  Downloading https://files.pythonhosted.org/packages/e6/35/f187bdf23be87092bd0f1200d43d23076cee4d0dec109f195173fd3ebc79/mock-2.0.0-py2.py3-none-any.whl (56kB)\r\n\tCollecting pbr>=0.11 (from mock<3.0.0)\r\n\t  Downloading https://files.pythonhosted.org/packages/07/3e/22d1d35a4b51706ca3590c54359aeb5fa7ea60df46180143a3ea13d45f29/pbr-5.2.0-py2.py3-none-any.whl (107kB)\r\n\tCollecting six>=1.9 (from mock<3.0.0)\r\n\t  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl\r\n\tInstalling collected packages: pbr, six, mock\r\n\tSuccessfully installed mock-2.0.0 pbr-5.2.0 six-1.12.0\r\n\r\nThe same is visible both on Python2.7 and Python3.7. Looks like dependencies on six and funcsigs are missing in 3.0.0 when installing via pip.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/453", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/453/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/453/events", "html_url": "https://github.com/testing-cabal/mock/issues/453", "id": 438680097, "node_id": "MDU6SXNzdWU0Mzg2ODAwOTc=", "number": 453, "title": "drop jython support in 3.0.0?", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-04-30T09:24:49Z", "updated_at": "2019-05-01T11:23:06Z", "closed_at": "2019-05-01T07:54:01Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "@rbtcollins / @mfoord / @voidspace - thoughts?\r\n\r\nWe have no CI for it, so it's likely to have bit-rotted...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/452", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/452/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/452/events", "html_url": "https://github.com/testing-cabal/mock/issues/452", "id": 438640126, "node_id": "MDU6SXNzdWU0Mzg2NDAxMjY=", "number": 452, "title": "\"TypeError: too many positional arguments\" when using create_autospec on pypy3", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-30T07:34:52Z", "updated_at": "2020-01-29T16:16:51Z", "closed_at": "2020-01-29T16:16:45Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Once all the backports are up to date, this fails with:\r\n\r\n```\r\n__________ SpecSignatureTest.test_autospec_on_bound_builtin_function ___________\r\nself = <mock.tests.testhelpers.SpecSignatureTest testMethod=test_autospec_on_bound_builtin_function>\r\n    def test_autospec_on_bound_builtin_function(self):\r\n        meth = six.create_bound_method(time.ctime, time.time())\r\n        self.assertIsInstance(meth(), str)\r\n        mocked = create_autospec(meth)\r\n    \r\n        # no signature, so no spec to check against\r\n        mocked()\r\n        mocked.assert_called_once_with()\r\n        mocked.reset_mock()\r\n>       mocked(4, 5, 6)\r\nmock/tests/testhelpers.py:989: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n<string>:2: in ctime\r\n    ???\r\nmock/mock.py:279: in checksig\r\n    sig.bind(*args, **kwargs)\r\n/opt/python/pypy3.6-7.1.1/lib-python/3/inspect.py:2970: in bind\r\n    return args[0]._bind(args[1:], kwargs)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nself = <Signature ()>, args = (4, 5, 6), kwargs = {}\r\n    def _bind(self, args, kwargs, *, partial=False):\r\n        \"\"\"Private method. Don't use directly.\"\"\"\r\n    \r\n        arguments = OrderedDict()\r\n    \r\n        parameters = iter(self.parameters.values())\r\n        parameters_ex = ()\r\n        arg_vals = iter(args)0m\r\n    \r\n        while True:\r\n            # Let's iterate through the positional arguments and corresponding\r\n            # parameters\r\n            try:\r\n                arg_val = next(arg_vals)\r\n            except StopIteration:\r\n                # No more positional arguments\r\n                try:\r\n                    param = next(parameters)\r\n                except StopIteration:\r\n                    # No more parameters. That's it. Just need to check that\r\n                    # we have no `kwargs` after this while loop\r\n                    break\r\n                else:\r\n                    if param.kind == _VAR_POSITIONAL:\r\n                        # That's OK, just empty *args.  Let's start parsing\r\n                        # kwargs\r\n                        break\r\n                    elif param.name in kwargs:\r\n                        if param.kind == _POSITIONAL_ONLY:\r\n                            msg = '{arg!r} parameter is positional only, ' \\\r\n                                  'but was passed as a keyword'\r\n                            msg = msg.format(arg=param.name)\r\n                            raise TypeError(msg) from None\r\n                        parameters_ex = (param,)\r\n                        break\r\n                    elif (param.kind == _VAR_KEYWORD or\r\n                                                param.default is not _empty):\r\n                        # That's fine too - we have a default value for this\r\n                        # parameter.  So, lets start parsing `kwargs`, starting\r\n                        # with the current parameter\r\n                        parameters_ex = (param,)\r\n                        break\r\n                    else:\r\n                        # No default, not VAR_KEYWORD, not VAR_POSITIONAL,\r\n                        # not in `kwargs`\r\n                        if partial:\r\n                            parameters_ex = (param,)\r\n                            break\r\n                        else:\r\n                            msg = 'missing a required argument: {arg!r}'\r\n                            msg = msg.format(arg=param.name)\r\n                            raise TypeError(msg) from None\r\n            else:\r\n                # We have a positional argument to process\r\n                try:\r\n                    param = next(parameters)\r\n                except StopIteration:\r\n>                   raise TypeError('too many positional arguments') from None\r\nE                   TypeError: too many positional arguments\r\n```\r\nHere's the full build log:\r\nhttps://travis-ci.org/testing-cabal/mock/jobs/526308383\r\n\r\nI don't want this to hold up a new backport release, so parking this issue here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/449", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/449/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/449/events", "html_url": "https://github.com/testing-cabal/mock/issues/449", "id": 437455948, "node_id": "MDU6SXNzdWU0Mzc0NTU5NDg=", "number": 449, "title": "Maybe not just backports?", "user": {"login": "rsyring", "id": 109467, "node_id": "MDQ6VXNlcjEwOTQ2Nw==", "avatar_url": "https://avatars0.githubusercontent.com/u/109467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsyring", "html_url": "https://github.com/rsyring", "followers_url": "https://api.github.com/users/rsyring/followers", "following_url": "https://api.github.com/users/rsyring/following{/other_user}", "gists_url": "https://api.github.com/users/rsyring/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsyring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsyring/subscriptions", "organizations_url": "https://api.github.com/users/rsyring/orgs", "repos_url": "https://api.github.com/users/rsyring/repos", "events_url": "https://api.github.com/users/rsyring/events{/privacy}", "received_events_url": "https://api.github.com/users/rsyring/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-26T01:02:46Z", "updated_at": "2019-05-08T18:36:13Z", "closed_at": "2019-04-26T05:54:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if this is the place to have this discussion.  If not, I'd be happy to be pointed to the right place.  \r\n\r\n[This bug](https://bugs.python.org/issue23078) took over four years to get fixed in the standard library.  Given the rather simple fix, I can't imagine it should have to take that long.  Is there a reason this repository has to follow cPython's lead and can't, instead, fix bugs before they land in cPython?  Is it just a manpower issue or is there a principle behind it that's not immediately obvious (at least to me)?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/448", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/448/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/448/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/448/events", "html_url": "https://github.com/testing-cabal/mock/issues/448", "id": 431766775, "node_id": "MDU6SXNzdWU0MzE3NjY3NzU=", "number": 448, "title": "side_effect should be checked for iterable not callable", "user": {"login": "jazzblue", "id": 7321986, "node_id": "MDQ6VXNlcjczMjE5ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7321986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jazzblue", "html_url": "https://github.com/jazzblue", "followers_url": "https://api.github.com/users/jazzblue/followers", "following_url": "https://api.github.com/users/jazzblue/following{/other_user}", "gists_url": "https://api.github.com/users/jazzblue/gists{/gist_id}", "starred_url": "https://api.github.com/users/jazzblue/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jazzblue/subscriptions", "organizations_url": "https://api.github.com/users/jazzblue/orgs", "repos_url": "https://api.github.com/users/jazzblue/repos", "events_url": "https://api.github.com/users/jazzblue/events{/privacy}", "received_events_url": "https://api.github.com/users/jazzblue/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-10T23:36:15Z", "updated_at": "2019-04-11T05:53:54Z", "closed_at": "2019-04-11T05:53:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/testing-cabal/mock/blob/7a6ff3576274fb1627b4bd11d8e28eb51260a96b/mock/mock.py#L1115-L1116\r\n\r\nThis works correctly for iterables (such as lists) that are not defined as generators.\r\nHowever, if one defined a generator as a function this would not work.\r\n\r\nIt seems like the check should be not for callable, but for iterable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/447", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/447/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/447/events", "html_url": "https://github.com/testing-cabal/mock/issues/447", "id": 420030115, "node_id": "MDU6SXNzdWU0MjAwMzAxMTU=", "number": 447, "title": "Consider releasing a new version", "user": {"login": "pbasista", "id": 1535892, "node_id": "MDQ6VXNlcjE1MzU4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1535892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pbasista", "html_url": "https://github.com/pbasista", "followers_url": "https://api.github.com/users/pbasista/followers", "following_url": "https://api.github.com/users/pbasista/following{/other_user}", "gists_url": "https://api.github.com/users/pbasista/gists{/gist_id}", "starred_url": "https://api.github.com/users/pbasista/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pbasista/subscriptions", "organizations_url": "https://api.github.com/users/pbasista/orgs", "repos_url": "https://api.github.com/users/pbasista/repos", "events_url": "https://api.github.com/users/pbasista/events{/privacy}", "received_events_url": "https://api.github.com/users/pbasista/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-12T14:51:28Z", "updated_at": "2019-05-02T08:13:25Z", "closed_at": "2019-05-02T08:13:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest release version [2.0.0](https://github.com/testing-cabal/mock/releases/tag/2.0.0) is almost 3 years old now. Can you please consider releasing a new version from the current master branch?\r\n\r\nI would be particularly interested in a new release version which would contain the commit 07532a75003ec8e871e494f9f1ab8f28fa246f08 that adds the missing `assert_*` methods to the mocked object when autospec is used. With the current release version 2.0.0, errors similar to:\r\n```\r\nAttributeError: 'function' object has no attribute 'assert_not_called'\r\n```\r\nare reported when running Python 2. It seems to work fine with Python 3.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/446", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/446/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/446/events", "html_url": "https://github.com/testing-cabal/mock/issues/446", "id": 413795906, "node_id": "MDU6SXNzdWU0MTM3OTU5MDY=", "number": 446, "title": "drop pbr in favour of simple setup.py/setup.cfg", "user": {"login": "jakirkham", "id": 3019665, "node_id": "MDQ6VXNlcjMwMTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakirkham", "html_url": "https://github.com/jakirkham", "followers_url": "https://api.github.com/users/jakirkham/followers", "following_url": "https://api.github.com/users/jakirkham/following{/other_user}", "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions", "organizations_url": "https://api.github.com/users/jakirkham/orgs", "repos_url": "https://api.github.com/users/jakirkham/repos", "events_url": "https://api.github.com/users/jakirkham/events{/privacy}", "received_events_url": "https://api.github.com/users/jakirkham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-24T08:25:16Z", "updated_at": "2019-05-01T00:27:04Z", "closed_at": "2019-04-30T15:17:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Appears there is a link committed at `docs/changelog.txt`. Should this be dropped or replaced with something. Would add this causes `pip install` to fail on Windows Python 2.7.\r\n\r\nref: https://ci.appveyor.com/project/conda-forge/mock-feedstock/builds/22603672/job/iy9k6vq2y17loj3h", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/444", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/444/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/444/events", "html_url": "https://github.com/testing-cabal/mock/issues/444", "id": 393721312, "node_id": "MDU6SXNzdWUzOTM3MjEzMTI=", "number": 444, "title": "side_effect mocked method lose reference to instance", "user": {"login": "uadnan", "id": 8841282, "node_id": "MDQ6VXNlcjg4NDEyODI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8841282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/uadnan", "html_url": "https://github.com/uadnan", "followers_url": "https://api.github.com/users/uadnan/followers", "following_url": "https://api.github.com/users/uadnan/following{/other_user}", "gists_url": "https://api.github.com/users/uadnan/gists{/gist_id}", "starred_url": "https://api.github.com/users/uadnan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/uadnan/subscriptions", "organizations_url": "https://api.github.com/users/uadnan/orgs", "repos_url": "https://api.github.com/users/uadnan/repos", "events_url": "https://api.github.com/users/uadnan/events{/privacy}", "received_events_url": "https://api.github.com/users/uadnan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-23T04:06:50Z", "updated_at": "2018-12-23T16:00:53Z", "closed_at": "2018-12-23T16:00:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a method/bounded function is mocked and side_effect is supplied to it, the side_effect function doesn't get the reference to the instance.\r\n\r\nSuppose we have something like this\r\n\r\n```\r\nclass SomeClass:\r\n    def do_something(self, x):\r\n        pass\r\n\r\ndef some_function(x):\r\n    cls = SomeClass()\r\n    y = class.do_something(x)\r\n    return y\r\n```\r\n\r\nAnd the test for `some_function` will be \r\n\r\n```\r\ndef do_something_side_effect(x):\r\n    retrun x\r\n\r\ndef test_some_function():\r\n    with mock.path(\"SomeCass.do_something\") as do_something_mock:\r\n        do_something_mock.side_effect = do_something_side_effect\r\n        assert some_function(1)\r\n```\r\n\r\nHere `do_something_side_effect` mock will not have access to `SomeClass` instance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/443", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/443/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/443/events", "html_url": "https://github.com/testing-cabal/mock/issues/443", "id": 393114692, "node_id": "MDU6SXNzdWUzOTMxMTQ2OTI=", "number": 443, "title": "Patching object to get storage of called args and return_value.", "user": {"login": "bukowa", "id": 38087302, "node_id": "MDQ6VXNlcjM4MDg3MzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/38087302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bukowa", "html_url": "https://github.com/bukowa", "followers_url": "https://api.github.com/users/bukowa/followers", "following_url": "https://api.github.com/users/bukowa/following{/other_user}", "gists_url": "https://api.github.com/users/bukowa/gists{/gist_id}", "starred_url": "https://api.github.com/users/bukowa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bukowa/subscriptions", "organizations_url": "https://api.github.com/users/bukowa/orgs", "repos_url": "https://api.github.com/users/bukowa/repos", "events_url": "https://api.github.com/users/bukowa/events{/privacy}", "received_events_url": "https://api.github.com/users/bukowa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-20T16:16:11Z", "updated_at": "2018-12-20T20:05:44Z", "closed_at": "2018-12-20T16:23:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! Thanks for mock! \ud83e\udd47 First, let me tell you that i am a beginner. I scratched my head trying to make a simple mock for a method that won't change it's (method) behavior letting it work normally (not really mocking it?) but providing a simple interface to access args, kwargs passed to the method and return values of that particular call. Here is a simple hack i wrote that satisfies my needs and just works.\r\n````python\r\nfrom functools import wraps\r\nfrom typing import NamedTuple, Any, List\r\nfrom unittest.mock import _patch\r\n\r\n\r\n# Usage:\r\n# with patch_object_with_results(apps.users.my_task, 'run') as storage:\r\n#     # execute function\r\n#     print(m[0].call_args.args, m[0].call_args.kwargs, m[0].return_value)\r\n#\r\n\r\nclass CallArgs(NamedTuple):\r\n    \"\"\"\r\n    Represents arguments and keyword arguments\r\n    passed to the wrapped function.\r\n    \"\"\"\r\n    args: tuple = ()\r\n    kwargs: dict = {}\r\n\r\n\r\nclass Results(NamedTuple):\r\n    \"\"\"\r\n    Represents function execution data.\r\n    \"\"\"\r\n    call_args: CallArgs\r\n    return_value: Any\r\n\r\n\r\ndef storage_decorator(func, storage: List[Results]):\r\n    \"\"\"\r\n    Store ``Results`` in ``storage`` inserting\r\n    them into index 0 of list so last ``Results``\r\n    are always first element in the ``storage``.\r\n    \"\"\"\r\n    @wraps(func)\r\n    def wrapper(*args, **kwargs):\r\n        # execute wrapped function\r\n        return_value = func(*args, **kwargs)\r\n\r\n        # save data into storage\r\n        storage.insert(0, Results(CallArgs(args, kwargs), return_value))\r\n\r\n        # return normal function results\r\n        return return_value\r\n\r\n    return wrapper\r\n\r\n\r\nclass _patch_with_results(_patch):\r\n\r\n    def __init__(self, storage: List[Results], *args):\r\n        self.storage = storage\r\n        super().__init__(*args)\r\n\r\n    def __enter__(self):\r\n        super().__enter__()\r\n        return self.storage\r\n\r\n\r\ndef patch_object_with_results(\r\n        target, attribute, spec=None,\r\n        create=False, spec_set=None, autospec=None,\r\n        new_callable=None, **kwargs\r\n    ):\r\n\r\n    method = getattr(target, attribute)\r\n    # decorate function\r\n    storage = list()\r\n    new = storage_decorator(method, storage)\r\n\r\n    getter = lambda: target\r\n    return _patch_with_results(storage,\r\n        getter, attribute, new, spec, create,\r\n        spec_set, autospec, new_callable, kwargs\r\n    )\r\n````\r\n\r\nCan that be already done in the mock out of the box? If not do you think this kind of patch could be implemented into the core library or it is not mocking at all? I would love to hear any feedback.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/442", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/442/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/442/events", "html_url": "https://github.com/testing-cabal/mock/issues/442", "id": 386445000, "node_id": "MDU6SXNzdWUzODY0NDUwMDA=", "number": 442, "title": "backport remaining patches", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 202498129, "node_id": "MDU6TGFiZWwyMDI0OTgxMjk=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 202498132, "node_id": "MDU6TGFiZWwyMDI0OTgxMzI=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2018-12-01T10:19:55Z", "updated_at": "2019-04-30T07:40:41Z", "closed_at": "2019-04-30T07:40:41Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "from @rbtcollins : Biggest outstanding thing is to fixup the back port automation now python is in git. It may be trivial in fact.\r\n\r\nThis lives in `/tools`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/441", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/441/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/441/events", "html_url": "https://github.com/testing-cabal/mock/issues/441", "id": 386444878, "node_id": "MDU6SXNzdWUzODY0NDQ4Nzg=", "number": 441, "title": "backport: Skip deleted attributes while calling reset_mock", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 586310799, "node_id": "MDU6TGFiZWw1ODYzMTA3OTk=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/fixed-upstream", "name": "fixed-upstream", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-01T10:18:07Z", "updated_at": "2019-04-29T10:48:50Z", "closed_at": "2019-04-28T21:40:16Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "opening for @eli-b : https://github.com/python/cpython/pull/9302", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/438", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/438/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/438/events", "html_url": "https://github.com/testing-cabal/mock/issues/438", "id": 385627631, "node_id": "MDU6SXNzdWUzODU2Mjc2MzE=", "number": 438, "title": "fix pypy test failure.", "user": {"login": "cjw296", "id": 632049, "node_id": "MDQ6VXNlcjYzMjA0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/632049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjw296", "html_url": "https://github.com/cjw296", "followers_url": "https://api.github.com/users/cjw296/followers", "following_url": "https://api.github.com/users/cjw296/following{/other_user}", "gists_url": "https://api.github.com/users/cjw296/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjw296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjw296/subscriptions", "organizations_url": "https://api.github.com/users/cjw296/orgs", "repos_url": "https://api.github.com/users/cjw296/repos", "events_url": "https://api.github.com/users/cjw296/events{/privacy}", "received_events_url": "https://api.github.com/users/cjw296/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 202498129, "node_id": "MDU6TGFiZWwyMDI0OTgxMjk=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 202498132, "node_id": "MDU6TGFiZWwyMDI0OTgxMzI=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-11-29T08:47:59Z", "updated_at": "2019-08-22T06:17:09Z", "closed_at": "2018-12-24T08:24:58Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I'm going to stop the pypy job from failing the Travis CI build.\r\nOpening this bug to fix the failure and then revert the change to allow pypi failures.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/431", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/431/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/431/events", "html_url": "https://github.com/testing-cabal/mock/issues/431", "id": 342677011, "node_id": "MDU6SXNzdWUzNDI2NzcwMTE=", "number": 431, "title": "mock.Mock() objects should have a default __name__", "user": {"login": "yatishb", "id": 2919567, "node_id": "MDQ6VXNlcjI5MTk1Njc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2919567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yatishb", "html_url": "https://github.com/yatishb", "followers_url": "https://api.github.com/users/yatishb/followers", "following_url": "https://api.github.com/users/yatishb/following{/other_user}", "gists_url": "https://api.github.com/users/yatishb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yatishb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yatishb/subscriptions", "organizations_url": "https://api.github.com/users/yatishb/orgs", "repos_url": "https://api.github.com/users/yatishb/repos", "events_url": "https://api.github.com/users/yatishb/events{/privacy}", "received_events_url": "https://api.github.com/users/yatishb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T10:47:32Z", "updated_at": "2018-11-30T07:19:52Z", "closed_at": "2018-11-30T07:19:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>>> import mock\r\n>>>> x = mock.Mock()\r\n>>>> x.__name__\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"...site-packages/mock/mock.py\", line 700, in __getattr__\r\n    raise AttributeError(name)\r\nAttributeError: __name__\r\n```\r\n\r\nMock objects are often used to mock functions and classes which have `__name__` attributes. Considering that I was thinking that it would be a good idea if the mocked objects behaved the same way and had this attribute natively.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/430", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/430/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/430/events", "html_url": "https://github.com/testing-cabal/mock/issues/430", "id": 331989453, "node_id": "MDU6SXNzdWUzMzE5ODk0NTM=", "number": 430, "title": "License link is incorrect", "user": {"login": "treetoc", "id": 10838055, "node_id": "MDQ6VXNlcjEwODM4MDU1", "avatar_url": "https://avatars0.githubusercontent.com/u/10838055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treetoc", "html_url": "https://github.com/treetoc", "followers_url": "https://api.github.com/users/treetoc/followers", "following_url": "https://api.github.com/users/treetoc/following{/other_user}", "gists_url": "https://api.github.com/users/treetoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/treetoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treetoc/subscriptions", "organizations_url": "https://api.github.com/users/treetoc/orgs", "repos_url": "https://api.github.com/users/treetoc/repos", "events_url": "https://api.github.com/users/treetoc/events{/privacy}", "received_events_url": "https://api.github.com/users/treetoc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-13T13:14:36Z", "updated_at": "2018-11-29T08:37:55Z", "closed_at": "2018-11-29T08:37:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "In version 2.0.0 license link is incorrect when reading package metadata:\r\nMetadata point to http://github.com/testing-cabal/mock/blob/master/license.txt (note the missing 's' in http)\r\nwhereas it should be https://github.com/testing-cabal/mock/blob/master/LICENSE.txt", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/429", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/429/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/429/events", "html_url": "https://github.com/testing-cabal/mock/issues/429", "id": 323182329, "node_id": "MDU6SXNzdWUzMjMxODIzMjk=", "number": 429, "title": "Add __round__ to supported magicmock methods", "user": {"login": "mjpieters", "id": 46775, "node_id": "MDQ6VXNlcjQ2Nzc1", "avatar_url": "https://avatars3.githubusercontent.com/u/46775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjpieters", "html_url": "https://github.com/mjpieters", "followers_url": "https://api.github.com/users/mjpieters/followers", "following_url": "https://api.github.com/users/mjpieters/following{/other_user}", "gists_url": "https://api.github.com/users/mjpieters/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjpieters/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjpieters/subscriptions", "organizations_url": "https://api.github.com/users/mjpieters/orgs", "repos_url": "https://api.github.com/users/mjpieters/repos", "events_url": "https://api.github.com/users/mjpieters/events{/privacy}", "received_events_url": "https://api.github.com/users/mjpieters/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-15T11:46:42Z", "updated_at": "2018-05-15T11:48:32Z", "closed_at": "2018-05-15T11:48:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I notice that `__trunc__`, `__floor__` and `__ceil__` are supported methods for MagicMock, but [`__round__`](https://docs.python.org/3/reference/datamodel.html#object.__round__) (in the same grouping of numeric types emulation methods), is not.\r\n\r\nPlease add this to the mapping too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/426", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/426/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/426/events", "html_url": "https://github.com/testing-cabal/mock/issues/426", "id": 314155562, "node_id": "MDU6SXNzdWUzMTQxNTU1NjI=", "number": 426, "title": "mock_open does not support seek", "user": {"login": "domanchi", "id": 10440566, "node_id": "MDQ6VXNlcjEwNDQwNTY2", "avatar_url": "https://avatars3.githubusercontent.com/u/10440566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domanchi", "html_url": "https://github.com/domanchi", "followers_url": "https://api.github.com/users/domanchi/followers", "following_url": "https://api.github.com/users/domanchi/following{/other_user}", "gists_url": "https://api.github.com/users/domanchi/gists{/gist_id}", "starred_url": "https://api.github.com/users/domanchi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domanchi/subscriptions", "organizations_url": "https://api.github.com/users/domanchi/orgs", "repos_url": "https://api.github.com/users/domanchi/repos", "events_url": "https://api.github.com/users/domanchi/events{/privacy}", "received_events_url": "https://api.github.com/users/domanchi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-13T15:36:33Z", "updated_at": "2018-11-29T16:41:29Z", "closed_at": "2018-11-29T08:38:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Example:**\r\n\r\n```\r\n$ cat foobar\r\nsome content here\r\n$ cat example.py\r\nimport mock\r\n\r\n\r\ndef foobar():\r\n    with open('foobar') as f:\r\n        print(f.read())\r\n        f.seek(0)\r\n        print(f.read())\r\n\r\n\r\ndef mocked_foobar():\r\n    m = mock.mock_open(read_data='blah')\r\n    with mock.patch(\r\n        'builtins.open',\r\n        m,\r\n    ):\r\n        foobar()\r\n\r\n\r\nif __name__ == '__main__':\r\n    foobar()\r\n    mocked_foobar()\r\n$ python example.py\r\nsome content here\r\n\r\nsome content here\r\n\r\nblah\r\n```\r\n\r\nFrom my initial investigations, it looks pretty hard to change, because it seems [only line-based file operations are supported](https://github.com/testing-cabal/mock/blob/286792b2cd5b5baa8338260538ed207391280e34/mock/mock.py#L2468).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/424", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/424/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/424/events", "html_url": "https://github.com/testing-cabal/mock/issues/424", "id": 308984515, "node_id": "MDU6SXNzdWUzMDg5ODQ1MTU=", "number": 424, "title": "Align error messages when mock call assertion fails", "user": {"login": "EdvardM", "id": 6535, "node_id": "MDQ6VXNlcjY1MzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/6535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EdvardM", "html_url": "https://github.com/EdvardM", "followers_url": "https://api.github.com/users/EdvardM/followers", "following_url": "https://api.github.com/users/EdvardM/following{/other_user}", "gists_url": "https://api.github.com/users/EdvardM/gists{/gist_id}", "starred_url": "https://api.github.com/users/EdvardM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EdvardM/subscriptions", "organizations_url": "https://api.github.com/users/EdvardM/orgs", "repos_url": "https://api.github.com/users/EdvardM/repos", "events_url": "https://api.github.com/users/EdvardM/events{/privacy}", "received_events_url": "https://api.github.com/users/EdvardM/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-27T14:06:46Z", "updated_at": "2018-11-29T08:11:39Z", "closed_at": "2018-11-29T08:11:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Rationale:\r\n\r\nMock objects print assertion failures in a way that is hard to read.\r\n\r\nExample:\r\n\r\n```\r\nAssertionError: Expected call: <mock assertion failure: 1122331 ...>\r\nActual call: <mock assertion failure: 112331 ...>\r\n```\r\n\r\nAfter the patch:\r\n\r\n```\r\nAssertionError:\r\nExpected call: <mock assertion failure: 1122331 ...>\r\nActual call:   <mock assertion failure: 112331 ...>\r\n```\r\n\r\nThere's a quick implementation for this at \r\nhttps://github.com/EdvardM/mock/tree/better-actual-expected-error-messages\r\n\r\nwith tests. Though I'm still wondering should the calls be indentented, eg.\r\n\r\n```\r\nAssertionError:\r\n  Expected call: <mock assertion failure: 1122331 ...>\r\n  Actual call:   <mock assertion failure: 112331 ...>\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/423", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/423/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/423/events", "html_url": "https://github.com/testing-cabal/mock/issues/423", "id": 301554263, "node_id": "MDU6SXNzdWUzMDE1NTQyNjM=", "number": 423, "title": "ImportError: No module named config", "user": {"login": "ltamaster", "id": 6034968, "node_id": "MDQ6VXNlcjYwMzQ5Njg=", "avatar_url": "https://avatars0.githubusercontent.com/u/6034968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltamaster", "html_url": "https://github.com/ltamaster", "followers_url": "https://api.github.com/users/ltamaster/followers", "following_url": "https://api.github.com/users/ltamaster/following{/other_user}", "gists_url": "https://api.github.com/users/ltamaster/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltamaster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltamaster/subscriptions", "organizations_url": "https://api.github.com/users/ltamaster/orgs", "repos_url": "https://api.github.com/users/ltamaster/repos", "events_url": "https://api.github.com/users/ltamaster/events{/privacy}", "received_events_url": "https://api.github.com/users/ltamaster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-01T20:49:00Z", "updated_at": "2018-03-01T21:45:02Z", "closed_at": "2018-03-01T21:45:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a test using coverage on travis and I got this error:\r\n\r\n ```----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/tmp/tmp.yxT81y67iD/python/.tox/coverage/lib/python2.7/site-packages/mock/mock.py\", line 1297, in patched\r\n    arg = patching.__enter__()\r\n  File \"/tmp/tmp.yxT81y67iD/python/.tox/coverage/lib/python2.7/site-packages/mock/mock.py\", line 1353, in __enter__\r\n    self.target = self.getter()\r\n  File \"/tmp/tmp.yxT81y67iD/python/.tox/coverage/lib/python2.7/site-packages/mock/mock.py\", line 1523, in <lambda>\r\n    getter = lambda: _importer(target)\r\n  File \"/tmp/tmp.yxT81y67iD/python/.tox/coverage/lib/python2.7/site-packages/mock/mock.py\", line 1206, in _importer\r\n    thing = __import__(import_path)\r\nImportError: No module named config```\r\n\r\nAny ideas?\r\n\r\nThanks\r\nLuis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/422", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/422/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/422/events", "html_url": "https://github.com/testing-cabal/mock/issues/422", "id": 298706016, "node_id": "MDU6SXNzdWUyOTg3MDYwMTY=", "number": 422, "title": "_patch._active_patches is global to all patches", "user": {"login": "Larrik", "id": 1168007, "node_id": "MDQ6VXNlcjExNjgwMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1168007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Larrik", "html_url": "https://github.com/Larrik", "followers_url": "https://api.github.com/users/Larrik/followers", "following_url": "https://api.github.com/users/Larrik/following{/other_user}", "gists_url": "https://api.github.com/users/Larrik/gists{/gist_id}", "starred_url": "https://api.github.com/users/Larrik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Larrik/subscriptions", "organizations_url": "https://api.github.com/users/Larrik/orgs", "repos_url": "https://api.github.com/users/Larrik/repos", "events_url": "https://api.github.com/users/Larrik/events{/privacy}", "received_events_url": "https://api.github.com/users/Larrik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-20T18:47:15Z", "updated_at": "2018-11-29T08:39:05Z", "closed_at": "2018-11-29T08:39:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found this out the hard way, but when you create and start, say 5 different patches over 5 different methods, all 5 Mock objects live in a single `_active_patches` list shared by _all_ `_patch` objects. This is weird behavior.\r\n\r\nSide note, is there a better way to determine if a patch is running before trying to stop it?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/421", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/421/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/421/events", "html_url": "https://github.com/testing-cabal/mock/issues/421", "id": 298111726, "node_id": "MDU6SXNzdWUyOTgxMTE3MjY=", "number": 421, "title": "mock_open ignores read with size", "user": {"login": "P4Cu", "id": 2970549, "node_id": "MDQ6VXNlcjI5NzA1NDk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2970549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P4Cu", "html_url": "https://github.com/P4Cu", "followers_url": "https://api.github.com/users/P4Cu/followers", "following_url": "https://api.github.com/users/P4Cu/following{/other_user}", "gists_url": "https://api.github.com/users/P4Cu/gists{/gist_id}", "starred_url": "https://api.github.com/users/P4Cu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P4Cu/subscriptions", "organizations_url": "https://api.github.com/users/P4Cu/orgs", "repos_url": "https://api.github.com/users/P4Cu/repos", "events_url": "https://api.github.com/users/P4Cu/events{/privacy}", "received_events_url": "https://api.github.com/users/P4Cu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-18T19:41:59Z", "updated_at": "2018-11-29T08:39:17Z", "closed_at": "2018-11-29T08:39:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "See https://stackoverflow.com/questions/28297925/mock-file-read-method-using-size-variable", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/419", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/419/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/419/events", "html_url": "https://github.com/testing-cabal/mock/issues/419", "id": 286898570, "node_id": "MDU6SXNzdWUyODY4OTg1NzA=", "number": 419, "title": "Patches aren't being removed", "user": {"login": "jeffhos", "id": 703799, "node_id": "MDQ6VXNlcjcwMzc5OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/703799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffhos", "html_url": "https://github.com/jeffhos", "followers_url": "https://api.github.com/users/jeffhos/followers", "following_url": "https://api.github.com/users/jeffhos/following{/other_user}", "gists_url": "https://api.github.com/users/jeffhos/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffhos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffhos/subscriptions", "organizations_url": "https://api.github.com/users/jeffhos/orgs", "repos_url": "https://api.github.com/users/jeffhos/repos", "events_url": "https://api.github.com/users/jeffhos/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffhos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-08T21:47:54Z", "updated_at": "2018-01-09T12:01:19Z", "closed_at": "2018-01-09T12:01:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a situation where it seems like patches aren't being removed from the objects they patch, even after exiting the `with` block they're applied in.\r\n\r\nI have two tests, one of which mocks out a couple methods.  The second needs to use the original, unmocked implementation.  But it seems like the mock isn't being fully removed even though the first test has completed.\r\n\r\nUnfortunately, this requires 3 files to reproduce, since it seems to involve import behavior in some way.  Here they are:\r\n\r\nConfig.py:\r\n```python\r\ndef get():\r\n    return \"config_value\"\r\n```\r\n\r\nApp.py:\r\n```python\r\nimport Config as Config\r\n\r\ntest_value = Config.get()\r\nutil = \"blah\"\r\n```\r\n\r\ntests.py:\r\n```python\r\nfrom mock import patch\r\n\r\ndef test1():\r\n    with patch('Config.get') as get:\r\n        get.return_value = \"patched_value\"\r\n        with patch('App.util'):\r\n            assert True\r\n\r\ndef test2():\r\n    import App\r\n    assert App.test_value == \"config_value\"\r\n```\r\n\r\n**Expected result:** Both tests pass\r\n\r\n**Actual result:** test2 fails:\r\n\r\n```\r\n_________________________________________ test2 __________________________________________\r\n\r\n    def test2():\r\n        import App\r\n>       assert App.test_value == \"config_value\"\r\nE       AssertionError: assert 'patched_value' == 'config_value'\r\nE         - patched_value\r\nE         + config_value\r\n\r\ntests.py:11: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/418", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/418/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/418/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/418/events", "html_url": "https://github.com/testing-cabal/mock/issues/418", "id": 277332460, "node_id": "MDU6SXNzdWUyNzczMzI0NjA=", "number": 418, "title": "mock.create_autospec fails if an attribute is a partial function", "user": {"login": "claudiubelu", "id": 1552519, "node_id": "MDQ6VXNlcjE1NTI1MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1552519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudiubelu", "html_url": "https://github.com/claudiubelu", "followers_url": "https://api.github.com/users/claudiubelu/followers", "following_url": "https://api.github.com/users/claudiubelu/following{/other_user}", "gists_url": "https://api.github.com/users/claudiubelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudiubelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudiubelu/subscriptions", "organizations_url": "https://api.github.com/users/claudiubelu/orgs", "repos_url": "https://api.github.com/users/claudiubelu/repos", "events_url": "https://api.github.com/users/claudiubelu/events{/privacy}", "received_events_url": "https://api.github.com/users/claudiubelu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 586310799, "node_id": "MDU6TGFiZWw1ODYzMTA3OTk=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/fixed-upstream", "name": "fixed-upstream", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-28T10:29:17Z", "updated_at": "2019-04-29T07:11:12Z", "closed_at": "2019-04-29T07:11:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "If an object's attribute is a partial function, mock.create_autospec will fail while trying to copy the partial functions' details to the mocked function, as the partial function does not have the __name__ attribute.\r\n\r\nExample:\r\n\r\n    import functools\r\n\r\n    import mock\r\n\r\n\r\n    class Proxy(object):\r\n        def __init__(self, obj):\r\n            self.obj\r\n\r\n        def __getattr__(self, name):\r\n            return functools.partial(self.__run_method, name)\r\n\r\n        def __run_method(self, name, *args, **kwargs):\r\n            return getattr(self.obj, name)(*args, **kwargs)\r\n\r\n            \r\n    a = mock.Mock()\r\n    proxy = Proxy(a)\r\n\r\n    mock.create_autospec(proxy)\r\n\r\nOutput:\r\n\r\n      File \"mock_functools.py\", line 20, in <module>\r\n        mock.create_autospec(proxy)\r\n      File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 2324, in create_autospec\r\n        _check_signature(spec, mock, is_type, instance)\r\n      File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 210, in _check_signature\r\n        _copy_func_details(func, checksig)\r\n      File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 215, in _copy_func_details\r\n        funcopy.__name__ = func.__name__\r\n    AttributeError: 'functools.partial' object has no attribute '__name__'\r\n\r\nThis issue has been solved in Python 3 in the following commit: https://github.com/python/cpython/commit/161a4dd495dbf5cb12364e8f6e2d113cfd0633fc\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/416", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/416/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/416/events", "html_url": "https://github.com/testing-cabal/mock/issues/416", "id": 274788979, "node_id": "MDU6SXNzdWUyNzQ3ODg5Nzk=", "number": 416, "title": "Comparing sqla.types", "user": {"login": "KaiDriessen", "id": 33715346, "node_id": "MDQ6VXNlcjMzNzE1MzQ2", "avatar_url": "https://avatars0.githubusercontent.com/u/33715346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KaiDriessen", "html_url": "https://github.com/KaiDriessen", "followers_url": "https://api.github.com/users/KaiDriessen/followers", "following_url": "https://api.github.com/users/KaiDriessen/following{/other_user}", "gists_url": "https://api.github.com/users/KaiDriessen/gists{/gist_id}", "starred_url": "https://api.github.com/users/KaiDriessen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KaiDriessen/subscriptions", "organizations_url": "https://api.github.com/users/KaiDriessen/orgs", "repos_url": "https://api.github.com/users/KaiDriessen/repos", "events_url": "https://api.github.com/users/KaiDriessen/events{/privacy}", "received_events_url": "https://api.github.com/users/KaiDriessen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-17T08:35:26Z", "updated_at": "2018-11-29T08:40:47Z", "closed_at": "2018-11-29T08:40:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Comparing sqla.types seems to be causing some problems. Output (-vv):\r\n\r\nto_sql_mock.assert_called_once_with(table, mysql_connection.engine, if_exists='append', dtype=dtypes)\r\nE AssertionError: Expected call: to_sql('table', 'engine', dtype={'var_name': VARCHAR(length=255)}, if_exists='append')\r\nE Actual call: to_sql('table', 'engine', dtype={'var_name': VARCHAR(length=255)}, if_exists='append')\r\nE\r\nE pytest introspection follows:\r\nE\r\nE Kwargs:\r\nE assert {'dtype': {'v...ts': 'append'} == {'dtype': {'va...ts': 'append'}\r\nE Common items:\r\nE {'if_exists': 'append'}\r\nE Differing items:\r\nE {'dtype': {'var_name': VARCHAR(length=255)}} != {'dtype': {'var_name': VARCHAR(length=255)}}\r\nE Full diff:\r\nE {'dtype': {'var_name': VARCHAR(length=255)}, 'if_exists': 'append'}\r\nReplacing the VARCHAR type with any other basic type fixes the problem. The type VARCHAR is obtained as follows:\r\n\r\nimport sqlalchemy as sqla\r\nsqla.types.VARCHAR(length=255)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/414", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/414/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/414/events", "html_url": "https://github.com/testing-cabal/mock/issues/414", "id": 267125330, "node_id": "MDU6SXNzdWUyNjcxMjUzMzA=", "number": 414, "title": "Licensing issues", "user": {"login": "Skeen", "id": 225151, "node_id": "MDQ6VXNlcjIyNTE1MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/225151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Skeen", "html_url": "https://github.com/Skeen", "followers_url": "https://api.github.com/users/Skeen/followers", "following_url": "https://api.github.com/users/Skeen/following{/other_user}", "gists_url": "https://api.github.com/users/Skeen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Skeen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Skeen/subscriptions", "organizations_url": "https://api.github.com/users/Skeen/orgs", "repos_url": "https://api.github.com/users/Skeen/repos", "events_url": "https://api.github.com/users/Skeen/events{/privacy}", "received_events_url": "https://api.github.com/users/Skeen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-20T10:02:15Z", "updated_at": "2018-11-29T08:42:38Z", "closed_at": "2018-11-29T08:42:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nAccording to the METADATA information on the package;\r\n\r\n    cat site-packages/mock-2.0.0.dist-info/METADATA \r\n\r\n    Metadata-Version: 2.0\r\n    Name: mock\r\n    Version: 2.0.0\r\n    ...\r\n    License: UNKNOWN\r\n\r\nRather then UNKNOWN, perhaps it should say `Simplified BSD`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/413", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/413/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/413/events", "html_url": "https://github.com/testing-cabal/mock/issues/413", "id": 266321201, "node_id": "MDU6SXNzdWUyNjYzMjEyMDE=", "number": 413, "title": "Using autospec=True conflicts with 'wraps'", "user": {"login": "JohnVillalovos", "id": 578155, "node_id": "MDQ6VXNlcjU3ODE1NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/578155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnVillalovos", "html_url": "https://github.com/JohnVillalovos", "followers_url": "https://api.github.com/users/JohnVillalovos/followers", "following_url": "https://api.github.com/users/JohnVillalovos/following{/other_user}", "gists_url": "https://api.github.com/users/JohnVillalovos/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnVillalovos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnVillalovos/subscriptions", "organizations_url": "https://api.github.com/users/JohnVillalovos/orgs", "repos_url": "https://api.github.com/users/JohnVillalovos/repos", "events_url": "https://api.github.com/users/JohnVillalovos/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnVillalovos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-18T00:21:06Z", "updated_at": "2018-11-30T07:21:13Z", "closed_at": "2018-11-30T07:21:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "If have autospec=True, then no ValueError is raised. If autospec=False or not defined, then the ValueError is raised.\r\n\r\n```\r\nimport sys\r\nfrom unittest import mock\r\n\r\n\r\ndef wrapped_func(value):\r\n    raise ValueError(value)\r\n\r\n\r\n@mock.patch('__main__.wrapped_func', autospec=True, wraps=wrapped_func)\r\ndef main(mock_wrap):\r\n\r\n    wrapped_func(\"testing\")\r\n\r\n\r\nif '__main__' == __name__:\r\n    sys.exit(main())\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/409", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/409/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/409/events", "html_url": "https://github.com/testing-cabal/mock/issues/409", "id": 263887289, "node_id": "MDU6SXNzdWUyNjM4ODcyODk=", "number": 409, "title": "Build fails on unsupported Python 2.6", "user": {"login": "hugovk", "id": 1324225, "node_id": "MDQ6VXNlcjEzMjQyMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1324225?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hugovk", "html_url": "https://github.com/hugovk", "followers_url": "https://api.github.com/users/hugovk/followers", "following_url": "https://api.github.com/users/hugovk/following{/other_user}", "gists_url": "https://api.github.com/users/hugovk/gists{/gist_id}", "starred_url": "https://api.github.com/users/hugovk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hugovk/subscriptions", "organizations_url": "https://api.github.com/users/hugovk/orgs", "repos_url": "https://api.github.com/users/hugovk/repos", "events_url": "https://api.github.com/users/hugovk/events{/privacy}", "received_events_url": "https://api.github.com/users/hugovk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-10-09T13:02:53Z", "updated_at": "2018-01-09T12:17:29Z", "closed_at": "2018-01-09T12:17:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The latest build errors on Python 2.6:\r\n```\r\nDEPRECATION: Python 2.6 is no longer supported by the Python core team, please upgrade your Python. A future version of pip will drop support for Python 2.6\r\n...\r\nCollecting typing; python_version < \"3.5\" (from sphinx->mock==2.0.1.dev7)\r\n  Downloading typing-3.6.1.tar.gz (66kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 71kB 11.0MB/s \r\n    Complete output from command python setup.py egg_info:\r\n    ERROR: You need Python 2.7 or 3.3+ to install the typing package.\r\n```\r\nhttps://travis-ci.org/testing-cabal/mock/jobs/240337750\r\n\r\nIt also notes that a future pip will drop 2.6 as well, it went EOL in 2013. Perhaps it's time to drop it from here too? See also https://snarky.ca/stop-using-python-2-6/\r\n\r\n(Less pressing, Python 3.3 also became EOL last month.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/408", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/408/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/408/events", "html_url": "https://github.com/testing-cabal/mock/issues/408", "id": 244391625, "node_id": "MDU6SXNzdWUyNDQzOTE2MjU=", "number": 408, "title": "http://www.voidspace.org.uk/python/mock/ should redirect to current docs", "user": {"login": "dAnjou", "id": 117147, "node_id": "MDQ6VXNlcjExNzE0Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/117147?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dAnjou", "html_url": "https://github.com/dAnjou", "followers_url": "https://api.github.com/users/dAnjou/followers", "following_url": "https://api.github.com/users/dAnjou/following{/other_user}", "gists_url": "https://api.github.com/users/dAnjou/gists{/gist_id}", "starred_url": "https://api.github.com/users/dAnjou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dAnjou/subscriptions", "organizations_url": "https://api.github.com/users/dAnjou/orgs", "repos_url": "https://api.github.com/users/dAnjou/repos", "events_url": "https://api.github.com/users/dAnjou/events{/privacy}", "received_events_url": "https://api.github.com/users/dAnjou/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 202498132, "node_id": "MDU6TGFiZWwyMDI0OTgxMzI=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-20T14:53:02Z", "updated_at": "2018-12-05T08:28:41Z", "closed_at": "2018-12-05T08:28:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Stupid me just noticed today that this repo exists and that the library is kept up-to-date with Python 3's version.\r\n\r\nUp until now I've always checked the old website (http://www.voidspace.org.uk/python/mock/) for Python 2 projects.\r\n\r\nCould you please redirect here or add a big warning or take it down completely?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/407", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/407/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/407/events", "html_url": "https://github.com/testing-cabal/mock/issues/407", "id": 241715646, "node_id": "MDU6SXNzdWUyNDE3MTU2NDY=", "number": 407, "title": "Mock for method of object does not return expected value", "user": {"login": "Draqun", "id": 7522863, "node_id": "MDQ6VXNlcjc1MjI4NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7522863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Draqun", "html_url": "https://github.com/Draqun", "followers_url": "https://api.github.com/users/Draqun/followers", "following_url": "https://api.github.com/users/Draqun/following{/other_user}", "gists_url": "https://api.github.com/users/Draqun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Draqun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Draqun/subscriptions", "organizations_url": "https://api.github.com/users/Draqun/orgs", "repos_url": "https://api.github.com/users/Draqun/repos", "events_url": "https://api.github.com/users/Draqun/events{/privacy}", "received_events_url": "https://api.github.com/users/Draqun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-10T13:40:30Z", "updated_at": "2017-07-13T09:16:25Z", "closed_at": "2017-07-13T09:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wrote some test to check my class Module using serial.Serial class work well. But there is problem with return_value. \r\n\r\nThere is no expected value \"OK\\r\\n\". Instead there is \r\n```\r\n(Pdb) from pprint import pprint\r\n(Pdb) pprint(resp)\r\n<MagicMock name='Serial().read().decode().__radd__()' id='140253251637544'>\r\n(Pdb) pprint(vars(resp))\r\n{'__bool__': <MagicMock name='Serial().read().decode().__radd__().__bool__' id='140253251619248'>,\r\n '_mock_call_args': None,\r\n '_mock_call_args_list': [],\r\n '_mock_call_count': 0,\r\n '_mock_called': False,\r\n '_mock_children': {'__bool__': <MagicMock name='Serial().read().decode().__radd__().__bool__' id='140253251619248'>},\r\n '_mock_delegate': None,\r\n '_mock_methods': None,\r\n '_mock_mock_calls': [call.__bool__(), call.__bool__()],\r\n '_mock_name': None,\r\n '_mock_new_name': '()',\r\n '_mock_new_parent': <MagicMock name='Serial().read().decode().__radd__' id='140253251625032'>,\r\n '_mock_parent': None,\r\n '_mock_return_value': sentinel.DEFAULT,\r\n '_mock_side_effect': None,\r\n '_mock_unsafe': False,\r\n '_mock_wraps': None,\r\n '_spec_class': None,\r\n '_spec_set': None,\r\n '_spec_signature': None,\r\n 'method_calls': []}\r\n\r\n```\r\n\r\n\r\n```\r\n    @mock.patch('serial.Serial')\r\n    def test_module_read_bytes_method(self, mock_serial):\r\n        module_obj = Module(\"/dev/null\", 115200, 8, serial.PARITY_NONE, 1, 60, True, \"dUsb\", \"REFERENCE\")\r\n\r\n        mock_serial.read = mock.Mock(return_value=\"OK\\r\\n\")\r\n\r\n        pattern = \"OK\\r\\n|ERROR\\r\\n|CME.*ERROR.*\\r\\n|CONNECT\\r\\n\"\r\n        resp = module_obj.read(pattern, 1)\r\n        mock_serial.return_value.read.assert_called_with(1)\r\n        self.assertEqual(1, mock_serial.return_value.timeout)\r\n\r\n        pattern = \"\\r\\n\"\r\n        resp = module_obj.read(pattern, 10)\r\n        mock_serial.return_value.read.assert_called_with(1)\r\n        self.assertEqual(10, mock_serial.return_value.timeout)\r\n        import pdb; pdb.set_trace()\r\n```\r\n\r\nCan anyone tell me what am I doing wrong?\r\n\r\nBest regards.\r\nDraqun", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/406", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/406/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/406/events", "html_url": "https://github.com/testing-cabal/mock/issues/406", "id": 231006350, "node_id": "MDU6SXNzdWUyMzEwMDYzNTA=", "number": 406, "title": "cd", "user": {"login": "XiangmingWang", "id": 7698556, "node_id": "MDQ6VXNlcjc2OTg1NTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/7698556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XiangmingWang", "html_url": "https://github.com/XiangmingWang", "followers_url": "https://api.github.com/users/XiangmingWang/followers", "following_url": "https://api.github.com/users/XiangmingWang/following{/other_user}", "gists_url": "https://api.github.com/users/XiangmingWang/gists{/gist_id}", "starred_url": "https://api.github.com/users/XiangmingWang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XiangmingWang/subscriptions", "organizations_url": "https://api.github.com/users/XiangmingWang/orgs", "repos_url": "https://api.github.com/users/XiangmingWang/repos", "events_url": "https://api.github.com/users/XiangmingWang/events{/privacy}", "received_events_url": "https://api.github.com/users/XiangmingWang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-24T11:22:03Z", "updated_at": "2018-11-29T08:42:23Z", "closed_at": "2018-11-29T08:42:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/405", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/405/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/405/events", "html_url": "https://github.com/testing-cabal/mock/issues/405", "id": 228379266, "node_id": "MDU6SXNzdWUyMjgzNzkyNjY=", "number": 405, "title": "patch.dict resolves in_dict eagerly (should be late resolved)", "user": {"login": "jaraco", "id": 308610, "node_id": "MDQ6VXNlcjMwODYxMA==", "avatar_url": "https://avatars2.githubusercontent.com/u/308610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaraco", "html_url": "https://github.com/jaraco", "followers_url": "https://api.github.com/users/jaraco/followers", "following_url": "https://api.github.com/users/jaraco/following{/other_user}", "gists_url": "https://api.github.com/users/jaraco/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaraco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaraco/subscriptions", "organizations_url": "https://api.github.com/users/jaraco/orgs", "repos_url": "https://api.github.com/users/jaraco/repos", "events_url": "https://api.github.com/users/jaraco/events{/privacy}", "received_events_url": "https://api.github.com/users/jaraco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-12T18:58:03Z", "updated_at": "2018-12-16T20:43:56Z", "closed_at": "2018-11-30T07:21:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "`patch` and `patch.object` allow the target to be specified as string referring to the target object and this object is resolved at the time the patch effected, not when the patch is declared. `patch.dict` contrarily seems to resolve the dict eagerly, when the patch is declared. Observe with this pytest:\r\n\r\n```\r\nimport mock\r\n\r\n\r\ntarget = dict(a=1)\r\n\r\n@mock.patch.dict('test_patch_dict.target', dict(b=2))\r\ndef test_after_patch():\r\n\tassert target == dict(a=2, b=2)\r\n\r\ntarget = dict(a=2)\r\n```\r\n\r\nHere's the output:\r\n\r\n```\r\n$ rwt mock pytest -- -m pytest test_patch_dict.py\r\nCollecting mock\r\n  Using cached mock-2.0.0-py2.py3-none-any.whl\r\nCollecting pbr>=0.11 (from mock)\r\n  Using cached pbr-3.0.0-py2.py3-none-any.whl\r\nCollecting six>=1.9 (from mock)\r\n  Using cached six-1.10.0-py2.py3-none-any.whl\r\nInstalling collected packages: pbr, six, mock\r\nSuccessfully installed mock-2.0.0 pbr-3.0.0 six-1.10.0\r\n====================================== test session starts =======================================\r\nplatform darwin -- Python 3.6.1, pytest-3.0.5, py-1.4.33, pluggy-0.4.0\r\nrootdir: /Users/jaraco, inifile: \r\ncollected 1 items \r\n\r\ntest_patch_dict.py F\r\n\r\n============================================ FAILURES ============================================\r\n________________________________________ test_after_patch ________________________________________\r\n\r\n    @mock.patch.dict('test_patch_dict.target', dict(b=2))\r\n    def test_after_patch():\r\n>   \tassert target == dict(a=2, b=2)\r\nE    assert {'a': 2} == {'a': 2, 'b': 2}\r\nE      Omitting 1 identical items, use -v to show\r\nE      Right contains more items:\r\nE      {'b': 2}\r\nE      Use -v to get the full diff\r\n\r\ntest_patch_dict.py:8: AssertionError\r\n==================================== 1 failed in 0.05 seconds ====================================\r\n```\r\n\r\nThe target is unpatched because `test_patch_dict.target` was resolved during decoration rather than during test run.\r\n\r\nRemoving the initial assignment of `target = dict(a=1)`, the failure is thus:\r\n\r\n```\r\n______________________________ ERROR collecting test_patch_dict.py _______________________________\r\nImportError while importing test module '/Users/jaraco/test_patch_dict.py'.\r\nHint: make sure your test modules/packages have valid Python names.\r\nTraceback:\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-pcm3552g/mock/mock.py:1197: in _dot_lookup\r\n    return getattr(thing, comp)\r\nE   AttributeError: module 'test_patch_dict' has no attribute 'target'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n<frozen importlib._bootstrap>:942: in _find_and_load_unlocked\r\n    ???\r\nE   AttributeError: module 'test_patch_dict' has no attribute '__path__'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\ntest_patch_dict.py:4: in <module>\r\n    @mock.patch.dict('test_patch_dict.target', dict(b=2))\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-pcm3552g/mock/mock.py:1708: in __init__\r\n    in_dict = _importer(in_dict)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-pcm3552g/mock/mock.py:1210: in _importer\r\n    thing = _dot_lookup(thing, comp, import_path)\r\n/var/folders/c6/v7hnmq453xb6p2dbz1gqc6rr0000gn/T/rwt-pcm3552g/mock/mock.py:1199: in _dot_lookup\r\n    __import__(import_path)\r\nE   ModuleNotFoundError: No module named 'test_patch_dict.target'; 'test_patch_dict' is not a package\r\n!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n==================================== 1 error in 0.41 seconds =====================================\r\n```\r\n\r\nIs there any reason `patch.dict` doesn't have a similar deferred resolution behavior as its sister methods?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/404", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/404/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/404/events", "html_url": "https://github.com/testing-cabal/mock/issues/404", "id": 221836940, "node_id": "MDU6SXNzdWUyMjE4MzY5NDA=", "number": 404, "title": "pbr distribution was not found", "user": {"login": "ibrokemypie", "id": 7827846, "node_id": "MDQ6VXNlcjc4Mjc4NDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7827846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibrokemypie", "html_url": "https://github.com/ibrokemypie", "followers_url": "https://api.github.com/users/ibrokemypie/followers", "following_url": "https://api.github.com/users/ibrokemypie/following{/other_user}", "gists_url": "https://api.github.com/users/ibrokemypie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibrokemypie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibrokemypie/subscriptions", "organizations_url": "https://api.github.com/users/ibrokemypie/orgs", "repos_url": "https://api.github.com/users/ibrokemypie/repos", "events_url": "https://api.github.com/users/ibrokemypie/events{/privacy}", "received_events_url": "https://api.github.com/users/ibrokemypie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-14T15:59:11Z", "updated_at": "2017-04-15T00:19:58Z", "closed_at": "2017-04-15T00:19:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "After installing on osx with pip3 install mock, errors occur stating pbr is not installed, when it is actually installed and up to date. Have already attempted reinstalling all relevant packages.\r\npkg_resources.DistributionNotFound: The 'pbr>=0.11' distribution was not found and is required by mock", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/403", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/403/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/403/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/403/events", "html_url": "https://github.com/testing-cabal/mock/issues/403", "id": 221284223, "node_id": "MDU6SXNzdWUyMjEyODQyMjM=", "number": 403, "title": "libgcc", "user": {"login": "petrmalkov", "id": 10671700, "node_id": "MDQ6VXNlcjEwNjcxNzAw", "avatar_url": "https://avatars1.githubusercontent.com/u/10671700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrmalkov", "html_url": "https://github.com/petrmalkov", "followers_url": "https://api.github.com/users/petrmalkov/followers", "following_url": "https://api.github.com/users/petrmalkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrmalkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrmalkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrmalkov/subscriptions", "organizations_url": "https://api.github.com/users/petrmalkov/orgs", "repos_url": "https://api.github.com/users/petrmalkov/repos", "events_url": "https://api.github.com/users/petrmalkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrmalkov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-12T14:37:05Z", "updated_at": "2017-04-12T21:54:17Z", "closed_at": "2017-04-12T21:54:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "host centos 7\r\nmock -r epel-7-x86_64 --init\r\ninstalls\r\nlibgcc-4.8.5-11.el7.x86_64\r\nwhile on host I installed\r\ngcc --version\r\ngcc (GCC) 5.4.0        \r\n\r\nHow run / to pass into a newer gcc?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/402", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/402/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/402/events", "html_url": "https://github.com/testing-cabal/mock/issues/402", "id": 220355894, "node_id": "MDU6SXNzdWUyMjAzNTU4OTQ=", "number": 402, "title": "use of pbr breaks with zappa", "user": {"login": "jwkvam", "id": 86304, "node_id": "MDQ6VXNlcjg2MzA0", "avatar_url": "https://avatars0.githubusercontent.com/u/86304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwkvam", "html_url": "https://github.com/jwkvam", "followers_url": "https://api.github.com/users/jwkvam/followers", "following_url": "https://api.github.com/users/jwkvam/following{/other_user}", "gists_url": "https://api.github.com/users/jwkvam/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwkvam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwkvam/subscriptions", "organizations_url": "https://api.github.com/users/jwkvam/orgs", "repos_url": "https://api.github.com/users/jwkvam/repos", "events_url": "https://api.github.com/users/jwkvam/events{/privacy}", "received_events_url": "https://api.github.com/users/jwkvam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-07T23:35:04Z", "updated_at": "2017-04-12T21:58:12Z", "closed_at": "2017-04-12T21:58:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using Zappa to run some code on AWS Lambda. When I use Zappa's slim_handler to zip up my python code and packages I run into problems with mock. For the time being I've hardcoded the version info to workaround this issue and remove the dependency on pbr. My original bug is here, https://github.com/Miserlou/Zappa/issues/779.\r\n\r\nI don't really know where the issue is, but I was hoping you guys might have some insight, thanks!\r\n\r\n```\r\nFile \"/tmp/pip-build-c1VilV/mock/mock/__init__.py\", line 2, in <module>\r\n  File \"/tmp/pip-build-c1VilV/mock/mock/mock.py\", line 71, in <module>\r\n  File \"/tmp/pip-build-c1VilV/pbr/pbr/version.py\", line 460, in semantic_version\r\n  File \"/tmp/pip-build-c1VilV/pbr/pbr/version.py\", line 447, in _get_version_from_pkg_resources\r\n  File \"/tmp/pip-build-c1VilV/pbr/pbr/packaging.py\", line 750, in get_version\r\nException: Versioning for this project requires either an sdist tarball, or access to an upstream git repository. It's also possible that there is a mismatch between the package name in setup.cfg and the argument given to pbr.version.VersionInfo. Project name mock was given, but was not able to be found.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/401", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/401/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/401/events", "html_url": "https://github.com/testing-cabal/mock/issues/401", "id": 219272732, "node_id": "MDU6SXNzdWUyMTkyNzI3MzI=", "number": 401, "title": "Ubilinux Install Problem", "user": {"login": "jmwright", "id": 1015439, "node_id": "MDQ6VXNlcjEwMTU0Mzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1015439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmwright", "html_url": "https://github.com/jmwright", "followers_url": "https://api.github.com/users/jmwright/followers", "following_url": "https://api.github.com/users/jmwright/following{/other_user}", "gists_url": "https://api.github.com/users/jmwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmwright/subscriptions", "organizations_url": "https://api.github.com/users/jmwright/orgs", "repos_url": "https://api.github.com/users/jmwright/repos", "events_url": "https://api.github.com/users/jmwright/events{/privacy}", "received_events_url": "https://api.github.com/users/jmwright/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-04T14:37:48Z", "updated_at": "2017-04-04T15:17:53Z", "closed_at": "2017-04-04T15:17:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm running Ubilinux (Debian) 150309 on an Intel Edison using pip installed via apt-get. Here's my pip version info:\r\n\r\n```\r\n$ pip --version\r\npip 1.1 from /usr/lib/python2.7/dist-packages (python 2.7)\r\n```\r\n\r\nI get the following error when I try to install mock.\r\n\r\n```\r\n$ sudo pip install mock\r\nsudo: unable to resolve host ubilinux\r\nDownloading/unpacking mock\r\n  Running setup.py egg_info for package mock\r\n    ERROR:root:Error parsing\r\n    Traceback (most recent call last):\r\n      File \"/home/edison/kalliope/build/mock/pbr-2.0.0-py2.7.egg/pbr/core.py\", line 111, in pbr\r\n        attrs = util.cfg_to_args(path, dist.script_args)\r\n      File \"/home/edison/kalliope/build/mock/pbr-2.0.0-py2.7.egg/pbr/util.py\", line 251, in cfg_to_args\r\n        kwargs = setup_cfg_to_setup_kwargs(config, script_args)\r\n      File \"/home/edison/kalliope/build/mock/pbr-2.0.0-py2.7.egg/pbr/util.py\", line 434, in setup_cfg_to_setup_kwargs\r\n        if pkg_resources.evaluate_marker('(%s)' % env_marker):\r\n    AttributeError: 'module' object has no attribute 'evaluate_marker'\r\n    error in setup command: Error parsing /home/edison/kalliope/build/mock/setup.cfg: AttributeError: 'module' object has no attribute 'evaluate_marker'\r\n    Complete output from command python setup.py egg_info:\r\n    ERROR:root:Error parsing\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/edison/kalliope/build/mock/pbr-2.0.0-py2.7.egg/pbr/core.py\", line 111, in pbr\r\n\r\n    attrs = util.cfg_to_args(path, dist.script_args)\r\n\r\n  File \"/home/edison/kalliope/build/mock/pbr-2.0.0-py2.7.egg/pbr/util.py\", line 251, in cfg_to_args\r\n\r\n    kwargs = setup_cfg_to_setup_kwargs(config, script_args)\r\n\r\n  File \"/home/edison/kalliope/build/mock/pbr-2.0.0-py2.7.egg/pbr/util.py\", line 434, in setup_cfg_to_setup_kwargs\r\n\r\n    if pkg_resources.evaluate_marker('(%s)' % env_marker):\r\n\r\nAttributeError: 'module' object has no attribute 'evaluate_marker'\r\n\r\nerror in setup command: Error parsing /home/edison/kalliope/build/mock/setup.cfg: AttributeError: 'module' object has no attribute 'evaluate_marker'\r\n\r\n----------------------------------------\r\nCommand python setup.py egg_info failed with error code 1 in /home/edison/kalliope/build/mock\r\nStoring complete log in /root/.pip/pip.log\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/400", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/400/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/400/events", "html_url": "https://github.com/testing-cabal/mock/issues/400", "id": 215662962, "node_id": "MDU6SXNzdWUyMTU2NjI5NjI=", "number": 400, "title": "mock instance", "user": {"login": "AHLinJie", "id": 10792685, "node_id": "MDQ6VXNlcjEwNzkyNjg1", "avatar_url": "https://avatars3.githubusercontent.com/u/10792685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AHLinJie", "html_url": "https://github.com/AHLinJie", "followers_url": "https://api.github.com/users/AHLinJie/followers", "following_url": "https://api.github.com/users/AHLinJie/following{/other_user}", "gists_url": "https://api.github.com/users/AHLinJie/gists{/gist_id}", "starred_url": "https://api.github.com/users/AHLinJie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AHLinJie/subscriptions", "organizations_url": "https://api.github.com/users/AHLinJie/orgs", "repos_url": "https://api.github.com/users/AHLinJie/repos", "events_url": "https://api.github.com/users/AHLinJie/events{/privacy}", "received_events_url": "https://api.github.com/users/AHLinJie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-21T08:35:09Z", "updated_at": "2018-11-30T07:22:09Z", "closed_at": "2018-11-30T07:22:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "## a.py\r\n```\r\nimport datetime\r\n\r\ndef get_today():\r\n    today = datetime.date.today()\r\n    print today, type(today), type(datetime.date)\r\n    print '===>', isinstance(today, datetime.date)  # TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types\r\n    return today\r\n```\r\n## test_a.py\r\n```\r\nfrom __future__ import absolute_import\r\nimport unittest\r\nfrom mock import patch\r\nimport datetime\r\nfrom datetime import date\r\nfrom a import get_today\r\n\r\n\r\nclass TestDate(unittest.TestCase):\r\n    def test_get_today(self):\r\n        with patch('datetime.date') as mock_date:\r\n            mock_date.today.return_value = date(2010, 10, 8)\r\n            mock_date.side_effect = lambda *args, **kw: date(*args, **kw)\r\n            assert datetime.date.today() == get_today()\r\n\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n```\r\n\r\n## problem\r\nthe dependence package has isinstance judgement that will be raise \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/399", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/399/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/399/events", "html_url": "https://github.com/testing-cabal/mock/issues/399", "id": 215649213, "node_id": "MDU6SXNzdWUyMTU2NDkyMTM=", "number": 399, "title": "how to mock datetime", "user": {"login": "AHLinJie", "id": 10792685, "node_id": "MDQ6VXNlcjEwNzkyNjg1", "avatar_url": "https://avatars3.githubusercontent.com/u/10792685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AHLinJie", "html_url": "https://github.com/AHLinJie", "followers_url": "https://api.github.com/users/AHLinJie/followers", "following_url": "https://api.github.com/users/AHLinJie/following{/other_user}", "gists_url": "https://api.github.com/users/AHLinJie/gists{/gist_id}", "starred_url": "https://api.github.com/users/AHLinJie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AHLinJie/subscriptions", "organizations_url": "https://api.github.com/users/AHLinJie/orgs", "repos_url": "https://api.github.com/users/AHLinJie/repos", "events_url": "https://api.github.com/users/AHLinJie/events{/privacy}", "received_events_url": "https://api.github.com/users/AHLinJie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-03-21T07:24:20Z", "updated_at": "2017-03-21T08:35:50Z", "closed_at": "2017-03-21T08:35:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "##  a.py\r\n```\r\nimport datetime\r\ndef get_today():\r\n    return  datetime.date.today()\r\n```\r\n\r\n## test_day.py\r\n```\r\ndef test_get_today():\r\n    pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/398", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/398/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/398/events", "html_url": "https://github.com/testing-cabal/mock/issues/398", "id": 215479848, "node_id": "MDU6SXNzdWUyMTU0Nzk4NDg=", "number": 398, "title": "autospecced mock on a function doesn't have assert_called_once/assert_not_called", "user": {"login": "2uasimojo", "id": 9142716, "node_id": "MDQ6VXNlcjkxNDI3MTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9142716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/2uasimojo", "html_url": "https://github.com/2uasimojo", "followers_url": "https://api.github.com/users/2uasimojo/followers", "following_url": "https://api.github.com/users/2uasimojo/following{/other_user}", "gists_url": "https://api.github.com/users/2uasimojo/gists{/gist_id}", "starred_url": "https://api.github.com/users/2uasimojo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/2uasimojo/subscriptions", "organizations_url": "https://api.github.com/users/2uasimojo/orgs", "repos_url": "https://api.github.com/users/2uasimojo/repos", "events_url": "https://api.github.com/users/2uasimojo/events{/privacy}", "received_events_url": "https://api.github.com/users/2uasimojo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-03-20T16:36:39Z", "updated_at": "2018-11-29T08:09:19Z", "closed_at": "2018-11-29T08:09:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I mock a class with an autospec, it has the assert_called_once and assert_not_called methods.\r\n\r\nBut when I mock a function or a method, it doesn't.\r\n\r\nExample:\r\n\r\n<pre>\r\n#!/usr/bin/python\r\n\r\nimport mock\r\nimport pbr\r\n\r\nprint('mock version ' + str(pbr.version.VersionInfo('mock')))\r\n\r\ndef inspect_mock(title, the_mock):\r\n    print(title)\r\n    for p in ('assert_not_called', 'assert_called_once'):\r\n        print(\"\\t%s: %s\" % (p, hasattr(the_mock, p)))\r\n    print\r\n\r\ndef foo():\r\n    pass\r\n\r\nclass Bar(object):\r\n    def baz(self):\r\n        pass\r\n\r\n@mock.patch('__main__.foo', autospec=True)\r\ndef function_decorator(the_mock):\r\n    inspect_mock(\"function decorated\", the_mock)\r\n\r\n@mock.patch('__main__.Bar', autospec=True)\r\ndef class_decorator(the_mock):\r\n    inspect_mock(\"class decorated\", the_mock)\r\n\r\n@mock.patch('__main__.Bar.baz', autospec=True)\r\ndef method_decorator(the_mock):\r\n    inspect_mock(\"method decorated\", the_mock)\r\n\r\nfunction_decorator()\r\nclass_decorator()\r\nmethod_decorator()\r\n\r\ninspect_mock(\"function inline mock.patch\", mock.patch('__main__.foo', autospec=True).start())\r\nm = mock.patch('__main__.Bar', autospec=True)\r\ninspect_mock(\"class inline mock.patch\", m.start())\r\nm.stop()\r\nm = mock.patch('__main__.Bar.baz', autospec=True)\r\ninspect_mock(\"method inline mock.patch\", m.start())\r\nm.stop()\r\n\r\ninspect_mock(\"function create_autospec\", mock.create_autospec(foo))\r\ninspect_mock(\"class create_autospec\", mock.create_autospec(Bar))\r\ninspect_mock(\"class method create_autospec\", mock.create_autospec(Bar.baz))\r\ninspect_mock(\"instance create_autospec\", mock.create_autospec(Bar()))\r\ninspect_mock(\"instance method create_autospec\", mock.create_autospec(Bar().baz))\r\n</pre>\r\n\r\nProduces output;\r\n<pre>\r\nmock version 2.0.0\r\nfunction decorated\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n\r\nclass decorated\r\n        assert_not_called: True\r\n        assert_called_once: True\r\n\r\nmethod decorated\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n\r\nfunction inline mock.patch\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n\r\nclass inline mock.patch\r\n        assert_not_called: True\r\n        assert_called_once: True\r\n\r\nmethod inline mock.patch\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n\r\nfunction create_autospec\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n\r\nclass create_autospec\r\n        assert_not_called: True\r\n        assert_called_once: True\r\n\r\nclass method create_autospec\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n\r\ninstance create_autospec\r\n        assert_not_called: True\r\n        assert_called_once: True\r\n\r\ninstance method create_autospec\r\n        assert_not_called: False\r\n        assert_called_once: False\r\n</pre>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/396", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/396/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/396/events", "html_url": "https://github.com/testing-cabal/mock/issues/396", "id": 215379619, "node_id": "MDU6SXNzdWUyMTUzNzk2MTk=", "number": 396, "title": "mock.patch does not consume self / cls arguments", "user": {"login": "claudiubelu", "id": 1552519, "node_id": "MDQ6VXNlcjE1NTI1MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1552519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudiubelu", "html_url": "https://github.com/claudiubelu", "followers_url": "https://api.github.com/users/claudiubelu/followers", "following_url": "https://api.github.com/users/claudiubelu/following{/other_user}", "gists_url": "https://api.github.com/users/claudiubelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudiubelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudiubelu/subscriptions", "organizations_url": "https://api.github.com/users/claudiubelu/orgs", "repos_url": "https://api.github.com/users/claudiubelu/repos", "events_url": "https://api.github.com/users/claudiubelu/events{/privacy}", "received_events_url": "https://api.github.com/users/claudiubelu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-20T10:30:34Z", "updated_at": "2020-02-26T14:06:23Z", "closed_at": "2018-11-30T08:11:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, the autospec=True argument can be passed to mock.patch, but when trying to make assertions on the call and its arguments, it can fail, as it expects an instance / class instance reference as the first argument (self / cls arguments are not consumed when autospec-ing).\r\n\r\nSteps to reproduce: \r\n\r\n    >>> import mock\r\n    >>> from mock.tests import testmock\r\n    >>>\r\n    >>> with mock.patch.object(testmock.Something, 'meth', autospec=True):\r\n    ...     smth = testmock.Something()\r\n    ...     smth.meth(mock.sentinel.a, mock.sentinel.b, mock.sentinel.c, mock.sentinel.d)\r\n    ...     smth.meth.assert_called_once_with(mock.sentinel.a, mock.sentinel.b, mock.sentinel.c, mock.sentinel.d)\r\n    ...\r\n    <MagicMock name='meth()' id='139792133225424'>\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 4, in <module>\r\n      File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 318, in assert_called_once_with\r\n        return mock.assert_called_once_with(*args, **kwargs)\r\n      File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 948, in assert_called_once_with\r\n        return self.assert_called_with(*args, **kwargs)\r\n      File \"/usr/local/lib/python2.7/dist-packages/mock/mock.py\", line 937, in assert_called_with\r\n        six.raise_from(AssertionError(_error_message(cause)), cause)\r\n      File \"/usr/local/lib/python2.7/dist-packages/six.py\", line 718, in raise_from\r\n        raise value\r\n    AssertionError: Expected call: meth(sentinel.a, sentinel.b, sentinel.c, sentinel.d)\r\n    Actual call: meth(<mock.tests.testmock.Something object at 0x7f23e456dcd0>, sentinel.a, sentinel.b, sentinel.c, sentinel.d)\r\n\r\nExpected result: no AssertionError.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/393", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/393/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/393/events", "html_url": "https://github.com/testing-cabal/mock/issues/393", "id": 214506511, "node_id": "MDU6SXNzdWUyMTQ1MDY1MTE=", "number": 393, "title": "Mock with spec object does not ensure method call signatures", "user": {"login": "claudiubelu", "id": 1552519, "node_id": "MDQ6VXNlcjE1NTI1MTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1552519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claudiubelu", "html_url": "https://github.com/claudiubelu", "followers_url": "https://api.github.com/users/claudiubelu/followers", "following_url": "https://api.github.com/users/claudiubelu/following{/other_user}", "gists_url": "https://api.github.com/users/claudiubelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/claudiubelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claudiubelu/subscriptions", "organizations_url": "https://api.github.com/users/claudiubelu/orgs", "repos_url": "https://api.github.com/users/claudiubelu/repos", "events_url": "https://api.github.com/users/claudiubelu/events{/privacy}", "received_events_url": "https://api.github.com/users/claudiubelu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-15T19:52:37Z", "updated_at": "2018-11-30T08:11:50Z", "closed_at": "2018-11-30T08:11:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Mock can accept a spec object / class as argument, making sure that accessing attributes that do not exist in the spec will cause an AttributeError to be raised, but there is no guarantee that the spec's methods signatures are respected in any way. This creates the possibility to have faulty code with passing unittests and assertions.\r\n\r\nSteps to reproduce:\r\n\r\n    >>> import mock\r\n    >>> from mock.tests import testmock\r\n    >>> m = mock.Mock(spec=testmock.Something)\r\n    >>> m.meth()\r\n    <Mock name='mock.meth()' id='140533095850448'>\r\n    >>> m.meth.assert_called_once_with()\r\n    >>> m.smeth()\r\n    <Mock name='mock.smeth()' id='140533095942608'>\r\n    >>> m.smeth.assert_called_once_with()\r\n\r\nExpected behaviour: It should have raised a TypeError, since the method signature is: def meth(self, a, b, c, d=None):\r\n\r\nActual behaviour: No error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/392", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/392/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/392/events", "html_url": "https://github.com/testing-cabal/mock/issues/392", "id": 208184151, "node_id": "MDU6SXNzdWUyMDgxODQxNTE=", "number": 392, "title": "Offline mock install fails because of pbr>1.3", "user": {"login": "xiapoy", "id": 12005605, "node_id": "MDQ6VXNlcjEyMDA1NjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/12005605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiapoy", "html_url": "https://github.com/xiapoy", "followers_url": "https://api.github.com/users/xiapoy/followers", "following_url": "https://api.github.com/users/xiapoy/following{/other_user}", "gists_url": "https://api.github.com/users/xiapoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiapoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiapoy/subscriptions", "organizations_url": "https://api.github.com/users/xiapoy/orgs", "repos_url": "https://api.github.com/users/xiapoy/repos", "events_url": "https://api.github.com/users/xiapoy/events{/privacy}", "received_events_url": "https://api.github.com/users/xiapoy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-16T17:04:01Z", "updated_at": "2017-02-26T14:15:22Z", "closed_at": "2017-02-26T14:15:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI want to install mock offline. The `setup.py` file says I need to install `pbr>=1.3` first:\r\n\r\n```\r\n#!/usr/bin/env python\r\nimport setuptools\r\n\r\nsetuptools.setup(\r\n    setup_requires=['pbr>=1.3', 'setuptools>=17.1'],\r\npbr=True)\r\n```\r\nI downloaded `pbr` versions from pypi (https://pypi.python.org/pypi/pbr/1.10.0 and https://pypi.python.org/pypi/pbr/1.3.0), but it is not version 1.3, so when I tried the installation, I got the following error:\r\n\r\n```\r\nProcessing ./mock-2.0.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Download error on https://pypi.python.org/simple/pbr/: [Errno -2] Name or service not known -- Some packages may not be found!\r\n    Couldn't find index page for 'pbr' (maybe misspelled?)\r\n    Download error on https://pypi.python.org/simple/: [Errno -2] Name or service not known -- Some packages may not be found!\r\n    No local packages or working download links found for pbr>=1.3\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-NtkJcQ-build/setup.py\", line 6, in <module>\r\n        pbr=True)\r\n      File \"/opt/conda/envs/python2/lib/python2.7/distutils/core.py\", line 111, in setup\r\n        _setup_distribution = dist = klass(attrs)\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/setuptools/dist.py\", line 317, in __init__\r\n        self.fetch_build_eggs(attrs['setup_requires'])\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/setuptools/dist.py\", line 372, in fetch_build_eggs\r\n        replace_conflicting=True,\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 846, in resolve\r\n        dist = best[req.key] = env.best_match(req, ws, installer)\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 1118, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/pkg_resources/__init__.py\", line 1130, in obtain\r\n        return installer(requirement)\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/setuptools/dist.py\", line 440, in fetch_build_egg\r\n        return cmd.easy_install(req)\r\n      File \"/opt/conda/envs/python2/lib/python2.7/site-packages/setuptools/command/easy_install.py\", line 668, in easy_install\r\n        raise DistutilsError(msg)\r\n    distutils.errors.DistutilsError: Could not find suitable distribution for Requirement.parse('pbr>=1.3')\r\n```\r\nHow can I solve this issue? Any help is appreciated... Thanks! \ud83d\ude03 ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/391", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/391/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/391/events", "html_url": "https://github.com/testing-cabal/mock/issues/391", "id": 205200175, "node_id": "MDU6SXNzdWUyMDUyMDAxNzU=", "number": 391, "title": "Problems to use with 'nosetests'", "user": {"login": "guilhermereis-luizalabs", "id": 25100152, "node_id": "MDQ6VXNlcjI1MTAwMTUy", "avatar_url": "https://avatars0.githubusercontent.com/u/25100152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guilhermereis-luizalabs", "html_url": "https://github.com/guilhermereis-luizalabs", "followers_url": "https://api.github.com/users/guilhermereis-luizalabs/followers", "following_url": "https://api.github.com/users/guilhermereis-luizalabs/following{/other_user}", "gists_url": "https://api.github.com/users/guilhermereis-luizalabs/gists{/gist_id}", "starred_url": "https://api.github.com/users/guilhermereis-luizalabs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guilhermereis-luizalabs/subscriptions", "organizations_url": "https://api.github.com/users/guilhermereis-luizalabs/orgs", "repos_url": "https://api.github.com/users/guilhermereis-luizalabs/repos", "events_url": "https://api.github.com/users/guilhermereis-luizalabs/events{/privacy}", "received_events_url": "https://api.github.com/users/guilhermereis-luizalabs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 237349293, "node_id": "MDU6TGFiZWwyMzczNDkyOTM=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/incomplete", "name": "incomplete", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-03T16:14:01Z", "updated_at": "2018-11-30T08:12:10Z", "closed_at": "2018-11-30T08:12:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I had trouble running the tests with lib nose (http://nose.readthedocs.io/en/latest/). So I added the **appdirs** and **packaging** libs in requiremens.txt\r\n\r\nhttps://github.com/guilhermereis-luizalabs/mock/blob/master/requirements.txt\r\n\r\nWhat do you think about this? Did this happen to me?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/390", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/390/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/390/events", "html_url": "https://github.com/testing-cabal/mock/issues/390", "id": 204542044, "node_id": "MDU6SXNzdWUyMDQ1NDIwNDQ=", "number": 390, "title": "support for \"mock.call(a=1) in mock.call(a=1, b=1)\"", "user": {"login": "amarao", "id": 652496, "node_id": "MDQ6VXNlcjY1MjQ5Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/652496?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amarao", "html_url": "https://github.com/amarao", "followers_url": "https://api.github.com/users/amarao/followers", "following_url": "https://api.github.com/users/amarao/following{/other_user}", "gists_url": "https://api.github.com/users/amarao/gists{/gist_id}", "starred_url": "https://api.github.com/users/amarao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amarao/subscriptions", "organizations_url": "https://api.github.com/users/amarao/orgs", "repos_url": "https://api.github.com/users/amarao/repos", "events_url": "https://api.github.com/users/amarao/events{/privacy}", "received_events_url": "https://api.github.com/users/amarao/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-01T10:08:14Z", "updated_at": "2018-11-30T08:15:11Z", "closed_at": "2018-11-30T08:15:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI think this is very idiomatic:\r\n\r\n    m=mock.MagicMock()\r\n    m(a=1,b=2)\r\n    mock.call(a=1) in m.call_args\r\n\r\nUnfortunately now it returns 'False'. I think 'call_args' and 'call' should support proper `__contains__` method for such case.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/388", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/388/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/388/events", "html_url": "https://github.com/testing-cabal/mock/issues/388", "id": 196464838, "node_id": "MDU6SXNzdWUxOTY0NjQ4Mzg=", "number": 388, "title": "mock.patch.object return_value works unexpected result", "user": {"login": "khorolets", "id": 3235740, "node_id": "MDQ6VXNlcjMyMzU3NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3235740?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khorolets", "html_url": "https://github.com/khorolets", "followers_url": "https://api.github.com/users/khorolets/followers", "following_url": "https://api.github.com/users/khorolets/following{/other_user}", "gists_url": "https://api.github.com/users/khorolets/gists{/gist_id}", "starred_url": "https://api.github.com/users/khorolets/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khorolets/subscriptions", "organizations_url": "https://api.github.com/users/khorolets/orgs", "repos_url": "https://api.github.com/users/khorolets/repos", "events_url": "https://api.github.com/users/khorolets/events{/privacy}", "received_events_url": "https://api.github.com/users/khorolets/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 237349293, "node_id": "MDU6TGFiZWwyMzczNDkyOTM=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/incomplete", "name": "incomplete", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-19T16:50:48Z", "updated_at": "2017-03-09T10:24:33Z", "closed_at": "2017-03-09T10:24:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi! First of all thank for your work, it is great!\r\n\r\nI am not sure is this an issue or a question, anyway, I would be glad to hear something from you.\r\n\r\nI have a class with method `get_file` which is obviously getting a file. I need to mock it up, I'm doing:\r\n\r\n```python\r\n@mock.patch.object(seaweedfs, 'get_file')\r\ndef test_data_transformation_export_to_pfa_authorized(\r\n        mock_get_file,\r\n    ):\r\n    mock_file_exists.return_value = '{\"example\": \"json\"}'\r\n   ...\r\n```\r\n\r\nI've skipped details it is not important\r\n\r\nThen I have some code, where I use that method.\r\n\r\n```python\r\n...\r\nmodel = json.loads(seaweedfs.get_file(file_id))  # I am expecting '{\"example\": \"json\"}' as the result\r\n...\r\n```\r\n\r\nBut I'm getting the error:\r\n\r\n```\r\nTypeError: the JSON object must be str, not 'bool'\r\n```\r\n\r\nDebugger says that the result of `get_file` is `True`\r\n\r\nCan you help me to understand is this a bug or I'm using it wrong?\r\n\r\nThank you!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/387", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/387/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/387/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/387/events", "html_url": "https://github.com/testing-cabal/mock/issues/387", "id": 195687479, "node_id": "MDU6SXNzdWUxOTU2ODc0Nzk=", "number": 387, "title": "RTFD documentation still says 1.0.1, not 2.0", "user": {"login": "georgevreilly", "id": 34297, "node_id": "MDQ6VXNlcjM0Mjk3", "avatar_url": "https://avatars0.githubusercontent.com/u/34297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/georgevreilly", "html_url": "https://github.com/georgevreilly", "followers_url": "https://api.github.com/users/georgevreilly/followers", "following_url": "https://api.github.com/users/georgevreilly/following{/other_user}", "gists_url": "https://api.github.com/users/georgevreilly/gists{/gist_id}", "starred_url": "https://api.github.com/users/georgevreilly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/georgevreilly/subscriptions", "organizations_url": "https://api.github.com/users/georgevreilly/orgs", "repos_url": "https://api.github.com/users/georgevreilly/repos", "events_url": "https://api.github.com/users/georgevreilly/events{/privacy}", "received_events_url": "https://api.github.com/users/georgevreilly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 202498132, "node_id": "MDU6TGFiZWwyMDI0OTgxMzI=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-15T00:50:04Z", "updated_at": "2018-11-30T08:19:10Z", "closed_at": "2018-11-30T08:19:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "At the top of the page at https://mock.readthedocs.io/en/latest/, it says `Mock 1.0.1 documentation`, then `Version: 1.0.1`, and later `The current version is 1.0.1`. It also says in the Changes section of the TOC, `2.0.0`, `1.3.0`, etc, so clearly the documentation has kinda, sorta been updated since 1.0.1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/386", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/386/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/386/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/386/events", "html_url": "https://github.com/testing-cabal/mock/issues/386", "id": 195539667, "node_id": "MDU6SXNzdWUxOTU1Mzk2Njc=", "number": 386, "title": "`sentinel` does not work with `multiprocessing.Queue`", "user": {"login": "Bernhard10", "id": 662579, "node_id": "MDQ6VXNlcjY2MjU3OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/662579?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bernhard10", "html_url": "https://github.com/Bernhard10", "followers_url": "https://api.github.com/users/Bernhard10/followers", "following_url": "https://api.github.com/users/Bernhard10/following{/other_user}", "gists_url": "https://api.github.com/users/Bernhard10/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bernhard10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bernhard10/subscriptions", "organizations_url": "https://api.github.com/users/Bernhard10/orgs", "repos_url": "https://api.github.com/users/Bernhard10/repos", "events_url": "https://api.github.com/users/Bernhard10/events{/privacy}", "received_events_url": "https://api.github.com/users/Bernhard10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-14T14:07:49Z", "updated_at": "2016-12-14T15:08:05Z", "closed_at": "2016-12-14T15:08:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if mock can/ should do anything about that, but multiprocess.Queue changes the id of the sentinel (even if used in a single-process test).\r\n\r\nExample:\r\n\r\n```python\r\n\r\n    #! python2.7\r\n    #from __future__ import print_function\r\n    from mock import sentinel\r\n    from multiprocessing import Queue\r\n    q = Queue()\r\n    s = sentinel.some_name\r\n    print(\"The same\", hex(id(s)))\r\n    q.put(s)\r\n    s2 = q.get()\r\n    print(\"The same\", hex(id(s)))\r\n    print(\"The same\", hex(id(sentinel.some_name)))\r\n    print(\"This is different\", hex(id(s2)))\r\n    assert s == sentinel.some_name\r\n    assert s == s2 #FAILS.\r\n```\r\n\r\nA workaround is comparing `s.name`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/385", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/385/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/385/events", "html_url": "https://github.com/testing-cabal/mock/issues/385", "id": 190681514, "node_id": "MDU6SXNzdWUxOTA2ODE1MTQ=", "number": 385, "title": "Use of pbr breaks cx_freeze applications", "user": {"login": "fabioz", "id": 117621, "node_id": "MDQ6VXNlcjExNzYyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/117621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabioz", "html_url": "https://github.com/fabioz", "followers_url": "https://api.github.com/users/fabioz/followers", "following_url": "https://api.github.com/users/fabioz/following{/other_user}", "gists_url": "https://api.github.com/users/fabioz/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabioz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabioz/subscriptions", "organizations_url": "https://api.github.com/users/fabioz/orgs", "repos_url": "https://api.github.com/users/fabioz/repos", "events_url": "https://api.github.com/users/fabioz/events{/privacy}", "received_events_url": "https://api.github.com/users/fabioz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2016-11-21T10:52:30Z", "updated_at": "2017-03-04T07:41:56Z", "closed_at": "2017-03-04T07:41:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "The given code:\r\n\r\n```\r\n_v = VersionInfo('mock').semantic_version()\r\n__version__ = _v.release_string()\r\nversion_info = _v.version_tuple()\r\n```\r\n\r\nis not really friendly to frozen applications... also, I'd say, it adds a lot of logic under the hood to just to the version (besides adding having a runtime requirement to setuptools, which is usually just a setup time requirement), so, I'd like to check how feasible it'd be to revert it to just coding the `__version__` and version_info directly into the source code -- also, I'd say it makes it easier to know the current version by looking at the source code and makes the code clearer ;)\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/384", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/384/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/384/events", "html_url": "https://github.com/testing-cabal/mock/issues/384", "id": 190379063, "node_id": "MDU6SXNzdWUxOTAzNzkwNjM=", "number": 384, "title": "Mock is equal to ANY but MagicMock is not", "user": {"login": "rafaelcaricio", "id": 107613, "node_id": "MDQ6VXNlcjEwNzYxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/107613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafaelcaricio", "html_url": "https://github.com/rafaelcaricio", "followers_url": "https://api.github.com/users/rafaelcaricio/followers", "following_url": "https://api.github.com/users/rafaelcaricio/following{/other_user}", "gists_url": "https://api.github.com/users/rafaelcaricio/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafaelcaricio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafaelcaricio/subscriptions", "organizations_url": "https://api.github.com/users/rafaelcaricio/orgs", "repos_url": "https://api.github.com/users/rafaelcaricio/repos", "events_url": "https://api.github.com/users/rafaelcaricio/events{/privacy}", "received_events_url": "https://api.github.com/users/rafaelcaricio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-18T17:40:46Z", "updated_at": "2017-10-11T12:49:17Z", "closed_at": "2017-10-11T12:49:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "The instances of `mock.Mock()` are equal to `mock.ANY`, but `mock.MagicMock()` instances are not.\r\n\r\nMinimal example:\r\n\r\nIn Python 3.5.2 (or mock 2.0.0):\r\n```python\r\n>>> from unittest import mock\r\n>>> mock.Mock() == mock.ANY\r\nTrue\r\n>>> mock.ANY == mock.Mock()\r\nTrue\r\n>>> mock.MagicMock() == mock.ANY\r\nFalse\r\n>>> mock.ANY == mock.MagicMock()\r\nTrue\r\n```\r\n\r\nI have opened an issue in the official Python tracker, but probably here is the most appropriated place to that. Please let me know if I should close it and just leave this one here.\r\n\r\nref: http://bugs.python.org/issue28735", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/383", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/383/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/383/events", "html_url": "https://github.com/testing-cabal/mock/issues/383", "id": 184342766, "node_id": "MDU6SXNzdWUxODQzNDI3NjY=", "number": 383, "title": "mock setup.py fails to detect incompatible setuptools fork 'distribute' and after install fails with \"Versioning for this project requires...\"", "user": {"login": "radektheloner", "id": 7268060, "node_id": "MDQ6VXNlcjcyNjgwNjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/7268060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/radektheloner", "html_url": "https://github.com/radektheloner", "followers_url": "https://api.github.com/users/radektheloner/followers", "following_url": "https://api.github.com/users/radektheloner/following{/other_user}", "gists_url": "https://api.github.com/users/radektheloner/gists{/gist_id}", "starred_url": "https://api.github.com/users/radektheloner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/radektheloner/subscriptions", "organizations_url": "https://api.github.com/users/radektheloner/orgs", "repos_url": "https://api.github.com/users/radektheloner/repos", "events_url": "https://api.github.com/users/radektheloner/events{/privacy}", "received_events_url": "https://api.github.com/users/radektheloner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-10-20T21:16:00Z", "updated_at": "2018-11-30T08:20:02Z", "closed_at": "2018-11-30T08:20:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Reproducer:\n1. run a system with virtualenv 1.7.1.2 (in my case, a [Vagrant](https://www.vagrantup.com/) box based on [debian/wheezy64](https://atlas.hashicorp.com/debian/boxes/wheezy64))\n2. create a Python 2.7 virtual environment (`virtualenv venv`)\n3. activate the environment (`source venv/bin/activate`)\n4. upgrade pip (`pip install --upgrade pip`)\n5. follow the mock's installation instructions (I did not find any, thus `pip install mock`)\n6. import mock (`python -c \"import mock\"`)\n# Actual behavior:\n\nAn `Exception` with the following traceback:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/mock/__init__.py\", line 2, in <module>\n    import mock.mock as _mock\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/mock/mock.py\", line 71, in <module>\n    _v = VersionInfo('mock').semantic_version()\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/pbr/version.py\", line 460, in semantic_version\n    self._semantic = self._get_version_from_pkg_resources()\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/pbr/version.py\", line 447, in _get_version_from_pkg_resources\n    result_string = packaging.get_version(self.package)\n  File \"/home/vagrant/venv/local/lib/python2.7/site-packages/pbr/packaging.py\", line 725, in get_version\n    raise Exception(\"Versioning for this project requires either an sdist\"\nException: Versioning for this project requires either an sdist tarball, or access to an upstream git repository. Are you sure that git is installed\n```\n# Expected behavior:\n\nmock can be imported\n# Affected versions:\n- mock 2.0.0\n- pbr 1.10.0\n- pip 8.1.2\n- distribute 0.6.24\n- Python 2.7\n# Additional information\n\n[An upgrade](https://github.com/testing-cabal/mock/issues/314#issuecomment-147212312) of setuptools (`pip install --upgrade pip`) (to 28.6.1) _after_ the installation of mock does not fix the issue. An upgrade _before_ the installation helps.\nNormally, I don't use these old libraries but I am forced to be compatible with Python 2.6 and Debian Wheezy seems to be the last Debian release that has Python 2.6 in its official repositories. Since I use that system only for testing and not for development, the provisioning of the system is automated (via Vagrant). Thus the steps above. Normally, I wouldn't even upgrade pip but I could not install mock without that.\nWhat I want to say is that I understand that you expect users to use newer versions. But in such automated cases, it might not be the case. If you (or pbr - I don't know which package caused that) could enforce newer setuptools, it would really help. If not, at least a note in installation instructions would be nice.\nMaybe this is a duplicate of https://github.com/testing-cabal/mock/issues/314. Maybe this is even a duplicate of https://bugs.launchpad.net/pbr/+bug/1505007. However, since the pbr bug is open for 1 year already without any response, it might be reasonable to implement a workaround in mock in the meantime.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/382", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/382/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/382/events", "html_url": "https://github.com/testing-cabal/mock/issues/382", "id": 179765749, "node_id": "MDU6SXNzdWUxNzk3NjU3NDk=", "number": 382, "title": "mock_open()().readline() fails at EOF", "user": {"login": "kierun", "id": 3079575, "node_id": "MDQ6VXNlcjMwNzk1NzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3079575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kierun", "html_url": "https://github.com/kierun", "followers_url": "https://api.github.com/users/kierun/followers", "following_url": "https://api.github.com/users/kierun/following{/other_user}", "gists_url": "https://api.github.com/users/kierun/gists{/gist_id}", "starred_url": "https://api.github.com/users/kierun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kierun/subscriptions", "organizations_url": "https://api.github.com/users/kierun/orgs", "repos_url": "https://api.github.com/users/kierun/repos", "events_url": "https://api.github.com/users/kierun/events{/privacy}", "received_events_url": "https://api.github.com/users/kierun/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 586310799, "node_id": "MDU6TGFiZWw1ODYzMTA3OTk=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/fixed-upstream", "name": "fixed-upstream", "color": "fbca04", "default": false, "description": null}, {"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-09-28T12:59:59Z", "updated_at": "2019-04-29T07:13:10Z", "closed_at": "2019-04-27T14:10:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using mock (2.0.0), I fell foul of [issue 26907](http://bugs.python.org/issue26807).  The same fix applied by hand fixes it.\n\n```\nIn [1]: import mock\n\nIn [2]: o = mock.mock_open(read_data=\"fred\")\n\nIn [3]: f = o()\n\nIn [4]: f.readline()\nOut[4]: 'fred'\n\nIn [5]: f.readline()\n---------------------------------------------------------------------------\nStopIteration                             Traceback (most recent call last)\n<ipython-input-5-c4ba08551b5f> in <module>()\n----> 1 f.readline()\n\n/home/usr/.virtualenvs/dtree/lib/python2.7/site-packages/mock/mock.py in __call__(_mock_self, *args, **kwargs)\n   1060         # in the signature\n   1061         _mock_self._mock_check_sig(*args, **kwargs)\n-> 1062         return _mock_self._mock_call(*args, **kwargs)\n   1063\n   1064\n\n/home/usr/.virtualenvs/dtree/lib/python2.7/site-packages/mock/mock.py in _mock_call(_mock_self, *args, **kwargs)\n   1119\n   1120             if not _callable(effect):\n-> 1121                 result = next(effect)\n   1122                 if _is_exception(result):\n   1123                     raise result\n\n/home//.virtualenvs/dtree/lib/python2.7/site-packages/mock/mock.py in next(obj, _next)\n    107         if getattr(obj, '__next__', None):\n    108             return obj.__next__()\n--> 109         return _next(obj)\n    110\n    111     del _next\n\nStopIteration:\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/377", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/377/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/377/events", "html_url": "https://github.com/testing-cabal/mock/issues/377", "id": 176981167, "node_id": "MDU6SXNzdWUxNzY5ODExNjc=", "number": 377, "title": "Mock / Pbr don't play well on a VM / NFS (with a large repo)", "user": {"login": "cgons", "id": 6852911, "node_id": "MDQ6VXNlcjY4NTI5MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6852911?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgons", "html_url": "https://github.com/cgons", "followers_url": "https://api.github.com/users/cgons/followers", "following_url": "https://api.github.com/users/cgons/following{/other_user}", "gists_url": "https://api.github.com/users/cgons/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgons/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgons/subscriptions", "organizations_url": "https://api.github.com/users/cgons/orgs", "repos_url": "https://api.github.com/users/cgons/repos", "events_url": "https://api.github.com/users/cgons/events{/privacy}", "received_events_url": "https://api.github.com/users/cgons/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-14T18:17:40Z", "updated_at": "2016-09-20T08:12:36Z", "closed_at": "2016-09-19T22:11:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "As can be seen from the cProfile output below, I'm experiencing multi-second delays due to Mock's use of Pbr in tests.\n\nThis may be an issue in the way Pbr is querying repo. information - which has adverse effects for a large repo over NFS.\n\nIs this something that Mock can fix? Not sure what exactly Mock is using Pbr for.\n\n```\nWed Sep 14 13:56:09 2016    profile.prof\n\n         993424 function calls (979946 primitive calls) in 4.912 seconds\n\n   Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.004    0.004    4.913    4.913 playground.py:1(<module>)\n        1    0.003    0.003    4.870    4.870 /vdata/mcfletch-env/local/lib/python2.7/site-packages/django/__init__.py:8(setup)\n  228/141    0.107    0.000    4.509    0.032 {__import__}\n  118/112    0.000    0.000    4.472    0.040 /usr/lib/python2.7/importlib/__init__.py:20(import_module)\n        1    0.000    0.000    4.455    4.455 /vdata/mcfletch-env/local/lib/python2.7/site-packages/django/apps/registry.py:58(populate)\n       20    0.000    0.000    4.160    0.208 /vdata/mcfletch-env/local/lib/python2.7/site-packages/django/apps/config.py:77(create)\n        1    0.001    0.001    3.894    3.894 /vdata/mcfletch-env/local/lib/python2.7/site-packages/django_nose/__init__.py:2(<module>)\n        1    0.004    0.004    3.894    3.894 /vdata/mcfletch-env/local/lib/python2.7/site-packages/django_nose/runner.py:10(<module>)\n        1    0.005    0.005    3.882    3.882 /vdata/mcfletch-env/local/lib/python2.7/site-packages/django/test/__init__.py:3(<module>)\n        1    0.001    0.001    3.816    3.816 /vdata/mcfletch-env/local/lib/python2.7/site-packages/mock/__init__.py:1(<module>)\n        1    0.014    0.014    3.815    3.815 /vdata/mcfletch-env/local/lib/python2.7/site-packages/mock/mock.py:35(<module>)\n        1    0.001    0.001    3.611    3.611 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/version.py:457(semantic_version)\n        1    0.001    0.001    3.610    3.610 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/version.py:431(_get_version_from_pkg_resources)\n        1    0.000    0.000    2.690    2.690 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/packaging.py:691(get_version)\n        1    0.000    0.000    2.690    2.690 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/packaging.py:629(_get_version_from_git)\n        1    0.001    0.001    2.666    2.666 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/packaging.py:592(_get_version_from_git_target)\n        5    0.000    0.000    2.593    0.519 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/git.py:34(_run_shell_command)\n        3    0.000    0.000    2.581    0.860 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/git.py:61(_run_git_command)\n        5    0.000    0.000    2.558    0.512 /usr/lib/python2.7/subprocess.py:723(communicate)\n        5    0.002    0.000    2.558    0.512 /usr/lib/python2.7/subprocess.py:1303(_communicate)\n        5    0.114    0.023    2.553    0.511 /usr/lib/python2.7/subprocess.py:1336(_communicate_with_poll)\n    26383    2.364    0.000    2.364    0.000 {built-in method poll}\n        1    0.012    0.012    2.049    2.049 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/packaging.py:568(_get_revno_and_last_tag)\n    13186    0.010    0.000    2.036    0.000 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/git.py:198(_iter_log_inner)\n        1    0.011    0.011    0.830    0.830 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/packaging.py:19(<module>)\n        1    0.026    0.026    0.617    0.617 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/packaging.py:531(_get_increment_kwargs)\n        1    0.005    0.005    0.487    0.487 /vdata/mcfletch-env/local/lib/python2.7/site-packages/pbr/builddoc.py:17(<module>)\n        1    0.007    0.007    0.457    0.457 /vdata/mcfletch-env/local/lib/python2.7/site-packages/sphinx/application.py:12(<module>)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/374", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/374/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/374/events", "html_url": "https://github.com/testing-cabal/mock/issues/374", "id": 173069631, "node_id": "MDU6SXNzdWUxNzMwNjk2MzE=", "number": 374, "title": "How to spy/mock coroutine async/await functions?", "user": {"login": "hyzhak", "id": 184706, "node_id": "MDQ6VXNlcjE4NDcwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/184706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyzhak", "html_url": "https://github.com/hyzhak", "followers_url": "https://api.github.com/users/hyzhak/followers", "following_url": "https://api.github.com/users/hyzhak/following{/other_user}", "gists_url": "https://api.github.com/users/hyzhak/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyzhak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyzhak/subscriptions", "organizations_url": "https://api.github.com/users/hyzhak/orgs", "repos_url": "https://api.github.com/users/hyzhak/repos", "events_url": "https://api.github.com/users/hyzhak/events{/privacy}", "received_events_url": "https://api.github.com/users/hyzhak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-24T22:07:29Z", "updated_at": "2018-11-30T08:24:42Z", "closed_at": "2018-11-30T08:24:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys I'm wonder is there any way to mock and spy on coroutine async/await function? And how can I do it by this library?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/372", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/372/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/372/events", "html_url": "https://github.com/testing-cabal/mock/issues/372", "id": 169110424, "node_id": "MDU6SXNzdWUxNjkxMTA0MjQ=", "number": 372, "title": "mock.call_args possible to make into python objects?", "user": {"login": "jonathan-s", "id": 2124818, "node_id": "MDQ6VXNlcjIxMjQ4MTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/2124818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathan-s", "html_url": "https://github.com/jonathan-s", "followers_url": "https://api.github.com/users/jonathan-s/followers", "following_url": "https://api.github.com/users/jonathan-s/following{/other_user}", "gists_url": "https://api.github.com/users/jonathan-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathan-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathan-s/subscriptions", "organizations_url": "https://api.github.com/users/jonathan-s/orgs", "repos_url": "https://api.github.com/users/jonathan-s/repos", "events_url": "https://api.github.com/users/jonathan-s/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathan-s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-08-03T11:33:58Z", "updated_at": "2016-08-03T11:46:07Z", "closed_at": "2016-08-03T11:46:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever I get `call_args` from a mock object. I tend to want to check what the call args were in a unittest. Which means I end up doing something like `self.assertIn('needle', str(mock.call_args))`. It feels like it would be neater if `call_args` was a list of python objects. \n\nIt wouldn't be too difficult to recreate the standard python objects, such as `string`, `list`, `dict`. Though if one of the call_args were a user created object it would be a lot trickier to create. \n\nOr perhaps there is a better way of doing it that I'm missing?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/371", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/371/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/371/events", "html_url": "https://github.com/testing-cabal/mock/issues/371", "id": 166944983, "node_id": "MDU6SXNzdWUxNjY5NDQ5ODM=", "number": 371, "title": "Please write a prominent change log document, describing changes in each release", "user": {"login": "benf-wspdigital", "id": 19219318, "node_id": "MDQ6VXNlcjE5MjE5MzE4", "avatar_url": "https://avatars2.githubusercontent.com/u/19219318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benf-wspdigital", "html_url": "https://github.com/benf-wspdigital", "followers_url": "https://api.github.com/users/benf-wspdigital/followers", "following_url": "https://api.github.com/users/benf-wspdigital/following{/other_user}", "gists_url": "https://api.github.com/users/benf-wspdigital/gists{/gist_id}", "starred_url": "https://api.github.com/users/benf-wspdigital/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benf-wspdigital/subscriptions", "organizations_url": "https://api.github.com/users/benf-wspdigital/orgs", "repos_url": "https://api.github.com/users/benf-wspdigital/repos", "events_url": "https://api.github.com/users/benf-wspdigital/events{/privacy}", "received_events_url": "https://api.github.com/users/benf-wspdigital/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-22T00:09:20Z", "updated_at": "2016-10-19T23:07:53Z", "closed_at": "2016-10-19T10:09:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "The project has no change log document at the top level. (A GitHub home page also means there is no obvious place for a user to look for the change log.)\n\nThere is a `docs/changelog.txt` file, but it is empty. Regardless, the change log document should be at the top level IMO.\n\nThe document should describe all user-visible changes at each released version.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/370", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/370/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/370/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/370/events", "html_url": "https://github.com/testing-cabal/mock/issues/370", "id": 164309585, "node_id": "MDU6SXNzdWUxNjQzMDk1ODU=", "number": 370, "title": "mock.call.__len__() does not work", "user": {"login": "onovy", "id": 1649603, "node_id": "MDQ6VXNlcjE2NDk2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1649603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onovy", "html_url": "https://github.com/onovy", "followers_url": "https://api.github.com/users/onovy/followers", "following_url": "https://api.github.com/users/onovy/following{/other_user}", "gists_url": "https://api.github.com/users/onovy/gists{/gist_id}", "starred_url": "https://api.github.com/users/onovy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onovy/subscriptions", "organizations_url": "https://api.github.com/users/onovy/orgs", "repos_url": "https://api.github.com/users/onovy/repos", "events_url": "https://api.github.com/users/onovy/events{/privacy}", "received_events_url": "https://api.github.com/users/onovy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-07T13:32:04Z", "updated_at": "2018-11-30T08:25:00Z", "closed_at": "2018-11-30T08:25:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "From: [Debian BTS](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=717192)\n\nThis is expected mock.call behaviour:\n\n```\n>>> import mock\n>>> m = mock.MagicMock()\n>>> m.foo()\n<MagicMock name='mock.foo()' id='140538066053712'>\n>>> print m.mock_calls[0] == mock.call.foo()\nTrue\n```\n\nThis is not:\n\n```\n>>> m = mock.MagicMock()\n>>> len(m)\n0\n>>> print  m.mock_calls[0] == mock.call.__len__()\nFalse\n>>> print m.mock_calls[0], mock.call.__len__()\ncall.__len__() 3\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/369", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/369/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/369/events", "html_url": "https://github.com/testing-cabal/mock/issues/369", "id": 164308166, "node_id": "MDU6SXNzdWUxNjQzMDgxNjY=", "number": 369, "title": "MagicMock does not wrap __setitem__ with wraps=dict()", "user": {"login": "onovy", "id": 1649603, "node_id": "MDQ6VXNlcjE2NDk2MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1649603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/onovy", "html_url": "https://github.com/onovy", "followers_url": "https://api.github.com/users/onovy/followers", "following_url": "https://api.github.com/users/onovy/following{/other_user}", "gists_url": "https://api.github.com/users/onovy/gists{/gist_id}", "starred_url": "https://api.github.com/users/onovy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/onovy/subscriptions", "organizations_url": "https://api.github.com/users/onovy/orgs", "repos_url": "https://api.github.com/users/onovy/repos", "events_url": "https://api.github.com/users/onovy/events{/privacy}", "received_events_url": "https://api.github.com/users/onovy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-07T13:25:32Z", "updated_at": "2018-11-30T08:25:22Z", "closed_at": "2018-11-30T08:25:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "From: [Debian BTS](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=717193)\n\n```\n>>> import mock\n>>> d = {1:2,3:4}\n>>> m = mock.MagicMock(spec_set=d.__class__, wraps=d)\n>>> print m.items()\n[(1, 2), (3, 4)]\n>>> m.update({5:6})\n>>> print m.items()\n[(1, 2), (3, 4), (5, 6)]\n```\n\nSo far so good. m behaves like d, because it wraps it.\n\nHowever:\n\n```\n>>> m[7] = 8\n>>> print m.items()\n[(1, 2), (3, 4), (5, 6)]]\n```\n\nUnfortunately, `__setitem__` is not properly mocked on wrapped dicts.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/368", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/368/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/368/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/368/events", "html_url": "https://github.com/testing-cabal/mock/issues/368", "id": 161770912, "node_id": "MDU6SXNzdWUxNjE3NzA5MTI=", "number": 368, "title": "Issue setting mock.patch return_value", "user": {"login": "NicoHinderling", "id": 9902528, "node_id": "MDQ6VXNlcjk5MDI1Mjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9902528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NicoHinderling", "html_url": "https://github.com/NicoHinderling", "followers_url": "https://api.github.com/users/NicoHinderling/followers", "following_url": "https://api.github.com/users/NicoHinderling/following{/other_user}", "gists_url": "https://api.github.com/users/NicoHinderling/gists{/gist_id}", "starred_url": "https://api.github.com/users/NicoHinderling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NicoHinderling/subscriptions", "organizations_url": "https://api.github.com/users/NicoHinderling/orgs", "repos_url": "https://api.github.com/users/NicoHinderling/repos", "events_url": "https://api.github.com/users/NicoHinderling/events{/privacy}", "received_events_url": "https://api.github.com/users/NicoHinderling/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-22T19:54:17Z", "updated_at": "2018-11-30T08:25:42Z", "closed_at": "2018-11-30T08:25:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "So I have a file \"users.py\":\n\n```\nfrom jobs.kickoff import get_users_from_shard\ndef get_users():\n    users =  get_users_from_shard(3)\n    if users is None:\n        return []\n    return users\n```\n\nand in my unittest file, I have the following:\n\n```\nfrom users import get_users\n@mock.patch('jobs.kickoff.get_users_from_shard, autospec=True, spec_set=True)\ndef test_users_shard_failure(self, mock_get_users_from_shard):\n    mock_get_users_from_shard.return_value = None\n    response = get_users()\n    assert response == []\n```\n\nThis fails as the return value for `get_users_from_shard` is not None but rather the MagicMock object. However, if I define users.py as this:\n\n```\nfrom jobs import kickoff\ndef get_users():\n    users =  kickoff.get_users_from_shard(3)\n    if users is None:\n        return []\n    return users\n```\n\nThe patch will successfully return None.\n\nI'm not sure if this is intentional for some reason, but if not, there is clearly an issue when mocking functions which are directly imported rather than their parent class and then being called `parentClass.function` even though the patch specifically covers that function.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/367", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/367/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/367/events", "html_url": "https://github.com/testing-cabal/mock/issues/367", "id": 160859583, "node_id": "MDU6SXNzdWUxNjA4NTk1ODM=", "number": 367, "title": "Module patching issue with test order on Python 2.7", "user": {"login": "lobsteropteryx", "id": 4672671, "node_id": "MDQ6VXNlcjQ2NzI2NzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4672671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lobsteropteryx", "html_url": "https://github.com/lobsteropteryx", "followers_url": "https://api.github.com/users/lobsteropteryx/followers", "following_url": "https://api.github.com/users/lobsteropteryx/following{/other_user}", "gists_url": "https://api.github.com/users/lobsteropteryx/gists{/gist_id}", "starred_url": "https://api.github.com/users/lobsteropteryx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lobsteropteryx/subscriptions", "organizations_url": "https://api.github.com/users/lobsteropteryx/orgs", "repos_url": "https://api.github.com/users/lobsteropteryx/repos", "events_url": "https://api.github.com/users/lobsteropteryx/events{/privacy}", "received_events_url": "https://api.github.com/users/lobsteropteryx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-06-17T10:35:29Z", "updated_at": "2016-06-20T00:33:44Z", "closed_at": "2016-06-20T00:33:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "If a test with a patched module is run first, then both tests pass.  If a test that uses the real module is run first, then all the patched tests will fail.  For unittest, this comes down to the name of the test classes and/or functions.  I've verified that when the patched module is loaded first, the real module is still used in unpatched tests.\n\nThe real project is here:  https://github.com/gisinc/slap/blob/1-add-sha-to-git-parameter/tests/test_git.py\n\ngit.py\n\n``` python\nfrom subprocess import check_output\n\ndef get_changed_files():\n    return check_output(['git',  'diff', '--name-only',  'HEAD~1']).splitlines()\n```\n\ntest_git.py\n\n``` python\nfrom unittest import TestCase\nfrom mock import MagicMock, patch\nfrom slap import git\n\n# This always passes\nclass TestGitFileManager(TestCase):\n\n    def test_get_args(self):\n        git.get_changed_files = MagicMock(return_value=['foo.mxd', 'bar.txt', 'baz.MXD'])\n        self.assertEqual(git.build_args(), '-i foo.mxd -i baz.MXD')\n\n\n@patch('slap.git.check_output')\n# This fails, but will pass if we rename to TestGitArguments, since this set of tests will run first\nclass TestGitZArguments(TestCase):\n\n    def test_default_revision(self, mock_check_output):\n        expected = ['git',  'diff', '--name-only',  'HEAD', 'HEAD~1']\n        git.get_changed_files()\n        mock_check_output.assert_called_once_with(expected)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/366", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/366/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/366/events", "html_url": "https://github.com/testing-cabal/mock/issues/366", "id": 160561999, "node_id": "MDU6SXNzdWUxNjA1NjE5OTk=", "number": 366, "title": "patch decorator fails silently on generators", "user": {"login": "shoshber", "id": 1402948, "node_id": "MDQ6VXNlcjE0MDI5NDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1402948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoshber", "html_url": "https://github.com/shoshber", "followers_url": "https://api.github.com/users/shoshber/followers", "following_url": "https://api.github.com/users/shoshber/following{/other_user}", "gists_url": "https://api.github.com/users/shoshber/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoshber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoshber/subscriptions", "organizations_url": "https://api.github.com/users/shoshber/orgs", "repos_url": "https://api.github.com/users/shoshber/repos", "events_url": "https://api.github.com/users/shoshber/events{/privacy}", "received_events_url": "https://api.github.com/users/shoshber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-06-16T02:00:14Z", "updated_at": "2016-06-18T03:55:16Z", "closed_at": "2016-06-17T01:39:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "(at least in my case)\n\nI committed two tests before I realized the tests were not being run: https://github.com/nipy/nipype/blob/abe7920a051f1570ccce4b71f26f50102d6e4e12/nipype/testing/tests/test_utils.py#L23\n\nI realized this afternoon, while writing some more tests, that tests with the patch decorator were all reported as \"OK\", even when I wanted them to fail. Turns out they aren't being run at all.\n\nI commented out all the `yield` statements, and the tests ran just as they should.\n\nI don't know exactly what is going on here, but might raising an error or warning be good here?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/365", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/365/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/365/events", "html_url": "https://github.com/testing-cabal/mock/issues/365", "id": 158413899, "node_id": "MDU6SXNzdWUxNTg0MTM4OTk=", "number": 365, "title": "patch interactions with \"from\" imports", "user": {"login": "clarkbreyman", "id": 1911495, "node_id": "MDQ6VXNlcjE5MTE0OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1911495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarkbreyman", "html_url": "https://github.com/clarkbreyman", "followers_url": "https://api.github.com/users/clarkbreyman/followers", "following_url": "https://api.github.com/users/clarkbreyman/following{/other_user}", "gists_url": "https://api.github.com/users/clarkbreyman/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarkbreyman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarkbreyman/subscriptions", "organizations_url": "https://api.github.com/users/clarkbreyman/orgs", "repos_url": "https://api.github.com/users/clarkbreyman/repos", "events_url": "https://api.github.com/users/clarkbreyman/events{/privacy}", "received_events_url": "https://api.github.com/users/clarkbreyman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-06-03T17:18:44Z", "updated_at": "2016-06-03T21:00:59Z", "closed_at": "2016-06-03T21:00:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Unclear if this is a code bug or a gotcha that should be documented:\n\nSince \"from\"-style imports in modules bind names on the first execution of the import, there is a subtle interaction with patching:\n\n_If a name is imported when the source is patched, the imported name will refer to the patched version even after the source is restored_\n\nTest case:\n\n``` python\n# patchbug/__init__.py\n#\n```\n\n``` python\n# patchbug/a.py\n#\nclass A(object):\n    def name(self):\n        return \"unpatched\"\n```\n\n``` python\n# patchbug/b.py\n#\nfrom patchbug.a import A\n\ndef reference():\n    return A().name()\n\n# patchbug/tests.py\n#\nimport mock\n\n\"\"\"\npatchbug.reference.UnpatchedClass is bound to the value of patchbug.source.UnpatchedClass\nat the time of the first import of patchbug.reference. If patched at that time it is not repaired.\n\"\"\"\n\ndef test_unpatched():\n    import patchbug.a\n    assert patchbug.a.A().name() == \"unpatched\"\n\n\"\"\"\nuncommenting the import causes reference.UnpatchedClass to be bound before the patch, fixing\ntest_reference and breaking test_unpatched\n\"\"\"\ndef test_import_reference():\n#    import patchbug.b\n    pass\n\ndef test_patched():\n    with mock.patch('patchbug.a.A') as P:\n        import patchbug.a, patchbug.b\n        P.return_value.name.return_value = \"patched\"\n        assert patchbug.a.A().name() == \"patched\"\n        assert patchbug.b.reference() == \"patched\"\n\ndef test_reference():\n    import patchbug.b\n    assert patchbug.b.reference() == \"unpatched\"\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/364", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/364/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/364/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/364/events", "html_url": "https://github.com/testing-cabal/mock/issues/364", "id": 157646883, "node_id": "MDU6SXNzdWUxNTc2NDY4ODM=", "number": 364, "title": "Problem with patch and new with kwargs", "user": {"login": "frank2411", "id": 3533904, "node_id": "MDQ6VXNlcjM1MzM5MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3533904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frank2411", "html_url": "https://github.com/frank2411", "followers_url": "https://api.github.com/users/frank2411/followers", "following_url": "https://api.github.com/users/frank2411/following{/other_user}", "gists_url": "https://api.github.com/users/frank2411/gists{/gist_id}", "starred_url": "https://api.github.com/users/frank2411/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frank2411/subscriptions", "organizations_url": "https://api.github.com/users/frank2411/orgs", "repos_url": "https://api.github.com/users/frank2411/repos", "events_url": "https://api.github.com/users/frank2411/events{/privacy}", "received_events_url": "https://api.github.com/users/frank2411/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-05-31T11:13:39Z", "updated_at": "2018-11-30T08:56:50Z", "closed_at": "2018-11-30T08:56:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI've got a problem, or maybe there's a reason that I can't see, while specifying, in a patch decorator, a different new class and passing kwargs to it.\n\nThat's the class:\n\nclass PlaylistSolrMock(object):\n\n```\ndef __init__(self, *args, **kwargs):\n    print kwargs.get('valid_qs')\n\ndef models(self, *args):\n    return self\n\ndef filter(self, django_id__in=[], *args, **kwargs):\n    print django_id__in\n```\n\nThis is how i use the decorator:\n\n@mock.patch('videos.models.SearchQuerySet', new=PlaylistSolrMock, valid_qs=True)\n\nIn this case i get this error:\n    - TypeError: Can't pass kwargs to a mock we aren't creating\n\nIn this other case ( if I inherit from the default mock class ) I get the same error.\n\nclass PlaylistSolrMock(mock.Mock):\n\n```\ndef __init__(self, *args, **kwargs):\n    print kwargs.get('valid_qs')\n    super(PlaylistSolrMock, self).__init__()\n\ndef models(self, *args):\n    return self\n\ndef filter(self, django_id__in=[], *args, **kwargs):\n    print django_id__in\n```\n\n@mock.patch('videos.models.SearchQuerySet', new=PlaylistSolrMock, valid_qs=True)\n#### I would like to know if there's something I'm doing wrong or, why, If I pass some kwargs to a custom object you raise this error.\n\nP.S.\n\nI'm only able to avoid this error specifying a new_callable and creating a custom init and call method.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/363", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/363/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/363/events", "html_url": "https://github.com/testing-cabal/mock/issues/363", "id": 156705261, "node_id": "MDU6SXNzdWUxNTY3MDUyNjE=", "number": 363, "title": "Issue with importing submodules in Python 2.7", "user": {"login": "J535D165", "id": 12981139, "node_id": "MDQ6VXNlcjEyOTgxMTM5", "avatar_url": "https://avatars1.githubusercontent.com/u/12981139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J535D165", "html_url": "https://github.com/J535D165", "followers_url": "https://api.github.com/users/J535D165/followers", "following_url": "https://api.github.com/users/J535D165/following{/other_user}", "gists_url": "https://api.github.com/users/J535D165/gists{/gist_id}", "starred_url": "https://api.github.com/users/J535D165/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J535D165/subscriptions", "organizations_url": "https://api.github.com/users/J535D165/orgs", "repos_url": "https://api.github.com/users/J535D165/repos", "events_url": "https://api.github.com/users/J535D165/events{/privacy}", "received_events_url": "https://api.github.com/users/J535D165/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 202498135, "node_id": "MDU6TGFiZWwyMDI0OTgxMzU=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-05-25T09:37:26Z", "updated_at": "2018-11-30T08:53:57Z", "closed_at": "2018-11-30T08:53:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "With Python 3 and mock 2.0 the following works:\n\n```\n>>> import mock\n>>> import sys\n>>> sys.modules['xxx.x'] = mock.Mock()\n>>> from xxx.x import y\n```\n\nbut with Python 2.7 and mock 2.0 it breaks:\n\n```\n>>> import mock\n>>> import sys\n>>> sys.modules['xxx.x'] = mock.Mock()\n>>> from xxx.x import y\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nImportError: No module named xxx.x\n```\n\nLooks like an issue\n\nKind regards, Jonathan\n\n[updated 25-5-2016]\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/360", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/360/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/360/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/360/events", "html_url": "https://github.com/testing-cabal/mock/issues/360", "id": 152541449, "node_id": "MDU6SXNzdWUxNTI1NDE0NDk=", "number": 360, "title": "The comment at the head of mock.py still says # mock 1.0.1", "user": {"login": "eli-b", "id": 834999, "node_id": "MDQ6VXNlcjgzNDk5OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/834999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eli-b", "html_url": "https://github.com/eli-b", "followers_url": "https://api.github.com/users/eli-b/followers", "following_url": "https://api.github.com/users/eli-b/following{/other_user}", "gists_url": "https://api.github.com/users/eli-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/eli-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eli-b/subscriptions", "organizations_url": "https://api.github.com/users/eli-b/orgs", "repos_url": "https://api.github.com/users/eli-b/repos", "events_url": "https://api.github.com/users/eli-b/events{/privacy}", "received_events_url": "https://api.github.com/users/eli-b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-05-02T12:13:06Z", "updated_at": "2016-12-11T10:57:26Z", "closed_at": "2016-12-11T10:57:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "mock/mock.py:\n\n# mock.py\n# Test tools for mocking and patching.\n# E-mail: fuzzyman AT voidspace DOT org DOT uk\n#\n# mock 1.0.1\n# http://www.voidspace.org.uk/python/mock/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/359", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/359/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/359/events", "html_url": "https://github.com/testing-cabal/mock/issues/359", "id": 151378920, "node_id": "MDU6SXNzdWUxNTEzNzg5MjA=", "number": 359, "title": "Unittesting with mock objects fails in tox with @patch decorator", "user": {"login": "arthurlogilab", "id": 445200, "node_id": "MDQ6VXNlcjQ0NTIwMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/445200?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arthurlogilab", "html_url": "https://github.com/arthurlogilab", "followers_url": "https://api.github.com/users/arthurlogilab/followers", "following_url": "https://api.github.com/users/arthurlogilab/following{/other_user}", "gists_url": "https://api.github.com/users/arthurlogilab/gists{/gist_id}", "starred_url": "https://api.github.com/users/arthurlogilab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arthurlogilab/subscriptions", "organizations_url": "https://api.github.com/users/arthurlogilab/orgs", "repos_url": "https://api.github.com/users/arthurlogilab/repos", "events_url": "https://api.github.com/users/arthurlogilab/events{/privacy}", "received_events_url": "https://api.github.com/users/arthurlogilab/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 237349293, "node_id": "MDU6TGFiZWwyMzczNDkyOTM=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/incomplete", "name": "incomplete", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-27T13:00:07Z", "updated_at": "2018-11-30T08:55:56Z", "closed_at": "2018-11-30T08:55:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some unittests that work fine when directly run with python (python -R -m coverage run -m pytest <FOLDER>/test), \n\nThe code looks like this \n\n```\n    @patch('elasticsearch.client.Elasticsearch.index')\n    def test_es_hooks_modify(self, index):\n```\n\nand generates the following error when run in tox\n\n```\n/usr/lib/python2.7/dist-packages/mock/mock.py:721: AttributeError\n___________________________________________________________ ExportElasticSearchTC.test_es_hooks_modify _____________________________________________________\n\nargs = (<test_elastic_search.ExportElasticSearchTC testMethod=test_es_hooks_modify>, <MagicMock name='index' id='140487100643792'>), keywargs = {}\nextra_args = [<MagicMock name='index' id='140487100643792'>], entered_patchers = [<mock.mock._patch object at 0x7fc5b6522bd0>]\nexc_info = (<type 'exceptions.AttributeError'>, AttributeError('assert_called',), <traceback object at 0x7fc5b39af638>)\npatching = <mock.mock._patch object at 0x7fc5b6522bd0>, arg = <MagicMock name='index' id='140487100643792'>\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        extra_args = []\n        entered_patchers = []\n\n        exc_info = tuple()\n        try:\n            for patching in patched.patchings:\n                arg = patching.__enter__()\n                entered_patchers.append(patching)\n                if patching.attribute_name is not None:\n                    keywargs.update(arg)\n                elif patching.new is DEFAULT:\n                    extra_args.append(arg)\n\n            args += tuple(extra_args)\n>           return func(*args, **keywargs)\n\n\n```\n\nReading the mock code, I try out adding unsafe\n\n```\n    @patch('elasticsearch.client.Elasticsearch.index', unsafe=True)\n    def test_es_hooks_modify(self, index):\n```\n\nAnd this works in both tox and directly from python. \n\nIs this a mock bug ? a pytest bug ? is tox doing something that might affect the way mock works ? (posted this on the tox bugtracker too https://bitbucket.org/hpk42/tox/issues/329/unittesting-with-mock-objects-fails-in-tox)\n\nDo you need extra context ? \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/358", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/358/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/358/events", "html_url": "https://github.com/testing-cabal/mock/issues/358", "id": 151219685, "node_id": "MDU6SXNzdWUxNTEyMTk2ODU=", "number": 358, "title": "Why is it 2.0.0?", "user": {"login": "jakirkham", "id": 3019665, "node_id": "MDQ6VXNlcjMwMTk2NjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3019665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakirkham", "html_url": "https://github.com/jakirkham", "followers_url": "https://api.github.com/users/jakirkham/followers", "following_url": "https://api.github.com/users/jakirkham/following{/other_user}", "gists_url": "https://api.github.com/users/jakirkham/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakirkham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakirkham/subscriptions", "organizations_url": "https://api.github.com/users/jakirkham/orgs", "repos_url": "https://api.github.com/users/jakirkham/repos", "events_url": "https://api.github.com/users/jakirkham/events{/privacy}", "received_events_url": "https://api.github.com/users/jakirkham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-04-26T19:30:42Z", "updated_at": "2016-04-26T22:38:29Z", "closed_at": "2016-04-26T22:22:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to understand why mock is 2.0.0 and not still 1.x. What versioning scheme is used here (semantic?)? Are there some sort of compatibility breaks? What features (if any) are not included in Python 3.x? Is this only because of dropped support of some Python versions I have looked at the Changelog, but it isn't obvious to me what counts as API breaking changes here.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/356", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/356/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/356/events", "html_url": "https://github.com/testing-cabal/mock/issues/356", "id": 149980446, "node_id": "MDU6SXNzdWUxNDk5ODA0NDY=", "number": 356, "title": "Mock autospec does not work with subclasses of property()", "user": {"login": "amauryfa", "id": 645208, "node_id": "MDQ6VXNlcjY0NTIwOA==", "avatar_url": "https://avatars0.githubusercontent.com/u/645208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amauryfa", "html_url": "https://github.com/amauryfa", "followers_url": "https://api.github.com/users/amauryfa/followers", "following_url": "https://api.github.com/users/amauryfa/following{/other_user}", "gists_url": "https://api.github.com/users/amauryfa/gists{/gist_id}", "starred_url": "https://api.github.com/users/amauryfa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amauryfa/subscriptions", "organizations_url": "https://api.github.com/users/amauryfa/orgs", "repos_url": "https://api.github.com/users/amauryfa/repos", "events_url": "https://api.github.com/users/amauryfa/events{/privacy}", "received_events_url": "https://api.github.com/users/amauryfa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-21T06:33:29Z", "updated_at": "2018-11-29T08:31:29Z", "closed_at": "2018-11-29T08:31:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "When patching a class, `mock.create_autospec()` correctly detects properties and `__slot__` attributes, but not subclasses of `property` or other kinds of data descriptors.\n\nI already filed upstream http://bugs.python.org/issue26750 with a patch, I don't know what is the best place to discuss this issue.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/355", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/355/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/355/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/355/events", "html_url": "https://github.com/testing-cabal/mock/issues/355", "id": 149267999, "node_id": "MDU6SXNzdWUxNDkyNjc5OTk=", "number": 355, "title": "Using isinstance and mocking datetime", "user": {"login": "ccorcos", "id": 1794527, "node_id": "MDQ6VXNlcjE3OTQ1Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1794527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccorcos", "html_url": "https://github.com/ccorcos", "followers_url": "https://api.github.com/users/ccorcos/followers", "following_url": "https://api.github.com/users/ccorcos/following{/other_user}", "gists_url": "https://api.github.com/users/ccorcos/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccorcos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccorcos/subscriptions", "organizations_url": "https://api.github.com/users/ccorcos/orgs", "repos_url": "https://api.github.com/users/ccorcos/repos", "events_url": "https://api.github.com/users/ccorcos/events{/privacy}", "received_events_url": "https://api.github.com/users/ccorcos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-18T20:52:17Z", "updated_at": "2016-04-22T10:39:37Z", "closed_at": "2016-04-22T10:39:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` py\nfrom datetime import datetime\nfrom mock import patch\ndt = patch('my_module.datetime', spec=datetime).start()\ndt.__class__\n# datetime.datetime\ndt(1970, 1, 1).__class__\n# datetime.datetime\ndt.fromtimestamp(1461004080000L).__class__\n# mock.MagicMock\n```\n\nNot sure how fromtimestamp ends up returning a MagicMock instance... but its causing me some troubles.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/353", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/353/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/353/events", "html_url": "https://github.com/testing-cabal/mock/issues/353", "id": 148282082, "node_id": "MDU6SXNzdWUxNDgyODIwODI=", "number": 353, "title": "Mock(2.0.0).assert_has_calls() raise AssertionError in two same calls", "user": {"login": "jekin000", "id": 14027030, "node_id": "MDQ6VXNlcjE0MDI3MDMw", "avatar_url": "https://avatars0.githubusercontent.com/u/14027030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekin000", "html_url": "https://github.com/jekin000", "followers_url": "https://api.github.com/users/jekin000/followers", "following_url": "https://api.github.com/users/jekin000/following{/other_user}", "gists_url": "https://api.github.com/users/jekin000/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekin000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekin000/subscriptions", "organizations_url": "https://api.github.com/users/jekin000/orgs", "repos_url": "https://api.github.com/users/jekin000/repos", "events_url": "https://api.github.com/users/jekin000/events{/privacy}", "received_events_url": "https://api.github.com/users/jekin000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-04-14T07:56:34Z", "updated_at": "2018-11-29T08:41:39Z", "closed_at": "2018-11-29T08:31:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "hello, i use Mock (2.0.0) in python2.7,and found this issue.\n\nExample:\ntest.py\n\n```\nfrom mock import Mock,call\nclass BB(object):\n    def __init__(self):pass\n    def print_b(self):pass\n    def print_bb(self,tsk_id):pass\n\nbMock = Mock(return_value=Mock(spec=BB))\nbMock().print_bb(20)\nbMock().assert_has_calls([call.print_bb(20)])\n```\n\npython test.py\nTraceback (most recent call last):\n  File \"test.py\", line 11, in <module>\n    bMock().assert_has_calls([call.print_bb(20)])\n  File \"/usr/lib/python2.7/site-packages/mock/mock.py\", line 969, in assert_has_calls\n    ), cause)\n  File \"/usr/lib/python2.7/site-packages/six.py\", line 718, in raise_from\n    raise value\nAssertionError: Calls not found.\nExpected: [call.print_bb(20)]\nActual: [call.print_bb(20)]\n# \n\nprint expected in mock.py assert_has_calls()\n[TypeError('too many positional arguments',)]\n# \n\nissue in cpython: http://bugs.python.org/issue26752\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/352", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/352/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/352/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/352/events", "html_url": "https://github.com/testing-cabal/mock/issues/352", "id": 146784117, "node_id": "MDU6SXNzdWUxNDY3ODQxMTc=", "number": 352, "title": "assert_has_calls fails when used with spec class with parameters", "user": {"login": "danielnelson", "id": 1048079, "node_id": "MDQ6VXNlcjEwNDgwNzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1048079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielnelson", "html_url": "https://github.com/danielnelson", "followers_url": "https://api.github.com/users/danielnelson/followers", "following_url": "https://api.github.com/users/danielnelson/following{/other_user}", "gists_url": "https://api.github.com/users/danielnelson/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielnelson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielnelson/subscriptions", "organizations_url": "https://api.github.com/users/danielnelson/orgs", "repos_url": "https://api.github.com/users/danielnelson/repos", "events_url": "https://api.github.com/users/danielnelson/events{/privacy}", "received_events_url": "https://api.github.com/users/danielnelson/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 237349293, "node_id": "MDU6TGFiZWwyMzczNDkyOTM=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/incomplete", "name": "incomplete", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-04-08T01:08:11Z", "updated_at": "2019-04-30T07:42:48Z", "closed_at": "2019-04-30T07:42:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am seeing some strange behavior with assert_has_calls.  This test case fails when using mock from python 3.4 or 3.5, or in version 1.1.0 or later.  In python 3.3 or 1.0.1 it passes.\n\n```\nclass InitArgs:\n    def __init__(self, foo):\n        pass\n\n    def bar(self):\n        pass\n\nclass TestSpec(unittest.TestCase):\n    def test_spec_args(self):\n        mock = Mock(spec=InitArgs)\n        mock.bar()\n        mock.assert_has_calls([call.bar()])\n```\n\nHere is the error:\n\n```\nTraceback (most recent call last):\n  File \"payment-service/test_spec.py\", line 23, in test_spec_args\n    mock.assert_has_calls([call.bar()])\n  File \"lib/python3.4/site-packages/mock/mock.py\", line 962, in assert_has_calls\n    ), cause)\n  File \"<string>\", line 2, in raise_from\nAssertionError: Calls not found.\nExpected: [call.bar()]\nActual: [call.bar()]\n```\n\nIf you remove the argument from the spec classes `__init__` then the test passes.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/351", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/351/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/351/events", "html_url": "https://github.com/testing-cabal/mock/issues/351", "id": 146450992, "node_id": "MDU6SXNzdWUxNDY0NTA5OTI=", "number": 351, "title": "create_autospec doesn't override instance methods on class object", "user": {"login": "yangchenyun", "id": 1043403, "node_id": "MDQ6VXNlcjEwNDM0MDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1043403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yangchenyun", "html_url": "https://github.com/yangchenyun", "followers_url": "https://api.github.com/users/yangchenyun/followers", "following_url": "https://api.github.com/users/yangchenyun/following{/other_user}", "gists_url": "https://api.github.com/users/yangchenyun/gists{/gist_id}", "starred_url": "https://api.github.com/users/yangchenyun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yangchenyun/subscriptions", "organizations_url": "https://api.github.com/users/yangchenyun/orgs", "repos_url": "https://api.github.com/users/yangchenyun/repos", "events_url": "https://api.github.com/users/yangchenyun/events{/privacy}", "received_events_url": "https://api.github.com/users/yangchenyun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-06T22:17:13Z", "updated_at": "2018-11-29T08:29:55Z", "closed_at": "2018-11-29T08:29:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Give the following code:\n\n``` py\nclass Foo(object):\n    def a(self):\n        print 'a'\n```\n\n`create_autospec` doesn't work for overriding instance methods defined on class. It doesn't work to override the method on the class object itself.\n\n``` py\nMockedFoo = mock.create_autospec(Foo, **{'a.return_value': 'mock'})\nMockedFoo.a()  # 'mock', this is expected\nfoo = MockedFoo()\nfoo.a()  #  <MagicMock name='mock.a()' id='24082064'>\n```\n\nIt doesn't work if trying to override the method on the mocked instance as well.\n\n``` py\nmockedFooInstance = mock.create_autospec(Foo, instance=True, **{'a.return_value': 'mock'})\nmockedFooInstance.a() = <MagicMock name='mock.a()' id='24109584'>\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/350", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/350/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/350/events", "html_url": "https://github.com/testing-cabal/mock/issues/350", "id": 146411138, "node_id": "MDU6SXNzdWUxNDY0MTExMzg=", "number": 350, "title": "Double patching instance method: AttributeError: Mock object has no attribute '__name__'", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 234899220, "node_id": "MDU6TGFiZWwyMzQ4OTkyMjA=", "url": "https://api.github.com/repos/testing-cabal/mock/labels/upstream", "name": "upstream", "color": "eb6420", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2016-04-06T19:34:08Z", "updated_at": "2018-11-29T08:29:27Z", "closed_at": "2018-11-29T08:29:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Example\n\n``` python\nimport mock\n\nclass C(object):\n    def f(self):\n        pass\n\nc = C()\n\nwith mock.patch.object(c, 'f', autospec=True):\n    with mock.patch.object(c, 'f', autospec=True):\n        pass\n```\n## mock 1.3 / 2.0\n\n``` python\n# python test.py\nTraceback (most recent call last):\n  File \"test.py\", line 10, in <module>\n    with mock.patch.object(c, 'f', autospec=True):\n  File \"/nail/home/asottile/pg/yelp-main/virtualenv_run/lib/python2.7/site-packages/mock/mock.py\", line 1450, in __enter__\n    _name=self.attribute, **kwargs)\n  File \"/nail/home/asottile/pg/yelp-main/virtualenv_run/lib/python2.7/site-packages/mock/mock.py\", line 2370, in create_autospec\n    _check_signature(original, new, skipfirst=skipfirst)\n  File \"/nail/home/asottile/pg/yelp-main/virtualenv_run/lib/python2.7/site-packages/mock/mock.py\", line 210, in _check_signature\n    _copy_func_details(func, checksig)\n  File \"/nail/home/asottile/pg/yelp-main/virtualenv_run/lib/python2.7/site-packages/mock/mock.py\", line 215, in _copy_func_details\n    funcopy.__name__ = func.__name__\n  File \"/nail/home/asottile/pg/yelp-main/virtualenv_run/lib/python2.7/site-packages/mock/mock.py\", line 698, in __getattr__\n    raise AttributeError(\"Mock object has no attribute %r\" % name)\nAttributeError: Mock object has no attribute '__name__'\n```\n## mock 1.0.1\n\n```\n# python test.py\n#\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/349", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/349/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/349/events", "html_url": "https://github.com/testing-cabal/mock/issues/349", "id": 146346024, "node_id": "MDU6SXNzdWUxNDYzNDYwMjQ=", "number": 349, "title": "Pbr setup dependency causing headaches in closed environments", "user": {"login": "simonpercivall", "id": 153659, "node_id": "MDQ6VXNlcjE1MzY1OQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/153659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonpercivall", "html_url": "https://github.com/simonpercivall", "followers_url": "https://api.github.com/users/simonpercivall/followers", "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}", "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions", "organizations_url": "https://api.github.com/users/simonpercivall/orgs", "repos_url": "https://api.github.com/users/simonpercivall/repos", "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}", "received_events_url": "https://api.github.com/users/simonpercivall/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-04-06T15:16:46Z", "updated_at": "2016-04-06T20:22:28Z", "closed_at": "2016-04-06T20:22:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Having an extremely early dependency on `pbr` requires `pbr` to be installed before `pip` (for instance) can do anything useful with the `mock` package. This complicates installation in closed environments, since the `pbr` package needs to be installed separately before `mock` is installed.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/348", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/348/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/348/events", "html_url": "https://github.com/testing-cabal/mock/issues/348", "id": 146274014, "node_id": "MDU6SXNzdWUxNDYyNzQwMTQ=", "number": 348, "title": "Documentation wasn't updated to version 2.0.0", "user": {"login": "svetlyak40wt", "id": 24827, "node_id": "MDQ6VXNlcjI0ODI3", "avatar_url": "https://avatars2.githubusercontent.com/u/24827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svetlyak40wt", "html_url": "https://github.com/svetlyak40wt", "followers_url": "https://api.github.com/users/svetlyak40wt/followers", "following_url": "https://api.github.com/users/svetlyak40wt/following{/other_user}", "gists_url": "https://api.github.com/users/svetlyak40wt/gists{/gist_id}", "starred_url": "https://api.github.com/users/svetlyak40wt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svetlyak40wt/subscriptions", "organizations_url": "https://api.github.com/users/svetlyak40wt/orgs", "repos_url": "https://api.github.com/users/svetlyak40wt/repos", "events_url": "https://api.github.com/users/svetlyak40wt/events{/privacy}", "received_events_url": "https://api.github.com/users/svetlyak40wt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-04-06T10:53:32Z", "updated_at": "2016-04-06T20:15:30Z", "closed_at": "2016-04-06T20:15:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed, that version 2.0.0 was uploaded to the PyPi, but documentation http://mock.readthedocs.org/en/latest/changelog.html says it is built for 1.4.0.dev19.\n\nPlease, update documentation.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/346", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/346/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/346/events", "html_url": "https://github.com/testing-cabal/mock/issues/346", "id": 144038982, "node_id": "MDU6SXNzdWUxNDQwMzg5ODI=", "number": 346, "title": "Mock object is duplicated inside greenlets", "user": {"login": "polosatyi", "id": 3223947, "node_id": "MDQ6VXNlcjMyMjM5NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/3223947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/polosatyi", "html_url": "https://github.com/polosatyi", "followers_url": "https://api.github.com/users/polosatyi/followers", "following_url": "https://api.github.com/users/polosatyi/following{/other_user}", "gists_url": "https://api.github.com/users/polosatyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/polosatyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/polosatyi/subscriptions", "organizations_url": "https://api.github.com/users/polosatyi/orgs", "repos_url": "https://api.github.com/users/polosatyi/repos", "events_url": "https://api.github.com/users/polosatyi/events{/privacy}", "received_events_url": "https://api.github.com/users/polosatyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-03-28T17:57:15Z", "updated_at": "2016-04-05T22:59:34Z", "closed_at": "2016-04-05T22:59:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys! How can I use mock inside _greenlet_? For example, I use _gevent_ for my application:\n\n```\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\nfrom gevent import spawn\nfrom mock import patch\n\n\nclass A(object):\n\n    def process(self):\n        pass\n\n    def go_process(self):\n        self.process()\n\n    def go_process_inside_greenlet(self):\n        spawn(self.process)\n\na = A()\n\n\nwith patch.object(a, 'process') as mock_object:\n    print mock_object.call_count\n    a.go_process()\n    print mock_object.call_count\n    a.go_process_inside_greenlet()\n    print mock_object.call_count\n```\n\nMy results:\n\n```\n$ python testapp.py\n0\n1\n1\n```\n\nYou can see that mock_object was not called inside greenlet.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/344", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/344/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/344/events", "html_url": "https://github.com/testing-cabal/mock/issues/344", "id": 141664885, "node_id": "MDU6SXNzdWUxNDE2NjQ4ODU=", "number": 344, "title": "Performance regression in `mock.create_autospec`", "user": {"login": "asottile", "id": 1810591, "node_id": "MDQ6VXNlcjE4MTA1OTE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1810591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asottile", "html_url": "https://github.com/asottile", "followers_url": "https://api.github.com/users/asottile/followers", "following_url": "https://api.github.com/users/asottile/following{/other_user}", "gists_url": "https://api.github.com/users/asottile/gists{/gist_id}", "starred_url": "https://api.github.com/users/asottile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asottile/subscriptions", "organizations_url": "https://api.github.com/users/asottile/orgs", "repos_url": "https://api.github.com/users/asottile/repos", "events_url": "https://api.github.com/users/asottile/events{/privacy}", "received_events_url": "https://api.github.com/users/asottile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 20, "created_at": "2016-03-17T18:15:43Z", "updated_at": "2018-11-29T19:10:17Z", "closed_at": "2018-11-29T08:28:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here's a pretty simple testcase demonstrating this:\n\n``` python\nimport mock\n\n# Just a class with a lot of methods\ncls = type(\n    'cls', (object,),\n    {k: lambda: None for k in ['meth{}'.format(i) for i in range(100)]},\n)\n\nmock.create_autospec(cls)\n```\n## mock 1.0.1\n\n```\n$ pip install mock==1.0.1 -q\n$ time python test.py\n\nreal    0m0.066s\nuser    0m0.058s\nsys 0m0.008s\n$ time python test.py\n\nreal    0m0.073s\nuser    0m0.073s\nsys 0m0.000s\n$ time python test.py\n\nreal    0m0.072s\nuser    0m0.064s\nsys 0m0.008s\n```\n## mock 1.1 (Similar is seen with 1.3)\n\n```\n$ pip install mock==1.1 -q\n$ time python test.py\n\nreal    0m0.405s\nuser    0m0.364s\nsys 0m0.040s\n$ time python test.py\n\nreal    0m0.408s\nuser    0m0.364s\nsys 0m0.040s\n$ time python test.py\n\nreal    0m0.413s\nuser    0m0.365s\nsys 0m0.048s\n```\n\nI decided to profile this at 100x and I've attached svg + pstats for those:\n\n[pstats_svgs.zip](https://github.com/testing-cabal/mock/files/178435/pstats_svgs.zip)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/342", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/342/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/342/events", "html_url": "https://github.com/testing-cabal/mock/issues/342", "id": 140839473, "node_id": "MDU6SXNzdWUxNDA4Mzk0NzM=", "number": 342, "title": "Backport assert_called() and assert_called_once() methods", "user": {"login": "amitsaha", "id": 512598, "node_id": "MDQ6VXNlcjUxMjU5OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/512598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitsaha", "html_url": "https://github.com/amitsaha", "followers_url": "https://api.github.com/users/amitsaha/followers", "following_url": "https://api.github.com/users/amitsaha/following{/other_user}", "gists_url": "https://api.github.com/users/amitsaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitsaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitsaha/subscriptions", "organizations_url": "https://api.github.com/users/amitsaha/orgs", "repos_url": "https://api.github.com/users/amitsaha/repos", "events_url": "https://api.github.com/users/amitsaha/events{/privacy}", "received_events_url": "https://api.github.com/users/amitsaha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-03-15T01:02:10Z", "updated_at": "2016-03-23T06:13:14Z", "closed_at": "2016-03-23T06:08:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "The stdlib now has these two new methods (https://docs.python.org/3.6/whatsnew/3.6.html#unittest-mock). Would be happy to back port these, should I submit a PR?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/testing-cabal/mock/issues/341", "repository_url": "https://api.github.com/repos/testing-cabal/mock", "labels_url": "https://api.github.com/repos/testing-cabal/mock/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/testing-cabal/mock/issues/341/comments", "events_url": "https://api.github.com/repos/testing-cabal/mock/issues/341/events", "html_url": "https://github.com/testing-cabal/mock/issues/341", "id": 132568817, "node_id": "MDU6SXNzdWUxMzI1Njg4MTc=", "number": 341, "title": "PR idea: Add an assert_called() method", "user": {"login": "amitsaha", "id": 512598, "node_id": "MDQ6VXNlcjUxMjU5OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/512598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitsaha", "html_url": "https://github.com/amitsaha", "followers_url": "https://api.github.com/users/amitsaha/followers", "following_url": "https://api.github.com/users/amitsaha/following{/other_user}", "gists_url": "https://api.github.com/users/amitsaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitsaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitsaha/subscriptions", "organizations_url": "https://api.github.com/users/amitsaha/orgs", "repos_url": "https://api.github.com/users/amitsaha/repos", "events_url": "https://api.github.com/users/amitsaha/events{/privacy}", "received_events_url": "https://api.github.com/users/amitsaha/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-02-09T23:37:21Z", "updated_at": "2016-03-15T01:07:29Z", "closed_at": "2016-02-09T23:56:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would a PR for adding a `assert_called()` method be welcome for inclusion? We do have a `assert_not_called()` method, so I think this may be a good idea. Please let me know and I will work on it.\n", "performed_via_github_app": null, "score": 1.0}]}