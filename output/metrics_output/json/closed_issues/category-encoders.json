{"total_count": 132, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/254", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/254/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/254/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/254/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/254", "id": 612723642, "node_id": "MDU6SXNzdWU2MTI3MjM2NDI=", "number": 254, "title": "Under certain conditions, the index is reset after being processed by multi-process HashingEncoder", "user": {"login": "pesuchin", "id": 7578373, "node_id": "MDQ6VXNlcjc1NzgzNzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7578373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pesuchin", "html_url": "https://github.com/pesuchin", "followers_url": "https://api.github.com/users/pesuchin/followers", "following_url": "https://api.github.com/users/pesuchin/following{/other_user}", "gists_url": "https://api.github.com/users/pesuchin/gists{/gist_id}", "starred_url": "https://api.github.com/users/pesuchin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pesuchin/subscriptions", "organizations_url": "https://api.github.com/users/pesuchin/orgs", "repos_url": "https://api.github.com/users/pesuchin/repos", "events_url": "https://api.github.com/users/pesuchin/events{/privacy}", "received_events_url": "https://api.github.com/users/pesuchin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-05T16:13:41Z", "updated_at": "2020-06-24T00:18:59Z", "closed_at": "2020-06-24T00:18:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "## Expected Behavior\r\n\r\nThe index should not be changed after being processed by HashingEncoder in either single or multi-process.\r\n\r\n## Actual Behavior\r\n\r\nUnder certain conditions, the index is changed after being processed by multi-process HashingEncoder.\r\n\r\n## Steps to Reproduce the Problem\r\n\r\n  1. Prepare a DataFrame.\r\n  1. Cut out some rows to make the index partially holey.\r\n  1. Assign HashingEncoder's col to process only some of the columns.\r\n  1. Fit and transform HashingEncoder.\r\n\r\n### Concrete example: Single process HashingEncoder\r\n\r\nIn the case of a single process, the index will not be changed as follows.\r\n\r\n```\r\nimport category_encoders as encoders\r\nimport pandas as pd\r\nfrom pandas.testing import assert_index_equal\r\n\r\ncolumns = ['column1', 'column2', 'column3', 'column4']\r\ndf = pd.DataFrame([[i, i, i, i] for i in range(10)], columns=columns)\r\ndf = df.iloc[2:8, :]\r\ntarget_columns = ['column1', 'column2', 'column3']\r\n\r\nsingle_process_encoder = encoders.HashingEncoder(max_process=1, cols=target_columns)\r\nsingle_process_encoder.fit(df, None)\r\ndf_encoded_single_process = single_process_encoder.transform(df)\r\n\r\nprint('origin:', list(df.index))\r\nprint('after HashingEncoding: ', list(df_encoded_single_process.index))\r\nprint(df.index.equals(df_encoded_single_process.index))\r\n-----------------------[output]-----------------------\r\norigin: [2, 3, 4, 5, 6, 7]\r\nafter HashingEncoding:  [2, 3, 4, 5, 6, 7]\r\nTrue\r\n```\r\n\r\n### Concrete example: Multi process HashingEncoder\r\n\r\nIn the case of multi-process, the index will be changed as follows.\r\n\r\n```\r\nimport category_encoders as encoders\r\nimport pandas as pd\r\nfrom pandas.testing import assert_index_equal\r\n\r\ncolumns = ['column1', 'column2', 'column3', 'column4']\r\ndf = pd.DataFrame([[i, i, i, i] for i in range(10)], columns=columns)\r\ndf = df.iloc[2:8, :]\r\ntarget_columns = ['column1', 'column2', 'column3']\r\n\r\nmulti_process_encoder = encoders.HashingEncoder(max_process=0, cols=target_columns)\r\nmulti_process_encoder.fit(df, None)\r\ndf_encoded_multi_process = multi_process_encoder.transform(df)\r\nprint('origin: ', list(df.index))\r\nprint('after HashingEncoding: ', list(df_encoded_multi_process.index))\r\nprint(df.index.equals(df_encoded_multi_process.index))\r\n-----------------------[output]-----------------------\r\norigin:  [2, 3, 4, 5, 6, 7]\r\nafter HashingEncoding:  [0, 1, 2, 3, 4, 5]\r\nFalse\r\n```\r\n\r\n## Specifications\r\n\r\n  - Version: category_encoders=2.2.2\r\n  - Platform: Mac OS Catalina 10.15.4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/250", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/250/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/250/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/250/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/250", "id": 608163649, "node_id": "MDU6SXNzdWU2MDgxNjM2NDk=", "number": 250, "title": "Documentation link is broken", "user": {"login": "Galileo-Galilei", "id": 29451317, "node_id": "MDQ6VXNlcjI5NDUxMzE3", "avatar_url": "https://avatars1.githubusercontent.com/u/29451317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Galileo-Galilei", "html_url": "https://github.com/Galileo-Galilei", "followers_url": "https://api.github.com/users/Galileo-Galilei/followers", "following_url": "https://api.github.com/users/Galileo-Galilei/following{/other_user}", "gists_url": "https://api.github.com/users/Galileo-Galilei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Galileo-Galilei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Galileo-Galilei/subscriptions", "organizations_url": "https://api.github.com/users/Galileo-Galilei/orgs", "repos_url": "https://api.github.com/users/Galileo-Galilei/repos", "events_url": "https://api.github.com/users/Galileo-Galilei/events{/privacy}", "received_events_url": "https://api.github.com/users/Galileo-Galilei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-28T09:26:28Z", "updated_at": "2020-04-29T01:40:26Z", "closed_at": "2020-04-29T01:40:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nthe current link to the documentation is broken (http://contrib.scikit-learn.org/category_encoders/). I cannot access directly to a specific page, the whole website seems down. Any plan to fix it soon? \r\n\r\nMany thanks to the team (for the package and fix) !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/249", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/249/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/249/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/249/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/249", "id": 607795999, "node_id": "MDU6SXNzdWU2MDc3OTU5OTk=", "number": 249, "title": "Bug in GLMMEncoder?", "user": {"login": "DSoudis", "id": 25321020, "node_id": "MDQ6VXNlcjI1MzIxMDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/25321020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DSoudis", "html_url": "https://github.com/DSoudis", "followers_url": "https://api.github.com/users/DSoudis/followers", "following_url": "https://api.github.com/users/DSoudis/following{/other_user}", "gists_url": "https://api.github.com/users/DSoudis/gists{/gist_id}", "starred_url": "https://api.github.com/users/DSoudis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DSoudis/subscriptions", "organizations_url": "https://api.github.com/users/DSoudis/orgs", "repos_url": "https://api.github.com/users/DSoudis/repos", "events_url": "https://api.github.com/users/DSoudis/events{/privacy}", "received_events_url": "https://api.github.com/users/DSoudis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-27T19:29:38Z", "updated_at": "2020-04-28T15:52:45Z", "closed_at": "2020-04-28T15:52:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Although GLMMEncoder works correctly on the Boston data, it fails with a KeyError on other datasets i tried.\r\n\r\nExample:\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\nimport category_encoders as ce\r\n\r\n# make some data\r\ndf = pd.DataFrame({\r\n 'color':[\"a\", \"b\", \"a\", \"c\"], \r\n 'outcome':[1, 2, 3, 2]})\r\n\r\n# split into X and y\r\nX = df.drop('outcome', axis = 1)\r\ny = df.drop('color', axis = 1)\r\n\r\nce = ce.GLMMEncoder(cols = ['color'])\r\nvals = ce.fit_transform(X, y)\r\n```\r\nfails with\r\n\r\n```\r\nKeyError: 'color'\r\n```\r\n\r\nI found that changing line 280 in glmm.py from\r\n```\r\nmd = smf.mixedlm('target ~ 1', data, groups=data[col]).fit()\r\n```\r\n\r\nto\r\n```\r\nmd = smf.mixedlm('target ~ 1', data, groups=data['feature']).fit()\r\n```\r\n\r\nsolves my issue. Is this correct?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/247", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/247/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/247/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/247", "id": 607006745, "node_id": "MDU6SXNzdWU2MDcwMDY3NDU=", "number": 247, "title": "New release", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-26T12:58:52Z", "updated_at": "2020-05-12T18:21:20Z", "closed_at": "2020-05-12T18:21:20Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hi @wdm0006, I am handing over the management of the repository.\r\n\r\nThe repository is prepared for a new release, which is long due since the last published release doesn't work so well under Pandas 1.0.0 (the master branch works fine). I hope you will find time to manage the repository.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/244", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/244/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/244/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/244/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/244", "id": 606510294, "node_id": "MDU6SXNzdWU2MDY1MTAyOTQ=", "number": 244, "title": "Ordinal encoder giving unexpected results for pandas Categorical", "user": {"login": "Rcubes", "id": 48638337, "node_id": "MDQ6VXNlcjQ4NjM4MzM3", "avatar_url": "https://avatars2.githubusercontent.com/u/48638337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rcubes", "html_url": "https://github.com/Rcubes", "followers_url": "https://api.github.com/users/Rcubes/followers", "following_url": "https://api.github.com/users/Rcubes/following{/other_user}", "gists_url": "https://api.github.com/users/Rcubes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rcubes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rcubes/subscriptions", "organizations_url": "https://api.github.com/users/Rcubes/orgs", "repos_url": "https://api.github.com/users/Rcubes/repos", "events_url": "https://api.github.com/users/Rcubes/events{/privacy}", "received_events_url": "https://api.github.com/users/Rcubes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-24T18:42:11Z", "updated_at": "2020-04-30T16:10:00Z", "closed_at": "2020-04-30T16:10:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, \r\nI just love categorical encoders, but working on a clustering I had a hard time detecting a bug in my code. \r\nMy data is not shareable, but I prepared a small reproducible example to show:\r\n\r\n```python\r\nimport category_encoders as ce\r\nimport pandas as pd\r\ndf = pd.DataFrame({'a':[1,2,3],'b':['a',np.nan,'c']})\r\ndf.dtypes\r\n```\r\nyou'll notice a is an int64 and b is an object. If I use ordinal encoding\r\n```python\r\nord = ce.OrdinalEncoder()\r\nord.fit_transform(df)\r\n```\r\nI get b encoded as expected 1,2,3.\r\n\r\nNormally in pandas, I use pd.Categorical for dealing with big datasets with categories.\r\n\r\nIf using data with pandas Categories:\r\n```python\r\nimport category_encoders as ce\r\nimport pandas as pd\r\ndf = pd.DataFrame({'a':[1,2,3],'b':['a',np.nan,'c']})\r\ndf['b'] = pd.Categorical(df.b)\r\n\r\nord = ce.OrdinalEncoder()\r\nord.fit_transform(df)\r\n```\r\n\r\nI get a really weird value -2147483648 as encoding for the NaN\r\n\r\nAs per documentation:\r\nhandle_missing: str\r\noptions are \u2018error\u2019, \u2018return_nan\u2019, and \u2018value, default to \u2018value\u2019, which treat nan as a category at fit time, or -2 at transform time if nan is not a category during fit.\r\n\r\nam I missing something??\r\n\r\nI'm using category_encoders 2.1.0 and Python 3.7.4.\r\nPlease let me know if you need more info on my end.\r\n\r\nThanks in advance,\r\n\r\nAlfonso\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/242", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/242/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/242/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/242/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/242", "id": 603104034, "node_id": "MDU6SXNzdWU2MDMxMDQwMzQ=", "number": 242, "title": "feature request: Target Encoding via Mixed Linear Models", "user": {"login": "DSoudis", "id": 25321020, "node_id": "MDQ6VXNlcjI1MzIxMDIw", "avatar_url": "https://avatars1.githubusercontent.com/u/25321020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DSoudis", "html_url": "https://github.com/DSoudis", "followers_url": "https://api.github.com/users/DSoudis/followers", "following_url": "https://api.github.com/users/DSoudis/following{/other_user}", "gists_url": "https://api.github.com/users/DSoudis/gists{/gist_id}", "starred_url": "https://api.github.com/users/DSoudis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DSoudis/subscriptions", "organizations_url": "https://api.github.com/users/DSoudis/orgs", "repos_url": "https://api.github.com/users/DSoudis/repos", "events_url": "https://api.github.com/users/DSoudis/events{/privacy}", "received_events_url": "https://api.github.com/users/DSoudis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-20T09:54:38Z", "updated_at": "2020-04-25T12:49:49Z", "closed_at": "2020-04-25T12:49:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would you consider adding a target encoding functionality via Mixed Linear models?\r\n\r\nThis functionality exists in R via the `embed` package see [here](https://tidymodels.github.io/embed/articles/Applications/GLM.html) for a discussion, particularly under the \"Empirical Bayesian Methods/Mixed Models\"\r\n\r\nIt is quite similar to the MEstimateEncoder, but there are some advantages i can see:\r\n\r\n1) Solid statistical theory behind the technique. Mixed effects models are a mature branch of statistics\r\n\r\n2) No hyperparameters to tune. The amount of shrinkage is automatically determined through the estimation process. A good reference is Gelman & Hill (2007)  \"Data Analysis Using Regression and Multilevel/Hierarchical Models\" (particularly page 253) In short, the less observations a category has and/or the more the outcome varies for a category then the higher the regularization towards \"the prior\" or \"grand mean\".\r\n\r\n3) The technique is applicable for both continuous outcomes (via mixed linear regression) or two-class outcomes (via mixed logit regression)\r\n\r\n4) Statsmodels has a convenient implementation. Basically:\r\n\r\n```\r\nimport statsmodels.formula.api as smf \r\nfrom statsmodels.genmod.bayes_mixed_glm import BinomialBayesMixedGLM as bgmm\r\n\r\n# Regression, returns prediction per observation equal to the (regularized) mean of the observation's category\r\nmd = smf.mixedlm(\"outcome ~ 1\", data, groups=data[category_var]).fit()\r\nmdf.fittedvalues # this has shape of (n_rows, 1)\r\n\r\n\r\n# Classification, returns (regularized)  log odds per category. Needs mapping to original vector \r\ngmd = bgmm.from_formula(\"outcome ~ 1\", {'a' : '0 + C(category_var)'}, data).fit_vb()\r\ngmd.random_effects() # this has shape of (n_groups, 1)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/241", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/241/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/241/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/241", "id": 593878199, "node_id": "MDU6SXNzdWU1OTM4NzgxOTk=", "number": 241, "title": "ValueError: The truth value of a Index is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().", "user": {"login": "Alex-Lekov", "id": 61644712, "node_id": "MDQ6VXNlcjYxNjQ0NzEy", "avatar_url": "https://avatars2.githubusercontent.com/u/61644712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alex-Lekov", "html_url": "https://github.com/Alex-Lekov", "followers_url": "https://api.github.com/users/Alex-Lekov/followers", "following_url": "https://api.github.com/users/Alex-Lekov/following{/other_user}", "gists_url": "https://api.github.com/users/Alex-Lekov/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alex-Lekov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alex-Lekov/subscriptions", "organizations_url": "https://api.github.com/users/Alex-Lekov/orgs", "repos_url": "https://api.github.com/users/Alex-Lekov/repos", "events_url": "https://api.github.com/users/Alex-Lekov/events{/privacy}", "received_events_url": "https://api.github.com/users/Alex-Lekov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-04T14:02:49Z", "updated_at": "2020-04-04T20:52:43Z", "closed_at": "2020-04-04T20:52:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n~/opt/anaconda3/envs/ds/lib/python3.7/site-packages/category_encoders/ordinal.py in transform(self, X, override_return_df)\r\n    195             raise ValueError('Unexpected input dimension %d, expected %d' % (X.shape[1], self._dim,))\r\n    196 \r\n--> 197         if not self.cols:\r\n    198             return X if self.return_df else X.values\r\n    199 \r\n\r\n~/opt/anaconda3/envs/ds/lib/python3.7/site-packages/pandas/core/indexes/base.py in __nonzero__(self)\r\n   2148     def __nonzero__(self):\r\n   2149         raise ValueError(\r\n-> 2150             f\"The truth value of a {type(self).__name__} is ambiguous. \"\r\n   2151             \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\r\n   2152         )\r\n\r\nValueError: The truth value of a Index is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\r\n```\r\n\r\nPython 3.7.6\r\npandas 1.0.1\r\n\r\nbug here:\r\n**` if not self.cols:`**\r\nto check for an empty list now use x.empty. (https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o)\r\neverything works fine in the old version python & pandas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/240", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/240/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/240/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/240", "id": 589750439, "node_id": "MDU6SXNzdWU1ODk3NTA0Mzk=", "number": 240, "title": "How Leave-One-Out-Encoder call k-folds CV?", "user": {"login": "ws15145177388", "id": 56186807, "node_id": "MDQ6VXNlcjU2MTg2ODA3", "avatar_url": "https://avatars1.githubusercontent.com/u/56186807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ws15145177388", "html_url": "https://github.com/ws15145177388", "followers_url": "https://api.github.com/users/ws15145177388/followers", "following_url": "https://api.github.com/users/ws15145177388/following{/other_user}", "gists_url": "https://api.github.com/users/ws15145177388/gists{/gist_id}", "starred_url": "https://api.github.com/users/ws15145177388/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ws15145177388/subscriptions", "organizations_url": "https://api.github.com/users/ws15145177388/orgs", "repos_url": "https://api.github.com/users/ws15145177388/repos", "events_url": "https://api.github.com/users/ws15145177388/events{/privacy}", "received_events_url": "https://api.github.com/users/ws15145177388/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-29T09:08:41Z", "updated_at": "2020-03-29T10:10:07Z", "closed_at": "2020-03-29T10:10:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "The model will be obviously over-fitting after eave-One-Out-Encoder, How to set k-fold cross validation for functions?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/235", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/235/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/235/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/235/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/235", "id": 575326787, "node_id": "MDU6SXNzdWU1NzUzMjY3ODc=", "number": 235, "title": "TargetEncoder produces missing values with pandas categorical data", "user": {"login": "PGijsbers", "id": 15890747, "node_id": "MDQ6VXNlcjE1ODkwNzQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/15890747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PGijsbers", "html_url": "https://github.com/PGijsbers", "followers_url": "https://api.github.com/users/PGijsbers/followers", "following_url": "https://api.github.com/users/PGijsbers/following{/other_user}", "gists_url": "https://api.github.com/users/PGijsbers/gists{/gist_id}", "starred_url": "https://api.github.com/users/PGijsbers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PGijsbers/subscriptions", "organizations_url": "https://api.github.com/users/PGijsbers/orgs", "repos_url": "https://api.github.com/users/PGijsbers/repos", "events_url": "https://api.github.com/users/PGijsbers/events{/privacy}", "received_events_url": "https://api.github.com/users/PGijsbers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-04T11:25:37Z", "updated_at": "2020-03-11T14:42:10Z", "closed_at": "2020-03-11T14:42:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Using the TargetEncoder to transform data with unknown categorical values and `handle_unknown='value'` (default) can produce `NaN`-values. This happens when the input data is a pandas DataFrame with the categorical column of type \"category\":\r\n\r\n```python\r\nimport pandas as pd\r\nfrom category_encoders import TargetEncoder\r\n\r\nx = pd.DataFrame(['A','A','B'], dtype='category')\r\ny = pd.Series([0.1,0.1,0.2])\r\nte = TargetEncoder(handle_unknown='value').fit(x.loc[[0, 1]], y.loc[[0, 1]])\r\nte.transform(x.loc[[2]])\r\n>>> NaN\r\n```\r\n\r\nWhen the data is passed in as dtype \"object\" it works as expected:\r\n\r\n```python\r\nimport pandas as pd\r\nfrom category_encoders import TargetEncoder\r\n\r\nx = pd.DataFrame(['A','A','B'], dtype='object')  # Notice changed dtype\r\ny = pd.Series([0.1,0.1,0.2])\r\nte = TargetEncoder(handle_unknown='value').fit(x.loc[[0, 1]], y.loc[[0, 1]])\r\nte.transform(x.loc[[2]])\r\n>>> 0.1\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/234", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/234/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/234/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/234/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/234", "id": 563631602, "node_id": "MDU6SXNzdWU1NjM2MzE2MDI=", "number": 234, "title": "do not ignore unknown categories : known problem in scikit learn for OrdinalEncoder", "user": {"login": "Sandy4321", "id": 11426119, "node_id": "MDQ6VXNlcjExNDI2MTE5", "avatar_url": "https://avatars0.githubusercontent.com/u/11426119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sandy4321", "html_url": "https://github.com/Sandy4321", "followers_url": "https://api.github.com/users/Sandy4321/followers", "following_url": "https://api.github.com/users/Sandy4321/following{/other_user}", "gists_url": "https://api.github.com/users/Sandy4321/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sandy4321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sandy4321/subscriptions", "organizations_url": "https://api.github.com/users/Sandy4321/orgs", "repos_url": "https://api.github.com/users/Sandy4321/repos", "events_url": "https://api.github.com/users/Sandy4321/events{/privacy}", "received_events_url": "https://api.github.com/users/Sandy4321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-12T00:11:25Z", "updated_at": "2020-03-02T07:48:08Z", "closed_at": "2020-03-02T07:48:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n\r\ndo you have solution for known problem in scikit learn for OrdinalEncoder\r\nhttps://github.com/scikit-learn/scikit-learn/issues/13488\r\n\r\nthey do not ignore unknown categories value as OneHotEncoder does\r\nsince in real live, there are often many differences between train and data test?\r\nas stated above by @ogrisel : Personally I find this issue really annoying\r\n\r\nhopefully you have solution ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/231", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/231/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/231/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/231/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/231", "id": 556031599, "node_id": "MDU6SXNzdWU1NTYwMzE1OTk=", "number": 231, "title": "Which encoders require nested CV?", "user": {"login": "Anjum48", "id": 13783303, "node_id": "MDQ6VXNlcjEzNzgzMzAz", "avatar_url": "https://avatars1.githubusercontent.com/u/13783303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Anjum48", "html_url": "https://github.com/Anjum48", "followers_url": "https://api.github.com/users/Anjum48/followers", "following_url": "https://api.github.com/users/Anjum48/following{/other_user}", "gists_url": "https://api.github.com/users/Anjum48/gists{/gist_id}", "starred_url": "https://api.github.com/users/Anjum48/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Anjum48/subscriptions", "organizations_url": "https://api.github.com/users/Anjum48/orgs", "repos_url": "https://api.github.com/users/Anjum48/repos", "events_url": "https://api.github.com/users/Anjum48/events{/privacy}", "received_events_url": "https://api.github.com/users/Anjum48/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-28T07:30:31Z", "updated_at": "2020-07-11T09:38:06Z", "closed_at": "2020-07-11T09:38:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi guys - thanks for a great package. There are a lot of encoders I am unfamiliar with and I'm still working through the references.\r\n\r\nFor normal target encoding, it's good practice nested CV folds to prevent target leakage. I was trying to figure out which other encoders will require nested CV. Is it safe to assume that when I see\r\n\r\n`fit(self, X, y, **kwargs)`\r\n\r\ninstead of\r\n\r\n`fit(self, X, y=None, **kwargs)`\r\n\r\nThen the `y` value is used by the encoder and there is potential for target leakage?\r\n\r\nHere is a list of encoders where I think the target is used:\r\n- TargetEncoder\r\n- CatBoostEncoder\r\n- James-Stein\r\n- Leave one out\r\n- M-estimate\r\n- Weight of Evidence", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/228", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/228/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/228/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/228/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/228", "id": 541273840, "node_id": "MDU6SXNzdWU1NDEyNzM4NDA=", "number": 228, "title": "OrdinalEncoder mapping", "user": {"login": "santosh-b", "id": 43103834, "node_id": "MDQ6VXNlcjQzMTAzODM0", "avatar_url": "https://avatars2.githubusercontent.com/u/43103834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/santosh-b", "html_url": "https://github.com/santosh-b", "followers_url": "https://api.github.com/users/santosh-b/followers", "following_url": "https://api.github.com/users/santosh-b/following{/other_user}", "gists_url": "https://api.github.com/users/santosh-b/gists{/gist_id}", "starred_url": "https://api.github.com/users/santosh-b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/santosh-b/subscriptions", "organizations_url": "https://api.github.com/users/santosh-b/orgs", "repos_url": "https://api.github.com/users/santosh-b/repos", "events_url": "https://api.github.com/users/santosh-b/events{/privacy}", "received_events_url": "https://api.github.com/users/santosh-b/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-21T03:05:12Z", "updated_at": "2019-12-21T08:53:55Z", "closed_at": "2019-12-21T08:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why does the mapping parameter in the OrdinalEncoder require me to specify a column? I want to be able use a mapping dictionary to OrdinalEncode multiple columns at once, but because I'm only able to specify a column, and only 1 column, I'm not able to do this.\r\n\r\nThis is what i'm talking about:\r\n```\r\n**ordinal.py**\r\nmapping: list of dict\r\n        a mapping of class to label to use for the encoding, optional.\r\n        the dict contains the keys 'col' and 'mapping'.\r\n        the value of 'col' should be the feature name.\r\n        the value of 'mapping' should be a dictionary of 'original_label' to 'encoded_label'.\r\n        example mapping: [{'col': 'col1', 'mapping': {None: 0, 'a': 1, 'b': 2}}]\r\n```\r\nI don't want to have to specify a single feature name, but it looks like if I use the mapping parameter then I'm forced to", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/214", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/214/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/214/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/214", "id": 499785127, "node_id": "MDU6SXNzdWU0OTk3ODUxMjc=", "number": 214, "title": "Upgrade dependencies to work with Pandas 25", "user": {"login": "1vecera", "id": 32644386, "node_id": "MDQ6VXNlcjMyNjQ0Mzg2", "avatar_url": "https://avatars0.githubusercontent.com/u/32644386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1vecera", "html_url": "https://github.com/1vecera", "followers_url": "https://api.github.com/users/1vecera/followers", "following_url": "https://api.github.com/users/1vecera/following{/other_user}", "gists_url": "https://api.github.com/users/1vecera/gists{/gist_id}", "starred_url": "https://api.github.com/users/1vecera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1vecera/subscriptions", "organizations_url": "https://api.github.com/users/1vecera/orgs", "repos_url": "https://api.github.com/users/1vecera/repos", "events_url": "https://api.github.com/users/1vecera/events{/privacy}", "received_events_url": "https://api.github.com/users/1vecera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-28T15:25:04Z", "updated_at": "2019-10-02T12:55:19Z", "closed_at": "2019-10-02T12:55:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear Developers, thanks for this great package.\r\nThe issue I ran into:\r\n\r\nRunning conda install category_encoders gets me version 1.25. (Conda forge is my highest priority channel) \r\nconda install category_encoders=2.0 forces 2 years old pandas package.\r\n```\r\nThe following packages will be downloaded:\r\n\r\n    package                    |            build\r\n    ---------------------------|-----------------\r\n    category_encoders-2.0.0    |             py_1          41 KB  conda-forge\r\n    mlxtend-0.12.0             |           py36_0         1.2 MB  conda-forge\r\n    pandas-0.22.0              |           py36_1         9.4 MB  conda-forge\r\n    ------------------------------------------------------------\r\n                                           Total:        10.7 MB\r\n\r\nThe following packages will be UPDATED:\r\n\r\n  category_encoders  conda-forge/win-64::category_encoders~ --> conda-forge/noarch::category_encoders-2.0.0-py_1\r\n\r\nThe following packages will be SUPERSEDED by a higher-priority channel:\r\n\r\n  mlxtend            conda-forge/noarch::mlxtend-0.17.0-py~ --> conda-forge/win-64::mlxtend-0.12.0-py36_0\r\n\r\nThe following packages will be DOWNGRADED:\r\n\r\n  pandas                              0.25.1-py36he350917_0 --> 0.22.0-py36_1\r\n```\r\n\r\nBoth on Windows Server 2012 and CentOs 7. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/213", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/213/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/213/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/213", "id": 499667871, "node_id": "MDU6SXNzdWU0OTk2Njc4NzE=", "number": 213, "title": "OneHotEncoder with option handle_missing='error' throws \"ValueError: The truth value of a Series is ambiguous\" when there is more than one categorical column ", "user": {"login": "carvalhomb", "id": 11425202, "node_id": "MDQ6VXNlcjExNDI1MjAy", "avatar_url": "https://avatars2.githubusercontent.com/u/11425202?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carvalhomb", "html_url": "https://github.com/carvalhomb", "followers_url": "https://api.github.com/users/carvalhomb/followers", "following_url": "https://api.github.com/users/carvalhomb/following{/other_user}", "gists_url": "https://api.github.com/users/carvalhomb/gists{/gist_id}", "starred_url": "https://api.github.com/users/carvalhomb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carvalhomb/subscriptions", "organizations_url": "https://api.github.com/users/carvalhomb/orgs", "repos_url": "https://api.github.com/users/carvalhomb/repos", "events_url": "https://api.github.com/users/carvalhomb/events{/privacy}", "received_events_url": "https://api.github.com/users/carvalhomb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-27T21:56:49Z", "updated_at": "2019-09-28T06:22:46Z", "closed_at": "2019-09-28T06:17:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to use OneHotEncoder with handle_missing=\"error\", I get the following exception: \"ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\" This seems to happen only if there is more than one categorical column being encoded. \r\n\r\nMinimal example to recreate the problem:\r\n\r\n```\r\nimport pandas as pd\r\nfrom category_encoders.one_hot import OneHotEncoder\r\n\r\ndf_ok = pd.DataFrame([\r\n        [0, 'm', 1],\r\n        [2, 'n', 5],\r\n        [4, 'm', 4],\r\n        [6, 'p', 2],\r\n    ], columns=['col1', 'col2', 'col3'])\r\n\r\ndf_problematic = pd.DataFrame([\r\n        [0, 'm', 1, 'a'],\r\n        [2, 'n', 5, 'a'],\r\n        [4, 'm', 4, 'b'],\r\n        [6, 'p', 2, 'd'],\r\n    ], columns=['col1', 'col2', 'col3', 'col4'])\r\n\r\n# This runs\r\nencoder_obj = OneHotEncoder(use_cat_names=True,\r\n                            handle_missing='error',\r\n                            handle_unknown='value')\r\nencoder_obj.fit(df_ok)\r\ndf_transformed = encoder_obj.transform(df_ok)\r\nencoder_obj.fit(df_ok)\r\nprint(df_transformed)\r\n\r\n# This throws ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\r\nencoder_obj2 = OneHotEncoder(use_cat_names=True,\r\n                            handle_missing='error',\r\n                            handle_unknown='value')\r\nencoder_obj2.fit(df_problematic)\r\ndf_transformed2 = encoder_obj2.transform(df_problematic)\r\n\r\n\r\n# With handle_missing anything other than \"error\", the problem disappears\r\nencoder_obj3 = OneHotEncoder(use_cat_names=True,\r\n                            handle_missing='value',\r\n                            handle_unknown='value'\r\n                            )\r\nencoder_obj3.fit(df_problematic)\r\ndf_transformed3 = encoder_obj3.transform(df_problematic)\r\nprint(df_transformed3)\r\n```\r\n\r\nIt seems to me that the problem is in category_encoders\\one_hot.py, lines 141-143:\r\n\r\n```\r\n        if self.handle_missing == 'error':\r\n            if X[self.cols].isnull().any().bool():\r\n                raise ValueError('Columns to be encoded can not contain null')\r\n```\r\n\r\n\r\nCould changing line 142 to:\r\n\r\n```\r\n            if X[self.cols].isnull().any().any():\r\n```\r\nsolve it?\r\n\r\nI'm using category_encoders 2.0.0 and pandas  0.22.0.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/212", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/212/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/212/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/212", "id": 496633781, "node_id": "MDU6SXNzdWU0OTY2MzM3ODE=", "number": 212, "title": "HelmertEncoder handle_missing default is 'indicator'.", "user": {"login": "rohitgr7", "id": 30778939, "node_id": "MDQ6VXNlcjMwNzc4OTM5", "avatar_url": "https://avatars1.githubusercontent.com/u/30778939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rohitgr7", "html_url": "https://github.com/rohitgr7", "followers_url": "https://api.github.com/users/rohitgr7/followers", "following_url": "https://api.github.com/users/rohitgr7/following{/other_user}", "gists_url": "https://api.github.com/users/rohitgr7/gists{/gist_id}", "starred_url": "https://api.github.com/users/rohitgr7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rohitgr7/subscriptions", "organizations_url": "https://api.github.com/users/rohitgr7/orgs", "repos_url": "https://api.github.com/users/rohitgr7/repos", "events_url": "https://api.github.com/users/rohitgr7/events{/privacy}", "received_events_url": "https://api.github.com/users/rohitgr7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-21T09:05:05Z", "updated_at": "2019-09-22T05:56:57Z", "closed_at": "2019-09-22T05:56:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIn the [documentation](https://contrib.scikit-learn.org/categorical-encoding/helmert.html) default value for `handle_missing` and `handle_unknown` is `value`.\r\n\r\nBut in the [code](https://github.com/scikit-learn-contrib/categorical-encoding/blob/25accdc9b5b1998ae317e2bcd120464a7b1027bf/category_encoders/helmert.py#L88), it is `indicator`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/211", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/211/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/211/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/211", "id": 496214716, "node_id": "MDU6SXNzdWU0OTYyMTQ3MTY=", "number": 211, "title": "Documentation is outdated", "user": {"login": "pouyana", "id": 2496169, "node_id": "MDQ6VXNlcjI0OTYxNjk=", "avatar_url": "https://avatars0.githubusercontent.com/u/2496169?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pouyana", "html_url": "https://github.com/pouyana", "followers_url": "https://api.github.com/users/pouyana/followers", "following_url": "https://api.github.com/users/pouyana/following{/other_user}", "gists_url": "https://api.github.com/users/pouyana/gists{/gist_id}", "starred_url": "https://api.github.com/users/pouyana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pouyana/subscriptions", "organizations_url": "https://api.github.com/users/pouyana/orgs", "repos_url": "https://api.github.com/users/pouyana/repos", "events_url": "https://api.github.com/users/pouyana/events{/privacy}", "received_events_url": "https://api.github.com/users/pouyana/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-20T08:19:44Z", "updated_at": "2019-10-01T15:37:42Z", "closed_at": "2019-10-01T15:37:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthe documentation in https://contrib.scikit-learn.org/categorical-encoding/ordinal.html is outdated. \r\n\r\nThere, the mapping is defined as:\r\n\r\n```\r\n[{\u2018col\u2019: \u2018col1\u2019, \u2018mapping\u2019: [(None, 0), (\u2018a\u2019, 1), (\u2018b\u2019, 2)]}]\r\n```\r\n\r\nbut in the code https://github.com/scikit-learn-contrib/categorical-encoding/blob/master/category_encoders/ordinal.py#L35 it is defined as:\r\n\r\n```\r\n[{'col': 'col1', 'mapping': {None: 0, 'a': 1, 'b': 2}}]\r\n```\r\n\r\ncould you please update it to reflect this change.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/210", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/210/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/210/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/210", "id": 496036963, "node_id": "MDU6SXNzdWU0OTYwMzY5NjM=", "number": 210, "title": "Slow HashingEncoder?", "user": {"login": "apsears", "id": 4992017, "node_id": "MDQ6VXNlcjQ5OTIwMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4992017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apsears", "html_url": "https://github.com/apsears", "followers_url": "https://api.github.com/users/apsears/followers", "following_url": "https://api.github.com/users/apsears/following{/other_user}", "gists_url": "https://api.github.com/users/apsears/gists{/gist_id}", "starred_url": "https://api.github.com/users/apsears/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apsears/subscriptions", "organizations_url": "https://api.github.com/users/apsears/orgs", "repos_url": "https://api.github.com/users/apsears/repos", "events_url": "https://api.github.com/users/apsears/events{/privacy}", "received_events_url": "https://api.github.com/users/apsears/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-19T21:33:06Z", "updated_at": "2019-09-29T15:03:02Z", "closed_at": "2019-09-29T15:03:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was surprised to find that HashingEncoder is 500x slower than the rest of my transformation pipeline.  Is this just somehow a rare application, can you see how I'm doing something wrong, or am I using the wrong tool for the job?  I would like to embed col1 into into a featn-dimensional space, without having the whole dictionary at the time of fitting.\r\n\r\n```\r\n\r\nimport category_encoders as ce\r\nimport random\r\n\r\nfrom sklearn.pipeline import make_pipeline, FeatureUnion\r\n\r\nimport time\r\nfrom util import ColumnSelector\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nfeat = 'col1'\r\nfeatn = 16\r\n\r\nle = ce.one_hot.OneHotEncoder(cols=[feat,]) # 0.02 seconds / 10k rows\r\nhe = ce.HashingEncoder(n_components=16, cols=['col1',]) # 10 seconds / 10k rows\r\n\r\nUSE_ENCODER = le # he\r\n\r\nxform_list = [(\"hashed_feature_%d\" % 0, make_pipeline(\r\n                    ColumnSelector(columns=[feat,]),\r\n                    # Imputer(strategy=\"most_frequent\"),\r\n                    USE_ENCODER\r\n                )),]\r\n\r\nmini_pipeline = make_pipeline(\r\n        FeatureUnion(transformer_list=xform_list))\r\n\r\nsizes = np.logspace(1,4,4)\r\nprint('Sizes:', sizes)\r\n\r\nd = {'col1': [int(random.randint(1,featn)) for _ in range(10)], 'col2': [3,]*10}\r\ndf = pd.DataFrame(data=d)\r\nprint('Starting df:\\n', df)\r\n\r\nfor size in sizes:\r\n    size = int(size)\r\n    d = {'col1': [int(random.randint(1,featn)) for _ in range(size)], 'col2': [3,]*size}\r\n    df = pd.DataFrame(data=d)\r\n\r\n    time_start = time.time()\r\n    res = mini_pipeline.fit_transform(df.head(int(size)))\r\n    time_end = time.time()\r\n    time_diff = time_end-time_start\r\n    print('size %d:' % int(size),time_diff)\r\n    \r\nprint(res)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/209", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/209/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/209/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/209", "id": 488281805, "node_id": "MDU6SXNzdWU0ODgyODE4MDU=", "number": 209, "title": "CatBoostEncoder Transform method on validation data still showing missing values ", "user": {"login": "pratik-poudel", "id": 37284545, "node_id": "MDQ6VXNlcjM3Mjg0NTQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/37284545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pratik-poudel", "html_url": "https://github.com/pratik-poudel", "followers_url": "https://api.github.com/users/pratik-poudel/followers", "following_url": "https://api.github.com/users/pratik-poudel/following{/other_user}", "gists_url": "https://api.github.com/users/pratik-poudel/gists{/gist_id}", "starred_url": "https://api.github.com/users/pratik-poudel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pratik-poudel/subscriptions", "organizations_url": "https://api.github.com/users/pratik-poudel/orgs", "repos_url": "https://api.github.com/users/pratik-poudel/repos", "events_url": "https://api.github.com/users/pratik-poudel/events{/privacy}", "received_events_url": "https://api.github.com/users/pratik-poudel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-02T17:56:18Z", "updated_at": "2019-09-12T17:18:35Z", "closed_at": "2019-09-12T17:18:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "After applying fit_transform() on train data and transform() on test data there is no missing values in  train data but still missing values in test data.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/208", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/208/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/208/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/208/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/208", "id": 487796339, "node_id": "MDU6SXNzdWU0ODc3OTYzMzk=", "number": 208, "title": "Ordinal encoder leaves previously unseen values as they are during 'transform'", "user": {"login": "yakzan", "id": 15268244, "node_id": "MDQ6VXNlcjE1MjY4MjQ0", "avatar_url": "https://avatars0.githubusercontent.com/u/15268244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yakzan", "html_url": "https://github.com/yakzan", "followers_url": "https://api.github.com/users/yakzan/followers", "following_url": "https://api.github.com/users/yakzan/following{/other_user}", "gists_url": "https://api.github.com/users/yakzan/gists{/gist_id}", "starred_url": "https://api.github.com/users/yakzan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yakzan/subscriptions", "organizations_url": "https://api.github.com/users/yakzan/orgs", "repos_url": "https://api.github.com/users/yakzan/repos", "events_url": "https://api.github.com/users/yakzan/events{/privacy}", "received_events_url": "https://api.github.com/users/yakzan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-31T18:04:59Z", "updated_at": "2019-09-12T17:18:48Z", "closed_at": "2019-09-12T17:18:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "`fit_transform `works well, but once new values start coming up, the OrdinalEncoder just leaves them as they, not replacing them either with -1 or -2, regardless of the `handle_unkown` option is `error `or `value`.\r\n\r\nThe documentation gives the impression that also those brand new values will be encoded as -1 or -2, depending on the parameter choice. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/207", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/207/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/207/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/207", "id": 483800693, "node_id": "MDU6SXNzdWU0ODM4MDA2OTM=", "number": 207, "title": "ImportError: cannot import name 'map' from 'pandas.compat'", "user": {"login": "goerch", "id": 3709434, "node_id": "MDQ6VXNlcjM3MDk0MzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3709434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goerch", "html_url": "https://github.com/goerch", "followers_url": "https://api.github.com/users/goerch/followers", "following_url": "https://api.github.com/users/goerch/following{/other_user}", "gists_url": "https://api.github.com/users/goerch/gists{/gist_id}", "starred_url": "https://api.github.com/users/goerch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goerch/subscriptions", "organizations_url": "https://api.github.com/users/goerch/orgs", "repos_url": "https://api.github.com/users/goerch/repos", "events_url": "https://api.github.com/users/goerch/events{/privacy}", "received_events_url": "https://api.github.com/users/goerch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-22T06:44:51Z", "updated_at": "2019-08-22T07:00:54Z", "closed_at": "2019-08-22T07:00:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "The code \r\n\r\n```\r\nX_train = df_train.drop(columns=['TransactionID', 'isFraud', 'TransactionDT'])\r\ny_train = df_train['isFraud'].values\r\ntarget = TargetEncoder(cols=categorical).fit(X_train, y_train)\r\ndf_train[categorical] = enc.transform(X_train, y_train)\r\ndf_test[categorical] = enc.transform(X_test)\r\n```\r\n\r\ngenerates the traceback\r\n\r\n```\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-12-75d4343ac4a5> in <module>\r\n      6 X_train = df_train.drop(columns=['TransactionID', 'isFraud', 'TransactionDT'])\r\n      7 y_train = df_train['isFraud'].values\r\n----> 8 target = TargetEncoder(cols=categorical).fit(X_train, y_train)\r\n      9 df_train[categorical] = enc.transform(X_train, y_train)\r\n     10 df_test[categorical] = enc.transform(X_test)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\category_encoders\\target_encoder.py in fit(self, X, y, **kwargs)\r\n    138         self.ordinal_encoder = self.ordinal_encoder.fit(X)\r\n    139         X_ordinal = self.ordinal_encoder.transform(X)\r\n--> 140         self.mapping = self.fit_target_encoding(X_ordinal, y)\r\n    141 \r\n    142         X_temp = self.transform(X, override_return_df=True)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\category_encoders\\target_encoder.py in fit_target_encoding(self, X, y)\r\n    168             stats = y.groupby(X[col]).agg(['count', 'mean'])\r\n    169 \r\n--> 170             smoove = 1 / (1 + np.exp(-(stats['count'] - self.min_samples_leaf) / self.smoothing))\r\n    171             smoothing = prior * (1 - smoove) + stats['mean'] * smoove\r\n    172             smoothing[stats['count'] == 1] = prior\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\ops\\__init__.py in wrapper(left, right)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\ops\\__init__.py in na_op(x, y)\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expressions.py in <module>\r\n     12 import pandas.core.common as com\r\n     13 from pandas.core.computation.check import _NUMEXPR_INSTALLED\r\n---> 14 from pandas.core.config import get_option\r\n     15 \r\n     16 if _NUMEXPR_INSTALLED:\r\n\r\nC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\config.py in <module>\r\n     54 from contextlib import contextmanager\r\n     55 import warnings\r\n---> 56 from pandas.compat import map, lmap, u\r\n     57 import pandas.compat as compat\r\n     58 \r\n\r\nImportError: cannot import name 'map' from 'pandas.compat' (C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\compat\\__init__.py)\r\n```\r\n\r\nSeems pandas-compat is a missing dependency.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/206", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/206/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/206/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/206/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/206", "id": 480555103, "node_id": "MDU6SXNzdWU0ODA1NTUxMDM=", "number": 206, "title": "TargetEncoder inside ColumnTransformer", "user": {"login": "MartykQ", "id": 39058146, "node_id": "MDQ6VXNlcjM5MDU4MTQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/39058146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartykQ", "html_url": "https://github.com/MartykQ", "followers_url": "https://api.github.com/users/MartykQ/followers", "following_url": "https://api.github.com/users/MartykQ/following{/other_user}", "gists_url": "https://api.github.com/users/MartykQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartykQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartykQ/subscriptions", "organizations_url": "https://api.github.com/users/MartykQ/orgs", "repos_url": "https://api.github.com/users/MartykQ/repos", "events_url": "https://api.github.com/users/MartykQ/events{/privacy}", "received_events_url": "https://api.github.com/users/MartykQ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-14T08:44:16Z", "updated_at": "2019-08-14T17:20:13Z", "closed_at": "2019-08-14T09:11:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having some problems with using TaregetEncoder inside of sciki's ColumnTransformer. I saw people having simmiliar issues with using Pipelines/ColumnTranformer but have not found any solution. \r\n\r\n```\r\ndf = pd.read_csv('data.csv')\r\n\r\nct = ColumnTransformer(\r\n    [\r\n        ('standard', StandardScaler(), ['comments']),\r\n        ('target', TargetEncoder(), ['severity'])\r\n    ]\r\n)\r\n\r\n```\r\n\r\nAbove code gives me:\r\n\r\n```\r\n\r\n/home/user/anaconda3/lib/python3.7/site-packages/sklearn/preprocessing/data.py:645: DataConversionWarning: Data with input dtype int64 were all converted to float64 by StandardScaler.\r\n  return self.partial_fit(X, y)\r\n/home/user/anaconda3/lib/python3.7/site-packages/sklearn/base.py:464: DataConversionWarning: Data with input dtype int64 were all converted to float64 by StandardScaler.\r\n  return self.fit(X, **fit_params).transform(X)\r\n  \r\nTraceback (most recent call last):\r\n  File \"/home/user/Desktop/ML_PROJECT/note.py\", line 23, in <module>\r\n    ct.fit_transform(pd_df)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/compose/_column_transformer.py\", line 449, in fit_transform\r\n    result = self._fit_transform(X, y, _fit_transform_one)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/compose/_column_transformer.py\", line 393, in _fit_transform\r\n    fitted=fitted, replace_strings=True))\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/parallel.py\", line 920, in __call__\r\n    while self.dispatch_one_batch(iterator):\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/parallel.py\", line 759, in dispatch_one_batch\r\n    self._dispatch(tasks)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/parallel.py\", line 716, in _dispatch\r\n    job = self._backend.apply_async(batch, callback=cb)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/_parallel_backends.py\", line 182, in apply_async\r\n    result = ImmediateResult(func)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/_parallel_backends.py\", line 549, in __init__\r\n    self.results = batch()\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/parallel.py\", line 225, in __call__\r\n    for func, args, kwargs in self.items]\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/externals/joblib/parallel.py\", line 225, in <listcomp>\r\n    for func, args, kwargs in self.items]\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/sklearn/pipeline.py\", line 614, in _fit_transform_one\r\n    res = transformer.fit_transform(X, y, **fit_params)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/category_encoders/target_encoder.py\", line 251, in fit_transform\r\n    return self.fit(X, y, **fit_params).transform(X, y)\r\n  File \"/home/user/anaconda3/lib/python3.7/site-packages/category_encoders/target_encoder.py\", line 117, in fit\r\n    if X.shape[0] != y.shape[0]:\r\nAttributeError: 'NoneType' object has no attribute 'shape'\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/205", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/205/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/205/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/205/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/205", "id": 479697436, "node_id": "MDU6SXNzdWU0Nzk2OTc0MzY=", "number": 205, "title": "your algorithm for categorical values calculation algorithm is mistaken", "user": {"login": "Sandy4321", "id": 11426119, "node_id": "MDQ6VXNlcjExNDI2MTE5", "avatar_url": "https://avatars0.githubusercontent.com/u/11426119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sandy4321", "html_url": "https://github.com/Sandy4321", "followers_url": "https://api.github.com/users/Sandy4321/followers", "following_url": "https://api.github.com/users/Sandy4321/following{/other_user}", "gists_url": "https://api.github.com/users/Sandy4321/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sandy4321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sandy4321/subscriptions", "organizations_url": "https://api.github.com/users/Sandy4321/orgs", "repos_url": "https://api.github.com/users/Sandy4321/repos", "events_url": "https://api.github.com/users/Sandy4321/events{/privacy}", "received_events_url": "https://api.github.com/users/Sandy4321/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-08-12T15:05:01Z", "updated_at": "2019-09-04T13:02:55Z", "closed_at": "2019-09-04T13:02:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "as catboost team state here\r\nhttps://github.com/catboost/catboost/issues/948\r\nhttp://contrib.scikit-learn.org/categorical-encoding/catboost.html\r\nyour algorithm for categorical values calculation algorithm is mistaken\r\nyou can use catboost code to understand what algorithms is and how to fix mistakes\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/200", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/200/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/200/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/200", "id": 468002469, "node_id": "MDU6SXNzdWU0NjgwMDI0Njk=", "number": 200, "title": "M-Estimate Encoder ", "user": {"login": "DenisVorotyntsev", "id": 29483124, "node_id": "MDQ6VXNlcjI5NDgzMTI0", "avatar_url": "https://avatars0.githubusercontent.com/u/29483124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DenisVorotyntsev", "html_url": "https://github.com/DenisVorotyntsev", "followers_url": "https://api.github.com/users/DenisVorotyntsev/followers", "following_url": "https://api.github.com/users/DenisVorotyntsev/following{/other_user}", "gists_url": "https://api.github.com/users/DenisVorotyntsev/gists{/gist_id}", "starred_url": "https://api.github.com/users/DenisVorotyntsev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DenisVorotyntsev/subscriptions", "organizations_url": "https://api.github.com/users/DenisVorotyntsev/orgs", "repos_url": "https://api.github.com/users/DenisVorotyntsev/repos", "events_url": "https://api.github.com/users/DenisVorotyntsev/events{/privacy}", "received_events_url": "https://api.github.com/users/DenisVorotyntsev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-15T08:33:34Z", "updated_at": "2019-07-17T09:31:08Z", "closed_at": "2019-07-17T09:31:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've noticed that formula for MEstimateEncoder contradicts the logic of mean target of category and also differ from formulas in [literature](http://helios.mm.di.uoa.gr/~rouvas/ssi/sigkdd/sigkdd.vol3.1/barreca.pdf): \r\n\r\n[m_estimate.py](https://github.com/scikit-learn-contrib/categorical-encoding/blob/master/category_encoders/m_estimate.py), line 256\r\n\r\n`estimate = (stats['sum'] + prior * self.m) / (self._sum + self.m)`\r\n\r\nshould be replaced with \r\n\r\n`estimate = (stats['sum'] + prior * self.m) / (stats['count'] + self.m)`\r\n\r\nThe current formula represents something proportional to the frequency of a positive target, the second - mean target for the category. I decided to test both formulas during my benchmarking and performance of the current formula was either the same or better (I have not included it in my [repo](https://github.com/DenisVorotyntsev/CategoricalEncodingBenchmark) though). \r\n\r\nHowever, I think it should not be called M-Estimate Encoder because it doest calculated with M-Estimate formula. \r\n\r\n**Suggestions**: \r\n\r\n1.  Rename `MEstimateEncoder` to `TargetSumEncoder`\r\n2. Add real `MEstimateEncoder`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/196", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/196/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/196/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/196/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/196", "id": 462106470, "node_id": "MDU6SXNzdWU0NjIxMDY0NzA=", "number": 196, "title": "BaseNEncoder: inverse_transform is incompatible with Numpy inputs", "user": {"login": "Tallic", "id": 18192942, "node_id": "MDQ6VXNlcjE4MTkyOTQy", "avatar_url": "https://avatars3.githubusercontent.com/u/18192942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tallic", "html_url": "https://github.com/Tallic", "followers_url": "https://api.github.com/users/Tallic/followers", "following_url": "https://api.github.com/users/Tallic/following{/other_user}", "gists_url": "https://api.github.com/users/Tallic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tallic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tallic/subscriptions", "organizations_url": "https://api.github.com/users/Tallic/orgs", "repos_url": "https://api.github.com/users/Tallic/repos", "events_url": "https://api.github.com/users/Tallic/events{/privacy}", "received_events_url": "https://api.github.com/users/Tallic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-28T16:06:48Z", "updated_at": "2019-06-29T16:29:06Z", "closed_at": "2019-06-29T16:29:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Listing \r\n```\r\nimport category_encoders\r\nimport numpy as np\r\n\r\narr = np.array([[f\"cat{i}\"] for i in np.random.randint(0, 10, 100)])\r\n\r\nenc = category_encoders.BaseNEncoder(return_df=False)\r\nenc.fit(arr)\r\n\r\narr_encoded = enc.transform(arr)\r\narr_decoded = enc.inverse_transform(arr_encoded)\r\n\r\nassert np.array_equal(arr, arr_decoded)\r\n```\r\n\r\nwill lead to a `TypeError: 'deep' is an invalid keyword argument for this function` exception contradicting the [API documentation](http://contrib.scikit-learn.org/categorical-encoding/basen.html#category_encoders.basen.BaseNEncoder.inverse_transform) that it can handle Numpy arrays.\r\nNote: Array-like is anything that can be converted to a Numpy array.\r\n\r\n**Problem** is *line 261* in basen.py that uses the Pandas only argument `deep` that does not exist on the Numpy side. A second potential problem location might be *line 320* using the same argument.\r\n\r\n**Solution A** remove the `deep` arguments on the copy statements as a shallow copy should suffice -- you are changing the array by mapping the values to newly created once.\r\n**Solution B** make the copy conditional on the input type -- with `deep` for data frames and without for Numpy arrays.\r\n\r\nPackage | Version | Source\r\n---- | ---- | ---- |\r\ncategory_encoder | 2.0.0 | conda-forge\r\nnumpy | 1.16.3 | conda-forge\r\npandas | 0.23.4 | conda-forge\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/193", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/193/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/193/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/193/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/193", "id": 452415228, "node_id": "MDU6SXNzdWU0NTI0MTUyMjg=", "number": 193, "title": "OrdinalEncoder raising an exception", "user": {"login": "viglia", "id": 5112977, "node_id": "MDQ6VXNlcjUxMTI5Nzc=", "avatar_url": "https://avatars2.githubusercontent.com/u/5112977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viglia", "html_url": "https://github.com/viglia", "followers_url": "https://api.github.com/users/viglia/followers", "following_url": "https://api.github.com/users/viglia/following{/other_user}", "gists_url": "https://api.github.com/users/viglia/gists{/gist_id}", "starred_url": "https://api.github.com/users/viglia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viglia/subscriptions", "organizations_url": "https://api.github.com/users/viglia/orgs", "repos_url": "https://api.github.com/users/viglia/repos", "events_url": "https://api.github.com/users/viglia/events{/privacy}", "received_events_url": "https://api.github.com/users/viglia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-06-05T09:59:52Z", "updated_at": "2019-07-11T04:58:14Z", "closed_at": "2019-07-11T04:58:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to encode some ordinal features as described in the doc:\r\n\r\n```\r\nordinal_cols_mapping = [{\r\n    \"col\":\"GarageCond\",    \r\n    \"mapping\": [\r\n        ('Ex',5), \r\n        ('Gd',4), \r\n        ('TA',3), \r\n        ('Fa',2), \r\n        ('Po',1), \r\n        ('NA',0)\r\n    ]},\r\n    {\r\n    \"col\":\"GarageQual\",    \r\n    \"mapping\": [\r\n        ('Ex',5), \r\n        ('Gd',4), \r\n        ('TA',3), \r\n        ('Fa',2), \r\n        ('Po',1), \r\n        ('NA',0)\r\n    ]},\r\n    {\r\n    \"col\":\"FireplaceQu\",    \r\n    \"mapping\": [\r\n        ('Ex',5), \r\n        ('Gd',4), \r\n        ('TA',3), \r\n        ('Fa',2), \r\n        ('Po',1), \r\n        ('NA',0)\r\n    ]},\r\n    {\r\n    \"col\":\"BsmtCond\",    \r\n    \"mapping\": [\r\n        ('Ex',5), \r\n        ('Gd',4), \r\n        ('TA',3), \r\n        ('Fa',2), \r\n        ('Po',1), \r\n        ('NA',0)\r\n    ]},\r\n    {\r\n    \"col\":\"BsmtQual\",    \r\n    \"mapping\": [\r\n        ('Ex',5), \r\n        ('Gd',4), \r\n        ('TA',3), \r\n        ('Fa',2), \r\n        ('Po',1), \r\n        ('NA',0)\r\n    ]},\r\n    {\r\n    \"col\":\"KitchenQual\",    \r\n    \"mapping\": [\r\n        ('Ex',5),\r\n        ('Gd',4),\r\n        ('TA',3),\r\n        ('Fa',2),\r\n        ('Po',1)\r\n    ]},\r\n    {\r\n    \"col\":\"HeatingQC\",    \r\n    \"mapping\": [\r\n        ('Ex',5),\r\n        ('Gd',4),\r\n        ('TA',3),\r\n        ('Fa',2),\r\n        ('Po',1)\r\n    ]},\r\n    {\r\n    \"col\":\"ExterCond\",    \r\n    \"mapping\": [\r\n        ('Ex',5),\r\n        ('Gd',4),\r\n        ('TA',3),\r\n        ('Fa',2),\r\n        ('Po',1)\r\n    ]},\r\n    {\r\n    \"col\":\"ExterQual\",    \r\n    \"mapping\": [\r\n        ('Ex',5),\r\n        ('Gd',4),\r\n        ('TA',3),\r\n        ('Fa',2),\r\n        ('Po',1)\r\n    ]},\r\n    {\r\n    \"col\":\"PoolQC\",    \r\n    \"mapping\": [\r\n        ('Ex',4),\r\n        ('Gd',3),\r\n        ('TA',2),\r\n        ('Fa',1),\r\n        ('NA',0)\r\n    ]}\r\n]\r\n\r\nencoder = OrdinalEncoder(mapping = ordinal_cols_mapping, return_df = True)  \r\ndf_train = encoder.fit_transform(train)\r\n```\r\n\r\nThe code above, though, raise the following exception:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-39-60605f2247b8> in <module>()\r\n      1 encoder = OrdinalEncoder(mapping = ordinal_cols_mapping, return_df = True)\r\n----> 2 df_train = encoder.fit_transform(train)\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self, X, y, **fit_params)\r\n    460         if y is None:\r\n    461             # fit method of arity 1 (unsupervised transformation)\r\n--> 462             return self.fit(X, **fit_params).transform(X)\r\n    463         else:\r\n    464             # fit method of arity 2 (supervised transformation)\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/category_encoders/ordinal.py in fit(self, X, y, **kwargs)\r\n    139             cols=self.cols,\r\n    140             handle_unknown=self.handle_unknown,\r\n--> 141             handle_missing=self.handle_missing\r\n    142         )\r\n    143         self.mapping = categories\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/category_encoders/ordinal.py in ordinal_encoding(X_in, mapping, cols, handle_unknown, handle_missing)\r\n    288             for switch in mapping:\r\n    289                 column = switch.get('col')\r\n--> 290                 X[column] = X[column].map(switch['mapping'])\r\n    291 \r\n    292                 try:\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/pandas/core/series.py in map(self, arg, na_action)\r\n   2996         \"\"\"\r\n   2997         new_values = super(Series, self)._map_values(\r\n-> 2998             arg, na_action=na_action)\r\n   2999         return self._constructor(new_values,\r\n   3000                                  index=self.index).__finalize__(self)\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/pandas/core/base.py in _map_values(self, mapper, na_action)\r\n   1002 \r\n   1003         # mapper is a function\r\n-> 1004         new_values = map_f(values, mapper)\r\n   1005 \r\n   1006         return new_values\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/pandas/core/base.py in <lambda>(values, f)\r\n    990             if na_action is not None:\r\n    991                 raise NotImplementedError\r\n--> 992             map_f = lambda values, f: values.map(f)\r\n    993         else:\r\n    994             values = self.astype(object)\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/pandas/core/arrays/categorical.py in map(self, mapper)\r\n   1189         Index(['first', 'second', nan], dtype='object')\r\n   1190         \"\"\"\r\n-> 1191         new_categories = self.categories.map(mapper)\r\n   1192         try:\r\n   1193             return self.from_codes(self._codes.copy(),\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/pandas/core/indexes/base.py in map(self, mapper, na_action)\r\n   3447         from .multi import MultiIndex\r\n   3448         new_values = super(Index, self)._map_values(\r\n-> 3449             mapper, na_action=na_action)\r\n   3450 \r\n   3451         attributes = self._get_attributes_dict()\r\n\r\n~/miniconda3/envs/Python3.6/lib/python3.6/site-packages/pandas/core/base.py in _map_values(self, mapper, na_action)\r\n   1002 \r\n   1003         # mapper is a function\r\n-> 1004         new_values = map_f(values, mapper)\r\n   1005 \r\n   1006         return new_values\r\n\r\npandas/_libs/src/inference.pyx in pandas._libs.lib.map_infer()\r\n\r\nTypeError: 'list' object is not callable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/184", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/184/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/184/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/184", "id": 438943785, "node_id": "MDU6SXNzdWU0Mzg5NDM3ODU=", "number": 184, "title": "Issue using RandomizedSearch with TargetEncoder", "user": {"login": "Casyfill", "id": 2675621, "node_id": "MDQ6VXNlcjI2NzU2MjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/2675621?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Casyfill", "html_url": "https://github.com/Casyfill", "followers_url": "https://api.github.com/users/Casyfill/followers", "following_url": "https://api.github.com/users/Casyfill/following{/other_user}", "gists_url": "https://api.github.com/users/Casyfill/gists{/gist_id}", "starred_url": "https://api.github.com/users/Casyfill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Casyfill/subscriptions", "organizations_url": "https://api.github.com/users/Casyfill/orgs", "repos_url": "https://api.github.com/users/Casyfill/repos", "events_url": "https://api.github.com/users/Casyfill/events{/privacy}", "received_events_url": "https://api.github.com/users/Casyfill/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-04-30T19:38:48Z", "updated_at": "2020-01-10T15:05:13Z", "closed_at": "2020-01-10T15:04:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running TargetEncoder as part of the Pipeline I am trying to tune using RandomizedSearch.\r\nHowever, I am getting issues:\r\n```\r\nRuntimeError: Cannot clone object TargetEncoder(cols=['submarket'], drop_invariant=True, handle_missing='value',\r\n       handle_unknown='value', min_samples_leaf=10, return_df=True,\r\n       smoothing=0.67772065553023, verbose=0), as the constructor either does not set or modifies parameter smoothing\r\n```\r\nIs it a bug or am I missing something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/181", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/181/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/181/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/181/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/181", "id": 435511248, "node_id": "MDU6SXNzdWU0MzU1MTEyNDg=", "number": 181, "title": "Issue with `TargetEcoder` when pandas index is not sorted", "user": {"login": "michael135", "id": 8559652, "node_id": "MDQ6VXNlcjg1NTk2NTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/8559652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michael135", "html_url": "https://github.com/michael135", "followers_url": "https://api.github.com/users/michael135/followers", "following_url": "https://api.github.com/users/michael135/following{/other_user}", "gists_url": "https://api.github.com/users/michael135/gists{/gist_id}", "starred_url": "https://api.github.com/users/michael135/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michael135/subscriptions", "organizations_url": "https://api.github.com/users/michael135/orgs", "repos_url": "https://api.github.com/users/michael135/repos", "events_url": "https://api.github.com/users/michael135/events{/privacy}", "received_events_url": "https://api.github.com/users/michael135/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1172028483, "node_id": "MDU6TGFiZWwxMTcyMDI4NDgz", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/Release", "name": "Release", "color": "c9960a", "default": false, "description": ""}, {"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-21T13:44:33Z", "updated_at": "2019-05-07T06:59:41Z", "closed_at": "2019-05-07T06:59:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Very simplie example:\r\n\r\n```import category_encoders as ce\r\nfrom sklearn.datasets import load_boston\r\nfrom sklearn.model_selection import train_test_split\r\nimport pandas as pd\r\n\r\nboston = load_boston()\r\ny = pd.Series(boston.target)\r\nX = pd.DataFrame(boston.data, columns=boston.feature_names)\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y,\\\r\n                                                    test_size=0.33, random_state=123)\r\n\r\n\r\nenc = ce.TargetEncoder(cols=['CHAS', 'RAD'])\r\nX_encoded = enc.fit_transform(X_train, y_train)\r\n```\r\nHas the following error:\r\n>> ```IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/180", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/180/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/180/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/180", "id": 431690205, "node_id": "MDU6SXNzdWU0MzE2OTAyMDU=", "number": 180, "title": "OrdinalEncoder has extraneous nan column when using handle_missing = nan", "user": {"login": "datarian", "id": 36982755, "node_id": "MDQ6VXNlcjM2OTgyNzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/36982755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datarian", "html_url": "https://github.com/datarian", "followers_url": "https://api.github.com/users/datarian/followers", "following_url": "https://api.github.com/users/datarian/following{/other_user}", "gists_url": "https://api.github.com/users/datarian/gists{/gist_id}", "starred_url": "https://api.github.com/users/datarian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datarian/subscriptions", "organizations_url": "https://api.github.com/users/datarian/orgs", "repos_url": "https://api.github.com/users/datarian/repos", "events_url": "https://api.github.com/users/datarian/events{/privacy}", "received_events_url": "https://api.github.com/users/datarian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-10T20:10:45Z", "updated_at": "2019-07-08T10:05:53Z", "closed_at": "2019-07-08T10:05:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I discovered this recently. It's not a real problem because it's a constant column with all zeros, but still it's not nice and might lead to problems because there's an extra column added and hence dimensions not as expected.\r\n\r\nI suspect it originates in the crude way that feature_names are constructed during fit() (which I have to blame myself for...) but did not have the time to really dig into it yet.\r\n\r\nSince other encoders depend on OrdinalEncoder, this propagates. Maybe it should be tackled before the next release? Willing to look into it, but can't commit to a timeframe currently.\r\n\r\nJust more of a note right now, will add more info soon.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/178", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/178/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/178/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/178", "id": 429904934, "node_id": "MDU6SXNzdWU0Mjk5MDQ5MzQ=", "number": 178, "title": "Release on Pypi?", "user": {"login": "stuppie", "id": 5470131, "node_id": "MDQ6VXNlcjU0NzAxMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/5470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stuppie", "html_url": "https://github.com/stuppie", "followers_url": "https://api.github.com/users/stuppie/followers", "following_url": "https://api.github.com/users/stuppie/following{/other_user}", "gists_url": "https://api.github.com/users/stuppie/gists{/gist_id}", "starred_url": "https://api.github.com/users/stuppie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stuppie/subscriptions", "organizations_url": "https://api.github.com/users/stuppie/orgs", "repos_url": "https://api.github.com/users/stuppie/repos", "events_url": "https://api.github.com/users/stuppie/events{/privacy}", "received_events_url": "https://api.github.com/users/stuppie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1172028483, "node_id": "MDU6TGFiZWwxMTcyMDI4NDgz", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/Release", "name": "Release", "color": "c9960a", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-05T19:35:34Z", "updated_at": "2019-05-07T07:00:26Z", "closed_at": "2019-05-07T07:00:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest release on Pypi was a year and a half ago. Could it be updated? Thank you in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/177", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/177/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/177/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/177/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/177", "id": 428411537, "node_id": "MDU6SXNzdWU0Mjg0MTE1Mzc=", "number": 177, "title": "Mean encoding for categorical featurers", "user": {"login": "ayush1999", "id": 24913958, "node_id": "MDQ6VXNlcjI0OTEzOTU4", "avatar_url": "https://avatars2.githubusercontent.com/u/24913958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayush1999", "html_url": "https://github.com/ayush1999", "followers_url": "https://api.github.com/users/ayush1999/followers", "following_url": "https://api.github.com/users/ayush1999/following{/other_user}", "gists_url": "https://api.github.com/users/ayush1999/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayush1999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayush1999/subscriptions", "organizations_url": "https://api.github.com/users/ayush1999/orgs", "repos_url": "https://api.github.com/users/ayush1999/repos", "events_url": "https://api.github.com/users/ayush1999/events{/privacy}", "received_events_url": "https://api.github.com/users/ayush1999/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-02T19:51:25Z", "updated_at": "2019-04-02T20:05:57Z", "closed_at": "2019-04-02T20:05:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I was looking at the docs at couldn't find the mean encoding implementation. Did I miss something, or is it not implemented yet?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/176", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/176/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/176/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/176", "id": 426290972, "node_id": "MDU6SXNzdWU0MjYyOTA5NzI=", "number": 176, "title": "Ordinal Encoder encodes unseen values to 0 with 'impute'", "user": {"login": "macwanj", "id": 32582237, "node_id": "MDQ6VXNlcjMyNTgyMjM3", "avatar_url": "https://avatars3.githubusercontent.com/u/32582237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/macwanj", "html_url": "https://github.com/macwanj", "followers_url": "https://api.github.com/users/macwanj/followers", "following_url": "https://api.github.com/users/macwanj/following{/other_user}", "gists_url": "https://api.github.com/users/macwanj/gists{/gist_id}", "starred_url": "https://api.github.com/users/macwanj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/macwanj/subscriptions", "organizations_url": "https://api.github.com/users/macwanj/orgs", "repos_url": "https://api.github.com/users/macwanj/repos", "events_url": "https://api.github.com/users/macwanj/events{/privacy}", "received_events_url": "https://api.github.com/users/macwanj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1172028483, "node_id": "MDU6TGFiZWwxMTcyMDI4NDgz", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/Release", "name": "Release", "color": "c9960a", "default": false, "description": ""}, {"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-28T04:19:05Z", "updated_at": "2019-05-07T07:00:10Z", "closed_at": "2019-05-07T07:00:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "From the docs, I am expecting to see the `OrdinalEncoder` impute unseen values to -1. Instead, it encodes it to 0. Is this a change in design or a possible bug?\r\n\r\n```\r\nimport pandas as pd\r\nfrom sklearn.preprocessing import LabelEncoder\r\nfrom collections import defaultdict\r\nimport category_encoders as ce\r\n\r\ndf = pd.DataFrame({\r\n    'pets': ['cat', 'dog', 'cat', 'monkey', 'dog', 'dog'],\r\n    'owner': ['Champ', 'Ron', 'Brick', 'Champ', 'Veronica', 'Ron'],\r\n    'location': ['San_Diego', 'New_York', 'New_York', 'San_Diego', 'San_Diego',\r\n                 'New_York']})\r\n\r\nnew_df = pd.DataFrame({\r\n    'pets': ['cat', 'dodo', 'monkey'],\r\n    'owner': ['Champ', 'Boo', 'Brick'],\r\n    'location': ['San_Diego', 'Toronto', 'New_York']})\r\n\r\n# specify categorical columns\r\ncat_cols = ['pets', 'owner', 'location']\r\n\r\nle = ce.OrdinalEncoder(cols=cat_cols,\r\n                       return_df=True,\r\n                       handle_unknown='impute')\r\n\r\nencoded_df = le.fit_transform(df)\r\n\r\nencoded_new_df = le.transform(new_df)\r\n\r\nprint(encoded_new_df)\r\n   pets  owner  location\r\n0     1      1         1\r\n1     0      0         0\r\n2     3      3         2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/164", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/164/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/164/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/164", "id": 396174717, "node_id": "MDU6SXNzdWUzOTYxNzQ3MTc=", "number": 164, "title": "New target encoders", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-05T15:36:35Z", "updated_at": "2019-01-20T13:38:46Z", "closed_at": "2019-01-20T13:38:46Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Branch `new_target_encoders` contains 3 new variants of TargetEncoder (log-odds ratio estimated with empirical Bayes, likelihood estimated with empirical Bayes, and m-probability estimate). They are all quite similar. But since all the contrast encoders (like SumEncoder or HelmertEncoder) have their own separate file, so do these.\r\n\r\nShould they be added into the master branch?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/163", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/163/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/163/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/163", "id": 395624763, "node_id": "MDU6SXNzdWUzOTU2MjQ3NjM=", "number": 163, "title": "test_string_index() raises a warning", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-03T15:55:22Z", "updated_at": "2019-04-10T10:48:04Z", "closed_at": "2019-04-10T10:48:04Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "When we execute `test_encoders.test_string_index()` on LeaveOneOutEncoder, it raises a warning:\r\n```\r\nRuntimeWarning: '<' not supported between instances of 'int' and 'str', sort order is undefined for incomparable objects\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/159", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/159/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/159/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/159", "id": 394029659, "node_id": "MDU6SXNzdWUzOTQwMjk2NTk=", "number": 159, "title": "1.4.0 Release Organization", "user": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1172028483, "node_id": "MDU6TGFiZWwxMTcyMDI4NDgz", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/Release", "name": "Release", "color": "c9960a", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/4", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/4", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/4/labels", "id": 3923445, "node_id": "MDk6TWlsZXN0b25lMzkyMzQ0NQ==", "number": 4, "title": "v1.4.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 1, "state": "open", "created_at": "2018-12-25T15:08:03Z", "updated_at": "2019-05-02T15:11:14Z", "due_on": null, "closed_at": null}, "comments": 17, "created_at": "2018-12-25T15:08:08Z", "updated_at": "2019-05-02T15:11:14Z", "closed_at": "2019-05-02T15:11:14Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Hey all, been away from the project for a bit, but I'm going back through all of the issues and PRs worked on recently (looks like a bunch of good progress!). Special thanks to @janmotl for all of the work as primary maintainer over the past months.\r\n\r\nOur last release was 1.3.0 on October 14th.  Since then ya'll have:\r\n\r\n- Sped up the TargetEncoder and LeaveOneOutEncoder w/ vectorization (significantly)\r\n- Added support for Categorical types in many encoders\r\n- Implemented get_feature_names in remaining transformers\r\n- Improved testing coverage and quality\r\n- Solved edge cases in repeated column names for some transformers\r\n- Added support for transforming pandas Series as well as DataFrames and numpy Arrays\r\n- Fixed inverse transform for many encoders\r\n- Lots of smaller performance enhancements and code cleanups\r\n\r\nWhich I think is a quite full set of features to constitute a release.  I will be opening a separate issue to discuss how we as a community can improve our release cycle, but for now will be going through open issues and tagging anything that should be included before the v1.4.0 release. Any input on what should or shouldn't be completed prior to release is welcome. \r\n\r\nThank you all for the work and support this year, and Happy Holidays.  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/158", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/158/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/158/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/158/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/158", "id": 389531071, "node_id": "MDU6SXNzdWUzODk1MzEwNzE=", "number": 158, "title": "Pickling TargetEncoder", "user": {"login": "WithPrecedent", "id": 42685088, "node_id": "MDQ6VXNlcjQyNjg1MDg4", "avatar_url": "https://avatars1.githubusercontent.com/u/42685088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WithPrecedent", "html_url": "https://github.com/WithPrecedent", "followers_url": "https://api.github.com/users/WithPrecedent/followers", "following_url": "https://api.github.com/users/WithPrecedent/following{/other_user}", "gists_url": "https://api.github.com/users/WithPrecedent/gists{/gist_id}", "starred_url": "https://api.github.com/users/WithPrecedent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WithPrecedent/subscriptions", "organizations_url": "https://api.github.com/users/WithPrecedent/orgs", "repos_url": "https://api.github.com/users/WithPrecedent/repos", "events_url": "https://api.github.com/users/WithPrecedent/events{/privacy}", "received_events_url": "https://api.github.com/users/WithPrecedent/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-10T23:25:13Z", "updated_at": "2018-12-12T19:09:53Z", "closed_at": "2018-12-12T19:09:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm having difficulty applying a fit TargetEncoder to new data. For the model creation, these are the key portions of my code:\r\n\r\nencoder = ce.TargetEncoder(cols = cols)\r\nencoder.fit(X, y)\r\nX = encoder.transform(X.reset_index(drop = True)) \r\npickle.dump(encoder, open(export_path, 'wb'))\r\n\r\nI also tried assigning the fit encoder to a variable and pickling that variable (hoping it would make a difference):\r\n\r\nencoder = ce.TargetEncoder(cols = cols)\r\nfit_encoder = encoder.fit(X, y)\r\nX = encoder.transform(X.reset_index(drop = True)) \r\npickle.dump(fit_encoder, open(export_path, 'wb'))\r\n\r\nWhen I load the new data into a prediction module, this is my code:\r\nencoder = pickle.load(open(paths.encoder, 'rb'))\r\ndata = encoder.transform(data.reset_index(drop = True))\r\n\r\nWhen I print(encoder) in the prediction module, this is what I get:\r\nTargetEncoder(cols=[variable list],\r\n       drop_invariant=False, handle_unknown='impute', impute_missing=True,\r\n       min_samples_leaf=1, return_df=True, smoothing=1.0, verbose=0)\r\n\r\nBut regardless of which code I use for the model creation and pickling, 'transform' doesn't actually change the new data. So, when trying to get predicted probabilities from my xgboost model for the new data, it gives me a ValueError. To debug, I also have printed the datatypes immediately before and after the transform in the model and prediction modules. But the datatypes only change in the modeling module (and not the prediction module)\r\n\r\nI assume I'm doing something wrong in the pickling process because I'm not too familiar with pickling models and algorithms, but couldn't find any documentation. If pickle is not the preferred storage medium, I'm open to using something else. Any help would be appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/157", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/157/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/157/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/157", "id": 388989265, "node_id": "MDU6SXNzdWUzODg5ODkyNjU=", "number": 157, "title": "Are you sure ahout the speed of target-encoding\uff1f", "user": {"login": "jiangxiaoshuaiya", "id": 35692899, "node_id": "MDQ6VXNlcjM1NjkyODk5", "avatar_url": "https://avatars1.githubusercontent.com/u/35692899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiangxiaoshuaiya", "html_url": "https://github.com/jiangxiaoshuaiya", "followers_url": "https://api.github.com/users/jiangxiaoshuaiya/followers", "following_url": "https://api.github.com/users/jiangxiaoshuaiya/following{/other_user}", "gists_url": "https://api.github.com/users/jiangxiaoshuaiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiangxiaoshuaiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiangxiaoshuaiya/subscriptions", "organizations_url": "https://api.github.com/users/jiangxiaoshuaiya/orgs", "repos_url": "https://api.github.com/users/jiangxiaoshuaiya/repos", "events_url": "https://api.github.com/users/jiangxiaoshuaiya/events{/privacy}", "received_events_url": "https://api.github.com/users/jiangxiaoshuaiya/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-09T05:30:40Z", "updated_at": "2018-12-25T15:13:18Z", "closed_at": "2018-12-25T15:13:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I actually didn't know what had happened, but it's real a thing. When i used target encoding transform my 'id' ,it was fifth time, yes, it's still work, but it took me the whole afternoon.I think i got a problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/155", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/155/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/155/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/155/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/155", "id": 381683989, "node_id": "MDU6SXNzdWUzODE2ODM5ODk=", "number": 155, "title": "Support Numpy arrays as target columns", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-11-16T17:03:14Z", "updated_at": "2019-02-11T12:10:30Z", "closed_at": "2019-02-11T12:10:30Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently, the encoders do not accept Numpy arrays as `y`, even if the array contains just a single column/row:\r\n\r\n```python\r\n    def test_numpy_column(self):\r\n        X = pd.DataFrame({'x':['a', 'b', 'c']})\r\n        np.random.seed(1) # In order to guarantee that \"y\" will contain both, True and False\r\n        y = np.random.rand(len(X), 1)>0.5\r\n        # y = y[:,0]\r\n        for encoder_name in encoders.__all__:\r\n            with self.subTest(encoder_name=encoder_name):\r\n                enc = getattr(encoders, encoder_name)()\r\n                _ = enc.fit_transform(X, y)\r\n\r\n    def test_numpy_row(self):\r\n        X = pd.DataFrame({'x':['a', 'b', 'c']})\r\n        np.random.seed(1)  # In order to guarantee that \"y\" will contain both, True and False\r\n        y = np.random.rand(1, len(X)) > 0.5\r\n        # y = y[0, :]\r\n        for encoder_name in encoders.__all__:\r\n            with self.subTest(encoder_name=encoder_name):\r\n                enc = getattr(encoders, encoder_name)()\r\n                _ = enc.fit_transform(X, y)\r\n```\r\n\r\nMaybe we could write an utility function in `utils.py` that would take care of converting the input into pd.Series? Something similar to `convert_input(X)` function? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/154", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/154/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/154/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/154", "id": 378054486, "node_id": "MDU6SXNzdWUzNzgwNTQ0ODY=", "number": 154, "title": "OneHotEncoder value error when all categories are unseen for handle_unknown='ignore'", "user": {"login": "joshuahyatt", "id": 43889096, "node_id": "MDQ6VXNlcjQzODg5MDk2", "avatar_url": "https://avatars1.githubusercontent.com/u/43889096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshuahyatt", "html_url": "https://github.com/joshuahyatt", "followers_url": "https://api.github.com/users/joshuahyatt/followers", "following_url": "https://api.github.com/users/joshuahyatt/following{/other_user}", "gists_url": "https://api.github.com/users/joshuahyatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshuahyatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshuahyatt/subscriptions", "organizations_url": "https://api.github.com/users/joshuahyatt/orgs", "repos_url": "https://api.github.com/users/joshuahyatt/repos", "events_url": "https://api.github.com/users/joshuahyatt/events{/privacy}", "received_events_url": "https://api.github.com/users/joshuahyatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-06T22:08:48Z", "updated_at": "2018-12-25T15:14:34Z", "closed_at": "2018-12-25T15:14:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "<body>\r\n  <div tabindex=\"-1\" id=\"notebook\" class=\"border-box-sizing\">\r\n    <div class=\"container\" id=\"notebook-container\">\r\n\r\n<div class=\"cell border-box-sizing code_cell rendered\">\r\n<div class=\"input\">\r\n<div class=\"prompt input_prompt\">In&nbsp;[1]:</div>\r\n<div class=\"inner_cell\">\r\n    <div class=\"input_area\">\r\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">category_encoders</span> <span class=\"k\">import</span> <span class=\"n\">OneHotEncoder</span>\r\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\r\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\r\n</pre></div>\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\">\r\n</div>\r\n<div class=\"inner_cell\">\r\n<div class=\"text_cell_render border-box-sizing rendered_html\">\r\n<h3 id=\"OneHotEncoder-behaves-as-expected-when-some-categories-are-known\">OneHotEncoder behaves as expected when some categories are known<a class=\"anchor-link\" href=\"#OneHotEncoder-behaves-as-expected-when-some-categories-are-known\">&#182;</a></h3>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"cell border-box-sizing code_cell rendered\">\r\n<div class=\"input\">\r\n<div class=\"prompt input_prompt\">In&nbsp;[2]:</div>\r\n<div class=\"inner_cell\">\r\n    <div class=\"input_area\">\r\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;city&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Buenos Aires&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Istambul&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Buenos Aires&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">]}</span>\r\n<span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">)</span>\r\n\r\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;city&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Buenos Aires&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;New York&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Istambul&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Buenos Aires&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Paris&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Utila&#39;</span><span class=\"p\">]}</span>\r\n<span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\r\n</pre></div>\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n<div class=\"cell border-box-sizing code_cell rendered\">\r\n<div class=\"input\">\r\n<div class=\"prompt input_prompt\">In&nbsp;[18]:</div>\r\n<div class=\"inner_cell\">\r\n    <div class=\"input_area\">\r\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"n\">encoder</span> <span class=\"o\">=</span> <span class=\"n\">OneHotEncoder</span><span class=\"p\">(</span><span class=\"n\">handle_unknown</span><span class=\"o\">=</span><span class=\"s1\">&#39;ignore&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"p\">)</span>\r\n</pre></div>\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n<div class=\"cell border-box-sizing code_cell rendered\">\r\n<div class=\"input\">\r\n<div class=\"prompt input_prompt\">In&nbsp;[19]:</div>\r\n<div class=\"inner_cell\">\r\n    <div class=\"input_area\">\r\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\r\n</pre></div>\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class=\"output_wrapper\">\r\n<div class=\"output\">\r\n\r\n\r\n<div class=\"output_area\">\r\n\r\n<div class=\"prompt output_prompt\">Out[19]:</div>\r\n\r\n\r\n\r\n<div class=\"output_html rendered_html output_subarea output_execute_result\">\r\n<div>\r\n<table border=\"1\" class=\"dataframe\">\r\n  <thead>\r\n    <tr style=\"text-align: right;\">\r\n      <th></th>\r\n      <th>city_1</th>\r\n      <th>city_2</th>\r\n      <th>city_3</th>\r\n      <th>city_4</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <th>0</th>\r\n      <td>1</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>1</th>\r\n      <td>0</td>\r\n      <td>1</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>2</th>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>1</td>\r\n      <td>0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>3</th>\r\n      <td>1</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n    </tr>\r\n    <tr>\r\n      <th>4</th>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>1</td>\r\n    </tr>\r\n    <tr>\r\n      <th>5</th>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n      <td>0</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n\r\n</div>\r\n</div>\r\n\r\n</div>\r\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\">\r\n</div>\r\n<div class=\"inner_cell\">\r\n<div class=\"text_cell_render border-box-sizing rendered_html\">\r\n<h3 id=\"It-fails-However-when-all-categories-are-unkown\">It fails However when all categories are unkown<a class=\"anchor-link\" href=\"#It-fails-However-when-all-categories-are-unkown\">&#182;</a></h3>\r\n</div>\r\n</div>\r\n</div>\r\n<div class=\"cell border-box-sizing code_cell rendered\">\r\n<div class=\"input\">\r\n<div class=\"prompt input_prompt\">In&nbsp;[20]:</div>\r\n<div class=\"inner_cell\">\r\n    <div class=\"input_area\">\r\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"n\">test_none</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;city&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Chicago&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;London&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Stockholm&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Utila&#39;</span><span class=\"p\">]}</span>\r\n<span class=\"n\">test_none</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">test_none</span><span class=\"p\">)</span>\r\n</pre></div>\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n<div class=\"cell border-box-sizing code_cell rendered\">\r\n<div class=\"input\">\r\n<div class=\"prompt input_prompt\">In&nbsp;[21]:</div>\r\n<div class=\"inner_cell\">\r\n    <div class=\"input_area\">\r\n<div class=\" highlight hl-ipython3\"><pre><span></span><span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">test_none</span><span class=\"p\">)</span>\r\n</pre></div>\r\n\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<div class=\"output_wrapper\">\r\n<div class=\"output\">\r\n\r\n\r\n<div class=\"output_area\">\r\n\r\n<div class=\"prompt\"></div>\r\n\r\n\r\n<div class=\"output_subarea output_text output_error\">\r\n<pre>\r\n<span class=\"ansi-red-intense-fg ansi-bold\">---------------------------------------------------------------------------</span>\r\n<span class=\"ansi-red-intense-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\r\n<span class=\"ansi-green-intense-fg ansi-bold\">&lt;ipython-input-21-f21616b9124f&gt;</span> in <span class=\"ansi-cyan-fg\">&lt;module&gt;</span><span class=\"ansi-blue-intense-fg ansi-bold\">()</span>\r\n<span class=\"ansi-green-intense-fg ansi-bold\">----&gt; 1</span><span class=\"ansi-yellow-intense-fg ansi-bold\"> </span>encoder<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>transform<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>test_none<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\category_encoders\\one_hot.py</span> in <span class=\"ansi-cyan-fg\">transform</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, X)</span>\r\n<span class=\"ansi-green-fg\">    175</span>             <span class=\"ansi-green-intense-fg ansi-bold\">return</span> X <span class=\"ansi-green-intense-fg ansi-bold\">if</span> self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>return_df <span class=\"ansi-green-intense-fg ansi-bold\">else</span> X<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>values\r\n<span class=\"ansi-green-fg\">    176</span> \r\n<span class=\"ansi-green-intense-fg ansi-bold\">--&gt; 177</span><span class=\"ansi-yellow-intense-fg ansi-bold\">         </span>X <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>ordinal_encoder<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>transform<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>X<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">    178</span> \r\n<span class=\"ansi-green-fg\">    179</span>         X <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>get_dummies<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>X<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> cols<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>cols<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\category_encoders\\ordinal.py</span> in <span class=\"ansi-cyan-fg\">transform</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, X)</span>\r\n<span class=\"ansi-green-fg\">    179</span>             cols<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>cols<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span>\r\n<span class=\"ansi-green-fg\">    180</span>             impute_missing<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>impute_missing<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span>\r\n<span class=\"ansi-green-intense-fg ansi-bold\">--&gt; 181</span><span class=\"ansi-yellow-intense-fg ansi-bold\">             </span>handle_unknown<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>handle_unknown\r\n<span class=\"ansi-green-fg\">    182</span>         )\r\n<span class=\"ansi-green-fg\">    183</span> \r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\category_encoders\\ordinal.py</span> in <span class=\"ansi-cyan-fg\">ordinal_encoding</span><span class=\"ansi-blue-intense-fg ansi-bold\">(X_in, mapping, cols, impute_missing, handle_unknown)</span>\r\n<span class=\"ansi-green-fg\">    261</span> \r\n<span class=\"ansi-green-fg\">    262</span>                 <span class=\"ansi-green-intense-fg ansi-bold\">try</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n<span class=\"ansi-green-intense-fg ansi-bold\">--&gt; 263</span><span class=\"ansi-yellow-intense-fg ansi-bold\">                     </span>X<span class=\"ansi-yellow-intense-fg ansi-bold\">[</span>switch<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>get<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;col&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">]</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> X<span class=\"ansi-yellow-intense-fg ansi-bold\">[</span>switch<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>get<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;col&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">]</span><span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>astype<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>int<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>values<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>reshape<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-yellow-intense-fg ansi-bold\">-</span><span class=\"ansi-cyan-intense-fg ansi-bold\">1</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">    264</span>                 <span class=\"ansi-green-intense-fg ansi-bold\">except</span> ValueError <span class=\"ansi-green-intense-fg ansi-bold\">as</span> e<span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n<span class=\"ansi-green-fg\">    265</span>                     X<span class=\"ansi-yellow-intense-fg ansi-bold\">[</span>switch<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>get<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;col&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">]</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> X<span class=\"ansi-yellow-intense-fg ansi-bold\">[</span>switch<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>get<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;col&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">]</span><span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>astype<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>float<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>values<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>reshape<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-yellow-intense-fg ansi-bold\">-</span><span class=\"ansi-cyan-intense-fg ansi-bold\">1</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\util\\_decorators.py</span> in <span class=\"ansi-cyan-fg\">wrapper</span><span class=\"ansi-blue-intense-fg ansi-bold\">(*args, **kwargs)</span>\r\n<span class=\"ansi-green-fg\">     89</span>                 <span class=\"ansi-green-intense-fg ansi-bold\">else</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n<span class=\"ansi-green-fg\">     90</span>                     kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">[</span>new_arg_name<span class=\"ansi-yellow-intense-fg ansi-bold\">]</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> new_arg_value\r\n<span class=\"ansi-green-intense-fg ansi-bold\">---&gt; 91</span><span class=\"ansi-yellow-intense-fg ansi-bold\">             </span><span class=\"ansi-green-intense-fg ansi-bold\">return</span> func<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-yellow-intense-fg ansi-bold\">*</span>args<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">**</span>kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">     92</span>         <span class=\"ansi-green-intense-fg ansi-bold\">return</span> wrapper\r\n<span class=\"ansi-green-fg\">     93</span>     <span class=\"ansi-green-intense-fg ansi-bold\">return</span> _deprecate_kwarg\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\generic.py</span> in <span class=\"ansi-cyan-fg\">astype</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, dtype, copy, errors, **kwargs)</span>\r\n<span class=\"ansi-green-fg\">   3408</span>         <span class=\"ansi-red-intense-fg ansi-bold\"># else, only a single dtype is given</span>\r\n<span class=\"ansi-green-fg\">   3409</span>         new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors,\r\n<span class=\"ansi-green-intense-fg ansi-bold\">-&gt; 3410</span><span class=\"ansi-yellow-intense-fg ansi-bold\">                                      **kwargs)\r\n</span><span class=\"ansi-green-fg\">   3411</span>         <span class=\"ansi-green-intense-fg ansi-bold\">return</span> self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>_constructor<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>new_data<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>__finalize__<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">   3412</span> \r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\internals.py</span> in <span class=\"ansi-cyan-fg\">astype</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, dtype, **kwargs)</span>\r\n<span class=\"ansi-green-fg\">   3222</span> \r\n<span class=\"ansi-green-fg\">   3223</span>     <span class=\"ansi-green-intense-fg ansi-bold\">def</span> astype<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">**</span>kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n<span class=\"ansi-green-intense-fg ansi-bold\">-&gt; 3224</span><span class=\"ansi-yellow-intense-fg ansi-bold\">         </span><span class=\"ansi-green-intense-fg ansi-bold\">return</span> self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>apply<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;astype&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span>dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">**</span>kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">   3225</span> \r\n<span class=\"ansi-green-fg\">   3226</span>     <span class=\"ansi-green-intense-fg ansi-bold\">def</span> convert<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">**</span>kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\internals.py</span> in <span class=\"ansi-cyan-fg\">apply</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, f, axes, filter, do_integrity_check, consolidate, **kwargs)</span>\r\n<span class=\"ansi-green-fg\">   3089</span> \r\n<span class=\"ansi-green-fg\">   3090</span>             kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">[</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;mgr&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">]</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> self\r\n<span class=\"ansi-green-intense-fg ansi-bold\">-&gt; 3091</span><span class=\"ansi-yellow-intense-fg ansi-bold\">             </span>applied <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> getattr<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>b<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> f<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-yellow-intense-fg ansi-bold\">**</span>kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">   3092</span>             result_blocks <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> _extend_blocks<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>applied<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> result_blocks<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">   3093</span> \r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\internals.py</span> in <span class=\"ansi-cyan-fg\">astype</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, dtype, copy, errors, values, **kwargs)</span>\r\n<span class=\"ansi-green-fg\">    469</span>     <span class=\"ansi-green-intense-fg ansi-bold\">def</span> astype<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> copy<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span><span class=\"ansi-green-intense-fg ansi-bold\">False</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> errors<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#39;raise&#39;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> values<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span><span class=\"ansi-green-intense-fg ansi-bold\">None</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">**</span>kwargs<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n<span class=\"ansi-green-fg\">    470</span>         return self._astype(dtype, copy=copy, errors=errors, values=values,\r\n<span class=\"ansi-green-intense-fg ansi-bold\">--&gt; 471</span><span class=\"ansi-yellow-intense-fg ansi-bold\">                             **kwargs)\r\n</span><span class=\"ansi-green-fg\">    472</span> \r\n<span class=\"ansi-green-fg\">    473</span>     def _astype(self, dtype, copy=False, errors=&#39;raise&#39;, values=None,\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\internals.py</span> in <span class=\"ansi-cyan-fg\">_astype</span><span class=\"ansi-blue-intense-fg ansi-bold\">(self, dtype, copy, errors, values, klass, mgr, raise_on_error, **kwargs)</span>\r\n<span class=\"ansi-green-fg\">    519</span> \r\n<span class=\"ansi-green-fg\">    520</span>                 <span class=\"ansi-red-intense-fg ansi-bold\"># _astype_nansafe works fine with 1-d only</span>\r\n<span class=\"ansi-green-intense-fg ansi-bold\">--&gt; 521</span><span class=\"ansi-yellow-intense-fg ansi-bold\">                 </span>values <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> astype_nansafe<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>values<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>ravel<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> copy<span class=\"ansi-yellow-intense-fg ansi-bold\">=</span><span class=\"ansi-green-intense-fg ansi-bold\">True</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">    522</span>                 values <span class=\"ansi-yellow-intense-fg ansi-bold\">=</span> values<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>reshape<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>self<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>shape<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">    523</span> \r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">C:\\Program Files (x86)\\Microsoft Visual Studio\\Shared\\Anaconda3_64\\lib\\site-packages\\pandas\\core\\dtypes\\cast.py</span> in <span class=\"ansi-cyan-fg\">astype_nansafe</span><span class=\"ansi-blue-intense-fg ansi-bold\">(arr, dtype, copy)</span>\r\n<span class=\"ansi-green-fg\">    623</span>     <span class=\"ansi-green-intense-fg ansi-bold\">elif</span> arr<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>dtype <span class=\"ansi-yellow-intense-fg ansi-bold\">==</span> np<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>object_ <span class=\"ansi-green-intense-fg ansi-bold\">and</span> np<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>issubdtype<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>type<span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> np<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>integer<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n<span class=\"ansi-green-fg\">    624</span>         <span class=\"ansi-red-intense-fg ansi-bold\"># work around NumPy brokenness, #1987</span>\r\n<span class=\"ansi-green-intense-fg ansi-bold\">--&gt; 625</span><span class=\"ansi-yellow-intense-fg ansi-bold\">         </span><span class=\"ansi-green-intense-fg ansi-bold\">return</span> lib<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>astype_intsafe<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>arr<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>ravel<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>reshape<span class=\"ansi-yellow-intense-fg ansi-bold\">(</span>arr<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>shape<span class=\"ansi-yellow-intense-fg ansi-bold\">)</span>\r\n<span class=\"ansi-green-fg\">    626</span> \r\n<span class=\"ansi-green-fg\">    627</span>     <span class=\"ansi-green-intense-fg ansi-bold\">if</span> dtype<span class=\"ansi-yellow-intense-fg ansi-bold\">.</span>name <span class=\"ansi-green-intense-fg ansi-bold\">in</span> <span class=\"ansi-yellow-intense-fg ansi-bold\">(</span><span class=\"ansi-blue-intense-fg ansi-bold\">&#34;datetime64&#34;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">,</span> <span class=\"ansi-blue-intense-fg ansi-bold\">&#34;timedelta64&#34;</span><span class=\"ansi-yellow-intense-fg ansi-bold\">)</span><span class=\"ansi-yellow-intense-fg ansi-bold\">:</span>\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">pandas\\_libs\\lib.pyx</span> in <span class=\"ansi-cyan-fg\">pandas._libs.lib.astype_intsafe</span><span class=\"ansi-blue-intense-fg ansi-bold\">()</span>\r\n\r\n<span class=\"ansi-green-intense-fg ansi-bold\">pandas/_libs/src\\util.pxd</span> in <span class=\"ansi-cyan-fg\">util.set_value_at_unsafe</span><span class=\"ansi-blue-intense-fg ansi-bold\">()</span>\r\n\r\n<span class=\"ansi-red-intense-fg ansi-bold\">TypeError</span>: int() argument must be a string, a bytes-like object or a number, not &#39;NoneType&#39;</pre>\r\n</div>\r\n</div>\r\n\r\n</div>\r\n</div>\r\n\r\n</div>\r\n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\">\r\n</div>\r\n<div class=\"inner_cell\">\r\n<div class=\"text_cell_render border-box-sizing rendered_html\">\r\n<h3 id=\"Expected-behavior-should-be-4-rows-of-all-0\">Expected behavior should be 4 rows of all 0<a class=\"anchor-link\" href=\"#Expected-behavior-should-be-4-rows-of-all-0\">&#182;</a></h3>\r\n</div>\r\n</div>\r\n</div>\r\n    </div>\r\n  </div>\r\n</body>\r\n\r\n \r\n\r\n\r\n</html>", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/152", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/152/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/152/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/152", "id": 376107140, "node_id": "MDU6SXNzdWUzNzYxMDcxNDA=", "number": 152, "title": "Intercept column does not work properly with truncated indexes", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-31T18:39:11Z", "updated_at": "2019-02-11T09:44:21Z", "closed_at": "2019-02-11T09:44:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Intercept column sometimes contains `nan`:\r\n```python\r\n    def test_truncated_index(self):\r\n        data = pd.DataFrame(data={'x': ['A', 'B', 'C', 'A', 'B'], 'y': [1, 0, 1, 0, 1]})\r\n        data = data.iloc[2:5]\r\n        data2 = pd.DataFrame(data={'x': ['C', 'A', 'B'], 'y': [1, 0, 1]})\r\n        for encoder_name in encoders.__all__:\r\n            with self.subTest(encoder_name=encoder_name):\r\n                enc = getattr(encoders, encoder_name)()\r\n                result = enc.fit_transform(data.x, data.y)\r\n                enc2 = getattr(encoders, encoder_name)()\r\n                result2 = enc2.fit_transform(data2.x, data2.y)\r\n                self.assertTrue((result.values == result2.values).all())\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/151", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/151/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/151/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/151", "id": 375019805, "node_id": "MDU6SXNzdWUzNzUwMTk4MDU=", "number": 151, "title": "Unalignable boolean Series Error", "user": {"login": "christopherbuhtz", "id": 44200010, "node_id": "MDQ6VXNlcjQ0MjAwMDEw", "avatar_url": "https://avatars1.githubusercontent.com/u/44200010?v=4", "gravatar_id": "", "url": "https://api.github.com/users/christopherbuhtz", "html_url": "https://github.com/christopherbuhtz", "followers_url": "https://api.github.com/users/christopherbuhtz/followers", "following_url": "https://api.github.com/users/christopherbuhtz/following{/other_user}", "gists_url": "https://api.github.com/users/christopherbuhtz/gists{/gist_id}", "starred_url": "https://api.github.com/users/christopherbuhtz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/christopherbuhtz/subscriptions", "organizations_url": "https://api.github.com/users/christopherbuhtz/orgs", "repos_url": "https://api.github.com/users/christopherbuhtz/repos", "events_url": "https://api.github.com/users/christopherbuhtz/events{/privacy}", "received_events_url": "https://api.github.com/users/christopherbuhtz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-29T13:39:05Z", "updated_at": "2019-02-14T07:37:17Z", "closed_at": "2018-12-25T15:16:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "After the update to category_encoders version 1.3.0 we encountered the following error when working with subsets of DataFrames.\r\n\r\n```python\r\nd = {'categorical_var': ['A', 'B','C','A','B'], 'y': [3, 4, 5, 7, 3]}\r\ntrain = pd.DataFrame(data=d)\r\ntrain = train.iloc[2:5]\r\n\r\ntarget_enc = TargetEncoder(verbose=True).fit(X=train, y=train.y)\r\n\r\ntarget_enc.transform(train)\r\n```\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nIndexingError                             Traceback (most recent call last)\r\n<ipython-input-63-89aa76133915> in <module>()\r\n      1 target_enc = TargetEncoder(verbose=True).fit(X=train,y=train.erfolgreich)\r\n      2 \r\n----> 3 target_enc.transform(train)\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\category_encoders\\target_encoder.py in transform(self, X, y)\r\n    183             handle_unknown=self.handle_unknown,\r\n    184             min_samples_leaf=self.min_samples_leaf,\r\n--> 185             smoothing_in=self.smoothing\r\n    186         )\r\n    187 \r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\category_encoders\\target_encoder.py in target_encode(self, X_in, y, mapping, cols, impute_missing, handle_unknown, min_samples_leaf, smoothing_in)\r\n    216                 for val in switch.get('mapping'):\r\n    217                     if switch.get('mapping')[val]['count'] == 1:\r\n--> 218                         transformed_column.loc[X[column] == val] = self._mean\r\n    219                     else:\r\n    220                         transformed_column.loc[X[column] == val] = switch.get('mapping')[val]['smoothing']\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in __setitem__(self, key, value)\r\n    186         else:\r\n    187             key = com._apply_if_callable(key, self.obj)\r\n--> 188         indexer = self._get_setitem_indexer(key)\r\n    189         self._setitem_with_indexer(indexer, value)\r\n    190 \r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _get_setitem_indexer(self, key)\r\n    172 \r\n    173         try:\r\n--> 174             return self._convert_to_indexer(key, is_setter=True)\r\n    175         except TypeError as e:\r\n    176 \r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in _convert_to_indexer(self, obj, axis, is_setter)\r\n   1298 \r\n   1299             if com.is_bool_indexer(obj):\r\n-> 1300                 obj = check_bool_indexer(labels, obj)\r\n   1301                 inds, = obj.nonzero()\r\n   1302                 return inds\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\pandas\\core\\indexing.py in check_bool_indexer(ax, key)\r\n   2354         mask = isna(result._values)\r\n   2355         if mask.any():\r\n-> 2356             raise IndexingError('Unalignable boolean Series provided as '\r\n   2357                                 'indexer (index of the boolean Series and of '\r\n   2358                                 'the indexed object do not match')\r\n\r\nIndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match\r\n\r\n```\r\nThe error is only thrown after transform, the fitting part works fine. If instead I write:\r\n```\r\ntarget_enc.transform(train.reset_index(drop=True))\r\n```\r\n...it works again. We encountered this behavior when splitting the data into training and test sets. The fitting on the training data worked but transforming the test data did not. Is this behaviour expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/147", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/147/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/147/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/147", "id": 373841490, "node_id": "MDU6SXNzdWUzNzM4NDE0OTA=", "number": 147, "title": "HashingEncoder returns bad row dimensions when index in DataFrame is not ordered", "user": {"login": "rxp90", "id": 1688509, "node_id": "MDQ6VXNlcjE2ODg1MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1688509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rxp90", "html_url": "https://github.com/rxp90", "followers_url": "https://api.github.com/users/rxp90/followers", "following_url": "https://api.github.com/users/rxp90/following{/other_user}", "gists_url": "https://api.github.com/users/rxp90/gists{/gist_id}", "starred_url": "https://api.github.com/users/rxp90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rxp90/subscriptions", "organizations_url": "https://api.github.com/users/rxp90/orgs", "repos_url": "https://api.github.com/users/rxp90/repos", "events_url": "https://api.github.com/users/rxp90/events{/privacy}", "received_events_url": "https://api.github.com/users/rxp90/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-25T08:57:28Z", "updated_at": "2018-10-28T07:31:52Z", "closed_at": "2018-10-28T07:31:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's an example that doesn't work if I don't call `reset_index()` on the DataFrame:\r\n\r\n```\r\nimport category_encoders as ce\r\nimport pandas as pd\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.linear_model import SGDClassifier\r\nfrom sklearn.metrics import classification_report\r\nfrom sklearn.model_selection import GridSearchCV\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.pipeline import Pipeline\r\n\r\ndf = pd.read_csv('error.csv', index_col=[0])#.reset_index()\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(df, df['label'],\r\n                                                    test_size=0.2,\r\n                                                    random_state=0)\r\n\r\nfeature_union = ColumnTransformer(transformers=\r\n[\r\n    ('name', TfidfVectorizer(analyzer='char', max_df=0.9), 'name'),\r\n    ('category_encoder_step', Pipeline([\r\n        ('category_encoder', ce.HashingEncoder(return_df=False)),\r\n    ]), ['suffix']),\r\n],\r\n)\r\n\r\npipe = Pipeline([\r\n    ('features', feature_union),\r\n    ('classify', SGDClassifier(n_jobs=-1, random_state=0, loss='modified_huber', alpha=0.000001))\r\n])\r\n\r\nparam_grid = [\r\n    {\r\n        'features__name__ngram_range': [(2, 2), (1, 1)],\r\n    },\r\n]\r\n\r\ngrid = GridSearchCV(pipe, n_jobs=1, param_grid=param_grid, cv=2, scoring='f1')\r\ngrid.fit(X_train, y_train)\r\npredict = grid.best_estimator_.predict(X_test)\r\n\r\nprint(classification_report(y_true=y_test, y_pred=predict, target_names=['class-0', 'class-1']))\r\n```\r\n\r\n`error.csv` is here https://pastebin.com/KggL1b7S\r\n\r\nAnd this is the error:\r\n`ValueError: blocks[0,:] has incompatible row dimensions. Got blocks[0,1].shape[0] == 102, expected 100.`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/144", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/144/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/144/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/144", "id": 372310378, "node_id": "MDU6SXNzdWUzNzIzMTAzNzg=", "number": 144, "title": "OrdinalEncoder imputes missing values with 0 instead of -1", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-21T12:34:57Z", "updated_at": "2019-02-11T09:40:59Z", "closed_at": "2019-02-11T09:40:58Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Proposed fix: \r\n1. Change a line with `transformed_column.fillna(0, inplace=True)`.\r\n2. Write a test to make sure that the error does not repeat.\r\n3. Truncate `test_inverse_transform()` - it is ok to raise an exception when the data were imputed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/142", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/142/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/142/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/142", "id": 371956688, "node_id": "MDU6SXNzdWUzNzE5NTY2ODg=", "number": 142, "title": "Ordinal encoder not encoding anything?", "user": {"login": "datarian", "id": 36982755, "node_id": "MDQ6VXNlcjM2OTgyNzU1", "avatar_url": "https://avatars1.githubusercontent.com/u/36982755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datarian", "html_url": "https://github.com/datarian", "followers_url": "https://api.github.com/users/datarian/followers", "following_url": "https://api.github.com/users/datarian/following{/other_user}", "gists_url": "https://api.github.com/users/datarian/gists{/gist_id}", "starred_url": "https://api.github.com/users/datarian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datarian/subscriptions", "organizations_url": "https://api.github.com/users/datarian/orgs", "repos_url": "https://api.github.com/users/datarian/repos", "events_url": "https://api.github.com/users/datarian/events{/privacy}", "received_events_url": "https://api.github.com/users/datarian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-19T13:25:25Z", "updated_at": "2018-10-19T13:30:19Z", "closed_at": "2018-10-19T13:30:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I run ordinal encoder on a pandas column of dtype object containing 55 unique values (integers, in fact) with 95412 rows \r\n[data.pkl.zip](https://github.com/scikit-learn-contrib/categorical-encoding/files/2495974/data.pkl.zip), all I get back is a 1D-array of length 95412 , containing the indices of the columns that should actually be created.\r\nI am passing the data in through a sklearn.ColumnTransformer:\r\n`\r\nordinal_transformer = ColumnTransformer([\r\n    (\"ordinal\",\r\n     ce.OrdinalEncoder(),\r\n     ['TCODE'])\r\n])\r\n\r\ndata.info()\r\n> <class 'pandas.core.frame.DataFrame'>\r\n> Int64Index: 95412 entries, 95515 to 185114\r\n> Data columns (total 1 columns):\r\n> TCODE    95412 non-null object\r\n> dtypes: object(1)\r\n> memory usage: 4.0+ MB\r\n\r\ndata.TCODE.unique()\r\n> array(['0', '1', '2', '28', '3', '1002', '42', '4', '18', '980', '14',\r\n       '28028', '72', '22', '13002', '23', '45', '24', '4002', '30', '13',\r\n       '202', '136', '72002', '96', '116', '100', '6', '4004', '39002',\r\n       '61', '47', '36', '228', '14002', '6400', '40', '25', '21', '94',\r\n       '12', '58002', '134', '18002', '38', '9', '76', '50', '27', '93',\r\n       '17', '7', '44', '24002', '22002'], dtype=object)\r\n\r\nordinals = ordinal_transformer.fit_transform(data)\r\n\r\nordinals.shape()\r\n> (95412, 1)\r\n\r\nnp.unique(ordinals)\r\n> array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\r\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\r\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\r\n       52, 53, 54, 55])\r\n`\r\n\r\nI would expect a 95412  x 55 array to come back.\r\n\r\nLooking at OrdinalEncoder.ordinal_encoding(), it seems to me that X gets passed in and returned without  anything really happening to the data. Is it just me? Am I missing something?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/138", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/138/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/138/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/138", "id": 370595078, "node_id": "MDU6SXNzdWUzNzA1OTUwNzg=", "number": 138, "title": "Update release version to 1.3.0 on GitHub", "user": {"login": "discdiver", "id": 7703961, "node_id": "MDQ6VXNlcjc3MDM5NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7703961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discdiver", "html_url": "https://github.com/discdiver", "followers_url": "https://api.github.com/users/discdiver/followers", "following_url": "https://api.github.com/users/discdiver/following{/other_user}", "gists_url": "https://api.github.com/users/discdiver/gists{/gist_id}", "starred_url": "https://api.github.com/users/discdiver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discdiver/subscriptions", "organizations_url": "https://api.github.com/users/discdiver/orgs", "repos_url": "https://api.github.com/users/discdiver/repos", "events_url": "https://api.github.com/users/discdiver/events{/privacy}", "received_events_url": "https://api.github.com/users/discdiver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-16T12:48:08Z", "updated_at": "2018-12-25T15:17:50Z", "closed_at": "2018-12-25T15:17:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Showing 1.2.6 on GitHub.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/132", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/132/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/132/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/132", "id": 369764734, "node_id": "MDU6SXNzdWUzNjk3NjQ3MzQ=", "number": 132, "title": "OneHotEncoder incorrectly encodes -1 when use_cat_names is True", "user": {"login": "jvs", "id": 405353, "node_id": "MDQ6VXNlcjQwNTM1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/405353?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jvs", "html_url": "https://github.com/jvs", "followers_url": "https://api.github.com/users/jvs/followers", "following_url": "https://api.github.com/users/jvs/following{/other_user}", "gists_url": "https://api.github.com/users/jvs/gists{/gist_id}", "starred_url": "https://api.github.com/users/jvs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jvs/subscriptions", "organizations_url": "https://api.github.com/users/jvs/orgs", "repos_url": "https://api.github.com/users/jvs/repos", "events_url": "https://api.github.com/users/jvs/events{/privacy}", "received_events_url": "https://api.github.com/users/jvs/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-13T04:07:49Z", "updated_at": "2018-10-24T07:39:28Z", "closed_at": "2018-10-24T07:39:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "When `use_cat_names` is True, OneHotEncoder incorrectly encodes values that equal -1.\r\n\r\nHere's a minimal example:\r\n```python\r\nfrom category_encoders.one_hot import OneHotEncoder\r\n\r\nencoder1 = OneHotEncoder(cols=[0], use_cat_names=False)\r\nencoder2 = OneHotEncoder(cols=[0], use_cat_names=True)\r\n\r\na = encoder1.fit_transform([[-1]])\r\nb = encoder2.fit_transform([[-1]])\r\n\r\nprint('a =', a.values)\r\nprint('b =', b.values)\r\n```\r\n\r\nThis outputs:\r\n```\r\na = [[1 0]]\r\nb = [[0 0]]\r\n```\r\n\r\nI would expect `b` to have the same values as `a`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/131", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/131/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/131/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/131", "id": 369747150, "node_id": "MDU6SXNzdWUzNjk3NDcxNTA=", "number": 131, "title": "numpy arrays as inputs", "user": {"login": "fingoldo", "id": 16359856, "node_id": "MDQ6VXNlcjE2MzU5ODU2", "avatar_url": "https://avatars3.githubusercontent.com/u/16359856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fingoldo", "html_url": "https://github.com/fingoldo", "followers_url": "https://api.github.com/users/fingoldo/followers", "following_url": "https://api.github.com/users/fingoldo/following{/other_user}", "gists_url": "https://api.github.com/users/fingoldo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fingoldo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fingoldo/subscriptions", "organizations_url": "https://api.github.com/users/fingoldo/orgs", "repos_url": "https://api.github.com/users/fingoldo/repos", "events_url": "https://api.github.com/users/fingoldo/events{/privacy}", "received_events_url": "https://api.github.com/users/fingoldo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-10-13T00:12:32Z", "updated_at": "2018-10-28T07:31:20Z", "closed_at": "2018-10-28T07:31:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does your package support this? I'd like to include ca in my regular sklearn pipelines, all of them are built using straight numpy arrays as inputs. However your documentation does not claim supporting it, neither any examples I was able to found. What am I missing? )", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/130", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/130/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/130/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/130", "id": 367999559, "node_id": "MDU6SXNzdWUzNjc5OTk1NTk=", "number": 130, "title": "Difference in statsmodels dependencies in git vs pypi.", "user": {"login": "brandonmichaelgarcia", "id": 19657745, "node_id": "MDQ6VXNlcjE5NjU3NzQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/19657745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandonmichaelgarcia", "html_url": "https://github.com/brandonmichaelgarcia", "followers_url": "https://api.github.com/users/brandonmichaelgarcia/followers", "following_url": "https://api.github.com/users/brandonmichaelgarcia/following{/other_user}", "gists_url": "https://api.github.com/users/brandonmichaelgarcia/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandonmichaelgarcia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandonmichaelgarcia/subscriptions", "organizations_url": "https://api.github.com/users/brandonmichaelgarcia/orgs", "repos_url": "https://api.github.com/users/brandonmichaelgarcia/repos", "events_url": "https://api.github.com/users/brandonmichaelgarcia/events{/privacy}", "received_events_url": "https://api.github.com/users/brandonmichaelgarcia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-09T00:38:40Z", "updated_at": "2018-10-14T14:16:17Z", "closed_at": "2018-10-14T14:16:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that the git repo reports that there is a dependency on statsmodels >=0.6.0. However, the pip install has the requirement of statsmodels <= 0.8.0 and >=0.6.0. Removing the upper limit on the statsmodels dependency allows for simple install for python 3.7 development. Perhaps this is already on the to-do list?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/125", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/125/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/125/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/125/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/125", "id": 362566843, "node_id": "MDU6SXNzdWUzNjI1NjY4NDM=", "number": 125, "title": "Backward difference encoding changes DataFrame column names", "user": {"login": "kdmcdrm", "id": 5034163, "node_id": "MDQ6VXNlcjUwMzQxNjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/5034163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdmcdrm", "html_url": "https://github.com/kdmcdrm", "followers_url": "https://api.github.com/users/kdmcdrm/followers", "following_url": "https://api.github.com/users/kdmcdrm/following{/other_user}", "gists_url": "https://api.github.com/users/kdmcdrm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdmcdrm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdmcdrm/subscriptions", "organizations_url": "https://api.github.com/users/kdmcdrm/orgs", "repos_url": "https://api.github.com/users/kdmcdrm/repos", "events_url": "https://api.github.com/users/kdmcdrm/events{/privacy}", "received_events_url": "https://api.github.com/users/kdmcdrm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-21T11:07:50Z", "updated_at": "2018-10-07T19:04:37Z", "closed_at": "2018-10-07T19:04:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "This might be a quick one as it looks like it's intentional, I just don't understand why. I tried a BackwardDifferenceEncoder and found that it prepended all of my columns with \"col_\". Digging into the library I found that is done on backward_difference, line 195.\r\n\r\nIs there a reason all columns get renamed, including those that are not transformed by the encoder? I am going to add a line to my pipeline to rename them back to their original names, but this was unexpected behavior and I haven't been able to find any documentation on why it works this way.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/124", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/124/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/124/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/124", "id": 361812612, "node_id": "MDU6SXNzdWUzNjE4MTI2MTI=", "number": 124, "title": "Does TargetEncoder really implement leave one out approach as it's stated in the docs?", "user": {"login": "deil87", "id": 1162131, "node_id": "MDQ6VXNlcjExNjIxMzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1162131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deil87", "html_url": "https://github.com/deil87", "followers_url": "https://api.github.com/users/deil87/followers", "following_url": "https://api.github.com/users/deil87/following{/other_user}", "gists_url": "https://api.github.com/users/deil87/gists{/gist_id}", "starred_url": "https://api.github.com/users/deil87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deil87/subscriptions", "organizations_url": "https://api.github.com/users/deil87/orgs", "repos_url": "https://api.github.com/users/deil87/repos", "events_url": "https://api.github.com/users/deil87/events{/privacy}", "received_events_url": "https://api.github.com/users/deil87/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-09-19T15:48:24Z", "updated_at": "2018-09-25T10:42:51Z", "closed_at": "2018-09-25T10:42:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"Target Encode for categorical features. Based on **leave one out** approach.\" - that is what [documentation](http://contrib.scikit-learn.org/categorical-encoding/targetencoder.html#category_encoders.target_encoder.TargetEncoder) says.\r\n\r\nI know that published documentation does not represent the last version of the code and that is why I've taken a look at the sources on github. I have not found any logic that uses Y/target column and subtract during application phase current row's values from aggregated per category values. \r\n\r\nCould anyone please clarify? If it is not a bug than could you please point out( give a reference) to what leave one out means in this context?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/123", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/123/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/123/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/123", "id": 361684163, "node_id": "MDU6SXNzdWUzNjE2ODQxNjM=", "number": 123, "title": "limiting statsmodels to version 0.8.0 causes problems", "user": {"login": "oshev", "id": 2318534, "node_id": "MDQ6VXNlcjIzMTg1MzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2318534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oshev", "html_url": "https://github.com/oshev", "followers_url": "https://api.github.com/users/oshev/followers", "following_url": "https://api.github.com/users/oshev/following{/other_user}", "gists_url": "https://api.github.com/users/oshev/gists{/gist_id}", "starred_url": "https://api.github.com/users/oshev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oshev/subscriptions", "organizations_url": "https://api.github.com/users/oshev/orgs", "repos_url": "https://api.github.com/users/oshev/repos", "events_url": "https://api.github.com/users/oshev/events{/privacy}", "received_events_url": "https://api.github.com/users/oshev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-19T10:35:26Z", "updated_at": "2018-09-20T05:14:55Z", "closed_at": "2018-09-20T05:14:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, why do you need to limit the dependency statsmodels to the version 0.8.0? This version can't be easily installed with the latest Cython, it throws exceptions. However, the latest version of statsmodels 0.9.0 installs easily. Can statsmodels be updated to 0.9.0 in requirements.txt?\r\n\r\n```\r\n    Exception: Cython-generated file 'statsmodels/tsa/kalmanf/kalman_loglike.c' not found.\r\n            Cython is required to compile statsmodels from a development branch.\r\n            Please install Cython or download a source release of statsmodels.\r\n```\r\n\r\nAfter installing Cython with `brew install cython`, I still have the same problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/121", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/121/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/121/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/121", "id": 357742079, "node_id": "MDU6SXNzdWUzNTc3NDIwNzk=", "number": 121, "title": "inverse_transform() in BaseNEncoder does not raise an exception  ", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-06T16:54:15Z", "updated_at": "2018-09-16T14:45:17Z", "closed_at": "2018-09-16T14:45:17Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "inverse_transform() in BaseNEncoder does not raise an exception when the test set contains a new value:\r\n\r\n```python\r\n        X = create_dataset(n_rows=100, has_none=False)\r\n        X_t = create_dataset(n_rows=50, has_none=False)\r\n        X_t_extra = create_dataset(n_rows=50, extras=True, has_none=False)\r\n        cols = ['underscore', 'none', 'extra', 321]\r\n\r\n         enc = category_encoders.BaseNEncoder(verbose=1, cols=cols)\r\n         enc.fit(X, y)\r\n         with self.assertRaises(ValueError):\r\n                _ = enc.inverse_transform(enc.transform(X_t_extra))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/120", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/120/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/120/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/120", "id": 357739888, "node_id": "MDU6SXNzdWUzNTc3Mzk4ODg=", "number": 120, "title": "HashingEncoder does not accept handle_unknown argument", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-06T16:47:49Z", "updated_at": "2018-09-16T14:48:06Z", "closed_at": "2018-09-16T14:48:06Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Can HashingEncoder accept new values (values that are not observed in the training set) in the testing dataset?\r\n\r\nIf yes, it should possibly be noted in the documentation of the encoder.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/118", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/118/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/118/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/118", "id": 357350816, "node_id": "MDU6SXNzdWUzNTczNTA4MTY=", "number": 118, "title": "module 'category_encoders' has no attribute '__version__'", "user": {"login": "coolaj86", "id": 122831, "node_id": "MDQ6VXNlcjEyMjgzMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/122831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolaj86", "html_url": "https://github.com/coolaj86", "followers_url": "https://api.github.com/users/coolaj86/followers", "following_url": "https://api.github.com/users/coolaj86/following{/other_user}", "gists_url": "https://api.github.com/users/coolaj86/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolaj86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolaj86/subscriptions", "organizations_url": "https://api.github.com/users/coolaj86/orgs", "repos_url": "https://api.github.com/users/coolaj86/repos", "events_url": "https://api.github.com/users/coolaj86/events{/privacy}", "received_events_url": "https://api.github.com/users/coolaj86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-05T18:30:16Z", "updated_at": "2018-09-08T18:05:42Z", "closed_at": "2018-09-08T13:03:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "How does one dynamically determine the currently installed version of `category_encoders`?\r\n\r\n`print(dir(category_encoders))` did not yield the results I expected (i.e. something named *version*).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/117", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/117/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/117/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/117", "id": 356866850, "node_id": "MDU6SXNzdWUzNTY4NjY4NTA=", "number": 117, "title": "Data Driven Testing", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-09-04T15:35:45Z", "updated_at": "2019-05-07T11:20:28Z", "closed_at": "2019-05-07T11:20:28Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I was thinking about applying data driven testing (ddt).\r\n\r\nWhy ddt: \r\n1. `test_encoders` contains a lot of copy-pasted code\r\n2. `test_estimators` already loops over all encoders\r\n3. ddt, in comparison to a simple loop, does not stop on the first error (unless you tell it to do so) and reports results for each subtest (not just for the whole loop)\r\n4. ddt makes it easy to quickly increase test coverage\r\n5. ddt makes it easy to test that all encoders in the library fulfill some basic requirements\r\n\r\nBut of course, there are disadvantages:\r\n1. It makes it slightly harder to understand and write tests\r\n2. I have encountered behaviors (two, to be exact) that could be considered valid but break uniform behaviour of the library. I do not know what to do - adjust the tests or the encoders?\r\n\r\nExample of the [code](https://github.com/scikit-learn-contrib/categorical-encoding/files/2349193/test_ddt.py.zip).\r\n\r\nQuestions:\r\n1. Should I continue in the effort to port portable tests under ddt while preserving the encoder specific tests?\r\n2. If yes, is it ok to make a branch instead of a pull request? I hope it is going to be easier (for me) to maintain synchronicity between the development and master branch.\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/116", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/116/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/116/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/116", "id": 356124640, "node_id": "MDU6SXNzdWUzNTYxMjQ2NDA=", "number": 116, "title": "LeaveOneOutEncoder not leaving one out", "user": {"login": "discdiver", "id": 7703961, "node_id": "MDQ6VXNlcjc3MDM5NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7703961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discdiver", "html_url": "https://github.com/discdiver", "followers_url": "https://api.github.com/users/discdiver/followers", "following_url": "https://api.github.com/users/discdiver/following{/other_user}", "gists_url": "https://api.github.com/users/discdiver/gists{/gist_id}", "starred_url": "https://api.github.com/users/discdiver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discdiver/subscriptions", "organizations_url": "https://api.github.com/users/discdiver/orgs", "repos_url": "https://api.github.com/users/discdiver/repos", "events_url": "https://api.github.com/users/discdiver/events{/privacy}", "received_events_url": "https://api.github.com/users/discdiver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 3, "created_at": "2018-08-31T21:10:18Z", "updated_at": "2018-09-03T18:45:00Z", "closed_at": "2018-09-03T18:45:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems to be just taking the mean of the output for a given level of input.\r\n\r\nSimilar issue raised previously #38, not clear if OP's  issue was resolved. Code and actual and expected output are below.\r\n\r\nNo change with\r\n```\r\nrandomized = True \r\n```\r\n\r\nCode:\r\n ```\r\nimport numpy as np\r\nimport pandas as pd\r\nimport category_encoders as ce\r\n\r\ndf = pd.DataFrame({\r\n    'color':[\"a\", \"a\", \"a\", \"b\", \"b\", \"b\"], \r\n    'outcome':[1,0,0,1,0,1]})\r\n\r\nX = df.drop('outcome', axis = 1)\r\ny = df.drop('color', axis = 1)\r\n\r\nce_leave = ce.LeaveOneOutEncoder(cols = ['color'], randomized = True)\r\nce_leave.fit_transform(X, y['outcome'])\r\n\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n\tcolor\r\n0\t0.33\r\n1\t0.33\r\n2\t0.33\r\n3\t0.67\r\n4\t0.67\r\n5\t0.67\r\n```\r\n\r\nExpected Output:\r\n```\r\n\tcolor\r\n0\t0.00\r\n1\t0.50\r\n2\t0.50\r\n3\t0.50\r\n4\t1.00\r\n5\t0.50\r\n```\r\n\r\nPlease advise if I have something wrong.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/115", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/115/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/115/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/115", "id": 356042987, "node_id": "MDU6SXNzdWUzNTYwNDI5ODc=", "number": 115, "title": "New release?", "user": {"login": "discdiver", "id": 7703961, "node_id": "MDQ6VXNlcjc3MDM5NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7703961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discdiver", "html_url": "https://github.com/discdiver", "followers_url": "https://api.github.com/users/discdiver/followers", "following_url": "https://api.github.com/users/discdiver/following{/other_user}", "gists_url": "https://api.github.com/users/discdiver/gists{/gist_id}", "starred_url": "https://api.github.com/users/discdiver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discdiver/subscriptions", "organizations_url": "https://api.github.com/users/discdiver/orgs", "repos_url": "https://api.github.com/users/discdiver/repos", "events_url": "https://api.github.com/users/discdiver/events{/privacy}", "received_events_url": "https://api.github.com/users/discdiver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 5, "created_at": "2018-08-31T16:15:48Z", "updated_at": "2018-10-14T14:16:32Z", "closed_at": "2018-10-14T14:16:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great package! Working on an article of Category Encoder's methods. Last release was 8 months ago - looks like quite few fixes and enhancements since then. Is a new release in the offing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/114", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/114/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/114/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/114", "id": 356032041, "node_id": "MDU6SXNzdWUzNTYwMzIwNDE=", "number": 114, "title": "LeaveOneOutEncoder and TargetEncoder don't allow DataFrame for .fit y parameter. Bug/inconsistent behavior.", "user": {"login": "discdiver", "id": 7703961, "node_id": "MDQ6VXNlcjc3MDM5NjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/7703961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/discdiver", "html_url": "https://github.com/discdiver", "followers_url": "https://api.github.com/users/discdiver/followers", "following_url": "https://api.github.com/users/discdiver/following{/other_user}", "gists_url": "https://api.github.com/users/discdiver/gists{/gist_id}", "starred_url": "https://api.github.com/users/discdiver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/discdiver/subscriptions", "organizations_url": "https://api.github.com/users/discdiver/orgs", "repos_url": "https://api.github.com/users/discdiver/repos", "events_url": "https://api.github.com/users/discdiver/events{/privacy}", "received_events_url": "https://api.github.com/users/discdiver/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 0, "created_at": "2018-08-31T15:43:44Z", "updated_at": "2018-09-04T14:48:13Z", "closed_at": "2018-09-04T14:48:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Bug/inconsistent behavior across encoders.\r\n\r\nLeaveOneOutEncoder and TargetEncoder raise Value Error when pass a data frame as y parameter to .fit .\r\n\r\nPassing a dataframe to .fit as y works for all other category encoders. \r\n\r\nReplicated locally and on Kaggle. \r\npandas 0.23.4, category_encoders 1.2.8\r\n\r\nCode:\r\n```import numpy as np\r\nimport pandas as pd\r\nimport category_encoders as ce\r\n\r\ndf = pd.DataFrame({\r\n    'color':[\"a\",\"b\",\"a\", \"c\"], \r\n    'outcome':[1, 2, 1, 3]})\r\n\r\nX = df.drop('outcome', axis = 1)\r\ny = df.drop('color', axis = 1)\r\n\r\nce_leave = ce.LeaveOneOutEncoder(cols = ['color'])\r\nce_leave.fit_transform(X, y[\"outcome\"]) ```\r\n\r\nbreaks.\r\n\r\nWorks if change the last line to the following:\r\n```ce_leave.fit_transform(X, y[\"outcome\"]) ```\r\n\r\n\r\nStack Trace:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-146-00cabf7dce40> in <module>()\r\n      1 ce_leave = ce.LeaveOneOutEncoder(cols = ['color'])\r\n----> 2 ce_leave.fit_transform(X, y)\r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/sklearn/base.py in fit_transform(self, X, y, **fit_params)\r\n    518         else:\r\n    519             # fit method of arity 2 (supervised transformation)\r\n--> 520             return self.fit(X, y, **fit_params).transform(X)\r\n    521 \r\n    522 \r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/category_encoders/leave_one_out.py in fit(self, X, y, **kwargs)\r\n    122         # first check the type\r\n    123         X = convert_input(X)\r\n--> 124         y = pd.Series(y, name='target')\r\n    125         assert X.shape[0] == y.shape[0]\r\n    126 \r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/pandas/core/series.py in __init__(self, data, index, dtype, name, copy, fastpath)\r\n    275                                        raise_cast_failure=True)\r\n    276 \r\n--> 277                 data = SingleBlockManager(data, index, fastpath=True)\r\n    278 \r\n    279         generic.NDFrame.__init__(self, data, fastpath=True)\r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/pandas/core/internals.py in __init__(self, block, axis, do_integrity_check, fastpath)\r\n   4675 \r\n   4676         if not isinstance(block, Block):\r\n-> 4677             block = make_block(block, placement=slice(0, len(axis)), ndim=1)\r\n   4678 \r\n   4679         self.blocks = [block]\r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/pandas/core/internals.py in make_block(values, placement, klass, ndim, dtype, fastpath)\r\n   3203                      placement=placement, dtype=dtype)\r\n   3204 \r\n-> 3205     return klass(values, ndim=ndim, placement=placement)\r\n   3206 \r\n   3207 # TODO: flexible with index=None and/or items=None\r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/pandas/core/internals.py in __init__(self, values, placement, ndim)\r\n   2301 \r\n   2302         super(ObjectBlock, self).__init__(values, ndim=ndim,\r\n-> 2303                                           placement=placement)\r\n   2304 \r\n   2305     @property\r\n\r\n~/anaconda3/envs/use_this/lib/python3.6/site-packages/pandas/core/internals.py in __init__(self, values, placement, ndim)\r\n    123             raise ValueError(\r\n    124                 'Wrong number of items passed {val}, placement implies '\r\n--> 125                 '{mgr}'.format(val=len(self.values), mgr=len(self.mgr_locs)))\r\n    126 \r\n    127     def _check_ndim(self, values, ndim):\r\n\r\nValueError: Wrong number of items passed 1, placement implies 16\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/109", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/109/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/109/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/109", "id": 354404080, "node_id": "MDU6SXNzdWUzNTQ0MDQwODA=", "number": 109, "title": "The fit method of TargetEncoder does not pass smoothing_in", "user": {"login": "JohnnyC08", "id": 10440346, "node_id": "MDQ6VXNlcjEwNDQwMzQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/10440346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnnyC08", "html_url": "https://github.com/JohnnyC08", "followers_url": "https://api.github.com/users/JohnnyC08/followers", "following_url": "https://api.github.com/users/JohnnyC08/following{/other_user}", "gists_url": "https://api.github.com/users/JohnnyC08/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnnyC08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnnyC08/subscriptions", "organizations_url": "https://api.github.com/users/JohnnyC08/orgs", "repos_url": "https://api.github.com/users/JohnnyC08/repos", "events_url": "https://api.github.com/users/JohnnyC08/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnnyC08/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-27T17:21:45Z", "updated_at": "2018-08-28T18:17:23Z", "closed_at": "2018-08-28T18:17:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the TargetEncoder the fit method does not pass smoothing_in into target_encode which causes the method to default to 1 for smoothing. Also, when we check transform we see that the smoothing_in is passed as the self.smoothing, but if we are calling transform after fit, then we don't even use smoothing_in since the mapping is already set.\r\n\r\nI can submit a PR which sets the parameter and add a test to https://github.com/scikit-learn-contrib/categorical-encoding/blob/master/category_encoders/tests/test_encoders.py . Before I do so, I want to confirm this is indeed an issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/107", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/107/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/107/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/107", "id": 351814764, "node_id": "MDU6SXNzdWUzNTE4MTQ3NjQ=", "number": 107, "title": "Typo in the documentation of TargetEncoder", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-08-18T11:52:23Z", "updated_at": "2018-09-03T18:40:53Z", "closed_at": "2018-09-03T18:40:53Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Typo: TargetEncode -> TargetEncoder", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/106", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/106/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/106/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/106", "id": 351708600, "node_id": "MDU6SXNzdWUzNTE3MDg2MDA=", "number": 106, "title": "LeaveOneOutEncoder crashes when we attempt to retrain it on another dataset", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-17T19:14:10Z", "updated_at": "2018-09-08T12:13:42Z", "closed_at": "2018-09-08T12:13:42Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "When we attempt to retrain the same LeaveOneOutEncoder: \r\n``` Python\r\nX_a = pd.DataFrame(data=['1', '1', '1', '2', '2', '2'], columns=['col_a'])\r\nX_b = pd.DataFrame(data=['1', '1', '1', '2', '2', '2'], columns=['col_b']) # Different column name\r\ny_dummy = [True, False, True, False, True, False]\r\nenc = encoders.LeaveOneOutEncoder()\r\nenc.fit(X_a, y_dummy)\r\nenc.fit(X_b, y_dummy) # Currently fails with KeyError: 'col_a' \r\nself.verify_numeric(enc.transform(X_b))\r\n```\r\nit will fail while executing `enc.fit(X_b, y_dummy)` because internally, `enc` will attempt to _transform_ `X_b` while it should _fit_ `X_b`.\r\n\r\nPossible solutions:\r\n\r\n1. Return an error when a user attempts to retrain the encoder\r\n2. Do what the user is asking for (e.g.: by splitting `leave_one_out` method into `leave_one_out_fit` and `leave_one_out_transform` and calling the correct one instead of relying on `mapping is not None`)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/105", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/105/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/105/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/105", "id": 351667860, "node_id": "MDU6SXNzdWUzNTE2Njc4NjA=", "number": 105, "title": "LeaveOneOutEncoder with handle_unknown = 'error'", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-17T16:58:16Z", "updated_at": "2018-09-08T13:03:36Z", "closed_at": "2018-09-08T13:03:36Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Should not the:\r\n\r\n``` Python\r\nif X[~X[switch.get('col')].isin([str(x[1]) for x in switch.get('mapping')])].shape[0] > 0:\r\n   raise ValueError('Unexpected categories found in %s' % (switch.get('col'),))\r\n```\r\nbecome something like:\r\n\r\n``` Python\r\nX_in[~X_in[switch.get('col')].isin(list(switch.get('mapping')))].shape[0] > 0\r\n   raise ValueError('Unexpected categories found in %s' % (switch.get('col'),))\r\n```\r\n\r\nor with a more detailed error message:\r\n``` Python\r\nobserved = X_in[switch.get('col')].unique()\r\nexpected = list(switch.get('mapping'))\r\nunexpected = np.setdiff1d(observed, expected)\r\nif len(unexpected) > 0:\r\n    raise ValueError('Unexpected categories %s found in column %s' % (unexpected, switch.get('col')))\r\n```\r\n?\r\n\r\nReasoning:\r\n\r\n1. `X` is after transformation - by definition it should contain new values (values unlikely to be in the mapping)\r\n2. `x[1]` raises an error for me\r\n\r\nUnit tests:\r\n``` Python\r\nX_t = self.create_dataset(n_rows=100, extras=True)\r\n\r\nenc = encoders.LeaveOneOutEncoder(impute_missing=True, handle_unknown='error', cols=['C1'])\r\n        enc.fit(X, y)\r\nself.assertTrue(np.issubdtype(enc.transform(X_t)['C1'].dtypes, np.dtype(float)))\r\nself.assertTrue(np.issubdtype(enc.transform(X_t, y_t)['C1'].dtypes, np.dtype(float)))\r\n\r\nenc = encoders.LeaveOneOutEncoder(impute_missing=True, handle_unknown='error', cols=['D'])\r\n        enc.fit(X, y)\r\nself.assertRaises(ValueError, enc.transform, X_t)\r\nself.assertRaises(ValueError, enc.transform, (X_t, y_t))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/104", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/104/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/104/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/104", "id": 351202994, "node_id": "MDU6SXNzdWUzNTEyMDI5OTQ=", "number": 104, "title": "Encoders that utilize the target should overwrite the default fit_transform()", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-08-16T13:21:31Z", "updated_at": "2018-09-03T18:41:21Z", "closed_at": "2018-09-03T18:41:21Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The default implementation of `fit_transform()` in TransformerMixin looks like:\r\n``` Python\r\nreturn self.fit(X, y, **fit_params).transform(X)\r\n```\r\n\r\nHowever, if the encoder utilizes the target, we have to use something like:\r\n``` Python\r\nreturn self.fit(X, y, **fit_params).transform(X, y)\r\n```\r\n\r\nIf we do not pass the target `y` to `transform()`, the model will unnecessarily overfit.\r\n\r\nA quick fix is to add:\r\n``` Python\r\ndef fit_transform(self, X, y=None, **fit_params):\r\n    return self.fit(X, y, **fit_params).transform(X, y)\r\n```\r\ninto `LeaveOneOutEncoder` and `TargetEncoder`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/103", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/103/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/103/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/103", "id": 349181052, "node_id": "MDU6SXNzdWUzNDkxODEwNTI=", "number": 103, "title": "Move check_random_state in LeaveOneOutEncoder", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-08-09T15:34:27Z", "updated_at": "2018-09-03T18:41:49Z", "closed_at": "2018-09-03T18:41:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Following code in LeaveOneOutEncoder:\r\n```\r\nself.random_state_ = check_random_state(self.random_state)\r\n```\r\nshould possibly be moved from `fit()` method into `transform()` method, where the random number generator is actually used. Reasoning: I would  expect the following code to pass:\r\n```\r\nenc = encoders.LeaveOneOutEncoder(random_state=2001, randomized=True)\r\nenc.fit(X, y)\r\na = enc.transform(X_t, y_t)\r\nb = enc.transform(X_t, y_t)\r\nself.assertTrue(a.equals(b))\r\n```\r\nbut currently it does not pass the test.\r\n\r\nA possible place where to move it:\r\n```\r\nif self.randomized and y is not None:\r\n    random_state_generator = check_random_state(self.random_state)\r\n    X[switch.get('col')] = (X[switch.get('col')] * random_state_generator.normal(1., self.sigma, X[switch.get('col')].shape[0]))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/101", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/101/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/101/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/101", "id": 349065518, "node_id": "MDU6SXNzdWUzNDkwNjU1MTg=", "number": 101, "title": "drop_invariant on string columns", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 1, "created_at": "2018-08-09T10:16:42Z", "updated_at": "2018-09-03T18:42:22Z", "closed_at": "2018-09-03T18:42:22Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "The following code will fail if one of the columns is non-numeric (e.g.: because only some of the string columns were converted):\r\n```\r\n# drop all output columns with 0 variance.\r\n        if self.drop_invariant:\r\n            self.drop_cols = []\r\n            X_temp = self.transform(X)\r\n            self.drop_cols = [x for x in X_temp.columns.values if X_temp[x].var() <= 10e-5]\r\n```\r\n\r\nI see multiple options:\r\n1. Measure variance of only numeric columns\r\n2. Measure variance of only generated columns \r\n3. Measure the length of the `unique()` result\r\n4. Write a function, which compares `X[attribute, i] == X[attribute, i-1]` and returns on the first difference\r\n\r\nDiscussion:\r\n1. It is necessary to decide whether we want to touch columns that are not transformed (either because they are not in the `col` parameter or because of their data type). I am inclined to not touch them. Reasoning: It would make unit testing with `self.verify_inverse_transform(X_t, enc.inverse_transform(enc.transform(X_t)))` easier. Either way, the documentation should mention whether drop_invariant applies only on generated columns or all columns (even if they contain monstrous or arguably uncomparable objects).\r\n2. Calculation of variance just to learn whether the content of a column is invariant is possibly an overkill. I am not sure whether a loop with a possibility of an early return or a vectorized comparison `col[1:]==col[:-1]` plus handling of the edge cases would be faster.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/100", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/100/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/100/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/100", "id": 348313556, "node_id": "MDU6SXNzdWUzNDgzMTM1NTY=", "number": 100, "title": "OrdinalEncoder changes column order", "user": {"login": "alexHeu", "id": 8157458, "node_id": "MDQ6VXNlcjgxNTc0NTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8157458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexHeu", "html_url": "https://github.com/alexHeu", "followers_url": "https://api.github.com/users/alexHeu/followers", "following_url": "https://api.github.com/users/alexHeu/following{/other_user}", "gists_url": "https://api.github.com/users/alexHeu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexHeu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexHeu/subscriptions", "organizations_url": "https://api.github.com/users/alexHeu/orgs", "repos_url": "https://api.github.com/users/alexHeu/repos", "events_url": "https://api.github.com/users/alexHeu/events{/privacy}", "received_events_url": "https://api.github.com/users/alexHeu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-07T13:08:24Z", "updated_at": "2018-09-26T09:25:05Z", "closed_at": "2018-09-26T09:25:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm evaluating the OrdinalTransformer for suitability in my project and noticed that it changes the column ordering.\r\nAfter applying\r\n\r\ndf_transformed =  encoder.fit_transform(df)\r\n\r\nthe ordering of the columns does not match anymore. Is this behavior expected?\r\n\r\nRegards\r\nAlexander", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/98", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/98/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/98/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/98", "id": 347717882, "node_id": "MDU6SXNzdWUzNDc3MTc4ODI=", "number": 98, "title": "LeaveOneOutEncoder with handle_unknown = 'error'", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-05T17:53:48Z", "updated_at": "2018-08-06T00:03:06Z", "closed_at": "2018-08-06T00:03:06Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "LeaveOneOutEncoder contains following code:\r\n```\r\nif X[~X['D'].isin([str(x[1]) for x in switch.get('mapping')])].shape[0] > 0:\r\n```\r\nthat raises exception:\r\n```\r\nIndexError: string index out of range\r\n```\r\nThis happens when `impute_missing=True` and `handle_unknown = 'error'`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/97", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/97/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/97/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/97", "id": 347705280, "node_id": "MDU6SXNzdWUzNDc3MDUyODA=", "number": 97, "title": "BaseN encoder should fillna only in generated columns ", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-05T15:01:59Z", "updated_at": "2018-08-11T00:53:05Z", "closed_at": "2018-08-11T00:53:05Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently, BaseN encoder replaces NA/NaN values in the whole DataFrame:\r\n```\r\nX.fillna(0.0, inplace=True)\r\n```\r\nHowever, I do not think that is desirable - categorical encoder should touch only columns that are (explicitly or implicitly) specified in `cols` parameter. The remaining columns should be left untouched.\r\n\r\nA possible (although ugly) solution:\r\n```\r\n        original_cols = set(X.columns)\r\n        # ... Encoding of X...\r\n        current_cols = set(X.columns)\r\n        # Apply only on newly generated columns: \r\n        #   on all current columns - (all original columns - encoded columns)\r\n        fillna_cols = current_cols - (original_cols - set(self.cols))\r\n        for col in fillna_cols:\r\n            X[col].fillna(0.0, inplace=True)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/96", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/96/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/96/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/96", "id": 347687603, "node_id": "MDU6SXNzdWUzNDc2ODc2MDM=", "number": 96, "title": "Reverse_dummies() does not work well with undescrores in column names or values", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-05T10:43:45Z", "updated_at": "2018-08-11T00:52:51Z", "closed_at": "2018-08-11T00:52:51Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Reverse_dummies() in OneHotEncoder does not produce correct results when an original column name contains an underscore. OneHotEncoder adds an underscore before the attribute name (e.g.: `'attribute_name'`) and its value. But then we may get something like `col0 = 'attribute_name_13'` and the following code:\r\n```\r\ncol0.split('_')[1]\r\n```\r\nselects the second token `'name'` instead of the last token `'13'`. A possible fix is to use:\r\n```\r\ncol0.split('_')[-1]\r\n```\r\n\r\nHowever, if we use `use_cat_names=True`, we have to be careful about underscores among the values, because the encoded column names may look like `attribute_name_value_name` and it is not enough to select the last token. A possible solution is to simply remove the known prefix with something like:\r\n```\r\ncol0[prefix_length:]\r\n```\r\nand in the calculation of `val`:\r\n```\r\nval = tran_col[prefix_length:]\r\n```\r\n\r\nWhere `prefix_length` is precalculated in front of the loops:\r\n```\r\nprefix_length = len(col)+1  # Original column name plus underscore\r\n```\r\n\r\nIt solves the problem and it should be even faster than than the current solution as we directly select the substring without the need to repeatedly traverse the strings char by char to find the separators, as is happening in `split()` function. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/95", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/95/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/95/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/95", "id": 347610131, "node_id": "MDU6SXNzdWUzNDc2MTAxMzE=", "number": 95, "title": "Typo in BaseN encoder", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}], "milestone": {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/milestone/3", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/milestones/3/labels", "id": 3615893, "node_id": "MDk6TWlsZXN0b25lMzYxNTg5Mw==", "number": 3, "title": "v1.3.0", "description": null, "creator": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "open", "created_at": "2018-09-02T14:26:08Z", "updated_at": "2018-10-14T14:16:32Z", "due_on": null, "closed_at": null}, "comments": 2, "created_at": "2018-08-04T11:00:44Z", "updated_at": "2018-09-03T18:42:45Z", "closed_at": "2018-09-03T18:42:45Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "There is a publicly [documented](http://contrib.scikit-learn.org/categorical-encoding/basen.html) function called `basen_to_interger`, which should likely be named `basen_to_integer`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/92", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/92/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/92/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/92", "id": 346228287, "node_id": "MDU6SXNzdWUzNDYyMjgyODc=", "number": 92, "title": "Behavior of OneHotEncoder handle_unknown option", "user": {"login": "multiloc", "id": 12200702, "node_id": "MDQ6VXNlcjEyMjAwNzAy", "avatar_url": "https://avatars1.githubusercontent.com/u/12200702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/multiloc", "html_url": "https://github.com/multiloc", "followers_url": "https://api.github.com/users/multiloc/followers", "following_url": "https://api.github.com/users/multiloc/following{/other_user}", "gists_url": "https://api.github.com/users/multiloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/multiloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/multiloc/subscriptions", "organizations_url": "https://api.github.com/users/multiloc/orgs", "repos_url": "https://api.github.com/users/multiloc/repos", "events_url": "https://api.github.com/users/multiloc/events{/privacy}", "received_events_url": "https://api.github.com/users/multiloc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2018-07-31T15:01:48Z", "updated_at": "2019-01-20T14:06:17Z", "closed_at": "2019-01-20T14:06:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to understand the behavior (and intent) of the handle_unknown option for OneHotEncoder (and by extension OrdinalEncoder). The docs imply that this should control NaN handling but below examples seem to indicate otherwise (category_encoders==1.2.8)\r\n\r\n```python\r\nIn [2]: import pandas as pd\r\n   ...: import numpy as np\r\n   ...: from category_encoders import OneHotEncoder\r\n   ...: \r\n\r\nIn [3]: X = pd.DataFrame({'a': ['foo', 'bar', 'bar'],\r\n   ...:                   'b': ['qux', np.nan, 'foo']})\r\n   ...: X\r\n   ...: \r\nOut[3]: \r\n     a    b\r\n0  foo  qux\r\n1  bar  NaN\r\n2  bar  foo\r\n\r\nIn [4]: encoder = OneHotEncoder(cols=['a', 'b'], handle_unknown='ignore', \r\n   ...:                         impute_missing=True, use_cat_names=True)\r\n   ...: encoder.fit_transform(X)\r\n   ...: \r\nOut[4]: \r\n   a_foo  a_bar  b_qux  b_nan  b_foo\r\n0      1      0      1      0      0\r\n1      0      1      0      1      0\r\n2      0      1      0      0      1\r\n\r\nIn [5]: encoder = OneHotEncoder(cols=['a', 'b'], handle_unknown='impute', \r\n   ...:                         impute_missing=True, use_cat_names=True)\r\n   ...: encoder.fit_transform(X)\r\n   ...: \r\nOut[5]: \r\n   a_foo  a_bar  a_-1  b_qux  b_nan  b_foo  b_-1\r\n0      1      0     0      1      0      0     0\r\n1      0      1     0      0      1      0     0\r\n2      0      1     0      0      0      1     0\r\n\r\nIn [6]: encoder = OneHotEncoder(cols=['a', 'b'], handle_unknown='error', \r\n   ...:                         impute_missing=True, use_cat_names=True)\r\n   ...: encoder.fit_transform(X)\r\n   ...: \r\nOut[6]: \r\n   a_foo  a_bar  b_qux  b_nan  b_foo\r\n0      1      0      1      0      0\r\n1      0      1      0      1      0\r\n2      0      1      0      0      1\r\n\r\nIn [7]: encoder = OneHotEncoder(cols=['a', 'b'], handle_unknown='ignore', \r\n   ...:                         impute_missing=False, use_cat_names=True)\r\n   ...: encoder.fit_transform(X)\r\n   ...: \r\nOut[7]: \r\n   a_foo  a_bar  b_qux  b_nan  b_foo\r\n0      1      0      1      0      0\r\n1      0      1      0      1      0\r\n2      0      1      0      0      1\r\n\r\n```   \r\nIn particular, 'error' and 'ignore' give the same behavior, treating missing observations as another category. 'impute' adds constant zero-valued columns but also treats missing observations as another category. Naively would've expected behavior similar to `pd.get_dummies(X, dummy_na={True|False})`, with `handle_unknown=ignore` corresponding to `dummy_na=False`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/91", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/91/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/91/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/91", "id": 345174914, "node_id": "MDU6SXNzdWUzNDUxNzQ5MTQ=", "number": 91, "title": "Differing dimensions for training and test", "user": {"login": "FelixNeutatz", "id": 5217389, "node_id": "MDQ6VXNlcjUyMTczODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5217389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixNeutatz", "html_url": "https://github.com/FelixNeutatz", "followers_url": "https://api.github.com/users/FelixNeutatz/followers", "following_url": "https://api.github.com/users/FelixNeutatz/following{/other_user}", "gists_url": "https://api.github.com/users/FelixNeutatz/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixNeutatz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixNeutatz/subscriptions", "organizations_url": "https://api.github.com/users/FelixNeutatz/orgs", "repos_url": "https://api.github.com/users/FelixNeutatz/repos", "events_url": "https://api.github.com/users/FelixNeutatz/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixNeutatz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-07-27T10:27:56Z", "updated_at": "2018-10-07T19:01:56Z", "closed_at": "2018-10-07T19:01:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to fit encodings on my training set and then using this fitted encoding to transform both the training and the test set:\r\n\r\n```\r\nimport category_encoders as ce\r\n\r\ntrain = ['Brunswick East', 'Fitzroy', 'Williamstown', 'Newport', 'Balwyn North', 'Doncaster', 'Melbourne', 'Albert Park', 'Bentleigh', 'Northcote']\r\ntest = ['Fitzroy North', 'Fitzroy', 'Richmond', 'Surrey Hills', 'Blackburn', 'Port Melbourne', 'Footscray', 'Yarraville', 'Carnegie', 'Surrey Hills']\r\n\r\nencoder = ce.HelmertEncoder()\r\nencoder.fit(train)\r\n\r\ntrain_t = encoder.transform(train)\r\ntest_t = encoder.transform(test)\r\n\r\nprint train_t.shape\r\n>> (10, 10)\r\nprint test_t.shape\r\n>> (10, 2)\r\n```\r\nThe problem is that the dimensions do not fit. What do I do wrong or how can I fix this issue?\r\n\r\nBest regards,\r\nFelix", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/88", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/88/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/88/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/88", "id": 342648166, "node_id": "MDU6SXNzdWUzNDI2NDgxNjY=", "number": 88, "title": "Compatibility with pandas<0.21.0 in binary.py", "user": {"login": "janmotl", "id": 4568142, "node_id": "MDQ6VXNlcjQ1NjgxNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/4568142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janmotl", "html_url": "https://github.com/janmotl", "followers_url": "https://api.github.com/users/janmotl/followers", "following_url": "https://api.github.com/users/janmotl/following{/other_user}", "gists_url": "https://api.github.com/users/janmotl/gists{/gist_id}", "starred_url": "https://api.github.com/users/janmotl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janmotl/subscriptions", "organizations_url": "https://api.github.com/users/janmotl/orgs", "repos_url": "https://api.github.com/users/janmotl/repos", "events_url": "https://api.github.com/users/janmotl/events{/privacy}", "received_events_url": "https://api.github.com/users/janmotl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-19T09:23:50Z", "updated_at": "2018-07-25T17:21:16Z", "closed_at": "2018-07-25T17:21:16Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I got an error:\r\n\r\n```\r\nFile \"/categorical-encoding/category_encoders/binary.py\", line 261, in binary\r\n    X_unique, how='left', left_on=col, right_index=True).drop(columns=[col]))\r\nTypeError: drop() got an unexpected keyword argument 'columns'\r\n```\r\n\r\nAfter looking at the documentation https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html the issue was evident: `DataFrame.drop is using syntax introduced in pandas 0.21.0` but I was running pandas 0.20.1.\r\n\r\nNevertheless, that should have been ok as `requirements.txt` contains `pandas>=0.16.0`.\r\n\r\nA possible solution to the issue is to change the following substring `.drop(columns=[col])` into `.drop(labels=col, axis=1)`, which is compatible with both, old and new versions of pandas.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/87", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/87/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/87/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/87", "id": 340163608, "node_id": "MDU6SXNzdWUzNDAxNjM2MDg=", "number": 87, "title": "Save training encoder value and use it in testing", "user": {"login": "kc004", "id": 8349649, "node_id": "MDQ6VXNlcjgzNDk2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/8349649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kc004", "html_url": "https://github.com/kc004", "followers_url": "https://api.github.com/users/kc004/followers", "following_url": "https://api.github.com/users/kc004/following{/other_user}", "gists_url": "https://api.github.com/users/kc004/gists{/gist_id}", "starred_url": "https://api.github.com/users/kc004/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kc004/subscriptions", "organizations_url": "https://api.github.com/users/kc004/orgs", "repos_url": "https://api.github.com/users/kc004/repos", "events_url": "https://api.github.com/users/kc004/events{/privacy}", "received_events_url": "https://api.github.com/users/kc004/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-11T09:31:28Z", "updated_at": "2018-08-04T23:55:20Z", "closed_at": "2018-08-04T23:55:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am facing a problem with loading same encoding values in testing.\r\n\r\nI encoded value using below code (Training side):\r\n`from sklearn.preprocessing import LabelEncoder\r\n    labelencoder_x_0 = LabelEncoder()\r\n    labelencoder_x_0.fit(x[:, 0]) \r\n    x[:, 0] = labelencoder_x_0.transform(x[:, 0])` \r\nalso tried with .fit_transform()\r\n\r\nOn the Testing side I loaded model and tried to use the same encoding using below code:\r\n`labelencoder_x_0 = LabelEncoder()\r\n      x[:, 0] = labelencoder_x_0.transform(x[:, 0])`\r\n\r\n**ERROR**: sklearn.exceptions.NotFittedError: This LabelEncoder instance is not fitted yet. Call 'fit' with appropriate arguments before using this method.\r\n\r\nI did save my model using this code:\r\n`with open(\"model.json\", \"w\") as json_file:\r\n        json_file.write(model_json)\r\n fit1.save_weights(\"model.h5\")`\r\n\r\nand load the model using below code:\r\n`json_file = open('model.json', 'r')\r\nloaded_model_json = json_file.read()\r\n json_file.close()\r\nmodel = model_from_json(loaded_model_json)\r\nmodel.load_weights(\"model.h5\")`\r\n\r\nHow to use same encoding values as training in the testing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/86", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/86/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/86/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/86", "id": 339163005, "node_id": "MDU6SXNzdWUzMzkxNjMwMDU=", "number": 86, "title": "categorical treatment by TargetEncoder", "user": {"login": "mlisovyi", "id": 10157590, "node_id": "MDQ6VXNlcjEwMTU3NTkw", "avatar_url": "https://avatars0.githubusercontent.com/u/10157590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mlisovyi", "html_url": "https://github.com/mlisovyi", "followers_url": "https://api.github.com/users/mlisovyi/followers", "following_url": "https://api.github.com/users/mlisovyi/following{/other_user}", "gists_url": "https://api.github.com/users/mlisovyi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mlisovyi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mlisovyi/subscriptions", "organizations_url": "https://api.github.com/users/mlisovyi/orgs", "repos_url": "https://api.github.com/users/mlisovyi/repos", "events_url": "https://api.github.com/users/mlisovyi/events{/privacy}", "received_events_url": "https://api.github.com/users/mlisovyi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-07-07T17:43:17Z", "updated_at": "2018-10-20T06:25:47Z", "closed_at": "2018-10-20T06:25:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be an issue with treatment of categorical issues by TargetEncoder. \r\n\r\nIf one subsamples the dataset (for example in CV), and categories have some classes with a small number of instances, then one can end up with 0 instances to fit on, but the category still keeps track of those 0-instance classes. In this case there is a division by 0 [here](https://github.com/scikit-learn-contrib/categorical-encoding/blob/50acc5092f7c14ad0cbe359cfa99ac0343f631b0/category_encoders/target_encoder.py#L218). \r\n\r\nHere is a small reproducible example:\r\n```python\r\nimport category_encoders\r\nimport numpy as np\r\nimport pandas as pd \r\nX = pd.DataFrame({'x_0': ['a'] * 5 + ['b'] * 5, 'x_1': ['c'] * 9 + ['d'] * 1})\r\ny = pd.Series([1, 1, 1, 1, 0, 1, 0, 0, 0, 0])\r\nfor f_ in X.columns:\r\n    X[f_] = X[f_].astype('category')\r\n\r\nte = category_encoders.TargetEncoder(cols=['x_0', 'x_1'], smoothing=1)\r\n# Here we drop the last training example, which has a unique category in feature x_1\r\nte = te.fit(X.iloc[:8,:], y.iloc[:8])\r\n```\r\n\r\nThis leads to \r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nZeroDivisionError                         Traceback (most recent call last)\r\n<ipython-input-23-69e74a549a12> in <module>()\r\n----> 1 te = te.fit(X.iloc[:8,:], y.iloc[:8])\r\n\r\n/opt/conda/lib/python3.6/site-packages/category_encoders/target_encoder.py in fit(self, X, y, **kwargs)\r\n    120             cols=self.cols,\r\n    121             impute_missing=self.impute_missing,\r\n--> 122             handle_unknown=self.handle_unknown\r\n    123         )\r\n    124         self.mapping = categories\r\n\r\n/opt/conda/lib/python3.6/site-packages/category_encoders/target_encoder.py in target_encode(self, X_in, y, mapping, cols, impute_missing, handle_unknown, min_samples_leaf, smoothing_in)\r\n    216                 X[str(col) + '_tmp'] = np.nan\r\n    217                 for val in tmp:\r\n--> 218                     tmp[val]['mean'] = tmp[val]['sum']/tmp[val]['count']\r\n    219                     if tmp[val]['count'] == 1:\r\n    220                         X.loc[X[col] == val, str(col) + '_tmp'] = self._mean\r\n\r\nZeroDivisionError: division by zero\r\n```\r\n\r\nA few side remarks: \r\n - it is somewhat inconvenient that `cols` argument takes a list only (it fails on an array-like object)\r\n- it is also somewhat inconvenient that automatics categorical features are setup for `object` type only, but not for `'category'`   \r\n\r\nBut maybe both of those are deliberate choice of yours\r\n\r\n**I'm using version 1.2.8 on kaggle**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/82", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/82/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/82/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/82", "id": 332603376, "node_id": "MDU6SXNzdWUzMzI2MDMzNzY=", "number": 82, "title": "which of the encoders work for classification and which work for regression", "user": {"login": "sebastiangonsal", "id": 25679053, "node_id": "MDQ6VXNlcjI1Njc5MDUz", "avatar_url": "https://avatars3.githubusercontent.com/u/25679053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastiangonsal", "html_url": "https://github.com/sebastiangonsal", "followers_url": "https://api.github.com/users/sebastiangonsal/followers", "following_url": "https://api.github.com/users/sebastiangonsal/following{/other_user}", "gists_url": "https://api.github.com/users/sebastiangonsal/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastiangonsal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastiangonsal/subscriptions", "organizations_url": "https://api.github.com/users/sebastiangonsal/orgs", "repos_url": "https://api.github.com/users/sebastiangonsal/repos", "events_url": "https://api.github.com/users/sebastiangonsal/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastiangonsal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-14T23:59:11Z", "updated_at": "2018-06-22T17:31:28Z", "closed_at": "2018-06-19T01:09:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think TargetEncoder throws some errors with regression?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/80", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/80/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/80/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/80", "id": 331808143, "node_id": "MDU6SXNzdWUzMzE4MDgxNDM=", "number": 80, "title": "Performance Improvement for Binary Encoder", "user": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 293058069, "node_id": "MDU6TGFiZWwyOTMwNTgwNjk=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-13T01:23:27Z", "updated_at": "2018-07-05T14:11:48Z", "closed_at": "2018-07-05T14:11:48Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "From issue #74 \r\n\r\n@rafarui found that binary encoder could be dramatically sped up by precomputing the encoding on the unique categories then doing a join back to the original data. \r\n\r\n```\r\nimport category_encoders as ce\r\nuniques = pd.DataFrame(df['col'].unique(), columns = ['col'])\r\nenc = ce.BinaryEncoder(verbose=1, cols=['col'])\r\nuniques = pd.concat([uniques,enc.fit_transform(uniques)], axis=1)\r\ndf= df.merge(df, how = 'left', on = 'col')\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/79", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/79/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/79/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/79", "id": 330386969, "node_id": "MDU6SXNzdWUzMzAzODY5Njk=", "number": 79, "title": "Add get_feature_names() method", "user": {"login": "eyadsibai", "id": 935729, "node_id": "MDQ6VXNlcjkzNTcyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/935729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eyadsibai", "html_url": "https://github.com/eyadsibai", "followers_url": "https://api.github.com/users/eyadsibai/followers", "following_url": "https://api.github.com/users/eyadsibai/following{/other_user}", "gists_url": "https://api.github.com/users/eyadsibai/gists{/gist_id}", "starred_url": "https://api.github.com/users/eyadsibai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eyadsibai/subscriptions", "organizations_url": "https://api.github.com/users/eyadsibai/orgs", "repos_url": "https://api.github.com/users/eyadsibai/repos", "events_url": "https://api.github.com/users/eyadsibai/events{/privacy}", "received_events_url": "https://api.github.com/users/eyadsibai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 293058069, "node_id": "MDU6TGFiZWwyOTMwNTgwNjk=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-07T18:32:18Z", "updated_at": "2019-01-20T14:07:51Z", "closed_at": "2019-01-20T14:07:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Many transformers in sklearn has the get_feature_names() method which is essential to use with FeatureUnion class. They are adding the method to the rest of the transformers\r\nhttps://github.com/scikit-learn/scikit-learn/issues/6425\r\nhttps://github.com/scikit-learn/scikit-learn/pull/10198\r\nhttps://github.com/scikit-learn/scikit-learn/pull/6445\r\nhttps://github.com/scikit-learn/scikit-learn/pull/6441\r\n\r\nI would say it is important to have that method in the transformers of this package. In this way, we can use is with FeatureUnion and get the feature names in a nice way plus being compatible with scikit-learn", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/78", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/78/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/78/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/78", "id": 330173142, "node_id": "MDU6SXNzdWUzMzAxNzMxNDI=", "number": 78, "title": "Can't transform a single data point", "user": {"login": "andymancodes", "id": 37308037, "node_id": "MDQ6VXNlcjM3MzA4MDM3", "avatar_url": "https://avatars3.githubusercontent.com/u/37308037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andymancodes", "html_url": "https://github.com/andymancodes", "followers_url": "https://api.github.com/users/andymancodes/followers", "following_url": "https://api.github.com/users/andymancodes/following{/other_user}", "gists_url": "https://api.github.com/users/andymancodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/andymancodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andymancodes/subscriptions", "organizations_url": "https://api.github.com/users/andymancodes/orgs", "repos_url": "https://api.github.com/users/andymancodes/repos", "events_url": "https://api.github.com/users/andymancodes/events{/privacy}", "received_events_url": "https://api.github.com/users/andymancodes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-07T08:43:12Z", "updated_at": "2018-06-07T13:24:37Z", "closed_at": "2018-06-07T13:24:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthe transformation on a dataframe went well.\r\n\r\nBut when I try it on a single data point, like \ud83d\udc4d \r\n\r\nenc.transform([['Dell', 'PC']])\r\n\r\n-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))\r\n   3066 \r\n   3067         indexer = self.get_indexer([key], method=method, tolerance=tolerance)\r\n\r\npandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_loc()\r\n\r\npandas\\_libs\\index.pyx in pandas._libs.index.IndexEngine.get_loc()\r\n\r\nKeyError: 'CompanyName'\r\n\r\nI am seeing the same behavior on all encoders...I had upgraded to 1.8 from 1.7...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/77", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/77/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/77/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/77", "id": 329988540, "node_id": "MDU6SXNzdWUzMjk5ODg1NDA=", "number": 77, "title": "Similarity Encoding for Dirty Categories", "user": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-06-06T18:48:51Z", "updated_at": "2018-06-07T13:25:20Z", "closed_at": "2018-06-07T13:25:20Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Very interesting paper here: https://arxiv.org/abs/1806.00979\r\n\r\n@GaelVaroquaux is there an implementation of this out anywhere else?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/76", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/76/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/76/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/76", "id": 329840010, "node_id": "MDU6SXNzdWUzMjk4NDAwMTA=", "number": 76, "title": "How to choose an encoding method?", "user": {"login": "andymancodes", "id": 37308037, "node_id": "MDQ6VXNlcjM3MzA4MDM3", "avatar_url": "https://avatars3.githubusercontent.com/u/37308037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andymancodes", "html_url": "https://github.com/andymancodes", "followers_url": "https://api.github.com/users/andymancodes/followers", "following_url": "https://api.github.com/users/andymancodes/following{/other_user}", "gists_url": "https://api.github.com/users/andymancodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/andymancodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andymancodes/subscriptions", "organizations_url": "https://api.github.com/users/andymancodes/orgs", "repos_url": "https://api.github.com/users/andymancodes/repos", "events_url": "https://api.github.com/users/andymancodes/events{/privacy}", "received_events_url": "https://api.github.com/users/andymancodes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-06-06T12:09:38Z", "updated_at": "2018-06-07T08:08:54Z", "closed_at": "2018-06-06T13:00:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI am not getting any resources on what encoding to choose for my model.\r\n\r\nI tried Binary and Hashing encoding but the predictions are way worse using the Binary encoding.\r\n\r\nHow to choose an encoding that is suited for my problem?\r\n\r\nAny help is greatly appreciated. Thanks!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/75", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/75/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/75/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/75", "id": 329839186, "node_id": "MDU6SXNzdWUzMjk4MzkxODY=", "number": 75, "title": "How to deploy Hashing Encoder?", "user": {"login": "andymancodes", "id": 37308037, "node_id": "MDQ6VXNlcjM3MzA4MDM3", "avatar_url": "https://avatars3.githubusercontent.com/u/37308037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andymancodes", "html_url": "https://github.com/andymancodes", "followers_url": "https://api.github.com/users/andymancodes/followers", "following_url": "https://api.github.com/users/andymancodes/following{/other_user}", "gists_url": "https://api.github.com/users/andymancodes/gists{/gist_id}", "starred_url": "https://api.github.com/users/andymancodes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andymancodes/subscriptions", "organizations_url": "https://api.github.com/users/andymancodes/orgs", "repos_url": "https://api.github.com/users/andymancodes/repos", "events_url": "https://api.github.com/users/andymancodes/events{/privacy}", "received_events_url": "https://api.github.com/users/andymancodes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-06T12:07:04Z", "updated_at": "2018-06-06T16:52:27Z", "closed_at": "2018-06-06T13:00:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI used Hashing encoder for my model. \r\n\r\nThe problem is now I want to deploy my model.\r\n\r\nHow will I encode my values at prediction time?\r\n\r\nThe Hashing encoder has only hash_method attribute but no mapping attribute.\r\n\r\nPlease help.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/74", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/74/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/74/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/74", "id": 328774394, "node_id": "MDU6SXNzdWUzMjg3NzQzOTQ=", "number": 74, "title": "Improvement for binary encoding. ", "user": {"login": "rafarui", "id": 24738559, "node_id": "MDQ6VXNlcjI0NzM4NTU5", "avatar_url": "https://avatars1.githubusercontent.com/u/24738559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafarui", "html_url": "https://github.com/rafarui", "followers_url": "https://api.github.com/users/rafarui/followers", "following_url": "https://api.github.com/users/rafarui/following{/other_user}", "gists_url": "https://api.github.com/users/rafarui/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafarui/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafarui/subscriptions", "organizations_url": "https://api.github.com/users/rafarui/orgs", "repos_url": "https://api.github.com/users/rafarui/repos", "events_url": "https://api.github.com/users/rafarui/events{/privacy}", "received_events_url": "https://api.github.com/users/rafarui/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2018-06-02T20:24:53Z", "updated_at": "2018-06-13T01:24:50Z", "closed_at": "2018-06-06T12:59:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just found this package and it will be part of my standard library for sure. Congrats guys. \r\nI would like to suggest an improvement for the binary encoder. \r\nI am using the binary encoder this way:\r\n\r\n```python \r\nimport category_encoders as ce\r\nuniques = pd.DataFrame(df['col'].unique(), columns = ['col'])\r\nenc = ce.BinaryEncoder(verbose=1, cols=['col'])\r\nuniques = pd.concat([uniques,enc.fit_transform(uniques)], axis=1)\r\ndf= df.merge(df, how = 'left', on = 'col')\r\n```\r\nFor a DM with 27kk rows, and 5 possible values for the encoding, it took 5s, while passing all the DM to the fit_transform, it took 4.5min. It is much faster than using the binary for all the data frame.  \r\n\r\nJust a suggestion. Congrats for the great work. \r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/73", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/73/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/73/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/73", "id": 327025373, "node_id": "MDU6SXNzdWUzMjcwMjUzNzM=", "number": 73, "title": "New version request", "user": {"login": "kuraga", "id": 1063219, "node_id": "MDQ6VXNlcjEwNjMyMTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1063219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuraga", "html_url": "https://github.com/kuraga", "followers_url": "https://api.github.com/users/kuraga/followers", "following_url": "https://api.github.com/users/kuraga/following{/other_user}", "gists_url": "https://api.github.com/users/kuraga/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuraga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuraga/subscriptions", "organizations_url": "https://api.github.com/users/kuraga/orgs", "repos_url": "https://api.github.com/users/kuraga/repos", "events_url": "https://api.github.com/users/kuraga/events{/privacy}", "received_events_url": "https://api.github.com/users/kuraga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-28T13:22:43Z", "updated_at": "2018-06-12T07:25:25Z", "closed_at": "2018-05-29T01:16:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Good day!\r\n\r\nThere are some bugfixes and `use_cat_names` new feature. What about a new version?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/72", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/72/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/72/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/72", "id": 326629804, "node_id": "MDU6SXNzdWUzMjY2Mjk4MDQ=", "number": 72, "title": "Do the targetencoding and leave one out encoding work with both classification and regression problems?", "user": {"login": "sebastiangonsal", "id": 25679053, "node_id": "MDQ6VXNlcjI1Njc5MDUz", "avatar_url": "https://avatars3.githubusercontent.com/u/25679053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastiangonsal", "html_url": "https://github.com/sebastiangonsal", "followers_url": "https://api.github.com/users/sebastiangonsal/followers", "following_url": "https://api.github.com/users/sebastiangonsal/following{/other_user}", "gists_url": "https://api.github.com/users/sebastiangonsal/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastiangonsal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastiangonsal/subscriptions", "organizations_url": "https://api.github.com/users/sebastiangonsal/orgs", "repos_url": "https://api.github.com/users/sebastiangonsal/repos", "events_url": "https://api.github.com/users/sebastiangonsal/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastiangonsal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-25T18:55:42Z", "updated_at": "2018-05-29T01:15:32Z", "closed_at": "2018-05-29T01:15:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do the targetencoding and leave one out encoding work with both classification and regression problems? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/70", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/70/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/70/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/70", "id": 324182824, "node_id": "MDU6SXNzdWUzMjQxODI4MjQ=", "number": 70, "title": "Request to add support for pandas categorical types when using OrdinalEncoder", "user": {"login": "dennisobrien", "id": 1168692, "node_id": "MDQ6VXNlcjExNjg2OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1168692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dennisobrien", "html_url": "https://github.com/dennisobrien", "followers_url": "https://api.github.com/users/dennisobrien/followers", "following_url": "https://api.github.com/users/dennisobrien/following{/other_user}", "gists_url": "https://api.github.com/users/dennisobrien/gists{/gist_id}", "starred_url": "https://api.github.com/users/dennisobrien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dennisobrien/subscriptions", "organizations_url": "https://api.github.com/users/dennisobrien/orgs", "repos_url": "https://api.github.com/users/dennisobrien/repos", "events_url": "https://api.github.com/users/dennisobrien/events{/privacy}", "received_events_url": "https://api.github.com/users/dennisobrien/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "dennisobrien", "id": 1168692, "node_id": "MDQ6VXNlcjExNjg2OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1168692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dennisobrien", "html_url": "https://github.com/dennisobrien", "followers_url": "https://api.github.com/users/dennisobrien/followers", "following_url": "https://api.github.com/users/dennisobrien/following{/other_user}", "gists_url": "https://api.github.com/users/dennisobrien/gists{/gist_id}", "starred_url": "https://api.github.com/users/dennisobrien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dennisobrien/subscriptions", "organizations_url": "https://api.github.com/users/dennisobrien/orgs", "repos_url": "https://api.github.com/users/dennisobrien/repos", "events_url": "https://api.github.com/users/dennisobrien/events{/privacy}", "received_events_url": "https://api.github.com/users/dennisobrien/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "dennisobrien", "id": 1168692, "node_id": "MDQ6VXNlcjExNjg2OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1168692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dennisobrien", "html_url": "https://github.com/dennisobrien", "followers_url": "https://api.github.com/users/dennisobrien/followers", "following_url": "https://api.github.com/users/dennisobrien/following{/other_user}", "gists_url": "https://api.github.com/users/dennisobrien/gists{/gist_id}", "starred_url": "https://api.github.com/users/dennisobrien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dennisobrien/subscriptions", "organizations_url": "https://api.github.com/users/dennisobrien/orgs", "repos_url": "https://api.github.com/users/dennisobrien/repos", "events_url": "https://api.github.com/users/dennisobrien/events{/privacy}", "received_events_url": "https://api.github.com/users/dennisobrien/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2018-05-17T20:56:13Z", "updated_at": "2018-12-25T15:20:37Z", "closed_at": "2018-12-25T15:20:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi All,\r\n\r\nI ran into an issue using OrdinalEncoder where I assumed that it would use the mapping in the categorical types in the passed pandas dataframe.  Instead, it created a mapping based on the order of the data passed to `fit_transform`.  I realize that this is user error, but it would be nice for OrdinalEncoder to use the existing mapping information from the categorical dtype.  If the maintainers think this would be a nice addition, I'd be happy to make a PR.\r\n\r\nHere's a demonstration of the issue.\r\n\r\nFirst I'll create a categorical dtype and a dataframe that uses it.\r\n```python\r\nfrom category_encoders.ordinal import OrdinalEncoder\r\nimport pandas as pd\r\nfrom pandas.api.types import CategoricalDtype\r\n\r\nplatforms = ['android', 'ios', 'amazon']\r\nplatform_category = CategoricalDtype(categories=platforms, ordered=False)\r\n\r\ndf = pd.DataFrame([\r\n    {'id': 1, 'platform': 'android'},\r\n    {'id': 2, 'platform': 'ios'},\r\n    {'id': 3, 'platform': 'amazon'},\r\n])\r\ndf['platform'] = df['platform'].astype(platform_category)\r\nprint(df)\r\n```\r\n```\r\n   id platform\r\n0   1  android\r\n1   2      ios\r\n2   3   amazon\r\n```\r\n\r\nThe encoding from the categorical dtype looks like this:\r\n```python\r\n[(cat, code) for code, cat in enumerate(df['platform'].cat.categories)]\r\n```\r\n```\r\n[('android', 0), ('ios', 1), ('amazon', 2)]\r\n```\r\n\r\nNow I'll make an encoder without a mapping parameter, then transform with the data sorted.\r\n```python\r\ncat_encoder_a = OrdinalEncoder(cols=categorical_columns)\r\ndf_a = cat_encoder_a.fit_transform(df.sort_values(by='platform', ascending=True))\r\nprint(df_a)\r\n```\r\n```\r\n   id  platform\r\n0   1         0\r\n1   2         1\r\n2   3         2\r\n```\r\n\r\nThe category mapping from the encoder happens to match the categorical dtype mapping because of the sort order of the dataframe.\r\n```python\r\ncat_encoder_a.category_mapping\r\n```\r\n```\r\n[{'col': 'platform', 'mapping': [('android', 0), ('ios', 1), ('amazon', 2)]}]\r\n```\r\n\r\nBut if I reverse the order of the data passed to `fit_transform` I will get a different mapping.\r\n```python\r\ncat_encoder_b = OrdinalEncoder(cols=categorical_columns)\r\ndf_b = cat_encoder_b.fit_transform(df.sort_values(by='platform', ascending=False))\r\ncat_encoder_b.category_mapping\r\n```\r\n```\r\n[{'col': 'platform', 'mapping': [('amazon', 0), ('ios', 1), ('android', 2)]}]\r\n```\r\n\r\nI can get a stable mapping from the categorical types in the dataframe itself (instead of relying on the order of the data).\r\n```python\r\ncategory_mapping = [\r\n    {'col': column_name, 'mapping': [(cat, code) for code, cat in enumerate(df[column_name].cat.categories)]} \r\n    for column_name in df.select_dtypes(['category']).columns\r\n]\r\ncategory_mapping\r\n```\r\n```\r\n[{'col': 'platform', 'mapping': [('android', 0), ('ios', 1), ('amazon', 2)]}]\r\n```\r\n\r\n```python\r\ncat_encoder_c = OrdinalEncoder(cols=categorical_columns, mapping=category_mapping)\r\ndf_c = cat_encoder_c.fit_transform(df).sort_values(by='platform', ascending=False)\r\ncat_encoder_c.category_mapping\r\n```\r\n```\r\n[{'col': 'platform', 'mapping': [('android', 0), ('ios', 1), ('amazon', 2)]}]\r\n```\r\n\r\nSo while it is not hard to pass a custom mapping, it would be nice for `OrdinalEncoder` to handle this automatically if no `mapping` is passed __and__ if any of the columns are pandas categoricals.  I think this logic could be handled around here.  https://github.com/scikit-learn-contrib/categorical-encoding/blob/1.2.6/category_encoders/ordinal.py#L270\r\n\r\nIf others think this would be a positive addition, I will make a PR.\r\n\r\nthanks,\r\nDennis\r\n\r\nEDIT: I modified the above code to fix a bug in getting the mapping from the pandas categorical dtype.  The previous code I had happened to work only because the data was in order, but in general that does not work.  The correct way is\r\n```python\r\n[(cat, code) for code, cat in enumerate(df[column_name].cat.categories)]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/69", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/69/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/69/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/69", "id": 323741231, "node_id": "MDU6SXNzdWUzMjM3NDEyMzE=", "number": 69, "title": "Issue at install with statsmodels v 0.9.0", "user": {"login": "hayesgb", "id": 12595382, "node_id": "MDQ6VXNlcjEyNTk1Mzgy", "avatar_url": "https://avatars1.githubusercontent.com/u/12595382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hayesgb", "html_url": "https://github.com/hayesgb", "followers_url": "https://api.github.com/users/hayesgb/followers", "following_url": "https://api.github.com/users/hayesgb/following{/other_user}", "gists_url": "https://api.github.com/users/hayesgb/gists{/gist_id}", "starred_url": "https://api.github.com/users/hayesgb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hayesgb/subscriptions", "organizations_url": "https://api.github.com/users/hayesgb/orgs", "repos_url": "https://api.github.com/users/hayesgb/repos", "events_url": "https://api.github.com/users/hayesgb/events{/privacy}", "received_events_url": "https://api.github.com/users/hayesgb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-05-16T18:44:49Z", "updated_at": "2018-05-29T01:41:58Z", "closed_at": "2018-05-29T01:41:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I encountered an issue with categorical-encoders and a new release of statsmodels.  I've created a package, and when calling `pip install .` on the package to install it in a Docker container, I get the following:\r\n\r\n```\r\n  Downloading https://files.pythonhosted.org/packages/67/68/eb3ec6ab61f97216c257edddb853cc174cd76ea44b365cf4adaedcd44482/statsmodels-0.9.0.tar.gz (12.7MB)\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-e8na0ezb/statsmodels/setup.py\", line 347, in <module>\r\n        from numpy.distutils.misc_util import get_info\r\n    ImportError: No module named 'numpy'\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-e8na0ezb/statsmodels/\r\nThe command '/bin/sh -c pip install .' returned a non-zero code: 1\r\n```\r\n\r\nThis worked prior to the release of statsmodels 0.9.0, which was released at the end of April 2018. \r\n Specifying statsmodels==0.8.0 in the setup.py  `install_requires` list eliminated the issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/68", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/68/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/68/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/68", "id": 322610877, "node_id": "MDU6SXNzdWUzMjI2MTA4Nzc=", "number": 68, "title": "Target Encoding for regression task?", "user": {"login": "mrgloom", "id": 4003908, "node_id": "MDQ6VXNlcjQwMDM5MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4003908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrgloom", "html_url": "https://github.com/mrgloom", "followers_url": "https://api.github.com/users/mrgloom/followers", "following_url": "https://api.github.com/users/mrgloom/following{/other_user}", "gists_url": "https://api.github.com/users/mrgloom/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrgloom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrgloom/subscriptions", "organizations_url": "https://api.github.com/users/mrgloom/orgs", "repos_url": "https://api.github.com/users/mrgloom/repos", "events_url": "https://api.github.com/users/mrgloom/events{/privacy}", "received_events_url": "https://api.github.com/users/mrgloom/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-13T17:09:44Z", "updated_at": "2018-05-18T17:32:22Z", "closed_at": "2018-05-18T17:32:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to use Target Encoding for regression task?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/67", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/67/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/67/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/67", "id": 322427451, "node_id": "MDU6SXNzdWUzMjI0Mjc0NTE=", "number": 67, "title": "Error when using pipelines with BinaryEncoder", "user": {"login": "rafamonge", "id": 7952208, "node_id": "MDQ6VXNlcjc5NTIyMDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7952208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rafamonge", "html_url": "https://github.com/rafamonge", "followers_url": "https://api.github.com/users/rafamonge/followers", "following_url": "https://api.github.com/users/rafamonge/following{/other_user}", "gists_url": "https://api.github.com/users/rafamonge/gists{/gist_id}", "starred_url": "https://api.github.com/users/rafamonge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rafamonge/subscriptions", "organizations_url": "https://api.github.com/users/rafamonge/orgs", "repos_url": "https://api.github.com/users/rafamonge/repos", "events_url": "https://api.github.com/users/rafamonge/events{/privacy}", "received_events_url": "https://api.github.com/users/rafamonge/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-05-11T20:39:47Z", "updated_at": "2018-05-29T01:39:39Z", "closed_at": "2018-05-29T01:39:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I adapted this code from the examples/encoding_examples.py file to use a pipeline. cross_val_score fail with the error at the end of this post\r\n\r\n```python \r\nimport pandas as pd\r\nimport numpy as np\r\nfrom sklearn import cross_validation, linear_model, model_selection\r\nimport category_encoders\r\nfrom examples.source_data.loaders import get_mushroom_data, get_cars_data, get_splice_data\r\nfrom sklearn.pipeline import make_pipeline\r\n\r\nX, y, mapping = get_mushroom_data()\r\nt = category_encoders.BinaryEncoder(handle_unknown = \"ignore\")\r\nmypipeline = make_pipeline(t, linear_model.LogisticRegression())\r\n\r\ncross_validation.cross_val_score(mypipeline, X, y, n_jobs=1, cv=5)\r\n```\r\n\r\n\r\n# Abridged List of packages installed\r\n- numpy                     1.14.0           py36h4a99626_1\r\n- pandas                    0.22.0           py36h6538335_0\r\n- python                    3.6.4                h6538335_1\r\n- scikit-learn              0.19.1           py36h53aea1b_0\r\n\r\n\r\n# ERROR \r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-1-2ae977b1db82> in <module>()\r\n     10 mypipeline = make_pipeline(t, linear_model.LogisticRegression())\r\n     11 \r\n---> 12 cross_validation.cross_val_score(mypipeline, X, y, n_jobs=1, cv=5)\r\n     13 \r\n     14 \r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\cross_validation.py in cross_val_score(estimator, X, y, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch)\r\n   1579                                               train, test, verbose, None,\r\n   1580                                               fit_params)\r\n-> 1581                       for train, test in cv)\r\n   1582     return np.array(scores)[:, 0]\r\n   1583 \r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py in __call__(self, iterable)\r\n    777             # was dispatched. In particular this covers the edge\r\n    778             # case of Parallel used with an exhausted iterator.\r\n--> 779             while self.dispatch_one_batch(iterator):\r\n    780                 self._iterating = True\r\n    781             else:\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py in dispatch_one_batch(self, iterator)\r\n    623                 return False\r\n    624             else:\r\n--> 625                 self._dispatch(tasks)\r\n    626                 return True\r\n    627 \r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py in _dispatch(self, batch)\r\n    586         dispatch_timestamp = time.time()\r\n    587         cb = BatchCompletionCallBack(dispatch_timestamp, len(batch), self)\r\n--> 588         job = self._backend.apply_async(batch, callback=cb)\r\n    589         self._jobs.append(job)\r\n    590 \r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\_parallel_backends.py in apply_async(self, func, callback)\r\n    109     def apply_async(self, func, callback=None):\r\n    110         \"\"\"Schedule a func to be run\"\"\"\r\n--> 111         result = ImmediateResult(func)\r\n    112         if callback:\r\n    113             callback(result)\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\_parallel_backends.py in __init__(self, batch)\r\n    330         # Don't delay the application, to avoid keeping the input\r\n    331         # arguments in memory\r\n--> 332         self.results = batch()\r\n    333 \r\n    334     def get(self):\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py in __call__(self)\r\n    129 \r\n    130     def __call__(self):\r\n--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]\r\n    132 \r\n    133     def __len__(self):\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\externals\\joblib\\parallel.py in <listcomp>(.0)\r\n    129 \r\n    130     def __call__(self):\r\n--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]\r\n    132 \r\n    133     def __len__(self):\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\cross_validation.py in _fit_and_score(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, error_score)\r\n   1692 \r\n   1693     else:\r\n-> 1694         test_score = _score(estimator, X_test, y_test, scorer)\r\n   1695         if return_train_score:\r\n   1696             train_score = _score(estimator, X_train, y_train, scorer)\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\cross_validation.py in _score(estimator, X_test, y_test, scorer)\r\n   1749         score = scorer(estimator, X_test)\r\n   1750     else:\r\n-> 1751         score = scorer(estimator, X_test, y_test)\r\n   1752     if hasattr(score, 'item'):\r\n   1753         try:\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\metrics\\scorer.py in _passthrough_scorer(estimator, *args, **kwargs)\r\n    242 def _passthrough_scorer(estimator, *args, **kwargs):\r\n    243     \"\"\"Function that wraps estimator.score\"\"\"\r\n--> 244     return estimator.score(*args, **kwargs)\r\n    245 \r\n    246 \r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\utils\\metaestimators.py in <lambda>(*args, **kwargs)\r\n    113 \r\n    114         # lambda, but not partial, allows help() to work with update_wrapper\r\n--> 115         out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs)\r\n    116         # update the docstring of the returned function\r\n    117         update_wrapper(out, self.fn)\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\sklearn\\pipeline.py in score(self, X, y, sample_weight)\r\n    484         for name, transform in self.steps[:-1]:\r\n    485             if transform is not None:\r\n--> 486                 Xt = transform.transform(Xt)\r\n    487         score_params = {}\r\n    488         if sample_weight is not None:\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\category_encoders\\binary.py in transform(self, X)\r\n    163         X = self.ordinal_encoder.transform(X)\r\n    164 \r\n--> 165         X = self.binary(X, cols=self.cols)\r\n    166 \r\n    167         if self.drop_invariant:\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\category_encoders\\binary.py in binary(self, X_in, cols)\r\n    248 \r\n    249             # map the ordinal column into a list of these digits, of length digits\r\n--> 250             X[col] = X[col].map(lambda x: self.col_transform(x, digits))\r\n    251 \r\n    252             for dig in range(digits):\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\pandas\\core\\series.py in map(self, arg, na_action)\r\n   2352         else:\r\n   2353             # arg is a function\r\n-> 2354             new_values = map_f(values, arg)\r\n   2355 \r\n   2356         return self._constructor(new_values,\r\n\r\npandas/_libs/src/inference.pyx in pandas._libs.lib.map_infer()\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\category_encoders\\binary.py in <lambda>(x)\r\n    248 \r\n    249             # map the ordinal column into a list of these digits, of length digits\r\n--> 250             X[col] = X[col].map(lambda x: self.col_transform(x, digits))\r\n    251 \r\n    252             for dig in range(digits):\r\n\r\nC:\\Anaconda3\\lib\\site-packages\\category_encoders\\binary.py in col_transform(col, digits)\r\n    309         else:\r\n    310 \r\n--> 311             col = list(\"{0:b}\".format(int(col)))\r\n    312             if len(col) == digits:\r\n    313                 return col\r\n\r\nValueError: cannot convert float NaN to integer\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/66", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/66/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/66/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/66", "id": 320098473, "node_id": "MDU6SXNzdWUzMjAwOTg0NzM=", "number": 66, "title": "[Question] Does categorical-encoder work with numpy?", "user": {"login": "bozhang0504", "id": 9685145, "node_id": "MDQ6VXNlcjk2ODUxNDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9685145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bozhang0504", "html_url": "https://github.com/bozhang0504", "followers_url": "https://api.github.com/users/bozhang0504/followers", "following_url": "https://api.github.com/users/bozhang0504/following{/other_user}", "gists_url": "https://api.github.com/users/bozhang0504/gists{/gist_id}", "starred_url": "https://api.github.com/users/bozhang0504/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bozhang0504/subscriptions", "organizations_url": "https://api.github.com/users/bozhang0504/orgs", "repos_url": "https://api.github.com/users/bozhang0504/repos", "events_url": "https://api.github.com/users/bozhang0504/events{/privacy}", "received_events_url": "https://api.github.com/users/bozhang0504/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-03T22:14:13Z", "updated_at": "2018-05-29T01:19:29Z", "closed_at": "2018-05-29T01:19:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried with Leave One Out encoder, I got error when try to input numpy array. Does it work with Pandas dataframe only? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/64", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/64/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/64/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/64", "id": 319248612, "node_id": "MDU6SXNzdWUzMTkyNDg2MTI=", "number": 64, "title": "Documentation not clear about the \"mapping\" parameter of OrdinalEncoder", "user": {"login": "vivekk-ezdi", "id": 13148882, "node_id": "MDQ6VXNlcjEzMTQ4ODgy", "avatar_url": "https://avatars3.githubusercontent.com/u/13148882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vivekk-ezdi", "html_url": "https://github.com/vivekk-ezdi", "followers_url": "https://api.github.com/users/vivekk-ezdi/followers", "following_url": "https://api.github.com/users/vivekk-ezdi/following{/other_user}", "gists_url": "https://api.github.com/users/vivekk-ezdi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vivekk-ezdi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vivekk-ezdi/subscriptions", "organizations_url": "https://api.github.com/users/vivekk-ezdi/orgs", "repos_url": "https://api.github.com/users/vivekk-ezdi/repos", "events_url": "https://api.github.com/users/vivekk-ezdi/events{/privacy}", "received_events_url": "https://api.github.com/users/vivekk-ezdi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 931652311, "node_id": "MDU6TGFiZWw5MzE2NTIzMTE=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/documentation", "name": "documentation", "color": "962213", "default": true, "description": ""}, {"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "vivekk-ezdi", "id": 13148882, "node_id": "MDQ6VXNlcjEzMTQ4ODgy", "avatar_url": "https://avatars3.githubusercontent.com/u/13148882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vivekk-ezdi", "html_url": "https://github.com/vivekk-ezdi", "followers_url": "https://api.github.com/users/vivekk-ezdi/followers", "following_url": "https://api.github.com/users/vivekk-ezdi/following{/other_user}", "gists_url": "https://api.github.com/users/vivekk-ezdi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vivekk-ezdi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vivekk-ezdi/subscriptions", "organizations_url": "https://api.github.com/users/vivekk-ezdi/orgs", "repos_url": "https://api.github.com/users/vivekk-ezdi/repos", "events_url": "https://api.github.com/users/vivekk-ezdi/events{/privacy}", "received_events_url": "https://api.github.com/users/vivekk-ezdi/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vivekk-ezdi", "id": 13148882, "node_id": "MDQ6VXNlcjEzMTQ4ODgy", "avatar_url": "https://avatars3.githubusercontent.com/u/13148882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vivekk-ezdi", "html_url": "https://github.com/vivekk-ezdi", "followers_url": "https://api.github.com/users/vivekk-ezdi/followers", "following_url": "https://api.github.com/users/vivekk-ezdi/following{/other_user}", "gists_url": "https://api.github.com/users/vivekk-ezdi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vivekk-ezdi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vivekk-ezdi/subscriptions", "organizations_url": "https://api.github.com/users/vivekk-ezdi/orgs", "repos_url": "https://api.github.com/users/vivekk-ezdi/repos", "events_url": "https://api.github.com/users/vivekk-ezdi/events{/privacy}", "received_events_url": "https://api.github.com/users/vivekk-ezdi/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2018-05-01T16:26:38Z", "updated_at": "2018-12-25T15:20:53Z", "closed_at": "2018-12-25T15:20:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nPlease look at [this stack-overflow question for reference](https://stackoverflow.com/q/50092911/3374996). The mapping parameter usage by the user in this question is wrong.\r\n\r\nBut I am not able to find the documentation of perfect usage of `mapping` param in OrdinalEncoder. The [documentation](http://contrib.scikit-learn.org/categorical-encoding/ordinal.html#category_encoders.ordinal.OrdinalEncoder) only says this:\r\n\r\n> \"a mapping of class to label to use for the encoding, optional.\"\r\n\r\nImplementing default examples and the example in this issue #52, and then looking at the output of the following code:\r\n\r\n    encoder.category_mapping\r\n    # Output: [{'col': 'col1', 'mapping': [(None, 0), ('a', 1), ('b', 2)]}]\r\n\r\nmakes it clear.\r\n\r\nI think the documentation should be clear on format that the `'mapping'` should be a `list` of `dicts` and `dicts` should contain the keys `'col'` and `'mapping'` and that the mapping should be a list of tuples of format `(original_label, encoded_label)`, with an example preferably.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/63", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/63/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/63/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/63", "id": 318051835, "node_id": "MDU6SXNzdWUzMTgwNTE4MzU=", "number": 63, "title": "[Question] Can i get transformed names from encoders? ", "user": {"login": "sharthZ23", "id": 4403189, "node_id": "MDQ6VXNlcjQ0MDMxODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/4403189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharthZ23", "html_url": "https://github.com/sharthZ23", "followers_url": "https://api.github.com/users/sharthZ23/followers", "following_url": "https://api.github.com/users/sharthZ23/following{/other_user}", "gists_url": "https://api.github.com/users/sharthZ23/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharthZ23/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharthZ23/subscriptions", "organizations_url": "https://api.github.com/users/sharthZ23/orgs", "repos_url": "https://api.github.com/users/sharthZ23/repos", "events_url": "https://api.github.com/users/sharthZ23/events{/privacy}", "received_events_url": "https://api.github.com/users/sharthZ23/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-26T14:20:52Z", "updated_at": "2018-05-13T14:59:26Z", "closed_at": "2018-05-13T14:59:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "When i use encoders in `FeatureUnion` after `transform` i always get `numpy.ndarray` regardless of what was fed to the input, `pd.DataFrame` or smth else. When i try get new feature names by `FeatureUnion.get_feature_names()` i got `AttributeError: Transformer ohe (type OneHotEncoder) does not provide get_feature_names.`. So how can i know transformed feature names?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/61", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/61/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/61/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/61", "id": 299249428, "node_id": "MDU6SXNzdWUyOTkyNDk0Mjg=", "number": 61, "title": "How use LeaveOneOutEncoder in pipelines", "user": {"login": "SergioEanX", "id": 11768886, "node_id": "MDQ6VXNlcjExNzY4ODg2", "avatar_url": "https://avatars3.githubusercontent.com/u/11768886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioEanX", "html_url": "https://github.com/SergioEanX", "followers_url": "https://api.github.com/users/SergioEanX/followers", "following_url": "https://api.github.com/users/SergioEanX/following{/other_user}", "gists_url": "https://api.github.com/users/SergioEanX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioEanX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioEanX/subscriptions", "organizations_url": "https://api.github.com/users/SergioEanX/orgs", "repos_url": "https://api.github.com/users/SergioEanX/repos", "events_url": "https://api.github.com/users/SergioEanX/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioEanX/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-22T07:39:23Z", "updated_at": "2018-03-06T17:12:55Z", "closed_at": "2018-03-06T17:12:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't figure it out how to correctly use LeaveOneOutEncoder in pipelines.\r\nConsider the following code:\r\n\r\n```\r\nfrom sklearn.base import BaseEstimator, TransformerMixin\r\n\r\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\r\n        def __init__(self, attribute_names,target):\r\n            self.attribute_names = attribute_names\r\n            self.y_=target\r\n            \r\n        def fit(self, X, y):\r\n             return self\r\n        def transform(self, X,y):\r\n             return X[self.attribute_names]\r\n\r\ncat_attribs = [\"ocean_proximity\"]\r\n\r\ncat_pipeline = Pipeline([\r\n        ('selector', DataFrameSelector(cat_attribs)),\r\n        ('cat_en', LeaveOneOutEncoder(return_df=False))\r\n    ])\r\n\r\ncat_pipeline.fit(housing)\r\nhousing_prepared = cat_pipeline.transform(housing)\r\nhousing_prepared\r\n```\r\n\r\nI receive error:\r\n`TypeError: fit() missing 1 required positional argument: 'y'`\r\n\r\nBut how to pass y?\r\nThanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/59", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/59/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/59/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/59", "id": 296768310, "node_id": "MDU6SXNzdWUyOTY3NjgzMTA=", "number": 59, "title": "Add weight of evidence encoding", "user": {"login": "eyadsibai", "id": 935729, "node_id": "MDQ6VXNlcjkzNTcyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/935729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eyadsibai", "html_url": "https://github.com/eyadsibai", "followers_url": "https://api.github.com/users/eyadsibai/followers", "following_url": "https://api.github.com/users/eyadsibai/following{/other_user}", "gists_url": "https://api.github.com/users/eyadsibai/gists{/gist_id}", "starred_url": "https://api.github.com/users/eyadsibai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eyadsibai/subscriptions", "organizations_url": "https://api.github.com/users/eyadsibai/orgs", "repos_url": "https://api.github.com/users/eyadsibai/repos", "events_url": "https://api.github.com/users/eyadsibai/events{/privacy}", "received_events_url": "https://api.github.com/users/eyadsibai/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058068, "node_id": "MDU6TGFiZWwyOTMwNTgwNjg=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "eyadsibai", "id": 935729, "node_id": "MDQ6VXNlcjkzNTcyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/935729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eyadsibai", "html_url": "https://github.com/eyadsibai", "followers_url": "https://api.github.com/users/eyadsibai/followers", "following_url": "https://api.github.com/users/eyadsibai/following{/other_user}", "gists_url": "https://api.github.com/users/eyadsibai/gists{/gist_id}", "starred_url": "https://api.github.com/users/eyadsibai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eyadsibai/subscriptions", "organizations_url": "https://api.github.com/users/eyadsibai/orgs", "repos_url": "https://api.github.com/users/eyadsibai/repos", "events_url": "https://api.github.com/users/eyadsibai/events{/privacy}", "received_events_url": "https://api.github.com/users/eyadsibai/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "eyadsibai", "id": 935729, "node_id": "MDQ6VXNlcjkzNTcyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/935729?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eyadsibai", "html_url": "https://github.com/eyadsibai", "followers_url": "https://api.github.com/users/eyadsibai/followers", "following_url": "https://api.github.com/users/eyadsibai/following{/other_user}", "gists_url": "https://api.github.com/users/eyadsibai/gists{/gist_id}", "starred_url": "https://api.github.com/users/eyadsibai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eyadsibai/subscriptions", "organizations_url": "https://api.github.com/users/eyadsibai/orgs", "repos_url": "https://api.github.com/users/eyadsibai/repos", "events_url": "https://api.github.com/users/eyadsibai/events{/privacy}", "received_events_url": "https://api.github.com/users/eyadsibai/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2018-02-13T15:02:40Z", "updated_at": "2018-09-16T14:49:03Z", "closed_at": "2018-09-16T14:49:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/57", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/57/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/57/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/57", "id": 292098448, "node_id": "MDU6SXNzdWUyOTIwOTg0NDg=", "number": 57, "title": "handle_unknown", "user": {"login": "zimka", "id": 4560910, "node_id": "MDQ6VXNlcjQ1NjA5MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4560910?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zimka", "html_url": "https://github.com/zimka", "followers_url": "https://api.github.com/users/zimka/followers", "following_url": "https://api.github.com/users/zimka/following{/other_user}", "gists_url": "https://api.github.com/users/zimka/gists{/gist_id}", "starred_url": "https://api.github.com/users/zimka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zimka/subscriptions", "organizations_url": "https://api.github.com/users/zimka/orgs", "repos_url": "https://api.github.com/users/zimka/repos", "events_url": "https://api.github.com/users/zimka/events{/privacy}", "received_events_url": "https://api.github.com/users/zimka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-27T06:53:09Z", "updated_at": "2018-02-11T23:51:21Z", "closed_at": "2018-02-11T23:51:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nI have faced smth that looks like a bug for me.\r\n![screenshot-enc](https://user-images.githubusercontent.com/4560910/35469534-6fb07356-0347-11e8-8e7b-855c29a9f833.png)\r\n[traceback.txt](https://github.com/scikit-learn-contrib/categorical-encoding/files/1669832/traceback.txt)\r\nSame behavior for other encoders that have this check:\r\nhttps://github.com/scikit-learn-contrib/categorical-encoding/blob/master/category_encoders/ordinal.py#L260\r\nI am not sure, but I haven't managed to find where key 'D' is set in package, so may be this check is bogus", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/56", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/56/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/56/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/56", "id": 288127064, "node_id": "MDU6SXNzdWUyODgxMjcwNjQ=", "number": 56, "title": "NaN and None are handled inconsistently", "user": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2018-01-12T13:58:03Z", "updated_at": "2018-01-12T18:50:43Z", "closed_at": "2018-01-12T18:50:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "If you pass NoneType in, it will create a new category, which is never used, and then encode all instances of NoneType as unknown category. \r\n\r\nSee #54 and #52", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/55", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/55/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/55/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/55", "id": 288092191, "node_id": "MDU6SXNzdWUyODgwOTIxOTE=", "number": 55, "title": "Bug in basen.py", "user": {"login": "wenwu313", "id": 23203632, "node_id": "MDQ6VXNlcjIzMjAzNjMy", "avatar_url": "https://avatars0.githubusercontent.com/u/23203632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenwu313", "html_url": "https://github.com/wenwu313", "followers_url": "https://api.github.com/users/wenwu313/followers", "following_url": "https://api.github.com/users/wenwu313/following{/other_user}", "gists_url": "https://api.github.com/users/wenwu313/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenwu313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenwu313/subscriptions", "organizations_url": "https://api.github.com/users/wenwu313/orgs", "repos_url": "https://api.github.com/users/wenwu313/repos", "events_url": "https://api.github.com/users/wenwu313/events{/privacy}", "received_events_url": "https://api.github.com/users/wenwu313/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2018-01-12T11:38:13Z", "updated_at": "2018-06-04T15:49:48Z", "closed_at": "2018-06-04T15:49:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n>>> import category_encoders as ce\r\n>>> df = pd.DataFrame({'col1': ['a', 'b', 'c'], 'col2': ['d', 'e', 'f']})\r\n  col1 col2\r\n0    a    d\r\n1    b    e\r\n2    c    f\r\n>>>df_1 = pd.DataFrame({'col1': ['a', 'b', 'd'], 'col2': ['d', 'e', 'f']})\r\n  col1 col2\r\n0    a    d\r\n1    b    e\r\n2    d    f\r\n>>> enc = ce.BaseNEncoder(verbose=1)\r\n>>> enc.fit(df)\r\n>>> print enc.transform(df_1)\r\n   col1_0  col1_1  col2_0  col2_1\r\n0     0.0     0.0       0       0\r\n1     0.0     1.0       0       1\r\n2     0.0     0.0       1       0\r\n```\r\nIs there a bug in basen.py?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/54", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/54/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/54/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/54", "id": 288082138, "node_id": "MDU6SXNzdWUyODgwODIxMzg=", "number": 54, "title": "OneHotEncoder creates dummy column", "user": {"login": "andrethrill", "id": 25300892, "node_id": "MDQ6VXNlcjI1MzAwODky", "avatar_url": "https://avatars1.githubusercontent.com/u/25300892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrethrill", "html_url": "https://github.com/andrethrill", "followers_url": "https://api.github.com/users/andrethrill/followers", "following_url": "https://api.github.com/users/andrethrill/following{/other_user}", "gists_url": "https://api.github.com/users/andrethrill/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrethrill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrethrill/subscriptions", "organizations_url": "https://api.github.com/users/andrethrill/orgs", "repos_url": "https://api.github.com/users/andrethrill/repos", "events_url": "https://api.github.com/users/andrethrill/events{/privacy}", "received_events_url": "https://api.github.com/users/andrethrill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-12T10:58:36Z", "updated_at": "2018-01-12T13:56:06Z", "closed_at": "2018-01-12T13:56:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In the following example:\r\n\r\n```\r\n>>> myDf = pd.DataFrame({'col': ['a', 'b', np.NAN]})\r\n>>> enc = ce.OneHotEncoder(cols=['col'])\r\n>>> enc = enc.fit(myDf)\r\n>>> enc.transform(myDf)\r\n  col_0  col_1  col_2  col_-1\r\n0      1      0      0       0\r\n1      0      1      0       0\r\n2      0      0      0       1\r\n```\r\n\r\n\r\nI believe `col_2` should not be created. I think this is a bug created due to `OneHotEncoder` calling internally `OrdinalEncoder` and both are imputing an extra category.\r\n\r\nHappy to hear if I am wrong?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/53", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/53/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/53/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/53", "id": 287742980, "node_id": "MDU6SXNzdWUyODc3NDI5ODA=", "number": 53, "title": "Encode as integers or strings?", "user": {"login": "miskolc", "id": 2085350, "node_id": "MDQ6VXNlcjIwODUzNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2085350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miskolc", "html_url": "https://github.com/miskolc", "followers_url": "https://api.github.com/users/miskolc/followers", "following_url": "https://api.github.com/users/miskolc/following{/other_user}", "gists_url": "https://api.github.com/users/miskolc/gists{/gist_id}", "starred_url": "https://api.github.com/users/miskolc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miskolc/subscriptions", "organizations_url": "https://api.github.com/users/miskolc/orgs", "repos_url": "https://api.github.com/users/miskolc/repos", "events_url": "https://api.github.com/users/miskolc/events{/privacy}", "received_events_url": "https://api.github.com/users/miskolc/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 293058066, "node_id": "MDU6TGFiZWwyOTMwNTgwNjY=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 293058069, "node_id": "MDU6TGFiZWwyOTMwNTgwNjk=", "url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-11T10:52:58Z", "updated_at": "2018-02-11T16:24:14Z", "closed_at": "2018-02-11T16:24:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/scikit-learn-contrib/categorical-encoding/blob/d165a4957a7f4a8ca0287d8c01d44be6cf21aa3c/category_encoders/binary.py#L228\r\n\r\nI was reading the code to understand how the algorithm works and I noticed you the `col` array contains arrays and the list of zeros you prepend to it contains integers. I think the data type used should be consistent, either use integers or strings.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/52", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/52/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/52/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/52", "id": 286985691, "node_id": "MDU6SXNzdWUyODY5ODU2OTE=", "number": 52, "title": "What should 'None' be converted as ?", "user": {"login": "wenwu313", "id": 23203632, "node_id": "MDQ6VXNlcjIzMjAzNjMy", "avatar_url": "https://avatars0.githubusercontent.com/u/23203632?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wenwu313", "html_url": "https://github.com/wenwu313", "followers_url": "https://api.github.com/users/wenwu313/followers", "following_url": "https://api.github.com/users/wenwu313/following{/other_user}", "gists_url": "https://api.github.com/users/wenwu313/gists{/gist_id}", "starred_url": "https://api.github.com/users/wenwu313/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wenwu313/subscriptions", "organizations_url": "https://api.github.com/users/wenwu313/orgs", "repos_url": "https://api.github.com/users/wenwu313/repos", "events_url": "https://api.github.com/users/wenwu313/events{/privacy}", "received_events_url": "https://api.github.com/users/wenwu313/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-01-09T06:44:25Z", "updated_at": "2018-01-12T13:58:31Z", "closed_at": "2018-01-12T13:58:31Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```\r\n>>> import pandas as pd\r\n>>> import category_encoders as ce\r\n>>> df = pd.DataFrame({'col1':[None, 'a', 'b']})\r\n>>> print df\r\n   col1\r\n0  None\r\n1     a\r\n2     b\r\n\r\n>>> enc = ce.OrdinalEncoder(verbose=1)\r\n>>> enc.fit(df)\r\n>>> print enc.category_mapping\r\n[{'col': 'col1', 'mapping': [(None, 0), ('a', 1), ('b', 2)]}]\r\n\r\n>>> print enc.transform(df)\r\n   col1\r\n0    -1\r\n1     1\r\n2     2\r\n```\r\nAs above, 'None' is converted as -1, but in the mapping , 'None' is mapped as 0. What should 'None' be converted as? why not converted as 0?\r\nAnd I find \r\n```\r\n(line 251 in ordinal.py)\r\nX.loc[X[switch.get('col')] == category[0], str(switch.get('col')) + '_tmp'] = str(category[1])   \r\n\r\nfor example :\r\n>>> print None == None\r\nTrue\r\n>>> X = pd.DataFrame({'col1':[None, 'a', 'b']})\r\n   col1\r\n0  None\r\n1     a\r\n2     b\r\n>>> print X['col1'] == None\r\n0    False\r\n1    False\r\n2    False\r\n```\r\nIs there any problem? \r\n\r\nFor 'None' , there is difference between numpy and pandas , pandas always treat 'None' as nan, but numpy treat 'None' as NoneType. Is it necessay to modify as follows ?\r\n```\r\nX.loc[X[switch.get('col')].values == category[0], str(switch.get('col')) + '_tmp'] = str(category[1])   \r\n\r\nAdd .values turn Series to array!\r\n```\r\n  \r\n  \r\n  \r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/47", "repository_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders", "labels_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/47/comments", "events_url": "https://api.github.com/repos/scikit-learn-contrib/category_encoders/issues/47/events", "html_url": "https://github.com/scikit-learn-contrib/category_encoders/issues/47", "id": 286632947, "node_id": "MDU6SXNzdWUyODY2MzI5NDc=", "number": 47, "title": "Contributors add yourselves to the JOSS submission.", "user": {"login": "wdm0006", "id": 1313935, "node_id": "MDQ6VXNlcjEzMTM5MzU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1313935?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wdm0006", "html_url": "https://github.com/wdm0006", "followers_url": "https://api.github.com/users/wdm0006/followers", "following_url": "https://api.github.com/users/wdm0006/following{/other_user}", "gists_url": "https://api.github.com/users/wdm0006/gists{/gist_id}", "starred_url": "https://api.github.com/users/wdm0006/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wdm0006/subscriptions", "organizations_url": "https://api.github.com/users/wdm0006/orgs", "repos_url": "https://api.github.com/users/wdm0006/repos", "events_url": "https://api.github.com/users/wdm0006/events{/privacy}", "received_events_url": "https://api.github.com/users/wdm0006/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-08T03:23:51Z", "updated_at": "2018-01-12T18:37:40Z", "closed_at": "2018-01-12T18:37:40Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This repository is currently being reviewed for possible inclusion of the journal of open source software. \r\n\r\nIf you've committed here before and would like to be included, please add yourself to the authors list here, via PR: https://github.com/scikit-learn-contrib/categorical-encoding/blob/master/joss/paper.md\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}