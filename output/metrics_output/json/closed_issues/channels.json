{"total_count": 916, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/django/channels/issues/1486", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1486/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1486/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1486/events", "html_url": "https://github.com/django/channels/issues/1486", "id": 680987408, "node_id": "MDU6SXNzdWU2ODA5ODc0MDg=", "number": 1486, "title": "how to connect django-channels websocket on ubuntu ssl deploy?", "user": {"login": "LukaTarkhn", "id": 16451341, "node_id": "MDQ6VXNlcjE2NDUxMzQx", "avatar_url": "https://avatars0.githubusercontent.com/u/16451341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukaTarkhn", "html_url": "https://github.com/LukaTarkhn", "followers_url": "https://api.github.com/users/LukaTarkhn/followers", "following_url": "https://api.github.com/users/LukaTarkhn/following{/other_user}", "gists_url": "https://api.github.com/users/LukaTarkhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukaTarkhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukaTarkhn/subscriptions", "organizations_url": "https://api.github.com/users/LukaTarkhn/orgs", "repos_url": "https://api.github.com/users/LukaTarkhn/repos", "events_url": "https://api.github.com/users/LukaTarkhn/events{/privacy}", "received_events_url": "https://api.github.com/users/LukaTarkhn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-18T12:04:50Z", "updated_at": "2020-08-19T08:39:36Z", "closed_at": "2020-08-19T08:16:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I configure gunicorn and daphne:\r\n**_gunicorn.service_**\r\n```\r\n[Unit]\r\nDescription=gunicorn daemon\r\nAfter=network.target\r\n[Service]\r\nUser=luka\r\nGroup=www-data\r\nWorkingDirectory=/home/luka/itworkdir\r\nExecStart=/home/luka/itworkdir/env/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/luka/myproject.sock Career.wsgi:application\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n**_daphne.service_**\r\n```\r\n[Unit]\r\nDescription=itwork Daphne Service\r\nAfter=network.target\r\n\r\n[Service]\r\nType=simple \r\nUser=luka\r\nWorkingDirectory=/home/luka/itworkdir\r\nExecStart=/home/luka/itworkdir/env/bin/daphne -e ssl:9001:privateKey=/home/luka/itworkdir/privkey.pem:certKey=/home/luka/itworkdir/fullchain.pem Career.asgi:application\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n**_nginx file_**\r\n```\r\nupstream channels-backend {\r\n server localhost:9001;\r\n}\r\nserver {\r\n    server_name www.itwork.ge itwork.ge;\r\n    location = /favicon.ico { access_log off; log_not_found off; }\r\n    location /static/ {\r\n        root /home/luka/itworkdir;\r\n    }\r\n    location / {\r\n        include proxy_params;\r\n        proxy_pass http://unix:/home/luka/myproject.sock;\r\n    }\r\n    location / {\r\n      proxy_set_header HOST $host;\r\n      proxy_set_header X-Real-IP $remote_addr;\r\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n      proxy_set_header X-Forwarded-Proto $scheme;\r\n      proxy_pass_request_headers on;\r\n      proxy_pass http://<server ip=\"\">:<server port=\"\">;\r\n      proxy_http_version 1.0;\r\n      proxy_set_header Upgrade $http_upgrade;\r\n      proxy_set_header Connection \"Upgrade\";\r\n      }\r\n    listen 443 ssl; # managed by Certbot\r\n    ssl_certificate /etc/letsencrypt/live/itwork.ge/fullchain.pem; # managed by Certbot\r\n    ssl_certificate_key /etc/letsencrypt/live/itwork.ge/privkey.pem; # managed by Certbot\r\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\r\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\r\n}\r\nserver {\r\n    if ($host = www.itwork.ge) {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n    if ($host = itwork.ge) {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n    listen 80;\r\n    server_name www.itwork.ge itwork.ge;\r\n    return 404; # managed by Certbot\r\n}\r\n```\r\n**_Javascript_**\r\n```\r\nvar wsStart = 'ws://'\r\nif (loc.protocol === 'https:'){\r\n    wsStart = 'wss://'\r\n}\r\nvar endpoint = wsStart + loc.host + loc.pathname\r\nvar socket = new ReconnectingWebSocket(endpoint)\r\n```\r\nin localhost on windows working correct and i get this:\r\n[success image](https://i.stack.imgur.com/GM3CR.jpg)\r\nbut on deploy with this settings i get this:\r\n[error image](https://i.stack.imgur.com/Lfd0s.jpg)\r\n\r\nI have been looking for a solution to this problem for several weeks but I have not been able to solve this problem, I can not guess where I am wrong and how to solve this problem.\r\n\r\n>**OS**\r\nUbuntu 18.04.3 (LTS) x64\r\n\r\n>**pip freeze**\r\naioredis==1.3.1\r\nasgi-redis==1.4.3\r\nasgiref==3.2.7\r\nastroid==2.0.4\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==20.4.3\r\nAutomat==20.2.0\r\ncertifi==2020.4.5.2\r\ncffi==1.14.0\r\nchannels==2.4.0\r\nchannels-redis==2.4.2\r\nchardet==3.0.4\r\ncloudinary==1.21.1\r\ncolorama==0.4.3\r\nconstantly==15.1.0\r\ncryptography==2.9.2\r\ndaphne==2.5.0\r\ndefusedxml==0.5.0\r\nDjango==3.0.6\r\ndjango-allauth==0.38.0\r\ndjango-bootstrap-datepicker-plus==3.0.5\r\ndjango-cors-headers==2.4.0\r\ndjango-froala-editor==3.1.0\r\ndjango-libs==2.0.3\r\ndjango-multiselectfield==0.1.12\r\ndjango-rest-auth==0.9.3\r\ndjango-rest-framework==0.1.0\r\ndjangorestframework==3.9.0\r\ngunicorn==20.0.4\r\nhiredis==1.0.1\r\nhtml5lib==1.0.1\r\nhyperlink==19.0.0\r\nidna==2.7\r\nincremental==17.5.0\r\nisort==4.3.4\r\nlazy-object-proxy==1.3.1\r\nmccabe==0.6.1\r\nmsgpack==0.6.2\r\nmsgpack-python==0.5.6\r\noauthlib==2.1.0\r\nPillow==7.1.2\r\npsycopg2==2.8.5\r\npsycopg2-binary==2.8.5\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycparser==2.20\r\nPyHamcrest==2.0.2\r\nPyJWT==1.7.1\r\npylint==2.1.1\r\npyOpenSSL==19.1.0\r\nPyPDF2==1.26.0\r\npython3-openid==3.1.0\r\npytz==2020.1\r\nredis==2.10.6\r\nreportlab==3.5.42\r\nrequests==2.20.1\r\nrequests-oauthlib==1.0.0\r\nservice-identity==18.1.0\r\nsix==1.15.0\r\nsocial-auth-app-django==4.0.0\r\nsocial-auth-core==3.3.3\r\nsqlparse==0.3.1\r\nTwisted==20.3.0\r\ntxaio==20.4.1\r\nurllib3==1.24.3\r\nwebencodings==0.5.1\r\nwhitenoise==5.0.1\r\nwrapt==1.10.11\r\nxhtml2pdf==0.2.4\r\nzope.interface==5.1.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1476", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1476/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1476/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1476/events", "html_url": "https://github.com/django/channels/issues/1476", "id": 668304919, "node_id": "MDU6SXNzdWU2NjgzMDQ5MTk=", "number": 1476, "title": "Hi i create a chat room app on django (websocket). It works fine on local host but not works on live server.", "user": {"login": "PulkitArora-developer", "id": 58623472, "node_id": "MDQ6VXNlcjU4NjIzNDcy", "avatar_url": "https://avatars0.githubusercontent.com/u/58623472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PulkitArora-developer", "html_url": "https://github.com/PulkitArora-developer", "followers_url": "https://api.github.com/users/PulkitArora-developer/followers", "following_url": "https://api.github.com/users/PulkitArora-developer/following{/other_user}", "gists_url": "https://api.github.com/users/PulkitArora-developer/gists{/gist_id}", "starred_url": "https://api.github.com/users/PulkitArora-developer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PulkitArora-developer/subscriptions", "organizations_url": "https://api.github.com/users/PulkitArora-developer/orgs", "repos_url": "https://api.github.com/users/PulkitArora-developer/repos", "events_url": "https://api.github.com/users/PulkitArora-developer/events{/privacy}", "received_events_url": "https://api.github.com/users/PulkitArora-developer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-30T02:19:39Z", "updated_at": "2020-07-31T15:58:59Z", "closed_at": "2020-07-31T15:58:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "It shows error on console.   The Connection is Insecure.   \r\n\r\n` <script>\r\n        var roomName='{{ room_name }}';\r\n        var personname='{{ person_name }}';\r\n        var chatSocket=new WebSocket('ws://'+window.location.host+'/ws/chat/'+roomName+'/'+personname+'/');\r\n        chatSocket.onmessage=function(e){\r\n            var data=JSON.parse(e.data)\r\n            var message=data['message']\r\n            var div=document.querySelector(\"#div_data\");\r\n            div.innerHTML+='<br><div style=\"padding:5px;color:red;background:#87CEEB;\">'+message+'</div>';\r\n            console.log(e)\r\n        }\r\n        chatSocket.onclose=function(e){\r\n            var data=JSON.parse(e.data)\r\n            var message=data['message']\r\n            var div=document.querySelector(\"#div_data\");\r\n            div.innerHTML+='<br><div style=\"padding:10px;color:#fff;background:dodgerblue;\">'+message+'</div>';\r\n        }\r\n\r\n            document.querySelector(\"#send_message\").onclick=function(e){\r\n            var message=document.querySelector(\"#message\").value;\r\n            chatSocket.send(JSON.stringify({'message':message}))\r\n            document.querySelector(\"#message\").value=''\r\n        }\r\n\r\n    </script>`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1475", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1475/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1475/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1475/events", "html_url": "https://github.com/django/channels/issues/1475", "id": 665757625, "node_id": "MDU6SXNzdWU2NjU3NTc2MjU=", "number": 1475, "title": "Deploying Django Channels with ASGI", "user": {"login": "Radutiu-Horatiu", "id": 61684220, "node_id": "MDQ6VXNlcjYxNjg0MjIw", "avatar_url": "https://avatars3.githubusercontent.com/u/61684220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Radutiu-Horatiu", "html_url": "https://github.com/Radutiu-Horatiu", "followers_url": "https://api.github.com/users/Radutiu-Horatiu/followers", "following_url": "https://api.github.com/users/Radutiu-Horatiu/following{/other_user}", "gists_url": "https://api.github.com/users/Radutiu-Horatiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Radutiu-Horatiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Radutiu-Horatiu/subscriptions", "organizations_url": "https://api.github.com/users/Radutiu-Horatiu/orgs", "repos_url": "https://api.github.com/users/Radutiu-Horatiu/repos", "events_url": "https://api.github.com/users/Radutiu-Horatiu/events{/privacy}", "received_events_url": "https://api.github.com/users/Radutiu-Horatiu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-26T10:51:32Z", "updated_at": "2020-07-26T11:39:36Z", "closed_at": "2020-07-26T11:39:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I am trying to deploy my django app on Heroku witch uses Django Channels - Websockets.\r\nDjango channels works perfectly fine in localhost but can't get it done on production mode.\r\nThe app works good while deploying with the wsgi file, however, asgi deployment is my problem.\r\n\r\nThis is heroku logs:\r\n`2020-07-26T10:47:03.882134+00:00 heroku[web.1]: Starting process with command `daphne -p 8001 muypicky.asgi:application`\r\n2020-07-26T10:47:07.366814+00:00 app[web.1]: 2020-07-26 10:47:07,366 INFO     Adding $DATABASE_URL to default DATABASE Django setting.\r\n2020-07-26T10:47:07.367231+00:00 app[web.1]: 2020-07-26 10:47:07,367 INFO     Adding $DATABASE_URL to TEST default DATABASE Django setting.\r\n2020-07-26T10:47:07.367377+00:00 app[web.1]: 2020-07-26 10:47:07,367 INFO     Applying Heroku Staticfiles configuration to Django settings.\r\n2020-07-26T10:47:07.367563+00:00 app[web.1]: 2020-07-26 10:47:07,367 INFO     Applying Heroku ALLOWED_HOSTS configuration to Django settings.\r\n2020-07-26T10:47:07.367632+00:00 app[web.1]: 2020-07-26 10:47:07,367 INFO     Applying Heroku logging configuration to Django settings.\r\n2020-07-26T10:47:07.569215+00:00 app[web.1]: 2020-07-26 13:47:07,569 INFO     Starting server at tcp:port=8001:interface=127.0.0.1\r\n2020-07-26T10:47:07.570179+00:00 app[web.1]: 2020-07-26 13:47:07,570 INFO     HTTP/2 support not enabled (install the http2 and tls Twisted extras)\r\n2020-07-26T10:47:07.571143+00:00 app[web.1]: 2020-07-26 13:47:07,570 INFO     Configuring endpoint tcp:port=8001:interface=127.0.0.1\r\n2020-07-26T10:47:07.572316+00:00 app[web.1]: 2020-07-26 13:47:07,572 INFO     Listening on TCP address 127.0.0.1:8001\r\n2020-07-26T10:47:13.000000+00:00 app[api]: Build succeeded\r\n2020-07-26T10:48:04.417192+00:00 heroku[web.1]: Error R10 (Boot timeout) -> Web process failed to bind to $PORT within 60 seconds of launch\r\n`\r\n\r\nThis is within my Procfile:\r\n`web: daphne -p 8001 muypicky.asgi:application`\r\n\r\nAny ideas? If anyone could be my hero and help me, I would truly appreciate it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1474", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1474/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1474/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1474/events", "html_url": "https://github.com/django/channels/issues/1474", "id": 664218235, "node_id": "MDU6SXNzdWU2NjQyMTgyMzU=", "number": 1474, "title": "Communicate from celery task to django channels", "user": {"login": "sharon-samson", "id": 23446591, "node_id": "MDQ6VXNlcjIzNDQ2NTkx", "avatar_url": "https://avatars0.githubusercontent.com/u/23446591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sharon-samson", "html_url": "https://github.com/sharon-samson", "followers_url": "https://api.github.com/users/sharon-samson/followers", "following_url": "https://api.github.com/users/sharon-samson/following{/other_user}", "gists_url": "https://api.github.com/users/sharon-samson/gists{/gist_id}", "starred_url": "https://api.github.com/users/sharon-samson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sharon-samson/subscriptions", "organizations_url": "https://api.github.com/users/sharon-samson/orgs", "repos_url": "https://api.github.com/users/sharon-samson/repos", "events_url": "https://api.github.com/users/sharon-samson/events{/privacy}", "received_events_url": "https://api.github.com/users/sharon-samson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T05:46:59Z", "updated_at": "2020-07-23T11:00:02Z", "closed_at": "2020-07-23T09:02:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Iam doing a django project where Iam using django channels and celery\r\nHow can I send data from tasks to channel,I will attach the code for your reference.\r\nI gave channel layer to send message ,but not getting any messages\r\n\r\n**Ubuntu OS**--18\r\n\r\n**pip freeze**\r\nabsl-py==0.9.0\r\naioamqp==0.14.0\r\naioredis==1.3.1\r\namqp==2.6.0\r\nasgi-redis==1.4.3\r\nasgiref==3.2.3\r\nastunparse==1.6.3\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==20.7.1\r\nAutomat==20.2.0\r\nbilliard==3.6.3.0\r\ncachetools==4.1.1\r\ncelery==4.4.6\r\ncertifi==2020.4.5.1\r\ncffi==1.14.0\r\nchannels==2.4.0\r\nchannels-rabbitmq==1.2.1\r\nchannels-redis==3.0.1\r\nchardet==3.0.4\r\nconstantly==15.1.0\r\ncryptography==2.9.2\r\ndaphne==2.5.0\r\ndecorator==4.4.2\r\nDjango==3.0.7\r\ndjango-celery-results==1.2.1\r\ndjango-channels==0.7.0\r\ndjango-redis==4.12.1\r\ndjango-social-share==1.4.0\r\ndjangorestframework==3.11.0\r\nfuture==0.18.2\r\ngast==0.3.3\r\ngoogle-auth==1.19.2\r\ngoogle-auth-oauthlib==0.4.1\r\ngoogle-pasta==0.2.0\r\ngrpcio==1.30.0\r\nh5py==2.10.0\r\nhiredis==1.1.0\r\nhyperlink==19.0.0\r\nidna==2.9\r\nimageio==2.8.0\r\nimageio-ffmpeg==0.4.2\r\nimportlib-metadata==1.7.0\r\nincremental==17.5.0\r\nKeras==2.4.3\r\nKeras-Preprocessing==1.1.2\r\nkombu==4.6.11\r\nMarkdown==3.2.2\r\nmigrate==0.3.8\r\nmoviepy==1.0.3\r\nmsgpack==1.0.0\r\nmsgpack-python==0.5.6\r\nmtcnn==0.1.0\r\nnumpy==1.18.5\r\noauthlib==3.1.0\r\nopencv-python==4.2.0.34\r\nopt-einsum==3.3.0\r\npamqp==2.3.0\r\nPillow==7.1.2\r\npkg-resources==0.0.0\r\nproglog==0.1.9\r\nprotobuf==3.12.2\r\npsycopg2-binary==2.8.5\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycparser==2.20\r\nPyHamcrest==2.0.2\r\npyOpenSSL==19.1.0\r\npytz==2020.1\r\nPyYAML==5.3.1\r\nredis==2.10.6\r\nrequests==2.23.0\r\nrequests-oauthlib==1.3.0\r\nrsa==4.6\r\nscipy==1.4.1\r\nservice-identity==18.1.0\r\nsix==1.15.0\r\nsqlparse==0.3.1\r\ntensorboard==2.2.2\r\ntensorboard-plugin-wit==1.7.0\r\ntensorflow==2.2.0\r\ntensorflow-cpu==2.2.0\r\ntensorflow-estimator==2.2.0\r\ntermcolor==1.1.0\r\ntqdm==4.46.1\r\nTwisted==20.3.0\r\ntxaio==20.4.1\r\nurllib3==1.25.9\r\nvine==1.3.0\r\nWerkzeug==1.0.1\r\nwrapt==1.12.1\r\nzipp==3.1.0\r\nzope.interface==5.1.0\r\n\r\n```\r\n#consumers.py \r\nimport asyncio\r\nimport json\r\nfrom django.contrib.auth import get_user_model\r\nfrom channels.consumer import  AsyncConsumer\r\nfrom channels.db import  database_sync_to_async\r\nfrom channels.generic.websocket import JsonWebsocketConsumer,WebsocketConsumer\r\nfrom django.conf import settings\r\nimport os\r\nfrom asgiref.sync import sync_to_async\r\nfrom channels.consumer import SyncConsumer\r\nimport subprocess\r\nfrom . import tasks\r\nproc=None\r\n\r\n\r\n\r\n\r\nclass CameraParallelAsync(SyncConsumer):\r\n    def websocket_connect(self,event):\r\n        print(\"connected\",self.channel_name)\r\n        print('Data after delay')\r\n#        self.accept()\r\n        self.channel_group_name = \"task_single_snap\"\r\n        self.send({\r\n            \"type\":\"websocket.accept\"\r\n        })\r\n       # await self.send({\r\n        #    \"type\": \"websocket.close\"\r\n#})\r\n    def websocket_receive(self,event):\r\n        print(\"receive\",event)\r\n        channel_data = event.get('text',None)\r\n        user_name = self.scope['url_route']['kwargs']['user']\r\n        team_name = self.scope['url_route']['kwargs']['team']\r\n        media_path = settings.MEDIA_ROOT\r\n        channel_name  = self.channel_name\r\n        if channel_data is not None:\r\n            if channel_data =='CAMERA_ON':\r\n                self.scope['session']['camera'] = True\r\n                print('Camera Enabled')\r\n                global proc\r\n                os.environ['LD_LIBRARY_PATH'] = \"/usr/local/lib/Libraries\"    \r\n                import subprocess\r\n                proc = subprocess.Popen([\"/home/dev/integrated_module/front-face-camera/rest_project/CameraApplication/MakoContinuousFrameGrabberConsoleApplication\" + ' ' + team_name + ' ' + user_name + ' ' + media_path],shell=True,preexec_fn=os.setsid,stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n       \r\n                self.send({\r\n                    \"type\":\"websocket.send\",\r\n                    \"text\":\"Camera Enabled\"\r\n                })\r\n            elif channel_data == 'CAMERA_OFF':\r\n               print('Camera disabled')\r\n               self.scope['session']['camera'] = False\r\n               import signal\r\n               os.killpg(os.getpgid(proc.pid), signal.SIGTERM)\r\n            elif channel_data == 'SINGLE_SNAP':\r\n               self.send({\r\n                   \"type\":\"websocket.send\",\r\n                   \"text\":\"We are processing your request\"\r\n               })\r\n               print('Single Snap')\r\n               task = tasks.camera_single_task.delay(user_name,team_name,media_path,channel_name)\r\n               print(task.status,'status')\r\n\r\n            elif channel_data == 'GROUP_SNAP':\r\n                print('Group Snap')\r\n                os.environ['LD_LIBRARY_PATH'] = \"/usr/local/lib/Libraries\"\r\n                import subprocess\r\n                proc = subprocess.Popen([\"/home/dev/integrated_module/front-face-camera/rest_project/CameraApplication/MakoGroupFrameGrabberConsoleApplication\" + ' ' + team_name + ' ' + user_name + ' ' + media_path],shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n                print(proc.communicate())\r\n                self.send({\r\n                       \"type\":\"websocket.send\",\r\n                       \"text\":\"Group snap Snaptured\"\r\n                   })\r\n            else:\r\n               print('No detection')\r\n\r\n\r\n\r\n    def websocket_disconnect(self,event):\r\n        print(\"disconnected\",event)\r\n\r\n        # Receive message from room group  \r\n    def task_message(self, event):\r\n        message = event['message']\r\n        print('hello')\r\n        # Send message to WebSocket\r\n        self.send(text_data=json.dumps({\r\n            'message': message\r\n        }))\r\n\r\n#tasks.py \r\nfrom __future__ import absolute_import, unicode_literals\r\nimport os\r\nfrom .utils import movimk\r\nimport subprocess\r\nfrom celery import task,shared_task\r\nfrom channels.layers import get_channel_layer\r\nfrom asgiref.sync import async_to_sync\r\n\r\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"rest_project.settings\")\r\n@shared_task\r\ndef camera_single_task(team_name,user_name,media_path,channel_name):\r\n    channel_layer = get_channel_layer()\r\n    os.environ['LD_LIBRARY_PATH'] = \"/usr/local/lib/Libraries\"\r\n    proc = subprocess.Popen([\"/home/dev/integrated_module/front-face-camera/rest_project/CameraApplication/MakoSingleFrameGrabberConsoleApplication\" + ' ' + team_name + ' ' + user_name + ' ' + media_path],shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)\r\n    print(proc.communicate())\r\n    print(channel_layer)\r\n    async_to_sync(channel_layer.send)(\r\n        channel_name,\r\n        {\r\n                'type': 'task_message',\r\n                'message': \"Thanks for the patience!!!  Your snap has been captured successfully\"\r\n        }\r\n    )\r\n\r\n    return team_name", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1473", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1473/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1473/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1473/events", "html_url": "https://github.com/django/channels/issues/1473", "id": 663280259, "node_id": "MDU6SXNzdWU2NjMyODAyNTk=", "number": 1473, "title": "Django Channels in Production Mode", "user": {"login": "Radutiu-Horatiu", "id": 61684220, "node_id": "MDQ6VXNlcjYxNjg0MjIw", "avatar_url": "https://avatars3.githubusercontent.com/u/61684220?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Radutiu-Horatiu", "html_url": "https://github.com/Radutiu-Horatiu", "followers_url": "https://api.github.com/users/Radutiu-Horatiu/followers", "following_url": "https://api.github.com/users/Radutiu-Horatiu/following{/other_user}", "gists_url": "https://api.github.com/users/Radutiu-Horatiu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Radutiu-Horatiu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Radutiu-Horatiu/subscriptions", "organizations_url": "https://api.github.com/users/Radutiu-Horatiu/orgs", "repos_url": "https://api.github.com/users/Radutiu-Horatiu/repos", "events_url": "https://api.github.com/users/Radutiu-Horatiu/events{/privacy}", "received_events_url": "https://api.github.com/users/Radutiu-Horatiu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-21T20:15:03Z", "updated_at": "2020-07-24T17:41:16Z", "closed_at": "2020-07-24T17:41:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm trying to integrate a chat in my app with Django Channels, which works in development mode, but doesn't work in production mode.\r\nThis is some error I get: Failed to construct 'WebSocket': An insecure WebSocket connection may not be initiated from a page loaded over HTTPS.\r\nI've done the steps presented in the Django Channels documentation(https://channels.readthedocs.io/en/latest/deploying.html), but it doesn't work for me.\r\nWhen I try to run the daphne start server command 'daphne -p 6379 muypicky.asgi:application ', the console freezes and it does nothing.\r\n\r\nDaphne command:\r\n```\r\ndaphne -p 6379 muypicky.asgi:application                                                                                                               \r\n2020-07-21 23:06:43,123 INFO     Starting server at tcp:port=6379:interface=127.0.0.1\r\n2020-07-21 23:06:43,124 INFO     HTTP/2 support not enabled (install the http2 and tls Twisted extras)\r\n2020-07-21 23:06:43,124 INFO     Configuring endpoint tcp:port=6379:interface=127.0.0.1\r\n2020-07-21 23:06:43,125 INFO     Listening on TCP address 127.0.0.1:6379\r\n```\r\n\r\nI'm not sure where I'm mistaken, any help would be appreciated.\r\n\r\nmyproject/settings.py\r\n```\r\nASGI_APPLICATION = 'muypicky.routing.application'\r\n\r\nCHANNEL_LAYERS = {\r\n    'default': {\r\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\r\n        'CONFIG': {\r\n            \"hosts\": [('hradutiu.pythonanywhere.com', 6379)],\r\n        },\r\n    },\r\n}\r\n```\r\n\r\npip freeze\r\n```\r\naioredis==1.3.1\r\nasgiref==3.2.10\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==20.7.1\r\nAutomat==20.2.0\r\ncffi==1.14.0\r\nchannels==2.4.0\r\nchannels-redis==3.0.1\r\nconstantly==15.1.0\r\ncryptography==3.0\r\ndaphne==2.5.0\r\nDjango==3.0.7\r\nhiredis==1.1.0\r\nhyperlink==19.0.0\r\nidna==2.10\r\nincremental==17.5.0\r\nmsgpack==1.0.0\r\nPillow==7.1.2\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycparser==2.20\r\nPyHamcrest==2.0.2\r\npyOpenSSL==19.1.0\r\npytz==2020.1\r\nredis==3.5.3\r\nservice-identity==18.1.0\r\nsix==1.15.0\r\nsqlparse==0.3.1\r\nTwisted==20.3.0\r\ntxaio==20.4.1\r\nzope.interface==5.1.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1470", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1470/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1470/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1470/events", "html_url": "https://github.com/django/channels/issues/1470", "id": 660646939, "node_id": "MDU6SXNzdWU2NjA2NDY5Mzk=", "number": 1470, "title": "WebSocket connection to 'ws://18.222.139.20/ws/' failed: Error during WebSocket handshake: Unexpected response code: 502", "user": {"login": "AjayKarki", "id": 20925056, "node_id": "MDQ6VXNlcjIwOTI1MDU2", "avatar_url": "https://avatars0.githubusercontent.com/u/20925056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AjayKarki", "html_url": "https://github.com/AjayKarki", "followers_url": "https://api.github.com/users/AjayKarki/followers", "following_url": "https://api.github.com/users/AjayKarki/following{/other_user}", "gists_url": "https://api.github.com/users/AjayKarki/gists{/gist_id}", "starred_url": "https://api.github.com/users/AjayKarki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AjayKarki/subscriptions", "organizations_url": "https://api.github.com/users/AjayKarki/orgs", "repos_url": "https://api.github.com/users/AjayKarki/repos", "events_url": "https://api.github.com/users/AjayKarki/events{/privacy}", "received_events_url": "https://api.github.com/users/AjayKarki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-19T06:53:06Z", "updated_at": "2020-07-19T12:27:37Z", "closed_at": "2020-07-19T07:26:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting WebSocket connection to 'ws://18.222.139.20/ws/' failed: Error during WebSocket handshake: Unexpected response code: 502 in Browser Console. But when I run in Local it seems to be working fine. I am bit new to production I guess I have some bad conf somewhere \r\nMy Nginx Conf File\r\nserver {\r\n    listen 80;\r\n    server_name 18.222.139.20;\r\n\r\n    keepalive_timeout 5;\r\n    client_max_body_size 4G;\r\n\r\n    access_log /home/ubuntu/Kunyo/backend/logs/nginx-access.log;\r\n    error_log /home/ubuntu/Kunyo/backend/logs/nginx-error.log;\r\n\r\n    location /static/ {\r\n        root /home/ubuntu/Kunyo/backend/;\r\n    }\r\n\r\n    # checks for static file, if not found proxy to app\r\n    location / {\r\n        try_files $uri @proxy_to_app;\r\n    }\r\n\r\n    location /ws/ {\r\n        try_files $uri @proxy_to_ws;\r\n    }\r\n\r\n    location @proxy_to_ws {\r\n       proxy_pass http://unix:/home/ubuntu/Kunyo/backend/kunyoback.sock;\r\n\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection \"upgrade\";\r\n\r\n        proxy_redirect off;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Host $server_name;\r\n    }\r\n\r\n    location @proxy_to_app {\r\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n      proxy_set_header Host $http_host;\r\n      proxy_redirect off;\r\n      proxy_pass http://unix:/home/ubuntu/Kunyo/backend/kunyo.sock;\r\n\r\n}\r\n}\r\n\r\nMy Daphne Service File\r\n[Unit]\r\nDescription=daphne daemon\r\nAfter=network.target\r\n\r\n[Service]\r\nUser=ubuntu\r\nGroup=www-data\r\nWorkingDirectory=/home/ubuntu/Kunyo/backend\r\nExecStart=/home/ubuntu/venv/bin/daphne -u /home/ubuntu/Kunyo/backend/kunyoback.sock --fd 0 kunyo.asgi:channel_layer    \r\n[Install]\r\nWantedBy=multi-user.target\r\n\r\nMy Daphne Worker File\r\n[Unit]\r\nDescription=python runworker server for kunyo\r\nAfter=network.target\r\n\r\n[Service]\r\nUser=ubuntu\r\nGroup=www-data\r\nWorkingDirectory=/home/ubuntu/Kunyo/backend\r\nExecStart=/home/ubuntu/venv/bin/python /home/ubuntu/Kunyo/backend/manage.py runworker channels ws\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n\r\nMy Gunicorn File\r\n[Unit]\r\nDescription=gunicorn daemon\r\nAfter=network.target\r\n[Service]\r\nUser=ubuntu\r\nGroup=www-data\r\nWorkingDirectory=/home/ubuntu/Kunyo/backend\r\nExecStart=/home/ubuntu/venv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/ubuntu/Kunyo/backend/kunyo.sock kunyo.wsgi:application\r\n[Install]\r\nWantedBy=multi-user.target\r\n\r\nrouting.py\r\nfrom channels.routing import ProtocolTypeRouter, URLRouter\r\nfrom django.urls import path\r\nfrom notification.consumers import EchoConsumer\r\n\r\napplication = ProtocolTypeRouter({\r\n    \"websocket\": URLRouter([\r\n        path(\"ws/\", EchoConsumer),\r\n    ])\r\n})\r\n\r\nPart of settings\r\nASGI_APPLICATION = \"kunyo.routing.application\"\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1465", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1465/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1465/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1465/events", "html_url": "https://github.com/django/channels/issues/1465", "id": 655144138, "node_id": "MDU6SXNzdWU2NTUxNDQxMzg=", "number": 1465, "title": "While running Django and NGINX getting error 500 (Internal Server Error)", "user": {"login": "torpedko", "id": 4418643, "node_id": "MDQ6VXNlcjQ0MTg2NDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4418643?v=4", "gravatar_id": "", "url": "https://api.github.com/users/torpedko", "html_url": "https://github.com/torpedko", "followers_url": "https://api.github.com/users/torpedko/followers", "following_url": "https://api.github.com/users/torpedko/following{/other_user}", "gists_url": "https://api.github.com/users/torpedko/gists{/gist_id}", "starred_url": "https://api.github.com/users/torpedko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/torpedko/subscriptions", "organizations_url": "https://api.github.com/users/torpedko/orgs", "repos_url": "https://api.github.com/users/torpedko/repos", "events_url": "https://api.github.com/users/torpedko/events{/privacy}", "received_events_url": "https://api.github.com/users/torpedko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-11T06:07:02Z", "updated_at": "2020-07-15T18:45:32Z", "closed_at": "2020-07-15T18:45:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to run streaming server with Django and NGINX but getting an error GET http://127.0.0.1:8080/live/utakot/index.m3u8 500 (Internal Server Error). \r\n\r\nDjango console log:\r\n\r\n```\r\n[11/Jul/2020 05:51:42] \"GET /s/ HTTP/1.1\" 200 733\r\nInternal Server Error: /live/utakot/index.m3u8\r\nTraceback (most recent call last):\r\n  File \"/home/utakot/Dev/Grai/env/lib/python3.8/site-packages/django/core/handlers/exception.py\", line 34, in inner\r\n    response = get_response(request)\r\n  File \"/home/utakot/Dev/Grai/env/lib/python3.8/site-packages/django/core/handlers/base.py\", line 115, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/utakot/Dev/Grai/env/lib/python3.8/site-packages/django/core/handlers/base.py\", line 113, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/utakot/Dev/Grai/grai/grai/urls.py\", line 11, in fake_view\r\n    raise Exception(\"This should never be called!\")\r\nException: This should never be called!\r\n[11/Jul/2020 05:51:43] \"GET /live/utakot/index.m3u8 HTTP/1.0\" 500 70852\r\n\r\n```\r\n\r\nurls.py\r\n```\r\n\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\n\r\nfrom .views import start_stream, stop_stream, stream_view\r\n\r\n\r\ndef fake_view(*args, **kwargs):\r\n    \"\"\" This view should never be called because the URL paths\r\n        that map here will be served by nginx directly.\r\n    \"\"\"\r\n    raise Exception(\"This should never be called!\")\r\n\r\n\r\nurlpatterns = [\r\n    path(\"s/\", stream_view),\r\n    path(\"admin/\", admin.site.urls),\r\n    path(\"start_stream\", start_stream, name=\"start-stream\"),\r\n    path(\"stop_stream\", stop_stream, name=\"stop-stream\"),\r\n    path(\"live/<username>/index.m3u8\", fake_view, name=\"hls-url\")\r\n]\r\n\r\n```\r\nnginx configuration file:\r\n```\r\n\r\nuser www-data;\r\n\r\nworker_processes 1;\r\n\r\npid /var/run/nginx.pid;\r\n\r\ninclude /usr/share/nginx/modules/*.conf;\r\n\r\nevents {\r\n    use epoll;\r\n    worker_connections  1024;\r\n}\r\n\r\n# RTMP configuration\r\nrtmp {\r\n    server {\r\n        listen 1935; # Listen on standard RTMP port\r\n        chunk_size 4000;\r\n\r\n        application app {\r\n            live on;\r\n\t     # disable consuming the stream from nginx as rtmp\r\n            deny play all;\r\n\t \r\n\t    push rtmp://127.0.0.1:1935/hls;\r\n\t    \r\n\t    # The on_publish callback will redirect the RTMP\r\n            # stream to the streamer's username, rather than their\r\n            # secret stream key.\r\n            on_publish http://127.0.0.1:8000/start_stream;\r\n            on_publish_done http://127.0.0.1:8000/stop_stream;\r\n        }\r\n\tapplication hls {\r\n            live on;\r\n\r\n            # Only accept publishing from localhost.\r\n            # (the `app` RTMP ingest application)\r\n            allow publish 127.0.0.1;\r\n            deny publish all;\r\n            deny play all;\r\n\r\n            # Package streams as HLS\r\n            hls on;\r\n            hls_path /var/www/live;\r\n            hls_nested on;\r\n            hls_fragment_naming system;\r\n            hls_datetime system;\r\n        }\r\n    }\r\n}\r\n\r\nhttp {\r\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\r\n                    '$status $body_bytes_sent \"$http_referer\" '\r\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\" $request_time';\r\n    sendfile on;\r\n    tcp_nopush on;\r\n    tcp_nodelay on;\r\n    keepalive_timeout 65;\r\n    types_hash_max_size 2048;\r\n    include /etc/nginx/mime.types;\r\n    #aio on;\r\n    directio 512;\r\n    default_type application/octet-stream;\r\n\r\n    server {\r\n        listen 8080 default_server;\r\n\tserver_name _;\r\n\r\n\tlocation ~ ^/live/.+\\.ts$ {\r\n           # MPEG-TS segments can be cached upstream indefinitely\r\n\t   add_header 'Access-Control-Allow-Origin' '*' always;\r\n           expires max;\r\n        }\r\n\r\n\tlocation ~ ^/live/[^/]+index\\.m3u8$ {\r\n\t\tadd_header 'Access-Control-Allow-Origin' '*' always;\r\n\t\texpires -1d;\r\n\t}\r\n\r\n        location / {\r\n\t    proxy_pass http://127.0.0.1:8000/;\r\n            # Disable cache\r\n            add_header 'Cache-Control' 'no-cache';\r\n\r\n            # CORS setup\r\n            # add_header 'Access-Control-Allow-Origin' '*' always;\r\n            add_header 'Access-Control-Expose-Headers' 'Content-Length';\r\n\r\n            # allow CORS preflight requests\r\n            if ($request_method = 'OPTIONS') {\r\n                add_header 'Access-Control-Allow-Origin' '*';\r\n                add_header 'Access-Control-Max-Age' 1728000;\r\n                add_header 'Content-Type' 'text/plain charset=UTF-8';\r\n                add_header 'Content-Length' 0;\r\n                return 204;\r\n            }\r\n\r\n#            types {\r\n#                application/dash+xml mpd;\r\n#                application/vnd.apple.mpegurl m3u8;\r\n#                video/mp2t ts;\r\n#            }\r\n\r\n            root /var/www;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1464", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1464/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1464/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1464/events", "html_url": "https://github.com/django/channels/issues/1464", "id": 654564049, "node_id": "MDU6SXNzdWU2NTQ1NjQwNDk=", "number": 1464, "title": "django.core.exceptions.SynchronousOnlyOperation after upgrading django to 3.0", "user": {"login": "LukenAgile42", "id": 49654474, "node_id": "MDQ6VXNlcjQ5NjU0NDc0", "avatar_url": "https://avatars3.githubusercontent.com/u/49654474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukenAgile42", "html_url": "https://github.com/LukenAgile42", "followers_url": "https://api.github.com/users/LukenAgile42/followers", "following_url": "https://api.github.com/users/LukenAgile42/following{/other_user}", "gists_url": "https://api.github.com/users/LukenAgile42/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukenAgile42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukenAgile42/subscriptions", "organizations_url": "https://api.github.com/users/LukenAgile42/orgs", "repos_url": "https://api.github.com/users/LukenAgile42/repos", "events_url": "https://api.github.com/users/LukenAgile42/events{/privacy}", "received_events_url": "https://api.github.com/users/LukenAgile42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-07-10T07:11:46Z", "updated_at": "2020-07-10T13:01:04Z", "closed_at": "2020-07-10T09:14:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get \r\n`django.core.exceptions.SynchronousOnlyOperation: You cannot call this from an async context - use a thread or sync_to_async.`\r\nafter upgrading to django 3.0\r\n\r\nThe suggestion of using `sync_to_async` does not fix the issue. I was following the example in the [documentation](https://channels.readthedocs.io/en/latest/topics/testing.html#).\r\n\r\n```\r\n    @pytest.mark.django_db\r\n    @pytest.mark.asyncio\r\n    async def test_strategy_map_ws(self):\r\n        MyModel.create(...)\r\n        communicator = WebsocketCommunicator(...)\r\n        connected, subprotocol = await communicator.connect()\r\n```\r\nHere, wrapping `communicator.connect` and `MyModel.objects.create` in `sync_to_async` or `database_sync_to_async` made no difference. I have tried to workaround a little by moving these things outside of the test, but this is a not a complete solution , , as this problem is occurring everywhere in my code where `sync_to_async` should have worked.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1463", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1463/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1463/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1463/events", "html_url": "https://github.com/django/channels/issues/1463", "id": 653541539, "node_id": "MDU6SXNzdWU2NTM1NDE1Mzk=", "number": 1463, "title": "Resolve docs build warnings. ", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-08T19:29:27Z", "updated_at": "2020-07-15T18:33:49Z", "closed_at": "2020-07-15T18:33:49Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Sphinx build is not exactly clean:\r\n\r\n```\r\n(channels) ~/Documents/Django-Stack/channels/docs (pr/1461)$ make html\r\nsphinx-build -b html -d _build/doctrees   . _build/html\r\nRunning Sphinx v3.1.2\r\nmaking output directory... done\r\nWARNING: html_static_path entry '_static' does not exist\r\nbuilding [mo]: targets for 0 po files that are out of date\r\nbuilding [html]: targets for 37 source files that are out of date\r\nupdating environment: [new config] 37 added, 0 changed, 0 removed\r\nreading sources... [100%] testing                                                                                       \r\n/Users/carlton/Documents/Django-Stack/channels/docs/asgi/delay.rst:26: WARNING: Block quote ends without a blank line; unexpected unindent.\r\n/Users/carlton/Documents/Django-Stack/channels/docs/community.rst:10: WARNING: Unknown target name: \"debug pannel\".\r\nlooking for now-outdated files... none found\r\npickling environment... done\r\nchecking consistency... /Users/carlton/Documents/Django-Stack/channels/docs/asgi/delay.rst: WARNING: document isn't included in any toctree\r\n/Users/carlton/Documents/Django-Stack/channels/docs/asgi/email.rst: WARNING: document isn't included in any toctree\r\n/Users/carlton/Documents/Django-Stack/channels/docs/asgi/irc-client.rst: WARNING: document isn't included in any toctree\r\n/Users/carlton/Documents/Django-Stack/channels/docs/asgi/udp.rst: WARNING: document isn't included in any toctree\r\n/Users/carlton/Documents/Django-Stack/channels/docs/asgi/www.rst: WARNING: document isn't included in any toctree\r\ndone\r\npreparing documents... done\r\nwriting output... [100%] testing                                                                                        \r\n/Users/carlton/Documents/Django-Stack/channels/docs/releases/1.0.0.rst:105: WARNING: unknown document: /generic\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1462", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1462/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1462/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1462/events", "html_url": "https://github.com/django/channels/issues/1462", "id": 653540472, "node_id": "MDU6SXNzdWU2NTM1NDA0NzI=", "number": 1462, "title": "Update CI for isort version 5. ", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-08T19:27:31Z", "updated_at": "2020-08-03T19:19:51Z", "closed_at": "2020-08-03T19:19:51Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Pinned to <5 in travis.yml. \r\n\r\nNeed to work out what the v5 changes were. Maybe just removing the `--recursive`? \r\n\r\n//cc @smithdc1 \u2014\u00a0I have a feeling you know the answer here. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1460", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1460/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1460/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1460/events", "html_url": "https://github.com/django/channels/issues/1460", "id": 648529838, "node_id": "MDU6SXNzdWU2NDg1Mjk4Mzg=", "number": 1460, "title": "Reloading changes after deployment with uvicorn without disconnecting connected websockets", "user": {"login": "Ammadkhalid", "id": 14825937, "node_id": "MDQ6VXNlcjE0ODI1OTM3", "avatar_url": "https://avatars2.githubusercontent.com/u/14825937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ammadkhalid", "html_url": "https://github.com/Ammadkhalid", "followers_url": "https://api.github.com/users/Ammadkhalid/followers", "following_url": "https://api.github.com/users/Ammadkhalid/following{/other_user}", "gists_url": "https://api.github.com/users/Ammadkhalid/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ammadkhalid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ammadkhalid/subscriptions", "organizations_url": "https://api.github.com/users/Ammadkhalid/orgs", "repos_url": "https://api.github.com/users/Ammadkhalid/repos", "events_url": "https://api.github.com/users/Ammadkhalid/events{/privacy}", "received_events_url": "https://api.github.com/users/Ammadkhalid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-30T22:14:05Z", "updated_at": "2020-07-01T09:03:00Z", "closed_at": "2020-07-01T09:03:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\none question:\r\n\r\nI wanted to send `HUP` signal to uvicorn for reloading my deployed changes. But i don't want current ws to disconnected. I tried sending `HUP` signal, ```kill -HUP $(pgrep uvicorn)```.  And it disconnect my ws as expected. I don't think if there is way to do this without disconnecting connected websocket connections? or i have to implement auto reconnect ws connections from client side?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1459", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1459/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1459/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1459/events", "html_url": "https://github.com/django/channels/issues/1459", "id": 644219068, "node_id": "MDU6SXNzdWU2NDQyMTkwNjg=", "number": 1459, "title": "Setting ASGI_THREADS to 1 still starts multiple threads", "user": {"login": "oTree-org", "id": 5423929, "node_id": "MDQ6VXNlcjU0MjM5Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5423929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oTree-org", "html_url": "https://github.com/oTree-org", "followers_url": "https://api.github.com/users/oTree-org/followers", "following_url": "https://api.github.com/users/oTree-org/following{/other_user}", "gists_url": "https://api.github.com/users/oTree-org/gists{/gist_id}", "starred_url": "https://api.github.com/users/oTree-org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oTree-org/subscriptions", "organizations_url": "https://api.github.com/users/oTree-org/orgs", "repos_url": "https://api.github.com/users/oTree-org/repos", "events_url": "https://api.github.com/users/oTree-org/events{/privacy}", "received_events_url": "https://api.github.com/users/oTree-org/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-23T23:53:15Z", "updated_at": "2020-06-28T12:28:48Z", "closed_at": "2020-06-28T12:28:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to run my Django channels server in one thread, to avoid multi-user race conditions and simplify my DB code (complicated locks & transactions).\r\n\r\nI tried setting ASGI_THREADS env var to 1, but requests are still being processed in parallel (I put print statements at the beginning and end of my view's dispatch() method, and can see the 2nd request starts before the 1st finishes), and according to \"threading.currentThread().ident\", there are still different threads handling requests.\r\n\r\nOn startup, I can see that although ASGI_THREADS is being read correctly by setting max_workers to 1, ThreadPoolExecutor is being instantiated 4 times; maybe this is the reason for the multiple threads?\r\n\r\nstarted ThreadPoolExecutor with max_workers 1\r\nstarted ThreadPoolExecutor with max_workers 1\r\nstarted ThreadPoolExecutor with max_workers 1\r\nstarted ThreadPoolExecutor with max_workers 1\r\n\r\nI'm using Python 3.8 on Windows and:\r\n\r\nchannels==2.4.0 \r\ndjango==2.2.12 \r\nchannels_redis==2.4.2 \r\nasgiref==3.2.7 \r\ndaphne==2.5.0\r\n\r\nI'm running the https://github.com/andrewgodwin/channels-examples project, using \"python manage.py runserver\" (running daphne from the CLI does the same thing).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1455", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1455/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1455/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1455/events", "html_url": "https://github.com/django/channels/issues/1455", "id": 635796036, "node_id": "MDU6SXNzdWU2MzU3OTYwMzY=", "number": 1455, "title": "Testing consumers fails under Python 3.8/3.9", "user": {"login": "adrzystek", "id": 26262275, "node_id": "MDQ6VXNlcjI2MjYyMjc1", "avatar_url": "https://avatars3.githubusercontent.com/u/26262275?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrzystek", "html_url": "https://github.com/adrzystek", "followers_url": "https://api.github.com/users/adrzystek/followers", "following_url": "https://api.github.com/users/adrzystek/following{/other_user}", "gists_url": "https://api.github.com/users/adrzystek/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrzystek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrzystek/subscriptions", "organizations_url": "https://api.github.com/users/adrzystek/orgs", "repos_url": "https://api.github.com/users/adrzystek/repos", "events_url": "https://api.github.com/users/adrzystek/events{/privacy}", "received_events_url": "https://api.github.com/users/adrzystek/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-09T22:22:21Z", "updated_at": "2020-07-18T06:06:04Z", "closed_at": "2020-07-13T15:28:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've got the easiest consumer, the one from the tutorial (it doesn't matter whether it's defined as `AsyncWebsocketConsumer` or `WebsocketConsumer`, the behavior is the same):\r\n\r\n```\r\nclass AsyncChatConsumer(AsyncWebsocketConsumer):\r\n    async def connect(self):\r\n        self.room_name = 'test'\r\n        self.room_group_name = 'chat_test'\r\n\r\n        await self.channel_layer.group_add(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n        await self.accept()\r\n\r\n    async def disconnect(self, close_code):\r\n        await self.channel_layer.group_discard(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n    async def receive(self, text_data):\r\n        text_data_json = json.loads(text_data)\r\n        message = text_data_json['message']\r\n\r\n        await self.channel_layer.group_send(\r\n            self.room_group_name,\r\n            {\r\n                'type': 'chat_message',\r\n                'message': message\r\n            }\r\n        )\r\n\r\n    async def chat_message(self, event):\r\n        message = event['message']\r\n\r\n        await self.send(text_data=json.dumps({\r\n            'message': message\r\n        }))\r\n```\r\n\r\nThis is my test, also based on the tutorial:\r\n```\r\n@pytest.mark.asyncio\r\nasync def test():\r\n    communicator = WebsocketCommunicator(AsyncChatConsumer, \"/ws/test/\")\r\n    connected, subprotocol = await communicator.connect()\r\n    assert connected\r\n    await communicator.send_to(text_data='{\"message\": \"hello\"}')\r\n    response = await communicator.receive_from()\r\n    assert response == '{\"message\": \"hello\"}'\r\n    await communicator.disconnect()\r\n```\r\n\r\nThis test fails, however, with a following traceback:\r\n```\r\n____________________________________________________________________________ test _____________________________________________________________________________\r\n\r\nkwargs = {}, coro = <coroutine object test at 0x7fbacbd36040>, loop = <_UnixSelectorEventLoop running=False closed=False debug=False>\r\ntask = <Task cancelled name='Task-1' coro=<test() done, defined at /home/hexy/mysite/gameplay/tests/test_consumers.py:35>>\r\n\r\n    @functools.wraps(func)\r\n    def inner(**kwargs):\r\n        coro = func(**kwargs)\r\n        if coro is not None:\r\n            try:\r\n                loop = asyncio.get_event_loop()\r\n            except RuntimeError as exc:\r\n                if 'no current event loop' not in str(exc):\r\n                    raise\r\n                loop = _loop\r\n            task = asyncio.ensure_future(coro, loop=loop)\r\n            try:\r\n>               loop.run_until_complete(task)\r\n\r\n/venv/lib/python3.8/site-packages/pytest_asyncio/plugin.py:155:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <_UnixSelectorEventLoop running=False closed=False debug=False>\r\nfuture = <Task cancelled name='Task-1' coro=<test() done, defined at /home/hexy/mysite/gameplay/tests/test_consumers.py:35>>\r\n\r\n    def run_until_complete(self, future):\r\n        \"\"\"Run until the Future is done.\r\n\r\n        If the argument is a coroutine, it is wrapped in a Task.\r\n\r\n        WARNING: It would be disastrous to call run_until_complete()\r\n        with the same coroutine twice -- it would wrap it in two\r\n        different Tasks and that can't be good.\r\n\r\n        Return the Future's result, or raise its exception.\r\n        \"\"\"\r\n        self._check_closed()\r\n        self._check_running()\r\n\r\n        new_task = not futures.isfuture(future)\r\n        future = tasks.ensure_future(future, loop=self)\r\n        if new_task:\r\n            # An exception is raised if the future didn't complete, so there\r\n            # is no need to log the \"destroy pending task\" message\r\n            future._log_destroy_pending = False\r\n\r\n        future.add_done_callback(_run_until_complete_cb)\r\n        try:\r\n            self.run_forever()\r\n        except:\r\n            if new_task and future.done() and not future.cancelled():\r\n                # The coroutine raised a BaseException. Consume the exception\r\n                # to not log a warning, the caller doesn't have access to the\r\n                # local task.\r\n                future.exception()\r\n            raise\r\n        finally:\r\n            future.remove_done_callback(_run_until_complete_cb)\r\n        if not future.done():\r\n            raise RuntimeError('Event loop stopped before Future completed.')\r\n\r\n>       return future.result()\r\nE       asyncio.exceptions.CancelledError\r\n\r\n/usr/local/lib/python3.8/asyncio/base_events.py:616: CancelledError\r\n-------------------------------------------------------------------- Captured stderr setup --------------------------------------------------------------------[2020-06-09 22:10:37] DEBUG [asyncio.__init__:59] Using selector: EpollSelector\r\n--------------------------------------------------------------------- Captured log setup ----------------------------------------------------------------------DEBUG    asyncio:selector_events.py:59 Using selector: EpollSelector\r\n---------------------------------------------------------------------- Captured log call ----------------------------------------------------------------------DEBUG    aioredis:connection.py:105 Creating tcp connection to ('192.168.99.100', 6379)\r\nDEBUG    aioredis:connection.py:105 Creating tcp connection to ('192.168.99.100', 6379)\r\nDEBUG    aioredis:connection.py:409 Cancelling waiter (<Future cancelled>, [None, None])\r\nDEBUG    aioredis:util.py:115 Waiter future is already done <Future cancelled>\r\n```\r\n\r\nMy setup:\r\n```\r\nPython 3.8 from Docker Hub (I've tried versions 3.8.2, 3.8.3 as well as 3.9)\r\naioredis==1.2.0\r\nasgiref==3.2.2\r\nchannels==2.3.0\r\npytest==5.4.3\r\npytest-asyncio==0.12.0\r\npytest-django==3.9.0\r\n```\r\n\r\nSurprisingly, when I switch to Python 3.7.7, the **exact** same test works!\r\n\r\nWhat can that be?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1453", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1453/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1453/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1453/events", "html_url": "https://github.com/django/channels/issues/1453", "id": 626556391, "node_id": "MDU6SXNzdWU2MjY1NTYzOTE=", "number": 1453, "title": "login method cycles session key but doesn't update browser cookie", "user": {"login": "RyanRio", "id": 25875031, "node_id": "MDQ6VXNlcjI1ODc1MDMx", "avatar_url": "https://avatars2.githubusercontent.com/u/25875031?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RyanRio", "html_url": "https://github.com/RyanRio", "followers_url": "https://api.github.com/users/RyanRio/followers", "following_url": "https://api.github.com/users/RyanRio/following{/other_user}", "gists_url": "https://api.github.com/users/RyanRio/gists{/gist_id}", "starred_url": "https://api.github.com/users/RyanRio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RyanRio/subscriptions", "organizations_url": "https://api.github.com/users/RyanRio/orgs", "repos_url": "https://api.github.com/users/RyanRio/repos", "events_url": "https://api.github.com/users/RyanRio/events{/privacy}", "received_events_url": "https://api.github.com/users/RyanRio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-28T14:25:57Z", "updated_at": "2020-07-13T15:17:49Z", "closed_at": "2020-07-13T15:17:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Background:\r\nI am calling `login(self.scope, user)` with `user` being the user object I just created from a username in a websocket message.\r\n\r\nExpected result:\r\nIf a user opens another window they are still logged in. (the `sessionid` cookie is set in the user's browser with the new session_key)\r\n\r\nActual result:\r\nThe `sessionid` cookie in the user's browser still corresponds to a session for an `AnonymousUser` (prior to when they logged in), however there no longer exists a session that corresponds to that key and so an entirely new session is made and essentially it appears the user has never logged in.\r\n\r\n'solution':\r\nI can 'solve' the problem by commenting out `else: session.cycle_key()` in `channels.auth.login`, this of course removes the (I believe) intended functionality of disassociating the anonymous user from the now logged in user...\r\n\r\nOS is windows 10, python version is 3.8.1.\r\n\r\ndaphne==2.4.1\r\nDjango==3.0.4\r\nchannels==2.4.0\r\nasgiref==3.2.7\r\n\r\nI'm just running channels with runserver.\r\n\r\nThanks!\r\nRyan\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1452", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1452/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1452/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1452/events", "html_url": "https://github.com/django/channels/issues/1452", "id": 622223927, "node_id": "MDU6SXNzdWU2MjIyMjM5Mjc=", "number": 1452, "title": "how can I share instance variable between group users only", "user": {"login": "pankajsharma120", "id": 38617129, "node_id": "MDQ6VXNlcjM4NjE3MTI5", "avatar_url": "https://avatars2.githubusercontent.com/u/38617129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pankajsharma120", "html_url": "https://github.com/pankajsharma120", "followers_url": "https://api.github.com/users/pankajsharma120/followers", "following_url": "https://api.github.com/users/pankajsharma120/following{/other_user}", "gists_url": "https://api.github.com/users/pankajsharma120/gists{/gist_id}", "starred_url": "https://api.github.com/users/pankajsharma120/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pankajsharma120/subscriptions", "organizations_url": "https://api.github.com/users/pankajsharma120/orgs", "repos_url": "https://api.github.com/users/pankajsharma120/repos", "events_url": "https://api.github.com/users/pankajsharma120/events{/privacy}", "received_events_url": "https://api.github.com/users/pankajsharma120/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-21T03:39:51Z", "updated_at": "2020-07-13T15:29:56Z", "closed_at": "2020-07-13T15:29:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am developing a online game on django, for real time connection I am using channels but unfortunately for every user I have a separate instance of game.\r\n\r\nWhat I want is, for first user I start the game with object of `StartGame` and want to use this same instance object for other users also, because I want to share current state of game.\r\n\r\nHow can I, share game instance with other members of that group only ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1451", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1451/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1451/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1451/events", "html_url": "https://github.com/django/channels/issues/1451", "id": 619722959, "node_id": "MDU6SXNzdWU2MTk3MjI5NTk=", "number": 1451, "title": "Can a list of users connected to a channel ?", "user": {"login": "cihanerman", "id": 33163384, "node_id": "MDQ6VXNlcjMzMTYzMzg0", "avatar_url": "https://avatars2.githubusercontent.com/u/33163384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cihanerman", "html_url": "https://github.com/cihanerman", "followers_url": "https://api.github.com/users/cihanerman/followers", "following_url": "https://api.github.com/users/cihanerman/following{/other_user}", "gists_url": "https://api.github.com/users/cihanerman/gists{/gist_id}", "starred_url": "https://api.github.com/users/cihanerman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cihanerman/subscriptions", "organizations_url": "https://api.github.com/users/cihanerman/orgs", "repos_url": "https://api.github.com/users/cihanerman/repos", "events_url": "https://api.github.com/users/cihanerman/events{/privacy}", "received_events_url": "https://api.github.com/users/cihanerman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T14:51:03Z", "updated_at": "2020-07-13T16:08:55Z", "closed_at": "2020-07-13T15:31:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm new to django channels, I am curious about;\r\nCan a list of users connected to a channel ?\r\n\r\nI am sorry if I had a mistake in opening a issue.\r\nThank you. Good work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1449", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1449/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1449/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1449/events", "html_url": "https://github.com/django/channels/issues/1449", "id": 615050580, "node_id": "MDU6SXNzdWU2MTUwNTA1ODA=", "number": 1449, "title": "Feature Request: Raw TCP/UDP Socket Support", "user": {"login": "ChaseGuru", "id": 32075797, "node_id": "MDQ6VXNlcjMyMDc1Nzk3", "avatar_url": "https://avatars2.githubusercontent.com/u/32075797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChaseGuru", "html_url": "https://github.com/ChaseGuru", "followers_url": "https://api.github.com/users/ChaseGuru/followers", "following_url": "https://api.github.com/users/ChaseGuru/following{/other_user}", "gists_url": "https://api.github.com/users/ChaseGuru/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChaseGuru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChaseGuru/subscriptions", "organizations_url": "https://api.github.com/users/ChaseGuru/orgs", "repos_url": "https://api.github.com/users/ChaseGuru/repos", "events_url": "https://api.github.com/users/ChaseGuru/events{/privacy}", "received_events_url": "https://api.github.com/users/ChaseGuru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-09T00:25:49Z", "updated_at": "2020-07-13T18:02:03Z", "closed_at": "2020-07-13T18:02:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Background and research findings:**\r\n\r\nI used channels for a test app using websockets and it was great.  Based on your docs I saw:\r\n\r\n> Channels is a project that takes Django and extends its abilities beyond HTTP - to handle WebSockets, chat protocols, IoT protocols, and more. It\u2019s built on a Python specification called ASGI.\r\n\r\nSeen elsewhere - though at this point I see this seems to have been removed in newer versions of docs. \r\n>Extendability to other protocols or event sources (e.g. WebRTC, raw UDP, SMS)\r\n\r\nWhich sounds really cool - having a high level abstract protocol like this supporting websockets, raw tcp/udp, and iot.\r\n\r\nOnce I went to actually implement this though I realized it doesn't seem to be a thing.\r\n\r\nI see no consumers here: https://channels.readthedocs.io/en/latest/topics/consumers.html#generic-consumers, none here: https://github.com/django/channels/tree/master/channels/generic\r\nAnd none on google - notably, SO has no answers: https://stackoverflow.com/questions/60523472/django-channels-listening-tcp-udp\r\n\r\nAt this point - I'm guessing the goal was to engineer the framework to be extensible for these use cases - but neither you nor any third party seems to have written support for any of these things.\r\n\r\n**Feature Request**\r\nProvide means to support a UDP or TCP consumer.  I'm open minded if we think it doesn't make sense for channels to support these vs websocket as websockets can start as an HTTP request - whereas UDP sockets are lower level and don't have the benefit of http packets to give some metadata.\r\n\r\nI'm guessing this may be why you removed raw udp/sms from your docks.  IoT still seems like it could have similar complications - but I don't remember enough about it to feel confident in thinking it doesn't make sense for channels.\r\n\r\nI'm happy to have this closed if you think it's better to leave UDP support to other frameworks - though I'd be a bit disappointed as it seemed like groups/channels could be nice to have in other forms of sockets.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1448", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1448/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1448/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1448/events", "html_url": "https://github.com/django/channels/issues/1448", "id": 614442047, "node_id": "MDU6SXNzdWU2MTQ0NDIwNDc=", "number": 1448, "title": "Similar issue to #1369 - subprotocol response on Chrome", "user": {"login": "alex-yobota", "id": 55692845, "node_id": "MDQ6VXNlcjU1NjkyODQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/55692845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-yobota", "html_url": "https://github.com/alex-yobota", "followers_url": "https://api.github.com/users/alex-yobota/followers", "following_url": "https://api.github.com/users/alex-yobota/following{/other_user}", "gists_url": "https://api.github.com/users/alex-yobota/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-yobota/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-yobota/subscriptions", "organizations_url": "https://api.github.com/users/alex-yobota/orgs", "repos_url": "https://api.github.com/users/alex-yobota/repos", "events_url": "https://api.github.com/users/alex-yobota/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-yobota/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-08T01:30:15Z", "updated_at": "2020-07-13T16:59:19Z", "closed_at": "2020-07-13T16:59:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I'm having a similar issue to #1369 \r\nApparently, a common hack for authenticating websockets with token authentication is to put the token in the subprotocol argument of the websocket connection. I've done this, with the following AuthMiddleware:\r\n```\r\n@database_sync_to_async\r\ndef validate_token(token):\r\n    auth = TokenAuthentication()\r\n    return auth.authenticate_credentials(token.encode(\"utf-8\"))\r\n\r\n\r\n@database_sync_to_async\r\ndef close_connections():\r\n    close_old_connections()\r\n\r\n\r\nclass WebsocketTokenAuthMiddleware:\r\n    def __init__(self, inner):\r\n        self.inner = inner\r\n\r\n    def __call__(self, scope):\r\n        close_connections()\r\n        try:\r\n            token = scope[\"subprotocols\"][0]\r\n            scope[\"user\"] = validate_token(token)\r\n            return self.inner(scope)\r\n        except Exception:\r\n            pass\r\n```\r\nThis works fine on Firefox, but gives the same error as described in the linked issue on Chrome. This is running locally, via Daphne.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1446", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1446/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1446/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1446/events", "html_url": "https://github.com/django/channels/issues/1446", "id": 605152140, "node_id": "MDU6SXNzdWU2MDUxNTIxNDA=", "number": 1446, "title": "SynchronousOnlyOperation Error after using sync_to_async", "user": {"login": "igbokwedaniel", "id": 44168688, "node_id": "MDQ6VXNlcjQ0MTY4Njg4", "avatar_url": "https://avatars2.githubusercontent.com/u/44168688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/igbokwedaniel", "html_url": "https://github.com/igbokwedaniel", "followers_url": "https://api.github.com/users/igbokwedaniel/followers", "following_url": "https://api.github.com/users/igbokwedaniel/following{/other_user}", "gists_url": "https://api.github.com/users/igbokwedaniel/gists{/gist_id}", "starred_url": "https://api.github.com/users/igbokwedaniel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/igbokwedaniel/subscriptions", "organizations_url": "https://api.github.com/users/igbokwedaniel/orgs", "repos_url": "https://api.github.com/users/igbokwedaniel/repos", "events_url": "https://api.github.com/users/igbokwedaniel/events{/privacy}", "received_events_url": "https://api.github.com/users/igbokwedaniel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T00:15:48Z", "updated_at": "2020-04-23T00:31:04Z", "closed_at": "2020-04-23T00:30:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to access my databse from a \"Synchronous\" consumer and I kept getting the SynchronousOnlyOperation Error then  I decided to wrap the function in an asgi_ref.sync_to_sync and I keep getting the same error\r\n\r\n`[Failure instance: Traceback: <class 'django.core.exceptions.SynchronousOnlyOperation'>: You cannot call this from an async context - use a thread or sync_to_async.\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\autobahn\\websocket\\protocol.py:2821:processHandshake\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\txaio\\tx.py:430:as_future\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\twisted\\internet\\defer.py:151:maybeDeferred\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\daphne\\ws_protocol.py:83:onConnect\r\n--- <exception caught here> ---\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\twisted\\internet\\defer.py:151:maybeDeferred\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\daphne\\server.py:200:create_application\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\channels\\staticfiles.py:41:__call__\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\channels\\routing.py:54:__call__\r\nC:\\Users\\User\\Documents\\TechStack\\Recursive\\recursive\\metachannel\\TokenAuthMiddleWare.py:21:__call__\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\django\\db\\__init__.py:57:close_old_connections\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\django\\db\\backends\\base\\base.py:511:close_if_unusable_or_obsolete\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\django\\db\\backends\\base\\base.py:390:get_autocommit\r\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\django\\utils\\asyncio.py:24:inner`\r\n\r\n\r\ncode snippet\r\n\r\n```\r\nclass MasterNotify(WebsocketConsumer):\r\n    async def connect(self):\r\n        memor                         = sync_to_async(self.get_user)\r\n        self.scope['user']            = await memor()\r\n        if not self.scope['user']:\r\n            self.close()\r\n        print(self.scope['user'])\r\n        self.accept() \r\n    \r\n    def disconnect(self, close_code):\r\n        pass \r\n    \r\n    def get_user(self):\r\n        return authenticate(username = self.scope['username'], password = self.scope['password'])\r\n        \r\n    def recieve(self,data):\r\n        pass\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1444", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1444/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1444/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1444/events", "html_url": "https://github.com/django/channels/issues/1444", "id": 602374216, "node_id": "MDU6SXNzdWU2MDIzNzQyMTY=", "number": 1444, "title": "how to close current connection if no message sended from client after a few minutes", "user": {"login": "fenghaoyu", "id": 32116328, "node_id": "MDQ6VXNlcjMyMTE2MzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/32116328?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fenghaoyu", "html_url": "https://github.com/fenghaoyu", "followers_url": "https://api.github.com/users/fenghaoyu/followers", "following_url": "https://api.github.com/users/fenghaoyu/following{/other_user}", "gists_url": "https://api.github.com/users/fenghaoyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/fenghaoyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fenghaoyu/subscriptions", "organizations_url": "https://api.github.com/users/fenghaoyu/orgs", "repos_url": "https://api.github.com/users/fenghaoyu/repos", "events_url": "https://api.github.com/users/fenghaoyu/events{/privacy}", "received_events_url": "https://api.github.com/users/fenghaoyu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-18T04:19:43Z", "updated_at": "2020-07-13T18:29:09Z", "closed_at": "2020-07-13T18:29:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry to ask here.\r\nI'm trying to find a solution to solve this by reading the documents, but no help.\r\nEnglish is not my mother tongue, so may be there is a solution but i can't find.\r\nAlso, i can't connect to stackoverflow.\r\n\r\nHere is my question:\r\nIs there is a way to do this?\r\nIf no message sended from client after a few minutes, like two or three minutes, i want to close it and discard it from group.\r\nAny suggestion or question will be thankful!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1443", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1443/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1443/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1443/events", "html_url": "https://github.com/django/channels/issues/1443", "id": 601480158, "node_id": "MDU6SXNzdWU2MDE0ODAxNTg=", "number": 1443, "title": "New PyPI release timeline?", "user": {"login": "oTree-org", "id": 5423929, "node_id": "MDQ6VXNlcjU0MjM5Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5423929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oTree-org", "html_url": "https://github.com/oTree-org", "followers_url": "https://api.github.com/users/oTree-org/followers", "following_url": "https://api.github.com/users/oTree-org/following{/other_user}", "gists_url": "https://api.github.com/users/oTree-org/gists{/gist_id}", "starred_url": "https://api.github.com/users/oTree-org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oTree-org/subscriptions", "organizations_url": "https://api.github.com/users/oTree-org/orgs", "repos_url": "https://api.github.com/users/oTree-org/repos", "events_url": "https://api.github.com/users/oTree-org/events{/privacy}", "received_events_url": "https://api.github.com/users/oTree-org/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-16T21:11:47Z", "updated_at": "2020-04-21T22:49:01Z", "closed_at": "2020-04-21T22:49:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just wondering if there is anything I could do to help with getting the next release out on PyPI. Would really like to use some of the new enhancements (and for deployment reasons, can't really use the GitHub-hosted code as a dependency).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1441", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1441/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1441/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1441/events", "html_url": "https://github.com/django/channels/issues/1441", "id": 597439341, "node_id": "MDU6SXNzdWU1OTc0MzkzNDE=", "number": 1441, "title": "Windows Python 3.8 Selector issue: Adding app to INSTALLED_APPS won't allow RUNSERVER", "user": {"login": "jgreen44", "id": 52048026, "node_id": "MDQ6VXNlcjUyMDQ4MDI2", "avatar_url": "https://avatars3.githubusercontent.com/u/52048026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreen44", "html_url": "https://github.com/jgreen44", "followers_url": "https://api.github.com/users/jgreen44/followers", "following_url": "https://api.github.com/users/jgreen44/following{/other_user}", "gists_url": "https://api.github.com/users/jgreen44/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreen44/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreen44/subscriptions", "organizations_url": "https://api.github.com/users/jgreen44/orgs", "repos_url": "https://api.github.com/users/jgreen44/repos", "events_url": "https://api.github.com/users/jgreen44/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreen44/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-09T17:28:48Z", "updated_at": "2020-04-13T14:12:10Z", "closed_at": "2020-04-13T14:12:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I place 'channels', into the INSTALLED_APPS, I cannot run the server:\r\n\r\n- Your OS and runtime environment, and browser if applicable\r\n\r\n> Windows 10, IntelliJ IDEA, Brave Browser\r\n\r\n- A `pip freeze` output showing your package versions\r\n\r\n> asgiref==3.2.5\r\n> attrs==19.3.0\r\n> autobahn==20.4.1\r\n> Automat==20.2.0\r\n> certifi==2020.4.5.1\r\n> cffi==1.14.0\r\n> channels==2.4.0\r\n> constantly==15.1.0\r\n> cryptography==2.9\r\n> daphne==2.4.1\r\n> Django==3.0.3\r\n> hyperlink==19.0.0\r\n> idna==2.9\r\n> incremental==17.5.0\r\n> olefile==0.46\r\n> Pillow==7.0.0\r\n> psycopg2==2.8.4\r\n> pyasn1==0.4.8\r\n> pyasn1-modules==0.2.8\r\n> pycparser==2.20\r\n> PyHamcrest==2.0.2\r\n> pyOpenSSL==19.1.0\r\n> pytz==2019.3\r\n> service-identity==18.1.0\r\n> six==1.14.0\r\n> sqlparse==0.3.0\r\n> Twisted==20.3.0\r\n> txaio==20.4.1\r\n> wincertstore==0.2\r\n> zope.interface==5.1.0\r\n\r\n\r\n- Console logs and full tracebacks of any errors\r\n\r\n> Watching for file changes with StatReloader\r\n> Exception in thread django-main-thread:\r\n> Traceback (most recent call last):\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\threading.py\", line 932, in _bootstrap_inner\r\n>     self.run()\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\threading.py\", line 870, in run\r\n>     self._target(*self._args, **self._kwargs)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\utils\\autoreload.py\", line 53, in wrapper\r\n>     fn(*args, **kwargs)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 10\r\n> 9, in inner_run\r\n>     autoreload.raise_last_exception()\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\utils\\autoreload.py\", line 76, in raise_last_ex\r\n> ception\r\n>     raise _exception[1]\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 357, in exec\r\n> ute\r\n>     autoreload.check_errors(django.setup)()\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\utils\\autoreload.py\", line 53, in wrapper\r\n>     fn(*args, **kwargs)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\__init__.py\", line 24, in setup\r\n>     apps.populate(settings.INSTALLED_APPS)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\apps\\registry.py\", line 91, in populate\r\n>     app_config = AppConfig.create(entry)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\django\\apps\\config.py\", line 116, in create\r\n>     mod = import_module(mod_path)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\importlib\\__init__.py\", line 127, in import_module\r\n>     return _bootstrap._gcd_import(name[level:], package, level)\r\n>   File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n>   File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n>   File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n>   File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n>   File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n>   File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\channels\\apps.py\", line 6, in <module>\r\n>     import daphne.server\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\daphne\\server.py\", line 20, in <module>\r\n>     asyncioreactor.install(twisted_loop)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\twisted\\internet\\asyncioreactor.py\", line 320, in inst\r\n> all\r\n>     reactor = AsyncioSelectorReactor(eventloop)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\twisted\\internet\\asyncioreactor.py\", line 69, in __ini\r\n> t__\r\n>     super().__init__()\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\twisted\\internet\\base.py\", line 571, in __init__\r\n>     self.installWaker()\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\twisted\\internet\\posixbase.py\", line 286, in installWa\r\n> ker\r\n>     self.addReader(self.waker)\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\site-packages\\twisted\\internet\\asyncioreactor.py\", line 151, in addR\r\n> eader\r\n>     self._asyncioEventloop.add_reader(fd, callWithLogger, reader,\r\n>   File \"C:\\Users\\Green\\anaconda3\\envs\\DjangoProductHunt\\lib\\asyncio\\events.py\", line 501, in add_reader\r\n>     raise NotImplementedError\r\n> NotImplementedError\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1440", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1440/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1440/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1440/events", "html_url": "https://github.com/django/channels/issues/1440", "id": 593778158, "node_id": "MDU6SXNzdWU1OTM3NzgxNTg=", "number": 1440, "title": "how can I create a server sent events?", "user": {"login": "ihakh", "id": 45719816, "node_id": "MDQ6VXNlcjQ1NzE5ODE2", "avatar_url": "https://avatars2.githubusercontent.com/u/45719816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ihakh", "html_url": "https://github.com/ihakh", "followers_url": "https://api.github.com/users/ihakh/followers", "following_url": "https://api.github.com/users/ihakh/following{/other_user}", "gists_url": "https://api.github.com/users/ihakh/gists{/gist_id}", "starred_url": "https://api.github.com/users/ihakh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ihakh/subscriptions", "organizations_url": "https://api.github.com/users/ihakh/orgs", "repos_url": "https://api.github.com/users/ihakh/repos", "events_url": "https://api.github.com/users/ihakh/events{/privacy}", "received_events_url": "https://api.github.com/users/ihakh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220071675, "node_id": "MDU6TGFiZWwyMjAwNzE2NzU=", "url": "https://api.github.com/repos/django/channels/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-04T08:52:48Z", "updated_at": "2020-04-05T04:07:42Z", "closed_at": "2020-04-04T14:42:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "with this code:\r\n```\r\nclass Events(AsyncHttpConsumer):\r\n    async def handle(self, body):\r\n        await self.send_headers(headers=[\r\n            (b\"Cache-Control\", b\"no-cache\"),\r\n            (b\"Content-Type\", b\"text/event-stream\"),\r\n            (b\"Transfer-Encoding\", b\"chunked\"),\r\n        ])\r\n        await self.channel_layer.group_add('some_events',self.channel_name)\r\n        print('hello')\r\n        await self.send_body(b\"retry: 400\\n\\n\", more_body=True)\r\n        while True:\r\n            await asyncio.sleep(1000)\r\n\r\n    async def disconnect(self):\r\n        print('bye')\r\n        await self.channel_layer.group_discard('some_events',self.channel_name)\r\n\r\n    async def some_event_send(self, event):\r\n        print(event)\r\n        msg = '\\n'.join(['%s: %s'%(k, v) for k, v in event['msg'].items()])\r\n        await self.send_body(msg.encode(), more_body=True)\r\n```\r\n\r\nI have 2 question\r\n1- how can I write a SSE using AsyncHttpConsumer? if I remove the `while True` part I see immediately `bye` after `hello` . is the connection closed this soon?\r\n2- how can I send events to this group? I use this code:\r\n`async_to_sync(self.channel_layer.group_send)(\"some_events\", {\"type\": \"some_event_send\", 'msg': msg})`\r\nbut I never see the event printed\r\nwhat is wrong?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1439", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1439/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1439/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1439/events", "html_url": "https://github.com/django/channels/issues/1439", "id": 587875170, "node_id": "MDU6SXNzdWU1ODc4NzUxNzA=", "number": 1439, "title": "Request parsing incorrect using a serializer in Django ", "user": {"login": "iamarnav", "id": 59596500, "node_id": "MDQ6VXNlcjU5NTk2NTAw", "avatar_url": "https://avatars2.githubusercontent.com/u/59596500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamarnav", "html_url": "https://github.com/iamarnav", "followers_url": "https://api.github.com/users/iamarnav/followers", "following_url": "https://api.github.com/users/iamarnav/following{/other_user}", "gists_url": "https://api.github.com/users/iamarnav/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamarnav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamarnav/subscriptions", "organizations_url": "https://api.github.com/users/iamarnav/orgs", "repos_url": "https://api.github.com/users/iamarnav/repos", "events_url": "https://api.github.com/users/iamarnav/events{/privacy}", "received_events_url": "https://api.github.com/users/iamarnav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-25T17:44:38Z", "updated_at": "2020-03-25T18:51:38Z", "closed_at": "2020-03-25T18:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI had created the following serializers for request parsing of JSON data. However, while performing the operation, I get an unexpected error.\r\n```\r\n\r\nclass A(serializers.ModelSerializer):            \r\n    class Meta:                                                \r\n        model = CName                                  \r\n        fields = ('id','contact','email')                      \r\n        read_only_fields=('contact',)                            \r\n\r\nclass B(serializers.ModelSerializer):      \r\n    class Meta:                                                \r\n        model = PName                                    \r\n        fields = ('id','contact','number')                    \r\n        read_only_fields=('contact',)              \r\n\r\nclass C(serializers.ModelSerializer):          \r\n    contact_number = A(many=True)          \r\n    contact_email = B(many=True)                \r\n\r\n    class Meta:                                                  \r\n        model = Contact                                          \r\n        fields = ('id','name','contact_number','contact_email')  \r\n\r\n    def create(self,validated_data):         \r\n        contact_number=validated_data.pop('contact_number')      \r\n        contact_email =validated_data.pop('contact_email')      \r\n        instance = Contact.objects.create(**validated_data)            \r\n        for number in contact_number:                                                           \r\n            PName.objects.create(contact=instance,**number)      \r\n        for email in contact_email:                                    \r\n            CName.objects.create(contact=instance,**email)      \r\n        return instance\r\n\r\n    def update(self, instance, validated_data):                  \r\n        contact_number=validated_data.pop('contact_number')      \r\n        contact_email =validated_data.pop('contact_name')            \r\n        Contact.objects.filter(id=instance.id).update(**validated_data)\r\n        number_to_keep=[]                                              \r\n        email_to_keep=[]                                              \r\n        for number in contact_number:                                  \r\n            if number.get('id'):                                      \r\n                ph_id = number.pop('id')                              \r\n                PName.objects.filter(id=ph_id).update(**number)  \r\n                number_to_keep.append(ph_id)                          \r\n            else:                                                      \r\n                ph=PName.objects.create(contact=instance,**number)\r\n                number_to_keep.append(ph.id)                            \r\n        for email in contact_email:                                    \r\n            if email.get('id'):                                        \r\n                em_id = email.pop('id')                                \r\n                CName.objects.filter(id=em_id).update(**email)  \r\n                email_to_keep.append(em_id)                            \r\n            else:                                                        \r\n                em = CName.objects.create(contact=instance,**email)\r\n                email_to_keep.append(em.id)                              \r\n        instance.contact_number.exclude(id__in=number_to_keep).delete()  \r\n        instance.contact_email.exclude(id__in=email_to_keep).delete()     \r\n        return instance\r\n\r\n```\r\nI have a json-format where I am passing the request data in the format:\r\n\r\n```\r\n{\r\n\"contact_number\": \"9999999999\",\r\n\"contact_email\":\"timsh@hotmail.com\"\r\n}\r\n```\r\n\r\nWhile calling up the serializer using the following code:\r\n```\r\n\r\ncontact_details = Contact.objects.get(rest = rest)\r\ncontact_serializer = ContactSerializer(contact_details,data=request.data)\r\n```\r\n\r\nI received the response as below:\r\n\r\n```\r\n{\r\n    \"contact_number\": {\r\n        \"non_field_errors\": [\r\n            \"Expected a list of items but got type \\\"unicode\\\".\"\r\n        ]\r\n    },\r\n    \"contact_email\": {\r\n        \"non_field_errors\": [\r\n            \"Expected a list of items but got type \\\"unicode\\\".\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nNote: I cannot have the data format of JSON in the below format:\r\n```\r\n[\r\n{\r\n\"contact_number\" : [\r\n                    { \"number\" : \"9999999999\"\r\n                     }\r\n],\r\n\"contact_email\" : [\r\n                    { \"email\" : \"tim@hotmail.com\"\r\n                     }\r\n]\r\n}]\r\n```\r\n\r\nCan anyone please suggest what changes could be done in the serializer so that I could overcome the issue here.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1435", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1435/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1435/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1435/events", "html_url": "https://github.com/django/channels/issues/1435", "id": 586200856, "node_id": "MDU6SXNzdWU1ODYyMDA4NTY=", "number": 1435, "title": "Exception when trying to use channel_layer from different threads", "user": {"login": "romasku", "id": 11975516, "node_id": "MDQ6VXNlcjExOTc1NTE2", "avatar_url": "https://avatars2.githubusercontent.com/u/11975516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romasku", "html_url": "https://github.com/romasku", "followers_url": "https://api.github.com/users/romasku/followers", "following_url": "https://api.github.com/users/romasku/following{/other_user}", "gists_url": "https://api.github.com/users/romasku/gists{/gist_id}", "starred_url": "https://api.github.com/users/romasku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romasku/subscriptions", "organizations_url": "https://api.github.com/users/romasku/orgs", "repos_url": "https://api.github.com/users/romasku/repos", "events_url": "https://api.github.com/users/romasku/events{/privacy}", "received_events_url": "https://api.github.com/users/romasku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-23T13:17:02Z", "updated_at": "2020-07-13T17:10:37Z", "closed_at": "2020-07-13T17:10:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code:\r\n```\r\nimport asyncio\r\n\r\nfrom channels.db import database_sync_to_async\r\nfrom channels.layers import get_channel_layer\r\n\r\nasync def main():\r\n\r\n\tcl = get_channel_layer()\r\n\t@database_sync_to_async\r\n\tdef run():\r\n\t\tasync def foo():\r\n\t\t\tawait cl.send('test', {})\r\n\t\t\tawait cl.receive('test')\r\n\t\tasyncio.run(foo())\r\n\r\n\tawait asyncio.gather(*[run() for _ in range(10)])\r\n\r\nasyncio.run(main())\r\n```\r\nTriggers the following exception:\r\n```\r\n...\r\n  File \"/home/romasku/projects/taxi/taxi-server/reproduce.py\", line 13, in foo\r\n    await cl.receive('test')\r\n  File \"/home/romasku/projects/taxi/venv/lib/python3.8/site-packages/channels_redis/core.py\", line 461, in receive\r\n    return (await self.receive_single(channel))[1]\r\n  File \"/home/romasku/projects/taxi/venv/lib/python3.8/site-packages/channels_redis/core.py\", line 478, in receive_single\r\n    await self.receive_clean_locks.acquire(channel_key)\r\n  File \"/home/romasku/projects/taxi/venv/lib/python3.8/site-packages/channels_redis/core.py\", line 146, in acquire\r\n    return await self.locks[channel].acquire()\r\n  File \"/usr/lib/python3.8/asyncio/locks.py\", line 203, in acquire\r\n    await fut\r\nRuntimeError: Task <Task pending name='Task-17' coro=<main.<locals>.run.<locals>.foo() running at /home/romasku/projects/taxi/taxi-server/reproduce.py:13> cb=[_run_until_complete_cb() at /usr/lib/python3.8/asyncio/base_events.py:184]> got Future <Future pending> attached to a different loop\r\n```\r\nI am using `channels_redis.core.RedisChannelLayer` channel layer.\r\n\r\nI think that the reason is the following: while there is a lock for channel `'test'` in `ChannelLock.locks`, another thread tries to get lock for that channel.\r\nIt this expected behaviour? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1433", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1433/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1433/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1433/events", "html_url": "https://github.com/django/channels/issues/1433", "id": 584906119, "node_id": "MDU6SXNzdWU1ODQ5MDYxMTk=", "number": 1433, "title": "Connection suddenly closed after calling self.channel_layer.group_send", "user": {"login": "harem234", "id": 38382747, "node_id": "MDQ6VXNlcjM4MzgyNzQ3", "avatar_url": "https://avatars3.githubusercontent.com/u/38382747?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harem234", "html_url": "https://github.com/harem234", "followers_url": "https://api.github.com/users/harem234/followers", "following_url": "https://api.github.com/users/harem234/following{/other_user}", "gists_url": "https://api.github.com/users/harem234/gists{/gist_id}", "starred_url": "https://api.github.com/users/harem234/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harem234/subscriptions", "organizations_url": "https://api.github.com/users/harem234/orgs", "repos_url": "https://api.github.com/users/harem234/repos", "events_url": "https://api.github.com/users/harem234/events{/privacy}", "received_events_url": "https://api.github.com/users/harem234/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-20T08:10:34Z", "updated_at": "2020-04-05T08:58:35Z", "closed_at": "2020-04-04T19:12:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "after finishing part 4 of the channels tutorial, every thing wok fine.\r\nuntill i send a message from onopen() from frontend side (javascript ) the self.channel_layer.group_add called when someone load the chat page. untill this point every thing is fine.\r\nproblem arise when self.channel_layer.group_send() is called.\r\nthis method then should call the chat_message() method! but it does not!!!\r\nthe rest of the code in receive() method will execute and after the last line get executed \r\nconnection will close but the funny part it does not call the method disconnect().\r\n\r\n\r\nWebSocket HANDSHAKING /ws/chat-room/loob/ [172.18.0.1:54316]\r\nWebSocket CONNECT /ws/chat-room/loob/ [172.18.0.1:54316]\r\n...............recieve some message from onopen() function from javascript site ......\r\nWebSocket DISCONNECT /ws/chat-room/loob/ [172.18.0.1:54316]\r\n\r\nthe webserver:  ASGI development runserver\r\nbrowser is mozila firefox.\r\nthe frontend script it same as the tutorial.\r\ndjango channel and redis are docker containers on windows 10.\r\ndebug toolbar is disabled.\r\ni put all the code (every method) in try catch but there were no exception to catch!!!\r\n\r\nthe consumer file is attached.\r\n[django channels consumer error.txt](https://github.com/django/channels/files/4360430/django.channels.consumer.error.txt)\r\n\r\nthe pip freeze is attached too.\r\n[freeze.txt](https://github.com/django/channels/files/4358413/freeze.txt)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1432", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1432/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1432/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1432/events", "html_url": "https://github.com/django/channels/issues/1432", "id": 583850407, "node_id": "MDU6SXNzdWU1ODM4NTA0MDc=", "number": 1432, "title": "Error when starting the server.", "user": {"login": "Voodlaz", "id": 47495939, "node_id": "MDQ6VXNlcjQ3NDk1OTM5", "avatar_url": "https://avatars1.githubusercontent.com/u/47495939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Voodlaz", "html_url": "https://github.com/Voodlaz", "followers_url": "https://api.github.com/users/Voodlaz/followers", "following_url": "https://api.github.com/users/Voodlaz/following{/other_user}", "gists_url": "https://api.github.com/users/Voodlaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Voodlaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Voodlaz/subscriptions", "organizations_url": "https://api.github.com/users/Voodlaz/orgs", "repos_url": "https://api.github.com/users/Voodlaz/repos", "events_url": "https://api.github.com/users/Voodlaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Voodlaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-18T16:24:29Z", "updated_at": "2020-07-25T11:23:11Z", "closed_at": "2020-03-25T10:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have my channels placed in the top of INSTALLED_APPS.\r\n\r\nWhen I ty to start the server I get following error:\r\n```\r\nFile \"manage.py\", line 21, in <module>\r\n    main()\r\n  File \"manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 381, in execute_from_command_line\r\n    utility.execute()\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 375, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 224, in fetch_command\r\n    klass = load_command_class(app_name, subcommand)\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 36, in load_command_class\r\n    module = import_module('%s.management.commands.%s' % (app_name, name))\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\importlib\\__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\channels\\management\\commands\\runserver.py\", line 10, in <module>\r\n    from channels import __version__\r\nImportError: cannot import name '__version__' from 'channels' (C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\channels\\__init__.py)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1430", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1430/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1430/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1430/events", "html_url": "https://github.com/django/channels/issues/1430", "id": 582735491, "node_id": "MDU6SXNzdWU1ODI3MzU0OTE=", "number": 1430, "title": "get_handler_name allow call to private methods", "user": {"login": "avallete", "id": 8771783, "node_id": "MDQ6VXNlcjg3NzE3ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/8771783?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avallete", "html_url": "https://github.com/avallete", "followers_url": "https://api.github.com/users/avallete/followers", "following_url": "https://api.github.com/users/avallete/following{/other_user}", "gists_url": "https://api.github.com/users/avallete/gists{/gist_id}", "starred_url": "https://api.github.com/users/avallete/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avallete/subscriptions", "organizations_url": "https://api.github.com/users/avallete/orgs", "repos_url": "https://api.github.com/users/avallete/repos", "events_url": "https://api.github.com/users/avallete/events{/privacy}", "received_events_url": "https://api.github.com/users/avallete/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-17T03:51:22Z", "updated_at": "2020-07-15T15:51:28Z", "closed_at": "2020-07-15T15:51:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi there !\r\n\r\n## Environment:\r\n- python3.8\r\n- channels 2.4.0\r\n\r\n## Bug:\r\nNot sure if it's really a bug or an intended behaviour. But it seem that the function [get_handler_name](https://github.com/django/channels/blob/42070bfe400048d7c8efe551d37f7ac0d26d8e7e/channels/consumer.py#L12) behave quite strangely and allow the call of \"private\" methods in some corner cases.\r\n\r\nExamples:\r\n\r\n```python\r\n\r\nchannel_layer = get_channel_layer()\r\n\r\nmessage = { \"type\": \"_my_private_function\", \"data\": \"here some data\" }\r\nawait channel_layer.group_send(response_data['id'], message=message)\r\n\r\n# Will fail, raising ValueError(\"Malformed type in message (leading underscore)\")\r\n# from get_handler_name\r\n\r\n\r\nmessage = { \"type\": \".my_private_function\", \"data\": \"here some data\" }\r\nawait channel_layer.group_send(response_data['id'], message=message)\r\n\r\n# Will work and call \"_my_private_function\" from consumer instance\r\n```\r\n\r\n## Expected Behavior:\r\n\r\nShould either, allow to call `_private_methods` all the time (and not raise error in the first case).\r\nOr never allow this kind of call and consider them invalid.\r\n\r\n## Fix proposal:\r\n\r\nThe origin of the inconsistency come from the fact that we check the function name, before mutation and not after.\r\n\r\nInto [this](https://github.com/avallete/channels/commit/544a1d5c17a051d59aad22be009d7f87b8d0ab50) commit, I perform the mutation before checking the result. Disallowing call to any function starting with \"_\".\r\n\r\nIf this issue is validated as a \"bug\", I will happily open a PR.\r\n\r\nRegards,", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1429", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1429/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1429/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1429/events", "html_url": "https://github.com/django/channels/issues/1429", "id": 582610275, "node_id": "MDU6SXNzdWU1ODI2MTAyNzU=", "number": 1429, "title": "django.core.exceptions.ImproperlyConfigured: Cannot import ASGI_APPLICATION module 'routing", "user": {"login": "subbu52", "id": 29340722, "node_id": "MDQ6VXNlcjI5MzQwNzIy", "avatar_url": "https://avatars0.githubusercontent.com/u/29340722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/subbu52", "html_url": "https://github.com/subbu52", "followers_url": "https://api.github.com/users/subbu52/followers", "following_url": "https://api.github.com/users/subbu52/following{/other_user}", "gists_url": "https://api.github.com/users/subbu52/gists{/gist_id}", "starred_url": "https://api.github.com/users/subbu52/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/subbu52/subscriptions", "organizations_url": "https://api.github.com/users/subbu52/orgs", "repos_url": "https://api.github.com/users/subbu52/repos", "events_url": "https://api.github.com/users/subbu52/events{/privacy}", "received_events_url": "https://api.github.com/users/subbu52/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-16T21:30:01Z", "updated_at": "2020-07-13T17:07:33Z", "closed_at": "2020-07-13T17:07:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting errors while running daphne server. RHEL/httpd server is running wsgi.py with out any issues. \r\n\r\nHere are the configurations of different files: \r\n\r\n1) asgy.py\r\n----------------------------------\r\n\r\n```\r\nimport os\r\nimport sys\r\nimport django\r\nfrom channels.routing import get_default_application\r\n\r\nsys.path.append(\"/var/www/new-personality-server-2.0/personality\")\r\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"personality.settings\")\r\ndjango.setup()\r\napplication = get_default_application()\r\n```\r\n\r\n2) routing.py\r\n---------------------------------------\r\n\r\n```\r\nfrom channels.auth import AuthMiddlewareStack\r\nfrom channels.routing import ProtocolTypeRouter, URLRouter\r\nimport tools.routing\r\n\r\n#application = ProtocolTypeRouter({\r\n    # (http->django views is added by default)\r\n#    'websocket': AuthMiddlewareStack(\r\n#        URLRouter(\r\n#            tools.routing.websocket_urlpatterns\r\n#        )\r\n#    ),\r\n#})\r\napplication = ProtocolTypeRouter({})\r\n```\r\n\r\nsettings.py\r\n----------------------------\r\n\r\n```\r\nASGI_APPLICATION = 'routing.application'\r\nCHANNEL_LAYERS = {\r\n    'default': {\r\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\r\n        'CONFIG': {\r\n            \"hosts\": [(PERSONALITY_HOST, 6379)],\r\n        },\r\n    },\r\n}\r\n\r\n\r\nINSTALLED_APPS = [\r\n    'channels',\r\n]\r\n```\r\n\r\nhttpd (django.conf) file\r\n---------------------------------\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ServerName xxx.xx.net\r\n    #DocumentRoot /var/www/new-personality-server-2.0\r\n    DocumentRoot /var/www\r\n    Alias /static /var/www/new-personality-server-2.0/personality/static\r\n    <Directory /var/www/new-personality-server-2.0/personality/static>\r\n            Require all granted\r\n    </Directory>\r\n\r\n    Alias /media /var/www/new-personality-server-2.0/personality/media\r\n    <Directory /var/www/new-personality-server-2.0/personality/media>\r\n                Require all granted\r\n        </Directory>\r\n\r\n\r\n    LoadModule wsgi_module /usr/lib64/httpd/modules/mod_wsgi.so\r\n    WSGIDaemonProcess personality python-path=/var/www/new-personality-server-2.0/newpers3.8:/var/www/new-personality-server-2.0/newpers3.8/lib/python3.8/site-packages\r\n    WSGIProcessGroup personality\r\n    WSGIScriptAlias / /var/www/new-personality-server-2.0/personality/personality/wsgi.py\r\n    #WSGIPythonHome /var/www/new-personality-server-2.0/newpersonality\r\n    #WSGIPythonPath /var/www/new-personality-server-2.0/personality\r\n\r\n    <Directory /var/www/new-personality-server-2.0/personality/personality>\r\n                <Files wsgi.py>\r\n                        Require all granted\r\n                </Files>\r\n```\r\n\r\nfinally logs: \r\n----------------------------\r\n\r\n```\r\n# daphne personality.asgi:application\r\nTraceback (most recent call last):\r\n  File \"/var/www/new-personality-server-2.0/newpers3.8/lib/python3.8/site-packages/channels/routing.py\", line 29, in get_default_application\r\n    module = importlib.import_module(path)\r\n  File \"/usr/local/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 973, in _find_and_load_unlocked\r\nModuleNotFoundError: No module named 'routing'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/var/www/new-personality-server-2.0/newpers3.8/bin/daphne\", line 10, in <module>\r\n    sys.exit(CommandLineInterface.entrypoint())\r\n  File \"/var/www/new-personality-server-2.0/newpers3.8/lib/python3.8/site-packages/daphne/cli.py\", line 191, in entrypoint\r\n    cls().run(sys.argv[1:])\r\n  File \"/var/www/new-personality-server-2.0/newpers3.8/lib/python3.8/site-packages/daphne/cli.py\", line 252, in run\r\n    application = import_by_path(args.application)\r\n  File \"/var/www/new-personality-server-2.0/newpers3.8/lib/python3.8/site-packages/daphne/utils.py\", line 12, in import_by_path\r\n    target = importlib.import_module(module_path)\r\n  File \"/usr/local/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"./personality/asgi.py\", line 14, in <module>\r\n    application = get_default_application()\r\n  File \"/var/www/new-personality-server-2.0/newpers3.8/lib/python3.8/site-packages/channels/routing.py\", line 31, in get_default_application\r\n    raise ImproperlyConfigured(\"Cannot import ASGI_APPLICATION module %r\" % path)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1426", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1426/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1426/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1426/events", "html_url": "https://github.com/django/channels/issues/1426", "id": 579788736, "node_id": "MDU6SXNzdWU1Nzk3ODg3MzY=", "number": 1426, "title": " Error: Django can only handle ASGI/HTTP connections, not websocket.", "user": {"login": "gojuukaze", "id": 15613304, "node_id": "MDQ6VXNlcjE1NjEzMzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/15613304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gojuukaze", "html_url": "https://github.com/gojuukaze", "followers_url": "https://api.github.com/users/gojuukaze/followers", "following_url": "https://api.github.com/users/gojuukaze/following{/other_user}", "gists_url": "https://api.github.com/users/gojuukaze/gists{/gist_id}", "starred_url": "https://api.github.com/users/gojuukaze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gojuukaze/subscriptions", "organizations_url": "https://api.github.com/users/gojuukaze/orgs", "repos_url": "https://api.github.com/users/gojuukaze/repos", "events_url": "https://api.github.com/users/gojuukaze/events{/privacy}", "received_events_url": "https://api.github.com/users/gojuukaze/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220071673, "node_id": "MDU6TGFiZWwyMjAwNzE2NzM=", "url": "https://api.github.com/repos/django/channels/labels/documentation", "name": "documentation", "color": "159818", "default": true, "description": null}, {"id": 220071672, "node_id": "MDU6TGFiZWwyMjAwNzE2NzI=", "url": "https://api.github.com/repos/django/channels/labels/enhancement", "name": "enhancement", "color": "1d76db", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-12T09:01:58Z", "updated_at": "2020-08-07T02:12:28Z", "closed_at": "2020-08-07T02:12:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "my setup:\r\n\r\n```\r\nDjango==3.0.3\r\nchannels==2.4.0\r\nchannels-redis==2.4.2\r\ndaphne==2.4.1\r\n```\r\n\r\nrun command:\r\n\r\n```\r\ndaphne myproduct.asgi:application\r\n```\r\n\r\nI got 500 server error when I connenct websocket .\r\n\r\nlog:\r\n\r\n```\r\n127.0.0.1:54023 - - [12/Mar/2020:16:51:21] \"WSCONNECTING /ws/robot\" - -\r\n2020-03-12 16:51:22,104 ERROR    Exception inside application: Django can only handle ASGI/HTTP connections, not websocket.\r\n  File \"/Users/xx/project/xx/venv/lib/python3.7/site-packages/daphne/cli.py\", line 30, in asgi\r\n    await self.app(scope, receive, send)\r\n  File \"/Users/xx/project/xx/venv/lib/python3.7/site-packages/django/core/handlers/asgi.py\", line 146, in __call__\r\n    % scope['type']\r\n  Django can only handle ASGI/HTTP connections, not websocket.\r\n127.0.0.1:54023 - - [12/Mar/2020:16:51:22] \"WSDISCONNECT /ws/robot\" - -\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1424", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1424/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1424/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1424/events", "html_url": "https://github.com/django/channels/issues/1424", "id": 577042091, "node_id": "MDU6SXNzdWU1NzcwNDIwOTE=", "number": 1424, "title": "[Question] Is it django channels on Conda?", "user": {"login": "fbove", "id": 17007814, "node_id": "MDQ6VXNlcjE3MDA3ODE0", "avatar_url": "https://avatars3.githubusercontent.com/u/17007814?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fbove", "html_url": "https://github.com/fbove", "followers_url": "https://api.github.com/users/fbove/followers", "following_url": "https://api.github.com/users/fbove/following{/other_user}", "gists_url": "https://api.github.com/users/fbove/gists{/gist_id}", "starred_url": "https://api.github.com/users/fbove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fbove/subscriptions", "organizations_url": "https://api.github.com/users/fbove/orgs", "repos_url": "https://api.github.com/users/fbove/repos", "events_url": "https://api.github.com/users/fbove/events{/privacy}", "received_events_url": "https://api.github.com/users/fbove/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-06T16:31:00Z", "updated_at": "2020-03-06T17:40:09Z", "closed_at": "2020-03-06T16:55:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any official django channels build published in conda?\r\n\r\nI've found [this one](https://anaconda.org/tethysplatform/django-channels) but I don't know if it's the official one.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1422", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1422/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1422/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1422/events", "html_url": "https://github.com/django/channels/issues/1422", "id": 575211844, "node_id": "MDU6SXNzdWU1NzUyMTE4NDQ=", "number": 1422, "title": "Ignored \"No such file or directory\" in consumers", "user": {"login": "apinsard", "id": 1536035, "node_id": "MDQ6VXNlcjE1MzYwMzU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1536035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinsard", "html_url": "https://github.com/apinsard", "followers_url": "https://api.github.com/users/apinsard/followers", "following_url": "https://api.github.com/users/apinsard/following{/other_user}", "gists_url": "https://api.github.com/users/apinsard/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinsard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinsard/subscriptions", "organizations_url": "https://api.github.com/users/apinsard/orgs", "repos_url": "https://api.github.com/users/apinsard/repos", "events_url": "https://api.github.com/users/apinsard/events{/privacy}", "received_events_url": "https://api.github.com/users/apinsard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-04T08:10:47Z", "updated_at": "2020-03-06T08:11:32Z", "closed_at": "2020-03-06T08:11:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Starting with this very simple working code sample:\r\n\r\n    from channels.generic.websocket import JsonWebsocketConsumer\r\n\r\n    class IsacomptaManagementFeesConsumer(JsonWebsocketConsumer):\r\n        pass\r\n\r\nWhen connecting to this websocket consumer from javascript, this works as expected. The connection is issued properly and I get the following logs:\r\n\r\n    WebSocket HANDSHAKING /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38108]\r\n    WebSocket CONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38108]\r\n    WebSocket DISCONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38108]\r\n\r\nNow, if I change my code to the following code, to use groups:\r\n\r\n\r\n    from channels.generic.websocket import JsonWebsocketConsumer\r\n\r\n    class IsacomptaManagementFeesConsumer(JsonWebsocketConsumer):\r\n        groups = ['foobar']\r\n\r\nThen, the connection fails. JavaScript console tells me:\r\n\r\n    Firefox can\u2019t establish a connection to the server at ws://antoine.cocoonr.hq:3001/manager/accounting/isacompta/2020/03/management-fees.ws.\r\n    error { target: WebSocket, isTrusted: true, srcElement: WebSocket, currentTarget: WebSocket, eventPhase: 2, bubbles: false, cancelable: false, defaultPrevented: false, composed: false, timeStamp: 7804, \u2026 }\r\n\r\nAnd the server logs look like this:\r\n\r\n    WebSocket HANDSHAKING /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38128]\r\n    WebSocket DISCONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38128]\r\n\r\nNo exception is raised on the server side though.\r\n\r\nI can also get a similar behavior without using groups. Let's take a bit bigger working code sample:\r\n\r\n    from channels.generic.websocket import JsonWebsocketConsumer\r\n\r\n    class IsacomptaManagementFeesConsumer(JsonWebsocketConsumer):\r\n\r\n        def connect(self):\r\n            print(\"one\")\r\n            self.accept()\r\n            print(\"two\")\r\n            self.send_json({'text': \"Foobar\"})\r\n            print(\"three\")\r\n\r\nThis code works fine, the connection is issued properly and here are the server logs:\r\n\r\n    WebSocket HANDSHAKING /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38168]\r\n    one\r\n    WebSocket CONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38168]\r\n    two\r\n    three\r\n    WebSocket DISCONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38168]\r\n\r\nBut if I make the following little change to my code:\r\n\r\n    from asgiref.sync import async_to_sync\r\n    from channels.generic.websocket import JsonWebsocketConsumer\r\n\r\n    class IsacomptaManagementFeesConsumer(JsonWebsocketConsumer):\r\n\r\n        def connect(self):\r\n            print(\"one\")\r\n            self.accept()\r\n            print(\"two\")\r\n            async_to_sync(self.channel_layer.send)(self.channel_name, {\r\n                'type': 'foobar.send',\r\n                'text': \"Foobar\",\r\n            })\r\n            print(\"three\")\r\n\r\n        def foobar_send(self, event):\r\n            print(\"AAA\")\r\n            self.send_json({'text': event['text'])\r\n            print(\"BBB\")\r\n\r\nThen, the connection is issued properly but is closed straight away and the process is stopped without having a chance to print \"three\", and the function \"foobar_send\" is not executed either.\r\n\r\n    WebSocket HANDSHAKING /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38224]                                                                                                                                                                             \r\n    one                                                                                                                                                                                                                                                                             \r\n    WebSocket CONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38224]                                                                                                                                                                                 \r\n    two                                                                                                                                                                                                                                                                             \r\n    WebSocket DISCONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:38224]\r\n\r\nI don't understand how come \"three\" is not printed while no exception is raised either. This means an exception is raised by `self.channel_layers.send()` and caught silently by the caller of `IsacomptaManagementFeesConsumer.connect()`? Let's give it a try:\r\n\r\n    import traceback\r\n\r\n    from asgiref.sync import async_to_sync\r\n    from channels.generic.websocket import JsonWebsocketConsumer\r\n\r\n    class IsacomptaManagementFeesConsumer(JsonWebsocketConsumer):\r\n\r\n        def connect(self):\r\n            print(\"one\")\r\n            self.accept()\r\n            print(\"two\")\r\n            try:\r\n                async_to_sync(self.channel_layer.send)(self.channel_name, {\r\n                    'type': 'foobar.send',\r\n                    'text': \"Foobar\",\r\n                })\r\n            except Exception as e:\r\n                print(e)\r\n                traceback.print_stack()\r\n            print(\"three\")\r\n\r\n        def foobar_send(self, event):\r\n            print(\"AAA\")\r\n            self.send_json({'text': event['text'])\r\n            print(\"BBB\")\r\n\r\nAnd that's it, there is a hidden \"file not found\" error:\r\n\r\n    WebSocket HANDSHAKING /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:42562]\r\n    one\r\n    WebSocket CONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:42562]\r\n    two\r\n    [Errno 2] No such file or directory\r\n      File \"/usr/lib64/python3.6/threading.py\", line 884, in _bootstrap\r\n        self._bootstrap_inner()\r\n      File \"/usr/lib64/python3.6/threading.py\", line 916, in _bootstrap_inner\r\n        self.run()\r\n      File \"/usr/lib64/python3.6/threading.py\", line 864, in run\r\n        self._target(*self._args, **self._kwargs)\r\n      File \"/usr/lib64/python3.6/concurrent/futures/thread.py\", line 69, in _worker\r\n        work_item.run()\r\n      File \"/usr/lib64/python3.6/concurrent/futures/thread.py\", line 56, in run\r\n        result = self.fn(*self.args, **self.kwargs)\r\n      File \"/home/tony/.venvs/cocoonr/lib/python3.6/site-packages/channels/db.py\", line 14, in thread_handler\r\n        return super().thread_handler(loop, *args, **kwargs)\r\n      File \"/home/tony/.venvs/cocoonr/lib/python3.6/site-packages/asgiref/sync.py\", line 277, in thread_handler\r\n        return func(*args, **kwargs)\r\n      File \"/home/tony/.venvs/cocoonr/lib/python3.6/site-packages/channels/consumer.py\", line 105, in dispatch\r\n        handler(message)\r\n      File \"/home/tony/.venvs/cocoonr/lib/python3.6/site-packages/channels/generic/websocket.py\", line 39, in websocket_connect\r\n        self.connect()\r\n      File \"/home/tony/Workspace/cocoonr/billing/consumers.py\", line 32, in connect\r\n        traceback.print_stack()\r\n    three\r\n    WebSocket DISCONNECT /manager/accounting/isacompta/2020/03/management-fees.ws [192.168.96.1:42562]\r\n\r\nSo, to me there are two issues:\r\n\r\n1. The error should not be silently ignored\r\n2. What is this error? Some missing socket? How do I fix it? Should there be a more explicit error message than \"No such file or directory\"?\r\n\r\nHere is my `CHANNEL_LAYERS` setting:\r\n\r\n     CHANNEL_LAYERS = {                                                                                                                                                          \r\n         'default': {                                                                                                                                                                                                                                                         \r\n             'BACKEND': 'channels_redis.core.RedisChannelLayer',                                                                                                                                                                                                                \r\n             'CONFIG': {                                                                                                                                                                                                                                                       \r\n                 'hosts': [                                                                                                                                                                                                                                            \r\n                     {                                                                                                                                                                                                                                                 \r\n                         'address': get_env('CHANNELS_REDIS_HOST',                                                                                                                                                                                          \r\n                                            default='localhost:6379'),                                                                                                                                                                             \r\n                         'password': get_env('CHANNELS_REDIS_PASSWORD',                                                                                                                                                                             \r\n                                             default=None),                                                                                                                                                                                          \r\n                         'db': 1,            \r\n                     },                                                                                                                                  \r\n                 ],                                                                                                                                   \r\n             },                                                                                                                                                        \r\n         },                                                                                                                                                        \r\n     } \r\n\r\nAnd my `pip freeze`:\r\n\r\n```\r\naioredis==1.3.1\r\namqp==2.5.2  \r\narrow==0.14.7\r\nasgiref==3.2.3             \r\nasync-timeout==3.0.1 \r\nattrs==19.3.0\r\nautobahn==19.11.1     \r\nAutomat==0.8.0   \r\nbackcall==0.1.0\r\nbilliard==3.6.1.0    \r\nboto3==1.10.35    \r\nbotocore==1.13.35\r\ncachetools==3.1.1\r\ncelery==4.3.0  \r\ncertifi==2019.11.28\r\ncffi==1.13.2     \r\nchannels==2.4.0       \r\nchannels-redis==2.4.2\r\nchardet==3.0.4\r\nconstantly==15.1.0\r\ncryptography==2.8\r\ndaphne==2.4.1\r\ndecorator==4.4.1\r\nDjango==3.0\r\ndjango-autocomplete-light==3.5.0\r\n-e git+https://github.com/rystan/django-bitfield.git@77b6cd9b88a66665aeeeea11a826e05c4420e79e#egg=django_bitfield\r\ndjango-crispy-forms==1.8.1\r\ndjango-debug-toolbar==2.1\r\ndjango-elasticsearch-dsl==7.1.1\r\ndjango-filter==2.2.0\r\ndjango-impersonate==1.4.1\r\ndjango-leaflet==0.26.0\r\n-e git+https://gitlab.com/cocoonr/django-libphon.git@6ac3bcf425e5f8759c4cb50153aa27c85c13982c#egg=django_libphon\r\n-e git+https://gitlab.com/cocoonr/django-mailing.git@680dc832bc864645e5600dfd0417ffd80147fae1#egg=django_mailing_campaign\r\ndjango-modeltranslation==0.14.1\r\ndjango-redis==4.11.0\r\ndjango-redis-cache==2.1.0\r\ndjango-starfield==1.0.post1\r\ndjango-storages==1.8\r\ndocutils==0.15.2\r\nelasticsearch==7.1.0\r\nelasticsearch-dsl==7.1.0\r\nentrypoints==0.3     \r\nflake8==3.7.9                                                \r\ngoogle-api-python-client==1.7.11\r\ngoogle-auth==1.8.1\r\ngoogle-auth-httplib2==0.0.3\r\ngunicorn==20.0.4\r\nhiredis==1.0.1\r\nhttplib2==0.14.0\r\nhyperlink==19.0.0\r\nics==0.6\r\nidna==2.8\r\nimportlib-metadata==1.2.0\r\nincremental==17.5.0\r\nipython==7.11.1\r\nipython-genutils==0.2.0\r\njedi==0.15.1\r\njmespath==0.9.4\r\nkombu==4.6.7\r\nlxml==4.4.2\r\nmarkdown2==2.3.8\r\nmccabe==0.6.1\r\nmore-itertools==8.0.2\r\nmsgpack==0.6.2\r\nparso==0.5.1\r\npexpect==4.7.0\r\npickleshare==0.7.5\r\npiexif==1.1.3                   \r\nPillow==6.2.1                                                                                                    \r\npipedrive-python-lib==1.1.1\r\nprompt-toolkit==3.0.2    \r\npsutil==5.6.7                  \r\npsycopg2-binary==2.8.4\r\nptyprocess==0.6.0        \r\npyasn1==0.4.8         \r\npyasn1-modules==0.2.7                                                                                           \r\npycodestyle==2.5.0                                                                                                       \r\npycparser==2.19                \r\npyflakes==2.1.1     \r\nPygments==2.5.2          \r\nPyHamcrest==1.9.0          \r\npyOpenSSL==19.1.0   \r\npython-dateutil==2.8.0\r\npytz==2019.3        \r\npyxdg==0.26             \r\nPyYAML==5.2          \r\nraven==6.10.0                                                \r\nredis==3.3.11                   \r\nrequests==2.22.0  \r\nrsa==4.0                   \r\ns3transfer==0.2.1\r\nsentry-sdk==0.13.5\r\nservice-identity==18.1.0\r\nsix==1.13.0      \r\nsqlparse==0.3.0\r\nstripe==2.41.0\r\nTatSu==4.4.0             \r\ntraitlets==4.3.3   \r\nTwisted==19.10.0\r\ntxaio==18.8.1          \r\nUnipath==1.1\r\nuritemplate==3.0.0\r\nurllib3==1.25.7\r\nvine==1.3.0\r\nwcwidth==0.1.7  \r\nwlc==1.2     \r\nxlrd==1.2.0          \r\nzipp==0.6.0   \r\nzope.interface==4.7.1\r\n```\r\n\r\nRunning Channels with runserver.\r\n\r\nRedis: 4.0.6\r\nPython: 3.6", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1417", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1417/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1417/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1417/events", "html_url": "https://github.com/django/channels/issues/1417", "id": 571213204, "node_id": "MDU6SXNzdWU1NzEyMTMyMDQ=", "number": 1417, "title": "increase in users and data load - ", "user": {"login": "leventengin", "id": 11796633, "node_id": "MDQ6VXNlcjExNzk2NjMz", "avatar_url": "https://avatars2.githubusercontent.com/u/11796633?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leventengin", "html_url": "https://github.com/leventengin", "followers_url": "https://api.github.com/users/leventengin/followers", "following_url": "https://api.github.com/users/leventengin/following{/other_user}", "gists_url": "https://api.github.com/users/leventengin/gists{/gist_id}", "starred_url": "https://api.github.com/users/leventengin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leventengin/subscriptions", "organizations_url": "https://api.github.com/users/leventengin/orgs", "repos_url": "https://api.github.com/users/leventengin/repos", "events_url": "https://api.github.com/users/leventengin/events{/privacy}", "received_events_url": "https://api.github.com/users/leventengin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-26T10:06:13Z", "updated_at": "2020-07-13T17:19:51Z", "closed_at": "2020-07-13T17:19:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\nI send this question here since it requires a support for design of performance.  \r\n\r\nThe  Channels2   system that we are using is for connecting  couriers to their working  customers.   This is planned to be a large system using Channels2, which is in pilot phase now.\r\n\r\nWhen a  courier is connected to  channels we create a a database filed to keep the user_name and channel_name and when disconnected to delete.   We do the same for customers but customers might be connected from many browsers and mobile devices (more than one connection).  So we send the data ( ws message containing location) coming from couriers  to the actual customer connections in a while loop  using  \"channel_layer.send\"  -  one for each .\r\n\r\nI have two questions:\r\n1.  Is the sending method used convenient, or should i change it to create a group for customers by  user name and use group_send   to them.  Which one is better technically?  I see that sometimes channel fails (can be wifi - internet failure ) but  systems does not close and it persist as data in database so the system tries to send data to non existing channel.  Is there a mechanism to check if that channel exists  at the moment?\r\n2. This is planned to be a large system   which will contain 3-4 thousand couriers and hundreds of customers (with more than one connections).   Which tools should we use as data load increases?   Is there a documentation for that?\r\n\r\nWe use:\r\nchannels==2.3.1\r\nchannels-redis==2.4.1\r\nDjango==2.2.4\r\nPython 3.6.9\r\nnginx/1.16.1\r\ndaphne==2.4.0\r\n\r\nBR \r\nLevent ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1411", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1411/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1411/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1411/events", "html_url": "https://github.com/django/channels/issues/1411", "id": 566798731, "node_id": "MDU6SXNzdWU1NjY3OTg3MzE=", "number": 1411, "title": "sync_to_async for converting generators to async generators", "user": {"login": "devxpy", "id": 19492893, "node_id": "MDQ6VXNlcjE5NDkyODkz", "avatar_url": "https://avatars1.githubusercontent.com/u/19492893?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devxpy", "html_url": "https://github.com/devxpy", "followers_url": "https://api.github.com/users/devxpy/followers", "following_url": "https://api.github.com/users/devxpy/following{/other_user}", "gists_url": "https://api.github.com/users/devxpy/gists{/gist_id}", "starred_url": "https://api.github.com/users/devxpy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devxpy/subscriptions", "organizations_url": "https://api.github.com/users/devxpy/orgs", "repos_url": "https://api.github.com/users/devxpy/repos", "events_url": "https://api.github.com/users/devxpy/events{/privacy}", "received_events_url": "https://api.github.com/users/devxpy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-18T10:35:20Z", "updated_at": "2020-02-18T10:42:52Z", "closed_at": "2020-02-18T10:42:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, thanks for the amazing `sync_to_async` (and converse) functions, making everyone's life easier as a python developer :)\r\n\r\nJust proposing a small update to `sync_to_async` (and `database_sync_to_async` too, I guess)\r\nthat makes it work with generators -\r\n\r\n\r\n## Current situation\r\n\r\nRunning this -\r\n\r\n```python\r\nimport asyncio\r\nfrom time import sleep\r\n\r\nfrom asgiref.sync import sync_to_async\r\n\r\n\r\n@sync_to_async\r\ndef gen():\r\n    for i in range(10):\r\n        sleep(1)\r\n        yield i\r\n\r\n\r\nasync def main():\r\n    async for i in gen():\r\n        print(i)\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nThrows -\r\n\r\n```/Users/dev/Projects/dara/server/test.py:15: RuntimeWarning: coroutine 'SyncToAsync.__call__' was never awaited\r\n  async for i in gen():\r\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\r\nTraceback (most recent call last):\r\n  File \"./manage.py\", line 21, in <module>\r\n    main()\r\n  File \"./manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django/core/management/__init__.py\", line 395, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django_extensions/management/email_notifications.py\", line 65, in run_from_argv\r\n    super(EmailNotificationCommand, self).run_from_argv(argv)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django/core/management/base.py\", line 328, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django_extensions/management/email_notifications.py\", line 77, in execute\r\n    super(EmailNotificationCommand, self).execute(*args, **options)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django/core/management/base.py\", line 369, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django_extensions/management/utils.py\", line 62, in inner\r\n    ret = func(self, *args, **kwargs)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django_extensions/management/commands/runscript.py\", line 233, in handle\r\n    modules = find_modules_for_script(script)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django_extensions/management/commands/runscript.py\", line 216, in find_modules_for_script\r\n    mod = my_import(parent, mod_name)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/site-packages/django_extensions/management/commands/runscript.py\", line 169, in my_import\r\n    importlib.import_module(parent_package)\r\n  File \"/Users/dev/.virtualenvs/server-99338def/lib/python3.8/importlib/__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"/Users/dev/Projects/dara/server/test.py\", line 19, in <module>\r\n    asyncio.run(main())\r\n  File \"/Users/dev/.pyenv/versions/3.8.1/lib/python3.8/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/Users/dev/.pyenv/versions/3.8.1/lib/python3.8/asyncio/base_events.py\", line 612, in run_until_complete\r\n    return future.result()\r\n  File \"/Users/dev/Projects/dara/server/test.py\", line 15, in main\r\n    async for i in gen():\r\nTypeError: 'async for' requires an object with __aiter__ method, got coroutine\r\n```\r\n\r\n## Proposed solution -\r\n\r\nThis seems to make the proposed example work.\r\n\r\n```python\r\nimport inspect\r\nfrom functools import wraps\r\n\r\nfrom asgiref.sync import sync_to_async as _sync_to_async\r\n\r\n\r\ndef sync_to_async(sync_fn):\r\n    is_gen = inspect.isgeneratorfunction(sync_fn)\r\n    async_fn = _sync_to_async(sync_fn)\r\n\r\n    if is_gen:\r\n\r\n        @wraps(sync_fn)\r\n        async def wrapper(*args, **kwargs):\r\n            sync_iterable = await async_fn(*args, **kwargs)\r\n            sync_iterator = await iter_async(sync_iterable)\r\n\r\n            while True:\r\n                try:\r\n                    yield await next_async(sync_iterator)\r\n                except StopAsyncIteration:\r\n                    return\r\n\r\n    else:\r\n\r\n        @wraps(sync_fn)\r\n        async def wrapper(*args, **kwargs):\r\n            return await async_fn(*args, **kwargs)\r\n\r\n    return wrapper\r\n\r\n\r\niter_async = sync_to_async(iter)\r\n\r\n\r\n@sync_to_async\r\ndef next_async(it):\r\n    try:\r\n        return next(it)\r\n    except StopIteration:\r\n        raise StopAsyncIteration\r\n```\r\n\r\nThis also does adds `functools.wrap()`, which is always nice to have.\r\n\r\nSorry if this is too hacky and unsuitable for this repo, but I think it's a great addition to this great function.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1410", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1410/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1410/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1410/events", "html_url": "https://github.com/django/channels/issues/1410", "id": 563153906, "node_id": "MDU6SXNzdWU1NjMxNTM5MDY=", "number": 1410, "title": "What configuration does redis need to do when using channels\uff1f", "user": {"login": "pppigg", "id": 44393853, "node_id": "MDQ6VXNlcjQ0MzkzODUz", "avatar_url": "https://avatars2.githubusercontent.com/u/44393853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pppigg", "html_url": "https://github.com/pppigg", "followers_url": "https://api.github.com/users/pppigg/followers", "following_url": "https://api.github.com/users/pppigg/following{/other_user}", "gists_url": "https://api.github.com/users/pppigg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pppigg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pppigg/subscriptions", "organizations_url": "https://api.github.com/users/pppigg/orgs", "repos_url": "https://api.github.com/users/pppigg/repos", "events_url": "https://api.github.com/users/pppigg/events{/privacy}", "received_events_url": "https://api.github.com/users/pppigg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-11T11:47:55Z", "updated_at": "2020-02-11T18:10:22Z", "closed_at": "2020-02-11T18:10:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "When my project starts or when I connect to websocket, the following message is printed and the connection disconnects.\r\n\r\n`Exception inside application: MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error.\r\n`\r\n\r\nThe following information appears when running on both different environments.\r\n\r\nThe environment\uff1a\r\n`channels            2.4.0              \r\nchannels-redis      2.4.1                       \r\ndaphne              2.4.1              \r\ndecorator           4.4.1              \r\nDjango              3.0.3              \r\ndjango-cors-headers 3.2.1              \r\ndjangorestframework 3.11.0  `\r\n\r\n`channels            2.2.0              \r\nchannels-redis      2.4.0                         \r\ndaphne              2.3.0              \r\nDjango              2.2.5              \r\ndjango-cors-headers 3.1.0                       \r\ndjangorestframework 3.10.3 \r\n`\r\nWhether redis needs to change the configuration?\r\nLooking forward to your reply.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1409", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1409/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1409/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1409/events", "html_url": "https://github.com/django/channels/issues/1409", "id": 560869105, "node_id": "MDU6SXNzdWU1NjA4NjkxMDU=", "number": 1409, "title": "Django 3 and database_sync_to_async", "user": {"login": "waqasraz", "id": 1761304, "node_id": "MDQ6VXNlcjE3NjEzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1761304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waqasraz", "html_url": "https://github.com/waqasraz", "followers_url": "https://api.github.com/users/waqasraz/followers", "following_url": "https://api.github.com/users/waqasraz/following{/other_user}", "gists_url": "https://api.github.com/users/waqasraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/waqasraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waqasraz/subscriptions", "organizations_url": "https://api.github.com/users/waqasraz/orgs", "repos_url": "https://api.github.com/users/waqasraz/repos", "events_url": "https://api.github.com/users/waqasraz/events{/privacy}", "received_events_url": "https://api.github.com/users/waqasraz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-02-06T09:02:45Z", "updated_at": "2020-02-11T18:13:24Z", "closed_at": "2020-02-11T18:13:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having an issue with Django 3 and channels 2.4.0.\r\n\r\nwhen I call database_sync_to_async I get this\r\n\r\n```\r\nError\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/unittest/mock.py\", line 1255, in patched\r\n    return func(*args, **keywargs)\r\n  File \"/home/waqas/PycharmProjects/nethub/apps/apis/tests/test_models/test_models.py\", line 98, in test_process_module\r\n    output = async_to_sync(self.module_1.process_module)(output_fetcher, requested_data)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/asgiref/sync.py\", line 116, in __call__\r\n    return call_result.result()\r\n  File \"/usr/lib/python3.7/concurrent/futures/_base.py\", line 428, in result\r\n    return self.__get_result()\r\n  File \"/usr/lib/python3.7/concurrent/futures/_base.py\", line 384, in __get_result\r\n    raise self._exception\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/asgiref/sync.py\", line 156, in main_wrap\r\n    result = await self.awaitable(*args, **kwargs)\r\n  File \"/home/waqas/PycharmProjects/nethub/apps/apis/models.py\", line 135, in process_module\r\n    required_keys = {item.key_name: item.text_fms_field_name for item in keys_data}\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/models/query.py\", line 276, in __iter__\r\n    self._fetch_all()\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/models/query.py\", line 1261, in _fetch_all\r\n    self._result_cache = list(self._iterable_class(self))\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/models/query.py\", line 57, in __iter__\r\n    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/models/sql/compiler.py\", line 1142, in execute_sql\r\n    cursor = self.connection.cursor()\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/utils/asyncio.py\", line 24, in inner\r\n    raise SynchronousOnlyOperation(message)\r\ndjango.core.exceptions.SynchronousOnlyOperation: You cannot call this from an async context - use a thread or sync_to_async.\r\n```\r\nIf is set \r\n\r\n```\r\nos.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\r\n```\r\n\r\nI don't get the above error but then I get this after few seconds. Looks like thread keeps running.\r\n\r\n```\r\n\r\nDestroying test database for alias 'default'...\r\nTraceback (most recent call last):\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql)\r\npsycopg2.errors.ObjectInUse: database \"test_nethub\" is being accessed by other users\r\nDETAIL:  There is 1 other session using the database.\r\n\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/waqas/.local/share/JetBrains/Toolbox/apps/PyCharm-P/ch-0/193.6015.41/plugins/python/helpers/pycharm/django_test_manage.py\", line 168, in <module>\r\n    utility.execute()\r\n  File \"/home/waqas/.local/share/JetBrains/Toolbox/apps/PyCharm-P/ch-0/193.6015.41/plugins/python/helpers/pycharm/django_test_manage.py\", line 142, in execute\r\n    _create_command().run_from_argv(self.argv)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/core/management/commands/test.py\", line 23, in run_from_argv\r\n    super().run_from_argv(argv)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/core/management/base.py\", line 328, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/core/management/base.py\", line 369, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/home/waqas/.local/share/JetBrains/Toolbox/apps/PyCharm-P/ch-0/193.6015.41/plugins/python/helpers/pycharm/django_test_manage.py\", line 104, in handle\r\n    failures = TestRunner(test_labels, **options)\r\n  File \"/home/waqas/.local/share/JetBrains/Toolbox/apps/PyCharm-P/ch-0/193.6015.41/plugins/python/helpers/pycharm/django_test_runner.py\", line 255, in run_tests\r\n    extra_tests=extra_tests, **options)\r\n  File \"/home/waqas/.local/share/JetBrains/Toolbox/apps/PyCharm-P/ch-0/193.6015.41/plugins/python/helpers/pycharm/django_test_runner.py\", line 156, in run_tests\r\n    return super(DjangoTeamcityTestRunner, self).run_tests(test_labels, extra_tests, **kwargs)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/test/runner.py\", line 694, in run_tests\r\n    self.teardown_databases(old_config)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/test/runner.py\", line 638, in teardown_databases\r\n    keepdb=self.keepdb,\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/test/utils.py\", line 297, in teardown_databases\r\n    connection.creation.destroy_test_db(old_name, verbosity, keepdb)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/base/creation.py\", line 259, in destroy_test_db\r\n    self._destroy_test_db(test_database_name, verbosity)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/base/creation.py\", line 276, in _destroy_test_db\r\n    % self.connection.ops.quote_name(test_database_name))\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/utils.py\", line 68, in execute\r\n    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/utils.py\", line 77, in _execute_with_wrappers\r\n    return executor(sql, params, many, context)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/utils.py\", line 86, in _execute\r\n    return self.cursor.execute(sql, params)\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/utils.py\", line 90, in __exit__\r\n    raise dj_exc_value.with_traceback(traceback) from exc_value\r\n  File \"/home/waqas/.venv/nethub/lib/python3.7/site-packages/django/db/backends/utils.py\", line 84, in _execute\r\n    return self.cursor.execute(sql)\r\ndjango.db.utils.OperationalError: database \"test_nethub\" is being accessed by other users\r\nDETAIL:  There is 1 other session using the database.\r\n````\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1408", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1408/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1408/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1408/events", "html_url": "https://github.com/django/channels/issues/1408", "id": 560532527, "node_id": "MDU6SXNzdWU1NjA1MzI1Mjc=", "number": 1408, "title": "TypeError: view must be a callable or a list/tuple in the case of include().", "user": {"login": "AndreyCh1989", "id": 47121546, "node_id": "MDQ6VXNlcjQ3MTIxNTQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/47121546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreyCh1989", "html_url": "https://github.com/AndreyCh1989", "followers_url": "https://api.github.com/users/AndreyCh1989/followers", "following_url": "https://api.github.com/users/AndreyCh1989/following{/other_user}", "gists_url": "https://api.github.com/users/AndreyCh1989/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreyCh1989/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreyCh1989/subscriptions", "organizations_url": "https://api.github.com/users/AndreyCh1989/orgs", "repos_url": "https://api.github.com/users/AndreyCh1989/repos", "events_url": "https://api.github.com/users/AndreyCh1989/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreyCh1989/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-05T17:51:02Z", "updated_at": "2020-06-13T21:31:40Z", "closed_at": "2020-02-09T20:37:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Don't understand what I'm doing wrong, all steps look as in the tutorial but getting such error\r\n``` \r\nFile \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"C:\\Termo\\termo\\routing.py\", line 7, in <module>\r\n    re_path(r\"^ws/current/$\", CurrentConsumer),\r\n  File \"C:\\Termo\\Env\\lib\\site-packages\\django\\urls\\conf.py\", line 73, in _path\r\n    raise TypeError('view must be a callable or a list/tuple in the case of include().')\r\nTypeError: view must be a callable or a list/tuple in the case of include().\r\n```\r\n```\r\nclass CurrentConsumer(AsyncWebsocketConsumer):\r\n    groups = [\"termo\"]\r\n\r\n    async def connect(self):\r\n        # Called on connection.\r\n        # To accept the connection call:\r\n        await self.accept()\r\n        # Or accept the connection and specify a chosen subprotocol.\r\n        # A list of subprotocols specified by the connecting client\r\n        # will be available in self.scope['subprotocols']\r\n        await self.accept(\"subprotocol\")\r\n        # To reject the connection, call:\r\n        await self.close()\r\n\r\n    async def receive(self, text_data=None, bytes_data=None):\r\n        # Called with either text_data or bytes_data for each frame\r\n        # You can call:\r\n        await self.send(text_data=\"Hello world!\")\r\n        # Or, to send a binary frame:\r\n        await self.send(bytes_data=\"Hello world!\")\r\n        # Want to force-close the connection? Call:\r\n        await self.close()\r\n        # Or add a custom WebSocket error code!\r\n        await self.close(code=4123)\r\n\r\n    async def disconnect(self, close_code):\r\n        # Called when the socket closes\r\n        pass\r\n```\r\n\r\n```\r\nwebsockets = URLRouter([\r\n    url(r\"^ws/current/$\", CurrentConsumer, name=\"current\"),\r\n])\r\n\r\napplication = ProtocolTypeRouter({\r\n    \"websocket\": websockets,\r\n})\r\n```\r\n\r\n```\r\naioredis==1.3.1\r\nasgiref==3.2.3\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==20.1.3\r\nAutomat==0.8.0\r\ncffi==1.13.2\r\nchannels==2.4.0\r\nchannels-redis==2.4.1\r\nconstantly==15.1.0\r\ncryptography==2.8\r\ndaphne==2.4.1\r\nDjango==3.0.2\r\ndjango-webpack-loader==0.6.0\r\nhiredis==1.0.1\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\nmsgpack==0.6.2\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycparser==2.19\r\nPyHamcrest==2.0.0\r\npyOpenSSL==19.1.0\r\npytz==2019.3\r\nservice-identity==18.1.0\r\nsix==1.14.0\r\nsqlparse==0.3.0\r\nTwisted==19.10.0\r\ntxaio==20.1.1\r\nzope.interface==4.7.1\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1406", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1406/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1406/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1406/events", "html_url": "https://github.com/django/channels/issues/1406", "id": 554977688, "node_id": "MDU6SXNzdWU1NTQ5Nzc2ODg=", "number": 1406, "title": "Strange errors using Channels with daphne or Uvicorn on Kubernetes", "user": {"login": "oesah", "id": 4014723, "node_id": "MDQ6VXNlcjQwMTQ3MjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/4014723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oesah", "html_url": "https://github.com/oesah", "followers_url": "https://api.github.com/users/oesah/followers", "following_url": "https://api.github.com/users/oesah/following{/other_user}", "gists_url": "https://api.github.com/users/oesah/gists{/gist_id}", "starred_url": "https://api.github.com/users/oesah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oesah/subscriptions", "organizations_url": "https://api.github.com/users/oesah/orgs", "repos_url": "https://api.github.com/users/oesah/repos", "events_url": "https://api.github.com/users/oesah/events{/privacy}", "received_events_url": "https://api.github.com/users/oesah/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-24T22:07:46Z", "updated_at": "2020-01-25T15:05:10Z", "closed_at": "2020-01-25T15:05:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "In a nutshell: I cannot get Channels2 working on my Kubernetes Cluster, Channels1 works fine though. Because my issues happen with either daphne or uvicorn, I thought this might be the right place to open the ticket. I have no idea where the problem occurs exactly.\r\n\r\n\r\n### What you expected to happen vs. what actually happened\r\n\r\nSo I have this very strange bug, that happens on all browsers, but in a different way, when I try to get Websockets with Channels working. I have an older setup with channels 1.x which works perfectly fine. Just when I try to upgrade to 2.x, I get these strange errors.\r\n\r\nI tried with daphne and uvicorn. The core errors I get in the browser is, depending on whether uvicorn or daphne is used, are: \r\n\r\n**Daphne**\r\n`ERR_CONNECTION_CLOSED 200`: This happens, after the page is loaded and the HTML is shown properly, the loading spinner of chrome just keeps spinning. After 10-20 seconds, it return this error. Websocket connection was not established. Strangely, in Firefox it keeps loading for a long time, then it makes the ajax requests and websocket connection.\r\n\r\n`ERR_HTTP_PROTOCOL_ERROR`: This also happens in some scenarios, although the page is rendered fine.\r\n\r\n**uvicorn**\r\n`ERR_HTTP2_PROTOCOL_ERROR`: When I use uvicorn, firefox works perfectly fine, although in the logs I get the following error message `Response content shorter than Content-Length` for every request I make.\r\n\r\nChrome however, loads the request, but the page remains empty. When I look into the html if the page rendered, the `<body>` tag is completely missing, although `<html>` and `<head>` are rendered. \r\n\r\nIn both cases, when I try to establish a websocket connection of console or terminal, it works fine. Rendering the page seems to be breaking for some reason.\r\n\r\n### How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\n- Application runs inside docker container on AWS with EKS Kubernetes Cluster\r\n- I am using supervisord to start the application, although I also tried without it, same results\r\n\r\n**supervisord config:**\r\n\r\n```\r\n[supervisord]\r\nnodaemon=true\r\nlogfile=/app/supervisor.log\r\npidfile=/app/supervisor.pid\r\n\r\n[program:daphne]\r\ncommand=/usr/local/bin/daphne --proxy-headers config.asgi:application -p 5000 -b 0.0.0.0\r\nstderr_logfile=/dev/fd/1\r\nstderr_logfile_maxbytes=0\r\nstdout_logfile=/dev/fd/1\r\nstdout_logfile_maxbytes=0\r\n\r\nredirect_stderr=true\r\n\r\nnumprocs=1\r\n# Give each process a unique name so they can be told apart\r\nprocess_name=asgi%(process_num)d\r\n\r\n# Automatically start and recover processes\r\nautostart=true\r\nautorestart=true\r\n```\r\n\r\nI also tried a lot of different commands to start Django, here are a few examples, which are by far not all I tried:\r\n```\r\n/usr/local/bin/daphne config.asgi:application -p 5000 -b 0.0.0.0\r\n/usr/local/bin/uvicorn config.asgi:application --port 5000 --host 0.0.0.0\r\n/usr/local/bin/gunicorn -k uvicorn.workers.UvicornWorker config.asgi:application -b 0.0.0.0:5000\r\n```\r\nFor Daphne I don't have any exceptions showing in the logs, but for uvicorn I get the following exception: https://github.com/encode/uvicorn/blob/master/uvicorn/protocols/http/httptools_impl.py#L515\r\n\r\n```\r\n[2020-01-24 23:05:24 +0100] [10] [ERROR] Exception in ASGI application\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 385, in run_asgi\r\n    result = await app(self.scope, self.receive, self.send)\r\n  File \"/usr/local/lib/python3.6/site-packages/uvicorn/middleware/proxy_headers.py\", line 45, in __call__\r\n    return await self.app(scope, receive, send)\r\n  File \"/usr/local/lib/python3.6/site-packages/uvicorn/middleware/asgi2.py\", line 7, in __call__\r\n    await instance(receive, send)\r\n  File \"/usr/local/lib/python3.6/site-packages/channels/http.py\", line 192, in __call__\r\n    await self.handle(body_stream)\r\n  File \"/usr/local/lib/python3.6/site-packages/asgiref/sync.py\", line 244, in __call__\r\n    return await asyncio.wait_for(future, timeout=None)\r\n  File \"/usr/local/lib/python3.6/asyncio/tasks.py\", line 339, in wait_for\r\n    return (yield from fut)\r\n  File \"/usr/local/lib/python3.6/concurrent/futures/thread.py\", line 56, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/asgiref/sync.py\", line 277, in thread_handler\r\n    return func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/channels/http.py\", line 250, in handle\r\n    self.send(response_message)\r\n  File \"/usr/local/lib/python3.6/site-packages/asgiref/sync.py\", line 116, in __call__\r\n    return call_result.result()\r\n  File \"/usr/local/lib/python3.6/concurrent/futures/_base.py\", line 425, in result\r\n    return self.__get_result()\r\n  File \"/usr/local/lib/python3.6/concurrent/futures/_base.py\", line 384, in __get_result\r\n    raise self._exception\r\n  File \"/usr/local/lib/python3.6/site-packages/asgiref/sync.py\", line 156, in main_wrap\r\n    result = await self.awaitable(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 515, in send\r\n    raise RuntimeError(\"Response content shorter than Content-Length\")\r\nRuntimeError: Response content shorter than Content-Length\r\n```\r\n\r\nI also tried different version of the consumer from the official channels tutorials, but that does not seem to have an effect since establishing a websocket connection and communicating through that works.\r\n\r\nIn addition, I tried many different variations of the libraries needed, like `asgiref`, `channels`, `channels-redis`, etc.\r\n\r\n### Your OS and runtime environment, and browser if applicable\r\n- Kubernetes 1.14\r\n- Python 3.6 (docker image)\r\n- Chrome, Firefox, Safari\r\n\r\n**Pip freeze**\r\n```\r\naioredis==1.3.1\r\naldryn-apphooks-config==0.5.3\r\naldryn-boilerplates==0.8.0\r\naldryn-bootstrap3==1.3.0\r\naldryn-common==1.0.5\r\naldryn-search==1.0.1\r\namqp==1.4.9\r\nanyjson==0.3.3\r\nargon2-cffi==16.3.0\r\nasgiref==3.2.3\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==20.1.3\r\nAutomat==0.8.0\r\nawesome-slugify==1.6.5\r\nbeautifulsoup4==4.6.0\r\nbexio-api-python-client==0.1.5\r\nbilliard==3.3.0.23\r\nboto3==1.10.7\r\nbotocore==1.13.50\r\nbraintree==3.58.0\r\ncelery==3.1.25\r\ncertifi==2019.11.28\r\ncffi==1.13.2\r\nchannels==2.3.1\r\nchannels-redis==2.4.1\r\nchardet==3.0.4\r\nClick==7.0\r\ncmsplugin-filer==1.1.3\r\nCollectfast==1.3.1\r\nconstantly==15.1.0\r\ncryptography==2.8\r\ndaphne==2.4.1\r\ndefusedxml==0.6.0\r\ndiff-match-patch==20181111\r\nDjango==1.11.27\r\ndjango-allauth==0.40.0\r\ndjango-anymail==0.10\r\ndjango-appconf==1.0.3\r\ndjango-appdata==0.2.2\r\ndjango-autoslug==1.9.3\r\ndjango-bootstrap-pagination==1.6.2\r\ndjango-braces==1.11.0\r\ndjango-celery==3.2.1\r\ndjango-celery-email==1.1.5\r\ndjango-ckeditor-filebrowser-filer==0.2.3\r\ndjango-classy-tags==1.0.0\r\ndjango-cms==3.4.5\r\ndjango-compressor==2.3\r\ndjango-crispy-forms==1.6.1\r\ndjango-environ==0.4.3\r\ndjango-filer==1.5.0\r\ndjango-filter==1.0.4\r\ndjango-formtools==2.1\r\ndjango-hashers-passlib==0.4\r\ndjango-haystack==2.8.2.dev86+g87bd4c1\r\ndjango-htmlmin==0.10.0\r\ndjango-import-export==0.5.1\r\ndjango-invitations==1.9.2\r\ndjango-ipware==2.1.0\r\ndjango-js-asset==1.2.2\r\ndjango-jsonview==1.0.0\r\ndjango-loginas==0.3.2\r\ndjango-mass-edit==3.0\r\ndjango-meta==1.6.1\r\ndjango-meta-mixin==0.3.0\r\ndjango-model-utils==3.0.0\r\ndjango-mptt==0.11.0\r\ndjango-parler==1.9.2\r\ndjango-payments==0.12.1\r\ndjango-polymorphic==1.3.1\r\ndjango-post-office==2.0.8\r\ndjango-ranged-response==0.2.0\r\ndjango-redis==4.8.0\r\ndjango-sekizai==1.1.0\r\ndjango-simple-captcha==0.5.12\r\ndjango-sortedm2m==3.0.0\r\ndjango-spurl==0.6.6\r\ndjango-standard-form==1.1.1\r\ndjango-storages==1.7.2\r\ndjango-taggit==0.23.0\r\ndjango-taggit-autosuggest==0.3.8\r\ndjango-taggit-templatetags==0.2.5\r\ndjango-templatetag-sugar==1.0\r\ndjango-treebeard==4.3.1\r\ndjangocms-admin-style==1.5.0\r\ndjangocms-apphook-setup==0.4.1\r\ndjangocms-attributes-field==1.2.0\r\ndjangocms-blog==0.9.11\r\ndjangocms-forms==0.2.5\r\ndjangocms-lightgallery==0.1.12\r\ndjangocms-slick-slider==0.6.0\r\ndjangocms-snippet==2.0.0\r\ndjangocms-text-ckeditor==3.5.0\r\ndjangocms-video==2.0.4\r\ndocutils==0.15.2\r\neasy-thumbnails==2.7\r\nelasticsearch==5.5.3\r\net-xmlfile==1.0.1\r\ngevent==1.2.2\r\ngooglemaps==2.5.1\r\ngreenlet==0.4.15\r\ngunicorn==19.10.0\r\nh11==0.9.0\r\nhashids==1.2.0\r\nhiredis==1.0.1\r\nhtml5lib==0.9999999\r\nhttptools==0.0.13\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\njdcal==1.4.1\r\njmespath==0.9.4\r\njsonfield==2.0.2\r\nkombu==3.0.37\r\nlxml==4.4.2\r\nmsgpack==0.6.2\r\noauthlib==3.1.0\r\nolefile==0.46\r\nopenpyxl==2.4.9\r\npasslib==1.7.2\r\nPillow==4.1.1\r\npsycopg2-binary==2.7.6.1\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.8\r\npycparser==2.19\r\nPyHamcrest==2.0.0\r\nPyJWT==1.7.1\r\npyOpenSSL==19.1.0\r\npython-dateutil==2.8.1\r\npython-wordpress-xmlrpc==2.3\r\npython3-openid==3.1.0\r\npytz==2017.2\r\nrcssmin==1.0.6\r\nredis==2.10.6\r\nregex==2020.1.8\r\nrequests==2.22.0\r\nrequests-aws4auth==0.9\r\nrequests-oauthlib==1.3.0\r\nrjsmin==1.1.0\r\ns3transfer==0.2.1\r\nsentry-sdk==0.14.1\r\nservice-identity==18.1.0\r\nshortuuid==0.5.0\r\nsix==1.14.0\r\nstripe==2.42.0\r\nsuds-jurko==0.6\r\ntablib==1.0.0\r\nTwisted==19.10.0\r\ntxaio==20.1.1\r\ntyping==3.7.4.1\r\ntyping-extensions==3.7.4.1\r\nunicodecsv==0.14.1\r\nUnidecode==0.4.21\r\nurllib3==1.25.8\r\nURLObject==2.4.3\r\nuvicorn==0.11.2\r\nuvloop==0.14.0\r\nwebsockets==8.1\r\nxmltodict==0.12.0\r\nYURL==1.0.0\r\nzope.interface==4.7.1\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1405", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1405/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1405/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1405/events", "html_url": "https://github.com/django/channels/issues/1405", "id": 552367576, "node_id": "MDU6SXNzdWU1NTIzNjc1NzY=", "number": 1405, "title": "Unable to connect Websocket ot AsyncSSH?", "user": {"login": "waqasraz", "id": 1761304, "node_id": "MDQ6VXNlcjE3NjEzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1761304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waqasraz", "html_url": "https://github.com/waqasraz", "followers_url": "https://api.github.com/users/waqasraz/followers", "following_url": "https://api.github.com/users/waqasraz/following{/other_user}", "gists_url": "https://api.github.com/users/waqasraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/waqasraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waqasraz/subscriptions", "organizations_url": "https://api.github.com/users/waqasraz/orgs", "repos_url": "https://api.github.com/users/waqasraz/repos", "events_url": "https://api.github.com/users/waqasraz/events{/privacy}", "received_events_url": "https://api.github.com/users/waqasraz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-20T15:26:10Z", "updated_at": "2020-01-20T15:35:59Z", "closed_at": "2020-01-20T15:35:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n[Failure instance: Traceback: <class 'TypeError'>: __call__() missing 2 required positional arguments: 'receive' and 'send'\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/autobahn/websocket/protocol.py:2821:processHandshake\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/txaio/tx.py:429:as_future\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/twisted/internet/defer.py:151:maybeDeferred\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/daphne/ws_protocol.py:83:onConnect\r\n--- <exception caught here> ---\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/twisted/internet/defer.py:151:maybeDeferred\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/daphne/server.py:201:create_application\r\n/home/waqas/.venv/abc/lib/python3.7/site-packages/channels/staticfiles.py:41:__call__\r\n]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1404", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1404/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1404/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1404/events", "html_url": "https://github.com/django/channels/issues/1404", "id": 552172314, "node_id": "MDU6SXNzdWU1NTIxNzIzMTQ=", "number": 1404, "title": "Setting SSLContext for wss (websocket secure) Channels consumer", "user": {"login": "MarcMueltin", "id": 4791110, "node_id": "MDQ6VXNlcjQ3OTExMTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4791110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MarcMueltin", "html_url": "https://github.com/MarcMueltin", "followers_url": "https://api.github.com/users/MarcMueltin/followers", "following_url": "https://api.github.com/users/MarcMueltin/following{/other_user}", "gists_url": "https://api.github.com/users/MarcMueltin/gists{/gist_id}", "starred_url": "https://api.github.com/users/MarcMueltin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MarcMueltin/subscriptions", "organizations_url": "https://api.github.com/users/MarcMueltin/orgs", "repos_url": "https://api.github.com/users/MarcMueltin/repos", "events_url": "https://api.github.com/users/MarcMueltin/events{/privacy}", "received_events_url": "https://api.github.com/users/MarcMueltin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-20T09:23:06Z", "updated_at": "2020-01-22T13:37:34Z", "closed_at": "2020-01-22T13:37:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to figure out how to set an SSLContext (https://docs.python.org/3.8/library/ssl.html#ssl.SSLContext) for the TLS server I'm trying to set up using Django Channels so that it accepts my websocket connections via the wss:// scheme.\r\n\r\nFor ws:// without TLS everything works perfectly. I use the websockets package on my client side to set up a connection to the server (which runs Channels as an ASGI server). But when I shift to wss:// and start running the client, then ... nothing happens for 60s, after which I get an error message stating: \"SSL handshake is taking longer than 60.0 seconds: aborting the connection\"\r\n\r\nMy Daphne server is running on localhost with standard port 8000.\r\n\r\n```\r\nStarting ASGI/Channels version 2.2.0 development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\nINFO - 2019-11-15 14:12:14,094 - django-main-thread - daphne.server[110] - HTTP/2 support not enabled (install the http2 and tls Twisted extras)\r\nINFO - 2019-11-15 14:12:14,094 - django-main-thread - daphne.server[119] - Configuring endpoint tcp:port=8000:interface=127.0.0.1\r\nINFO - 2019-11-15 14:12:14,095 - django-main-thread - daphne.server[150] - Listening on TCP address 127.0.0.1:8000\r\n```\r\n\r\nThe client-side connection is established like this (the ssl_context variable was set properly before):\r\n\r\n```\r\nasync with websockets.client.connect(\r\n                uri=url,\r\n                extra_headers=header,\r\n                subprotocols=['ocpp2.0'],\r\n                ssl=ssl_context) as websocket:\r\n            global ws\r\n            ws = websocket\r\n            await asyncio.gather(on_open(websocket), on_message(websocket))\r\n```\r\n\r\nThe on_open() and on_message() methods handle the opening of the socket and parsing incoming messages, respectively.\r\n\r\nNow, I was actually expecting to be able to set an SSL context on the server side (using Channels) as well, but I haven't found one single example after many hours of research online. I need to set the SSL context to define which cipher suite and which elliptic curve to use, etc.\r\n\r\nIs there something fundamentally wrong in my approach that I haven't grasped yet?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1403", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1403/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1403/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1403/events", "html_url": "https://github.com/django/channels/issues/1403", "id": 551979053, "node_id": "MDU6SXNzdWU1NTE5NzkwNTM=", "number": 1403, "title": "Outdated Documentation in django Channels docs", "user": {"login": "E-RROR", "id": 42252572, "node_id": "MDQ6VXNlcjQyMjUyNTcy", "avatar_url": "https://avatars2.githubusercontent.com/u/42252572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/E-RROR", "html_url": "https://github.com/E-RROR", "followers_url": "https://api.github.com/users/E-RROR/followers", "following_url": "https://api.github.com/users/E-RROR/following{/other_user}", "gists_url": "https://api.github.com/users/E-RROR/gists{/gist_id}", "starred_url": "https://api.github.com/users/E-RROR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/E-RROR/subscriptions", "organizations_url": "https://api.github.com/users/E-RROR/orgs", "repos_url": "https://api.github.com/users/E-RROR/repos", "events_url": "https://api.github.com/users/E-RROR/events{/privacy}", "received_events_url": "https://api.github.com/users/E-RROR/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-19T20:25:10Z", "updated_at": "2020-01-20T15:48:06Z", "closed_at": "2020-01-20T15:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Guys, Im New To Channels and I Try to Learn from https://channels.readthedocs.io/ website\r\nbut i think the documentation is for Django 1 not Django 2 , 3 Because i do the All Setups and Works in documentation but actually is not work with django 2 and i alwaya i got error\r\n.\r\n.\r\nplease if channels team can .. update the default tutorial for django 2 and 3 to help guys like me\r\n.\r\n.\r\nThanks\r\n\r\n- run on OSX 10.13.4\r\n- all things correct\r\n- It Should Work Like Example but not\r\n- How you're running Channels ? ` RUNSERVER COMMAND`\r\n- Websockets not connected and closed\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1402", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1402/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1402/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1402/events", "html_url": "https://github.com/django/channels/issues/1402", "id": 551232216, "node_id": "MDU6SXNzdWU1NTEyMzIyMTY=", "number": 1402, "title": "Session Save Call for an AnonymousUser (AuthMiddlewareStack) Causes Orphan Sessions", "user": {"login": "thaxy", "id": 1968007, "node_id": "MDQ6VXNlcjE5NjgwMDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1968007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thaxy", "html_url": "https://github.com/thaxy", "followers_url": "https://api.github.com/users/thaxy/followers", "following_url": "https://api.github.com/users/thaxy/following{/other_user}", "gists_url": "https://api.github.com/users/thaxy/gists{/gist_id}", "starred_url": "https://api.github.com/users/thaxy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thaxy/subscriptions", "organizations_url": "https://api.github.com/users/thaxy/orgs", "repos_url": "https://api.github.com/users/thaxy/repos", "events_url": "https://api.github.com/users/thaxy/events{/privacy}", "received_events_url": "https://api.github.com/users/thaxy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-17T06:39:18Z", "updated_at": "2020-02-05T18:38:49Z", "closed_at": "2020-02-05T18:38:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's assume we have a WebSocket consumer wrapped in a ``AuthMiddlewareStack`` (SessionMiddleware).\r\n\r\n```\r\napplication = ProtocolTypeRouter({\r\n    'websocket': AllowedHostsOriginValidator(\r\n        AuthMiddlewareStack(\r\n            URLRouter(\r\n                # ...\r\n            )\r\n        ),\r\n    )\r\n})\r\n```\r\n\r\nAs an anonymous user I ``connect()`` to my consumer, modify the session store and save it.\r\n```\r\nself.scope[\"session\"][\"test\"] = 123\r\nself.scope[\"session\"].save()\r\n```\r\n\r\nThis will create (default Django configuration) a new row in the database table ``public.django_session``. Doing this [in a traditional view](https://stackoverflow.com/questions/32458657/django-sessions-for-anonymous-users#answer-49709138) Django will take care to send the ``sessionid`` cookie back to the user by setting the corresponding host header in the response object. Channels (with a WebSocket consumer) behaves differently as the client will never get informed about his sessionid and therefore his corresponding store. The session for an anonymous user is lost when the user reconnects.\r\n\r\nOne hacky workaround could look like this:\r\n\r\n```\r\n def connect(self):\r\n    headers = {}\r\n    if settings.SESSION_COOKIE_NAME not in self.scope['cookies']:\r\n        session_store = self.scope['session']\r\n        session_store['test'] = 123\r\n        session_store.save()\r\n        headers['Set-Cookie'] = f'{settings.SESSION_COOKIE_NAME}={session_store.session_key}'\r\n        self.scope['cookies'][settings.SESSION_COOKIE_NAME] = session_store.session_key\r\n     self.accept(subprotocol=(None, headers))\r\n```\r\n\r\nAny thoughts on that? Is there a better way to handle such a scenario?\r\n\r\n\r\n_____\r\nUpdate: Maybe the following code is a bit better:\r\n\r\n```\r\n        headers = {}\r\n        session_store = self.scope['session']\r\n        if not session_store.session_key:\r\n            session_store.create()\r\n            headers['Set-Cookie'] = f'{settings.SESSION_COOKIE_NAME}={session_store.session_key}'\r\n        self.accept(subprotocol=(None, headers))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1401", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1401/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1401/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1401/events", "html_url": "https://github.com/django/channels/issues/1401", "id": 547870180, "node_id": "MDU6SXNzdWU1NDc4NzAxODA=", "number": 1401, "title": "AsyncJsonWebsocketConsumer and channel redis doesn't work", "user": {"login": "Hyperian428", "id": 20657348, "node_id": "MDQ6VXNlcjIwNjU3MzQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/20657348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hyperian428", "html_url": "https://github.com/Hyperian428", "followers_url": "https://api.github.com/users/Hyperian428/followers", "following_url": "https://api.github.com/users/Hyperian428/following{/other_user}", "gists_url": "https://api.github.com/users/Hyperian428/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hyperian428/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hyperian428/subscriptions", "organizations_url": "https://api.github.com/users/Hyperian428/orgs", "repos_url": "https://api.github.com/users/Hyperian428/repos", "events_url": "https://api.github.com/users/Hyperian428/events{/privacy}", "received_events_url": "https://api.github.com/users/Hyperian428/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-10T05:14:25Z", "updated_at": "2020-01-23T20:17:55Z", "closed_at": "2020-01-15T19:33:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nDjango==2.2.6\r\ndjango-heroku==0.3.1\r\ndaphne==2.4.0\r\ngunicorn==19.9.0\r\nrequests==2.22.0\r\nchannels==2.3.1\r\nchannels-redis==2.4.1\r\n```\r\n\r\nI have a simple consumer program that I am testing my redis server, but I don't see the channel function executing.\r\n\r\n```\r\nfrom channels.generic.websocket import AsyncJsonWebsocketConsumer\r\n\r\nclass backEndConsumer(AsyncJsonWebsocketConsumer):\r\n\r\n    async def websocket_connect(self, type):\r\n        self.channel_name = \"first\"\r\n        await self.channel_layer.group_add(\"link\", self.channel_name)\r\n        await self.accept()\r\n\r\n    async def websocket_disconnect(self, close_code):\r\n        await self.close()\r\n        await self.channel_layer.group_discard(\"link\", self.channel_name)\r\n        # Called when the socket closes\r\n        \r\n    async def websocket_receive(self, text_data=None, bytes_data=None):\r\n        await self.send(\"Connected\")\r\n        await self.channel_layer.group_send(\r\n        \"link\",\r\n            {\r\n               \"type\": \"link.send\",\r\n               \"message\": \"msg from websocket\",\r\n            })       \r\n        \r\n#channel layer functions \r\n    async def link_send(self, event):\r\n        print(\"got message: \" + event[\"message\"])\r\n        await self.send(\"triggered!\")\r\n```\r\n\r\nmy settings.py has this\r\n```\r\nredis_host = os.environ.get('REDIS_HOST', 'localhost')\r\nCHANNEL_LAYERS = {\r\n    \"default\": {\r\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\r\n        \"CONFIG\": {\r\n            \"hosts\": [(redis_host, 6379)],\r\n        },\r\n    },\r\n}\r\n```\r\nI believe I followed most of the examples (including the multichat example). But my code doesn't seem to work. \r\nI have found people with issues similar to mine and it seems like they found work arounds, but it didn't apply to my code.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1400", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1400/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1400/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1400/events", "html_url": "https://github.com/django/channels/issues/1400", "id": 547352976, "node_id": "MDU6SXNzdWU1NDczNTI5NzY=", "number": 1400, "title": "Deploy the asgi project on window", "user": {"login": "pppigg", "id": 44393853, "node_id": "MDQ6VXNlcjQ0MzkzODUz", "avatar_url": "https://avatars2.githubusercontent.com/u/44393853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pppigg", "html_url": "https://github.com/pppigg", "followers_url": "https://api.github.com/users/pppigg/followers", "following_url": "https://api.github.com/users/pppigg/following{/other_user}", "gists_url": "https://api.github.com/users/pppigg/gists{/gist_id}", "starred_url": "https://api.github.com/users/pppigg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pppigg/subscriptions", "organizations_url": "https://api.github.com/users/pppigg/orgs", "repos_url": "https://api.github.com/users/pppigg/repos", "events_url": "https://api.github.com/users/pppigg/events{/privacy}", "received_events_url": "https://api.github.com/users/pppigg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-09T09:25:38Z", "updated_at": "2020-01-09T11:32:00Z", "closed_at": "2020-01-09T11:32:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I now need to deploy the django project on the window (using channels), but have been unsuccessful.\r\nI tried using apache and found only the deployment of the wsgi service, and it worked.\r\nDo you have any Suggestions?\r\nLooking forward to your reply.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1397", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1397/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1397/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1397/events", "html_url": "https://github.com/django/channels/issues/1397", "id": 545129427, "node_id": "MDU6SXNzdWU1NDUxMjk0Mjc=", "number": 1397, "title": "Unable to make channels to work in aws instance", "user": {"login": "ylnunez84", "id": 2441424, "node_id": "MDQ6VXNlcjI0NDE0MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2441424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ylnunez84", "html_url": "https://github.com/ylnunez84", "followers_url": "https://api.github.com/users/ylnunez84/followers", "following_url": "https://api.github.com/users/ylnunez84/following{/other_user}", "gists_url": "https://api.github.com/users/ylnunez84/gists{/gist_id}", "starred_url": "https://api.github.com/users/ylnunez84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ylnunez84/subscriptions", "organizations_url": "https://api.github.com/users/ylnunez84/orgs", "repos_url": "https://api.github.com/users/ylnunez84/repos", "events_url": "https://api.github.com/users/ylnunez84/events{/privacy}", "received_events_url": "https://api.github.com/users/ylnunez84/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-03T19:32:03Z", "updated_at": "2020-01-15T18:57:49Z", "closed_at": "2020-01-15T18:57:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, i am having a problem to make my chat app work in production. I am using Amazon EC2 instance. Locally works fine with python manage.py runserver, the problem is in prod environment.\r\nI am using this configuration for nginx:\r\n-----------------------nginx conf----------------------------\r\nupstream app_server {\r\n  server unix:/home/project/run/gunicorn.sock fail_timeout=0;\r\n}\r\n\r\nupstream channels_backend {\r\n  server servername.com:8001;\r\n}\r\n\r\nserver {\r\n    listen       80;\r\n    server_name  servername.com;\r\n    root /home/project/templates;\r\n    index homepage.html homepage.htm;\r\n    client_max_body_size 4G;\r\n    access_log /home/project/logs/nginx-access.log;\r\n    error_log /home/project/logs/nginx-error.log;\r\n\r\n    location / {\t\t\r\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        if (!-f $request_filename) {\r\n            proxy_pass http://app_server;\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    location /static/ {\r\n        alias   /home/project/assets/;\r\n    }\r\n\r\n    location /media/ {\r\n        alias   /home/project/media/;\r\n    }\r\n\r\n    location /ws/ {\r\n        proxy_pass http://channels_backend;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection \"upgrade\";\r\n        proxy_redirect off;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Host $server_name;\r\n    }\r\n}\r\n------------------------------------------------------------\r\n\r\nSupervisor programs:\r\n[program:asgi_workers]\r\ncommand = /home/project/worker.sh\r\nuser = root\r\nstdout_logfile = /home/project/logs/worker.log\r\nredirect_stderr = true\r\nautorestart = true\r\nstdout_logfile=/tmp/workers.out.log\r\n\r\n[program:asgi_daphne]\r\ncommand = /home/project/daphne.sh\r\nuser = root\r\nstdout_logfile = /home/project/logs/daphne.log\r\nredirect_stderr = true\r\nautorestart = true\r\nstdout_logfile=/tmp/daphne.out.log\r\n\r\n[program:app]\r\ncommand = /home/project/gunicorn_start.sh\r\nuser = www-data\r\nstdout_logfile = /home/project/logs/gunicorn_supervisor.log\r\nredirect_stderr = true  \r\n\r\n\r\n-------------------Django Requirements ------------------\r\n\r\nasgi-redis==1.1.0\r\nasgiref==1.0.0\r\nautobahn==0.12.1\r\nchannels==0.16.1\r\ndaphne==0.14.1\r\ndj-database-url==0.4.0\r\nhaikunator==1.0.1\r\nmsgpack-python==0.4.7\r\npsycopg2==2.6.1\r\nredis==2.10.5\r\nsix==1.10.0\r\nTwisted==16.2.0\r\ntxaio==2.2.1\r\nwheel==0.24.0\r\nzope.interface==4.1.3\r\n\r\n------------------------django settings.py----------------------------------\r\n\r\nCHANNEL_LAYERS = {\r\n    \"default\": {\r\n        \"BACKEND\": \"asgi_redis.RedisChannelLayer\",\r\n        \"CONFIG\": {\r\n            \"hosts\": [os.environ.get('REDISCLOUD_URL', 'redis://localhost:6379')],\r\n        },\r\n        \"ROUTING\": \"conceptboard.routing.channel_routing\",\r\n    },\r\n}\r\n\r\nI am getting no logs in mi daphne.log file and in nginx-error log getting this\r\n*750 connect() failed (111: Connection refused) while connecting to upstream, client: 152.207.249.13, server: servername.com, request: \"GET /ws/chat/28 HTTP/1.1\", upstream: \"http://34.211.96.11:8001/ws/chat/28\", host: \"servername.com\"\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1396", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1396/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1396/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1396/events", "html_url": "https://github.com/django/channels/issues/1396", "id": 542524942, "node_id": "MDU6SXNzdWU1NDI1MjQ5NDI=", "number": 1396, "title": "Must specify asyncio event loop selector for Windows on Python 3.8.  ", "user": {"login": "rahimnagori", "id": 42448371, "node_id": "MDQ6VXNlcjQyNDQ4Mzcx", "avatar_url": "https://avatars0.githubusercontent.com/u/42448371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rahimnagori", "html_url": "https://github.com/rahimnagori", "followers_url": "https://api.github.com/users/rahimnagori/followers", "following_url": "https://api.github.com/users/rahimnagori/following{/other_user}", "gists_url": "https://api.github.com/users/rahimnagori/gists{/gist_id}", "starred_url": "https://api.github.com/users/rahimnagori/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rahimnagori/subscriptions", "organizations_url": "https://api.github.com/users/rahimnagori/orgs", "repos_url": "https://api.github.com/users/rahimnagori/repos", "events_url": "https://api.github.com/users/rahimnagori/events{/privacy}", "received_events_url": "https://api.github.com/users/rahimnagori/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-12-26T11:13:06Z", "updated_at": "2020-04-15T18:37:39Z", "closed_at": "2020-04-15T18:37:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have done\r\n> pip install django\r\n> pip install channels\r\n> django-admin start project mysite\r\n> cd mysite\r\n> python manage.py startapp chat\r\nAdded the new 'chat' app in 'installed_apps'\r\nCreated chat/index.html\r\nThen created chat/views.py\r\n.....\r\nAdded 'channels' in 'installed_apps'\r\nAdded ASGI_APPLICATION = 'mysite.routing.application' in mysite/settings.py\r\nAt this point when I execute:\r\n> python manage.py runserver\r\nI'm using this on Win 10 machine.\r\nI'm getting the following error : \r\n\r\nException in thread django-main-thread:\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\win10\\appdata\\local\\programs\\python\\python38-32\\Lib\\threading.py\", line 932, in _bootstrap_inner\r\n    self.run()\r\n  File \"c:\\users\\win10\\appdata\\local\\programs\\python\\python38-32\\Lib\\threading.py\", line 870, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\utils\\autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\utils\\autoreload.py\", line 76, in raise_last_exception\r\n    raise _exception[1]\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 357, in execute\r\n    autoreload.check_errors(django.setup)()\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\utils\\autoreload.py\", line 53, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\apps\\registry.py\", line 91, in populate\r\n    app_config = AppConfig.create(entry)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\django\\apps\\config.py\", line 116, in create\r\n    mod = import_module(mod_path)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\importlib\\__init__.py\", line 127, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 1014, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 991, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 975, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 671, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 783, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\channels\\apps.py\", line 6, in <module>\r\n    import daphne.server\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\daphne\\server.py\", line 20, in <module>\r\n    asyncioreactor.install(twisted_loop)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\twisted\\internet\\asyncioreactor.py\", line 320, in install\r\n    reactor = AsyncioSelectorReactor(eventloop)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\twisted\\internet\\asyncioreactor.py\", line 69, in __init__\r\n    super().__init__()\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\twisted\\internet\\base.py\", line 571, in __init__\r\n    self.installWaker()\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\twisted\\internet\\posixbase.py\", line 286, in installWaker\r\n    self.addReader(self.waker)\r\n  File \"C:\\Users\\win10\\PycharmProjects\\profilics\\chatenv\\lib\\site-packages\\twisted\\internet\\asyncioreactor.py\", line 151, in addReader\r\n    self._asyncioEventloop.add_reader(fd, callWithLogger, reader,\r\n  File \"c:\\users\\win10\\appdata\\local\\programs\\python\\python38-32\\Lib\\asyncio\\events.py\", line 501, in add_reader\r\n    raise NotImplementedError\r\nNotImplementedError\r\n\r\nDoes anyone have idea why I'm getting this error?\r\n\r\nI have put my code to this repo's master branch : \r\nhttps://github.com/rahimnagori/django-channel\r\n\r\nYou may also check the code if you wish to.\r\nI'm using windows machine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1395", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1395/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1395/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1395/events", "html_url": "https://github.com/django/channels/issues/1395", "id": 542244424, "node_id": "MDU6SXNzdWU1NDIyNDQ0MjQ=", "number": 1395, "title": "close_old_conn", "user": {"login": "tivonheng", "id": 287240, "node_id": "MDQ6VXNlcjI4NzI0MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/287240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tivonheng", "html_url": "https://github.com/tivonheng", "followers_url": "https://api.github.com/users/tivonheng/followers", "following_url": "https://api.github.com/users/tivonheng/following{/other_user}", "gists_url": "https://api.github.com/users/tivonheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/tivonheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tivonheng/subscriptions", "organizations_url": "https://api.github.com/users/tivonheng/orgs", "repos_url": "https://api.github.com/users/tivonheng/repos", "events_url": "https://api.github.com/users/tivonheng/events{/privacy}", "received_events_url": "https://api.github.com/users/tivonheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-25T03:27:37Z", "updated_at": "2020-01-15T19:30:00Z", "closed_at": "2020-01-15T19:30:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issues are for **concrete, actionable bugs and feature requests** only - if you're just asking for debugging help or technical support we have to direct you elsewhere. If you just have questions or support requests please use:\r\n\r\n- Stack Overflow\r\n- The Django Users mailing list django-users@googlegroups.com (https://groups.google.com/forum/#!forum/django-users)\r\n\r\nWe have to limit this because of limited volunteer time to respond to issues!\r\n\r\nPlease also try and include, if you can:\r\n\r\n- Your OS and runtime environment, and browser if applicable\r\n- A `pip freeze` output showing your package versions\r\n- What you expected to happen vs. what actually happened\r\n- How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\n- Console logs and full tracebacks of any errors\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1386", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1386/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1386/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1386/events", "html_url": "https://github.com/django/channels/issues/1386", "id": 530558758, "node_id": "MDU6SXNzdWU1MzA1NTg3NTg=", "number": 1386, "title": "Channel server responds with 400 Bad Request for multipart on Python 3.7+", "user": {"login": "iamareebjamal", "id": 3874064, "node_id": "MDQ6VXNlcjM4NzQwNjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/3874064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamareebjamal", "html_url": "https://github.com/iamareebjamal", "followers_url": "https://api.github.com/users/iamareebjamal/followers", "following_url": "https://api.github.com/users/iamareebjamal/following{/other_user}", "gists_url": "https://api.github.com/users/iamareebjamal/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamareebjamal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamareebjamal/subscriptions", "organizations_url": "https://api.github.com/users/iamareebjamal/orgs", "repos_url": "https://api.github.com/users/iamareebjamal/repos", "events_url": "https://api.github.com/users/iamareebjamal/events{/privacy}", "received_events_url": "https://api.github.com/users/iamareebjamal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-11-30T09:59:27Z", "updated_at": "2020-07-13T17:53:12Z", "closed_at": "2020-07-13T17:53:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "#### Reproduction Repo\r\n\r\nMinimal reproducible example with steps - https://github.com/iamareebjamal/channels-multipart-bad-request\r\n\r\n#### Bug\r\n\r\nMost probably relate to #1100\r\n\r\nConsider a multipart request as such:\r\n\r\nBody:\r\n```\r\n--d66f495a-c4d1-487c-9277-9ab1a20001cc\r\nContent-Disposition: form-data; name=\"content\"\r\nContent-Type: multipart/form-data; charset=utf-8\r\n\r\nAnything\r\n--d66f495a-c4d1-487c-9277-9ab1a20001cc--\r\n```\r\n\r\nHeader:\r\n`Content-Type: multipart/form-data; boundary=d66f495a-c4d1-487c-9277-9ab1a20001cc`\r\n\r\nAnd any simple handler/view in Django. For example, one that just returns `Hello World` without even processing the request data. \r\n\r\nFor Python 3.6 (tested with Python 3.6.9 and 3.6.6), the channels server (dev server [runserver] and daphne both) handle multipart requests correctly. The specified view is called and the request is handled and correct response with `200 OK` status code is returned. \r\n\r\nFor the same channels and Django version, if the Python version is switched to 3.7+ (tested with Python 3.7.0 3.7.4 3.7.5 3.8.0), the server returns `400 Bad Request` and empty response body. The request does not even reach any view or middleware regardless of the view processing the request or statically returning content like in the example repo above. No exception is raised even with django log level set to `DEBUG`. Although I have not tested if the channels logger is separate and logs anything else. At least it does not log in default settings or throw any exception.\r\n\r\nAs seen in the example repo, the entire environment is same except the python version. And hence, the behaviour of channels should be same across Python versions as well. \r\n\r\n#### Environment\r\n\r\n##### pip freeze\r\n\r\nIdentical for both versions\r\n\r\n###### Python 3.7\r\n\r\n```\r\nasgiref==3.2.3\r\nattrs==19.3.0\r\nautobahn==19.11.1\r\nAutomat==0.8.0\r\ncertifi==2019.11.28\r\ncffi==1.13.2\r\nchannels==2.3.1\r\nchardet==3.0.4\r\nconstantly==15.1.0\r\ncryptography==2.8\r\ndaphne==2.4.0\r\nDjango==2.2.7\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.7\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\npyOpenSSL==19.1.0\r\npytz==2019.3\r\nrequests==2.22.0\r\nservice-identity==18.1.0\r\nsix==1.13.0\r\nsqlparse==0.3.0\r\nTwisted==19.10.0\r\ntxaio==18.8.1\r\nurllib3==1.25.7\r\nzope.interface==4.7.1\r\n```\r\n\r\n###### Python 3.6\r\n\r\n```\r\nasgiref==3.2.3\r\nattrs==19.3.0\r\nautobahn==19.11.1\r\nAutomat==0.8.0\r\ncertifi==2019.11.28\r\ncffi==1.13.2\r\nchannels==2.3.1\r\nchardet==3.0.4\r\nconstantly==15.1.0\r\ncryptography==2.8\r\ndaphne==2.4.0\r\nDjango==2.2.7\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\npyasn1==0.4.8\r\npyasn1-modules==0.2.7\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\npyOpenSSL==19.1.0\r\npytz==2019.3\r\nrequests==2.22.0\r\nservice-identity==18.1.0\r\nsix==1.13.0\r\nsqlparse==0.3.0\r\nTwisted==19.10.0\r\ntxaio==18.8.1\r\nurllib3==1.25.7\r\nzope.interface==4.7.1\r\n```\r\n\r\n##### OS\r\n\r\nTested on:\r\n- Linux/Ubuntu 19.10\r\n- Linux/Mint 19.1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1385", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1385/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1385/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1385/events", "html_url": "https://github.com/django/channels/issues/1385", "id": 530224327, "node_id": "MDU6SXNzdWU1MzAyMjQzMjc=", "number": 1385, "title": "Are there plans to support Django 3.0?", "user": {"login": "aaronn", "id": 1653630, "node_id": "MDQ6VXNlcjE2NTM2MzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1653630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronn", "html_url": "https://github.com/aaronn", "followers_url": "https://api.github.com/users/aaronn/followers", "following_url": "https://api.github.com/users/aaronn/following{/other_user}", "gists_url": "https://api.github.com/users/aaronn/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronn/subscriptions", "organizations_url": "https://api.github.com/users/aaronn/orgs", "repos_url": "https://api.github.com/users/aaronn/repos", "events_url": "https://api.github.com/users/aaronn/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-29T08:48:14Z", "updated_at": "2019-12-11T20:23:50Z", "closed_at": "2019-12-11T20:23:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there plans to support Django 3.0? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1384", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1384/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1384/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1384/events", "html_url": "https://github.com/django/channels/issues/1384", "id": 528538665, "node_id": "MDU6SXNzdWU1Mjg1Mzg2NjU=", "number": 1384, "title": "ASGI/Channels development server turn all request method to GET", "user": {"login": "saber-solooki", "id": 5122570, "node_id": "MDQ6VXNlcjUxMjI1NzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5122570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saber-solooki", "html_url": "https://github.com/saber-solooki", "followers_url": "https://api.github.com/users/saber-solooki/followers", "following_url": "https://api.github.com/users/saber-solooki/following{/other_user}", "gists_url": "https://api.github.com/users/saber-solooki/gists{/gist_id}", "starred_url": "https://api.github.com/users/saber-solooki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saber-solooki/subscriptions", "organizations_url": "https://api.github.com/users/saber-solooki/orgs", "repos_url": "https://api.github.com/users/saber-solooki/repos", "events_url": "https://api.github.com/users/saber-solooki/events{/privacy}", "received_events_url": "https://api.github.com/users/saber-solooki/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-26T07:24:32Z", "updated_at": "2020-07-13T17:24:26Z", "closed_at": "2020-07-13T17:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\nI faced with some issue when run ASGI/Channels development server. When request with different method (POST, PATH ...) , Always get \"GET\" method in my code. I try to print my method with this sample code:\r\n\r\n@csrf_exempt\r\ndef test(request):\r\n    return JsonResponse({\"method\": request.method})", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1381", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1381/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1381/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1381/events", "html_url": "https://github.com/django/channels/issues/1381", "id": 521297865, "node_id": "MDU6SXNzdWU1MjEyOTc4NjU=", "number": 1381, "title": "Not able to see traceback exceptions on console with channels running ", "user": {"login": "plusices", "id": 17918978, "node_id": "MDQ6VXNlcjE3OTE4OTc4", "avatar_url": "https://avatars2.githubusercontent.com/u/17918978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/plusices", "html_url": "https://github.com/plusices", "followers_url": "https://api.github.com/users/plusices/followers", "following_url": "https://api.github.com/users/plusices/following{/other_user}", "gists_url": "https://api.github.com/users/plusices/gists{/gist_id}", "starred_url": "https://api.github.com/users/plusices/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/plusices/subscriptions", "organizations_url": "https://api.github.com/users/plusices/orgs", "repos_url": "https://api.github.com/users/plusices/repos", "events_url": "https://api.github.com/users/plusices/events{/privacy}", "received_events_url": "https://api.github.com/users/plusices/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-12T02:55:36Z", "updated_at": "2019-12-02T19:14:08Z", "closed_at": "2019-12-02T19:14:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't see any traceback exceptions on console when I enable channels in settings.py,if I remove it ,I can see the following traceback log :\r\nInternal Server Error: /debug1/\r\nTraceback (most recent call last):\r\n..........\r\n  File \"/Users/tinson.liu/project/devops-admin/devops_admin/urls.py\", line 8, in trigger_error1\r\n    division_by_zero = 1 / 0\r\nZeroDivisionError: division by zero\r\n \r\nI use the version of  python module with daphne==2.2.5,Django==2.1.7,channels 2.1.7.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1380", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1380/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1380/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1380/events", "html_url": "https://github.com/django/channels/issues/1380", "id": 520648463, "node_id": "MDU6SXNzdWU1MjA2NDg0NjM=", "number": 1380, "title": "___call__() got an unexpected keyword argument 'receive'", "user": {"login": "kalebweston100", "id": 43739811, "node_id": "MDQ6VXNlcjQzNzM5ODEx", "avatar_url": "https://avatars3.githubusercontent.com/u/43739811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalebweston100", "html_url": "https://github.com/kalebweston100", "followers_url": "https://api.github.com/users/kalebweston100/followers", "following_url": "https://api.github.com/users/kalebweston100/following{/other_user}", "gists_url": "https://api.github.com/users/kalebweston100/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalebweston100/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalebweston100/subscriptions", "organizations_url": "https://api.github.com/users/kalebweston100/orgs", "repos_url": "https://api.github.com/users/kalebweston100/repos", "events_url": "https://api.github.com/users/kalebweston100/events{/privacy}", "received_events_url": "https://api.github.com/users/kalebweston100/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-10T19:53:46Z", "updated_at": "2019-11-10T20:46:45Z", "closed_at": "2019-11-10T20:44:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "The error occurs when I am trying to call a GET request on the main page of my application. I don't think it is an issue with the connection with Redis because I checked the connection through the Django Python shell. \r\n\r\nHere is the callback for the error:\r\n\r\nHTTP GET / 500 [0.00, 127.0.0.1:60982]\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\kaleb\\Anaconda3\\lib\\site-packages\\daphne\\http_protocol.py\", line 179, in process\r\n    \"server\": self.server_addr,\r\nTypeError: __call__() got an unexpected keyword argument 'receive'\r\n\r\nI am using Python 3.7 with the latest versions of channels and all its dependencies along with Redis 3.0.504 on a Windows operating system.\r\n\r\nThank you\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1378", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1378/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1378/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1378/events", "html_url": "https://github.com/django/channels/issues/1378", "id": 518395912, "node_id": "MDU6SXNzdWU1MTgzOTU5MTI=", "number": 1378, "title": "Django-Channels with 2 applications", "user": {"login": "playerDACC", "id": 34300350, "node_id": "MDQ6VXNlcjM0MzAwMzUw", "avatar_url": "https://avatars3.githubusercontent.com/u/34300350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/playerDACC", "html_url": "https://github.com/playerDACC", "followers_url": "https://api.github.com/users/playerDACC/followers", "following_url": "https://api.github.com/users/playerDACC/following{/other_user}", "gists_url": "https://api.github.com/users/playerDACC/gists{/gist_id}", "starred_url": "https://api.github.com/users/playerDACC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/playerDACC/subscriptions", "organizations_url": "https://api.github.com/users/playerDACC/orgs", "repos_url": "https://api.github.com/users/playerDACC/repos", "events_url": "https://api.github.com/users/playerDACC/events{/privacy}", "received_events_url": "https://api.github.com/users/playerDACC/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-06T10:56:49Z", "updated_at": "2019-11-06T11:01:16Z", "closed_at": "2019-11-06T11:01:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI tried first to ask for help in StackOverflow and in the Django Google Group, but was unsuccessful.\r\nI'm trying to make an example to test if it is possible to have 2 independent django apps connected to the same channel from django-channels.\r\nSo far, I was able to make an example running on one machine and 2 other machines being able to access the first via a client.\r\nBut the goal is to be able to connect separate applications in a single channel to communicate. Is that possible?\r\n\r\nNote: I'm also using redis, if that helps.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1375", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1375/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1375/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1375/events", "html_url": "https://github.com/django/channels/issues/1375", "id": 517678055, "node_id": "MDU6SXNzdWU1MTc2NzgwNTU=", "number": 1375, "title": "JsonRpcConsumer", "user": {"login": "millerf", "id": 790558, "node_id": "MDQ6VXNlcjc5MDU1OA==", "avatar_url": "https://avatars0.githubusercontent.com/u/790558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/millerf", "html_url": "https://github.com/millerf", "followers_url": "https://api.github.com/users/millerf/followers", "following_url": "https://api.github.com/users/millerf/following{/other_user}", "gists_url": "https://api.github.com/users/millerf/gists{/gist_id}", "starred_url": "https://api.github.com/users/millerf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/millerf/subscriptions", "organizations_url": "https://api.github.com/users/millerf/orgs", "repos_url": "https://api.github.com/users/millerf/repos", "events_url": "https://api.github.com/users/millerf/events{/privacy}", "received_events_url": "https://api.github.com/users/millerf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-05T10:18:27Z", "updated_at": "2020-07-13T18:31:27Z", "closed_at": "2020-07-13T18:31:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI developed a small module that could be beneficial for those who look to use Json-RPC over websockets or Http:\r\n\r\nhttps://github.com/millerf/django-channels2-jsonrpc\r\n\r\nthere is aso one version for channels 1:\r\n\r\nhttps://github.com/millerf/django-channels-jsonrpc\r\n\r\nAnyone is invited to contribute if needed.\r\n\r\nCheers ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1374", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1374/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1374/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1374/events", "html_url": "https://github.com/django/channels/issues/1374", "id": 516654702, "node_id": "MDU6SXNzdWU1MTY2NTQ3MDI=", "number": 1374, "title": "Django 3 + channels -  runserver does not work with autoreload", "user": {"login": "swist", "id": 2816186, "node_id": "MDQ6VXNlcjI4MTYxODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2816186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swist", "html_url": "https://github.com/swist", "followers_url": "https://api.github.com/users/swist/followers", "following_url": "https://api.github.com/users/swist/following{/other_user}", "gists_url": "https://api.github.com/users/swist/gists{/gist_id}", "starred_url": "https://api.github.com/users/swist/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swist/subscriptions", "organizations_url": "https://api.github.com/users/swist/orgs", "repos_url": "https://api.github.com/users/swist/repos", "events_url": "https://api.github.com/users/swist/events{/privacy}", "received_events_url": "https://api.github.com/users/swist/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-11-02T16:53:09Z", "updated_at": "2019-12-18T19:51:57Z", "closed_at": "2019-12-18T19:50:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to set up an example repo for Django 3 + ariadne + channels. \r\n\r\nI have added channels and ariadne to the top of `INSTALLED_APPS`\r\n```python\r\nASGI_APPLICATION = \"server.routing.application\"\r\nINSTALLED_APPS = [\r\n    \"channels\",\r\n    \"django.contrib.admin\",\r\n    \"django.contrib.auth\",\r\n    \"django.contrib.contenttypes\",\r\n    \"django.contrib.sessions\",\r\n    \"django.contrib.messages\",\r\n    \"django.contrib.staticfiles\",\r\n    \"ariadne.contrib.django\",\r\n]\r\n```\r\n\r\nAnd set up `routing.py`:\r\n\r\n\r\n```python\r\nfrom typing import Callable\r\nfrom ariadne.asgi import GraphQL\r\nfrom channels.routing import URLRouter, ProtocolTypeRouter\r\nfrom django.core.handlers.asgi import ASGIHandler\r\nfrom django.urls import path, re_path\r\n\r\nfrom gql.schema import schema\r\n\r\n\r\n# This is an ASGI2 compatibility class so that we can use ariadne\r\n# subscriptions with channels.\r\n# Once channels supports ASGI3 this class can go away:\r\n# https://github.com/mirumee/ariadne/issues/210\r\nclass DjangoChannelsGraphQL(GraphQL):\r\n    def __call__(self, scope) -> Callable:\r\n        async def handle(receive, send):\r\n            await super(DjangoChannelsGraphQL, self).__call__(scope, receive, send)\r\n\r\n        return handle\r\n\r\n\r\napplication = ProtocolTypeRouter(\r\n    {\r\n        \"websocket\": URLRouter(\r\n            [path(\"graphql/\", DjangoChannelsGraphQL(schema, debug=True))]\r\n        ),\r\n        \"http\": URLRouter(\r\n            [\r\n                path(\"graphql/\", DjangoChannelsGraphQL(schema, debug=True)),\r\n                re_path(r\"\", ASGIHandler),\r\n            ]\r\n        ),\r\n    }\r\n)\r\n```\r\n\r\nWhen I run ``` python manage.py runserver```\r\n\r\nI get hit with ```django.core.exceptions.SynchronousOnlyOperation: You cannot call this from an async context - use a thread or sync_to_async.```\r\n\r\nI don't quite understand channels' runserver config, but I'll include trace for a good measuer:\r\n```\r\nNovember 02, 2019 - 16:48:08\r\nDjango version 3.0b1, using settings 'server.settings'\r\nStarting ASGI/Channels version 2.3.1 development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\n/Users/swistak/messenger/.venv/lib/python3.7/site-packages/channels/management/commands/runserver.py changed, reloading.\r\nTraceback (most recent call last):\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/base.py\", line 328, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 60, in execute\r\n    super().execute(*args, **options)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/base.py\", line 369, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/channels/management/commands/runserver.py\", line 59, in handle\r\n    super().handle(*args, **options)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 95, in handle\r\n    self.run(**options)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 102, in run\r\n    autoreload.run_with_reloader(self.inner_run, **options)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 599, in run_with_reloader\r\n    start_django(reloader, main_func, *args, **kwargs)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 584, in start_django\r\n    reloader.run(django_main_thread)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 299, in run\r\n    self.run_loop()\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 305, in run_loop\r\n    next(ticker)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 353, in tick\r\n    self.notify_file_changed(filepath)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 328, in notify_file_changed\r\n    trigger_reload(path)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/autoreload.py\", line 223, in trigger_reload\r\n    sys.exit(3)\r\nSystemExit: 3\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 21, in <module>\r\n    main()\r\n  File \"manage.py\", line 17, in main\r\n    execute_from_command_line(sys.argv)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/__init__.py\", line 395, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/core/management/base.py\", line 341, in run_from_argv\r\n    connections.close_all()\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/db/utils.py\", line 230, in close_all\r\n    connection.close()\r\n  File \"/Users/swistak/messenger/.venv/lib/python3.7/site-packages/django/utils/asyncio.py\", line 22, in inner\r\n    raise SynchronousOnlyOperation(message)\r\ndjango.core.exceptions.SynchronousOnlyOperation: You cannot call this from an async context - use a thread or sync_to_async.```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1373", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1373/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1373/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1373/events", "html_url": "https://github.com/django/channels/issues/1373", "id": 514759612, "node_id": "MDU6SXNzdWU1MTQ3NTk2MTI=", "number": 1373, "title": "Conflicting dependency between channels and daphne", "user": {"login": "nikochiko", "id": 37668193, "node_id": "MDQ6VXNlcjM3NjY4MTkz", "avatar_url": "https://avatars3.githubusercontent.com/u/37668193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikochiko", "html_url": "https://github.com/nikochiko", "followers_url": "https://api.github.com/users/nikochiko/followers", "following_url": "https://api.github.com/users/nikochiko/following{/other_user}", "gists_url": "https://api.github.com/users/nikochiko/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikochiko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikochiko/subscriptions", "organizations_url": "https://api.github.com/users/nikochiko/orgs", "repos_url": "https://api.github.com/users/nikochiko/repos", "events_url": "https://api.github.com/users/nikochiko/events{/privacy}", "received_events_url": "https://api.github.com/users/nikochiko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-30T15:22:56Z", "updated_at": "2020-05-13T11:40:08Z", "closed_at": "2020-05-13T11:39:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "OS: Ubuntu1804 WSL on Windows\r\nEnvironment: Python2.7 virtualenv\r\n\r\nIssue happened during: Installation of channels\r\nDescription: Channels has daphne ~= 2.2 as its dependency.\r\n_Collecting daphne ~=2.2\r\n  Using cached https://files.pythonhosted.org/packages/43/2e/9b2498d30d7397a27aae5c67f194a9a002be406bdb5a1cb9699de9bb1878/daphne-2.3.0-py2.py3-none-any.whl_\r\n\r\nSo during installation, as can be seen from the url, it tries to install daphne-**2.3**.\r\nHowever, using pipdeptree for channels and for daphne,\r\n```pipdeptree -p channels```\r\n```\r\nchannels==2.1.3\r\n  - asgiref [required: ~=2.3, installed: 2.3.2]   #####  <--- HERE\r\n    - async-timeout [required: >=2.0,<4.0, installed: 2.0.1]\r\n  - daphne [required: ~=2.2, installed: 2.3.0]\r\n    - asgiref [required: ~=3.0, installed: 2.3.2]\r\n      - async-timeout [required: >=2.0,<4.0, installed: 2.0.1]\r\n    - autobahn [required: >=0.18, installed: 19.10.1]\r\n      - cryptography [required: >=2.7, installed: 2.8]\r\n        - cffi [required: >=1.8,!=1.11.3, installed: 1.13.1]\r\n          - pycparser [required: Any, installed: 2.19]\r\n        - enum34 [required: Any, installed: 1.1.6]\r\n        - ipaddress [required: Any, installed: 1.0.17]\r\n        - six [required: >=1.4.1, installed: 1.11.0]\r\n      - six [required: >=1.11.0, installed: 1.11.0]\r\n      - txaio [required: >=18.8.1, installed: 18.8.1]\r\n        - six [required: Any, installed: 1.11.0]\r\n    - twisted [required: >=18.7, installed: 19.7.0]\r\n      - attrs [required: >=17.4.0, installed: 19.3.0]\r\n      - Automat [required: >=0.3.0, installed: 0.8.0]\r\n        - attrs [required: >=16.1.0, installed: 19.3.0]\r\n        - six [required: Any, installed: 1.11.0]\r\n      - constantly [required: >=15.1, installed: 15.1.0]\r\n      - hyperlink [required: >=17.1.1, installed: 19.0.0]\r\n        - idna [required: >=2.5, installed: 2.6]\r\n      - incremental [required: >=16.10.1, installed: 17.5.0]\r\n      - PyHamcrest [required: >=1.9.0, installed: 1.9.0]\r\n        - setuptools [required: Any, installed: 41.6.0]\r\n        - six [required: Any, installed: 1.11.0]\r\n      - zope.interface [required: >=4.4.2, installed: 4.6.0]\r\n        - setuptools [required: Any, installed: 41.6.0]\r\n  - Django [required: >=1.11, installed: 1.11.25]\r\n    - pytz [required: Any, installed: 2019.3]\r\n```\r\nand for daphne, \r\n```pipdeptree -p daphne```\r\n```\r\ndaphne==2.3.0\r\n  - asgiref [required: ~=3.0, installed: 2.3.2]   ####  <---- AND HERE\r\n    - async-timeout [required: >=2.0,<4.0, installed: 2.0.1]\r\n  - autobahn [required: >=0.18, installed: 19.10.1]\r\n    - cryptography [required: >=2.7, installed: 2.8]\r\n      - cffi [required: >=1.8,!=1.11.3, installed: 1.13.1]\r\n        - pycparser [required: Any, installed: 2.19]\r\n      - enum34 [required: Any, installed: 1.1.6]\r\n      - ipaddress [required: Any, installed: 1.0.17]\r\n      - six [required: >=1.4.1, installed: 1.11.0]\r\n    - six [required: >=1.11.0, installed: 1.11.0]\r\n    - txaio [required: >=18.8.1, installed: 18.8.1]\r\n      - six [required: Any, installed: 1.11.0]\r\n  - twisted [required: >=18.7, installed: 19.7.0]\r\n    - attrs [required: >=17.4.0, installed: 19.3.0]\r\n    - Automat [required: >=0.3.0, installed: 0.8.0]\r\n      - attrs [required: >=16.1.0, installed: 19.3.0]\r\n      - six [required: Any, installed: 1.11.0]\r\n    - constantly [required: >=15.1, installed: 15.1.0]\r\n    - hyperlink [required: >=17.1.1, installed: 19.0.0]\r\n      - idna [required: >=2.5, installed: 2.6]\r\n    - incremental [required: >=16.10.1, installed: 17.5.0]\r\n    - PyHamcrest [required: >=1.9.0, installed: 1.9.0]\r\n      - setuptools [required: Any, installed: 41.6.0]\r\n      - six [required: Any, installed: 1.11.0]\r\n    - zope.interface [required: >=4.4.2, installed: 4.6.0]\r\n      - setuptools [required: Any, installed: 41.6.0]\r\n```\r\n\r\nSo, there's a conflict between the required versions of asgiref for channels and its dependency daphne. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1370", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1370/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1370/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1370/events", "html_url": "https://github.com/django/channels/issues/1370", "id": 512154856, "node_id": "MDU6SXNzdWU1MTIxNTQ4NTY=", "number": 1370, "title": "Python 3.8 not supported?", "user": {"login": "max-wittig", "id": 6639323, "node_id": "MDQ6VXNlcjY2MzkzMjM=", "avatar_url": "https://avatars3.githubusercontent.com/u/6639323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/max-wittig", "html_url": "https://github.com/max-wittig", "followers_url": "https://api.github.com/users/max-wittig/followers", "following_url": "https://api.github.com/users/max-wittig/following{/other_user}", "gists_url": "https://api.github.com/users/max-wittig/gists{/gist_id}", "starred_url": "https://api.github.com/users/max-wittig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/max-wittig/subscriptions", "organizations_url": "https://api.github.com/users/max-wittig/orgs", "repos_url": "https://api.github.com/users/max-wittig/repos", "events_url": "https://api.github.com/users/max-wittig/events{/privacy}", "received_events_url": "https://api.github.com/users/max-wittig/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-24T20:07:57Z", "updated_at": "2020-06-10T04:32:07Z", "closed_at": "2019-10-26T07:12:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "What seems to have worked fine with python 3.7, broke in 3.8. Not sure, which component fault it is:\r\n\r\n```\r\nweeapps          | WebSocket CONNECT /ws/ [172.28.0.1:38414]\r\nweeapps          | Exception in callback AsyncioSelectorReactor.callLater.<locals>.run() at /home/weeapps/.cache/pypoetry/virtualenvs/weeapps-bF5OakI8-py3.8/lib/python3.8/site-packages/twisted/internet/asyncioreactor.py:287\r\nweeapps          | handle: <TimerHandle when=6319.079751694 AsyncioSelectorReactor.callLater.<locals>.run() at /home/weeapps/.cache/pypoetry/virtualenvs/weeapps-bF5OakI8-py3.8/lib/python3.8/site-packages/twisted/internet/asyncioreactor.py:287>\r\nweeapps          | Traceback (most recent call last):\r\nweeapps          |   File \"/usr/local/lib/python3.8/asyncio/events.py\", line 81, in _run\r\nweeapps          |     self._context.run(self._callback, *self._args)\r\nweeapps          |   File \"/home/weeapps/.cache/pypoetry/virtualenvs/weeapps-bF5OakI8-py3.8/lib/python3.8/site-packages/twisted/internet/asyncioreactor.py\", line 290, in run\r\nweeapps          |     f(*args, **kwargs)\r\nweeapps          |   File \"/home/weeapps/.cache/pypoetry/virtualenvs/weeapps-bF5OakI8-py3.8/lib/python3.8/site-packages/daphne/server.py\", line 270, in application_checker\r\nweeapps          |     exception = application_instance.exception()\r\nweeapps          | asyncio.exceptions.CancelledError\r\nweeapps          | WebSocket DISCONNECT /ws/ [172.28.0.1:38414]\r\n```\r\n\r\n```\r\naioredis==1.3.0\r\nappdirs==1.4.3\r\nasgiref==3.2.3\r\nasync-timeout==3.0.1\r\nattrs==19.3.0\r\nautobahn==19.10.1\r\nAutomat==0.8.0\r\nblack==19.3b0\r\ncffi==1.13.1\r\nchannels==2.3.0\r\nchannels-redis==2.4.0\r\nClick==7.0\r\nconstantly==15.1.0\r\ncryptography==2.8\r\ndaphne==2.3.0\r\nDjango==2.2.6\r\nhiredis==1.0.0\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\nmsgpack==0.6.2\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\npytz==2019.3\r\nredis==3.3.11\r\nsix==1.12.0\r\nsqlparse==0.3.0\r\ntoml==0.10.0\r\nTwisted==19.7.0\r\ntxaio==18.8.1\r\n-e git+git@github.com:max-wittig/weeapps.git@fffee4b6734eb275105580cb21de5f70e13cc8f7#egg=weeapps\r\nzope.interface==4.6.0\r\n```\r\n\r\n- How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\n* daphne with nginx reverse proxy to https in front, inside docker\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1369", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1369/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1369/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1369/events", "html_url": "https://github.com/django/channels/issues/1369", "id": 510316130, "node_id": "MDU6SXNzdWU1MTAzMTYxMzA=", "number": 1369, "title": "Sent non-empty 'Sec-WebSocket-Protocol' error on Chrome only", "user": {"login": "jayalen86", "id": 51462494, "node_id": "MDQ6VXNlcjUxNDYyNDk0", "avatar_url": "https://avatars2.githubusercontent.com/u/51462494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayalen86", "html_url": "https://github.com/jayalen86", "followers_url": "https://api.github.com/users/jayalen86/followers", "following_url": "https://api.github.com/users/jayalen86/following{/other_user}", "gists_url": "https://api.github.com/users/jayalen86/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayalen86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayalen86/subscriptions", "organizations_url": "https://api.github.com/users/jayalen86/orgs", "repos_url": "https://api.github.com/users/jayalen86/repos", "events_url": "https://api.github.com/users/jayalen86/events{/privacy}", "received_events_url": "https://api.github.com/users/jayalen86/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-21T21:56:54Z", "updated_at": "2020-07-13T17:02:16Z", "closed_at": "2019-10-29T16:20:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Everything is working fine on Firefox/IE, but on Chrome I keep getting the \"Sent non-empty 'Sec-WebSocket-Protocol' header but no response was receive\" error. Any ideas on why this is happening and how to fix it? \r\n\r\njs\r\n\r\nvar roomid = 'roomname'\r\nvar  endpoint = 'ws://'+ window.location.host + window.location.pathname\r\nvar socket = new WebSocket(endpoint, roomid)\r\n\r\nconsumers.py\r\nclass ChatConsumer(AsyncConsumer):\r\n    async def websocket_connect(self, event):\r\n        chat_room = str(self.scope['subprotocols']).replace('[','').replace(']','').replace(\"'\",'')\r\n        self.chat_room = chat_room\r\n        await self.channel_layer.group_add(\r\n            chat_room,\r\n            self.channel_name)\r\n        await self.send({\"type\": \"websocket.accept\"}\r\n\r\n(Using windows 10, localhost)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1368", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1368/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1368/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1368/events", "html_url": "https://github.com/django/channels/issues/1368", "id": 510307074, "node_id": "MDU6SXNzdWU1MTAzMDcwNzQ=", "number": 1368, "title": "Django dockerized Channels with Daphne High Cpu Usage", "user": {"login": "Ammadkhalid", "id": 14825937, "node_id": "MDQ6VXNlcjE0ODI1OTM3", "avatar_url": "https://avatars2.githubusercontent.com/u/14825937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ammadkhalid", "html_url": "https://github.com/Ammadkhalid", "followers_url": "https://api.github.com/users/Ammadkhalid/followers", "following_url": "https://api.github.com/users/Ammadkhalid/following{/other_user}", "gists_url": "https://api.github.com/users/Ammadkhalid/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ammadkhalid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ammadkhalid/subscriptions", "organizations_url": "https://api.github.com/users/Ammadkhalid/orgs", "repos_url": "https://api.github.com/users/Ammadkhalid/repos", "events_url": "https://api.github.com/users/Ammadkhalid/events{/privacy}", "received_events_url": "https://api.github.com/users/Ammadkhalid/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-21T21:34:29Z", "updated_at": "2020-01-08T20:35:25Z", "closed_at": "2019-10-23T19:49:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, Anyone facing this issue? i deploy django with channels in docker. But problem is after few minutes. Cpu is on high usage. Here is logs:\r\n\r\n```\r\nxing-auto-services-django | disconnecting channel_name: specific.AxyORdae!CLvVjxncUcOa\r\nxing-auto-services-django | disconnecting group_name: task-cdaa5fb1-9356-44e4-b717-1b11139bf956\r\nxing-auto-services-django | disconnecting code: 1001\r\nxing-auto-services-django | disconnecting channel_name: specific.AxyORdae!kCOFZNhtNdkw\r\nxing-auto-services-django | disconnecting group_name: task-cdaa5fb1-9356-44e4-b717-1b11139bf956\r\nxing-auto-services-django | disconnecting code: 1001\r\nxing-auto-services-django | disconnecting channel_name: specific.AxyORdae!WOrMSfcopVba\r\nxing-auto-services-django | disconnecting group_name: task-827ecbda-c6b9-4727-aa00-f1ea314c2c77\r\nxing-auto-services-django | disconnecting code: 1006\r\nxing-auto-services-django | disconnecting channel_name: specific.AxyORdae!GMJPYqfoweEH\r\nxing-auto-services-django | disconnecting group_name: task-827ecbda-c6b9-4727-aa00-f1ea314c2c77\r\nxing-auto-services-django | disconnecting code: 1006\r\nxing-auto-services-django | disconnecting channel_name: specific.AxyORdae!QBqoTrHtWjUj\r\nxing-auto-services-django | disconnecting group_name: task-827ecbda-c6b9-4727-aa00-f1ea314c2c77\r\nxing-auto-services-django | Application instance <Task pending coro=<SessionMiddlewareInstance.__call__() running at /usr/local/lib/python3.7/site-packages/channels/sessions.py:183> wait_for=<Future pending cb=[<TaskWakeupMethWrapper object at 0x7feb980b4d90>()]>> for connection <WebSocketProtocol client=['182.186.15.128', 62602] path=b'/ws/task/f9f6b948-e9f8-426e-b591-8dc4ea61cf3e/'> took too long to shut down and was killed.\r\n```\r\n\r\nconsumers.py\r\n```\r\nfrom channels.exceptions import DenyConnection, StopConsumer\r\nfrom channels.generic.websocket import AsyncJsonWebsocketConsumer\r\n\r\n\r\nclass TaskConsumer(AsyncJsonWebsocketConsumer):\r\n\r\n    async def _check_auth(self):\r\n        user = self.scope.get('user', )\r\n\r\n        if not user.is_superuser:\r\n            raise DenyConnection\r\n\r\n    async def disconnect(self, code):\r\n        print('disconnecting code:', code)\r\n        print('disconnecting channel_name:', self.channel_name)\r\n        print('disconnecting group_name:', self.group_name)\r\n        self.channel_layer.group_discard(\r\n            self.group_name, self.channel_name\r\n        )\r\n        raise StopConsumer()\r\n\r\n    async def connect(self):\r\n        await self._check_auth()\r\n\r\n        task_id = self.scope.get('url_route').get('kwargs').get('task_id')\r\n        self.group_name = 'task-{}'.format(task_id)\r\n\r\n        await self.channel_layer.group_add(\r\n            self.group_name,\r\n            self.channel_name\r\n        )\r\n\r\n        await self.accept()\r\n\r\n    async def send_event(self, event):\r\n        del event['type']\r\n        await self.send_json(event)\r\n```\r\n\r\n\r\nDocker-compose:\r\n```\r\nversion: '3'\r\n\r\nservices:\r\n\r\n  rq_default_worker:\r\n    build: .\r\n    env_file:\r\n      - web.env\r\n    command: [\"./scripts/wait-for-it.sh\", \"web:8000\", \"--\", \"bash\", \"./scripts/run_rq_default_worker.sh\"]\r\n    volumes:\r\n      - .:/code\r\n    links:\r\n      - db\r\n      - redis\r\n    depends_on:\r\n      - web\r\n\r\n  rq_high_worker:\r\n    build: .\r\n    env_file:\r\n      - web.env\r\n    command: [\"./scripts/wait-for-it.sh\", \"web:8000\", \"--\", \"bash\", \"./scripts/run_rq_high_worker.sh\"]\r\n    volumes:\r\n      - .:/code\r\n    links:\r\n      - db\r\n      - redis\r\n    depends_on:\r\n      - web\r\n\r\n  rq_low_worker:\r\n    build: .\r\n    env_file:\r\n      - web.env\r\n    command: [\"./scripts/wait-for-it.sh\", \"web:8000\", \"--\", \"bash\", \"./scripts/run_rq_low_worker.sh\"]\r\n    volumes:\r\n      - .:/code\r\n    links:\r\n      - db\r\n      - redis\r\n    depends_on:\r\n      - web\r\n\r\n  rq_default_scheduler:\r\n    build: .\r\n    env_file:\r\n      - web.env\r\n    command: [\"./scripts/wait-for-it.sh\", \"web:8000\", \"--\", \"bash\", \"./scripts/run_default_rq_scheduler.sh\"]\r\n    volumes:\r\n      - .:/code\r\n    links:\r\n      - db\r\n      - redis\r\n    depends_on:\r\n      - web\r\n\r\n  redis:\r\n    image: \"redis:latest\"\r\n    ports:\r\n      - \"6379:6379\"\r\n    volumes:\r\n      - ./docker/redis/data:/data\r\n\r\n  db:\r\n    image: postgres\r\n    restart: always\r\n    env_file:\r\n      - db.env\r\n    volumes:\r\n      - ./docker/postgres/data:/var/lib/postgresql/data/pgdata\r\n    ports:\r\n      - \"5432:5432\"\r\n\r\n  nginx:\r\n    restart: always\r\n    image: nginx:alpine\r\n    volumes:\r\n      - ./docker/nginx/conf.d:/etc/nginx/conf.d\r\n      - ./logs:/code/logs/\r\n      - ./static:/code/static/\r\n      - ./media:/code/media/\r\n    ports:\r\n      - \"10080:80\"\r\n      - \"10443:443\"\r\n    links:\r\n      - web\r\n\r\n  web:\r\n    container_name: \"xing-auto-services-django\"\r\n    env_file:\r\n      - web.env\r\n    build: .\r\n    command: [\"./scripts/wait-for-it.sh\", \"db:5432\", \"--\", \"bash\", \"./scripts/run_server.sh\"]\r\n    volumes:\r\n      - .:/code\r\n      - ./static:/code/static/\r\n      - ./media:/code/media/\r\n    ports:\r\n      - \"8000:8000\"\r\n    links:\r\n      - db\r\n      - redis\r\n    restart: always\r\n    depends_on:\r\n      - db\r\n      - redis\r\n```\r\n\r\n- Your OS and runtime environment, and browser if applicable\r\n````\r\ndjango-rq-scheduler==1.1.3\r\npsycopg2==2.8.3\r\naioredis==1.2.0\r\namqp==2.5.0\r\nanyjson==0.3.3\r\nasgiref==3.1.4\r\nasn1crypto==0.24.0\r\nasync-timeout==3.0.1\r\natomicwrites==1.3.0\r\nattrs==19.1.0\r\nautobahn==19.7.1\r\nAutomat==0.7.0\r\nBabel==2.7.0\r\ncertifi==2019.9.11\r\ncffi==1.12.3\r\nchannels==2.3.0\r\nchannels-redis==2.4.0\r\nchardet==3.0.4\r\nClick==7.0\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ndaphne==2.2.1\r\ndateparser==0.7.2\r\ndateutils==0.6.6\r\nDjango==2.2.3\r\ndjango-rq==2.1.0\r\ndjango-task==1.4.3\r\n````\r\n- What you expected to happen vs. what actually happened\r\n- - first few minutes it keep sending messages just fine but after few minutes or hours. Cpu jump to 400% because of redis.\r\n- How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\n- - daphne with nginx\r\n\r\nhere nginx conf:\r\n```\r\nupstream web_server {\r\n  server web:8000;\r\n}\r\n\r\nserver {\r\n  listen 80;\r\n  server_name 127.0.0.1;\r\n  charset utf-8;\r\n  client_max_body_size 20M;\r\n\r\n  location /static/ {\r\n    alias /code/static/;\r\n  }\r\n\r\n  location /media/ {\r\n    alias /code/media/;\r\n  }\r\n\r\n  location / {\r\n    proxy_pass http://web_server;\r\n      proxy_http_version 1.1;\r\n    proxy_set_header Upgrade $http_upgrade;\r\n    proxy_set_header Connection \"upgrade\";\r\n\r\n    proxy_redirect off;\r\n    proxy_set_header Host $host;\r\n    proxy_set_header X-Real-IP $remote_addr;\r\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n    proxy_set_header X-Forwarded-Host $server_name;\r\n  }\r\n\r\n  proxy_connect_timeout 75s;\r\n  proxy_read_timeout 300s;\r\n\r\n}\r\n```\r\n\r\ni been trying to fix this issue from one week but problem is i won't able to figure out what's exactly issue here..", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1365", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1365/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1365/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1365/events", "html_url": "https://github.com/django/channels/issues/1365", "id": 507612514, "node_id": "MDU6SXNzdWU1MDc2MTI1MTQ=", "number": 1365, "title": "using django channels to send data from outside the consumer class did not work", "user": {"login": "encodingl", "id": 16488016, "node_id": "MDQ6VXNlcjE2NDg4MDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/16488016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/encodingl", "html_url": "https://github.com/encodingl", "followers_url": "https://api.github.com/users/encodingl/followers", "following_url": "https://api.github.com/users/encodingl/following{/other_user}", "gists_url": "https://api.github.com/users/encodingl/gists{/gist_id}", "starred_url": "https://api.github.com/users/encodingl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/encodingl/subscriptions", "organizations_url": "https://api.github.com/users/encodingl/orgs", "repos_url": "https://api.github.com/users/encodingl/repos", "events_url": "https://api.github.com/users/encodingl/events{/privacy}", "received_events_url": "https://api.github.com/users/encodingl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-16T04:51:23Z", "updated_at": "2019-10-23T01:24:09Z", "closed_at": "2019-10-23T01:24:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "My consumer as follows\uff1a\r\n\r\n    class pretask(AsyncWebsocketConsumer):\r\n     \r\n        async def connect(self):\r\n            self.group_name = \"group_test_01\"\r\n            await self.channel_layer.group_add(\r\n                self.group_name,\r\n                self.channel_name\r\n            )\r\n            await self.accept()\r\n    \r\n        async def receive(self, text_data):\r\n            message = json.loads(text_data)\r\n            await self.channel_layer.group_send(\r\n                self.group_name,\r\n                {\r\n                    'type': 'show_in_windows',\r\n                    'message': message\r\n                }\r\n            )\r\n        async def show_in_windows(self,event):\r\n            print(\"7\")\r\n            message = event[\"message\"]\r\n            print(message)\r\n            await self.send(text_data=json.dumps({\r\n                \"message\":message}))\r\n        async def disconnect(self, close_code):\r\n            pass\r\n\r\nWhen I use the client to make a websocket request,the server log is as follws\uff1ait worked fine\u3002\r\n\r\n    INFO WebSocket HANDSHAKING /ws/skworkorders/WorkOrderCommit/pretask/ [127.0.0.1:57566]\r\n    INFO WebSocket CONNECT /ws/skworkorders/WorkOrderCommit/pretask/ [127.0.0.1:57566]\r\n    7\r\n    {'csrfmiddlewaretoken': 'YhfDhjZxtPsRqSN8Mo0Nhybt8JY3KLyNWeQ84VBc6F0u8ff4F7npRI1hriSRMRiT', 'title': 'AnsibleCMD-DEV',......}\r\n\r\nBut when I change my consumer as follows \uff0cthe web_send function didnot work\r\n\r\n    class pretask(AsyncWebsocketConsumer):\r\n    \r\n     \r\n        async def connect(self):\r\n            self.group_name = \"group_test_01\"\r\n            await self.channel_layer.group_add(\r\n                self.group_name,\r\n                self.channel_name\r\n            )\r\n            await self.accept()\r\n    \r\n        async def receive(self, text_data):\r\n            p1 = TestWebSend(self.group_name,\"call out\")\r\n            p1.sendmsg()\r\n            print(text_data)\r\n           \r\n        async def show_in_windows(self,event):\r\n            print(\"7\")\r\n            message = event[\"message\"]\r\n            print(message)\r\n            await self.send(text_data=json.dumps({\r\n                \"message\":message}))\r\n        async def disconnect(self, close_code):\r\n            pass\r\n   \r\n\r\n the TestWebSend class is as follows:\r\n    \r\n        from channels.layers import get_channel_layer\r\n        from asgiref.sync import async_to_sync\r\n        \r\n        def web_send(group_name,msg):\r\n            print(\"4\")\r\n            channel_layer = get_channel_layer()\r\n            print(\"5\")\r\n            print(group_name)\r\n        \r\n            async_to_sync(channel_layer.group_send)(group_name,\r\n                {\r\n                    'type': 'show_in_windows',\r\n                    'message': msg\r\n                }\r\n            )\r\n            print(\"6\")\r\n            \r\n        class TestWebSend():\r\n            def __init__(self,group_name,msg):\r\n                self.msg = msg\r\n                print(self.msg)\r\n                self.group_name = group_name\r\n                print(self.group_name)\r\n        \r\n            def sendmsg(self):\r\n                print(\"3\")\r\n                web_send(self.group_name, self.msg)\r\n                print(\"8\")\r\nWhen I use the client to make a websocket request,the server log is as follws async_to_sync(channel_layer.group_send) did not work\uff1a\r\n\r\n    INFO WebSocket HANDSHAKING /ws/skworkorders/WorkOrderCommit/pretask/ [127.0.0.1:58251]\r\n    INFO WebSocket CONNECT /ws/skworkorders/WorkOrderCommit/pretask/ [127.0.0.1:58251]\r\n    call out\r\n    group_test_01\r\n    3\r\n    4\r\n    5\r\n    group_test_01\r\n    INFO WebSocket DISCONNECT /ws/skworkorders/WorkOrderCommit/pretask/ [127.0.0.1:58251]\r\n\r\n\r\nmy env\r\n```\r\nwindows 10\r\npython3.7.4\r\ndjango==2.2.5\r\nchannels==2.3.0\r\nchannels-redis==2.4.0\r\n```\r\nIs there something wrong with my usage?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1362", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1362/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1362/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1362/events", "html_url": "https://github.com/django/channels/issues/1362", "id": 501728636, "node_id": "MDU6SXNzdWU1MDE3Mjg2MzY=", "number": 1362, "title": "CERTIFICATE_VERIFY_FAILED in channels", "user": {"login": "hibare", "id": 20609766, "node_id": "MDQ6VXNlcjIwNjA5NzY2", "avatar_url": "https://avatars0.githubusercontent.com/u/20609766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hibare", "html_url": "https://github.com/hibare", "followers_url": "https://api.github.com/users/hibare/followers", "following_url": "https://api.github.com/users/hibare/following{/other_user}", "gists_url": "https://api.github.com/users/hibare/gists{/gist_id}", "starred_url": "https://api.github.com/users/hibare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hibare/subscriptions", "organizations_url": "https://api.github.com/users/hibare/orgs", "repos_url": "https://api.github.com/users/hibare/repos", "events_url": "https://api.github.com/users/hibare/events{/privacy}", "received_events_url": "https://api.github.com/users/hibare/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-02T21:10:50Z", "updated_at": "2019-10-09T13:35:47Z", "closed_at": "2019-10-09T13:35:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using a custom SSL cert in the application. Everything works perfectly fine on HTTPS but websocket connection on wss fails with following error.\r\n\r\n```\r\n[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels/sessions.py\", line 183, in __call__\r\n    return await self.inner(receive, self.send)\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels/middleware.py\", line 41, in coroutine_call\r\n    await inner_instance(receive, send)\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels/consumer.py\", line 59, in __call__\r\n    [receive, self.channel_receive], self.dispatch\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels/utils.py\", line 59, in await_many_dispatch\r\n    await task\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels/utils.py\", line 51, in await_many_dispatch\r\n    result = task.result()\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels_redis/core.py\", line 429, in receive\r\n    real_channel\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels_redis/core.py\", line 484, in receive_single\r\n    index, channel_key, timeout=self.brpop_timeout\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels_redis/core.py\", line 324, in _brpop_with_clean\r\n    async with self.connection(index) as connection:\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels_redis/core.py\", line 820, in __aenter__\r\n    self.conn = await self.pool.pop()\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/channels_redis/core.py\", line 70, in pop\r\n    conns.append(await aioredis.create_redis(**self.host, loop=loop))\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/aioredis/commands/__init__.py\", line 178, in create_redis\r\n    loop=loop)\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/aioredis/connection.py\", line 108, in create_connection\r\n    timeout, loop=loop)\r\n  File \"/app/.runtimes/python/lib/python3.7/asyncio/tasks.py\", line 414, in wait_for\r\n    return await fut\r\n  File \"/app/.runtimes/python/lib/python3.7/site-packages/aioredis/stream.py\", line 19, in open_connection\r\n    lambda: protocol, host, port, **kwds)\r\n  File \"/app/.runtimes/python/lib/python3.7/asyncio/base_events.py\", line 981, in create_connection\r\n    ssl_handshake_timeout=ssl_handshake_timeout)\r\n  File \"/app/.runtimes/python/lib/python3.7/asyncio/base_events.py\", line 1009, in _create_connection_transport\r\n    await waiter\r\n  File \"/app/.runtimes/python/lib/python3.7/asyncio/sslproto.py\", line 530, in data_received\r\n    ssldata, appdata = self._sslpipe.feed_ssldata(data)\r\n  File \"/app/.runtimes/python/lib/python3.7/asyncio/sslproto.py\", line 189, in feed_ssldata\r\n    self._sslobj.do_handshake()\r\n  File \"/app/.runtimes/python/lib/python3.7/ssl.py\", line 774, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1076)\r\n```\r\n\r\nError is thrown after the websocket connect.\r\n\r\nIs there any way to make it trust the custom SSL cert?\r\n\r\n\r\nOS: Cent OS\r\nBrowser: Any\r\nPython Version: 3.7.4\r\nChannels version: 2.2.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1360", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1360/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1360/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1360/events", "html_url": "https://github.com/django/channels/issues/1360", "id": 499061521, "node_id": "MDU6SXNzdWU0OTkwNjE1MjE=", "number": 1360, "title": "Development server: Low simultaneous connection limit", "user": {"login": "maxhowald", "id": 8276806, "node_id": "MDQ6VXNlcjgyNzY4MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/8276806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maxhowald", "html_url": "https://github.com/maxhowald", "followers_url": "https://api.github.com/users/maxhowald/followers", "following_url": "https://api.github.com/users/maxhowald/following{/other_user}", "gists_url": "https://api.github.com/users/maxhowald/gists{/gist_id}", "starred_url": "https://api.github.com/users/maxhowald/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maxhowald/subscriptions", "organizations_url": "https://api.github.com/users/maxhowald/orgs", "repos_url": "https://api.github.com/users/maxhowald/repos", "events_url": "https://api.github.com/users/maxhowald/events{/privacy}", "received_events_url": "https://api.github.com/users/maxhowald/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220071675, "node_id": "MDU6TGFiZWwyMjAwNzE2NzU=", "url": "https://api.github.com/repos/django/channels/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-26T19:02:21Z", "updated_at": "2019-10-01T16:48:42Z", "closed_at": "2019-10-01T16:47:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Background: I am using django channels to implement SSE in my app with [django_eventstream](https://github.com/fanout/django-eventstream).\r\n\r\nWhen running the development server provided by django channels, there appears to be a fairly low limit (~6) to the number of simultaneous open HTTP connections. Since SSE holds an HTTP connection open while the page is open, this limits the number of pages of my app that I can open simultaneously.\r\n\r\nSteps to reproduce: (tested on Debian 10 with python 3.7, django 2.2.5, django_eventstream 2.6.0)\r\n1. Create a new django project and follow the steps for [setup with channels](https://github.com/fanout/django-eventstream) in the django_eventstream README\r\n2. Run the development server\r\n3. connect to the eventstream channel with multiple clients, e.g. by opening localhost:8000/events/ in 7+ browser tabs.\r\n\r\nThe seventh tab will not load until one of the first 6 is closed.\r\n\r\nIs there any way to increase this limit? I frequently bump into it when developing locally, just by opening my app in multiple tabs and browsers at the same time.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1359", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1359/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1359/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1359/events", "html_url": "https://github.com/django/channels/issues/1359", "id": 498468050, "node_id": "MDU6SXNzdWU0OTg0NjgwNTA=", "number": 1359, "title": "Sporadic: Cannot acquire lock. errors", "user": {"login": "LiteWait", "id": 898285, "node_id": "MDQ6VXNlcjg5ODI4NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/898285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiteWait", "html_url": "https://github.com/LiteWait", "followers_url": "https://api.github.com/users/LiteWait/followers", "following_url": "https://api.github.com/users/LiteWait/following{/other_user}", "gists_url": "https://api.github.com/users/LiteWait/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiteWait/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiteWait/subscriptions", "organizations_url": "https://api.github.com/users/LiteWait/orgs", "repos_url": "https://api.github.com/users/LiteWait/repos", "events_url": "https://api.github.com/users/LiteWait/events{/privacy}", "received_events_url": "https://api.github.com/users/LiteWait/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-25T19:04:43Z", "updated_at": "2019-10-01T15:33:07Z", "closed_at": "2019-10-01T15:33:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python 3.6, Channels 2.2, getting...\r\n\r\nListen failure: Couldn't listen on any:b'/opt/toogo/run/r113.23.37664.2797.ws': Cannot acquire lock.\r\n\r\nThis happens out of the blue after several days of running.\r\n\r\nAny ideas how to debug?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1358", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1358/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1358/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1358/events", "html_url": "https://github.com/django/channels/issues/1358", "id": 497783893, "node_id": "MDU6SXNzdWU0OTc3ODM4OTM=", "number": 1358, "title": "Support docs point to a nonexistant channel on PySlackers", "user": {"login": "ckirby", "id": 89630, "node_id": "MDQ6VXNlcjg5NjMw", "avatar_url": "https://avatars1.githubusercontent.com/u/89630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ckirby", "html_url": "https://github.com/ckirby", "followers_url": "https://api.github.com/users/ckirby/followers", "following_url": "https://api.github.com/users/ckirby/following{/other_user}", "gists_url": "https://api.github.com/users/ckirby/gists{/gist_id}", "starred_url": "https://api.github.com/users/ckirby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ckirby/subscriptions", "organizations_url": "https://api.github.com/users/ckirby/orgs", "repos_url": "https://api.github.com/users/ckirby/repos", "events_url": "https://api.github.com/users/ckirby/events{/privacy}", "received_events_url": "https://api.github.com/users/ckirby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-24T16:04:59Z", "updated_at": "2019-09-24T18:57:38Z", "closed_at": "2019-09-24T18:57:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1356", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1356/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1356/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1356/events", "html_url": "https://github.com/django/channels/issues/1356", "id": 495412921, "node_id": "MDU6SXNzdWU0OTU0MTI5MjE=", "number": 1356, "title": "RTD Webhooks not working. ", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2019-09-18T19:28:29Z", "updated_at": "2020-01-15T19:46:17Z", "closed_at": "2020-01-15T19:46:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The webhooks for updating the docs are not working. \r\n\r\nTried the obvious steps. Now need to look deeper. Grrr.\r\n\r\nhttps://docs.readthedocs.io/en/stable/webhooks.html", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1349", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1349/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1349/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1349/events", "html_url": "https://github.com/django/channels/issues/1349", "id": 491753796, "node_id": "MDU6SXNzdWU0OTE3NTM3OTY=", "number": 1349, "title": "Django3 support", "user": {"login": "elcolie", "id": 18206728, "node_id": "MDQ6VXNlcjE4MjA2NzI4", "avatar_url": "https://avatars0.githubusercontent.com/u/18206728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elcolie", "html_url": "https://github.com/elcolie", "followers_url": "https://api.github.com/users/elcolie/followers", "following_url": "https://api.github.com/users/elcolie/following{/other_user}", "gists_url": "https://api.github.com/users/elcolie/gists{/gist_id}", "starred_url": "https://api.github.com/users/elcolie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elcolie/subscriptions", "organizations_url": "https://api.github.com/users/elcolie/orgs", "repos_url": "https://api.github.com/users/elcolie/repos", "events_url": "https://api.github.com/users/elcolie/events{/privacy}", "received_events_url": "https://api.github.com/users/elcolie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-10T15:42:13Z", "updated_at": "2019-09-10T16:39:27Z", "closed_at": "2019-09-10T16:39:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it fully support Django3?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1348", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1348/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1348/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1348/events", "html_url": "https://github.com/django/channels/issues/1348", "id": 490419823, "node_id": "MDU6SXNzdWU0OTA0MTk4MjM=", "number": 1348, "title": "Have a global signalling mechanism for request/response lifecycle", "user": {"login": "untitaker", "id": 837573, "node_id": "MDQ6VXNlcjgzNzU3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/837573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/untitaker", "html_url": "https://github.com/untitaker", "followers_url": "https://api.github.com/users/untitaker/followers", "following_url": "https://api.github.com/users/untitaker/following{/other_user}", "gists_url": "https://api.github.com/users/untitaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/untitaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/untitaker/subscriptions", "organizations_url": "https://api.github.com/users/untitaker/orgs", "repos_url": "https://api.github.com/users/untitaker/repos", "events_url": "https://api.github.com/users/untitaker/events{/privacy}", "received_events_url": "https://api.github.com/users/untitaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-09-06T16:38:27Z", "updated_at": "2019-10-02T09:03:36Z", "closed_at": "2019-10-02T08:57:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Core Django, Flask and some other web frameworks have a way to register a callback whenever a request is handled or a response is sent out. This registry exists globally and independently of application state. It's invaluable to monitoring tools like Newrelic and Sentry, as their SDKs/Agents can just subscribe to signals at any point in time without requiring the user to register a middleware or really do any other kind of configuration ([example](https://github.com/getsentry/sentry-python/blob/d684e3e4eb31503729a152228ea12e010463a01c/sentry_sdk/integrations/django/__init__.py#L139)). For frameworks/libraries where such signals don't exist, there is still the possibility of monkeypatching ([example](https://github.com/getsentry/sentry-python/blob/d684e3e4eb31503729a152228ea12e010463a01c/sentry_sdk/integrations/django/__init__.py#L113)). I am affiliated with Sentry, as I work on the Sentry SDK for Python.\r\n\r\nChannels offers no possibility to safely hook into the request/response lifecycle of the ASGI application it exports. Like most frameworks it has no global signals, but the routing mechanism is left up to the user in a way that makes it very hard to wrap the outermost ASGI application even through monkeypatching. Django also allows the user to wrap the Django-exported WSGI application in arbitrarily many layers of WSGI middleware that we cannot instrument, but Channels makes it a common pattern for the user to use ASGI middleware while it's uncommon enough in Django to ignore the issue there.\r\n\r\nWhat I would like to see is the following:\r\n\r\n1. Modify `channels.routing.get_default_application()` to wrap the discovered ASGI application in a middleware `ChannelsApp` that does nothing but forward to the inner application. This already allows us to monkeypatch to achieve our goal.\r\n2. (optional) Add new global signals that are emitted by this middleware. We are fine with using internal APIs to instrument channels, but official APIs are always better.\r\n\r\nEven just the first change enables Sentry and similar tools to hook into channels **before Django settings have been loaded**. This point is crucial because:\r\n\r\n* Sentry's SDK is initialized as part of loading settings in the first place\r\n* NewRelic's Agent attempts to register signals and monkeypatch shortly after process startup\r\n\r\nThe status-quo solution to this problem is to do one of the following:\r\n\r\n* Patch `AsgiHandler` exclusively if you only care about HTTP\r\n* Patch `ProtocolTypeRouter` under the assumption that most people use this type to wrap everything else\r\n* Use some sort of trampoline to look into Django settings to discover `ASGI_APPLICATION`, and then patch that object. This opens two more choices:\r\n  * Patch Django to know when settings are loaded\r\n  * Do it on the first request where you can be sure that settings are loaded\r\n\r\n  This is a bit involved because `ASGI_APPLICATION` can be any kind of object that might be callable without providing you a settable `__call__`. For example it might be a primitive function, in which case patching `func_code`/`__code__` *might* do the trick.\r\n\r\nWould love to know what you think about this. I am happy to prepare the patch for this.\r\n\r\nDjango's upcoming ASGI support seems to do much better in this regard, as there only `ASGIHandler` needs to be patched.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1347", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1347/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1347/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1347/events", "html_url": "https://github.com/django/channels/issues/1347", "id": 489651536, "node_id": "MDU6SXNzdWU0ODk2NTE1MzY=", "number": 1347, "title": "how to get django request instead of ASGI request in django", "user": {"login": "madu419", "id": 54937405, "node_id": "MDQ6VXNlcjU0OTM3NDA1", "avatar_url": "https://avatars3.githubusercontent.com/u/54937405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madu419", "html_url": "https://github.com/madu419", "followers_url": "https://api.github.com/users/madu419/followers", "following_url": "https://api.github.com/users/madu419/following{/other_user}", "gists_url": "https://api.github.com/users/madu419/gists{/gist_id}", "starred_url": "https://api.github.com/users/madu419/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madu419/subscriptions", "organizations_url": "https://api.github.com/users/madu419/orgs", "repos_url": "https://api.github.com/users/madu419/repos", "events_url": "https://api.github.com/users/madu419/events{/privacy}", "received_events_url": "https://api.github.com/users/madu419/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-05T09:57:19Z", "updated_at": "2019-09-06T04:38:09Z", "closed_at": "2019-09-05T15:11:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "how to get django request instead of ASGI request in our normal function view request(like def index(request)) or if we install django channels every request become ASGI request? for more [reference](https://stackoverflow.com/questions/57801016/how-to-run-wsgi-along-the-side-of-the-daphne-asgi-for-django-channels) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1344", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1344/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1344/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1344/events", "html_url": "https://github.com/django/channels/issues/1344", "id": 486911101, "node_id": "MDU6SXNzdWU0ODY5MTExMDE=", "number": 1344, "title": "celery & channels conflict", "user": {"login": "wsf1990", "id": 8774884, "node_id": "MDQ6VXNlcjg3NzQ4ODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/8774884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wsf1990", "html_url": "https://github.com/wsf1990", "followers_url": "https://api.github.com/users/wsf1990/followers", "following_url": "https://api.github.com/users/wsf1990/following{/other_user}", "gists_url": "https://api.github.com/users/wsf1990/gists{/gist_id}", "starred_url": "https://api.github.com/users/wsf1990/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wsf1990/subscriptions", "organizations_url": "https://api.github.com/users/wsf1990/orgs", "repos_url": "https://api.github.com/users/wsf1990/repos", "events_url": "https://api.github.com/users/wsf1990/events{/privacy}", "received_events_url": "https://api.github.com/users/wsf1990/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-29T11:51:28Z", "updated_at": "2019-08-30T03:53:19Z", "closed_at": "2019-08-30T03:43:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using the latest celery and channels.But I found that when I use channels,My celery can't receive task.When I close the channels, Celery works well.Dose channels and celery has something conflict?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1342", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1342/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1342/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1342/events", "html_url": "https://github.com/django/channels/issues/1342", "id": 484884810, "node_id": "MDU6SXNzdWU0ODQ4ODQ4MTA=", "number": 1342, "title": "Error when running channel tests RuntimeError: Task got Future attached to a different loop", "user": {"login": "sbdchd", "id": 7340772, "node_id": "MDQ6VXNlcjczNDA3NzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7340772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sbdchd", "html_url": "https://github.com/sbdchd", "followers_url": "https://api.github.com/users/sbdchd/followers", "following_url": "https://api.github.com/users/sbdchd/following{/other_user}", "gists_url": "https://api.github.com/users/sbdchd/gists{/gist_id}", "starred_url": "https://api.github.com/users/sbdchd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sbdchd/subscriptions", "organizations_url": "https://api.github.com/users/sbdchd/orgs", "repos_url": "https://api.github.com/users/sbdchd/repos", "events_url": "https://api.github.com/users/sbdchd/events{/privacy}", "received_events_url": "https://api.github.com/users/sbdchd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-25T03:13:48Z", "updated_at": "2019-08-26T23:17:15Z", "closed_at": "2019-08-26T23:17:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the process of adding channels to an existing django project I've run into a couple issues with testing. \r\n\r\nCurrently my tests are failing with a `Task got Future attached to a different loop` error.\r\n\r\nI've made a test repo demonstrating the error:\r\n\r\nhttps://github.com/sbdchd/django-channels-test-repo\r\n\r\nI converted the consumer to `async` which is available in the `async-consumer` branch.\r\nNote that the test failures exist on both `master` and `async-consumer`.\r\n\r\nhttps://github.com/django/channels/issues/859 had a similar error message and may be related\r\n\r\n\r\n## Errors\r\n\r\nWhen running tests for a consumer I am getting the following error:\r\n\r\n```python\r\ncore/test_consumers.py:111: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../.venv/lib/python3.7/site-packages/channels/testing/websocket.py:93: in receive_json_from\r\n    payload = await self.receive_from(timeout)\r\n../.venv/lib/python3.7/site-packages/channels/testing/websocket.py:72: in receive_from\r\n    response = await self.receive_output(timeout)\r\n../.venv/lib/python3.7/site-packages/asgiref/testing.py:71: in receive_output\r\n    self.future.result()\r\n../.venv/lib/python3.7/site-packages/asgiref/compatibility.py:34: in new_application\r\n    return await instance(receive, send)\r\n../.venv/lib/python3.7/site-packages/channels/sessions.py:183: in __call__\r\n    return await self.inner(receive, self.send)\r\n../.venv/lib/python3.7/site-packages/channels/middleware.py:41: in coroutine_call\r\n    await inner_instance(receive, send)\r\n../.venv/lib/python3.7/site-packages/channels/consumer.py:59: in __call__\r\n    [receive, self.channel_receive], self.dispatch\r\n../.venv/lib/python3.7/site-packages/channels/utils.py:59: in await_many_dispatch\r\n    await task\r\n../.venv/lib/python3.7/site-packages/channels/utils.py:51: in await_many_dispatch\r\n    result = task.result()\r\n../.venv/lib/python3.7/site-packages/channels/layers.py:251: in receive\r\n    _, message = await queue.get()\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nself = <Queue at 0x11238fa58 maxsize=0>\r\n\r\n    async def get(self):\r\n        \"\"\"Remove and return an item from the queue.\r\n    \r\n        If queue is empty, wait until an item is available.\r\n        \"\"\"\r\n        while self.empty():\r\n            getter = self._loop.create_future()\r\n            self._getters.append(getter)\r\n            try:\r\n>               await getter\r\nE               RuntimeError: Task <Task pending coro=<InMemoryChannelLayer.receive() running at channels/layers.py:251> cb=[_wait.<locals>._on_completion() at asyncio/tasks.py:440]> got Future <Future pending> attached to a different loop\r\n\r\n/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/asyncio/queues.py:159: RuntimeError\r\n```\r\nwith the main error being:\r\n```\r\nRuntimeError: Task <Task pending coro=<InMemoryChannelLayer.receive() running at  \r\nchannels/layers.py:251> \r\ncb=[_wait.<locals>._on_completion() at.asyncio/tasks.py:440]> got Future \r\n<Future pending> attached to a different loop\r\n```\r\n\r\nI'm also experience intermittent timeouts when running the tests.\r\n\r\n```python\r\n>       assert (\r\n            await communicator_one.receive_json_from() == expected_response\r\n        ), \"we should have received the update for the current user that matched\"\r\n\r\ncore/test_consumers.py:111: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n../.venv/lib/python3.7/site-packages/channels/testing/websocket.py:93: in receive_json_from\r\n    payload = await self.receive_from(timeout)\r\n../.venv/lib/python3.7/site-packages/channels/testing/websocket.py:72: in receive_from\r\n    response = await self.receive_output(timeout)\r\n../.venv/lib/python3.7/site-packages/asgiref/testing.py:86: in receive_output\r\n    raise e\r\n../.venv/lib/python3.7/site-packages/asgiref/testing.py:75: in receive_output\r\n    return await self.output_queue.get()\r\n../.venv/lib/python3.7/site-packages/asgiref/timeout.py:68: in __aexit__\r\n    self._do_exit(exc_type)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <asgiref.timeout.timeout object at 0x10986b0b8>, exc_type = <class 'concurrent.futures._base.CancelledError'>\r\n\r\n    def _do_exit(self, exc_type: Type[BaseException]) -> None:\r\n        if exc_type is asyncio.CancelledError and self._cancelled:\r\n            self._cancel_handler = None\r\n            self._task = None\r\n>           raise asyncio.TimeoutError\r\nE           concurrent.futures._base.TimeoutError\r\n\r\n../.venv/lib/python3.7/site-packages/asgiref/timeout.py:105: TimeoutError\r\n```\r\n\r\n## Env\r\n\r\nOS: MacOS 10.14.5\r\n\r\nPython: 3.7.3\r\n\r\n`pip freeze`\r\n\r\n```\r\nasgiref==3.2.1\r\nasn1crypto==0.24.0\r\natomicwrites==1.3.0\r\nattrs==19.1.0\r\nautobahn==19.8.1\r\nAutomat==0.7.0\r\ncffi==1.12.3\r\nchannels==2.2.0\r\nClick==7.0\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ndaphne==2.3.0\r\ndj-database-url==0.4.2\r\nDjango==2.2\r\ndjangorestframework==3.9.2\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\nmore-itertools==7.0.0\r\npluggy==0.9.0\r\npsycopg2==2.7.3.2\r\npy==1.8.0\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\npytest==3.10.1\r\npytest-asyncio==0.10.0\r\npytest-django==3.4.8\r\npytz==2018.9\r\nsix==1.12.0\r\nsqlparse==0.2.4\r\nTwisted==19.7.0\r\ntxaio==18.8.1\r\nzope.interface==4.6.0\r\n```\r\n\r\npoetry\r\n```\r\n[tool.poetry]\r\nname = \"backend\"\r\nversion = \"0.1.0\"\r\ndescription = \"\"\r\nauthors = []\r\npackages = [\r\n    { include = \"cli\", from = \"backend\" },\r\n]\r\n\r\n[tool.poetry.dependencies]\r\npython = \"^3.7\"\r\ndjangorestframework = \"^3.9.2\"\r\ndjango = \"^2.2b1\"\r\ndj-database-url = \"0.4.2\"\r\npsycopg2 = \"2.7.3.2\"\r\nclick = \"^7.0\"\r\nchannels = \"^2.2\"\r\n\r\n[tool.poetry.dev-dependencies]\r\npytest = \"^3.4.0\"\r\npytest-django = \"^3.1.2\"\r\npytest-asyncio = \"^0.10.0\"\r\n\r\n[tool.poetry.scripts]\r\nyak = 'cli:cli'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1341", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1341/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1341/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1341/events", "html_url": "https://github.com/django/channels/issues/1341", "id": 484711599, "node_id": "MDU6SXNzdWU0ODQ3MTE1OTk=", "number": 1341, "title": "Calling group_send does not call callback function in AsynHttpConsumer", "user": {"login": "kenjones21", "id": 5460117, "node_id": "MDQ6VXNlcjU0NjAxMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5460117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenjones21", "html_url": "https://github.com/kenjones21", "followers_url": "https://api.github.com/users/kenjones21/followers", "following_url": "https://api.github.com/users/kenjones21/following{/other_user}", "gists_url": "https://api.github.com/users/kenjones21/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenjones21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenjones21/subscriptions", "organizations_url": "https://api.github.com/users/kenjones21/orgs", "repos_url": "https://api.github.com/users/kenjones21/repos", "events_url": "https://api.github.com/users/kenjones21/events{/privacy}", "received_events_url": "https://api.github.com/users/kenjones21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-23T21:04:51Z", "updated_at": "2019-08-29T08:03:36Z", "closed_at": "2019-08-28T18:04:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consumer class:\r\n```\r\nclass ServerSentEventsConsumer(AsyncHttpConsumer):\r\n    async def handle(self, body):\r\n        print('handlin')\r\n        self.room_name = 'room'\r\n        self.room_group_name = 'chat_%s' % self.room_name\r\n\r\n        await self.send_headers(headers=[\r\n            (b\"Cache-Control\", b\"no-cache\"),\r\n            (b\"Content-Type\", b\"text/event-stream\"),\r\n            (b\"Transfer-Encoding\", b\"chunked\"),\r\n        ])\r\n        await self.send_body(\"event: e\\ndata: data goes here\\n\\n\".encode('utf-8'), more_body=True)\r\n\r\n        print('group add')\r\n\r\n        await self.channel_layer.group_add(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n        while True:\r\n            print('group send')\r\n            await asyncio.sleep(5)\r\n            await self.channel_layer.group_send(\r\n                self.room_group_name,\r\n                {\r\n                    'type': 'chat_message',\r\n                    'message': 'hi'\r\n                }\r\n            )\r\n\r\n    async def disconnect(self):\r\n        print('disocnnectin')\r\n        # Leave room group\r\n\r\n    async def chat_message(self, event):\r\n        print('chat_message')\r\n        message = event['message']\r\n\r\n        # Send message to WebSocket\r\n        await self.send(text_data=json.dumps({\r\n            'message': message\r\n        }))\r\n```\r\n\r\n`pip3 freeze` output: \r\n```\r\naioredis==1.2.0\r\nalabaster==0.7.11\r\nasgiref==3.2.1\r\nasn1crypto==0.24.0\r\nastroid==2.2.5\r\nasync-timeout==3.0.1\r\nattrs==19.1.0\r\nautobahn==19.8.1\r\nAutomat==0.7.0\r\nawscli==1.15.10\r\nBabel==2.6.0\r\nboto3==1.5.32\r\nbotocore==1.8.46\r\ncertifi==2018.4.16\r\ncffi==1.12.3\r\nchannels==2.2.0\r\nchannels-redis==2.4.0\r\nchardet==3.0.4\r\ncolorama==0.3.7\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ncycler==0.10.0\r\ndaphne==2.3.0\r\nDjango==2.0.6\r\ndocutils==0.14\r\nflake8==3.5.0\r\ngevent==1.4.0\r\ngreenlet==0.4.15\r\ngunicorn==19.8.1\r\nhiredis==1.0.0\r\nhyperlink==19.0.0\r\nidna==2.7\r\nimagesize==1.0.0\r\nincremental==17.5.0\r\nisort==4.3.20\r\nJinja2==2.10\r\njmespath==0.9.3\r\nkiwisolver==1.0.1\r\nlazy-object-proxy==1.4.1\r\nMarkupSafe==1.0\r\nmatplotlib==2.2.2\r\nmccabe==0.6.1\r\nmsgpack==0.6.1\r\nnumpy==1.14.5\r\npackaging==17.1\r\npick==0.6.4\r\npyasn1==0.4.2\r\npycodestyle==2.3.1\r\npycparser==2.19\r\npyflakes==1.6.0\r\nPygments==2.2.0\r\nPyHamcrest==1.9.0\r\npylint==2.3.1\r\npylint-django==2.0.9\r\npylint-plugin-utils==0.5\r\npyparsing==2.2.0\r\npython-dateutil==2.6.1\r\npytz==2018.5\r\nPyYAML==3.12\r\nredis==3.3.8\r\nrequests==2.19.1\r\nrsa==3.4.2\r\ns3transfer==0.1.13\r\nsix==1.12.0\r\nsnowballstemmer==1.2.1\r\nSphinx==1.7.6\r\nsphinxcontrib-websupport==1.1.0\r\nTwisted==19.7.0\r\ntxaio==18.8.1\r\ntyped-ast==1.3.5\r\nurllib3==1.23\r\nvirtualenv==16.0.0\r\nwebsocket==0.2.1\r\nwebsockets==8.0.2\r\nwkhtmltopdf==0.2\r\nwrapt==1.11.1\r\nzope.interface==4.6.0\r\n```\r\n\r\nI've reproduced this using both the `InMemoryChannelLayer` and the `RedisChannelLayer`. Repository for reproducing this issue is [here](https://github.com/kenjones21/channels_sse_example). The project was run using `python3 manage.py runserver`. Redis version (when using Redis backend) was 2.8, run through Docker per the tutorial in the documentation. Running on macOS 10.14.5. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1339", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1339/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1339/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1339/events", "html_url": "https://github.com/django/channels/issues/1339", "id": 483827772, "node_id": "MDU6SXNzdWU0ODM4Mjc3NzI=", "number": 1339, "title": "django channels periodic disconnection due to error reporting:JSONDecodeError", "user": {"login": "Davelyb", "id": 30972434, "node_id": "MDQ6VXNlcjMwOTcyNDM0", "avatar_url": "https://avatars3.githubusercontent.com/u/30972434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Davelyb", "html_url": "https://github.com/Davelyb", "followers_url": "https://api.github.com/users/Davelyb/followers", "following_url": "https://api.github.com/users/Davelyb/following{/other_user}", "gists_url": "https://api.github.com/users/Davelyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Davelyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Davelyb/subscriptions", "organizations_url": "https://api.github.com/users/Davelyb/orgs", "repos_url": "https://api.github.com/users/Davelyb/repos", "events_url": "https://api.github.com/users/Davelyb/events{/privacy}", "received_events_url": "https://api.github.com/users/Davelyb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-22T07:51:17Z", "updated_at": "2019-08-24T00:52:37Z", "closed_at": "2019-08-22T09:17:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I start Django channels locally using the python management.py runserver command, and then the front end connects via websocket javascript, the following error is reported every few seconds:\r\nWebSocket DISCONNECT /ws/ [10.203.42.114:51011]\r\nWebSocket HANDSHAKING /ws/ [10.203.42.114:51100]\r\nWebSocket CONNECT /ws/ [10.203.42.114:51100]\r\nException inside application: Expecting value: line 1 column 1 (char 0)\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/sessions.py\", line 179, in __call__\r\n    return await self.inner(receive, self.send)\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/middleware.py\", line 41, in coroutine_call\r\n    await inner_instance(receive, send)\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/consumer.py\", line 59, in __call__\r\n    [receive, self.channel_receive], self.dispatch\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/utils.py\", line 52, in await_many_dispatch\r\n    await dispatch(result)\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/consumer.py\", line 73, in dispatch\r\n    await handler(message)\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/generic/websocket.py\", line 196, in websocket_receive\r\n    await self.receive(text_data=message[\"text\"])\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/generic/websocket.py\", line 259, in receive\r\n    await self.receive_json(await self.decode_json(text_data), **kwargs)\r\n  File \"/Users/liuyabo/.local/share/virtualenvs/bs_channelsbackend_graphql-57bnZmLE/lib/python3.7/site-packages/channels/generic/websocket.py\", line 277, in decode_json\r\n    return json.loads(text_data)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py\", line 348, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py\", line 337, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py\", line 355, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\n  Expecting value: line 1 column 1 (char 0)\r\nWebSocket DISCONNECT /ws/ [10.203.42.114:51100]\r\nWebSocket HANDSHAKING /ws/ [10.203.42.114:51193]\r\nWebSocket CONNECT /ws/ [10.203.42.114:51193]\r\n\r\nhas anyone ever encountered this problem?\r\n\r\nEnvironment:\r\nOS: mac pro 10.13\r\n\r\nPython: 3.7\r\nMain python module:\r\nchannels==2.1.6\r\nchannels-redis==2.3.2\r\ndaphne==2.2.3\r\nDjango==2.1.4\r\n\r\nyarn: 1.13.0\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1338", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1338/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1338/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1338/events", "html_url": "https://github.com/django/channels/issues/1338", "id": 483050924, "node_id": "MDU6SXNzdWU0ODMwNTA5MjQ=", "number": 1338, "title": "Update Documentation For Tutorial To Use django.conf.urls", "user": {"login": "zimventures", "id": 23481310, "node_id": "MDQ6VXNlcjIzNDgxMzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/23481310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zimventures", "html_url": "https://github.com/zimventures", "followers_url": "https://api.github.com/users/zimventures/followers", "following_url": "https://api.github.com/users/zimventures/following{/other_user}", "gists_url": "https://api.github.com/users/zimventures/gists{/gist_id}", "starred_url": "https://api.github.com/users/zimventures/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zimventures/subscriptions", "organizations_url": "https://api.github.com/users/zimventures/orgs", "repos_url": "https://api.github.com/users/zimventures/repos", "events_url": "https://api.github.com/users/zimventures/events{/privacy}", "received_events_url": "https://api.github.com/users/zimventures/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-20T19:53:12Z", "updated_at": "2019-09-18T17:11:44Z", "closed_at": "2019-09-18T17:11:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Going through the tutorial, I hit an issue which resulted in no path being found while navigating to `/chat/lobby/`:\r\n\r\n## Stacktrace\r\n```\r\n127.0.0.1:65111 - - [19/Aug/2019:19:34:41] \"GET /chat/lobby/\" 200 1415\r\n2019-08-19 19:34:41,126 ERROR    [Failure instance: Traceback: <class 'ValueError'>: No route found for path 'ws/chat/lobby/'.\r\nc:\\program files\\python37\\lib\\site-packages\\autobahn\\websocket\\protocol.py:2844:processHandshake\r\nc:\\program files\\python37\\lib\\site-packages\\txaio\\tx.py:429:as_future\r\nc:\\program files\\python37\\lib\\site-packages\\twisted\\internet\\defer.py:151:maybeDeferred\r\nc:\\program files\\python37\\lib\\site-packages\\daphne\\ws_protocol.py:82:onConnect\r\n--- <exception caught here> ---\r\nc:\\program files\\python37\\lib\\site-packages\\twisted\\internet\\defer.py:151:maybeDeferred\r\nc:\\program files\\python37\\lib\\site-packages\\daphne\\server.py:200:create_application\r\nc:\\program files\\python37\\lib\\site-packages\\channels\\routing.py:58:__call__\r\nc:\\program files\\python37\\lib\\site-packages\\channels\\sessions.py:47:__call__\r\nc:\\program files\\python37\\lib\\site-packages\\channels\\sessions.py:145:__call__\r\nc:\\program files\\python37\\lib\\site-packages\\channels\\sessions.py:169:__init__\r\nc:\\program files\\python37\\lib\\site-packages\\channels\\middleware.py:31:__call__\r\nc:\\program files\\python37\\lib\\site-packages\\channels\\routing.py:154:__call__\r\n]\r\n127.0.0.1:65142 - - [19/Aug/2019:19:34:46] \"WSDISCONNECT /ws/chat/lobby/\" - -\r\n2019-08-19 19:36:12,508 INFO     Killed 0 pending application instances\r\n```\r\nTurns out, I was hitting the issue that is documented here: https://channels.readthedocs.io/en/latest/topics/routing.html\r\n\r\n```Please note that URLRouter nesting will not work properly with path() routes if inner routers are wrapped by additional middleware.```\r\n\r\nTaking a quick peek at the tutorial, URLRouter is indeed wrapped in middleware...oh noes!!!\r\n```\r\napplication = ProtocolTypeRouter({\r\n    # (http->django views is added by default)\r\n    'websocket': AuthMiddlewareStack(\r\n        URLRouter(\r\n            chat.routing.websocket_urlpatterns\r\n        )\r\n    ),\r\n})\r\n```\r\n\r\nThankfully, the fix is pretty easy! Within the `chat.routing.websocket_urlpatterns` list simply change the definition over to use url instead of path:\r\n\r\n```\r\nfrom django.conf.urls import url\r\nfrom . import consumers\r\n\r\nwebsocket_urlpatterns = [\r\n    url(r'ws/chat/(?P<room_name>\\w+)/$', consumers.ChatConsumer),\r\n]\r\n```\r\n- Your OS and runtime environment, and browser if applicable\r\nWindows 10 (running in a virtualenv for python 3.7) and Chrome\r\n\r\n- A `pip freeze` output showing your package versions\r\n```\r\nasgiref==3.2.1\r\nasn1crypto==0.24.0\r\nattrs==19.1.0\r\nautobahn==19.8.1\r\nAutomat==0.7.0\r\ncffi==1.12.3\r\nchannels==2.2.0\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ndaphne==2.3.0\r\nDjango==2.2.4\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\npytz==2019.2\r\nsix==1.12.0\r\nsqlparse==0.3.0\r\nTwisted==19.7.0\r\ntxaio==18.8.1\r\nzope.interface==4.6.0\r\n```\r\n- What you expected to happen vs. what actually happened\r\nExpected the websocket to connect, instead it timed out (client-side).\r\n\r\n- How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\nTried both runserver & daphne: both produced the same error\r\n\r\n- Console logs and full tracebacks of any errors\r\n(see above)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1336", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1336/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1336/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1336/events", "html_url": "https://github.com/django/channels/issues/1336", "id": 480115640, "node_id": "MDU6SXNzdWU0ODAxMTU2NDA=", "number": 1336, "title": "My model @property function is not fetch in @database_sync_to_async queryset filter", "user": {"login": "zserdcxftydfsc", "id": 54065484, "node_id": "MDQ6VXNlcjU0MDY1NDg0", "avatar_url": "https://avatars2.githubusercontent.com/u/54065484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zserdcxftydfsc", "html_url": "https://github.com/zserdcxftydfsc", "followers_url": "https://api.github.com/users/zserdcxftydfsc/followers", "following_url": "https://api.github.com/users/zserdcxftydfsc/following{/other_user}", "gists_url": "https://api.github.com/users/zserdcxftydfsc/gists{/gist_id}", "starred_url": "https://api.github.com/users/zserdcxftydfsc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zserdcxftydfsc/subscriptions", "organizations_url": "https://api.github.com/users/zserdcxftydfsc/orgs", "repos_url": "https://api.github.com/users/zserdcxftydfsc/repos", "events_url": "https://api.github.com/users/zserdcxftydfsc/events{/privacy}", "received_events_url": "https://api.github.com/users/zserdcxftydfsc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-13T11:56:32Z", "updated_at": "2019-08-14T18:37:27Z", "closed_at": "2019-08-14T18:37:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "**pip freeze**\r\naioredis==1.0.0\r\nasgiref==3.2.1\r\nasn1crypto==0.24.0\r\nasync-timeout==3.0.1\r\nattrs==19.1.0\r\nautobahn==19.8.1\r\nAutomat==0.7.0\r\nbackcall==0.1.0\r\nbeautifulsoup4==4.7.1\r\ncached-property==1.5.1\r\ncertifi==2019.6.16\r\ncffi==1.12.3\r\nchannels==2.2.0\r\nchannels-redis==2.4.0\r\nchardet==3.0.4\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ndaphne==2.3.0\r\ndecorator==4.4.0\r\nDjango==2.2\r\nhiredis==1.0.0\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\nipdb==0.12\r\nipython==7.5.0\r\nipython-genutils==0.2.0\r\njedi==0.14.0\r\nmsgpack==0.6.1\r\nmysqlclient==1.4.2.post1\r\nparso==0.5.0\r\npexpect==4.7.0\r\n\r\n**mymodel.py**\r\nclass Buy(models.Model):\r\n     \r\n    stop_price =  models.DecimalField(max_digits=16,decimal_places=8,verbose_name='Stop Price')\r\n    price= models.DecimalField(max_digits=16,decimal_places=8,verbose_name='Price')\r\n    amount= models.DecimalField(max_digits=16,decimal_places=8,verbose_name='Amount')\r\n    total=models.DecimalField(max_digits=16,decimal_places=8,verbose_name='Total')\r\n    \r\n    def __int__self(self):\r\n        return id\r\n        \r\n    @property\r\n    def buyamount(self):\r\n        amount = self.amount\r\n        sum_remain_qs = TradeHistory.objects.filter(Q(buy_id__id=self.id) & Q(view_type = 1))\r\n        sum_remain_amt = sum_remain_qs.aggregate(remain_amt =Sum('amount'))if sum_remain_qs else Decimal(0.00) \r\n        if sum_remain_amt:\r\n            calculate_amt = (abs(amount - sum_remain_amt['remain_amt']))\r\n        else:\r\n            calculate_amt = amount\r\n        #await asyncio.sleep(1)\r\n        #time.sleep(1)\r\n        return calculate_amt\r\n\r\n**consumer.py**\r\n@database_sync_to_async\r\n    def get_buyorder_list(self):\r\n       buyorder_qs = Buy.objects.filter(Q(status = 0) | Q(status = 4)).order_by('-price')     \r\n       return buyorder_qs\r\n**Note:**\r\nget_buyorder_list return all fields but except buyamount (property field) not fetch.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1333", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1333/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1333/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1333/events", "html_url": "https://github.com/django/channels/issues/1333", "id": 479053597, "node_id": "MDU6SXNzdWU0NzkwNTM1OTc=", "number": 1333, "title": "Get list of users connected to a group", "user": {"login": "mikejohnsonjr", "id": 10016923, "node_id": "MDQ6VXNlcjEwMDE2OTIz", "avatar_url": "https://avatars3.githubusercontent.com/u/10016923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikejohnsonjr", "html_url": "https://github.com/mikejohnsonjr", "followers_url": "https://api.github.com/users/mikejohnsonjr/followers", "following_url": "https://api.github.com/users/mikejohnsonjr/following{/other_user}", "gists_url": "https://api.github.com/users/mikejohnsonjr/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikejohnsonjr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikejohnsonjr/subscriptions", "organizations_url": "https://api.github.com/users/mikejohnsonjr/orgs", "repos_url": "https://api.github.com/users/mikejohnsonjr/repos", "events_url": "https://api.github.com/users/mikejohnsonjr/events{/privacy}", "received_events_url": "https://api.github.com/users/mikejohnsonjr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-09T15:48:45Z", "updated_at": "2019-08-14T18:53:51Z", "closed_at": "2019-08-14T18:53:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "So, I got as far as finding the `group_channels` function, but this doesn't seem to store user info. Example:\r\n\r\n\r\n    channel_layer = get_channel_layer()\r\n    context['players_list'] = channel_layer.group_channels('lobby')\r\n\r\nI get `{'players_list': ['daphne.response.WbZyUfNixL!sbzfJEzdPp', 'daphne.response.KfDHQnHLdw!DpoOqdGute', 'daphne.response.JqlcVVMuny!xHLDSaCzUz', 'daphne.response.mWrYVXDKoI!AjkyadSsPe']}` as a response.\r\n\r\nHow can I list users connected to Group('lobby')? Thanks in advance\r\n\r\nI'm using channels 1.x", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1331", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1331/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1331/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1331/events", "html_url": "https://github.com/django/channels/issues/1331", "id": 477747964, "node_id": "MDU6SXNzdWU0Nzc3NDc5NjQ=", "number": 1331, "title": "AsyncHttpConsumer example from documentation hangs in send_response()", "user": {"login": "yuriiz", "id": 811818, "node_id": "MDQ6VXNlcjgxMTgxOA==", "avatar_url": "https://avatars1.githubusercontent.com/u/811818?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuriiz", "html_url": "https://github.com/yuriiz", "followers_url": "https://api.github.com/users/yuriiz/followers", "following_url": "https://api.github.com/users/yuriiz/following{/other_user}", "gists_url": "https://api.github.com/users/yuriiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuriiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuriiz/subscriptions", "organizations_url": "https://api.github.com/users/yuriiz/orgs", "repos_url": "https://api.github.com/users/yuriiz/repos", "events_url": "https://api.github.com/users/yuriiz/events{/privacy}", "received_events_url": "https://api.github.com/users/yuriiz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220071673, "node_id": "MDU6TGFiZWwyMjAwNzE2NzM=", "url": "https://api.github.com/repos/django/channels/labels/documentation", "name": "documentation", "color": "159818", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-08-07T07:14:53Z", "updated_at": "2019-08-08T06:04:13Z", "closed_at": "2019-08-07T18:09:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've tried running example from https://channels.readthedocs.io/en/latest/topics/consumers.html#asynchttpconsumer but it does not work. It simply hangs up without sending any response body.\r\nI've followed https://channels.readthedocs.io/en/latest/tutorial/index.html exactly step by step. Added `channels` to INSTALLED_APPS, adjusted settings, added routing for `http` requests only and 1 single `AsyncHTTPConsumer`.\r\nDoing verification step from https://channels.readthedocs.io/en/latest/tutorial/part_2.html \"Let\u2019s make sure that the channel layer can communicate with Redis...\" also was performed successfully.\r\n\r\nExample project: https://github.com/yuriiz/myproject/\r\nSteps to reproduce:\r\n```\r\ngit clone https://github.com/yuriiz/myproject.git\r\ncd myproject\r\npip install -r requirements.txt\r\n./manage.py migrate\r\n./manage.py runserver\r\n```\r\nIn another terminal:\r\n```\r\ncurl localhost:8000/test\r\n```\r\nBut requests hangs indefinitely. In `runserver` output there is no error message or any other ouput.\r\nAfter adding logging to https://github.com/yuriiz/myproject/blob/master/myproject/consumers.py and retrying only log message before send_response() is shown i.e. send_response() never returns.\r\n\r\nIs there anything else which is not mentioned in documentation required to use AsyncHTTPConsumer?\r\n\r\nPlease also try and include, if you can:\r\n\r\n- Your OS and runtime environment, and browser if applicable\r\nTried on Ubuntu 19.04, Python3.7 and FreeBSD-11.3, Python3.6 with same result.\r\n- A `pip freeze` output showing your package versions\r\naioredis==1.2.0\r\nasgiref==3.2.1\r\nasn1crypto==0.24.0\r\nasync-timeout==3.0.1\r\nattrs==19.1.0\r\nautobahn==19.8.1\r\nAutomat==0.7.0\r\ncffi==1.12.3\r\nchannels==2.2.0\r\nchannels-redis==2.4.0\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ndaphne==2.3.0\r\nDjango==2.2.4\r\nhiredis==1.0.0\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\nmsgpack==0.6.1\r\npkg-resources==0.0.0\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\npytz==2019.2\r\nsix==1.12.0\r\nsqlparse==0.3.0\r\nTwisted==19.7.0\r\ntxaio==18.8.1\r\nzope.interface==4.6.0\r\n- What you expected to happen vs. what actually happened\r\nServer should return response. It hang up.\r\n- How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\nrunserver\r\n- Console logs and full tracebacks of any errors\r\n```\r\n$ python manage.py runserver\r\nWatching for file changes with StatReloader\r\nPerforming system checks...\r\n\r\nSystem check identified no issues (0 silenced).\r\nAugust 07, 2019 - 07:03:47\r\nDjango version 2.2.4, using settings 'myproject.settings'\r\nStarting ASGI/Channels version 2.2.0 development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\n***before send_response()\r\n(hangs)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1327", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1327/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1327/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1327/events", "html_url": "https://github.com/django/channels/issues/1327", "id": 476696015, "node_id": "MDU6SXNzdWU0NzY2OTYwMTU=", "number": 1327, "title": "### BUG", "user": {"login": "Jmxmanman", "id": 42801311, "node_id": "MDQ6VXNlcjQyODAxMzEx", "avatar_url": "https://avatars0.githubusercontent.com/u/42801311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jmxmanman", "html_url": "https://github.com/Jmxmanman", "followers_url": "https://api.github.com/users/Jmxmanman/followers", "following_url": "https://api.github.com/users/Jmxmanman/following{/other_user}", "gists_url": "https://api.github.com/users/Jmxmanman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jmxmanman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jmxmanman/subscriptions", "organizations_url": "https://api.github.com/users/Jmxmanman/orgs", "repos_url": "https://api.github.com/users/Jmxmanman/repos", "events_url": "https://api.github.com/users/Jmxmanman/events{/privacy}", "received_events_url": "https://api.github.com/users/Jmxmanman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-05T07:19:26Z", "updated_at": "2019-08-05T07:19:41Z", "closed_at": "2019-08-05T07:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Issues are for **concrete, actionable bugs and feature requests** only - if you're just asking for debugging help or technical support we have to direct you elsewhere. If you just have questions or support requests please use:\r\n\r\n- Stack Overflow\r\n- The Django Users mailing list django-users@googlegroups.com (https://groups.google.com/forum/#!forum/django-users)\r\n\r\nWe have to limit this because of limited volunteer time to respond to issues!\r\n\r\nPlease also try and include, if you can:\r\n\r\n- Your OS and runtime environment, and browser if applicable\r\n  - Windows 10\r\n- A `pip freeze` output showing your package versions\r\n  - channels \r\n  - python 3.5.4\r\n- What you expected to happen vs. what actually happened\r\n- How you're running Channels (runserver? daphne/runworker? Nginx/Apache in front?)\r\n  - runserver\r\n- Console logs and full tracebacks of any errors\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1326", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1326/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1326/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1326/events", "html_url": "https://github.com/django/channels/issues/1326", "id": 476124182, "node_id": "MDU6SXNzdWU0NzYxMjQxODI=", "number": 1326, "title": "Question: Should I use the same reddis server for self-caching, celery, django cache, and Channel layers?", "user": {"login": "caniko", "id": 29519599, "node_id": "MDQ6VXNlcjI5NTE5NTk5", "avatar_url": "https://avatars0.githubusercontent.com/u/29519599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caniko", "html_url": "https://github.com/caniko", "followers_url": "https://api.github.com/users/caniko/followers", "following_url": "https://api.github.com/users/caniko/following{/other_user}", "gists_url": "https://api.github.com/users/caniko/gists{/gist_id}", "starred_url": "https://api.github.com/users/caniko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caniko/subscriptions", "organizations_url": "https://api.github.com/users/caniko/orgs", "repos_url": "https://api.github.com/users/caniko/repos", "events_url": "https://api.github.com/users/caniko/events{/privacy}", "received_events_url": "https://api.github.com/users/caniko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-02T11:01:09Z", "updated_at": "2019-08-02T12:23:20Z", "closed_at": "2019-08-02T12:23:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1325", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1325/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1325/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1325/events", "html_url": "https://github.com/django/channels/issues/1325", "id": 474817020, "node_id": "MDU6SXNzdWU0NzQ4MTcwMjA=", "number": 1325, "title": "JSON improperly delivered in production over nginx", "user": {"login": "addsimm", "id": 2389450, "node_id": "MDQ6VXNlcjIzODk0NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2389450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/addsimm", "html_url": "https://github.com/addsimm", "followers_url": "https://api.github.com/users/addsimm/followers", "following_url": "https://api.github.com/users/addsimm/following{/other_user}", "gists_url": "https://api.github.com/users/addsimm/gists{/gist_id}", "starred_url": "https://api.github.com/users/addsimm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/addsimm/subscriptions", "organizations_url": "https://api.github.com/users/addsimm/orgs", "repos_url": "https://api.github.com/users/addsimm/repos", "events_url": "https://api.github.com/users/addsimm/events{/privacy}", "received_events_url": "https://api.github.com/users/addsimm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-30T20:56:23Z", "updated_at": "2019-07-31T05:35:01Z", "closed_at": "2019-07-31T05:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using a local server the following code works fine in that the client side JS can capture all parts of the event:\r\n\r\n `\r\n\r\n    class ChatConsumer(AsyncJsonWebsocketConsumer):\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n        if self.groups is None:\r\n            self.groups = []\r\n        self.room_name = self.scope['url_route']['kwargs']['room_name']\r\n        self.room_group_name = 'chat_%s' % self.room_name\r\n\r\n    async def connect(self):\r\n        # Join room group\r\n        await self.channel_layer.group_add(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n        await self.accept()\r\n\r\n    async def disconnect(self, close_code):\r\n        # Leave room group\r\n        await self.channel_layer.group_discard(\r\n            self.room_group_name,\r\n            self.channel_name\r\n        )\r\n\r\n    # Receive message from WebSocket\r\n    async def receive_json(self, content, **kwargs):\r\n        message = content['message']\r\n        typ = content['type']\r\n\r\n        if typ == 'chat_message':\r\n            # Send message to room group\r\n            await self.channel_layer.group_send(self.room_group_name, {\r\n                'type': 'chat_message',\r\n                'username': self.scope['user'].get_full_name(),\r\n                'message': message\r\n            })\r\n\r\n        if typ == 'heartbeat':\r\n            # Send message to room group\r\n            await self.channel_layer.group_send(self.room_group_name, {\r\n                'type': 'heartbeat',\r\n                'username': self.scope['user'].get_full_name(),\r\n                'message': message\r\n            })\r\n\r\n    # Receive message from room group\r\n    async def chat_message(self, event):\r\n        # Send message to WebSocket\r\n        await self.send_json(event)\r\n\r\n    async def heartbeat(self, event):\r\n        # Send message to WebSocket\r\n        await self.send_json(event)`\r\n    \r\nHowever in production (the same code but under daphne, gunicorn, nginx) only part of the object is delivered\r\n\r\nhere are some excerpts from the console.log:\r\n\r\nlocal development:\r\n\r\n`data received: {\"type\":\"chat_message\",\"username\":\"Adam Simon\",\"message\":\"- Adam S. has arrived -\"}\r\n\r\n?user_id=2:580 type: chat_message\r\n\r\n?user_id=2:576 data received: {\"type\":\"heartbeat\",\"username\":\"Adam Simon\",\"message\":\"Adam S.here for seconds: 2\"}\r\n\r\n?user_id=2:580 type: heartbeat\r\n\r\n\r\nproduction:\r\n\r\n`data received: {\"message\":\"- Adam S. has arrived -\"}\r\n\r\n?user_id=2:580 type: undefined\r\n\r\n?user_id=2:576 data received: {\"message\":\"Adam S.here for seconds: 2\"}\r\n\r\n?user_id=2:580 type: undefined\r\n\r\n?user_id=2:576 data received: {\"message\":\"Adam S.here for seconds: 4\"}\r\n\r\n?user_id=2:580 type: undefined`\r\n\r\n\r\nfor some reason the object is not all there, I am guessing the issue is with channels or unix, so here is my current nginx file:\r\n\r\n`server {\r\n    server_name 159.65.105.226 joinourstory.com www.joinourstory.com;\r\n\r\n    location = /favicon.ico { access_log off; log_not_found off; }\r\n\r\n    # ADAM add\r\n    location /ws/chat/ {\r\n        proxy_pass http://127.0.0.1:8001;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header Upgrade $http_upgrade;\r\n        proxy_set_header Connection \"upgrade\";\r\n    }\r\n\r\n    location /static/ {\r\n        root /home/adam/LOCdojos;\r\n    }\r\n\r\n    location / {\r\n        include proxy_params;\r\n        proxy_pass http://unix:/home/adam/LOCdojos/dojos.sock;\r\n    }\r\n \r\n    .\r\n    .\r\n    .\r\n\r\n}\r\n\r\n\r\nserver {\r\n\r\n    if ($host = www.joinourstory.com) {\r\n        return 301 https://$host$request_uri;\r\n    } # managed by Certbot\r\n\r\n    .\r\n    .\r\n    .\r\n\r\n}\r\n\r\nHappy to provide any other info -\r\n\r\n~ `\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1324", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1324/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1324/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1324/events", "html_url": "https://github.com/django/channels/issues/1324", "id": 473470076, "node_id": "MDU6SXNzdWU0NzM0NzAwNzY=", "number": 1324, "title": "How to refresh a session in consumers?", "user": {"login": "DiDHack", "id": 29057923, "node_id": "MDQ6VXNlcjI5MDU3OTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/29057923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiDHack", "html_url": "https://github.com/DiDHack", "followers_url": "https://api.github.com/users/DiDHack/followers", "following_url": "https://api.github.com/users/DiDHack/following{/other_user}", "gists_url": "https://api.github.com/users/DiDHack/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiDHack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiDHack/subscriptions", "organizations_url": "https://api.github.com/users/DiDHack/orgs", "repos_url": "https://api.github.com/users/DiDHack/repos", "events_url": "https://api.github.com/users/DiDHack/events{/privacy}", "received_events_url": "https://api.github.com/users/DiDHack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-26T17:53:53Z", "updated_at": "2020-05-14T14:49:51Z", "closed_at": "2019-07-31T08:15:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I log in by HTTP then create a websocket-connection. The consumer gets the user's session. Fine.\r\nAfter, I log out by HTTP (the standard django's logout) but the socket continues working (sees the old user and lets working with the connection) because it has the old session's data. I tried to use get_user(self.scope) but it returnes a user from old session. Only a socket's reconnection helps.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1323", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1323/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1323/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1323/events", "html_url": "https://github.com/django/channels/issues/1323", "id": 470941488, "node_id": "MDU6SXNzdWU0NzA5NDE0ODg=", "number": 1323, "title": "How can I decide if a user is online or not?", "user": {"login": "mttbx", "id": 38148377, "node_id": "MDQ6VXNlcjM4MTQ4Mzc3", "avatar_url": "https://avatars3.githubusercontent.com/u/38148377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mttbx", "html_url": "https://github.com/mttbx", "followers_url": "https://api.github.com/users/mttbx/followers", "following_url": "https://api.github.com/users/mttbx/following{/other_user}", "gists_url": "https://api.github.com/users/mttbx/gists{/gist_id}", "starred_url": "https://api.github.com/users/mttbx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mttbx/subscriptions", "organizations_url": "https://api.github.com/users/mttbx/orgs", "repos_url": "https://api.github.com/users/mttbx/repos", "events_url": "https://api.github.com/users/mttbx/events{/privacy}", "received_events_url": "https://api.github.com/users/mttbx/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-22T07:40:34Z", "updated_at": "2019-07-22T08:02:06Z", "closed_at": "2019-07-22T08:02:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "How can I decide if a user is online or not? I need to save the message to the dataset if the the user  to whom I want to publish message is not online.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1321", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1321/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1321/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1321/events", "html_url": "https://github.com/django/channels/issues/1321", "id": 469703321, "node_id": "MDU6SXNzdWU0Njk3MDMzMjE=", "number": 1321, "title": "websocket reject and disconnect connection with vue.js", "user": {"login": "marlin-dev", "id": 46589585, "node_id": "MDQ6VXNlcjQ2NTg5NTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/46589585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marlin-dev", "html_url": "https://github.com/marlin-dev", "followers_url": "https://api.github.com/users/marlin-dev/followers", "following_url": "https://api.github.com/users/marlin-dev/following{/other_user}", "gists_url": "https://api.github.com/users/marlin-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/marlin-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marlin-dev/subscriptions", "organizations_url": "https://api.github.com/users/marlin-dev/orgs", "repos_url": "https://api.github.com/users/marlin-dev/repos", "events_url": "https://api.github.com/users/marlin-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/marlin-dev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-18T10:55:53Z", "updated_at": "2019-07-31T08:16:13Z", "closed_at": "2019-07-31T08:16:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\n\r\nour team having issue on connection to websocket via Vue.js app.\r\nconfiguration of channels applied as mentioned on docs. I am using asigiref async_to_sync function to send data to channel_layer.\r\neverything works fine on default browser. When Vue app tries to connect where attemption  get rejected. it Actually disconnects from websocket, what could be the problem, have faced this problem before?\r\nBelow attaching the codes and pictures:\r\n\r\n\r\nconsumer.py:\r\nhttps://pastebin.com/dxrCy4YX\r\n\r\nvue.js:\r\nhttps://pastebin.com/SKA4Y3hm\r\n\r\nerror:\r\n![Screenshot from 2019-07-17 19-15-32](https://user-images.githubusercontent.com/46589585/61451044-8801f280-a969-11e9-945c-514d32402ce1.png)\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1318", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1318/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1318/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1318/events", "html_url": "https://github.com/django/channels/issues/1318", "id": 467725103, "node_id": "MDU6SXNzdWU0Njc3MjUxMDM=", "number": 1318, "title": "find a bug ", "user": {"login": "beata2", "id": 25999560, "node_id": "MDQ6VXNlcjI1OTk5NTYw", "avatar_url": "https://avatars1.githubusercontent.com/u/25999560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beata2", "html_url": "https://github.com/beata2", "followers_url": "https://api.github.com/users/beata2/followers", "following_url": "https://api.github.com/users/beata2/following{/other_user}", "gists_url": "https://api.github.com/users/beata2/gists{/gist_id}", "starred_url": "https://api.github.com/users/beata2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beata2/subscriptions", "organizations_url": "https://api.github.com/users/beata2/orgs", "repos_url": "https://api.github.com/users/beata2/repos", "events_url": "https://api.github.com/users/beata2/events{/privacy}", "received_events_url": "https://api.github.com/users/beata2/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-13T14:14:51Z", "updated_at": "2019-07-13T14:22:11Z", "closed_at": "2019-07-13T14:22:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "_**learn**_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1317", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1317/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1317/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1317/events", "html_url": "https://github.com/django/channels/issues/1317", "id": 463349058, "node_id": "MDU6SXNzdWU0NjMzNDkwNTg=", "number": 1317, "title": "Raising ResponseLater() produces error in Django 1.10+", "user": {"login": "kenjones21", "id": 5460117, "node_id": "MDQ6VXNlcjU0NjAxMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/5460117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenjones21", "html_url": "https://github.com/kenjones21", "followers_url": "https://api.github.com/users/kenjones21/followers", "following_url": "https://api.github.com/users/kenjones21/following{/other_user}", "gists_url": "https://api.github.com/users/kenjones21/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenjones21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenjones21/subscriptions", "organizations_url": "https://api.github.com/users/kenjones21/orgs", "repos_url": "https://api.github.com/users/kenjones21/repos", "events_url": "https://api.github.com/users/kenjones21/events{/privacy}", "received_events_url": "https://api.github.com/users/kenjones21/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-02T17:26:49Z", "updated_at": "2019-07-03T15:08:26Z", "closed_at": "2019-07-03T13:47:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Description\r\n\r\nWhen raising a `AsgiRequest.ResponseLater` exception with channels 1.1.8, django projects using django 1.10+ produce the following error.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/kennethweaver/.virtualenvs/djangodev/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/Users/kennethweaver/.virtualenvs/djangodev/lib/python3.6/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/Users/kennethweaver/.virtualenvs/djangodev/lib/python3.6/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Users/kennethweaver/.virtualenvs/djangodev/lib/python3.6/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Users/kennethweaver/Documents/test-project/testchannels/testapp/views.py\", line 7, in subscribe\r\n    raise AsgiRequest.ResponseLater()\r\nchannels.exceptions.ResponseLater\r\n```\r\nPip freeze is below:\r\n```\r\nasgiref==1.1.2\r\nasn1crypto==0.24.0\r\nattrs==19.1.0\r\nautobahn==19.6.2\r\nAutomat==0.7.0\r\ncffi==1.12.3\r\nchannels==1.1.8\r\nconstantly==15.1.0\r\ncryptography==2.7\r\ndaphne==1.4.2\r\nDjango==1.10\r\nhyperlink==19.0.0\r\nidna==2.8\r\nincremental==17.5.0\r\npycparser==2.19\r\nPyHamcrest==1.9.0\r\nsix==1.12.0\r\nTwisted==19.2.1\r\ntxaio==18.8.1\r\nzope.interface==4.6.0\r\n```\r\n\r\nRunning on MacOS 10.14.5, python 3.6.4. \r\n\r\n## To reproduce\r\n\r\n1. Clone [this repository](https://github.com/kenjones21/channels_118_issue).\r\n2. Install channels and django (pip3 install django==1.10.0 channels==1.1.8)\r\n3. Run the server (`python manage.py runserver`)\r\n4. Make a call to `localhost:8000/test`\r\n5. Observe error in console", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1315", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1315/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1315/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1315/events", "html_url": "https://github.com/django/channels/issues/1315", "id": 462685960, "node_id": "MDU6SXNzdWU0NjI2ODU5NjA=", "number": 1315, "title": "Daphne takes the channel layer as an argument?", "user": {"login": "oTree-org", "id": 5423929, "node_id": "MDQ6VXNlcjU0MjM5Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5423929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oTree-org", "html_url": "https://github.com/oTree-org", "followers_url": "https://api.github.com/users/oTree-org/followers", "following_url": "https://api.github.com/users/oTree-org/following{/other_user}", "gists_url": "https://api.github.com/users/oTree-org/gists{/gist_id}", "starred_url": "https://api.github.com/users/oTree-org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oTree-org/subscriptions", "organizations_url": "https://api.github.com/users/oTree-org/orgs", "repos_url": "https://api.github.com/users/oTree-org/repos", "events_url": "https://api.github.com/users/oTree-org/events{/privacy}", "received_events_url": "https://api.github.com/users/oTree-org/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 220071673, "node_id": "MDU6TGFiZWwyMjAwNzE2NzM=", "url": "https://api.github.com/repos/django/channels/labels/documentation", "name": "documentation", "color": "159818", "default": true, "description": null}, {"id": 431300040, "node_id": "MDU6TGFiZWw0MzEzMDAwNDA=", "url": "https://api.github.com/repos/django/channels/labels/exp/beginner", "name": "exp/beginner", "color": "bfdadc", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-01T12:27:08Z", "updated_at": "2020-01-15T19:48:59Z", "closed_at": "2020-01-15T19:48:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "The deploy docs say:\r\n\r\n> Then, you can run Daphne and supply the channel layer as the argument:\r\n> \r\n> daphne myproject.asgi:application\r\n\r\nhttps://channels.readthedocs.io/en/latest/deploying.html#http-and-websocket\r\n\r\nIsn't that argument the application, not the channel layer? They are the same thing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1314", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1314/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1314/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1314/events", "html_url": "https://github.com/django/channels/issues/1314", "id": 462676250, "node_id": "MDU6SXNzdWU0NjI2NzYyNTA=", "number": 1314, "title": "Documentation of in-memory channel layer", "user": {"login": "oTree-org", "id": 5423929, "node_id": "MDQ6VXNlcjU0MjM5Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5423929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oTree-org", "html_url": "https://github.com/oTree-org", "followers_url": "https://api.github.com/users/oTree-org/followers", "following_url": "https://api.github.com/users/oTree-org/following{/other_user}", "gists_url": "https://api.github.com/users/oTree-org/gists{/gist_id}", "starred_url": "https://api.github.com/users/oTree-org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oTree-org/subscriptions", "organizations_url": "https://api.github.com/users/oTree-org/orgs", "repos_url": "https://api.github.com/users/oTree-org/repos", "events_url": "https://api.github.com/users/oTree-org/events{/privacy}", "received_events_url": "https://api.github.com/users/oTree-org/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-01T12:04:28Z", "updated_at": "2020-02-02T12:57:38Z", "closed_at": "2019-07-01T12:10:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The docs say: \r\n\r\n> Channels does not ship with any channel layers you can use out of the box\r\n\r\nhttps://channels.readthedocs.io/en/latest/topics/channel_layers.html\r\n\r\nWhat about `channels.layers.InMemoryChannelLayer`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1311", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1311/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1311/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1311/events", "html_url": "https://github.com/django/channels/issues/1311", "id": 461449318, "node_id": "MDU6SXNzdWU0NjE0NDkzMTg=", "number": 1311, "title": "not issue, question", "user": {"login": "marlin-dev", "id": 46589585, "node_id": "MDQ6VXNlcjQ2NTg5NTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/46589585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marlin-dev", "html_url": "https://github.com/marlin-dev", "followers_url": "https://api.github.com/users/marlin-dev/followers", "following_url": "https://api.github.com/users/marlin-dev/following{/other_user}", "gists_url": "https://api.github.com/users/marlin-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/marlin-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marlin-dev/subscriptions", "organizations_url": "https://api.github.com/users/marlin-dev/orgs", "repos_url": "https://api.github.com/users/marlin-dev/repos", "events_url": "https://api.github.com/users/marlin-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/marlin-dev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-27T10:28:34Z", "updated_at": "2019-07-01T15:17:19Z", "closed_at": "2019-07-01T10:19:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am build web-app with MQTT mosquito broker, in order to make connections between devices and web applications. devices will publish data to broker we will listen to each topic and recive datas. We should use websocket for that in order to push web real-time data to front. Do you think we can use django-channels for that? is there samples, anyone has used MQTT protocol over django-cahnnels?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1310", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1310/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1310/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1310/events", "html_url": "https://github.com/django/channels/issues/1310", "id": 460181240, "node_id": "MDU6SXNzdWU0NjAxODEyNDA=", "number": 1310, "title": "How to Get History Chat Records", "user": {"login": "he429134733", "id": 44768024, "node_id": "MDQ6VXNlcjQ0NzY4MDI0", "avatar_url": "https://avatars0.githubusercontent.com/u/44768024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/he429134733", "html_url": "https://github.com/he429134733", "followers_url": "https://api.github.com/users/he429134733/followers", "following_url": "https://api.github.com/users/he429134733/following{/other_user}", "gists_url": "https://api.github.com/users/he429134733/gists{/gist_id}", "starred_url": "https://api.github.com/users/he429134733/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/he429134733/subscriptions", "organizations_url": "https://api.github.com/users/he429134733/orgs", "repos_url": "https://api.github.com/users/he429134733/repos", "events_url": "https://api.github.com/users/he429134733/events{/privacy}", "received_events_url": "https://api.github.com/users/he429134733/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-25T02:47:05Z", "updated_at": "2019-07-03T13:53:57Z", "closed_at": "2019-07-03T13:53:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to get history chat records in redis? i saw chat records in redis, but i do not know how to get  it...  i do not want to save caht records in mysqldb.   my English is not very well...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1309", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1309/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1309/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1309/events", "html_url": "https://github.com/django/channels/issues/1309", "id": 456513889, "node_id": "MDU6SXNzdWU0NTY1MTM4ODk=", "number": 1309, "title": "Channels on Kubernetes", "user": {"login": "GerdNL", "id": 37505871, "node_id": "MDQ6VXNlcjM3NTA1ODcx", "avatar_url": "https://avatars0.githubusercontent.com/u/37505871?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GerdNL", "html_url": "https://github.com/GerdNL", "followers_url": "https://api.github.com/users/GerdNL/followers", "following_url": "https://api.github.com/users/GerdNL/following{/other_user}", "gists_url": "https://api.github.com/users/GerdNL/gists{/gist_id}", "starred_url": "https://api.github.com/users/GerdNL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GerdNL/subscriptions", "organizations_url": "https://api.github.com/users/GerdNL/orgs", "repos_url": "https://api.github.com/users/GerdNL/repos", "events_url": "https://api.github.com/users/GerdNL/events{/privacy}", "received_events_url": "https://api.github.com/users/GerdNL/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-15T08:26:21Z", "updated_at": "2020-01-25T04:31:37Z", "closed_at": "2019-06-15T18:19:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "is channels kubernetes ready to deploy on scaling pods?\r\nHas this been done yet?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1307", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1307/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1307/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1307/events", "html_url": "https://github.com/django/channels/issues/1307", "id": 456080630, "node_id": "MDU6SXNzdWU0NTYwODA2MzA=", "number": 1307, "title": "Make \"WebsocketDemultiplexer\" available in 2.x series of Django Channels", "user": {"login": "dushiboy", "id": 40533685, "node_id": "MDQ6VXNlcjQwNTMzNjg1", "avatar_url": "https://avatars2.githubusercontent.com/u/40533685?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dushiboy", "html_url": "https://github.com/dushiboy", "followers_url": "https://api.github.com/users/dushiboy/followers", "following_url": "https://api.github.com/users/dushiboy/following{/other_user}", "gists_url": "https://api.github.com/users/dushiboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dushiboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dushiboy/subscriptions", "organizations_url": "https://api.github.com/users/dushiboy/orgs", "repos_url": "https://api.github.com/users/dushiboy/repos", "events_url": "https://api.github.com/users/dushiboy/events{/privacy}", "received_events_url": "https://api.github.com/users/dushiboy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-14T06:24:03Z", "updated_at": "2019-06-14T06:29:10Z", "closed_at": "2019-06-14T06:29:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "\"WebsocketDemultiplexer\" is not available in 2.x series the latest of Django Channels but only available on 1.x series of Django Channels. Is there any security or performance related reason for removing  \"WebsocketDemultiplexer\". Can you make \"WebsocketDemultiplexer\" available on 2.x series the latest of Django Channels.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1306", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1306/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1306/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1306/events", "html_url": "https://github.com/django/channels/issues/1306", "id": 454293920, "node_id": "MDU6SXNzdWU0NTQyOTM5MjA=", "number": 1306, "title": "need examples of customized ChannelLayer", "user": {"login": "dsun-ge", "id": 47542977, "node_id": "MDQ6VXNlcjQ3NTQyOTc3", "avatar_url": "https://avatars2.githubusercontent.com/u/47542977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dsun-ge", "html_url": "https://github.com/dsun-ge", "followers_url": "https://api.github.com/users/dsun-ge/followers", "following_url": "https://api.github.com/users/dsun-ge/following{/other_user}", "gists_url": "https://api.github.com/users/dsun-ge/gists{/gist_id}", "starred_url": "https://api.github.com/users/dsun-ge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dsun-ge/subscriptions", "organizations_url": "https://api.github.com/users/dsun-ge/orgs", "repos_url": "https://api.github.com/users/dsun-ge/repos", "events_url": "https://api.github.com/users/dsun-ge/events{/privacy}", "received_events_url": "https://api.github.com/users/dsun-ge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-10T18:03:04Z", "updated_at": "2019-06-10T21:37:24Z", "closed_at": "2019-06-10T21:37:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you provide an example of custom channel layer that extends BaseChannelLayer and gets messages from mysql database? Many thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1305", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1305/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1305/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1305/events", "html_url": "https://github.com/django/channels/issues/1305", "id": 451782158, "node_id": "MDU6SXNzdWU0NTE3ODIxNTg=", "number": 1305, "title": "Why is the cookie in scope empty and user is anonymous?", "user": {"login": "zdYng", "id": 17880611, "node_id": "MDQ6VXNlcjE3ODgwNjEx", "avatar_url": "https://avatars3.githubusercontent.com/u/17880611?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zdYng", "html_url": "https://github.com/zdYng", "followers_url": "https://api.github.com/users/zdYng/followers", "following_url": "https://api.github.com/users/zdYng/following{/other_user}", "gists_url": "https://api.github.com/users/zdYng/gists{/gist_id}", "starred_url": "https://api.github.com/users/zdYng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zdYng/subscriptions", "organizations_url": "https://api.github.com/users/zdYng/orgs", "repos_url": "https://api.github.com/users/zdYng/repos", "events_url": "https://api.github.com/users/zdYng/events{/privacy}", "received_events_url": "https://api.github.com/users/zdYng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-04T03:35:27Z", "updated_at": "2019-06-28T09:29:29Z", "closed_at": "2019-06-04T13:45:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "![image](https://user-images.githubusercontent.com/17880611/58849400-c8105d00-86bc-11e9-9542-29f40ff5f3d3.png)\r\n\r\nAs shown\uff0cthanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1304", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1304/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1304/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1304/events", "html_url": "https://github.com/django/channels/issues/1304", "id": 449110119, "node_id": "MDU6SXNzdWU0NDkxMTAxMTk=", "number": 1304, "title": "typo in the doc for channels version", "user": {"login": "LukeVideo", "id": 5247150, "node_id": "MDQ6VXNlcjUyNDcxNTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/5247150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukeVideo", "html_url": "https://github.com/LukeVideo", "followers_url": "https://api.github.com/users/LukeVideo/followers", "following_url": "https://api.github.com/users/LukeVideo/following{/other_user}", "gists_url": "https://api.github.com/users/LukeVideo/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukeVideo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukeVideo/subscriptions", "organizations_url": "https://api.github.com/users/LukeVideo/orgs", "repos_url": "https://api.github.com/users/LukeVideo/repos", "events_url": "https://api.github.com/users/LukeVideo/events{/privacy}", "received_events_url": "https://api.github.com/users/LukeVideo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-28T07:39:44Z", "updated_at": "2019-06-04T13:41:46Z", "closed_at": "2019-06-04T13:41:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Going through the channels tutorial i couldn't get the desired channels version with this command\r\n\r\n`\r\n$ python3 -c 'import channels; print(channels.__version__)\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\nAttributeError: module 'channels' has no attribute 'version'\r\n`\r\nbut \r\n`\r\npython3 -c 'import channels; print(channels.sys.version)'\r\n3.6.6 (default, Jul 19 2018, 16:29:00) \r\n[GCC 7.3.1 20180303 (Red Hat 7.3.1-5)]\r\n`\r\nNothing major, but still worth an update i guess.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1303", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1303/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1303/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1303/events", "html_url": "https://github.com/django/channels/issues/1303", "id": 448870117, "node_id": "MDU6SXNzdWU0NDg4NzAxMTc=", "number": 1303, "title": "Testing Invalid Syntax", "user": {"login": "kroeker97", "id": 33117303, "node_id": "MDQ6VXNlcjMzMTE3MzAz", "avatar_url": "https://avatars0.githubusercontent.com/u/33117303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kroeker97", "html_url": "https://github.com/kroeker97", "followers_url": "https://api.github.com/users/kroeker97/followers", "following_url": "https://api.github.com/users/kroeker97/following{/other_user}", "gists_url": "https://api.github.com/users/kroeker97/gists{/gist_id}", "starred_url": "https://api.github.com/users/kroeker97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kroeker97/subscriptions", "organizations_url": "https://api.github.com/users/kroeker97/orgs", "repos_url": "https://api.github.com/users/kroeker97/repos", "events_url": "https://api.github.com/users/kroeker97/events{/privacy}", "received_events_url": "https://api.github.com/users/kroeker97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-27T13:55:18Z", "updated_at": "2019-06-18T07:03:22Z", "closed_at": "2019-06-17T18:44:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI try to write some tests my own, I can initialize a communicator like this\r\n```python\r\ncommunicator = WebsocketCommunicator(application, \"/lobbylist/\")\r\n```\r\n\r\nBut whenever I try to call this method, a syntax error appears.\r\n```python\r\nconnected, subprotocol = await communicator.connect()\r\n```\r\n\r\nTest without calling connect \r\n```\r\nCreating test database for alias 'default'...\r\nSystem check identified no issues (0 silenced).\r\n<channels.testing.websocket.WebsocketCommunicator object at 0x7ff519db9b38>\r\n.\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.810s\r\n\r\nOK\r\nDestroying test database for alias 'default'...\r\n```\r\n\r\nTest with calling connect \r\n```\r\nSystem check identified no issues (0 silenced).\r\nE\r\n======================================================================\r\nERROR: lobby.tests (unittest.loader._FailedTest)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: lobby.tests\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/unittest/loader.py\", line 428, in _find_test_path\r\n    module = self._get_module_from_name(name)\r\n  File \"/usr/lib/python3.6/unittest/loader.py\", line 369, in _get_module_from_name\r\n    __import__(name)\r\n  File \"/home/kroeker/cardholder/server-side/src/lobby/tests.py\", line 31\r\n    connected, subprotocol = await communicator.connect()\r\n                                              ^\r\nSyntaxError: invalid syntax\r\n```\r\n\r\nIs it a problem because of me? I just do it like in the documentation.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1298", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1298/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1298/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1298/events", "html_url": "https://github.com/django/channels/issues/1298", "id": 442510867, "node_id": "MDU6SXNzdWU0NDI1MTA4Njc=", "number": 1298, "title": "When I establish a socket connection.Protocol error, got \"H\" as reply type byte.", "user": {"login": "appleUserName", "id": 14973392, "node_id": "MDQ6VXNlcjE0OTczMzky", "avatar_url": "https://avatars0.githubusercontent.com/u/14973392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/appleUserName", "html_url": "https://github.com/appleUserName", "followers_url": "https://api.github.com/users/appleUserName/followers", "following_url": "https://api.github.com/users/appleUserName/following{/other_user}", "gists_url": "https://api.github.com/users/appleUserName/gists{/gist_id}", "starred_url": "https://api.github.com/users/appleUserName/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/appleUserName/subscriptions", "organizations_url": "https://api.github.com/users/appleUserName/orgs", "repos_url": "https://api.github.com/users/appleUserName/repos", "events_url": "https://api.github.com/users/appleUserName/events{/privacy}", "received_events_url": "https://api.github.com/users/appleUserName/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-10T02:30:37Z", "updated_at": "2019-08-14T18:57:56Z", "closed_at": "2019-08-14T18:57:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "asgi-redis 1.4.3\r\nasgiref 3.1.2\r\nchannels 2.2.0\r\nchannels-redis 2.4.0\r\nredis 2.10.6\r\ndjango 2.1.5\r\nI use these packages in django project.\r\nWhen I resume websocket communication\uff0cI get a error:Protocol error, got \"H\" as reply type byte.\r\nPlease tell me why and how to fix it, thanks!!!\r\n\r\n<img width=\"615\" alt=\"57348785-fff1b680-7189-11e9-9354-b4b85e4912f3\" src=\"https://user-images.githubusercontent.com/14973392/57498392-48d27800-730e-11e9-8745-ee169f1fe3b6.png\">\r\n<img width=\"522\" alt=\"57348793-0c760f00-718a-11e9-9994-eaf4f958d617\" src=\"https://user-images.githubusercontent.com/14973392/57498396-4b34d200-730e-11e9-8f46-90559978b525.png\">\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1288", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1288/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1288/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1288/events", "html_url": "https://github.com/django/channels/issues/1288", "id": 437658338, "node_id": "MDU6SXNzdWU0Mzc2NTgzMzg=", "number": 1288, "title": "Daphne Reader at End of File. Redis is fine?!", "user": {"login": "Hapyr", "id": 23398802, "node_id": "MDQ6VXNlcjIzMzk4ODAy", "avatar_url": "https://avatars0.githubusercontent.com/u/23398802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hapyr", "html_url": "https://github.com/Hapyr", "followers_url": "https://api.github.com/users/Hapyr/followers", "following_url": "https://api.github.com/users/Hapyr/following{/other_user}", "gists_url": "https://api.github.com/users/Hapyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hapyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hapyr/subscriptions", "organizations_url": "https://api.github.com/users/Hapyr/orgs", "repos_url": "https://api.github.com/users/Hapyr/repos", "events_url": "https://api.github.com/users/Hapyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Hapyr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-26T12:51:34Z", "updated_at": "2019-04-27T15:38:54Z", "closed_at": "2019-04-27T15:38:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Moved it to channels_redis. Because i think its a bug in channels_redis.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1285", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1285/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1285/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1285/events", "html_url": "https://github.com/django/channels/issues/1285", "id": 435475963, "node_id": "MDU6SXNzdWU0MzU0NzU5NjM=", "number": 1285, "title": "Move daphne to extras_require", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-21T05:03:16Z", "updated_at": "2019-07-03T13:56:14Z", "closed_at": "2019-07-03T13:56:14Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Daphne is not really required, e.g. when only using the `AsgiHandler`.\r\n\r\nIt is currently used for the runserver command, and otherwise imported in channels/apps.py and channels/testing/live.py only.\r\n\r\nFor a more lightweight installation it would be nice if this dependency could be made optional.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1282", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1282/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1282/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1282/events", "html_url": "https://github.com/django/channels/issues/1282", "id": 433327396, "node_id": "MDU6SXNzdWU0MzMzMjczOTY=", "number": 1282, "title": "Require Python 3.6", "user": {"login": "carltongibson", "id": 64686, "node_id": "MDQ6VXNlcjY0Njg2", "avatar_url": "https://avatars1.githubusercontent.com/u/64686?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carltongibson", "html_url": "https://github.com/carltongibson", "followers_url": "https://api.github.com/users/carltongibson/followers", "following_url": "https://api.github.com/users/carltongibson/following{/other_user}", "gists_url": "https://api.github.com/users/carltongibson/gists{/gist_id}", "starred_url": "https://api.github.com/users/carltongibson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carltongibson/subscriptions", "organizations_url": "https://api.github.com/users/carltongibson/orgs", "repos_url": "https://api.github.com/users/carltongibson/repos", "events_url": "https://api.github.com/users/carltongibson/events{/privacy}", "received_events_url": "https://api.github.com/users/carltongibson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-15T14:53:38Z", "updated_at": "2019-07-03T13:34:34Z", "closed_at": "2019-07-03T13:34:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Ref https://github.com/django/channels_redis/issues/156\r\n\r\nChannels-Redis requires Python 3.6. It doesn\u2019t make much sense for Channels and Daphne not to do the same. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1280", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1280/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1280/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1280/events", "html_url": "https://github.com/django/channels/issues/1280", "id": 432114823, "node_id": "MDU6SXNzdWU0MzIxMTQ4MjM=", "number": 1280, "title": "Package Conflicts", "user": {"login": "mevaibhav", "id": 1053092, "node_id": "MDQ6VXNlcjEwNTMwOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1053092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mevaibhav", "html_url": "https://github.com/mevaibhav", "followers_url": "https://api.github.com/users/mevaibhav/followers", "following_url": "https://api.github.com/users/mevaibhav/following{/other_user}", "gists_url": "https://api.github.com/users/mevaibhav/gists{/gist_id}", "starred_url": "https://api.github.com/users/mevaibhav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mevaibhav/subscriptions", "organizations_url": "https://api.github.com/users/mevaibhav/orgs", "repos_url": "https://api.github.com/users/mevaibhav/repos", "events_url": "https://api.github.com/users/mevaibhav/events{/privacy}", "received_events_url": "https://api.github.com/users/mevaibhav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-04-11T16:24:30Z", "updated_at": "2020-01-18T05:44:13Z", "closed_at": "2019-04-23T01:50:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Channels 2.1.7 and Channels-redis 2.3.3 are looking for different asgiref also daphne is looking for different version of asgiref\r\n```\r\n\r\nchannels 2.1.7 has requirement asgiref~=2.3, but you'll have asgiref 3.0.0 which is incompatible.\r\nchannels-redis 2.3.3 has requirement asgiref~=2.1, but you'll have asgiref 3.0.0 which is incompatible.\r\n\r\n\r\n```\r\nAfter correcting above, daphne goes bad\r\n\r\n`daphne 2.3.0 has requirement asgiref~=3.0, but you'll have asgiref 2.3.2 which is incompatible.\r\n`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/django/channels/issues/1277", "repository_url": "https://api.github.com/repos/django/channels", "labels_url": "https://api.github.com/repos/django/channels/issues/1277/labels{/name}", "comments_url": "https://api.github.com/repos/django/channels/issues/1277/comments", "events_url": "https://api.github.com/repos/django/channels/issues/1277/events", "html_url": "https://github.com/django/channels/issues/1277", "id": 430951267, "node_id": "MDU6SXNzdWU0MzA5NTEyNjc=", "number": 1277, "title": "Conflicting dependencies for asgiref", "user": {"login": "dblenkus", "id": 5970282, "node_id": "MDQ6VXNlcjU5NzAyODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5970282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dblenkus", "html_url": "https://github.com/dblenkus", "followers_url": "https://api.github.com/users/dblenkus/followers", "following_url": "https://api.github.com/users/dblenkus/following{/other_user}", "gists_url": "https://api.github.com/users/dblenkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/dblenkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dblenkus/subscriptions", "organizations_url": "https://api.github.com/users/dblenkus/orgs", "repos_url": "https://api.github.com/users/dblenkus/repos", "events_url": "https://api.github.com/users/dblenkus/events{/privacy}", "received_events_url": "https://api.github.com/users/dblenkus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-09T12:54:25Z", "updated_at": "2019-04-11T22:03:36Z", "closed_at": "2019-04-11T13:44:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Latest `channels` release (2.1.7) has [following requirements](https://github.com/django/channels/blob/ae9f7a8b1976dcfafeb2c88fd40800ab28b87eaf/setup.py#L17-L18):\r\n```\r\n        'asgiref~=2.3',\r\n        'daphne~=2.2',\r\n```\r\nSo it installs latest `2.x` version of `daphne`, which is currently `2.3`.\r\n\r\nThe problem is that `daphne 2.3.0` [reqires `asgiref~=3.0`](https://github.com/django/daphne/blob/1759643f1ff2ef7b5958f190d4a681ab13cc7fd5/setup.py#L25), which is not compatible with requirements above. So **the current version of channels can no longer be installed** due to the conflict.\r\n\r\n The safest solution is to limit `daphne` to `~=2.2.0`. Is this also the right solution? Or should the `asgiref` requirement be bumped to support versions `2.x` and `3.x`?", "performed_via_github_app": null, "score": 1.0}]}