{"total_count": 312, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/611", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/611/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/611/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/611/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/611", "id": 680270830, "node_id": "MDU6SXNzdWU2ODAyNzA4MzA=", "number": 611, "title": "Issues with Windows WSL", "user": {"login": "BluePhoenixGame", "id": 38372706, "node_id": "MDQ6VXNlcjM4MzcyNzA2", "avatar_url": "https://avatars0.githubusercontent.com/u/38372706?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BluePhoenixGame", "html_url": "https://github.com/BluePhoenixGame", "followers_url": "https://api.github.com/users/BluePhoenixGame/followers", "following_url": "https://api.github.com/users/BluePhoenixGame/following{/other_user}", "gists_url": "https://api.github.com/users/BluePhoenixGame/gists{/gist_id}", "starred_url": "https://api.github.com/users/BluePhoenixGame/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BluePhoenixGame/subscriptions", "organizations_url": "https://api.github.com/users/BluePhoenixGame/orgs", "repos_url": "https://api.github.com/users/BluePhoenixGame/repos", "events_url": "https://api.github.com/users/BluePhoenixGame/events{/privacy}", "received_events_url": "https://api.github.com/users/BluePhoenixGame/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-17T14:16:28Z", "updated_at": "2020-08-17T19:51:32Z", "closed_at": "2020-08-17T19:51:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: `asyncpg==0.21.0`\r\n* **PostgreSQL version**: 12_.4_ (I am not sure,)\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: The issue is using locally installed PostgreSQL\r\n* **Python version**: 3.7.3\r\n* **Platform**: Windows + WSL Ubuntu\r\n* **Do you use pgbouncer?**: No?\r\n* **Did you install asyncpg with pip?**:`Yes\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)**: Unknown\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nAsyncpg is communicating with Windows installation of PostgreSQL when running it with WSL Ubuntu when it should communicate with Ubuntu\r\n\r\n**REPRODUCTION STEPS:**\r\n1. Install PostgreSQL on Windows\r\n2. Enable Windows WSL and install Ubuntu from Microsoft Store\r\n3. Launch \"Ubuntu\" and install postgres\r\n4. Configure new user/role in \"Ubuntu\"\r\n5. Try to connect with new user running the script from \"Ubuntu\" with file inside Windows mount.\r\n6. **Fail to connect**\r\n7. Configure new user/role in Windows\r\n9. Try to connect with new user running the script from \"Ubuntu\" with file inside Windows mount.\r\n10. _Succeed_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/609", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/609/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/609/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/609/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/609", "id": 679756952, "node_id": "MDU6SXNzdWU2Nzk3NTY5NTI=", "number": 609, "title": "Custom record changes break python 3.9", "user": {"login": "Gelbpunkt", "id": 38864617, "node_id": "MDQ6VXNlcjM4ODY0NjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/38864617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gelbpunkt", "html_url": "https://github.com/Gelbpunkt", "followers_url": "https://api.github.com/users/Gelbpunkt/followers", "following_url": "https://api.github.com/users/Gelbpunkt/following{/other_user}", "gists_url": "https://api.github.com/users/Gelbpunkt/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gelbpunkt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gelbpunkt/subscriptions", "organizations_url": "https://api.github.com/users/Gelbpunkt/orgs", "repos_url": "https://api.github.com/users/Gelbpunkt/repos", "events_url": "https://api.github.com/users/Gelbpunkt/events{/privacy}", "received_events_url": "https://api.github.com/users/Gelbpunkt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-16T13:43:17Z", "updated_at": "2020-08-19T01:07:51Z", "closed_at": "2020-08-19T01:07:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* **asyncpg version**: Built from github master this morning at midnight GMT\r\n* **PostgreSQL version**: 13.0 beta but does not matter\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: no but does not matter\r\n* **Python version**: 3.9.0rc1+\r\n* **Platform**: amd64\r\n* **Do you use pgbouncer?**: no but does not matter\r\n* **Did you install asyncpg with pip?**: built wheel from source\r\n* **If you built asyncpg locally, which version of Cython did you use?**: 3.0a6\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: does not matter\r\n\r\nI'm using asyncpg in a python 3.9 enviroment that I rebuild daily in CI. For reference, I use [this docker image I rebuild from the 3.9 tree every day](https://hub.docker.com/r/gelbpunkt/python) to produce the error.\r\n\r\nFiles for reference in case they are needed for reproducing:\r\n* [my Cython wheel for 3.9](https://packages.travitia.xyz/root/idle/+f/b02/425a85c4f0202/Cython-3.0a6-cp39-cp39-linux_x86_64.whl#sha256=b02425a85c4f02026aabc46bcb60be3b0685abc4b6af9d73d176a0f5e2319f65)\r\n\r\nThe issue is that the latest commit regarding custom records seems to use C api methods that got moved in 3.9 (?). Since today, I get:\r\n\r\n`ImportError: Error relocating /home/idle/.local/lib/python3.9/site-packages/asyncpg/protocol/protocol.cpython-39-x86_64-linux-gnu.so: _PyObject_GC_IS_TRACKED: symbol not found`\r\n\r\nThe function is referenced several times in the latest commit.\r\n\r\nRelevant links:\r\n* [BPO link for the rename of the GC_IS_TRACKED and moving to public API](https://bugs.python.org/issue40241)\r\n* [3.9 whatsnew section in the C API](https://docs.python.org/3.9/whatsnew/3.9.html#id1)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/607", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/607/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/607/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/607/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/607", "id": 678539730, "node_id": "MDU6SXNzdWU2Nzg1Mzk3MzA=", "number": 607, "title": "Connection Pool retry without cached arguments to enforce relookup in DNS", "user": {"login": "dwd", "id": 224104, "node_id": "MDQ6VXNlcjIyNDEwNA==", "avatar_url": "https://avatars2.githubusercontent.com/u/224104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwd", "html_url": "https://github.com/dwd", "followers_url": "https://api.github.com/users/dwd/followers", "following_url": "https://api.github.com/users/dwd/following{/other_user}", "gists_url": "https://api.github.com/users/dwd/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwd/subscriptions", "organizations_url": "https://api.github.com/users/dwd/orgs", "repos_url": "https://api.github.com/users/dwd/repos", "events_url": "https://api.github.com/users/dwd/events{/privacy}", "received_events_url": "https://api.github.com/users/dwd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-13T15:44:18Z", "updated_at": "2020-08-13T16:31:19Z", "closed_at": "2020-08-13T16:16:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "On AWS (and possibly other SaaS PGSQL offerings) the DNS hostname of the instance can be repointed to another IP address on failover.\r\n\r\nThe `asyncpg.pool.Poo`l however caches the set of arguments that work from connection.connect (`pool.py:468` on my copy of 0.21.0, in `Pool._get_new_connection`), and never invalidates this.\r\n\r\nThis means, for example, that if an address becomes invalid, the Pool simply fails as a whole.\r\n\r\nWhat I propose is to catch likely errors from the attempt to reuse the cached data (for example, those already caught for retry in `connect_utils.py:667` in `_connect`), invalidate the cached `Pool._working_*` fields, and retry longhand.\r\n\r\nDoes that seem reasonable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/603", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/603/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/603/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/603/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/603", "id": 670021426, "node_id": "MDU6SXNzdWU2NzAwMjE0MjY=", "number": 603, "title": "I can't install asyncpg", "user": {"login": "IvanArttt", "id": 68422557, "node_id": "MDQ6VXNlcjY4NDIyNTU3", "avatar_url": "https://avatars0.githubusercontent.com/u/68422557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IvanArttt", "html_url": "https://github.com/IvanArttt", "followers_url": "https://api.github.com/users/IvanArttt/followers", "following_url": "https://api.github.com/users/IvanArttt/following{/other_user}", "gists_url": "https://api.github.com/users/IvanArttt/gists{/gist_id}", "starred_url": "https://api.github.com/users/IvanArttt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IvanArttt/subscriptions", "organizations_url": "https://api.github.com/users/IvanArttt/orgs", "repos_url": "https://api.github.com/users/IvanArttt/repos", "events_url": "https://api.github.com/users/IvanArttt/events{/privacy}", "received_events_url": "https://api.github.com/users/IvanArttt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-31T17:05:33Z", "updated_at": "2020-08-08T20:36:08Z", "closed_at": "2020-08-08T20:36:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I wrote pip3 install asyncpg, the installetion stopped in building wheel for asyncpg (setup.py), and after a long time become an error failed to build asyncpg, error command aarch-linux-gnu-gcc failed with exit status 1", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/600", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/600/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/600/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/600/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/600", "id": 661490884, "node_id": "MDU6SXNzdWU2NjE0OTA4ODQ=", "number": 600, "title": "[documentation] Link to \"environment variables\" pages -> 404", "user": {"login": "glenfant", "id": 703389, "node_id": "MDQ6VXNlcjcwMzM4OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/703389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenfant", "html_url": "https://github.com/glenfant", "followers_url": "https://api.github.com/users/glenfant/followers", "following_url": "https://api.github.com/users/glenfant/following{/other_user}", "gists_url": "https://api.github.com/users/glenfant/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenfant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenfant/subscriptions", "organizations_url": "https://api.github.com/users/glenfant/orgs", "repos_url": "https://api.github.com/users/glenfant/repos", "events_url": "https://api.github.com/users/glenfant/events{/privacy}", "received_events_url": "https://api.github.com/users/glenfant/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T07:43:36Z", "updated_at": "2020-07-20T16:28:15Z", "closed_at": "2020-07-20T16:28:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\n[This doc page](https://magicstack.github.io/asyncpg/current/api/index.html) shows a link to \"environment variables\" (near the top) https://magicstack.github.io/asyncpg/current/api/postgresenvvars that yields the Github 404 page.\r\n\r\nThanks for asyncpg !\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/597", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/597/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/597/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/597/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/597", "id": 654986044, "node_id": "MDU6SXNzdWU2NTQ5ODYwNDQ=", "number": 597, "title": "asyncpg.exceptions._base.InterfaceError after succesfully executed fetch", "user": {"login": "tuxlabore", "id": 61949472, "node_id": "MDQ6VXNlcjYxOTQ5NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/61949472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tuxlabore", "html_url": "https://github.com/tuxlabore", "followers_url": "https://api.github.com/users/tuxlabore/followers", "following_url": "https://api.github.com/users/tuxlabore/following{/other_user}", "gists_url": "https://api.github.com/users/tuxlabore/gists{/gist_id}", "starred_url": "https://api.github.com/users/tuxlabore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tuxlabore/subscriptions", "organizations_url": "https://api.github.com/users/tuxlabore/orgs", "repos_url": "https://api.github.com/users/tuxlabore/repos", "events_url": "https://api.github.com/users/tuxlabore/events{/privacy}", "received_events_url": "https://api.github.com/users/tuxlabore/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-10T19:18:07Z", "updated_at": "2020-07-10T20:42:25Z", "closed_at": "2020-07-10T20:42:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.21.0.dev0+aa67d61\r\n* **PostgreSQL version**: 12.3/10.12\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.8.0\r\n* **Platform**: Ubuntu 18.04\r\n* **Do you use pgbouncer?**: n\r\n* **Did you install asyncpg with pip?**: y\r\n* **If you built asyncpg locally, which version of Cython did you use?**: -\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: n\r\n\r\nI have a sql function\r\n\r\n```py\r\n    async def sql(self, code, *args, parse=False):\r\n        outputs = []\r\n        async with self.db.acquire() as conn: # self.db = self.db = await asyncpg.create_pool(\"server\")  \r\n            for line in code.split(';'):\r\n                output = await conn.fetch(line, *args)\r\n                outputs += output\r\n            await self.db.release(conn)\r\n        if not parse:\r\n            return outputs\r\n        else:\r\n            return [dict(i) for i in outputs]\r\n```\r\nWhen I execute\r\n```py\r\nawait self.bot.sql('INSERT INTO prefixes (id,value) VALUES ($1,$2) ON CONFLICT (id) ' # id is unique index; self.bot is class where placed sql func\r\n                            'DO UPDATE SET value=EXCLUDED.value', id, value)\r\n```\r\nI have error,\r\n```py\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/tl/.local/lib/python3.8/site-packages/discord/ext/commands/core.py\", line 83, in wrapped\r\n    ret = await coro(*args, **kwargs)\r\n\r\n  File \"/home/tl/flasher/cogs/other.py\", line 146, in prefix_self\r\n    await self.bot.sql(f'INSERT INTO prefixes VALUES ($1,$2) '\r\n\r\n  File \"main.py\", line 46, in sql\r\n    output = await conn.fetch(line, *args)\r\n\r\n  File \"/home/tl/.local/lib/python3.8/site-packages/asyncpg/connection.py\", line 420, in fetch\r\n    return await self._execute(query, args, 0, timeout)\r\n\r\n  File \"/home/tl/.local/lib/python3.8/site-packages/asyncpg/connection.py\", line 1402, in _execute\r\n    result, _ = await self.__execute(\r\n\r\n  File \"/home/tl/.local/lib/python3.8/site-packages/asyncpg/connection.py\", line 1411, in __execute\r\n    return await self._do_execute(query, executor, timeout)\r\n\r\n  File \"/home/tl/.local/lib/python3.8/site-packages/asyncpg/connection.py\", line 1433, in _do_execute\r\n    result = await executor(stmt, None)\r\n\r\n  File \"asyncpg/protocol/protocol.pyx\", line 178, in bind_execute\r\n\r\n  File \"asyncpg/protocol/prepared_stmt.pyx\", line 120, in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg\r\n\r\nasyncpg.exceptions._base.InterfaceError: the server expects 0 arguments for this query, 2 were passed\r\nHINT:  Check the query against the passed list of arguments.  Note that parameters are supported only in SELECT, INSERT, UPDATE, DELETE, and VALUES statements, and will *not* work in statements  like CREATE VIEW or DECLARE CURSOR.\r\n```\r\nbut value is successfully updated. - `{'id': 407524032292847624, 'value': 'F.'}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/593", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/593/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/593/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/593/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/593", "id": 641780792, "node_id": "MDU6SXNzdWU2NDE3ODA3OTI=", "number": 593, "title": "Connect DSN doesn't handle @ in username", "user": {"login": "rudigiesler", "id": 8234653, "node_id": "MDQ6VXNlcjgyMzQ2NTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8234653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rudigiesler", "html_url": "https://github.com/rudigiesler", "followers_url": "https://api.github.com/users/rudigiesler/followers", "following_url": "https://api.github.com/users/rudigiesler/following{/other_user}", "gists_url": "https://api.github.com/users/rudigiesler/gists{/gist_id}", "starred_url": "https://api.github.com/users/rudigiesler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rudigiesler/subscriptions", "organizations_url": "https://api.github.com/users/rudigiesler/orgs", "repos_url": "https://api.github.com/users/rudigiesler/repos", "events_url": "https://api.github.com/users/rudigiesler/events{/privacy}", "received_events_url": "https://api.github.com/users/rudigiesler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-19T07:52:20Z", "updated_at": "2020-06-19T08:16:57Z", "closed_at": "2020-06-19T08:16:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.20.1\r\n* **PostgreSQL version**: 9.6\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Azure PostgreSQL. It is reproducible with a local install.\r\n* **Python version**: 3.7.7\r\n* **Platform**: Docker/Debian, locally OSX\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A, installed from wheel.\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\nAzure managed databases have credentials as follows:\r\nurl: instance-name.privatelink.postgres.database.azure.com\r\ndatabase: db-name\r\nusername: db-name@instance-name\r\npassword: password\r\n\r\nCombining that into a DSN, we get something like:\r\n`postgres://db-name@instance-name:password@instance-name.privatelink.postgres.database.azure.com:5432/db-name`\r\n\r\nBut the utility to interpret the DSN makes a mistake when trying to interpret a DSN of this shape:\r\n```\r\n  File \"/turn-rasa-connector/turn_rasa_connector/turn.py\", line 163, in get_postgresql_pool\r\n    self._postgresql_pool = await asyncpg.create_pool(self.postgresql_url)\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/pool.py\", line 398, in _async__init__\r\n    await self._initialize()\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/pool.py\", line 426, in _initialize\r\n    await first_ch.connect()\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/pool.py\", line 125, in connect\r\n    self._con = await self._pool._get_new_connection()\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/pool.py\", line 472, in _get_new_connection\r\n    **self._connect_kwargs)\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/connection.py\", line 1677, in connect\r\n    max_cacheable_statement_size=max_cacheable_statement_size)\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 645, in _connect\r\n    addrs, params, config = _parse_connect_arguments(timeout=timeout, **kwargs)\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 496, in _parse_connect_arguments\r\n    server_settings=server_settings)\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 236, in _parse_connect_dsn_and_args\r\n    host, port = _parse_hostlist(dsn_hostspec, port, unquote=True)\r\n  File \"/opt/venv/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 196, in _parse_hostlist\r\n    hostlist_ports.append(int(hostspec_port))\r\nValueError: invalid literal for int() with base 10: 'password@instance-name.privatelink.postgres.database.azure.com:5432'\r\n```\r\n\r\nIt seems like it is taking the first `@` symbol when splitting between the instance name and credentials, instead of the last `@` symbol.\r\n\r\nThis also happens locally when creating a user that has an `@` symbol in the username.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/591", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/591/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/591/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/591/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/591", "id": 640030957, "node_id": "MDU6SXNzdWU2NDAwMzA5NTc=", "number": 591, "title": "Unable to Reference `EXCLUDED` in Upsert (ON CONFLICT UPDATE)", "user": {"login": "seandstewart", "id": 19578366, "node_id": "MDQ6VXNlcjE5NTc4MzY2", "avatar_url": "https://avatars2.githubusercontent.com/u/19578366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seandstewart", "html_url": "https://github.com/seandstewart", "followers_url": "https://api.github.com/users/seandstewart/followers", "following_url": "https://api.github.com/users/seandstewart/following{/other_user}", "gists_url": "https://api.github.com/users/seandstewart/gists{/gist_id}", "starred_url": "https://api.github.com/users/seandstewart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seandstewart/subscriptions", "organizations_url": "https://api.github.com/users/seandstewart/orgs", "repos_url": "https://api.github.com/users/seandstewart/repos", "events_url": "https://api.github.com/users/seandstewart/events{/privacy}", "received_events_url": "https://api.github.com/users/seandstewart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-16T23:17:53Z", "updated_at": "2020-06-17T02:32:35Z", "closed_at": "2020-06-17T02:32:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.20.1\r\n* **PostgreSQL version**: 12\r\n* **Do you use a PostgreSQL SaaS?  n/a\r\n* **Python version**: 3.8\r\n* **Platform**: macOS\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: n/a\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: yes\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nI'm attempting to use Postgres's ON CONFLICT DO UPDATE with the [magic `EXCLUDED` value](https://www.postgresql.org/docs/12/sql-insert.html), like so:\r\n\r\n```SQL\r\nINSERT INTO \"api\".\"foo\" (\"id\",\"bar\") VALUES ($1,$2) ON CONFLICT (\"id\") DO UPDATE SET \"bar\"=\"EXCLUDED\".\"bar\" RETURNING *\r\n```\r\n\r\nHowever I'm receiving the following error:\r\n`asyncpg.exceptions.UndefinedTableError: missing FROM-clause entry for table \"EXCLUDED\"`\r\n\r\nWhat is the recommended method for referencing `EXCLUDED`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/586", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/586/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/586/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/586/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/586", "id": 635084785, "node_id": "MDU6SXNzdWU2MzUwODQ3ODU=", "number": 586, "title": "[bug/feature] conn.execute seems to lack direct support for RETURNING", "user": {"login": "curtiscook", "id": 7005517, "node_id": "MDQ6VXNlcjcwMDU1MTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7005517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/curtiscook", "html_url": "https://github.com/curtiscook", "followers_url": "https://api.github.com/users/curtiscook/followers", "following_url": "https://api.github.com/users/curtiscook/following{/other_user}", "gists_url": "https://api.github.com/users/curtiscook/gists{/gist_id}", "starred_url": "https://api.github.com/users/curtiscook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/curtiscook/subscriptions", "organizations_url": "https://api.github.com/users/curtiscook/orgs", "repos_url": "https://api.github.com/users/curtiscook/repos", "events_url": "https://api.github.com/users/curtiscook/events{/privacy}", "received_events_url": "https://api.github.com/users/curtiscook/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-09T03:36:02Z", "updated_at": "2020-06-09T16:22:45Z", "closed_at": "2020-06-09T15:34:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm trying to use the returning syntax in postgres, but it looks like conn.execute returns the status string instead of respecting the returning statement. \r\n\r\nhttps://www.postgresql.org/docs/9.1/sql-insert.html\r\n\r\n```\r\n        self._check_open()\r\n\r\n        if not args:\r\n            return await self._protocol.query(query, timeout)\r\n\r\n        _, status, _ = await self._execute(query, args, 0, timeout, True)\r\n        return status.decode()\r\n```\r\n\r\nWhich behaves like\r\n\r\n```\r\n>>> await con.execute('''\r\n            ...     INSERT INTO mytab (a) VALUES ($1), ($2)\r\n            ... ''', 10, 20)\r\n            INSERT 0 2\r\n```\r\n\r\nI would suggest either modifying the execute function to return status & the result record or adding a new insert function that allows for returning statements instead of the status. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/581", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/581/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/581/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/581/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/581", "id": 627963476, "node_id": "MDU6SXNzdWU2Mjc5NjM0NzY=", "number": 581, "title": "Cannot pass a list or tuple!", "user": {"login": "GooDeeJaY", "id": 26520665, "node_id": "MDQ6VXNlcjI2NTIwNjY1", "avatar_url": "https://avatars1.githubusercontent.com/u/26520665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GooDeeJaY", "html_url": "https://github.com/GooDeeJaY", "followers_url": "https://api.github.com/users/GooDeeJaY/followers", "following_url": "https://api.github.com/users/GooDeeJaY/following{/other_user}", "gists_url": "https://api.github.com/users/GooDeeJaY/gists{/gist_id}", "starred_url": "https://api.github.com/users/GooDeeJaY/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GooDeeJaY/subscriptions", "organizations_url": "https://api.github.com/users/GooDeeJaY/orgs", "repos_url": "https://api.github.com/users/GooDeeJaY/repos", "events_url": "https://api.github.com/users/GooDeeJaY/events{/privacy}", "received_events_url": "https://api.github.com/users/GooDeeJaY/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-31T13:27:18Z", "updated_at": "2020-06-08T16:16:35Z", "closed_at": "2020-06-08T16:16:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nmylist = [2,3,4,1]\r\nconn.fetch(\"SELECT * FROM test WHERE ID IN ($1)\", mylist)\r\n```\r\n\r\nError: `asyncpg.exceptions.DataError: invalid input for query argument $1: [2,3,4,1] (an integer is required (got type list))`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/575", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/575/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/575/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/575/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/575", "id": 619601858, "node_id": "MDU6SXNzdWU2MTk2MDE4NTg=", "number": 575, "title": "[Question] How to use geometry data type as a parameter?", "user": {"login": "davidtgq", "id": 14155110, "node_id": "MDQ6VXNlcjE0MTU1MTEw", "avatar_url": "https://avatars1.githubusercontent.com/u/14155110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtgq", "html_url": "https://github.com/davidtgq", "followers_url": "https://api.github.com/users/davidtgq/followers", "following_url": "https://api.github.com/users/davidtgq/following{/other_user}", "gists_url": "https://api.github.com/users/davidtgq/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtgq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtgq/subscriptions", "organizations_url": "https://api.github.com/users/davidtgq/orgs", "repos_url": "https://api.github.com/users/davidtgq/repos", "events_url": "https://api.github.com/users/davidtgq/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtgq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T03:42:22Z", "updated_at": "2020-05-18T21:13:48Z", "closed_at": "2020-05-18T21:13:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "For example, I want to query something to the effect of:\r\n\r\n```\r\nselect point '(1,1)' <@ box '((0,0),(2,2))';\r\n```\r\n\r\nI tried something like this:\r\n\r\n```\r\nCREATE TABLE tbl (latlng POINT NOT NULL);\r\n\r\nbox = [[22.268764039073968, -140.09765625000003], [61.438767493682825, -56.42578125000001]]\r\nawait pool.fetch(f'SELECT * FROM tbl WHERE latlng <@ $1;', box)\r\n```\r\n\r\nThen I tried this:\r\n\r\n```\r\nfrom asyncpg.types import Point, Box\r\n\r\nv = [[22.268764039073968,-140.09765625000003],[61.438767493682825,-56.42578125000001]]\r\nbox = Box(Point(v[0][0], v[0][1]), Point(v[1][0], v[1][1]))\r\nawait pool.fetch(f'SELECT * FROM tbl WHERE latlng <@ $1;', box)\r\n```\r\n\r\nBoth attempts result in the error:\r\n\r\n```\r\nasyncpg.exceptions.AmbiguousFunctionError: operator is not unique: point <@ unknown\r\nHINT:  Could not choose a best candidate operator. You might need to add explicit type casts.\r\n```\r\n\r\nI'm guessing that I have to manually make asyncpg use [box_encode()](https://github.com/MagicStack/py-pgproto/blob/76091445db8b49a7d78504b47eb34fcbfbb89567/codecs/geometry.pyx#L35) for this parameter (since it's not implied by any table definition), but how do I tell asyncpg to do that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/574", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/574/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/574/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/574/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/574", "id": 618575173, "node_id": "MDU6SXNzdWU2MTg1NzUxNzM=", "number": 574, "title": "conn.copy_to_table() empties source file and throws exception", "user": {"login": "sergeyspatar", "id": 29392547, "node_id": "MDQ6VXNlcjI5MzkyNTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/29392547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergeyspatar", "html_url": "https://github.com/sergeyspatar", "followers_url": "https://api.github.com/users/sergeyspatar/followers", "following_url": "https://api.github.com/users/sergeyspatar/following{/other_user}", "gists_url": "https://api.github.com/users/sergeyspatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergeyspatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergeyspatar/subscriptions", "organizations_url": "https://api.github.com/users/sergeyspatar/orgs", "repos_url": "https://api.github.com/users/sergeyspatar/repos", "events_url": "https://api.github.com/users/sergeyspatar/events{/privacy}", "received_events_url": "https://api.github.com/users/sergeyspatar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T22:33:02Z", "updated_at": "2020-05-14T22:41:51Z", "closed_at": "2020-05-14T22:41:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.20.1\r\n* **PostgreSQL version**:  12.2\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: I use local PostgreSQL\r\n* **Python version**: 3.8.3rc1\r\n* **Platform**: Linux billing 5.4.0-4-cloud-amd64 #1 SMP Debian 5.4.19-1 (2020-02-13) x86_64 GNU/Linux\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\nSteps to reproduce:\r\n\r\n1. Create CSV file \"copy_test.csv\":\r\n\r\n```shell\r\necho \"Hello,World\" > copy_test.csv\r\n```\r\n\r\n2. This script creates table \"copy_test\" with two columns and tries to import file by passing file path to `conn.copy_to_table()`:\r\n\r\n```python\r\nimport asyncio\r\nimport asyncpg\r\n\r\n\r\nasync def main():\r\n    conn = await asyncpg.connect(...)\r\n    await conn.execute(\"create table copy_test (c1 varchar, c2 varchar)\")\r\n    await conn.copy_to_table(\r\n        'copy_test',\r\n        source='copy_test.csv',\r\n        format='csv'\r\n    )\r\n\r\n\r\n#import uvloop\r\n#asyncio.set_event_loop(uvloop.new_event_loop())\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nScript throws exception:\r\n```\r\n$ python3 test_asyncpg_copy_to_table.py\r\nTraceback (most recent call last):\r\n  File \"test_asyncpg_copy_to_table.py\", line 18, in <module>\r\n    asyncio.run(main())\r\n  File \"/usr/lib/python3.8/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/usr/lib/python3.8/asyncio/base_events.py\", line 616, in run_until_complete\r\n    return future.result()\r\n  File \"test_asyncpg_copy_to_table.py\", line 8, in main\r\n    await conn.copy_to_table(\r\n  File \"/usr/local/lib/python3.8/dist-packages/asyncpg/connection.py\", line 666, in copy_to_table\r\n    return await self._copy_in(copy_stmt, source, timeout)\r\n  File \"/usr/local/lib/python3.8/dist-packages/asyncpg/connection.py\", line 845, in _copy_in\r\n    return await self._protocol.copy_in(\r\n  File \"asyncpg/protocol/protocol.pyx\", line 482, in copy_in\r\n  File \"asyncpg/protocol/protocol.pyx\", line 455, in asyncpg.protocol.protocol.BaseProtocol.copy_in\r\n  File \"asyncpg/protocol/protocol.pyx\", line 456, in asyncpg.protocol.protocol.BaseProtocol.copy_in\r\n  File \"/usr/lib/python3.8/asyncio/tasks.py\", line 455, in wait_for\r\n    return await fut\r\n  File \"/usr/local/lib/python3.8/dist-packages/asyncpg/connection.py\", line 836, in __anext__\r\n    data = await run_in_executor(None, f.read, 524288)\r\n  File \"/usr/lib/python3.8/concurrent/futures/thread.py\", line 57, in run\r\n    result = self.fn(*self.args, **self.kwargs)\r\nio.UnsupportedOperation: read\r\n```\r\n\r\nAnd the file \"copy_test.csv\" is now 0 bytes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/565", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/565/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/565/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/565/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/565", "id": 608413276, "node_id": "MDU6SXNzdWU2MDg0MTMyNzY=", "number": 565, "title": "Error when importing after compiling with GCC 10", "user": {"login": "Gelbpunkt", "id": 38864617, "node_id": "MDQ6VXNlcjM4ODY0NjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/38864617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gelbpunkt", "html_url": "https://github.com/Gelbpunkt", "followers_url": "https://api.github.com/users/Gelbpunkt/followers", "following_url": "https://api.github.com/users/Gelbpunkt/following{/other_user}", "gists_url": "https://api.github.com/users/Gelbpunkt/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gelbpunkt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gelbpunkt/subscriptions", "organizations_url": "https://api.github.com/users/Gelbpunkt/orgs", "repos_url": "https://api.github.com/users/Gelbpunkt/repos", "events_url": "https://api.github.com/users/Gelbpunkt/events{/privacy}", "received_events_url": "https://api.github.com/users/Gelbpunkt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-28T15:33:44Z", "updated_at": "2020-06-26T18:20:55Z", "closed_at": "2020-05-02T16:45:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* **asyncpg version**: asyncpg-0.21.0.dev0+7f5c2a2 (same for 0.20.1)\r\n* **PostgreSQL version**: does not matter\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: does not matter\r\n* **Python version**: 3.8.2 and 3.9.0a5+\r\n* **Platform**: Fedora 32 x64/aarch64 and Alpine Linux 3.12 alpha x64/aarch64\r\n* **Do you use pgbouncer?**: does not matter\r\n* **Did you install asyncpg with pip?**: no\r\n* **If you built asyncpg locally, which version of Cython did you use?**: 0.29.16 and 3.0a2\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: does not matter\r\n\r\nI have tested this on the following scenarios:\r\nFedora 32 x86_64, Python 3.8.2, GCC 10.0.1 20200328 (Red Hat 10.0.1-0.11) from official repos\r\nFedora 33 (rawhide) aarch64, Python 3.8.2, GCC 10.0.1 20200420 (Red Hat 10.0.1-0.12) from official repos\r\nAlpine Linux 3.12 alpha x86_64, Python 3.9a5, GCC 10.0.1 20200427 from source (builds at https://ftp.travitia.xyz/alpine/x86_64/)\r\nAlpine Linux 3.12 alpha aarch64, Python 3.9a5, GCC 10.0.1 20200426 from source (builds at https://ftp.travitia.xyz/alpine/aarch64/)\r\nAll have been tested twice with Cython 0.29.16 and Cython 3.0a2.\r\n\r\nWhenever I compile asyncpg with GCC 9.3 on any of above scenarios, it compiles fine and runs fine.\r\nWhenever I use GCC 10 in any of above scenarios, it *does build fine*, but importing it gives me:\r\n\r\n```py\r\n>>> import asyncpg\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jens/.local/lib/python3.8/site-packages/asyncpg/__init__.py\", line 8, in <module>\r\n    from .connection import connect, Connection  # NOQA\r\n  File \"/home/jens/.local/lib/python3.8/site-packages/asyncpg/connection.py\", line 19, in <module>\r\n    from . import connect_utils\r\n  File \"/home/jens/.local/lib/python3.8/site-packages/asyncpg/connect_utils.py\", line 28, in <module>\r\n    from . import protocol\r\n  File \"/home/jens/.local/lib/python3.8/site-packages/asyncpg/protocol/__init__.py\", line 8, in <module>\r\n    from .protocol import Protocol, Record, NO_TIMEOUT  # NOQA\r\n  File \"asyncpg/protocol/protocol.pyx\", line 1, in init asyncpg.protocol.protocol\r\nImportError: /home/jens/.local/lib/python3.8/site-packages/asyncpg/pgproto/pgproto.cpython-38-x86_64-linux-gnu.so: undefined symbol: uuid_to_hex\r\n```\r\n\r\nThis is weird, as readelf shows:\r\n\r\n```sh\r\n$ readelf -a /home/jens/.local/lib/python3.8/site-packages/asyncpg/pgproto/pgproto.cpython-38-x86_64-linux-gnu.so | grep uuid_to_hex\r\n000000055d90  004f00000007 R_X86_64_JUMP_SLO 0000000000000000 uuid_to_hex + 0\r\n    79: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND uuid_to_hex\r\n  1176: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND uuid_to_hex\r\n```\r\n\r\nI don't know C much, but I have seen that uuid_to_hex is defined in the code for pgproto, so I have no clue how this happens.\r\n\r\nFYI: On all scenarios, I am able to compile and use uvloop and cpython 3.9 without any errors. \r\n\r\nEDIT: Same issue with Alpine Linux 3.12 alpha, Python 3.9a6, Cython 3.0a3 and GCC 10 20200430", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/564", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/564/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/564/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/564/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/564", "id": 606356532, "node_id": "MDU6SXNzdWU2MDYzNTY1MzI=", "number": 564, "title": "[Question] Does Asyncpg cache column types?", "user": {"login": "AndreiPashkin", "id": 4378647, "node_id": "MDQ6VXNlcjQzNzg2NDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4378647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreiPashkin", "html_url": "https://github.com/AndreiPashkin", "followers_url": "https://api.github.com/users/AndreiPashkin/followers", "following_url": "https://api.github.com/users/AndreiPashkin/following{/other_user}", "gists_url": "https://api.github.com/users/AndreiPashkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreiPashkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreiPashkin/subscriptions", "organizations_url": "https://api.github.com/users/AndreiPashkin/orgs", "repos_url": "https://api.github.com/users/AndreiPashkin/repos", "events_url": "https://api.github.com/users/AndreiPashkin/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreiPashkin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-24T14:29:41Z", "updated_at": "2020-05-17T07:29:19Z", "closed_at": "2020-05-17T07:28:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does Asyncpg cache column types and does it allow to retrieve them through API?\r\n\r\nMy use case is that I'd like to implement preliminary type adaption of DB query parameters on application level for an application that uses asyncpg. For example in a query I can have a parameter that should be integer, but the actual value could come from the web-layer of the application as an integer encoded as a string - and asyncpg would fail if string-int is passed as a parameter that should be int-int. \r\nAnd I want to implement some kind of adapter that would get column types from the DB (from asyncpg cache if it has it) and perform type conversion of the parameters according to the DB column types.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/562", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/562/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/562/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/562/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/562", "id": 605702143, "node_id": "MDU6SXNzdWU2MDU3MDIxNDM=", "number": 562, "title": "Performance issue when fetch big query statement directly from pool", "user": {"login": "yenbao1340", "id": 1137495, "node_id": "MDQ6VXNlcjExMzc0OTU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1137495?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yenbao1340", "html_url": "https://github.com/yenbao1340", "followers_url": "https://api.github.com/users/yenbao1340/followers", "following_url": "https://api.github.com/users/yenbao1340/following{/other_user}", "gists_url": "https://api.github.com/users/yenbao1340/gists{/gist_id}", "starred_url": "https://api.github.com/users/yenbao1340/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yenbao1340/subscriptions", "organizations_url": "https://api.github.com/users/yenbao1340/orgs", "repos_url": "https://api.github.com/users/yenbao1340/repos", "events_url": "https://api.github.com/users/yenbao1340/events{/privacy}", "received_events_url": "https://api.github.com/users/yenbao1340/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-23T17:08:40Z", "updated_at": "2020-04-29T15:14:54Z", "closed_at": "2020-04-29T15:14:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: PostgreSQL 10.12\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: No, I only met issue in production (dev, local was still OK)\r\n* **Python version**: 3.7\r\n* **Platform**: Ubuntu 16.04\r\n* **Do you use pgbouncer?**: NO\r\n* **Did you install asyncpg with pip?**: YES\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes. I work on Sanic with uvloop \r\n\r\n<!-- Enter your issue details below this comment. -->\r\nI have a big query statement (about 120 lines and access over 10 tables and using CTE). I created a Connection pool with default value config and using directly `fetch` method of Pool object. However, It take over 30 seconds to executed (sometimes over 1 minutes). But, when I tried to execute this query by SQLClient IDE and psycopg2, everything was OK (execution time was only some miliseconds). I sure this problem didn't come from the query perfomance\r\n\r\n```\r\n_pool = await asyncpg.create_pool(host=config.ERP_DB_HOST,\r\n                                        port=config.ERP_DB_PORT,\r\n                                        database=config.ERP_DB_NAME,\r\n                                        user=config.ERP_DB_USER,\r\n                                        password=config.ERP_DB_PASSWORD,\r\n                                        max_size=int(config.ERP_DB_MAXCONN))\r\nrows = await _pool.fetch(sql)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/561", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/561/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/561/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/561", "id": 605502899, "node_id": "MDU6SXNzdWU2MDU1MDI4OTk=", "number": 561, "title": "Creating asyncpg.Record and asyncpg.pgproto.pgproto.UUID for tests manually", "user": {"login": "alvassin", "id": 1497444, "node_id": "MDQ6VXNlcjE0OTc0NDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1497444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvassin", "html_url": "https://github.com/alvassin", "followers_url": "https://api.github.com/users/alvassin/followers", "following_url": "https://api.github.com/users/alvassin/following{/other_user}", "gists_url": "https://api.github.com/users/alvassin/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvassin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvassin/subscriptions", "organizations_url": "https://api.github.com/users/alvassin/orgs", "repos_url": "https://api.github.com/users/alvassin/repos", "events_url": "https://api.github.com/users/alvassin/events{/privacy}", "received_events_url": "https://api.github.com/users/alvassin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-23T12:45:18Z", "updated_at": "2020-04-23T12:51:41Z", "closed_at": "2020-04-23T12:49:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear colleagues,\r\n\r\nI need to test if json is correctly applied to asyncpg.Record objects and asyncpg.pgproto.pgproto (had an issue with orjson). \r\n\r\nCurrently i get running postgresql via docker compose, query database and then check the results:\r\n\r\n```\r\nasync def test_asyncpg_record(conn):\r\n    value = await conn('SELECT 1 as col')\r\n    assert b'{\"col\":1}' == dumps(value)\r\n\r\n\r\nasync def test_asyncpg_uuid(conn):\r\n    query = \"SELECT '67b179d8-eb43-44d1-8297-25801a216afe'::uuid;\"\r\n    value = await conn(query)\r\n    assert isinstance(value, pgproto.UUID)\r\n    assert b'\"67b179d8-eb43-44d1-8297-25801a216afe\"' == dumps(value)\r\n```\r\n\r\nI would like not to connect with real postgres, but to make `Record` object manually. [I found that asyncpg has `_create_record` function](https://github.com/MagicStack/asyncpg/blob/master/asyncpg/protocol/protocol.pyx#L945), but i can't get the meaning of the second parameter.\r\n\r\nCould you please explain, how is it possible to make Asyncpg record with asyncpg.pgroto.pgproto.UUID object?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/553", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/553/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/553/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/553", "id": 596126177, "node_id": "MDU6SXNzdWU1OTYxMjYxNzc=", "number": 553, "title": "Support for providing a callable for passwords", "user": {"login": "HLFrye", "id": 653242, "node_id": "MDQ6VXNlcjY1MzI0Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/653242?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HLFrye", "html_url": "https://github.com/HLFrye", "followers_url": "https://api.github.com/users/HLFrye/followers", "following_url": "https://api.github.com/users/HLFrye/following{/other_user}", "gists_url": "https://api.github.com/users/HLFrye/gists{/gist_id}", "starred_url": "https://api.github.com/users/HLFrye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HLFrye/subscriptions", "organizations_url": "https://api.github.com/users/HLFrye/orgs", "repos_url": "https://api.github.com/users/HLFrye/repos", "events_url": "https://api.github.com/users/HLFrye/events{/privacy}", "received_events_url": "https://api.github.com/users/HLFrye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-07T20:17:16Z", "updated_at": "2020-04-23T17:34:45Z", "closed_at": "2020-04-23T17:34:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "We would like to use IAM roles for authentication with our AWS RDS hosted Postgres instance. This AWS functionality is described [here](https://aws.amazon.com/premiumsupport/knowledge-center/users-connect-rds-iam/).  This feature allows an application to request a temporary password using AWS credentials. The temporary password grants access to the database, but the password expires after 15 minutes.\r\n\r\nIn order to use this feature along with a connection pool, we need to be able to pass a callable that returns a string as a password, rather than a string itself. This callable will need to be called each time the connection pool needs to create a new connection.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/552", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/552/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/552/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/552", "id": 594857104, "node_id": "MDU6SXNzdWU1OTQ4NTcxMDQ=", "number": 552, "title": "What are recommended parameter tuning for connection pooling?", "user": {"login": "immohsin", "id": 14070273, "node_id": "MDQ6VXNlcjE0MDcwMjcz", "avatar_url": "https://avatars1.githubusercontent.com/u/14070273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immohsin", "html_url": "https://github.com/immohsin", "followers_url": "https://api.github.com/users/immohsin/followers", "following_url": "https://api.github.com/users/immohsin/following{/other_user}", "gists_url": "https://api.github.com/users/immohsin/gists{/gist_id}", "starred_url": "https://api.github.com/users/immohsin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immohsin/subscriptions", "organizations_url": "https://api.github.com/users/immohsin/orgs", "repos_url": "https://api.github.com/users/immohsin/repos", "events_url": "https://api.github.com/users/immohsin/events{/privacy}", "received_events_url": "https://api.github.com/users/immohsin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-06T07:05:22Z", "updated_at": "2020-04-11T08:30:59Z", "closed_at": "2020-04-11T08:30:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to implement connection pooling for my project. The postgress DB is hosted on google cloud sql instance and i'm looking at close to 2000 concurrent queries. I'm looking for general advice on fine tuning the parameters for good performance. Here are some question i have got:\r\n\r\n1. What should be idle min_size, max_size, max_inactive_connection_lifetime and max_queries?\r\n2. If my min_size is 10 and max_size is 100, then the pooler would autoscale depending on number of requests?\r\n3. In a typical request to server, i make queries to different table to complete the request. For this i assume i don't need prepared statements. Since they don't work across db sessions. So what are some ways i can cache select statements so that my fetch can have better performance?\r\n\r\nThank You", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/551", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/551/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/551/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/551", "id": 594653745, "node_id": "MDU6SXNzdWU1OTQ2NTM3NDU=", "number": 551, "title": "Automatically convert Records to json", "user": {"login": "lsabi", "id": 13497689, "node_id": "MDQ6VXNlcjEzNDk3Njg5", "avatar_url": "https://avatars0.githubusercontent.com/u/13497689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsabi", "html_url": "https://github.com/lsabi", "followers_url": "https://api.github.com/users/lsabi/followers", "following_url": "https://api.github.com/users/lsabi/following{/other_user}", "gists_url": "https://api.github.com/users/lsabi/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsabi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsabi/subscriptions", "organizations_url": "https://api.github.com/users/lsabi/orgs", "repos_url": "https://api.github.com/users/lsabi/repos", "events_url": "https://api.github.com/users/lsabi/events{/privacy}", "received_events_url": "https://api.github.com/users/lsabi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-04-05T21:26:44Z", "updated_at": "2020-04-08T07:44:21Z", "closed_at": "2020-04-08T07:44:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've already checked the following issues, but none of them work for my case\r\nhttps://github.com/MagicStack/asyncpg/issues/17\r\nhttps://github.com/MagicStack/asyncpg/issues/263\r\n\r\nBasically, I'm fetching several records for an API that should return a JSON response. The code I'm using is the following\r\n\r\n`async with db_pool.acquire() as conn:\r\n            async with conn.transaction():\r\n                res = await conn.fetch(query, param)\r\n                return res\r\n`\r\nEven by adding `res = [dict(r.items()) for r in res]` the response is not correct for javascript that has to fetch from the client side the JSON data.\r\n\r\nHow can I correctly transform the resulting list of records into a valid JSON? I haven't found anything in the docs.\r\n\r\nNo, I'm not using sqlalchemy or similars. They add too much overhead.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/550", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/550/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/550/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/550", "id": 592949985, "node_id": "MDU6SXNzdWU1OTI5NDk5ODU=", "number": 550, "title": "Filter with a list of tuple", "user": {"login": "Andarius", "id": 5070712, "node_id": "MDQ6VXNlcjUwNzA3MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5070712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andarius", "html_url": "https://github.com/Andarius", "followers_url": "https://api.github.com/users/Andarius/followers", "following_url": "https://api.github.com/users/Andarius/following{/other_user}", "gists_url": "https://api.github.com/users/Andarius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andarius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andarius/subscriptions", "organizations_url": "https://api.github.com/users/Andarius/orgs", "repos_url": "https://api.github.com/users/Andarius/repos", "events_url": "https://api.github.com/users/Andarius/events{/privacy}", "received_events_url": "https://api.github.com/users/Andarius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-02T22:14:11Z", "updated_at": "2020-06-26T10:44:32Z", "closed_at": "2020-06-26T10:44:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.20.1\r\n* **PostgreSQL version**: 12-alpine\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: no \r\n* **Python version**: 3.8\r\n* **Platform**: Kde\r\n* **Do you use pgbouncer?**: no \r\n* **Did you install asyncpg with pip?**: no\r\n* **If you built asyncpg locally, which version of Cython did you use?**: - \r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\nI'm trying to fetch records based on a list of tuple but I keep getting:\r\n`asyncpg.exceptions._base.InternalClientError: could not resolve query result and/or argument types in 6 attempt`\r\n\r\nHere is the request:\r\n\r\n`SELECT id from my_table where (label, user_id)::record = any($1::record[])` (where $1 is a list of tuple)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/542", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/542/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/542/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/542", "id": 582963836, "node_id": "MDU6SXNzdWU1ODI5NjM4MzY=", "number": 542, "title": "connection pool demo not work!", "user": {"login": "dingguijin", "id": 1137917, "node_id": "MDQ6VXNlcjExMzc5MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1137917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingguijin", "html_url": "https://github.com/dingguijin", "followers_url": "https://api.github.com/users/dingguijin/followers", "following_url": "https://api.github.com/users/dingguijin/following{/other_user}", "gists_url": "https://api.github.com/users/dingguijin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingguijin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingguijin/subscriptions", "organizations_url": "https://api.github.com/users/dingguijin/orgs", "repos_url": "https://api.github.com/users/dingguijin/repos", "events_url": "https://api.github.com/users/dingguijin/events{/privacy}", "received_events_url": "https://api.github.com/users/dingguijin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-17T12:04:14Z", "updated_at": "2020-03-18T06:37:33Z", "closed_at": "2020-03-18T06:37:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.20.1\r\n* **PostgreSQL version**: 11\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.8\r\n* **Platform**: Mac OS X 10.13\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nConnection Pool sample not work on Mac OS X\r\n\r\n```\r\nimport asyncio\r\nimport asyncpg\r\nfrom aiohttp import web\r\n\r\n\r\nasync def handle(request):\r\n    \"\"\"Handle incoming requests.\"\"\"\r\n    pool = request.app['pool']\r\n    power = int(request.match_info.get('power', 10))\r\n\r\n    # Take a connection from the pool.\r\n    async with pool.acquire() as connection:\r\n        # Open a transaction.\r\n        async with connection.transaction():\r\n            # Run the query passing the request argument.\r\n            result = await connection.fetchval('select 2 ^ $1', power)\r\n            return web.Response(\r\n                text=\"2 ^ {} is {}\".format(power, result))\r\n\r\n\r\nasync def init_app():\r\n    \"\"\"Initialize the application server.\"\"\"\r\n    app = web.Application()\r\n    # Create a database connection pool\r\n    app['pool'] = await asyncpg.create_pool(database='postgres',\r\n                                            user='postgres')\r\n    # Configure service routes\r\n    app.router.add_route('GET', '/{power:\\d+}', handle)\r\n    app.router.add_route('GET', '/', handle)\r\n    return app\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\napp = loop.run_until_complete(init_app())\r\nweb.run_app(app)\r\n\r\n```\r\n\r\n\r\n```\r\n\r\n======== Running on http://0.0.0.0:8080 ========\r\n(Press CTRL+C to quit)\r\nError handling request\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/aiohttp/web_protocol.py\", line 418, in start\r\n    resp = await task\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/aiohttp/web_app.py\", line 458, in _handle\r\n    resp = await handler(request)\r\n  File \"a3.py\", line 17, in handle\r\n    return web.Response(\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/asyncpg/pool.py\", line 780, in __aexit__\r\n    await self.pool.release(con)\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/asyncpg/pool.py\", line 654, in release\r\n    return await asyncio.shield(ch.release(timeout))\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/asyncpg/pool.py\", line 216, in release\r\n    raise ex\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/asyncpg/pool.py\", line 206, in release\r\n    await self._con.reset(timeout=budget)\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/asyncpg/connection.py\", line 1114, in reset\r\n    await self.execute(reset_query, timeout=timeout)\r\n  File \"/opt/miniconda2/envs/asyncio/lib/python3.8/site-packages/asyncpg/connection.py\", line 272, in execute\r\n    return await self._protocol.query(query, timeout)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 316, in query\r\nasyncpg.exceptions.UndefinedFileError: could not access file \"$libdir/plpgsql\": No such file or directory\r\n^@^@\r\n```\r\n\r\nAnd if remove the connection pool,  the demo can work.\r\n\r\nAnd on Linux (Ubuntu 18.04) it works well. (same asyncpg version)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/541", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/541/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/541/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/541", "id": 580281231, "node_id": "MDU6SXNzdWU1ODAyODEyMzE=", "number": 541, "title": "When using connection pool, session parameters are not preserved", "user": {"login": "sergeyspatar", "id": 29392547, "node_id": "MDQ6VXNlcjI5MzkyNTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/29392547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergeyspatar", "html_url": "https://github.com/sergeyspatar", "followers_url": "https://api.github.com/users/sergeyspatar/followers", "following_url": "https://api.github.com/users/sergeyspatar/following{/other_user}", "gists_url": "https://api.github.com/users/sergeyspatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergeyspatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergeyspatar/subscriptions", "organizations_url": "https://api.github.com/users/sergeyspatar/orgs", "repos_url": "https://api.github.com/users/sergeyspatar/repos", "events_url": "https://api.github.com/users/sergeyspatar/events{/privacy}", "received_events_url": "https://api.github.com/users/sergeyspatar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-12T23:35:06Z", "updated_at": "2020-03-16T23:04:12Z", "closed_at": "2020-03-12T23:46:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using a connection pool, session parameters such as `search_path`, `session time zone`, `application_name` are not preserved when connection is returned to the pool. As a result, I have to use a setup coroutine that is called every time I acquire a connection from the pool:\r\n\r\n```python\r\nasync def conn_setup(conn):\r\n    await conn.execute(\"set search_path to my_schema,public\")\r\n    await conn.execute(\"set session time zone 'UTC'\")\r\n    await conn.execute(\"set application_name to 'my_app'\")\r\n\r\npool = await asyncpg.create_pool(..., setup=conn_setup)\r\n```\r\n\r\nIt means that 3 additional operations will be performed every time I need to run a simple query on a pool. What is the reason that these session parameters are cleared each time? Can we change this logic?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/540", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/540/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/540/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/540/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/540", "id": 580271286, "node_id": "MDU6SXNzdWU1ODAyNzEyODY=", "number": 540, "title": "Broken link in documentation in connect() parameter server_settings", "user": {"login": "sergeyspatar", "id": 29392547, "node_id": "MDQ6VXNlcjI5MzkyNTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/29392547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergeyspatar", "html_url": "https://github.com/sergeyspatar", "followers_url": "https://api.github.com/users/sergeyspatar/followers", "following_url": "https://api.github.com/users/sergeyspatar/following{/other_user}", "gists_url": "https://api.github.com/users/sergeyspatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergeyspatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergeyspatar/subscriptions", "organizations_url": "https://api.github.com/users/sergeyspatar/orgs", "repos_url": "https://api.github.com/users/sergeyspatar/repos", "events_url": "https://api.github.com/users/sergeyspatar/events{/privacy}", "received_events_url": "https://api.github.com/users/sergeyspatar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-12T23:04:34Z", "updated_at": "2020-07-18T16:28:23Z", "closed_at": "2020-07-18T16:28:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "In the [documentation](https://magicstack.github.io/asyncpg/current/api/index.html) for `connect()` function, parameter **server_settings** has the following description:\r\n\r\n> An optional dict of server runtime parameters. Refer to PostgreSQL documentation for a [list of supported options](https://magicstack.github.io/asyncpg/current/api/serversettings).\r\n\r\nThe link in the description returns error 404 Not found.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/536", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/536/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/536/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/536", "id": 569500575, "node_id": "MDU6SXNzdWU1Njk1MDA1NzU=", "number": 536, "title": "sql query with IS clause excute failed", "user": {"login": "beruhan", "id": 7598892, "node_id": "MDQ6VXNlcjc1OTg4OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/7598892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beruhan", "html_url": "https://github.com/beruhan", "followers_url": "https://api.github.com/users/beruhan/followers", "following_url": "https://api.github.com/users/beruhan/following{/other_user}", "gists_url": "https://api.github.com/users/beruhan/gists{/gist_id}", "starred_url": "https://api.github.com/users/beruhan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beruhan/subscriptions", "organizations_url": "https://api.github.com/users/beruhan/orgs", "repos_url": "https://api.github.com/users/beruhan/repos", "events_url": "https://api.github.com/users/beruhan/events{/privacy}", "received_events_url": "https://api.github.com/users/beruhan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-23T14:08:15Z", "updated_at": "2020-02-23T15:53:14Z", "closed_at": "2020-02-23T15:53:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "the following sql query raised ```PostgresSyntaxError: syntax error at or near \"$1\"```\r\n```\r\nconn = await asyncpg.connect('postgresql://postgres@locahost/test',)\u2028\r\n# Execute a statement to create a new table.\u2028\r\nawait conn.execute('''select * from test where get_dos IS $1''', True)\u2028\r\n# Close the connection.\u2028await conn.close()\r\n```\r\nthe **IS** clause is not postgresql standard?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/535", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/535/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/535/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/535/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/535", "id": 566773072, "node_id": "MDU6SXNzdWU1NjY3NzMwNzI=", "number": 535, "title": "paginating a large insertion? (alternative to `execute_values` in psycopg2)", "user": {"login": "jbkoh", "id": 1572627, "node_id": "MDQ6VXNlcjE1NzI2Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/1572627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbkoh", "html_url": "https://github.com/jbkoh", "followers_url": "https://api.github.com/users/jbkoh/followers", "following_url": "https://api.github.com/users/jbkoh/following{/other_user}", "gists_url": "https://api.github.com/users/jbkoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbkoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbkoh/subscriptions", "organizations_url": "https://api.github.com/users/jbkoh/orgs", "repos_url": "https://api.github.com/users/jbkoh/repos", "events_url": "https://api.github.com/users/jbkoh/events{/privacy}", "received_events_url": "https://api.github.com/users/jbkoh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-02-18T09:53:33Z", "updated_at": "2020-02-19T00:53:09Z", "closed_at": "2020-02-19T00:52:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there, thanks for the great project!\r\n\r\nI have a bunch of data stream that I would like to ingest into PostgreSQL. In the ingestion, I need to check whether the inserting data are updating or not based on some index. Basically like this\r\n```sql\r\nINSERT INTO table1 (uuid, time, number)\r\nVALUES %s\r\nON CONFLICT (time, uuid) DO UPDATE SET number = excluded.number;\r\n```\r\nIn case the data are actually large, I have used [execute_values](https://www.psycopg.org/docs/extras.html#psycopg2.extras.execute_values) in psycopg2. This paginates the large data to join them into a smaller number of queries (not a single huge query). I wonder if asyncpg supports (or would support) a similar feature. Otherwise, I could still paginate the data by myself with executing `executemany` multiple times, but I think `execute_values` looks nicer.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/534", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/534/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/534/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/534", "id": 566379769, "node_id": "MDU6SXNzdWU1NjYzNzk3Njk=", "number": 534, "title": "ImportError: dlopen failed: cannot locate symbol \"uuid_to_hex\" referenced by", "user": {"login": "AXVin", "id": 35896758, "node_id": "MDQ6VXNlcjM1ODk2NzU4", "avatar_url": "https://avatars2.githubusercontent.com/u/35896758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AXVin", "html_url": "https://github.com/AXVin", "followers_url": "https://api.github.com/users/AXVin/followers", "following_url": "https://api.github.com/users/AXVin/following{/other_user}", "gists_url": "https://api.github.com/users/AXVin/gists{/gist_id}", "starred_url": "https://api.github.com/users/AXVin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AXVin/subscriptions", "organizations_url": "https://api.github.com/users/AXVin/orgs", "repos_url": "https://api.github.com/users/AXVin/repos", "events_url": "https://api.github.com/users/AXVin/events{/privacy}", "received_events_url": "https://api.github.com/users/AXVin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-17T15:42:18Z", "updated_at": "2020-05-02T16:45:56Z", "closed_at": "2020-05-02T16:45:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.20.1\r\n* **PostgreSQL version**: -\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.8.1\r\n* **Platform**: Termux v0.92 on Android 9.0\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: None\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nWhenever i try to import asyncpg in termux, i get this error. I asked some other people to try the same on their devices and this error was reproduceable\r\n```python\r\n$ python\r\nPython 3.8.1 (default, Jan 19 2020, 14:45:41)\r\n[Clang 8.0.7 (https://android.googlesource.com/toolchain/clang b55f2d4ebfd35bf6 on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import asyncpg\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/data/data/com.termux/files/usr/lib/python3.8/site-packages/asyncpg/__init__.py\", line 8, in <module>\r\n    from .connection import connect, Connection  # NOQA\r\n  File \"/data/data/com.termux/files/usr/lib/python3.8/site-packages/asyncpg/connection.py\", line 19, in <module>\r\n    from . import connect_utils\r\n  File \"/data/data/com.termux/files/usr/lib/python3.8/site-packages/asyncpg/connect_utils.py\", line 27, in <module>\r\n    from . import protocol\r\n  File \"/data/data/com.termux/files/usr/lib/python3.8/site-packages/asyncpg/protocol/__init__.py\", line 8, in <module>\r\n    from .protocol import Protocol, Record, NO_TIMEOUT  # NOQA\r\n  File \"asyncpg/protocol/protocol.pyx\", line 1, in init asyncpg.protocol.protocol\r\nImportError: dlopen failed: cannot locate symbol \"uuid_to_hex\" referenced by \"/data/data/com.termux/files/usr/lib/python3.8/site-packages/asyncpg/pgproto/pgproto.cpython-38.so\"...\r\n>>>```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/533", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/533/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/533/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/533", "id": 565029872, "node_id": "MDU6SXNzdWU1NjUwMjk4NzI=", "number": 533, "title": "Equivalent of cursor.description in DBAPI2 for deriving the columns that would be returned by a 'limit 0' query?", "user": {"login": "simonw", "id": 9599, "node_id": "MDQ6VXNlcjk1OTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/9599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonw", "html_url": "https://github.com/simonw", "followers_url": "https://api.github.com/users/simonw/followers", "following_url": "https://api.github.com/users/simonw/following{/other_user}", "gists_url": "https://api.github.com/users/simonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonw/subscriptions", "organizations_url": "https://api.github.com/users/simonw/orgs", "repos_url": "https://api.github.com/users/simonw/repos", "events_url": "https://api.github.com/users/simonw/events{/privacy}", "received_events_url": "https://api.github.com/users/simonw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-14T00:27:35Z", "updated_at": "2020-02-14T00:42:55Z", "closed_at": "2020-02-14T00:42:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I may have missed something, but I don't think `asyncpg` has an equivalent to the `cursor.description` capability in the DBAPI2 semi-standard, which is causing me a small problem.\r\n\r\nI've been using a trick to determine the column names that would be returned by a query without fully executing the query. I'll demonstrate with SQLite:\r\n\r\n```\r\nIn [1]: import sqlite3                                                                                    \r\nIn [2]: db = sqlite3.connect(\":memory:\")                                                                 \r\nIn [3]: cursor = db.execute(\"select * from sqlite_master limit 0\")                                        \r\nIn [4]: [c[0] for c in cursor.description]                                                                \r\nOut[4]: ['type', 'name', 'tbl_name', 'rootpage', 'sql']\r\n```\r\n\r\nSo you run a query with `limit 0` - avoiding returning any rows - but you can still use the `cursor.description` property to figure out the names of the columns that WOULD have been returned.\r\n\r\nThis is particularly useful for dealing with complex SELECT statements - if you're doing a `select *` you could just look at what columns the table has, but for a more complex query being able to figure out what columns it will return without actually executing the full query can be really useful.\r\n\r\nAs far as I can tell, `asyncpg` only lets you run `fetch()` and get back a Python list of Record objects. Provided you have at least one result this is fine - you can look at the first result and use `record.keys()` to figure out what the columns are. But... if you request 0 results you get back an empty Python list, which you can't use to access an equivalent of `cursor.description`!\r\n\r\nPlease let me know if there's another way to do this (to analyze a query and figure out the columns it would return without fully executing it) - if there isn't then please consider this a feature request!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/531", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/531/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/531/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/531", "id": 553474415, "node_id": "MDU6SXNzdWU1NTM0NzQ0MTU=", "number": 531, "title": "[Feature] Support DEFAULT with executemany", "user": {"login": "Andarius", "id": 5070712, "node_id": "MDQ6VXNlcjUwNzA3MTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/5070712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andarius", "html_url": "https://github.com/Andarius", "followers_url": "https://api.github.com/users/Andarius/followers", "following_url": "https://api.github.com/users/Andarius/following{/other_user}", "gists_url": "https://api.github.com/users/Andarius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andarius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andarius/subscriptions", "organizations_url": "https://api.github.com/users/Andarius/orgs", "repos_url": "https://api.github.com/users/Andarius/repos", "events_url": "https://api.github.com/users/Andarius/events{/privacy}", "received_events_url": "https://api.github.com/users/Andarius/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-22T11:18:22Z", "updated_at": "2020-06-26T10:46:12Z", "closed_at": "2020-06-26T10:46:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to index data in the following table using `executemany`\r\n\r\n```\r\nCREATE TABLE IF NOT EXISTS test.test\r\n(\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    created_at TIMESTAMP DEFAULT now()\r\n);\r\n```\r\n\r\nIt would be nice to write query such as all the logic is in PG and not on the client side.\r\n```\r\nfrom asyncpg import DEFAULT\r\n\r\nquery = \"INSERT INTO general.tags (id, created_at) VALUES ( $1, $2 )\r\ndata = [\r\n (1, \"2020-01-22 08:19:59.616065\"),\r\n (2, DEFAULT),\r\n\r\n]\r\nconn.executemany(query, data)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/528", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/528/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/528/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/528/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/528", "id": 550126003, "node_id": "MDU6SXNzdWU1NTAxMjYwMDM=", "number": 528, "title": "executemany PayloadTooLargeError", "user": {"login": "slidenerd", "id": 5139030, "node_id": "MDQ6VXNlcjUxMzkwMzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5139030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slidenerd", "html_url": "https://github.com/slidenerd", "followers_url": "https://api.github.com/users/slidenerd/followers", "following_url": "https://api.github.com/users/slidenerd/following{/other_user}", "gists_url": "https://api.github.com/users/slidenerd/gists{/gist_id}", "starred_url": "https://api.github.com/users/slidenerd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slidenerd/subscriptions", "organizations_url": "https://api.github.com/users/slidenerd/orgs", "repos_url": "https://api.github.com/users/slidenerd/repos", "events_url": "https://api.github.com/users/slidenerd/events{/privacy}", "received_events_url": "https://api.github.com/users/slidenerd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-15T11:21:07Z", "updated_at": "2020-01-15T11:42:06Z", "closed_at": "2020-01-15T11:42:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.20.0\r\n* **PostgreSQL version**: 11.5\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Yes\r\n* **Python version**:  3.7.2\r\n* **Platform**: macosx high sierra 10.13.6 (17G65)\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: pipenv install asyncpg\r\n* **If you built asyncpg locally, which version of Cython did you use?**: Not Applicable\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Havent tested\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nI am trying to insert many rows into a table using executemany, I keep getting this error\r\n```\r\n\r\nasync def load_feed(session, feed_id, url, pool):\r\n    # https://stackoverflow.com/questions/1546226/simple-way-to-remove-multiple-spaces-in-a-string\r\n    no_extra_spaces = re.compile('\\s\\s{2,}')\r\n    try:\r\n        async with session.get(url) as response:\r\n            text = await response.text()\r\n            feed = feedparser.parse(text)\r\n            items = []\r\n            for entry in feed.entries:\r\n\r\n                unique_id = entry.get('id', '').strip()\r\n                guid = hashlib.md5(unique_id.encode('utf-8')).hexdigest()\r\n                pubdate = datetime.datetime(*entry.published_parsed[:6])\r\n                link = entry.get('link', '').strip()\r\n                title = no_extra_spaces.sub(' ', entry.get('title', '').strip())\r\n                summary = no_extra_spaces.sub(' ', entry.get('summary', '').strip())\r\n                content = ''\r\n                for c in entry.get('content', []):\r\n                    content = content + ' ' + c.get('value', '')\r\n                content = no_extra_spaces.sub(' ', content.strip())\r\n                author = entry.author.strip()\r\n                items.append((guid, pubdate, link, unique_id, title, summary, content, author, feed_id))\r\n\r\n        async with pool.acquire() as conn:\r\n            stmt = 'insert into feed_items (feed_item_id, pubdate, link, guid, title, summary, content, author, feed_id) values($1, $2, $3, $4, $5, $6, $7, $8, $9) on conflict do nothing'\r\n            await conn.executemany(stmt, items)\r\n    except:\r\n        logging.error(url, 'load_feed() had an error', exc_info=False)\r\n```\r\n\r\nload_feed(session, 19, 'https://cryptobriefing.com/feed/', pool) immediately causes the below error\r\n```\r\n\r\n--- Logging error ---\r\nTraceback (most recent call last):\r\n  File \"./server/feed_manager.py\", line 94, in load_feed\r\n    await conn.executemany(stmt, items)\r\n  File \"/Users/zup/.local/share/virtualenvs/prices-yYqdLCeW/lib/python3.7/site-packages/asyncpg/connection.py\", line 305, in executemany\r\n    return await self._executemany(command, args, timeout)\r\n  File \"/Users/zup/.local/share/virtualenvs/prices-yYqdLCeW/lib/python3.7/site-packages/asyncpg/connection.py\", line 1418, in _executemany\r\n    result, _ = await self._do_execute(query, executor, timeout)\r\n  File \"/Users/zup/.local/share/virtualenvs/prices-yYqdLCeW/lib/python3.7/site-packages/asyncpg/connection.py\", line 1433, in _do_execute\r\n    result = await executor(stmt, None)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 232, in bind_execute_many\r\nasyncpg.exceptions.InvalidParameterValueError: payload string too long\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/logging/__init__.py\", line 1034, in emit\r\n    msg = self.format(record)\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/logging/__init__.py\", line 880, in format\r\n    return fmt.format(record)\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/logging/__init__.py\", line 619, in format\r\n    record.message = record.getMessage()\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/logging/__init__.py\", line 380, in getMessage\r\n    msg = msg % self.args\r\nTypeError: not all arguments converted during string formatting\r\nCall stack:\r\n  File \"./server/feed_manager.py\", line 132, in <module>\r\n    load_feeds(host, port, database, user, password, pool_max))\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/asyncio/base_events.py\", line 571, in run_until_complete\r\n    self.run_forever()\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/asyncio/base_events.py\", line 539, in run_forever\r\n    self._run_once()\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/asyncio/base_events.py\", line 1775, in _run_once\r\n    handle._run()\r\n  File \"/Users/zup/.pyenv/versions/3.7.2/lib/python3.7/asyncio/events.py\", line 88, in _run\r\n    self._context.run(self._callback, *self._args)\r\n  File \"./server/feed_manager.py\", line 97, in load_feed\r\n    logging.error(url, 'load_feed() had an error', exc_info=False)\r\nMessage: 'https://cryptobriefing.com/feed/'\r\nArguments: ('load_feed() had an error',)\r\n```\r\n\r\nUPDATE\r\nWhen I tested there were 8 items on the feed, the length of the content string field for each item was as follows\r\n\r\n3248\r\n3732\r\n4927\r\n10542\r\n7959\r\n4143\r\n8856\r\n4923\r\n\r\nare those string lengths causing a problem, doesn't the library do something about this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/524", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/524/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/524/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/524/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/524", "id": 547816776, "node_id": "MDU6SXNzdWU1NDc4MTY3NzY=", "number": 524, "title": "Connection._cleanup not being called when the connection is dropped", "user": {"login": "iomintz", "id": 538336, "node_id": "MDQ6VXNlcjUzODMzNg==", "avatar_url": "https://avatars0.githubusercontent.com/u/538336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iomintz", "html_url": "https://github.com/iomintz", "followers_url": "https://api.github.com/users/iomintz/followers", "following_url": "https://api.github.com/users/iomintz/following{/other_user}", "gists_url": "https://api.github.com/users/iomintz/gists{/gist_id}", "starred_url": "https://api.github.com/users/iomintz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iomintz/subscriptions", "organizations_url": "https://api.github.com/users/iomintz/orgs", "repos_url": "https://api.github.com/users/iomintz/repos", "events_url": "https://api.github.com/users/iomintz/events{/privacy}", "received_events_url": "https://api.github.com/users/iomintz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-01-10T01:39:36Z", "updated_at": "2020-01-10T04:05:05Z", "closed_at": "2020-01-10T04:05:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This issue is continued from comments on #421 and #283.\r\n\r\n## Problem steps\r\n\r\nRun the following code:\r\n\r\n```py\r\n#!/usr/bin/env python3\r\n\r\nimport asyncpg\r\nimport asyncio\r\n\r\nclass MyConnection(asyncpg.Connection):\r\n\tdef _cleanup(self):\r\n\t\tprint(1)\r\n\t\treturn super()._cleanup()\r\n\r\nasync def amain():\r\n\tconn = await asyncpg.connect(connection_class=MyConnection)\r\n\tawait asyncio.sleep(float('inf'))\r\n\r\nif __name__ == '__main__':\r\n\tasyncio.run(amain())\r\n```\r\n\r\nThen restart postgres.\r\n\r\n## Expected results\r\n\r\n\"1\" is printed.\r\n\r\n## Actual results\r\n\r\nNothing is printed.\r\n\r\n## System info\r\n\r\n* **asyncpg version**: commit 851d58651deb10593a31a289b735c180f7895e3e\r\n* **PostgreSQL version**: 12.1\r\n* **Python version**: CPython 3.8.1\r\n* **Platform**: Arch Linux\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: No\r\n* **If you built asyncpg locally, which version of Cython did you use?**: 0.29.14\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/523", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/523/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/523/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/523", "id": 547796374, "node_id": "MDU6SXNzdWU1NDc3OTYzNzQ=", "number": 523, "title": "Unknown Error when opening Pool", "user": {"login": "victoraugustolls", "id": 7843637, "node_id": "MDQ6VXNlcjc4NDM2Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7843637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victoraugustolls", "html_url": "https://github.com/victoraugustolls", "followers_url": "https://api.github.com/users/victoraugustolls/followers", "following_url": "https://api.github.com/users/victoraugustolls/following{/other_user}", "gists_url": "https://api.github.com/users/victoraugustolls/gists{/gist_id}", "starred_url": "https://api.github.com/users/victoraugustolls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victoraugustolls/subscriptions", "organizations_url": "https://api.github.com/users/victoraugustolls/orgs", "repos_url": "https://api.github.com/users/victoraugustolls/repos", "events_url": "https://api.github.com/users/victoraugustolls/events{/privacy}", "received_events_url": "https://api.github.com/users/victoraugustolls/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-10T00:22:24Z", "updated_at": "2020-01-10T04:56:24Z", "closed_at": "2020-01-10T04:54:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.20.0\r\n* **PostgreSQL version**: 10\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Azure PostgreSQL\r\n* **Python version**: 3.7.5\r\n* **Platform**: Running with FastAPI inside docker\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: -\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nHi! I started receiving an UnknownError when I try to open a connection pool. Already checked Postgres Logs and it is accepting the connection.\r\nThe stack is below:\r\n\r\n```\r\n2020-01-10T00:13:15.502124269Z [2020-01-10 00:13:15 +0000] [2040] [ERROR] Traceback (most recent call last):\r\n2020-01-10T00:13:15.502138269Z   File \"/app/app/main.py\", line 24, in startup\r\n2020-01-10T00:13:15.502143469Z     db = await PostgresRepository.create()\r\n2020-01-10T00:13:15.502157870Z   File \"/app/app/repositories/postgres/postgres.py\", line 40, in create\r\n2020-01-10T00:13:15.502161670Z     raise e\r\n2020-01-10T00:13:15.502185771Z   File \"/app/app/repositories/postgres/postgres.py\", line 36, in create\r\n2020-01-10T00:13:15.502196671Z     max_inactive_connection_lifetime=100.0,\r\n2020-01-10T00:13:15.502200872Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 398, in _async__init__\r\n2020-01-10T00:13:15.502204772Z     await self._initialize()\r\n2020-01-10T00:13:15.502208572Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 426, in _initialize\r\n2020-01-10T00:13:15.502212472Z     await first_ch.connect()\r\n2020-01-10T00:13:15.502216172Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 125, in connect\r\n2020-01-10T00:13:15.502220072Z     self._con = await self._pool._get_new_connection()\r\n2020-01-10T00:13:15.502223872Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 472, in _get_new_connection\r\n2020-01-10T00:13:15.502227773Z     **self._connect_kwargs)\r\n2020-01-10T00:13:15.502231473Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/connection.py\", line 1677, in connect\r\n2020-01-10T00:13:15.502235373Z     max_cacheable_statement_size=max_cacheable_statement_size)\r\n2020-01-10T00:13:15.502239173Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 654, in _connect\r\n2020-01-10T00:13:15.502243073Z     connection_class=connection_class)\r\n2020-01-10T00:13:15.502246773Z   File \"/usr/local/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 630, in _connect_addr\r\n2020-01-10T00:13:15.502250673Z     await asyncio.wait_for(connected, timeout=timeout)\r\n2020-01-10T00:13:15.502254474Z   File \"/usr/local/lib/python3.7/asyncio/tasks.py\", line 442, in wait_for\r\n2020-01-10T00:13:15.502258274Z     return fut.result()\r\n2020-01-10T00:13:15.502261974Z asyncpg.exceptions._base.UnknownPostgresError: Cannot connect to the server {server}\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/520", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/520/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/520/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/520/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/520", "id": 546106017, "node_id": "MDU6SXNzdWU1NDYxMDYwMTc=", "number": 520, "title": "Segmentation fault when there are trailing zeros in numeric values", "user": {"login": "niranjan94", "id": 2404372, "node_id": "MDQ6VXNlcjI0MDQzNzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2404372?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niranjan94", "html_url": "https://github.com/niranjan94", "followers_url": "https://api.github.com/users/niranjan94/followers", "following_url": "https://api.github.com/users/niranjan94/following{/other_user}", "gists_url": "https://api.github.com/users/niranjan94/gists{/gist_id}", "starred_url": "https://api.github.com/users/niranjan94/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niranjan94/subscriptions", "organizations_url": "https://api.github.com/users/niranjan94/orgs", "repos_url": "https://api.github.com/users/niranjan94/repos", "events_url": "https://api.github.com/users/niranjan94/events{/privacy}", "received_events_url": "https://api.github.com/users/niranjan94/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-07T06:30:41Z", "updated_at": "2020-01-09T04:41:03Z", "closed_at": "2020-01-09T04:41:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: `0.20.0`\r\n* **PostgreSQL version**: `11` & `12`\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: `AWS RDS (pg 11) & Local (pg 12)`\r\n* **Python version**: `3.8.1`\r\n* **Platform**: `Mac` & `Debian 10`\r\n* **Do you use pgbouncer?**: `No`\r\n* **Did you install asyncpg with pip?**: `Yes`\r\n* **If you built asyncpg locally, which version of Cython did you use?**: `Did not build locally`\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: `Yes`\r\n\r\n\r\n---\r\n\r\nasyncpg fails in a segmentation fault when querying rows that contain large numeric values with trailing zeros.\r\n\r\n```python\r\nimport asyncio\r\nimport asyncpg\r\n\r\n\r\nasync def run():\r\n    conn = await asyncpg.connect(\r\n        user='niranjan', password='password',\r\n        database='niranjan', host='192.168.65.2'\r\n    )\r\n    await conn.fetch(\"\"\"\r\n        SELECT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000::numeric\r\n    \"\"\")\r\n    await conn.close()\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(run())\r\n```\r\n\r\nThis results in \r\n\r\n```\r\nroot@docker-desktop:/data# python -q -X faulthandler overflow.py \r\nFatal Python error: Segmentation fault\r\n\r\nCurrent thread 0x00007fe4aeca6740 (most recent call first):\r\n  File \"/usr/local/lib/python3.8/asyncio/selector_events.py\", line 860 in _read_ready__data_received\r\n  File \"/usr/local/lib/python3.8/asyncio/selector_events.py\", line 803 in _read_ready\r\n  File \"/usr/local/lib/python3.8/asyncio/events.py\", line 81 in _run\r\n  File \"/usr/local/lib/python3.8/asyncio/base_events.py\", line 1855 in _run_once\r\n  File \"/usr/local/lib/python3.8/asyncio/base_events.py\", line 567 in run_forever\r\n  File \"/usr/local/lib/python3.8/asyncio/base_events.py\", line 599 in run_until_complete\r\n  File \"/usr/local/lib/python3.8/asyncio/runners.py\", line 43 in run\r\n  File \"overflow.py\", line 17 in <module>\r\nSegmentation fault\r\n```\r\n\r\n---\r\n\r\nBut, adding at least a single number at the end of the trailing zeros ensure the query runs correctly.\r\n\r\n```sql\r\nSELECT 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001::numeric\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/516", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/516/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/516/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/516", "id": 541042925, "node_id": "MDU6SXNzdWU1NDEwNDI5MjU=", "number": 516, "title": "FR: connect_timeout in Connection URIs", "user": {"login": "Andrei-Pozolotin", "id": 1622151, "node_id": "MDQ6VXNlcjE2MjIxNTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1622151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andrei-Pozolotin", "html_url": "https://github.com/Andrei-Pozolotin", "followers_url": "https://api.github.com/users/Andrei-Pozolotin/followers", "following_url": "https://api.github.com/users/Andrei-Pozolotin/following{/other_user}", "gists_url": "https://api.github.com/users/Andrei-Pozolotin/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andrei-Pozolotin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andrei-Pozolotin/subscriptions", "organizations_url": "https://api.github.com/users/Andrei-Pozolotin/orgs", "repos_url": "https://api.github.com/users/Andrei-Pozolotin/repos", "events_url": "https://api.github.com/users/Andrei-Pozolotin/events{/privacy}", "received_events_url": "https://api.github.com/users/Andrei-Pozolotin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-20T15:10:57Z", "updated_at": "2019-12-22T06:14:05Z", "closed_at": "2019-12-22T01:21:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "1. the following snippet:\r\n```\r\nimport asyncpg\r\nawait asyncpg.connect(dsn=data_conn)\r\n```\r\n\r\n2. works with `application_name`:\r\n```\r\ndata_conn=\"postgresql://postgres:postgres@data-serv-0:5432/postgres?application_name=simple\"\r\n```\r\n\r\n3. and fails with `connect_timeout`:\r\n```\r\ndata_conn=\"postgresql://postgres:postgres@data-serv-0:5432/postgres?application_name=simple&connect_timeout=3\"\r\n```\r\n```\r\nasyncpg.exceptions.UndefinedObjectError: unrecognized configuration parameter \"connect_timeout\"\r\n```\r\n\r\ndespite both `application_name` and `connect_timeout` should be valid options:\r\nhttps://www.postgresql.org/docs/12/libpq-connect.html#LIBPQ-CONNSTRING\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/514", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/514/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/514/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/514/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/514", "id": 534443701, "node_id": "MDU6SXNzdWU1MzQ0NDM3MDE=", "number": 514, "title": "Extra zero decimal digits after decoding NUMERIC (DECIMAL) type", "user": {"login": "vemikhaylov", "id": 38596482, "node_id": "MDQ6VXNlcjM4NTk2NDgy", "avatar_url": "https://avatars3.githubusercontent.com/u/38596482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemikhaylov", "html_url": "https://github.com/vemikhaylov", "followers_url": "https://api.github.com/users/vemikhaylov/followers", "following_url": "https://api.github.com/users/vemikhaylov/following{/other_user}", "gists_url": "https://api.github.com/users/vemikhaylov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemikhaylov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemikhaylov/subscriptions", "organizations_url": "https://api.github.com/users/vemikhaylov/orgs", "repos_url": "https://api.github.com/users/vemikhaylov/repos", "events_url": "https://api.github.com/users/vemikhaylov/events{/privacy}", "received_events_url": "https://api.github.com/users/vemikhaylov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-07T19:41:45Z", "updated_at": "2020-01-09T09:10:57Z", "closed_at": "2020-01-09T04:41:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: PostgreSQL 10.10 / PostgreSQL 11.5 \r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Yes, problem is reproduced using the PostgreSQL provided by AWS and a local install\r\n* **Python version**: 3.7\r\n* **Platform**: Linux  / Darwin 18.6.0 x86_64\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: No\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nI have encountered that asyncpg decodes values of NUMERIC type with extra zero decimal digits despite the explicitly specified scale.\r\n\r\nThis code:  \r\n\r\n```python\r\nimport asyncio\r\nimport asyncpg\r\n\r\n\r\nasync def main():\r\n    conn = await asyncpg.connect()\r\n    await conn.execute('''\r\n        CREATE TABLE test_numeric(\r\n            id serial PRIMARY KEY,\r\n            value NUMERIC(1000, 8)\r\n        )\r\n    ''')\r\n    await conn.execute('''\r\n        INSERT INTO test_numeric(value) VALUES('0.00003000')\r\n    ''')\r\n\r\n    row = await conn.fetchrow('SELECT * FROM test_numeric;')\r\n    print(row)\r\n    await conn.close()\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n```\r\nProduces the following output (12 digits right to the point while the scale of 8 was specified):\r\n```\r\n<Record id=1 value=Decimal('0.000030000000')>\r\n```\r\nHowever, in the database everything looks fine:\r\n```\r\ntest=# SELECT * FROM test_numeric;\r\n id |   value    \r\n----+------------\r\n  1 | 0.00003000\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/508", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/508/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/508/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/508", "id": 529237657, "node_id": "MDU6SXNzdWU1MjkyMzc2NTc=", "number": 508, "title": "In transaction ForeignKeyViolationError and UniqueViolationError are caught in different places", "user": {"login": "levchik", "id": 1104737, "node_id": "MDQ6VXNlcjExMDQ3Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1104737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levchik", "html_url": "https://github.com/levchik", "followers_url": "https://api.github.com/users/levchik/followers", "following_url": "https://api.github.com/users/levchik/following{/other_user}", "gists_url": "https://api.github.com/users/levchik/gists{/gist_id}", "starred_url": "https://api.github.com/users/levchik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levchik/subscriptions", "organizations_url": "https://api.github.com/users/levchik/orgs", "repos_url": "https://api.github.com/users/levchik/repos", "events_url": "https://api.github.com/users/levchik/events{/privacy}", "received_events_url": "https://api.github.com/users/levchik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-27T09:56:43Z", "updated_at": "2019-11-29T15:25:18Z", "closed_at": "2019-11-29T15:25:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:  0.19.0\r\n* **PostgreSQL version**: 12.0\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: I use Docker image `postgres:12.0-alpine`\r\n* **Python version**: 3.8.0\r\n* **Platform**: Docker image `python:3.8.0-alpine3.10`\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: -\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: I've only tried uvloop 0.14.0\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nIf you want to do multiple inserts inside one transaction and want to catch possible errors `ForeignKeyViolationError` & `UniqueViolationError` from those insert statements you can't do that in one place. `ForeignKeyViolationError` can only be caught AFTER `commit` and `UniqueViolationError` is caught between `start` and `commit`.\r\n\r\nSee example code below:\r\n\r\n```python\r\nasync with pool.acquire() as conn:\r\n    tr = conn.transaction()\r\n    await tr.start()\r\n    try:\r\n        await conn.execute(\"INSERT INTO table1 (col1, col2) VALUES (1, 2)\")\r\n        await conn.execute(\"INSERT INTO table2 (table1_id, table3_id) VALUES (3, 4)\")\r\n    except asyncpg.exceptions.ForeignKeyViolationError:\r\n        # Here exception will never be caught\r\n        pass\r\n    except asyncpg.exceptions.UniqueViolationError:\r\n        # This works as expected: exception caught in correct place\r\n        await tr.rollback()\r\n        raise MyCustomError(\"Duplicate Record\")\r\n    except BaseException:\r\n        # Here we catch all other possible errors that could've happened\r\n        await tr.rollback()\r\n        raise\r\n    else:\r\n        try:\r\n            await tr.commit()\r\n        except asyncpg.exceptions.ForeignKeyViolationError:\r\n            # Here is where ForeignKeyViolationError exception is caught\r\n            raise MyCustomError(\"Related Record Doesn't Exist\")\r\n```\r\n\r\nIs this intended? Are there any other exceptions that are caught after `commit` besides `ForeignKeyViolationError`? I also have some places where I insert into two different tables inside one transaction and any of the inserts can raise `ForeignKeyViolationError`, so how do I know which table raised it?\r\n\r\n**This happens ONLY when used in transaction block: if I put these two execute statements just inside `await pool.acquire()` I can wrap both of them in `try`...`except` and catch errors separately and know which table raised exception.**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/506", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/506/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/506/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/506/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/506", "id": 526821839, "node_id": "MDU6SXNzdWU1MjY4MjE4Mzk=", "number": 506, "title": "Stress testing prepared statements...", "user": {"login": "bitmodeler", "id": 20399979, "node_id": "MDQ6VXNlcjIwMzk5OTc5", "avatar_url": "https://avatars2.githubusercontent.com/u/20399979?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitmodeler", "html_url": "https://github.com/bitmodeler", "followers_url": "https://api.github.com/users/bitmodeler/followers", "following_url": "https://api.github.com/users/bitmodeler/following{/other_user}", "gists_url": "https://api.github.com/users/bitmodeler/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitmodeler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitmodeler/subscriptions", "organizations_url": "https://api.github.com/users/bitmodeler/orgs", "repos_url": "https://api.github.com/users/bitmodeler/repos", "events_url": "https://api.github.com/users/bitmodeler/events{/privacy}", "received_events_url": "https://api.github.com/users/bitmodeler/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-21T20:23:43Z", "updated_at": "2019-11-22T04:48:20Z", "closed_at": "2019-11-22T04:48:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have been stress-testing your prepared statements (am running your driver in a uwsgi hosted app...) It works often, but then one of the queries [that uses a prepared statement] ran into the classic error mentioned in your FAQ:\r\n\r\n> **Why am I getting prepared statement errors?**\r\n> If you are getting intermittent prepared statement \"__asyncpg_stmt_xx__\" does not exist...\r\n> .\r\n> .\r\n> .\r\n> **_if you are using pgbouncer for connection pooling to a single server, switch to the connection pool functionality provided by asyncpg,_**\r\n\r\nUmm -I _AM_ using a connection pool provided by asyncpg. My app does a create_pool at startup (stored in a \"pool\" variable...); then this:\r\n\r\n```\r\nasync with pool.acquire() as conn:\r\n           async with conn.prepare(some_query) as statement:\r\n                      result=await statement.fetchval(...\r\n```\r\nWhat do ya think?\r\n\r\nTraceback indicates it's bombing on the \"prepare\"; the \"statement already exists\" error mentioned in your FAQ.\r\n\r\nIs this being caused by a cache optimization that the interpreter is doing, and I have to do an explicit \"del\" somewhere?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/503", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/503/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/503/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/503/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/503", "id": 524729601, "node_id": "MDU6SXNzdWU1MjQ3Mjk2MDE=", "number": 503, "title": "Passing UUID argument to query.", "user": {"login": "g-bar", "id": 22689058, "node_id": "MDQ6VXNlcjIyNjg5MDU4", "avatar_url": "https://avatars0.githubusercontent.com/u/22689058?v=4", "gravatar_id": "", "url": "https://api.github.com/users/g-bar", "html_url": "https://github.com/g-bar", "followers_url": "https://api.github.com/users/g-bar/followers", "following_url": "https://api.github.com/users/g-bar/following{/other_user}", "gists_url": "https://api.github.com/users/g-bar/gists{/gist_id}", "starred_url": "https://api.github.com/users/g-bar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/g-bar/subscriptions", "organizations_url": "https://api.github.com/users/g-bar/orgs", "repos_url": "https://api.github.com/users/g-bar/repos", "events_url": "https://api.github.com/users/g-bar/events{/privacy}", "received_events_url": "https://api.github.com/users/g-bar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-19T02:14:38Z", "updated_at": "2019-11-19T02:27:11Z", "closed_at": "2019-11-19T02:27:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "How do I properly pass a UUID str to a query?\r\nI'm trying to make the following query.\r\n\r\n`SELECT * FROM users WHERE id='a0922aa0-c4d7-4774-b203-2c57815d31cd'::uuid`\r\n\r\nBut passing args to the query like this won't work;\r\n`connection.fetchrow(\"SELECT * FROM users WHERE id=?::uuid\", (uuid,))`\r\nI've even tried putting single quotes around the string that represents the uuid like so:\r\n`connection.fetchrow(\"SELECT * FROM users WHERE id=?::uuid\", (f\"'{uuid}'\",))`\r\n\r\nI know my query is correct since if I do: \r\n\r\n`connection.fetchrow(f\"SELECT * FROM users WHERE id='{uuid}'::uuid\")` it works but of course I want to safely pass the string I get from the user.\r\n\r\nAny hints?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/502", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/502/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/502/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/502", "id": 524410004, "node_id": "MDU6SXNzdWU1MjQ0MTAwMDQ=", "number": 502, "title": "Deprecation warnings in asyncio with Python 3.8", "user": {"login": "dmajda", "id": 18821, "node_id": "MDQ6VXNlcjE4ODIx", "avatar_url": "https://avatars0.githubusercontent.com/u/18821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmajda", "html_url": "https://github.com/dmajda", "followers_url": "https://api.github.com/users/dmajda/followers", "following_url": "https://api.github.com/users/dmajda/following{/other_user}", "gists_url": "https://api.github.com/users/dmajda/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmajda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmajda/subscriptions", "organizations_url": "https://api.github.com/users/dmajda/orgs", "repos_url": "https://api.github.com/users/dmajda/repos", "events_url": "https://api.github.com/users/dmajda/events{/privacy}", "received_events_url": "https://api.github.com/users/dmajda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-18T14:40:49Z", "updated_at": "2019-11-19T22:28:45Z", "closed_at": "2019-11-19T22:28:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.19.0\r\n* **PostgreSQL version**: N/A\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: N/A\r\n* **Python version**: 3.8.0\r\n* **Platform**: N/A\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: N/A\r\n\r\nWhen using asyncpg with Python 3.8 with warnings enabled, deprecation warnings are emitted at various places where a `loop` argument is passed to `asyncio` APIs. This is because explicit passing of that argument was deprecated and will be removed in Python 3.10.\r\n\r\nA test suite of one of our internal services that uses asyncpg detected the following instances, but there can be more:\r\n\r\n  * [`connect_utils.py` line 515](https://github.com/MagicStack/asyncpg/blob/v0.19.0/asyncpg/connect_utils.py#L515)\r\n  * [`connect_utils.py` line 530](https://github.com/MagicStack/asyncpg/blob/v0.19.0/asyncpg/connect_utils.py#L530)\r\n  * [`connect_utils.py` line 537](https://github.com/MagicStack/asyncpg/blob/v0.19.0/asyncpg/connect_utils.py#L537)\r\n\r\nIt would be good to fix these warnings. I\u2019m not sure whether it would involve just refactoring few asyncio API calls, or whether it would require deeper changes in loop handling inside the library.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/501", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/501/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/501/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/501", "id": 521041424, "node_id": "MDU6SXNzdWU1MjEwNDE0MjQ=", "number": 501, "title": "py3.8/cython build error 'asyncpg.protocol.protocol.Codec' has no attribute '__reduce_cython__", "user": {"login": "cpaelzer", "id": 14993822, "node_id": "MDQ6VXNlcjE0OTkzODIy", "avatar_url": "https://avatars3.githubusercontent.com/u/14993822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpaelzer", "html_url": "https://github.com/cpaelzer", "followers_url": "https://api.github.com/users/cpaelzer/followers", "following_url": "https://api.github.com/users/cpaelzer/following{/other_user}", "gists_url": "https://api.github.com/users/cpaelzer/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpaelzer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpaelzer/subscriptions", "organizations_url": "https://api.github.com/users/cpaelzer/orgs", "repos_url": "https://api.github.com/users/cpaelzer/repos", "events_url": "https://api.github.com/users/cpaelzer/events{/privacy}", "received_events_url": "https://api.github.com/users/cpaelzer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-11T15:52:13Z", "updated_at": "2020-06-23T01:25:13Z", "closed_at": "2019-11-21T18:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.19\r\n* **PostgreSQL version**: 12\r\n* **Do you use a PostgreSQL SaaS?: No, issue reproduces at build time\r\n* **Python version**: 3.8\r\n* **Platform**: x86, armhf, arm64, ppc64el, s390x\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: No\r\n* **If you built asyncpg locally, which version of Cython did you use?**: 0.29.13\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Sorry, I don't know\r\n\r\nHi,\r\nI was looking at [build issues of asyncpg in recent Ubuntu versions](https://bugs.launchpad.net/ubuntu/+source/asyncpg/+bug/1850136). After some struggle I decided to go ahead and use asyncpg 0.19 for its release page listing PG-12 support.\r\n\r\nIt passes the PG-12 related issues it failed on before, but it breaks on some odd cython errors that exceed my python-foo. I wanted to report this here in case it might be known or if there are others affected by the same.\r\n\r\nThe build errors look like:\r\n\r\n> ==================================== ERRORS ====================================\r\n> _ ERROR collecting .pybuild/cpython3_3.8_asyncpg/build/tests/test__environment.py _\r\n> Traceback (most recent call last):\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/tests/test__environment.py\", line 11, in <module>\r\n>     import asyncpg\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/__init__.py\", line 8, in <module>\r\n>     from .connection import connect, Connection  # NOQA\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/connection.py\", line 20, in <module>\r\n>     from . import connect_utils\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/connect_utils.py\", line 27, in <module>\r\n>     from . import protocol\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/protocol/__init__.py\", line 8, in <module>\r\n>     from .protocol import Protocol, Record, NO_TIMEOUT  # NOQA\r\n>   File \"asyncpg/protocol/protocol.pyx\", line 1, in init asyncpg.protocol.protocol\r\n>     # Copyright (C) 2016-present the asyncpg authors and contributors\r\n>   File \"asyncpg/pgproto/./uuid.pyx\", line 162, in init asyncpg.pgproto.pgproto\r\n>     class UUID(PgBaseUUID, uuid.UUID):\r\n> TypeError: multiple bases have instance lay-out conflict\r\n> _ ERROR collecting .pybuild/cpython3_3.8_asyncpg/build/tests/test_adversity.py _\r\n> Traceback (most recent call last):\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/tests/test_adversity.py\", line 13, in <module>\r\n>     from asyncpg import _testbase as tb\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/__init__.py\", line 8, in <module>\r\n>     from .connection import connect, Connection  # NOQA\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/connection.py\", line 20, in <module>\r\n>     from . import connect_utils\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/connect_utils.py\", line 27, in <module>\r\n>     from . import protocol\r\n>   File \"/<<PKGBUILDDIR>>/.pybuild/cpython3_3.8_asyncpg/build/asyncpg/protocol/__init__.py\", line 8, in <module>\r\n>     from .protocol import Protocol, Record, NO_TIMEOUT  # NOQA\r\n>   File \"asyncpg/protocol/codecs/base.pyx\", line 20, in init asyncpg.protocol.protocol\r\n>     cdef class Codec:\r\n> AttributeError: type object 'asyncpg.protocol.protocol.Codec' has no attribute '__reduce_cython__'\r\n\r\nThe latter one is repeating with different sources and trace paths.\r\nA full log is in pastebin [here](http://paste.ubuntu.com/p/VRntTFgrs7/)\r\n\r\nNote: I first sumbled about pgptoto being removed from the release tarball in 0.19, but I fused it with head of [pgproto](https://github.com/MagicStack/py-pgproto) at `93f8959` as all commits since the last in the git submodule reference read safe and good. If you'd want me to exchange that for another version let me know.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/498", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/498/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/498/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/498", "id": 520573374, "node_id": "MDU6SXNzdWU1MjA1NzMzNzQ=", "number": 498, "title": "ProtocolError: unexpected instance of 'anyarray' type  (doc mismatch?)", "user": {"login": "CelestineKao", "id": 29710511, "node_id": "MDQ6VXNlcjI5NzEwNTEx", "avatar_url": "https://avatars2.githubusercontent.com/u/29710511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CelestineKao", "html_url": "https://github.com/CelestineKao", "followers_url": "https://api.github.com/users/CelestineKao/followers", "following_url": "https://api.github.com/users/CelestineKao/following{/other_user}", "gists_url": "https://api.github.com/users/CelestineKao/gists{/gist_id}", "starred_url": "https://api.github.com/users/CelestineKao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CelestineKao/subscriptions", "organizations_url": "https://api.github.com/users/CelestineKao/orgs", "repos_url": "https://api.github.com/users/CelestineKao/repos", "events_url": "https://api.github.com/users/CelestineKao/events{/privacy}", "received_events_url": "https://api.github.com/users/CelestineKao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-11-10T09:00:14Z", "updated_at": "2019-11-10T22:32:27Z", "closed_at": "2019-11-10T17:57:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.19.0\r\n* **PostgreSQL version**: 10.4\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: N/A\r\n* **Python version**: 3.6.8\r\n* **Platform**: Docker\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: pipenv\r\n* **If you built asyncpg locally, which version of Cython did you use?**:  N/A\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: N/A\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nHi! First of all, thank you for releasing this package. It's been fantastic!\r\n\r\nSo, I think this might just be a case of documentation not being totally up to date, but I wanted to verify. \r\n\r\nI'm querying `pg_catalog.pg_stats` and but am running up against:\r\n```python\r\nasyncpg.exceptions._base.ProtocolError: unexpected instance of 'anyarray' type`\r\n```\r\nI tracked down where that's being thrown here: https://github.com/MagicStack/asyncpg/blob/b043fbd3303272580f54d5aa89932384ec5fb973/asyncpg/protocol/codecs/array.pyx#L850\r\nWhich has the comment:\r\n```python\r\n# Instances of anyarray (or any other polymorphic pseudotype) are\r\n# never supposed to be returned from actual queries.\r\n```\r\n\r\nHowever, [`pg_catalog.pg_stats` utilizes `anyarray` types](https://www.postgresql.org/docs/10/view-pg-stats.html), and the current `asyncpg` [Type Conversion docs](https://magicstack.github.io/asyncpg/current/usage.html#type-conversion) state that `anyarrary` values should be handled and automatically converted to lists?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/497", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/497/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/497/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/497/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/497", "id": 519652476, "node_id": "MDU6SXNzdWU1MTk2NTI0NzY=", "number": 497, "title": "Is it possible to support ipaddress.IPv4Interface in the /codecs/network.pyx", "user": {"login": "mauriciodtdt", "id": 30917536, "node_id": "MDQ6VXNlcjMwOTE3NTM2", "avatar_url": "https://avatars1.githubusercontent.com/u/30917536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mauriciodtdt", "html_url": "https://github.com/mauriciodtdt", "followers_url": "https://api.github.com/users/mauriciodtdt/followers", "following_url": "https://api.github.com/users/mauriciodtdt/following{/other_user}", "gists_url": "https://api.github.com/users/mauriciodtdt/gists{/gist_id}", "starred_url": "https://api.github.com/users/mauriciodtdt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mauriciodtdt/subscriptions", "organizations_url": "https://api.github.com/users/mauriciodtdt/orgs", "repos_url": "https://api.github.com/users/mauriciodtdt/repos", "events_url": "https://api.github.com/users/mauriciodtdt/events{/privacy}", "received_events_url": "https://api.github.com/users/mauriciodtdt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-08T03:37:58Z", "updated_at": "2019-11-19T20:28:00Z", "closed_at": "2019-11-19T20:28:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\nThank you!\r\n-->\r\nCurrently the library just allows to insert ipaddress.IPv4Address and ipaddress.IPv4Networks to a postgresdb.\r\nWhen I tried to insert an ipaddress.IPv4Interface, I got following error:\r\n\r\n`E       ValueError: '10.0.0.1/30' does not appear to be an IPv4 or IPv6 address`\r\n\r\nCheers\r\n\r\n* **asyncpg version**:0.19.0\r\n* **PostgreSQL version**: 9.6.11\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:3.7\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/496", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/496/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/496/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/496/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/496", "id": 518671203, "node_id": "MDU6SXNzdWU1MTg2NzEyMDM=", "number": 496, "title": "How can array be passed as query parameter?", "user": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-06T19:00:34Z", "updated_at": "2019-11-06T19:07:08Z", "closed_at": "2019-11-06T19:07:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello here!\r\n\r\nI want to run query like this:\r\n```\r\nselect i from unnest(array[1,2,3]) as k(i);\r\n```\r\n\r\nAnd I try this:\r\n```\r\nq = 'select i from unnest($1::int[]) as k(i);'\r\nawait conn.fetch(q, [1,2,3])\r\n```\r\nBut it not worked.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/495", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/495/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/495/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/495", "id": 518671192, "node_id": "MDU6SXNzdWU1MTg2NzExOTI=", "number": 495, "title": "How can array be passed as query parameter?", "user": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-06T19:00:33Z", "updated_at": "2019-11-06T19:18:08Z", "closed_at": "2019-11-06T19:18:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello here!\r\n\r\nI\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/494", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/494/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/494/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/494", "id": 518671185, "node_id": "MDU6SXNzdWU1MTg2NzExODU=", "number": 494, "title": "How can array be passed as query parameter?", "user": {"login": "AngelicosPhosphoros", "id": 13154246, "node_id": "MDQ6VXNlcjEzMTU0MjQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/13154246?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AngelicosPhosphoros", "html_url": "https://github.com/AngelicosPhosphoros", "followers_url": "https://api.github.com/users/AngelicosPhosphoros/followers", "following_url": "https://api.github.com/users/AngelicosPhosphoros/following{/other_user}", "gists_url": "https://api.github.com/users/AngelicosPhosphoros/gists{/gist_id}", "starred_url": "https://api.github.com/users/AngelicosPhosphoros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AngelicosPhosphoros/subscriptions", "organizations_url": "https://api.github.com/users/AngelicosPhosphoros/orgs", "repos_url": "https://api.github.com/users/AngelicosPhosphoros/repos", "events_url": "https://api.github.com/users/AngelicosPhosphoros/events{/privacy}", "received_events_url": "https://api.github.com/users/AngelicosPhosphoros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-11-06T19:00:32Z", "updated_at": "2019-11-06T19:18:15Z", "closed_at": "2019-11-06T19:18:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello here!\r\n\r\nI\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/492", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/492/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/492/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/492/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/492", "id": 512657276, "node_id": "MDU6SXNzdWU1MTI2NTcyNzY=", "number": 492, "title": "Can't insert a NULL value", "user": {"login": "squaredbeaver", "id": 13795380, "node_id": "MDQ6VXNlcjEzNzk1Mzgw", "avatar_url": "https://avatars0.githubusercontent.com/u/13795380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/squaredbeaver", "html_url": "https://github.com/squaredbeaver", "followers_url": "https://api.github.com/users/squaredbeaver/followers", "following_url": "https://api.github.com/users/squaredbeaver/following{/other_user}", "gists_url": "https://api.github.com/users/squaredbeaver/gists{/gist_id}", "starred_url": "https://api.github.com/users/squaredbeaver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/squaredbeaver/subscriptions", "organizations_url": "https://api.github.com/users/squaredbeaver/orgs", "repos_url": "https://api.github.com/users/squaredbeaver/repos", "events_url": "https://api.github.com/users/squaredbeaver/events{/privacy}", "received_events_url": "https://api.github.com/users/squaredbeaver/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-25T18:31:22Z", "updated_at": "2019-10-28T14:07:37Z", "closed_at": "2019-10-28T14:07:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.19.0\r\n* **PostgreSQL version**: 11.5\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: I'm using local postgresql \r\n* **Python version**: 3.7.4\r\n* **Platform**: linux\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: didn't try uvloop\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nWhen I'm trying to insert a value to a nullable column of type UUID (named `business_unit`), like this\r\n```py\r\nq = \"INSERT INTO user_permissions (user_id, business_unit, permissions) VALUES ($1, $2, $3) \"\r\nawait cnx.execute(q, user_id, None, json.dumps(permissions.as_dict()))\r\n```\r\nI'm getting an exception\r\n```\r\nasyncpg.exceptions.DataError: invalid input for query argument $2: 'None' (badly formed hexadecimal UUID string)\r\n```\r\n\r\nHow can I insert a NULL value properly?\r\nDo I need to make a custom type converter that treats None values as NULL or something?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/486", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/486/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/486/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/486", "id": 504671183, "node_id": "MDU6SXNzdWU1MDQ2NzExODM=", "number": 486, "title": "Next release", "user": {"login": "pohmelie", "id": 2385765, "node_id": "MDQ6VXNlcjIzODU3NjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/2385765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pohmelie", "html_url": "https://github.com/pohmelie", "followers_url": "https://api.github.com/users/pohmelie/followers", "following_url": "https://api.github.com/users/pohmelie/following{/other_user}", "gists_url": "https://api.github.com/users/pohmelie/gists{/gist_id}", "starred_url": "https://api.github.com/users/pohmelie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pohmelie/subscriptions", "organizations_url": "https://api.github.com/users/pohmelie/orgs", "repos_url": "https://api.github.com/users/pohmelie/repos", "events_url": "https://api.github.com/users/pohmelie/events{/privacy}", "received_events_url": "https://api.github.com/users/pohmelie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-09T13:58:21Z", "updated_at": "2019-10-09T19:25:46Z", "closed_at": "2019-10-09T19:25:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the scheduled time for next release? Since we want to use [scram auth](https://github.com/MagicStack/asyncpg/pull/437). Last released version is 10 month old.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/485", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/485/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/485/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/485", "id": 503722210, "node_id": "MDU6SXNzdWU1MDM3MjIyMTA=", "number": 485, "title": "Connection string does not parse hash character properly", "user": {"login": "cypai", "id": 5395815, "node_id": "MDQ6VXNlcjUzOTU4MTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5395815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cypai", "html_url": "https://github.com/cypai", "followers_url": "https://api.github.com/users/cypai/followers", "following_url": "https://api.github.com/users/cypai/following{/other_user}", "gists_url": "https://api.github.com/users/cypai/gists{/gist_id}", "starred_url": "https://api.github.com/users/cypai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cypai/subscriptions", "organizations_url": "https://api.github.com/users/cypai/orgs", "repos_url": "https://api.github.com/users/cypai/repos", "events_url": "https://api.github.com/users/cypai/events{/privacy}", "received_events_url": "https://api.github.com/users/cypai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-07T22:23:27Z", "updated_at": "2019-10-07T22:44:10Z", "closed_at": "2019-10-07T22:44:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11.5\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Reproduced locally\r\n* **Python version**: 3.7.4\r\n* **Platform**: macOS, Debian\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Didn't try yet\r\n\r\nSimilar issue to #429 . If the password includes a `#` character, you get the following error:\r\n`ValueError: invalid literal for int() with base 10:`\r\n\r\nThe URI I was using looked like: `postgresql://postgres:abcd&#12@127.0.0.1:5432/db`, and `psql` parses it correctly.\r\n\r\nWhen you remove the `#`, it works fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/483", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/483/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/483/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/483/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/483", "id": 503403467, "node_id": "MDU6SXNzdWU1MDM0MDM0Njc=", "number": 483, "title": "url parsing struggle with username containing @ char", "user": {"login": "victornoel", "id": 160975, "node_id": "MDQ6VXNlcjE2MDk3NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/160975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/victornoel", "html_url": "https://github.com/victornoel", "followers_url": "https://api.github.com/users/victornoel/followers", "following_url": "https://api.github.com/users/victornoel/following{/other_user}", "gists_url": "https://api.github.com/users/victornoel/gists{/gist_id}", "starred_url": "https://api.github.com/users/victornoel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/victornoel/subscriptions", "organizations_url": "https://api.github.com/users/victornoel/orgs", "repos_url": "https://api.github.com/users/victornoel/repos", "events_url": "https://api.github.com/users/victornoel/events{/privacy}", "received_events_url": "https://api.github.com/users/victornoel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-07T11:53:27Z", "updated_at": "2020-08-18T23:34:19Z", "closed_at": "2019-10-07T13:30:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n\r\nI am using asyncpg to connect to a Azure PostgreSQL database, and Azure imposes the use of a username of the form `name@db`, so the full connection url looks like:\r\n```\r\npostgresql://my-user@my-db-server:my-password@my-db-server.postgres.database.azure.com:5432/some-db\r\n```\r\n\r\nWhen using such an url to connect with asyncpg, I get the following error:\r\n```\r\nFile \"/home/victor/.local/share/virtualenvs/datapipe-3ZEOKy8g/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 187, in _parse_hostlist\r\n    hostlist_ports.append(int(hostspec_port))\r\nValueError: invalid literal for int() with base 10: 'my-password@my-db-server.postgres.database.azure.com:5432'\r\n```\r\n\r\nI see two problems here:\r\n- the password leak in the logs (even tough I'm not sure how to avoid this in a consistent manner\u2026)\r\n- the fact that asyncpg incorrectly split the `netloc` part of the uri by splitting at the first `@` intead of the last one.\r\n\r\nThe ticket is about the second problem:\r\n- I think it should be safe to assume that everything **before** the **last** `@` in the `netloc` is for authentication.\r\n- Also by the way, it should also be safe to assume that everything **after** the **first** `:` in the auth part to be the password.\r\n\r\nFor the record, when using sqlalchemy + psycogs2, I have no problem using this kind of url to connect to my database.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/481", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/481/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/481/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/481/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/481", "id": 501850143, "node_id": "MDU6SXNzdWU1MDE4NTAxNDM=", "number": 481, "title": "asyncpg not returning datestamps which are timezone aware (instead returning UTC datestamps)?", "user": {"login": "fgimian", "id": 1811813, "node_id": "MDQ6VXNlcjE4MTE4MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1811813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgimian", "html_url": "https://github.com/fgimian", "followers_url": "https://api.github.com/users/fgimian/followers", "following_url": "https://api.github.com/users/fgimian/following{/other_user}", "gists_url": "https://api.github.com/users/fgimian/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgimian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgimian/subscriptions", "organizations_url": "https://api.github.com/users/fgimian/orgs", "repos_url": "https://api.github.com/users/fgimian/repos", "events_url": "https://api.github.com/users/fgimian/events{/privacy}", "received_events_url": "https://api.github.com/users/fgimian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-03T04:47:04Z", "updated_at": "2019-10-24T08:40:25Z", "closed_at": "2019-10-03T14:42:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 9.6\r\n* **Do you use a PostgreSQL SaaS?**: Nope\r\n* **Python version**: 3.6.8\r\n* **Platform**: CentOS 7\r\n* **Do you use pgbouncer?**: Nope\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\nIt seems that on my system asyncpg is not returning timezone-aware datetime values sfor a column which definitely has offsets.  psycopg2 seems to work ok.\r\n\r\n```\r\nmyapp=> \\d item_event\r\n                   Table \"public.item_event\"\r\n        Column         |           Type           |   Modifiers\r\n-----------------------+--------------------------+---------------\r\n event_timestamp       | timestamp with time zone | default now()\r\n item_event_type_id    | integer                  |\r\n item_id               | character varying(30)    |\r\n host                  | character varying(60)    |\r\nIndexes:\r\n    \"ix_item_event_event_timestamp_item_id\" btree (event_timestamp, item_id)\r\n    \"ix_item_event_item_id_event_timestamp\" btree (item_id, event_timestamp)\r\nForeign-key constraints:\r\n    \"item_event_item_event_id_fkey\" FOREIGN KEY (item_event_type_id) REFERENCES item_event_type(id)\r\n\r\nmyapp=> SELECT event_timestamp FROM item_event LIMIT 5;\r\n        event_timestamp\r\n-------------------------------\r\n 2019-01-25 15:24:54.331295+11\r\n 2019-01-25 15:24:54.642765+11\r\n 2019-01-25 15:24:54.88598+11\r\n 2019-01-25 15:24:55.184039+11\r\n 2019-01-25 15:24:55.493035+11\r\n(5 rows)\r\n```\r\n\r\nNow with psycopg2:\r\n\r\n```\r\nIn [1]: import psycopg2\r\n\r\nIn [2]: conn = psycopg2.connect(...)\r\n\r\nIn [3]: with conn.cursor() as cursor:\r\n   ...:     cursor.execute(\"SELECT event_timestamp FROM item_event LIMIT 5\")\r\n   ...:     result = cursor.fetchall()\r\n   ...:\r\n\r\nIn [4]: result\r\nOut[4]:\r\n[(datetime.datetime(2019, 1, 25, 15, 24, 54, 331295, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=660, name=None)),),\r\n (datetime.datetime(2019, 1, 25, 15, 24, 54, 642765, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=660, name=None)),),\r\n (datetime.datetime(2019, 1, 25, 15, 24, 54, 885980, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=660, name=None)),),\r\n (datetime.datetime(2019, 1, 25, 15, 24, 55, 184039, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=660, name=None)),),\r\n (datetime.datetime(2019, 1, 25, 15, 24, 55, 493035, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=660, name=None)),)]\r\n```\r\n\r\nAnd finally with asyncpg:\r\n\r\n```\r\nIn [5]: import asyncpg\r\n\r\nIn [6]: conn = await asyncpg.connect(...)\r\n\r\nIn [7]: result = await conn.fetch(\"SELECT event_timestamp FROM item_event LIMIT 5\")\r\n\r\nIn [8]: result\r\nOut[8]:\r\n[<Record event_timestamp=datetime.datetime(2019, 1, 25, 4, 24, 54, 331295, tzinfo=datetime.timezone.utc)>,\r\n <Record event_timestamp=datetime.datetime(2019, 1, 25, 4, 24, 54, 642765, tzinfo=datetime.timezone.utc)>,\r\n <Record event_timestamp=datetime.datetime(2019, 1, 25, 4, 24, 54, 885980, tzinfo=datetime.timezone.utc)>,\r\n <Record event_timestamp=datetime.datetime(2019, 1, 25, 4, 24, 55, 184039, tzinfo=datetime.timezone.utc)>,\r\n <Record event_timestamp=datetime.datetime(2019, 1, 25, 4, 24, 55, 493035, tzinfo=datetime.timezone.utc)>]\r\n```\r\n\r\nAs you can see, asyncpg is returinng UTC timestamps instead of those which are timezone aware.  Am I perhaps missing something?\r\n\r\nKindest regards\r\nFotis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/480", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/480/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/480/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/480/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/480", "id": 500904484, "node_id": "MDU6SXNzdWU1MDA5MDQ0ODQ=", "number": 480, "title": "Ability to create Record objects in Python code?", "user": {"login": "fgimian", "id": 1811813, "node_id": "MDQ6VXNlcjE4MTE4MTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1811813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fgimian", "html_url": "https://github.com/fgimian", "followers_url": "https://api.github.com/users/fgimian/followers", "following_url": "https://api.github.com/users/fgimian/following{/other_user}", "gists_url": "https://api.github.com/users/fgimian/gists{/gist_id}", "starred_url": "https://api.github.com/users/fgimian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fgimian/subscriptions", "organizations_url": "https://api.github.com/users/fgimian/orgs", "repos_url": "https://api.github.com/users/fgimian/repos", "events_url": "https://api.github.com/users/fgimian/events{/privacy}", "received_events_url": "https://api.github.com/users/fgimian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-01T13:41:23Z", "updated_at": "2019-10-03T23:51:18Z", "closed_at": "2019-10-03T15:46:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey guys, absolutely beautiful library, thank you so much for your efforts! \ud83d\ude04 \r\n\r\nI noticed that the documentation clearly states that `Record` objects can't be created.  I'm currently writing unit tests for my app where I am mocking the database and the respective responses.  Unfortunately, without the ability to create my own Record objects with some mock data, I can't quite simulate a mock response from asyncpg.\r\n\r\nThe `Record` class appears to offer a huge amount of flexibility which is hard to replicate with any native data structure without implementing something new again.\r\n\r\nIs there any chance that we will be able to create `Record` objects in future?  Any suggested workaround in the interim?\r\n\r\nHuge thanks!\r\nFotis", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/478", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/478/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/478/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/478", "id": 497085810, "node_id": "MDU6SXNzdWU0OTcwODU4MTA=", "number": 478, "title": "[Question] Convert to default list from fetch()", "user": {"login": "ks129", "id": 45097959, "node_id": "MDQ6VXNlcjQ1MDk3OTU5", "avatar_url": "https://avatars2.githubusercontent.com/u/45097959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ks129", "html_url": "https://github.com/ks129", "followers_url": "https://api.github.com/users/ks129/followers", "following_url": "https://api.github.com/users/ks129/following{/other_user}", "gists_url": "https://api.github.com/users/ks129/gists{/gist_id}", "starred_url": "https://api.github.com/users/ks129/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ks129/subscriptions", "organizations_url": "https://api.github.com/users/ks129/orgs", "repos_url": "https://api.github.com/users/ks129/repos", "events_url": "https://api.github.com/users/ks129/events{/privacy}", "received_events_url": "https://api.github.com/users/ks129/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-23T13:05:10Z", "updated_at": "2019-10-03T21:31:44Z", "closed_at": "2019-10-03T21:31:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to convert `<Record name=\"this1\">, <Record name=\"this2\">` etc. to `[\"this1\", \"this2\"]`?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/477", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/477/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/477/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/477", "id": 495022252, "node_id": "MDU6SXNzdWU0OTUwMjIyNTI=", "number": 477, "title": "asyncpg in ubuntu unable to find asyncpg.protocol.protocol", "user": {"login": "antoinehennuyer", "id": 47240189, "node_id": "MDQ6VXNlcjQ3MjQwMTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/47240189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoinehennuyer", "html_url": "https://github.com/antoinehennuyer", "followers_url": "https://api.github.com/users/antoinehennuyer/followers", "following_url": "https://api.github.com/users/antoinehennuyer/following{/other_user}", "gists_url": "https://api.github.com/users/antoinehennuyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoinehennuyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoinehennuyer/subscriptions", "organizations_url": "https://api.github.com/users/antoinehennuyer/orgs", "repos_url": "https://api.github.com/users/antoinehennuyer/repos", "events_url": "https://api.github.com/users/antoinehennuyer/events{/privacy}", "received_events_url": "https://api.github.com/users/antoinehennuyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-18T06:45:45Z", "updated_at": "2019-09-18T07:14:52Z", "closed_at": "2019-09-18T07:14:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11.0\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: No\r\n* **Python version**: 3.7.3\r\n* **Platform**: ubuntu\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\nWhen I download the library in some directory with the command line : \"pip install -t . asyncpg\" It doesn't work and show this:\r\n\r\n\"  File \"script.py\", line 6, in <module>\r\n    import asyncpg\r\n  File \"/package/asyncpg/__init__.py\", line 8, in <module>\r\n    from .connection import connect, Connection  # NOQA\r\n  File \"/package/asyncpg/connection.py\", line 20, in <module>\r\n    from . import connect_utils\r\n  File \"/package/asyncpg/connect_utils.py\", line 27, in <module>\r\n    from . import protocol\r\n  File \"/package/asyncpg/protocol/__init__.py\", line 8, in <module>\r\n    from .protocol import Protocol, Record, NO_TIMEOUT  # NOQA\r\nModuleNotFoundError: No module named 'asyncpg.protocol.protocol'\"\r\n\r\nWhen I try to run my script with package installed with : \"pip install asyncpg\" the script run normally. Do you have any idea where it's come from please?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/475", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/475/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/475/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/475", "id": 492188405, "node_id": "MDU6SXNzdWU0OTIxODg0MDU=", "number": 475, "title": "[Question] Cursor docs", "user": {"login": "lynxknight", "id": 3482642, "node_id": "MDQ6VXNlcjM0ODI2NDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3482642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lynxknight", "html_url": "https://github.com/lynxknight", "followers_url": "https://api.github.com/users/lynxknight/followers", "following_url": "https://api.github.com/users/lynxknight/following{/other_user}", "gists_url": "https://api.github.com/users/lynxknight/gists{/gist_id}", "starred_url": "https://api.github.com/users/lynxknight/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lynxknight/subscriptions", "organizations_url": "https://api.github.com/users/lynxknight/orgs", "repos_url": "https://api.github.com/users/lynxknight/repos", "events_url": "https://api.github.com/users/lynxknight/events{/privacy}", "received_events_url": "https://api.github.com/users/lynxknight/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-11T11:49:56Z", "updated_at": "2019-10-03T21:05:22Z", "closed_at": "2019-10-03T21:05:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/MagicStack/asyncpg/blob/ae5a89db81dc97a762055cd574b3215559b3d59f/docs/api/index.rst#L165\r\n\r\n> Or, alternatively, you can iterate over the cursor manually (cursor won't be prefetching any rows):\r\n\r\n```\r\nasync def iterate(con: Connection):\r\n    async with con.transaction():\r\n        # Postgres requires non-scrollable cursors to be created\r\n        # and used in a transaction.\r\n\r\n        async with con.transaction():\r\n            # Create a Cursor object\r\n            cur = await con.cursor('SELECT generate_series(0, 100)')\r\n\r\n```\r\n\r\nI don't undestand why nested transaction is necessary here. Can someone elaborate? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/474", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/474/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/474/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/474", "id": 486695278, "node_id": "MDU6SXNzdWU0ODY2OTUyNzg=", "number": 474, "title": "datetime over-timezoned for offset-aware datetime", "user": {"login": "SergeySalnikov", "id": 9937713, "node_id": "MDQ6VXNlcjk5Mzc3MTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/9937713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergeySalnikov", "html_url": "https://github.com/SergeySalnikov", "followers_url": "https://api.github.com/users/SergeySalnikov/followers", "following_url": "https://api.github.com/users/SergeySalnikov/following{/other_user}", "gists_url": "https://api.github.com/users/SergeySalnikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergeySalnikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergeySalnikov/subscriptions", "organizations_url": "https://api.github.com/users/SergeySalnikov/orgs", "repos_url": "https://api.github.com/users/SergeySalnikov/repos", "events_url": "https://api.github.com/users/SergeySalnikov/events{/privacy}", "received_events_url": "https://api.github.com/users/SergeySalnikov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-29T02:07:27Z", "updated_at": "2019-08-29T10:23:52Z", "closed_at": "2019-08-29T10:23:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: docker image postgres:11-alpine\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.7\r\n* **Platform**: \r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nSetting offset-aware datetime to `timestamptz` field breaks datetime value.\r\n\r\n```python\r\nimport asyncio\r\nfrom datetime import datetime\r\n\r\nimport asyncpg\r\n\r\nDSN = 'postgresql://user:password@host:port/database'\r\n\r\n\r\nCREATE_SQL = \"\"\"\r\n    DROP TABLE IF EXISTS bug;\r\n    CREATE TABLE bug\r\n    (\r\n        server_now timestamptz DEFAULT now(),\r\n        datetime_now timestamptz,\r\n        datetime_utcnow timestamptz\r\n    );\r\n\"\"\"\r\nINSERT_SQL = \"INSERT INTO bug (datetime_now, datetime_utcnow) VALUES ($1, $2);\"\r\nSELECT_SQL = \"SELECT * FROM bug;\"\r\n\r\n\r\nasync def main():\r\n    conn = await asyncpg.connect(DSN)\r\n    try:\r\n        await conn.execute(CREATE_SQL)\r\n        await conn.execute(INSERT_SQL, datetime.now(), datetime.utcnow())\r\n        row = await conn.fetchrow(SELECT_SQL)\r\n        for name, d in row.items():\r\n            print(f'{name:16}:', repr(d))\r\n    finally:\r\n        await conn.close()\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio.run(main())\r\n```\r\n\r\noutput:\r\n```\r\nserver_now      : datetime.datetime(2019, 8, 29, 2, 0, 49, 789598, tzinfo=datetime.timezone.utc)\r\ndatetime_now    : datetime.datetime(2019, 8, 29, 2, 0, 49, 788911, tzinfo=datetime.timezone.utc)\r\ndatetime_utcnow : datetime.datetime(2019, 8, 28, 23, 0, 49, 788918, tzinfo=datetime.timezone.utc)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/473", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/473/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/473/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/473", "id": 484291295, "node_id": "MDU6SXNzdWU0ODQyOTEyOTU=", "number": 473, "title": "discrepancy between readme and docs", "user": {"login": "Zomatree", "id": 39768508, "node_id": "MDQ6VXNlcjM5NzY4NTA4", "avatar_url": "https://avatars1.githubusercontent.com/u/39768508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zomatree", "html_url": "https://github.com/Zomatree", "followers_url": "https://api.github.com/users/Zomatree/followers", "following_url": "https://api.github.com/users/Zomatree/following{/other_user}", "gists_url": "https://api.github.com/users/Zomatree/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zomatree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zomatree/subscriptions", "organizations_url": "https://api.github.com/users/Zomatree/orgs", "repos_url": "https://api.github.com/users/Zomatree/repos", "events_url": "https://api.github.com/users/Zomatree/events{/privacy}", "received_events_url": "https://api.github.com/users/Zomatree/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-23T01:54:10Z", "updated_at": "2019-08-27T15:36:19Z", "closed_at": "2019-08-27T15:36:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**:\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\ndoes this support postgres 11 becuase docs say it goes to postgres 10 but readme says 11", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/471", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/471/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/471/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/471/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/471", "id": 480225937, "node_id": "MDU6SXNzdWU0ODAyMjU5Mzc=", "number": 471, "title": "[Errno -2] Name or service not known", "user": {"login": "2ik", "id": 6692517, "node_id": "MDQ6VXNlcjY2OTI1MTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6692517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/2ik", "html_url": "https://github.com/2ik", "followers_url": "https://api.github.com/users/2ik/followers", "following_url": "https://api.github.com/users/2ik/following{/other_user}", "gists_url": "https://api.github.com/users/2ik/gists{/gist_id}", "starred_url": "https://api.github.com/users/2ik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/2ik/subscriptions", "organizations_url": "https://api.github.com/users/2ik/orgs", "repos_url": "https://api.github.com/users/2ik/repos", "events_url": "https://api.github.com/users/2ik/events{/privacy}", "received_events_url": "https://api.github.com/users/2ik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-13T15:35:09Z", "updated_at": "2019-10-03T20:59:11Z", "closed_at": "2019-10-03T20:59:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.7\r\n* **Platform**: Linux Mint\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\nThere was a similar question https://github.com/MagicStack/asyncpg/issues/467\r\n\r\nI found a problem when connecting a pool with dsn transfer.\r\n\r\nif the `@` symbol is present in the password, then an error appears: `[Errno -2] Name or service not known`\r\nif replaced by `%40` then an access error `password authentication failed for user \"user_db\"`\r\n\r\nWill give an example better:\r\n```Python\r\n# error:\r\ndsn = 'postgresql://{user}:{pwd}@{host}:{port}/{database}'.format(\r\n    host=config.DB_HOST,\r\n    port=config.DB_PORT,\r\n    user=config.DB_USER,\r\n    pwd=config.DB_PASS, # passw@123\r\n    database=config.DB_NAME\r\n)\r\n\r\nconn = await asyncpg.create_pool(dsn)\r\n\r\n# successfully\r\nconn = await asyncpg.create_pool(\r\n    host=config.DB_HOST,\r\n    port=config.DB_PORT,\r\n    database=config.DB_NAME,\r\n    user=config.DB_USER,\r\n    password=config.DB_PASS # passw@123\r\n)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/465", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/465/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/465/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/465", "id": 467490343, "node_id": "MDU6SXNzdWU0Njc0OTAzNDM=", "number": 465, "title": "Asyncpg does not accept the usage of the operator - between a jsonb value and a text value", "user": {"login": "rubik", "id": 238549, "node_id": "MDQ6VXNlcjIzODU0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/238549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rubik", "html_url": "https://github.com/rubik", "followers_url": "https://api.github.com/users/rubik/followers", "following_url": "https://api.github.com/users/rubik/following{/other_user}", "gists_url": "https://api.github.com/users/rubik/gists{/gist_id}", "starred_url": "https://api.github.com/users/rubik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rubik/subscriptions", "organizations_url": "https://api.github.com/users/rubik/orgs", "repos_url": "https://api.github.com/users/rubik/repos", "events_url": "https://api.github.com/users/rubik/events{/privacy}", "received_events_url": "https://api.github.com/users/rubik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-12T16:03:17Z", "updated_at": "2019-07-12T16:27:27Z", "closed_at": "2019-07-12T16:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11.4\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: No\r\n* **Python version**: 3.7.3\r\n* **Platform**: ArchLinux\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: uvloop is not relevant to the bug\r\n\r\nIt seems that asyncpg does not allow to use the operator `-` between a `jsonb` value and a `text` value. It is indeed possible, as documented here (fourth row from the bottom):\r\nhttps://www.postgresql.org/docs/11/functions-json.html#FUNCTIONS-JSONB-OP-TABLE\r\n\r\nThe query that I am using is:\r\n```sql\r\n    UPDATE campaigns.campaigns\r\n    SET stage_names = stage_names - $3, stages_order = stages_order - $3\r\n    WHERE user_id = $1 AND id = $2;\r\n```\r\n\r\nThose two columns are defined as follows:\r\n```sql\r\nCREATE TABLE IF NOT EXISTS campaigns.campaigns (\r\n    id              SERIAL PRIMARY KEY,\r\n    user_id         INTEGER NOT NULL REFERENCES user_data.users(id),\r\n    stage_names     JSONB NOT NULL DEFAULT '{\"0\":\"X1\",\"1\":\"X2\",\"2\":\"X3\",\"3\":\"X4\"}',\r\n    stages_order    JSONB NOT NULL DEFAULT '[\"0\",\"1\",\"2\",\"3\"]',\r\n);\r\n```\r\n\r\nWhen I execute:\r\n```python\r\n    await pool.execute(\r\n        sql.REORDER_CAMPAIGN_STAGES,\r\n        user['id'],\r\n        campaign_id,\r\n        str(stage_id),\r\n    )\r\n```\r\n\r\nI get the following error:\r\n```\r\n  File \"/lib/python3.7/site-packages/asyncpg/pool.py\", line 509, in execute\r\n    return await con.execute(query, *args, timeout=timeout)\r\n  File \"/lib/python3.7/site-packages/asyncpg/connection.py\", line 275, in execute\r\n    _, status, _ = await self._execute(query, args, 0, timeout, True)\r\n  File \"/lib/python3.7/site-packages/asyncpg/connection.py\", line 1414, in _execute\r\n    query, args, limit, timeout, return_status=return_status)\r\n  File \"/lib/python3.7/site-packages/asyncpg/connection.py\", line 1422, in __execute\r\n    return await self._do_execute(query, executor, timeout)\r\n  File \"/lib/python3.7/site-packages/asyncpg/connection.py\", line 1444, in _do_execute\r\n    result = await executor(stmt, None)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 178, in bind_execute\r\n  File \"asyncpg/protocol/prepared_stmt.pyx\", line 160, in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg\r\nasyncpg.exceptions.DataError: invalid input for query argument $3: '1' (a sized iterable container expected (got type 'str'))\r\n```\r\n\r\nIt seems asyncpg is expecting an array, when in fact a string is perfectly fine. I have tried working around the problem by changing the query to the following:\r\n```sql\r\n    UPDATE campaigns.campaigns\r\n    SET stage_names = stage_names - ($3)[1], stages_order = stages_order - ($3)[1]\r\n    WHERE user_id = $1 AND id = $2;\r\n```\r\n\r\nand the code to:\r\n```python\r\n    await pool.execute(\r\n        sql.REORDER_CAMPAIGN_STAGES,\r\n        user['id'],\r\n        campaign_id,\r\n        [str(stage_id)],\r\n    )\r\n```\r\n\r\nin the hope of making it work by supplying an array like asyncpg wants and then taking the first element. But this produces a completely wrong result and I'm not sure why.\r\n\r\nAll is fine in psql:\r\n```sql\r\n=# select stage_names - '1' from campaigns.campaigns where id = 1;\r\n                       ?column?                        \r\n-------------------------------------------------------\r\n {\"0\": \"X1\", \"2\": \"X3\", \"3\": \"X4\"}\r\n(1 row)\r\n\r\n=# select stages_order - '1' from campaigns.campaigns where id = 1;\r\n    ?column?     \r\n-----------------\r\n [\"0\", \"3\", \"2\"]\r\n(1 row)\r\n```\r\n\r\n**EDIT**: The problem was totally unrelated to asyncpg.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/461", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/461/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/461/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/461", "id": 463193312, "node_id": "MDU6SXNzdWU0NjMxOTMzMTI=", "number": 461, "title": "calling fetch with empty parameter", "user": {"login": "crazyhouse33", "id": 16920028, "node_id": "MDQ6VXNlcjE2OTIwMDI4", "avatar_url": "https://avatars2.githubusercontent.com/u/16920028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crazyhouse33", "html_url": "https://github.com/crazyhouse33", "followers_url": "https://api.github.com/users/crazyhouse33/followers", "following_url": "https://api.github.com/users/crazyhouse33/following{/other_user}", "gists_url": "https://api.github.com/users/crazyhouse33/gists{/gist_id}", "starred_url": "https://api.github.com/users/crazyhouse33/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crazyhouse33/subscriptions", "organizations_url": "https://api.github.com/users/crazyhouse33/orgs", "repos_url": "https://api.github.com/users/crazyhouse33/repos", "events_url": "https://api.github.com/users/crazyhouse33/events{/privacy}", "received_events_url": "https://api.github.com/users/crazyhouse33/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-02T12:12:01Z", "updated_at": "2019-07-03T11:34:22Z", "closed_at": "2019-07-02T13:24:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, right know If I do: \r\n\r\n`await self.connexion.fetch('SHOW max_stack_depth',  [])`\r\n\r\nI got:\r\n\r\n`asyncpg.exceptions._base.InterfaceError: the server expects 0 arguments for this query, 1 was passed\r\nHINT:  Check the query against the passed list of arguments.  Note that parameters are supported only in SELECT, INSERT, UPDATE, DELETE, and VALUES statements, and will *not* work in statements  like CREATE VIEW or DECLARE CURSOR.`\r\n\r\nWhen I expect it to work. (This would allow to use default argument to [] which would allow me to reuse a fair amount of code)\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/460", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/460/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/460/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/460/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/460", "id": 462304536, "node_id": "MDU6SXNzdWU0NjIzMDQ1MzY=", "number": 460, "title": "A way to get column name from an error object", "user": {"login": "alvitoraidhy", "id": 32793558, "node_id": "MDQ6VXNlcjMyNzkzNTU4", "avatar_url": "https://avatars1.githubusercontent.com/u/32793558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvitoraidhy", "html_url": "https://github.com/alvitoraidhy", "followers_url": "https://api.github.com/users/alvitoraidhy/followers", "following_url": "https://api.github.com/users/alvitoraidhy/following{/other_user}", "gists_url": "https://api.github.com/users/alvitoraidhy/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvitoraidhy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvitoraidhy/subscriptions", "organizations_url": "https://api.github.com/users/alvitoraidhy/orgs", "repos_url": "https://api.github.com/users/alvitoraidhy/repos", "events_url": "https://api.github.com/users/alvitoraidhy/events{/privacy}", "received_events_url": "https://api.github.com/users/alvitoraidhy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-29T13:53:20Z", "updated_at": "2019-07-05T00:40:04Z", "closed_at": "2019-07-05T00:40:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a code like this:\r\n```python\r\nquery = User.insert(values=values).returning(User)\r\ntry:\r\n  result = await database.fetch_one(query=query)\r\nexcept UniqueViolationError as err:\r\n  if err.column_name == 'username'\r\n    raise api.response.ErrorResponse(status_code=409, detail=\"User with the same username already exists\")\r\n```\r\n`err` has the attribute `column_name`. But it returns `None`.\r\n\r\nIt would be nice to be able to know which column causes the error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/458", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/458/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/458/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/458", "id": 459168748, "node_id": "MDU6SXNzdWU0NTkxNjg3NDg=", "number": 458, "title": "InvalidCachedStatementError during a database migration", "user": {"login": "jcugat", "id": 488594, "node_id": "MDQ6VXNlcjQ4ODU5NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/488594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcugat", "html_url": "https://github.com/jcugat", "followers_url": "https://api.github.com/users/jcugat/followers", "following_url": "https://api.github.com/users/jcugat/following{/other_user}", "gists_url": "https://api.github.com/users/jcugat/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcugat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcugat/subscriptions", "organizations_url": "https://api.github.com/users/jcugat/orgs", "repos_url": "https://api.github.com/users/jcugat/repos", "events_url": "https://api.github.com/users/jcugat/events{/privacy}", "received_events_url": "https://api.github.com/users/jcugat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-21T12:17:20Z", "updated_at": "2019-07-01T14:23:32Z", "closed_at": "2019-07-01T14:23:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 9.6.8\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: AWS RDS Aurora PostgreSQL, can reproduce it locally\r\n* **Python version**: 3.6.8\r\n* **Platform**: Linux\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: uvloop\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nI recently got bit by what's described at the end of this issue: https://github.com/MagicStack/asyncpg/pull/103#pullrequestreview-30091582\r\n\r\nI did a schema migration of a table while the service was running, and a few errors like this appeared (once for each process):\r\n\r\n```\r\n    results = await connection.fetch(query)\r\n  File \"/usr/local/lib/python3.6/site-packages/asyncpg/connection.py\", line 421, in fetch\r\n    return await self._execute(query, args, 0, timeout)\r\n  File \"/usr/local/lib/python3.6/site-packages/asyncpg/connection.py\", line 1414, in _execute\r\n    query, args, limit, timeout, return_status=return_status)\r\n  File \"/usr/local/lib/python3.6/site-packages/asyncpg/connection.py\", line 1422, in __execute\r\n    return await self._do_execute(query, executor, timeout)\r\n  File \"/usr/local/lib/python3.6/site-packages/asyncpg/connection.py\", line 1444, in _do_execute\r\n    result = await executor(stmt, None)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 196, in bind_execute\r\nasyncpg.exceptions.InvalidCachedStatementError: cached statement plan is invalid due to a database schema or configuration change\r\n```\r\n\r\nThe problem is that the query executed was inside a transaction, so there was no way for asyncpg to recover from that state (and why the exception was raised).\r\n\r\nIs changing the parameter `statement_cache_size=0` the only way to avoid this? Do you know if there is a lot of performance penalty when disabling this cache?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/456", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/456/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/456/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/456", "id": 454146749, "node_id": "MDU6SXNzdWU0NTQxNDY3NDk=", "number": 456, "title": "copy_records_to_table fails on assert inside python3.7", "user": {"login": "Piatachock", "id": 6725077, "node_id": "MDQ6VXNlcjY3MjUwNzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6725077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Piatachock", "html_url": "https://github.com/Piatachock", "followers_url": "https://api.github.com/users/Piatachock/followers", "following_url": "https://api.github.com/users/Piatachock/following{/other_user}", "gists_url": "https://api.github.com/users/Piatachock/gists{/gist_id}", "starred_url": "https://api.github.com/users/Piatachock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Piatachock/subscriptions", "organizations_url": "https://api.github.com/users/Piatachock/orgs", "repos_url": "https://api.github.com/users/Piatachock/repos", "events_url": "https://api.github.com/users/Piatachock/events{/privacy}", "received_events_url": "https://api.github.com/users/Piatachock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T12:30:44Z", "updated_at": "2019-07-08T15:06:35Z", "closed_at": "2019-07-08T15:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**:  0.18.3\r\n* **PostgreSQL version**: 10.7\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.7\r\n* **Platform**: Ubuntu 16.04\r\n* **Do you use pgbouncer?**: Yes (session-level pooling)\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: --\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes, I am using uvloop\r\n\r\nPrecise place where this is happening is here: https://github.com/MagicStack/asyncpg/blob/2d76f50dccf35cf2f1d70b41ebd6198d2dfff8d7/asyncpg/protocol/coreproto.pyx#L436-L437\r\n\r\nAssertion fire is caused by this check in python3.7:\r\n\r\n```c\r\nPyObject *\r\nPyMemoryView_GetContiguous(PyObject *obj, int buffertype, char order)\r\n{\r\n    PyMemoryViewObject *mv;\r\n    PyObject *ret;\r\n    Py_buffer *view;\r\n\r\n    assert(buffertype == PyBUF_READ || buffertype == PyBUF_WRITE);\r\n```\r\n\r\nSo looks like misuse of `buffertype` argument.\r\n\r\nSimple pull request fixed problem for me:\r\nhttps://github.com/MagicStack/asyncpg/pull/455", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/453", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/453/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/453/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/453", "id": 453145974, "node_id": "MDU6SXNzdWU0NTMxNDU5NzQ=", "number": 453, "title": "Prepared statements being recreated on every call of fetch", "user": {"login": "mklokocka", "id": 1583189, "node_id": "MDQ6VXNlcjE1ODMxODk=", "avatar_url": "https://avatars0.githubusercontent.com/u/1583189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mklokocka", "html_url": "https://github.com/mklokocka", "followers_url": "https://api.github.com/users/mklokocka/followers", "following_url": "https://api.github.com/users/mklokocka/following{/other_user}", "gists_url": "https://api.github.com/users/mklokocka/gists{/gist_id}", "starred_url": "https://api.github.com/users/mklokocka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mklokocka/subscriptions", "organizations_url": "https://api.github.com/users/mklokocka/orgs", "repos_url": "https://api.github.com/users/mklokocka/repos", "events_url": "https://api.github.com/users/mklokocka/events{/privacy}", "received_events_url": "https://api.github.com/users/mklokocka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-06T17:13:37Z", "updated_at": "2019-06-07T16:24:44Z", "closed_at": "2019-06-07T16:24:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**:  9.4\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:  I use the official Docker image with custom schema and test data.\r\n* **Python version**: 3.7\r\n* **Platform**: MacOS\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: -\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:  Yes\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nHello,\r\n\r\nI am facing a peculiar problem with the way prepared statements are handled. I use the following architecture:\r\n\r\naiohttp application, which initializes a pool of 1 to 20 db connections on init.\r\n\r\nData is periodically refreshed from the DB (once in a few minutes for most tables). I have a special class which handles the loading of data from DB and caches them to memory and to Redis (since multiple containers of the same app are running and I would like to minimize fetches from DB). This class is instantiated by a factory method which creates (besides other arguments) a `load` coroutine, which gets query passed into it by the factory.\r\n\r\nThe queries have no parameters and are static through out the runtime.\r\n\r\n`load` functions works by getting a connection from the pool, and calling `connection.fetch` on the given query. As per my understanding, the query should then be turned into a prepared statement, cached into a builtin LRU cache, and reused in later calls. However, it seems that each call to `load` (which is periodic) gets a new LRU cache for some reason, creating the prepared statements anew. But when I run `connection.fetch` on `SELECT * FROM pg_prepared_statements` I see that the number of prepared statements held by the connection increases in each call of `fetch`.\r\n\r\nIndeed, adding some prints to `connection.py` I found out that the statements get recreated and put into the cache on each call, since the cache is empty. I thought that perhaps it is because the connections I get from the pool differ, but since `pg_prepared_statements` is local to a session (a connection?) I think this is not the case. Indeed, limiting the size of the pool to `max_size=1` did not solve this issue.\r\n\r\nThis causes my Postgres to slowly drain more and more memory until the connections are reset. Disabling the LRU cache with `statement_cache_size=0` avoids this, but I believe that this behaviour is not intended.\r\n\r\nI tried to make a minimal reproducer but haven't yet succeeded.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/450", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/450/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/450/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/450", "id": 451200056, "node_id": "MDU6SXNzdWU0NTEyMDAwNTY=", "number": 450, "title": "TypeError: a boolean is required (got type bool_)", "user": {"login": "zillionare", "id": 7206696, "node_id": "MDQ6VXNlcjcyMDY2OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/7206696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zillionare", "html_url": "https://github.com/zillionare", "followers_url": "https://api.github.com/users/zillionare/followers", "following_url": "https://api.github.com/users/zillionare/following{/other_user}", "gists_url": "https://api.github.com/users/zillionare/gists{/gist_id}", "starred_url": "https://api.github.com/users/zillionare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zillionare/subscriptions", "organizations_url": "https://api.github.com/users/zillionare/orgs", "repos_url": "https://api.github.com/users/zillionare/repos", "events_url": "https://api.github.com/users/zillionare/events{/privacy}", "received_events_url": "https://api.github.com/users/zillionare/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-02T14:50:06Z", "updated_at": "2019-06-03T20:09:48Z", "closed_at": "2019-06-03T20:09:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 9.5\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:3.6, Intel\r\n* **Platform**: cygwin\r\n* **Do you use pgbouncer?**: \r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nHave a table with column's datatype is boolean, when I try to insert a python True/False into the table, it says:\r\n\r\nTypeError: a boolean is required (got type bool_)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/449", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/449/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/449/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/449", "id": 451090826, "node_id": "MDU6SXNzdWU0NTEwOTA4MjY=", "number": 449, "title": "what is the correct usage of fetch api with jsonb #> operator ?", "user": {"login": "euri10", "id": 1104190, "node_id": "MDQ6VXNlcjExMDQxOTA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1104190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euri10", "html_url": "https://github.com/euri10", "followers_url": "https://api.github.com/users/euri10/followers", "following_url": "https://api.github.com/users/euri10/following{/other_user}", "gists_url": "https://api.github.com/users/euri10/gists{/gist_id}", "starred_url": "https://api.github.com/users/euri10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euri10/subscriptions", "organizations_url": "https://api.github.com/users/euri10/orgs", "repos_url": "https://api.github.com/users/euri10/repos", "events_url": "https://api.github.com/users/euri10/events{/privacy}", "received_events_url": "https://api.github.com/users/euri10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-06-01T14:25:54Z", "updated_at": "2019-06-03T16:16:25Z", "closed_at": "2019-06-03T16:16:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: '0.18.3'\r\n* **PostgreSQL version**: 11.3\r\n* **Do you use a PostgreSQL SaaS? No\r\n* **Python version**: 3.7.3\r\n* **Platform**: debian buster\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: with pipenv so ultimately I think yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: \r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: no idea\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nHello, I posted an issue [here](https://github.com/encode/databases/issues/104) in encode/databases that uses asyncpg but I'm not sure in fact if the error I'm facing doesn't belong upstream, you may certainly know better.\r\n\r\nthe test case i wrote is for the `databases` library but I tried to use the upstream framework in the snippet below.\r\n\r\n```\r\nimport asyncio\r\nimport logging\r\n\r\nimport asyncpg\r\nfrom sqlalchemy import select\r\nfrom sqlalchemy.dialects import postgresql\r\n\r\nfrom models import jsonitems\r\n\r\nlogger = logging.getLogger(__name__)\r\nlogger.setLevel(logging.DEBUG)\r\n\r\n\r\nasync def run():\r\n    conn = await asyncpg.connect(user='postgres', password='postgres',\r\n                                 database='postgres', host='db', port ='5432')\r\n\r\n    values = await conn.fetch('''SELECT jsonitems.metadata #>'{a,b}' AS anon_1 FROM jsonitems;''')\r\n\r\n    query = select([jsonitems.c.metadata[(\"a\", \"b\")]])\r\n    compiled = (str(query.compile(dialect=postgresql.dialect(),\r\n                            compile_kwargs={\"literal_binds\": True})))\r\n    logger.info(\"COMPILED BY SQLALCHEMY\")\r\n    logger.debug(compiled)\r\n    \r\n    values = await conn.fetch(compiled)\r\n\r\n    q= 'SELECT jsonitems.metadata #> $1 AS anon_1 FROM jsonitems'\r\n    # args = [['a', 'b']]\r\n    args = ['{a, b}']\r\n    values = await conn.fetch(q, *args)\r\n    await conn.close()\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(run())\r\n```\r\n\r\nthis yields in the following error\r\n```\r\nbackend-tests_1_cc1013cc35e5 | 2019-06-01 14:11:24,102 - __main__ - 23 - INFO - RUN TESTS FROM manage_test.py\r\nbackend-tests_1_cc1013cc35e5 | ============================= test session starts ==============================\r\nbackend-tests_1_cc1013cc35e5 | platform linux -- Python 3.7.3, pytest-4.5.0, py-1.8.0, pluggy-0.11.0\r\nbackend-tests_1_cc1013cc35e5 | rootdir: /app\r\nbackend-tests_1_cc1013cc35e5 | 2019-06-01 14:11:25,324 - test_asyncpg - 25 - INFO - COMPILED BY SQLALCHEMY\r\nbackend-tests_1_cc1013cc35e5 | 2019-06-01 14:11:25,324 - test_asyncpg - 26 - DEBUG - SELECT jsonitems.metadata #> '{a, b}' AS anon_1 \r\nbackend-tests_1_cc1013cc35e5 | FROM jsonitems\r\nbackend-tests_1_cc1013cc35e5 | collected 0 items / 1 errors\r\nbackend-tests_1_cc1013cc35e5 | \r\nbackend-tests_1_cc1013cc35e5 | ==================================== ERRORS ====================================\r\nbackend-tests_1_cc1013cc35e5 | ____________________ ERROR collecting tests/test_asyncpg.py ____________________\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/prepared_stmt.pyx:146: in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/codecs/base.pyx:192: in asyncpg.protocol.protocol.Codec.encode\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/codecs/base.pyx:103: in asyncpg.protocol.protocol.Codec.encode_scalar\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/codecs/array.pyx:842: in asyncpg.protocol.protocol.arraytext_encode\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/codecs/array.pyx:115: in asyncpg.protocol.protocol.array_encode\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | E   TypeError: a sized iterable container expected (got type 'str')\r\nbackend-tests_1_cc1013cc35e5 | \r\nbackend-tests_1_cc1013cc35e5 | The above exception was the direct cause of the following exception:\r\nbackend-tests_1_cc1013cc35e5 | tests/test_asyncpg.py:37: in <module>\r\nbackend-tests_1_cc1013cc35e5 |     loop.run_until_complete(run())\r\nbackend-tests_1_cc1013cc35e5 | /usr/local/lib/python3.7/asyncio/base_events.py:584: in run_until_complete\r\nbackend-tests_1_cc1013cc35e5 |     return future.result()\r\nbackend-tests_1_cc1013cc35e5 | tests/test_asyncpg.py:33: in run\r\nbackend-tests_1_cc1013cc35e5 |     values = await conn.fetch(q, *args)\r\nbackend-tests_1_cc1013cc35e5 | /usr/local/lib/python3.7/site-packages/asyncpg/connection.py:421: in fetch\r\nbackend-tests_1_cc1013cc35e5 |     return await self._execute(query, args, 0, timeout)\r\nbackend-tests_1_cc1013cc35e5 | /usr/local/lib/python3.7/site-packages/asyncpg/connection.py:1414: in _execute\r\nbackend-tests_1_cc1013cc35e5 |     query, args, limit, timeout, return_status=return_status)\r\nbackend-tests_1_cc1013cc35e5 | /usr/local/lib/python3.7/site-packages/asyncpg/connection.py:1422: in __execute\r\nbackend-tests_1_cc1013cc35e5 |     return await self._do_execute(query, executor, timeout)\r\nbackend-tests_1_cc1013cc35e5 | /usr/local/lib/python3.7/site-packages/asyncpg/connection.py:1444: in _do_execute\r\nbackend-tests_1_cc1013cc35e5 |     result = await executor(stmt, None)\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/protocol.pyx:178: in bind_execute\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | asyncpg/protocol/prepared_stmt.pyx:160: in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg\r\nbackend-tests_1_cc1013cc35e5 |     ???\r\nbackend-tests_1_cc1013cc35e5 | E   asyncpg.exceptions.DataError: invalid input for query argument $1: '{a, b}' (a sized iterable container expected (got type 'str'))\r\nbackend-tests_1_cc1013cc35e5 | =========================== short test summary info ============================\r\nbackend-tests_1_cc1013cc35e5 | FAILED tests/test_asyncpg.py - asyncpg.exceptions.DataError: invalid input fo...\r\nbackend-tests_1_cc1013cc35e5 | !!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\r\nbackend-tests_1_cc1013cc35e5 | =========================== 1 error in 0.44 seconds ============================\r\neuri10_fastapi_base_backend-tests_1_cc1013cc35e5 exited with code 0\r\n```\r\n\r\nso raw query works fine, it's the same as the generated sqlalchemy by the way\r\n\r\n`'''SELECT jsonitems.metadata #>'{a,b}' AS anon_1 FROM jsonitems;'''`\r\n\r\nhowever I have an the error about str/array when trying to use the fetch(query, *args) api that encode/databases uses downstream:\r\n```\r\n # args = [['a', 'b']]\r\n    args = ['{a, b}']\r\n    values = await conn.fetch(q, *args)\r\n```\r\n\r\nI understand the error, it's very explicit about passing a string instead of an array.\r\n\r\nHowever, from the working query that passes `'{a,b}'` , is a string a valid string argument?\r\n\r\nPassing `args = [['a', 'b']]` in the `fetch(q, *args)` api works fine, is that something that downstream should handle or is there an issue here and that is the correct way to use the `#>` jsonb operator which expects a text[] (https://www.postgresql.org/docs/9.5/functions-json.html)? \r\n\r\nAny help understanding what library should be responsible for it would be of tremendous help, thanks\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/445", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/445/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/445/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/445/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/445", "id": 444486771, "node_id": "MDU6SXNzdWU0NDQ0ODY3NzE=", "number": 445, "title": "Prepare results in ambiguous function call", "user": {"login": "SantjagoCorkez", "id": 9654644, "node_id": "MDQ6VXNlcjk2NTQ2NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9654644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SantjagoCorkez", "html_url": "https://github.com/SantjagoCorkez", "followers_url": "https://api.github.com/users/SantjagoCorkez/followers", "following_url": "https://api.github.com/users/SantjagoCorkez/following{/other_user}", "gists_url": "https://api.github.com/users/SantjagoCorkez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SantjagoCorkez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SantjagoCorkez/subscriptions", "organizations_url": "https://api.github.com/users/SantjagoCorkez/orgs", "repos_url": "https://api.github.com/users/SantjagoCorkez/repos", "events_url": "https://api.github.com/users/SantjagoCorkez/events{/privacy}", "received_events_url": "https://api.github.com/users/SantjagoCorkez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-15T14:55:32Z", "updated_at": "2019-05-15T14:59:08Z", "closed_at": "2019-05-15T14:59:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: local\r\n* **Python version**: 3.7\r\n* **Platform**: linux\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: 0.28.5\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: yes\r\n\r\nThere's a query `SELECT generate_series FROM generate_series($1, $2, $3);`  There're multiple versions of the same function `generate_series` defined for different argument types. So when you emit `PREPARE STATEMENT` command you must emit types for which the function given should be selected by the query planner. The query then becomes `PREPARE STATEMENT {stmt_name} (type1, type2, type3) AS SELECT generate_series FROM generate_series($1, $2, $3);`\r\n\r\nAnd there's no way to make asyncpg to emit such a type-hinted prepared statement. So this kind of queries always fail with\r\n```\r\nasyncpg.exceptions.AmbiguousFunctionError: function generate_series(unknown, unknown, unknown) is not unique\r\nHINT:  Could not choose a best candidate function. You might need to add explicit type casts.\r\n```\r\n\r\nThere's even no arg in `Connection.prepare()` that could help providing such a type hint for `CoreConnection._prepare()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/444", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/444/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/444/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/444", "id": 444044662, "node_id": "MDU6SXNzdWU0NDQwNDQ2NjI=", "number": 444, "title": "[Question] possible to disable codec for insert?", "user": {"login": "joelluijmes", "id": 4273556, "node_id": "MDQ6VXNlcjQyNzM1NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/4273556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelluijmes", "html_url": "https://github.com/joelluijmes", "followers_url": "https://api.github.com/users/joelluijmes/followers", "following_url": "https://api.github.com/users/joelluijmes/following{/other_user}", "gists_url": "https://api.github.com/users/joelluijmes/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelluijmes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelluijmes/subscriptions", "organizations_url": "https://api.github.com/users/joelluijmes/orgs", "repos_url": "https://api.github.com/users/joelluijmes/repos", "events_url": "https://api.github.com/users/joelluijmes/events{/privacy}", "received_events_url": "https://api.github.com/users/joelluijmes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-14T17:48:01Z", "updated_at": "2019-05-14T18:11:04Z", "closed_at": "2019-05-14T18:11:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **Python version**: 3.6.8\r\n* **Did you install asyncpg with pip?**: Yes\r\n\r\nI want to insert a bulk amount of records (400k) which takes couple minutes. The source data comes from a csv file which contains 4 timestamp fields. Currently, I first have to parse all the timestamps from the csv, and only then asyncpg is able to insert the records.\r\n\r\nI wonder if it possible to skip the decoding and directly insert the timestamps as strings (as regular sql allows).\r\n\r\n```python\r\ndef parse(row):\r\n    row[3] = datetime.strptime(row[3], r'%Y-%m-%d %H:%M:%S')\r\n    row[4] = datetime.strptime(row[4], r'%Y-%m-%d %H:%M:%S')\r\n    row[5] = datetime.strptime(row[5], r'%Y-%m-%d %H:%M:%S')\r\n    row[6] = datetime.strptime(row[6], r'%Y-%m-%d %H:%M:%S')\r\n\r\n    return row\r\n\r\nflights = (parse(row) for row in reader)\r\nawait conn.copy_records_to_table('flights', records=flights)\r\n```\r\n\r\nI tried setting the codec to string, but then it complains that timestamp doesn't have binary codec. \r\n```python\r\n# ERROR: asyncpg.exceptions._base.InternalClientError: no binary format encoder for type timestamp (OID 1114)\r\n\r\nawait conn.set_type_codec(\r\n    'timestamp',\r\n    encoder=str,\r\n    decoder=str,\r\n    schema='pg_catalog',\r\n    format='text'\r\n)\r\n```\r\n\r\nThen I tried setting format to binary and use `str.encode/decode`. But that also failed:\r\n\r\n```python\r\n# ERROR: asyncpg.exceptions.InvalidBinaryRepresentationError: incorrect binary data format\r\n\r\nawait conn.set_type_codec(\r\n    'timestamp',\r\n    encoder=str.encode,\r\n    decoder=bytes.decode,\r\n    schema='pg_catalog',\r\n    format='binary'\r\n)\r\n```\r\n\r\nSo my goal is to skip parsing the timestamps and just pass along the string. Is this possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/443", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/443/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/443/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/443", "id": 443576856, "node_id": "MDU6SXNzdWU0NDM1NzY4NTY=", "number": 443, "title": "Prepared Statement Not Working With Update", "user": {"login": "AMcManigal", "id": 1545624, "node_id": "MDQ6VXNlcjE1NDU2MjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1545624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AMcManigal", "html_url": "https://github.com/AMcManigal", "followers_url": "https://api.github.com/users/AMcManigal/followers", "following_url": "https://api.github.com/users/AMcManigal/following{/other_user}", "gists_url": "https://api.github.com/users/AMcManigal/gists{/gist_id}", "starred_url": "https://api.github.com/users/AMcManigal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AMcManigal/subscriptions", "organizations_url": "https://api.github.com/users/AMcManigal/orgs", "repos_url": "https://api.github.com/users/AMcManigal/repos", "events_url": "https://api.github.com/users/AMcManigal/events{/privacy}", "received_events_url": "https://api.github.com/users/AMcManigal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-13T20:04:42Z", "updated_at": "2019-05-14T01:04:39Z", "closed_at": "2019-05-13T20:31:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**:10.6\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\nN/A\r\n* **Python version**: 3.7\r\n* **Platform**: Mac OS\r\n* **Do you use pgbouncer?**: N/A\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: N/A\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nHi Team,\r\n\r\nI'm trying to use the following code to keep track of the last time an api key was used:\r\n\r\n```values = [(row['endDate'], row['serviceDevKey']) for row in csv_data]\r\n        result = await conn.executemany(\r\n            f\"\"\"\r\n            UPDATE api_key\r\n            SET last_used =\r\n                CASE WHEN last_used IS NULL THEN $1\r\n                     WHEN last_used < date $1 THEN $1\r\n                     ELSE last_used\r\n                END\r\n            WHERE id = $2;\r\n            \"\"\",\r\n            values,\r\n            timeout=360\r\n        )\r\n```\r\n\r\nAn example of the values are a list of tuples like this (both of type string):\r\n```\r\n<class 'tuple'>: ('2019-05-12T23:30:00Z', 'someapikey')\r\n```\r\nWhen I try to execute this I get the following error.\r\n```syntax error at or near \"$1\"```\r\nWhen I use Python string substitution with conn.execute instead it works. According to the Postgres docs prepared statements should support UPDATE statements. I'm not sure why this isn't working.\r\n\r\nThanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/440", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/440/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/440/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/440", "id": 441770244, "node_id": "MDU6SXNzdWU0NDE3NzAyNDQ=", "number": 440, "title": "jsonb: Automatic JSON conversion fails when values are None", "user": {"login": "feluxe", "id": 6545589, "node_id": "MDQ6VXNlcjY1NDU1ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6545589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feluxe", "html_url": "https://github.com/feluxe", "followers_url": "https://api.github.com/users/feluxe/followers", "following_url": "https://api.github.com/users/feluxe/following{/other_user}", "gists_url": "https://api.github.com/users/feluxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/feluxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feluxe/subscriptions", "organizations_url": "https://api.github.com/users/feluxe/orgs", "repos_url": "https://api.github.com/users/feluxe/repos", "events_url": "https://api.github.com/users/feluxe/events{/privacy}", "received_events_url": "https://api.github.com/users/feluxe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-08T14:38:33Z", "updated_at": "2019-05-09T21:01:54Z", "closed_at": "2019-05-09T20:09:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: `0.18.3`\r\n* **PostgreSQL version**: `11.2`\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:  I use the latest postgres docker image.\r\n* **Python version**: `3.7.2`\r\n* **Platform**: `linux`\r\n* **Do you use pgbouncer?**: Not that I know of.\r\n* **Did you install asyncpg with pip?**: With `pipenv`.\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: I don't think this is related to `asyncio/uvloop`.\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nHi there, \r\n\r\nwhen using [automatic JSON conversion](https://magicstack.github.io/asyncpg/current/usage.html#example-automatic-json-conversion), conversions fail for values that are `None`.\r\n\r\n**Exaples**\r\n\r\nI have no issues if I *dump* the values manually. This test passes:\r\n\r\n```python\r\n    from json import dumps\r\n\r\n    query = \"INSERT INTO records (jsonbcol) VALUES ($1), ($2), ($3)\"\r\n    await conn.fetch(query, dumps(True), dumps(None), dumps(3))\r\n\r\n    query = \"SELECT * FROM records WHERE (jsonbcol = $1)\"\r\n    rs = await conn.fetch(query, dumps(None))\r\n\r\n    assert len(rs) == 1\r\n\r\n```\r\n\r\nIt also works if I use `conn.set_type_codec()` with an `int`. This test passes as well:\r\n\r\n```python\r\n    from json import dumps, loads\r\n\r\n    await pg.conn.set_type_codec(\r\n        'jsonb',\r\n        encoder=dumps,\r\n        decoder=loads,\r\n        schema='pg_catalog',\r\n    )\r\n\r\n    query = \"INSERT INTO records (jsonbcol) VALUES ($1), ($2), ($3)\"\r\n    await conn.fetch(query, True, None, 3)\r\n\r\n    query = \"SELECT * FROM records WHERE (jsonbcol = $1)\"\r\n    rs = await conn.fetch(query, 3)\r\n\r\n    assert len(rs) == 1\r\n```\r\n\r\nBut if I use `conn.set_type_codec()` combined with a value that is `None` the test fails:\r\n\r\n```python\r\n    from json import dumps, loads\r\n\r\n    await pg.conn.set_type_codec(\r\n        'jsonb',\r\n        encoder=dumps,\r\n        decoder=loads,\r\n        schema='pg_catalog',\r\n    )\r\n\r\n    query = \"INSERT INTO records (jsonbcol) VALUES ($1), ($2), ($3)\"\r\n    await pg.conn.fetch(query, True, None, 3)\r\n\r\n    query = \"SELECT * FROM records WHERE (jsonbcol = $1)\"\r\n    rs = await pg.conn.fetch(query, None)\r\n\r\n    assert len(rs) == 1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/436", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/436/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/436/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/436", "id": 437010616, "node_id": "MDU6SXNzdWU0MzcwMTA2MTY=", "number": 436, "title": "asyncpg.create_pool fails with dsn with @ in password", "user": {"login": "kiddick", "id": 9250239, "node_id": "MDQ6VXNlcjkyNTAyMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/9250239?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiddick", "html_url": "https://github.com/kiddick", "followers_url": "https://api.github.com/users/kiddick/followers", "following_url": "https://api.github.com/users/kiddick/following{/other_user}", "gists_url": "https://api.github.com/users/kiddick/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiddick/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiddick/subscriptions", "organizations_url": "https://api.github.com/users/kiddick/orgs", "repos_url": "https://api.github.com/users/kiddick/repos", "events_url": "https://api.github.com/users/kiddick/events{/privacy}", "received_events_url": "https://api.github.com/users/kiddick/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-25T05:04:20Z", "updated_at": "2019-10-03T21:25:00Z", "closed_at": "2019-10-03T21:25:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11.2\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.7.2\r\n* **Platform**: ubuntu\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nIt leads to different errors `socket.gaierror` such as `[Errno -2] Name or service not known` or `[Errno -3] Temporary failure in name resolution`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/435", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/435/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/435/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/435", "id": 435798348, "node_id": "MDU6SXNzdWU0MzU3OTgzNDg=", "number": 435, "title": "Docs for using with aiohttp, or spoon me :)", "user": {"login": "kodkuce", "id": 24373114, "node_id": "MDQ6VXNlcjI0MzczMTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/24373114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kodkuce", "html_url": "https://github.com/kodkuce", "followers_url": "https://api.github.com/users/kodkuce/followers", "following_url": "https://api.github.com/users/kodkuce/following{/other_user}", "gists_url": "https://api.github.com/users/kodkuce/gists{/gist_id}", "starred_url": "https://api.github.com/users/kodkuce/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kodkuce/subscriptions", "organizations_url": "https://api.github.com/users/kodkuce/orgs", "repos_url": "https://api.github.com/users/kodkuce/repos", "events_url": "https://api.github.com/users/kodkuce/events{/privacy}", "received_events_url": "https://api.github.com/users/kodkuce/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-22T16:54:30Z", "updated_at": "2019-04-22T17:30:46Z", "closed_at": "2019-04-22T17:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi i am trying to figure out how should i use asyncpg with aiohttp webserver, is there somewhere an example or and if not can someone spoon me cuz i dont get it and i wasted 2 days trying all stuff even tryed to setup gino", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/434", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/434/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/434/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/434", "id": 434885915, "node_id": "MDU6SXNzdWU0MzQ4ODU5MTU=", "number": 434, "title": "Get the query text", "user": {"login": "vazir", "id": 919929, "node_id": "MDQ6VXNlcjkxOTkyOQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/919929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vazir", "html_url": "https://github.com/vazir", "followers_url": "https://api.github.com/users/vazir/followers", "following_url": "https://api.github.com/users/vazir/following{/other_user}", "gists_url": "https://api.github.com/users/vazir/gists{/gist_id}", "starred_url": "https://api.github.com/users/vazir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vazir/subscriptions", "organizations_url": "https://api.github.com/users/vazir/orgs", "repos_url": "https://api.github.com/users/vazir/repos", "events_url": "https://api.github.com/users/vazir/events{/privacy}", "received_events_url": "https://api.github.com/users/vazir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-18T17:50:42Z", "updated_at": "2019-04-18T18:05:00Z", "closed_at": "2019-04-18T18:05:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nHow do I just get full text of the query you try to prepare by con.execute/fetch/etc. It is so painful to determine what is exactly the syntax error is, and it is usually just required to take a glance to the final query submitted to the server, and I found no way doing that yet.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/433", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/433/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/433/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/433", "id": 433370459, "node_id": "MDU6SXNzdWU0MzMzNzA0NTk=", "number": 433, "title": "Q: how does Connection.executemany work?", "user": {"login": "fried-sausage", "id": 16693787, "node_id": "MDQ6VXNlcjE2NjkzNzg3", "avatar_url": "https://avatars0.githubusercontent.com/u/16693787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fried-sausage", "html_url": "https://github.com/fried-sausage", "followers_url": "https://api.github.com/users/fried-sausage/followers", "following_url": "https://api.github.com/users/fried-sausage/following{/other_user}", "gists_url": "https://api.github.com/users/fried-sausage/gists{/gist_id}", "starred_url": "https://api.github.com/users/fried-sausage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fried-sausage/subscriptions", "organizations_url": "https://api.github.com/users/fried-sausage/orgs", "repos_url": "https://api.github.com/users/fried-sausage/repos", "events_url": "https://api.github.com/users/fried-sausage/events{/privacy}", "received_events_url": "https://api.github.com/users/fried-sausage/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-15T16:21:36Z", "updated_at": "2019-04-19T11:32:23Z", "closed_at": "2019-04-19T11:32:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "In asyncpg (version 0.18.3), is this code:\r\n```\r\nfor bind in bind_list:\r\n    conn.execute(\"some insert query\", *bind)\r\n```\r\nidentical to this: `conn.executemany(\"some insert query\", bind_list)`?\r\nBecause AFAIK this was/is the case with psycopg2.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/432", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/432/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/432/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/432", "id": 431324516, "node_id": "MDU6SXNzdWU0MzEzMjQ1MTY=", "number": 432, "title": "json_agg and json_build_object raw queries return string type rather than json", "user": {"login": "ashugupt", "id": 2785488, "node_id": "MDQ6VXNlcjI3ODU0ODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/2785488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashugupt", "html_url": "https://github.com/ashugupt", "followers_url": "https://api.github.com/users/ashugupt/followers", "following_url": "https://api.github.com/users/ashugupt/following{/other_user}", "gists_url": "https://api.github.com/users/ashugupt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashugupt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashugupt/subscriptions", "organizations_url": "https://api.github.com/users/ashugupt/orgs", "repos_url": "https://api.github.com/users/ashugupt/repos", "events_url": "https://api.github.com/users/ashugupt/events{/privacy}", "received_events_url": "https://api.github.com/users/ashugupt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-04-10T06:25:08Z", "updated_at": "2019-04-12T12:23:41Z", "closed_at": "2019-04-12T12:23:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 10.6\r\n* **Python version**: 3.7.2\r\n* **Platform**: MacOSX\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nasyncpg return jsonb_agg as string type:\r\n\r\n```\r\ncreate table authors\r\n(\r\n\tid serial not null constraint authors_pkey primary key,\r\n\tname text,\r\n\tcreated_at timestamp with time zone,\r\n\tlast_updated_at timestamp with time zone,\r\n\tis_active boolean\r\n);\r\n\r\ncreate table notes\r\n(\r\n\tid serial not null constraint notes_pkey primary key,\r\n\tauthors integer[],\r\n\ttext text,\r\n\tis_complete boolean,\r\n\tcreated_at timestamp with time zone,\r\n\tlast_updated_at timestamp with time zone,\r\n\tis_active boolean\r\n);\r\n\r\nSELECT author.id,\r\n       author.name,\r\n       jsonb_agg(\r\n           jsonb_build_object(\r\n               'id', note.id,\r\n               'text', note.text,\r\n               'authors', note.authors,\r\n               'is_complete', note.is_complete,\r\n               'created_at', note.created_at,\r\n               'last_updated_at', note.last_updated_at,\r\n               'is_active', note.is_active)) AS notes\r\nFROM notes note\r\n       INNER JOIN authors author ON author.id = ANY (note.authors)\r\nWHERE 1 = 1\r\n  AND author.id = 1\r\n  AND note.authors @> (ARRAY [1])::INT[]\r\nGROUP BY author.id, author.name;\r\n```\r\non executing `conn.fetch_row` the above SQL query returns `notes` key as `str` type instead of `notes` key as `dict` or `json`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/429", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/429/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/429/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/429", "id": 428803595, "node_id": "MDU6SXNzdWU0Mjg4MDM1OTU=", "number": 429, "title": "ValueError: invalid literal for int() with base 10", "user": {"login": "marshallford", "id": 696447, "node_id": "MDQ6VXNlcjY5NjQ0Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/696447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marshallford", "html_url": "https://github.com/marshallford", "followers_url": "https://api.github.com/users/marshallford/followers", "following_url": "https://api.github.com/users/marshallford/following{/other_user}", "gists_url": "https://api.github.com/users/marshallford/gists{/gist_id}", "starred_url": "https://api.github.com/users/marshallford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marshallford/subscriptions", "organizations_url": "https://api.github.com/users/marshallford/orgs", "repos_url": "https://api.github.com/users/marshallford/repos", "events_url": "https://api.github.com/users/marshallford/events{/privacy}", "received_events_url": "https://api.github.com/users/marshallford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-04-03T14:33:38Z", "updated_at": "2020-08-20T00:38:51Z", "closed_at": "2019-04-03T16:07:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: PostgreSQL 10.5, compiled by Visual C++ build 1800, 64-bit\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Azure, haven't tried to reproduce with a local PG\r\n* **Python version**: 3.6.7\r\n* **Platform**: WSL - Ubuntu 18.04\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: N/A\r\n* **Can the issue be reproduced under both asyncio and [uvloop](https://github.com/magicstack/uvloop)?**: Will try after submitting issue.\r\n\r\n\r\n```\r\nawait asyncpg.connect(dsn=\"postgres://user@some-azure-uid:password@some-azure-uid.postgres.database.azure.com:5432/database\")\r\n```\r\n\r\nreturns: \r\n```\r\nValueError: invalid literal for int() with base 10: 'password@some-azure-uid.postgres.database.azure.com:5432'\r\n```\r\n\r\nObviously this isn't my actual hostname or password. I have tried removing the port (`:5432`) thinking that it is the only part that would be parsed as an `int`.\r\n\r\nI'm sure this is just a silly mistake on my end that I can't see. Thanks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/428", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/428/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/428/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/428", "id": 428800886, "node_id": "MDU6SXNzdWU0Mjg4MDA4ODY=", "number": 428, "title": "asyncpg.exceptions.DataError: invalid input for query argument $1: <Record chat_id=-1001218255164> (an integer is required (got type asyncpg.Record))", "user": {"login": "sarvarSV", "id": 45972875, "node_id": "MDQ6VXNlcjQ1OTcyODc1", "avatar_url": "https://avatars0.githubusercontent.com/u/45972875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sarvarSV", "html_url": "https://github.com/sarvarSV", "followers_url": "https://api.github.com/users/sarvarSV/followers", "following_url": "https://api.github.com/users/sarvarSV/following{/other_user}", "gists_url": "https://api.github.com/users/sarvarSV/gists{/gist_id}", "starred_url": "https://api.github.com/users/sarvarSV/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sarvarSV/subscriptions", "organizations_url": "https://api.github.com/users/sarvarSV/orgs", "repos_url": "https://api.github.com/users/sarvarSV/repos", "events_url": "https://api.github.com/users/sarvarSV/events{/privacy}", "received_events_url": "https://api.github.com/users/sarvarSV/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-04-03T14:28:56Z", "updated_at": "2019-04-04T16:02:20Z", "closed_at": "2019-04-04T16:02:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 4.3\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: No\r\n* **Python version**: 3.7.1\r\n* **Platform**: Linux Ubuntu\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: No (i installed it in pycharm)\r\n* **If you built asyncpg locally, which version of Cython did you use?**: I don't use Cython\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: I don't know\r\n\r\n<!-- Enter your issue details below this comment. -->\r\ni have a column with bigint type, when i want make a record \r\ngives an error message: ``` asyncpg.exceptions.DataError: invalid input for query argument $1: <Record chat_id=-1001218255164> (an integer is required (got type asyncpg.Record)) ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/427", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/427/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/427/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/427/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/427", "id": 428780637, "node_id": "MDU6SXNzdWU0Mjg3ODA2Mzc=", "number": 427, "title": "datetime and copy_records_to_table", "user": {"login": "kfollesdal", "id": 546087, "node_id": "MDQ6VXNlcjU0NjA4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/546087?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kfollesdal", "html_url": "https://github.com/kfollesdal", "followers_url": "https://api.github.com/users/kfollesdal/followers", "following_url": "https://api.github.com/users/kfollesdal/following{/other_user}", "gists_url": "https://api.github.com/users/kfollesdal/gists{/gist_id}", "starred_url": "https://api.github.com/users/kfollesdal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kfollesdal/subscriptions", "organizations_url": "https://api.github.com/users/kfollesdal/orgs", "repos_url": "https://api.github.com/users/kfollesdal/repos", "events_url": "https://api.github.com/users/kfollesdal/events{/privacy}", "received_events_url": "https://api.github.com/users/kfollesdal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-03T13:51:49Z", "updated_at": "2020-03-24T16:10:07Z", "closed_at": "2020-03-24T16:10:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Want to use copy_recods_to_table with records containing date and time as strings 2019-04-03T15:49:00Z is this possible. Or is the only way to convert them to python datetime objects? Column type in database is timestamptz. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/425", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/425/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/425/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/425", "id": 428292968, "node_id": "MDU6SXNzdWU0MjgyOTI5Njg=", "number": 425, "title": "local variable 'warning_callback' referenced before assignment", "user": {"login": "samuelcolvin", "id": 4039449, "node_id": "MDQ6VXNlcjQwMzk0NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/4039449?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samuelcolvin", "html_url": "https://github.com/samuelcolvin", "followers_url": "https://api.github.com/users/samuelcolvin/followers", "following_url": "https://api.github.com/users/samuelcolvin/following{/other_user}", "gists_url": "https://api.github.com/users/samuelcolvin/gists{/gist_id}", "starred_url": "https://api.github.com/users/samuelcolvin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samuelcolvin/subscriptions", "organizations_url": "https://api.github.com/users/samuelcolvin/orgs", "repos_url": "https://api.github.com/users/samuelcolvin/repos", "events_url": "https://api.github.com/users/samuelcolvin/events{/privacy}", "received_events_url": "https://api.github.com/users/samuelcolvin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-02T15:23:45Z", "updated_at": "2019-04-03T15:37:12Z", "closed_at": "2019-04-03T15:37:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 10.6\r\n* **Python version**: 3.7\r\n* **Platform**: Ubuntu\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Not sure\r\n\r\nhttps://github.com/MagicStack/asyncpg/blob/f4aa9bf4a87ef3ee5fc4e190bb6fc460313f150e/asyncpg/pool.py#L669-L686\r\n\r\nI'm occasionally getting\r\n```\r\nTraceback (most recent call last):\r\n  File \".../env/lib/python3.7/site-packages/asyncpg/pool.py\", line 671, in close\r\n    60, self._warn_on_long_close)\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 657, in call_later\r\n    context=context)\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 671, in call_at\r\n    timer = events.TimerHandle(when, callback, args, self, context)\r\n  File \"/usr/lib/python3.7/asyncio/events.py\", line 111, in __init__\r\n    super().__init__(callback, args, loop, context)\r\nKeyboardInterrupt\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\n  ...\r\n  ...\r\n  File \".../env/lib/python3.7/site-packages/asyncpg/pool.py\", line 686, in close\r\n    warning_callback.cancel()\r\nUnboundLocalError: local variable 'warning_callback' referenced before assignment\r\n```\r\n\r\nThis happens when aiohttp-devtools tries to shutdown aiohttp as quickly as possible.\r\n\r\nSolution should be as simple as setting `warning_callback = None` before `try`, then check it's `not None` before calling `cancel()`. \r\n\r\nCan I submit a PR?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/424", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/424/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/424/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/424", "id": 425960834, "node_id": "MDU6SXNzdWU0MjU5NjA4MzQ=", "number": 424, "title": "[Question] SELECTING Multiple ARGUMENTS from one Column", "user": {"login": "stanach", "id": 32049025, "node_id": "MDQ6VXNlcjMyMDQ5MDI1", "avatar_url": "https://avatars1.githubusercontent.com/u/32049025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stanach", "html_url": "https://github.com/stanach", "followers_url": "https://api.github.com/users/stanach/followers", "following_url": "https://api.github.com/users/stanach/following{/other_user}", "gists_url": "https://api.github.com/users/stanach/gists{/gist_id}", "starred_url": "https://api.github.com/users/stanach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stanach/subscriptions", "organizations_url": "https://api.github.com/users/stanach/orgs", "repos_url": "https://api.github.com/users/stanach/repos", "events_url": "https://api.github.com/users/stanach/events{/privacy}", "received_events_url": "https://api.github.com/users/stanach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-27T13:30:05Z", "updated_at": "2019-03-27T14:09:44Z", "closed_at": "2019-03-27T14:09:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIf this is a\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nI had asked this questions yesterday, and someone answered and closed it out. The information they gave me did not help. \r\n\r\nWhat I am trying to do is. ex: a user inputs a command !item baseball bat.. it fails unless I use !item \"baseball bat\". baseball bat is in the column 'name' with two words. With the following code user = await self.bot.pg_con.fetchrow(\"SELECT item_id FROM item where LOWER(name) = $1 \", name) it only recognizes baseball but not the bat with out the quotes. Is there a way to fetch the both 'baseball bat' from the db with out having to use quotes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/423", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/423/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/423/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/423", "id": 425579443, "node_id": "MDU6SXNzdWU0MjU1Nzk0NDM=", "number": 423, "title": "How to select Multiple arguments  from a column.  (\"SELECT item_id FROM item WHERE LOWER(name) = $1, name) name has more than one word in the column", "user": {"login": "stanach", "id": 32049025, "node_id": "MDQ6VXNlcjMyMDQ5MDI1", "avatar_url": "https://avatars1.githubusercontent.com/u/32049025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stanach", "html_url": "https://github.com/stanach", "followers_url": "https://api.github.com/users/stanach/followers", "following_url": "https://api.github.com/users/stanach/following{/other_user}", "gists_url": "https://api.github.com/users/stanach/gists{/gist_id}", "starred_url": "https://api.github.com/users/stanach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stanach/subscriptions", "organizations_url": "https://api.github.com/users/stanach/orgs", "repos_url": "https://api.github.com/users/stanach/repos", "events_url": "https://api.github.com/users/stanach/events{/privacy}", "received_events_url": "https://api.github.com/users/stanach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-26T18:23:37Z", "updated_at": "2019-03-26T22:27:02Z", "closed_at": "2019-03-26T22:10:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/422", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/422/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/422/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/422/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/422", "id": 425579435, "node_id": "MDU6SXNzdWU0MjU1Nzk0MzU=", "number": 422, "title": "How to select Multiple arguments  from a column. ", "user": {"login": "stanach", "id": 32049025, "node_id": "MDQ6VXNlcjMyMDQ5MDI1", "avatar_url": "https://avatars1.githubusercontent.com/u/32049025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stanach", "html_url": "https://github.com/stanach", "followers_url": "https://api.github.com/users/stanach/followers", "following_url": "https://api.github.com/users/stanach/following{/other_user}", "gists_url": "https://api.github.com/users/stanach/gists{/gist_id}", "starred_url": "https://api.github.com/users/stanach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stanach/subscriptions", "organizations_url": "https://api.github.com/users/stanach/orgs", "repos_url": "https://api.github.com/users/stanach/repos", "events_url": "https://api.github.com/users/stanach/events{/privacy}", "received_events_url": "https://api.github.com/users/stanach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-03-26T18:23:36Z", "updated_at": "2019-03-26T18:57:24Z", "closed_at": "2019-03-26T18:57:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/419", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/419/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/419/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/419", "id": 422754156, "node_id": "MDU6SXNzdWU0MjI3NTQxNTY=", "number": 419, "title": "Support for Cloud SQL host within the dsn", "user": {"login": "gvbgduh", "id": 8695596, "node_id": "MDQ6VXNlcjg2OTU1OTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8695596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gvbgduh", "html_url": "https://github.com/gvbgduh", "followers_url": "https://api.github.com/users/gvbgduh/followers", "following_url": "https://api.github.com/users/gvbgduh/following{/other_user}", "gists_url": "https://api.github.com/users/gvbgduh/gists{/gist_id}", "starred_url": "https://api.github.com/users/gvbgduh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gvbgduh/subscriptions", "organizations_url": "https://api.github.com/users/gvbgduh/orgs", "repos_url": "https://api.github.com/users/gvbgduh/repos", "events_url": "https://api.github.com/users/gvbgduh/events{/privacy}", "received_events_url": "https://api.github.com/users/gvbgduh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-03-19T14:11:02Z", "updated_at": "2020-04-11T02:27:53Z", "closed_at": "2020-04-11T02:27:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to use asyncpg to connect to Google Cloud SQL together with `[databases](https://github.com/encode/databases/)`, `alembic` and sometimes `sqlalchemy`. It's quite convenient to have one database url that can be used in different cases.\r\n\r\nBut there's one problem as the Cloud SQL host is in the format `/cloudsql/<project>:<region>:<db_instance>`.\r\n\r\nUnfortunately, it breaks the parsing around https://github.com/MagicStack/asyncpg/blob/master/asyncpg/connect_utils.py#L182, so the port and host cannot be distinguished unless `host` is explicitly passed as kwarg.\r\n\r\nWould it be possible to consider adding the support for such a case?\r\n\r\nNaive solution seems to be to use `rpartition` there, so the url \r\n'postgresql://USER:PWD@/DB?host=/cloudsql/<project>:<region>:<db_instance>:5432'\r\ncan be used, but I can investigate this one more thorough if seems like a reasonable case.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/416", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/416/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/416/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/416", "id": 421649786, "node_id": "MDU6SXNzdWU0MjE2NDk3ODY=", "number": 416, "title": "_StatementCache does not call on_remove callback when clear()'ed", "user": {"login": "un-def", "id": 2131407, "node_id": "MDQ6VXNlcjIxMzE0MDc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2131407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/un-def", "html_url": "https://github.com/un-def", "followers_url": "https://api.github.com/users/un-def/followers", "following_url": "https://api.github.com/users/un-def/following{/other_user}", "gists_url": "https://api.github.com/users/un-def/gists{/gist_id}", "starred_url": "https://api.github.com/users/un-def/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/un-def/subscriptions", "organizations_url": "https://api.github.com/users/un-def/orgs", "repos_url": "https://api.github.com/users/un-def/repos", "events_url": "https://api.github.com/users/un-def/events{/privacy}", "received_events_url": "https://api.github.com/users/un-def/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-15T18:24:43Z", "updated_at": "2019-03-19T16:28:38Z", "closed_at": "2019-03-19T16:28:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 9.6\r\n* **Do you use a PostgreSQL SaaS?**: no\r\n* **Python version**: 3.7\r\n* **Platform**: Ubuntu 18.04.2 LTS\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: not related\r\n\r\n------\r\n\r\n`_StatementCache` `on_remove` callback is called for expired entries ([1]) and for least recently used entries when the cache is full ([2]), but not when `clear()` method is called ([3]).\r\n\r\n`Connection` sets own `_maybe_gc_stmt` method ([4]) as a callback for `_StatementCache`. The method is used to mark non-referenced `PreparedStatementState` objects as closed and put them in `_stmts_to_close` set to schedule to close them later (they will be closed on the server side when `_cleanup_stmts` is called ([5])).\r\n\r\nAs noted above, the callback is not called when the cache is cleared by `_StatementCache.clear` method, therefore the statements will never be closed on the postgres side (\u201cclosed\u201d in the meaning of the `Close` frontend protocol message) and can no longer be used by `asyncpg`. This leads to memory leak on the server side until the connection is closed.\r\n\r\nThere are two `Connection` methods that used to drop the cache:`_drop_local_statement_cache` and `_drop_global_statement_cache` ([6]). Both of them (directly or indirectly) call `_StatementCache.clear`. Some `Connection` methods (`set_type_codec`, `reset_type_codec`, `set_builtin_type_codec`, `reload_schema_state`) drop the cache unconditionally, some methods do so if the database schema has been changed (`_do_execute` \u2192 (`execute`, `executemany`, `fetch`, `fetchval`, `fetchrow`)). In any case, each cache drop may increase the number of unreachable named prepared statements that eat postgres memory.\r\n\r\n------\r\n\r\nIs this a bug or an expected behavior?\r\n\r\n\r\n\r\n[1]: https://github.com/MagicStack/asyncpg/blob/ca4ffcac160986067d3fd024be5ae579158a84e0/asyncpg/connection.py#L1816\r\n[2]: https://github.com/MagicStack/asyncpg/blob/ca4ffcac160986067d3fd024be5ae579158a84e0/asyncpg/connection.py#L1827\r\n[3]: https://github.com/MagicStack/asyncpg/blob/ca4ffcac160986067d3fd024be5ae579158a84e0/asyncpg/connection.py#L1794\r\n[4]: https://github.com/MagicStack/asyncpg/blob/ca4ffcac160986067d3fd024be5ae579158a84e0/asyncpg/connection.py#L1164\r\n[5]: https://github.com/MagicStack/asyncpg/blob/ca4ffcac160986067d3fd024be5ae579158a84e0/asyncpg/connection.py#L1186\r\n[6]: https://github.com/MagicStack/asyncpg/blob/ca4ffcac160986067d3fd024be5ae579158a84e0/asyncpg/connection.py#L1342\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/415", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/415/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/415/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/415/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/415", "id": 421139125, "node_id": "MDU6SXNzdWU0MjExMzkxMjU=", "number": 415, "title": "[Question] How to set multiple type codecs simultaneously?", "user": {"login": "jonathan-shemer", "id": 14258196, "node_id": "MDQ6VXNlcjE0MjU4MTk2", "avatar_url": "https://avatars2.githubusercontent.com/u/14258196?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathan-shemer", "html_url": "https://github.com/jonathan-shemer", "followers_url": "https://api.github.com/users/jonathan-shemer/followers", "following_url": "https://api.github.com/users/jonathan-shemer/following{/other_user}", "gists_url": "https://api.github.com/users/jonathan-shemer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathan-shemer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathan-shemer/subscriptions", "organizations_url": "https://api.github.com/users/jonathan-shemer/orgs", "repos_url": "https://api.github.com/users/jonathan-shemer/repos", "events_url": "https://api.github.com/users/jonathan-shemer/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathan-shemer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-03-14T17:01:26Z", "updated_at": "2019-04-09T20:39:24Z", "closed_at": "2019-04-09T20:39:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI'm setting multiple type codecs with asyncpg (mostly Enums), and have to `await` for each one.\r\n\r\nIs there a way to set multiple types at once?\r\n\r\nIf I use `asyncio.gather` I get `asyncpg.exceptions._base.InterfaceError: cannot perform operation: another operation is in progress`.\r\n\r\nThanks,\r\nJonathan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/411", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/411/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/411/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/411", "id": 411078009, "node_id": "MDU6SXNzdWU0MTEwNzgwMDk=", "number": 411, "title": "Using asyncpg.copy_to_table with Pandas Dataframe", "user": {"login": "edchow", "id": 4625764, "node_id": "MDQ6VXNlcjQ2MjU3NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/4625764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edchow", "html_url": "https://github.com/edchow", "followers_url": "https://api.github.com/users/edchow/followers", "following_url": "https://api.github.com/users/edchow/following{/other_user}", "gists_url": "https://api.github.com/users/edchow/gists{/gist_id}", "starred_url": "https://api.github.com/users/edchow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edchow/subscriptions", "organizations_url": "https://api.github.com/users/edchow/orgs", "repos_url": "https://api.github.com/users/edchow/repos", "events_url": "https://api.github.com/users/edchow/events{/privacy}", "received_events_url": "https://api.github.com/users/edchow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-16T14:32:32Z", "updated_at": "2019-02-16T15:13:42Z", "closed_at": "2019-02-16T15:13:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 18.1\r\n* **PostgreSQL version**: 10.6\r\n* **Python version**:  3.7.1\r\n* **Platform**: Windows 10\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n\r\nI'm trying to write a large Pandas dataframe to postgres with asyncpg but I'm getting errors when trying to do it with the copy_to_table function.\r\n\r\nI have working code using psycopg2.copy_from using StringIO but it's not working when I try to implement a similar pattern with asyncpg\r\n\r\nUsing StringIO\r\n\r\n```\r\nsio = StringIO(df.to_csv(index=None, header=None))\r\nsio.seek(0)\r\n\r\nasync with pg_pool.acquire() as conn:\r\n    async with conn.transaction():\r\n        s = await conn.copy_to_table('tmp_table', source=sio, columns=list(df.columns), delimiter=',')\r\n```\r\n\r\nThis is the error I get using StringIO:\r\n\r\n`Exception:  memoryview: a bytes-like object is required, not 'str'`\r\n\r\nI also tried loading the dataframe into a BytesIO object but I'm getting a different issue from to_csv:\r\n\r\n```\r\nbio = BytesIO(df.to_csv(index=None, header=None))\r\nbio.seek(0)\r\n```\r\n\r\nResulting in this error:\r\n\r\n`TypeError: a bytes-like object is required, not 'str'`\r\n\r\nI'm pretty sure I'm converting the dataframe to bytes wrong here with BytesIO.\r\n\r\nEither way I just want to use asyncpg to load a large dataframe into postgres via the COPY command - not row by row.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/409", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/409/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/409/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/409", "id": 408772142, "node_id": "MDU6SXNzdWU0MDg3NzIxNDI=", "number": 409, "title": "How to create query with ANY(VALUES(...), (...), ...) statement ?", "user": {"login": "crazyministr", "id": 4137557, "node_id": "MDQ6VXNlcjQxMzc1NTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/4137557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crazyministr", "html_url": "https://github.com/crazyministr", "followers_url": "https://api.github.com/users/crazyministr/followers", "following_url": "https://api.github.com/users/crazyministr/following{/other_user}", "gists_url": "https://api.github.com/users/crazyministr/gists{/gist_id}", "starred_url": "https://api.github.com/users/crazyministr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crazyministr/subscriptions", "organizations_url": "https://api.github.com/users/crazyministr/orgs", "repos_url": "https://api.github.com/users/crazyministr/repos", "events_url": "https://api.github.com/users/crazyministr/events{/privacy}", "received_events_url": "https://api.github.com/users/crazyministr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-11T13:04:34Z", "updated_at": "2019-02-11T20:45:38Z", "closed_at": "2019-02-11T20:45:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.15.0\r\n* **PostgreSQL version**: 10\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: No\r\n* **Python version**: 3.6\r\n* **Platform**: Linux\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: -\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: -\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nHow to create query like this:\r\n``` sql\r\nSELECT col1, col2 FROM some_table WHERE col3 = ANY(VALUES(1), (2), (3), ...)\r\n```\r\n\r\nWhat I found it's only this\r\n``` python\r\nawait conn.fetch(\"SELECT col1, col2 FROM some_table WHERE col3 IN (SELECT unnest($1::INTEGER[]))\", col3_values)\r\n```\r\nUPD:\r\nThe second way doen't fit for me because first one is too much faster\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/408", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/408/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/408/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/408", "id": 408560098, "node_id": "MDU6SXNzdWU0MDg1NjAwOTg=", "number": 408, "title": "Postgres range bounds", "user": {"login": "nbob", "id": 3524322, "node_id": "MDQ6VXNlcjM1MjQzMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/3524322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbob", "html_url": "https://github.com/nbob", "followers_url": "https://api.github.com/users/nbob/followers", "following_url": "https://api.github.com/users/nbob/following{/other_user}", "gists_url": "https://api.github.com/users/nbob/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbob/subscriptions", "organizations_url": "https://api.github.com/users/nbob/orgs", "repos_url": "https://api.github.com/users/nbob/repos", "events_url": "https://api.github.com/users/nbob/events{/privacy}", "received_events_url": "https://api.github.com/users/nbob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-10T17:53:46Z", "updated_at": "2019-02-11T20:41:16Z", "closed_at": "2019-02-11T20:41:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\nI am using asyncpg via Gino library.\r\n\r\nI could not find in asyncpg doc how can I specify [Range](https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.types.Range) bounds (`[]` or `()` or `[)` or `(]`).\r\n\r\nCould you help me with this moment? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/406", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/406/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/406/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/406", "id": 405970607, "node_id": "MDU6SXNzdWU0MDU5NzA2MDc=", "number": 406, "title": "row_to_json function call failed", "user": {"login": "aCLr", "id": 6426720, "node_id": "MDQ6VXNlcjY0MjY3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6426720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aCLr", "html_url": "https://github.com/aCLr", "followers_url": "https://api.github.com/users/aCLr/followers", "following_url": "https://api.github.com/users/aCLr/following{/other_user}", "gists_url": "https://api.github.com/users/aCLr/gists{/gist_id}", "starred_url": "https://api.github.com/users/aCLr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aCLr/subscriptions", "organizations_url": "https://api.github.com/users/aCLr/orgs", "repos_url": "https://api.github.com/users/aCLr/repos", "events_url": "https://api.github.com/users/aCLr/events{/privacy}", "received_events_url": "https://api.github.com/users/aCLr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-02T10:28:50Z", "updated_at": "2019-02-12T19:00:27Z", "closed_at": "2019-02-12T19:00:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 11.1\r\n* **Python version**: 3.7.2\r\n* **Platform**: linux\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n\r\nI build a query with asyncpgsa, select clause contains `row_to_json(table.*)`. Here is compiled query and its parameters (retrieved into asyncpgsa.connection.SAConnection._execute method):\r\n```sql\r\nSELECT processed_documents.document_id, row_to_json($3) AS row_to_json_1 \r\nFROM processed_documents, adopting \r\nWHERE adopting.qwe = processed_documents.xxx AND adopting.ewq = processed_documents.yyy \r\n LIMIT $1 OFFSET $2\r\n\r\n-- parameters: [3, 0, 'adopting.*']\r\n```\r\n\r\nHere is a traceback for execution:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/sanic/app.py\", line 750, in handle_request\r\n    response = await response\r\n  File \"/home/anton/Projects/db_service/db_service/app/api/data.py\", line 19, in get\r\n    result = await request.app.interface.get_data(table_name, data)\r\n  File \"/home/anton/Projects/db_service/db_service/interfaces/postgresql.py\", line 74, in get_data\r\n    for row in await pg.fetch(query):\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/asyncpgsa/pgsingleton.py\", line 73, in fetch\r\n    return await conn.fetch(query, *args, timeout=timeout)\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/asyncpg/connection.py\", line 421, in fetch\r\n    return await self._execute(query, args, 0, timeout)\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/asyncpg/connection.py\", line 1414, in _execute\r\n    query, args, limit, timeout, return_status=return_status)\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/asyncpg/connection.py\", line 1422, in __execute\r\n    return await self._do_execute(query, executor, timeout)\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/asyncpg/connection.py\", line 1434, in _do_execute\r\n    stmt = await self._get_statement(query, None)\r\n  File \"/home/anton/Projects/venvs/db_service/lib/python3.7/site-packages/asyncpg/connection.py\", line 356, in _get_statement\r\n    'in {} attempts'.format(tries)\r\nasyncpg.exceptions._base.InternalClientError: could not resolve query result and/or argument types in 6 attempts\r\n[2019-02-02 13:26:01 +0300] - (sanic.access)[INFO][127.0.0.1:35254]: GET http://127.0.0.1:10001/v1/processed_documents?limit=3&fields=document_id&fields=adopting  500 144\r\n\r\n```\r\n\r\nI found, that `types_with_mising_codecs` equals to {2249} and here is `types` variable retrieved on data  types register flow\r\n```\r\n[<Record oid=2249 ns='pg_catalog' name='record' kind=b'p' basetype=None has_bin_io=True elemtype=0 elemdelim=None range_subtype=None elem_has_bin_io=None attrtypoids=None attrnames=None depth=0>]\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/405", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/405/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/405/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/405", "id": 404651532, "node_id": "MDU6SXNzdWU0MDQ2NTE1MzI=", "number": 405, "title": "Improve performances fetch all rows", "user": {"login": "garanews", "id": 16938405, "node_id": "MDQ6VXNlcjE2OTM4NDA1", "avatar_url": "https://avatars1.githubusercontent.com/u/16938405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/garanews", "html_url": "https://github.com/garanews", "followers_url": "https://api.github.com/users/garanews/followers", "following_url": "https://api.github.com/users/garanews/following{/other_user}", "gists_url": "https://api.github.com/users/garanews/gists{/gist_id}", "starred_url": "https://api.github.com/users/garanews/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/garanews/subscriptions", "organizations_url": "https://api.github.com/users/garanews/orgs", "repos_url": "https://api.github.com/users/garanews/repos", "events_url": "https://api.github.com/users/garanews/events{/privacy}", "received_events_url": "https://api.github.com/users/garanews/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 410393392, "node_id": "MDU6TGFiZWw0MTAzOTMzOTI=", "url": "https://api.github.com/repos/MagicStack/asyncpg/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-30T08:19:32Z", "updated_at": "2019-01-30T16:12:23Z", "closed_at": "2019-01-30T16:00:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have this following code that fetch data from PostgreSQL:\r\n\r\n```\r\nimport asyncio\r\nimport asyncpg\r\nimport time\r\n\r\n\r\nasync def read():\r\n    conn = await asyncpg.connect('postgresql://user:password@localhost/malwares')\r\n    rows = await conn.fetch('SELECT id, data FROM malwares ')\r\n    return [x['data'] for x in rows]\r\n\r\n\r\ndef main():\r\n    start = time.time()\r\n    loop = asyncio.get_event_loop()\r\n    vector_list = loop.run_until_complete(read())\r\n    print(\"READ POSTGRESQL:\", time.time() - start)\r\n    return vector_list\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    vector_list = main()\r\n    print(len(vector_list))\r\n```\r\n\r\nCurrently performances are:\r\nREAD POSTGRESQL: 5.148119211196899\r\n3196790\r\n\r\nDo you think is possible to do better?\r\nThanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/402", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/402/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/402/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/402", "id": 402211326, "node_id": "MDU6SXNzdWU0MDIyMTEzMjY=", "number": 402, "title": "Strange behavior:  column names and aliases converting to lowercase", "user": {"login": "iamnotaprogrammer", "id": 14950441, "node_id": "MDQ6VXNlcjE0OTUwNDQx", "avatar_url": "https://avatars1.githubusercontent.com/u/14950441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iamnotaprogrammer", "html_url": "https://github.com/iamnotaprogrammer", "followers_url": "https://api.github.com/users/iamnotaprogrammer/followers", "following_url": "https://api.github.com/users/iamnotaprogrammer/following{/other_user}", "gists_url": "https://api.github.com/users/iamnotaprogrammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iamnotaprogrammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iamnotaprogrammer/subscriptions", "organizations_url": "https://api.github.com/users/iamnotaprogrammer/orgs", "repos_url": "https://api.github.com/users/iamnotaprogrammer/repos", "events_url": "https://api.github.com/users/iamnotaprogrammer/events{/privacy}", "received_events_url": "https://api.github.com/users/iamnotaprogrammer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-23T12:14:23Z", "updated_at": "2019-01-23T15:34:42Z", "closed_at": "2019-01-23T15:34:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.2\r\n* **PostgreSQL version**: PostgreSQL 9.6.10 on x86_64-pc-linux-musl, compiled by gcc (Alpine 6.4.0) 6.4.0, 64-bit\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: yes\r\n* **Python version**: 3.6\r\n* **Platform**: macOS mojave\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: no\r\n* **Can the issue be reproduced under both asyncio and \r\n  [uvloop](https://github.com/magicstack/uvloop)?**: asyncio event loop\r\n\r\nasyncpg convert column names or aliases to lowercase\r\n i create table\r\n\r\n```\r\nCREATE TABLE temp(\r\n I_WANT_UPPER_CASE int,\r\n json_data jsonb\r\n );\r\nINSERT INTO temp values (2, '{\"UP\": \"RRR\"}')\r\nINSERT INTO temp values (1, '{\"UP\": 1}')\r\n```\r\n```\r\n\r\nfrom asyncpg import Connection\r\nfrom asyncpg.pool import create_pool as _create_pool, Pool\r\nimport asyncio\r\nimport ujson\r\n\r\n\r\nasync def _init(con: Connection):\r\n    def _encoder(value):\r\n        return b'\\x01' + ujson.dumps(value).encode('utf-8')\r\n\r\n    def _decoder(value):\r\n        return ujson.loads(value[1:].decode('utf-8'))\r\n\r\n    await con.set_type_codec('jsonb', encoder=_encoder, decoder=_decoder, schema='pg_catalog', format='binary')\r\n\r\n\r\nasync def create_pool(database_url: str, max_size: int = 5, min_size: int = 1) -> Pool:\r\n    return await _create_pool(dsn=database_url,\r\n                              max_size=max_size,\r\n                              min_size=min_size,\r\n                              init=_init)\r\n\r\n\r\n\r\nPOSTGRES_URL = 'postgres://postgres:dbpass@0.0.0.0:5432/db'\r\nasync def get_data():\r\n    pool = await create_pool(POSTGRES_URL)\r\n    res = await pool.fetch('select * from temp')\r\n    print(res) \r\n    res = await pool.fetch(\"select json_data->'UP' as UP, I_WANT_UPPER_CASE from temp\")\r\n    print(res) \r\n\r\nif __name__ == '__main__':\r\n    asyncio.get_event_loop().run_until_complete(get_data())\r\n```\r\nOutput: \r\n```\r\n[<Record i_want_upper_case=1 json_data={'UP': 1}>, <Record i_want_upper_case=2 json_data={'UP': 'RRR'}>]\r\n[<Record up=1 i_want_upper_case=1>, <Record up='RRR' i_want_upper_case=1>, <Record up='RRR' i_want_upper_case=2>]\r\n```\r\nexpected\r\ni_want_upper_case -> I_WANT_UPPER_CASE\r\nup -> UP\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/401", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/401/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/401/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/401", "id": 401938315, "node_id": "MDU6SXNzdWU0MDE5MzgzMTU=", "number": 401, "title": "External Discord Pool", "user": {"login": "TGKitten", "id": 44097666, "node_id": "MDQ6VXNlcjQ0MDk3NjY2", "avatar_url": "https://avatars0.githubusercontent.com/u/44097666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TGKitten", "html_url": "https://github.com/TGKitten", "followers_url": "https://api.github.com/users/TGKitten/followers", "following_url": "https://api.github.com/users/TGKitten/following{/other_user}", "gists_url": "https://api.github.com/users/TGKitten/gists{/gist_id}", "starred_url": "https://api.github.com/users/TGKitten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TGKitten/subscriptions", "organizations_url": "https://api.github.com/users/TGKitten/orgs", "repos_url": "https://api.github.com/users/TGKitten/repos", "events_url": "https://api.github.com/users/TGKitten/events{/privacy}", "received_events_url": "https://api.github.com/users/TGKitten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-01-22T20:23:16Z", "updated_at": "2019-01-23T18:19:47Z", "closed_at": "2019-01-23T15:36:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\nI am using Discord.py Rewrite and can you connect to a external DB pool from a webhost?\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/398", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/398/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/398/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/398", "id": 396405376, "node_id": "MDU6SXNzdWUzOTY0MDUzNzY=", "number": 398, "title": "Struck with `concurrent.futures._base.TimeoutError` Error", "user": {"login": "immohsin", "id": 14070273, "node_id": "MDQ6VXNlcjE0MDcwMjcz", "avatar_url": "https://avatars1.githubusercontent.com/u/14070273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/immohsin", "html_url": "https://github.com/immohsin", "followers_url": "https://api.github.com/users/immohsin/followers", "following_url": "https://api.github.com/users/immohsin/following{/other_user}", "gists_url": "https://api.github.com/users/immohsin/gists{/gist_id}", "starred_url": "https://api.github.com/users/immohsin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/immohsin/subscriptions", "organizations_url": "https://api.github.com/users/immohsin/orgs", "repos_url": "https://api.github.com/users/immohsin/repos", "events_url": "https://api.github.com/users/immohsin/events{/privacy}", "received_events_url": "https://api.github.com/users/immohsin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-07T09:14:50Z", "updated_at": "2019-01-07T11:04:17Z", "closed_at": "2019-01-07T11:04:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.1\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**: 3.6\r\n* **Platform**:\r\n* **Do you use pgbouncer?**: No \r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nI have just started using asyncpg for writing data to AWS Redshift. I make a connection to db during every write and close the connection after execution.\r\n\r\nThe example code is:\r\n```\r\n async def write(self, data) -> None:\r\n\r\n        connection = await asyncpg.connect(**self.redshift_config)\r\n        try:\r\n               await connection.execute(\r\n                     insert_query.format(table1), *data)  \r\n        finally:\r\n               await connection.close()\r\n```\r\nWhile executing this i'm struck with this exception.\r\n```\r\nFile \"/Users/sources/multicast.py\", line 23, in write\r\n    await e.write(data)\r\n  File \"/Users/sources/redshift.py\", line 49, in write\r\n    connection = await asyncpg.connect(**self.redshift_config)\r\n  File \"/Users/venv/lib/python3.6/site-packages/asyncpg/connection.py\", line 1688, in connect\r\n    max_cacheable_statement_size=max_cacheable_statement_size)\r\n  File \"/Users/venv/lib/python3.6/site-packages/asyncpg/connect_utils.py\", line 551, in _connect\r\n    raise last_error\r\n  File \"/Users/venv/lib/python3.6/site-packages/asyncpg/connect_utils.py\", line 543, in _connect\r\n    connection_class=connection_class)\r\n  File \"/Users/venv/lib/python3.6/site-packages/asyncpg/connect_utils.py\", line 513, in _connect_addr\r\n    connector, timeout=timeout, loop=loop)\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/asyncio/tasks.py\", line 362, in wait_for\r\n    raise futures.TimeoutError()\r\nconcurrent.futures._base.TimeoutError\r\n```\r\n\r\nCan someone please help with this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/397", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/397/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/397/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/397/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/397", "id": 396356763, "node_id": "MDU6SXNzdWUzOTYzNTY3NjM=", "number": 397, "title": "TypeError: prepare() got an unexpected keyword argument 'state'", "user": {"login": "alexmac", "id": 165841, "node_id": "MDQ6VXNlcjE2NTg0MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/165841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexmac", "html_url": "https://github.com/alexmac", "followers_url": "https://api.github.com/users/alexmac/followers", "following_url": "https://api.github.com/users/alexmac/following{/other_user}", "gists_url": "https://api.github.com/users/alexmac/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexmac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexmac/subscriptions", "organizations_url": "https://api.github.com/users/alexmac/orgs", "repos_url": "https://api.github.com/users/alexmac/repos", "events_url": "https://api.github.com/users/alexmac/events{/privacy}", "received_events_url": "https://api.github.com/users/alexmac/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 504996080, "node_id": "MDU6TGFiZWw1MDQ5OTYwODA=", "url": "https://api.github.com/repos/MagicStack/asyncpg/labels/need%20more%20info", "name": "need more info", "color": "e99695", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-01-07T05:52:40Z", "updated_at": "2019-01-07T23:11:04Z", "closed_at": "2019-01-07T23:11:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.3\r\n* **PostgreSQL version**: 9.6\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: this is local in docker/debian\r\n* **Python version**: 3.6\r\n* **Platform**: debian\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: NA\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Not tried\r\n\r\nI'm trying to upgrade our codebase from using asyncpg 0.15 to 0.18, but our testsuite encounters this issue in asyncpg:\r\n```\r\n        ....\r\n        # Now that types have been resolved, populate the codec pipeline\r\n        # for the statement.\r\n        statement._init_codecs()\r\n    \r\n        if need_reprepare:\r\n            await self._protocol.prepare(\r\n>               stmt_name, query, timeout, state=statement)\r\nE           TypeError: prepare() got an unexpected keyword argument 'state'\r\n\r\n/usr/local/lib/python3.6/site-packages/asyncpg/connection.py:365: TypeError\r\n```\r\n\r\nAs the backtrace shows, the issue seems to be this callsite: https://github.com/MagicStack/asyncpg/blob/master/asyncpg/connection.py#L365", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/396", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/396/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/396/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/396", "id": 394907081, "node_id": "MDU6SXNzdWUzOTQ5MDcwODE=", "number": 396, "title": "invalid length of startup packet", "user": {"login": "francoricci", "id": 29702969, "node_id": "MDQ6VXNlcjI5NzAyOTY5", "avatar_url": "https://avatars1.githubusercontent.com/u/29702969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/francoricci", "html_url": "https://github.com/francoricci", "followers_url": "https://api.github.com/users/francoricci/followers", "following_url": "https://api.github.com/users/francoricci/following{/other_user}", "gists_url": "https://api.github.com/users/francoricci/gists{/gist_id}", "starred_url": "https://api.github.com/users/francoricci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/francoricci/subscriptions", "organizations_url": "https://api.github.com/users/francoricci/orgs", "repos_url": "https://api.github.com/users/francoricci/repos", "events_url": "https://api.github.com/users/francoricci/events{/privacy}", "received_events_url": "https://api.github.com/users/francoricci/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-30T22:44:19Z", "updated_at": "2019-01-05T10:00:11Z", "closed_at": "2019-01-02T15:39:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**: 0.18.2\r\n* **PostgreSQL version**: 9.6.8 \r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: NO\r\n* **Python version**: 3.6.7\r\n* **Platform**: FreeBSD 11.2\r\n* **Do you use pgbouncer?**: NO\r\n* **Did you install asyncpg with pip?**: YES\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: YES\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\n``import asyncio``\r\n``import asyncpg``\r\n``import uvloop``\r\n\r\n``async def run():``\r\n ``conn = await asyncpg.connect(host='127.0.0.1', port='5432', user='root', password='pippo', database='postgres', ssl=None)``\r\n``values = await conn.fetch(\"SELECT * FROM pg_type\")``\r\n``await conn.close()``\r\n\r\n``asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())``\r\n``loop = asyncio.get_event_loop()``\r\n``loop.run_until_complete(run())``\r\n\r\nreturns:\r\n\r\n``asyncpg.exceptions.ConnectionDoesNotExistError: connection was closed in the middle of operation``\r\nand postgresql:\r\n``LOG:  invalid length of startup packet``\r\n\r\nWith previous asyncpg version 0.17.0 all works well. \r\nSee issue #313", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/393", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/393/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/393/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/393", "id": 391685436, "node_id": "MDU6SXNzdWUzOTE2ODU0MzY=", "number": 393, "title": "Unix Domain Socket cannot be accessed", "user": {"login": "HarrySky", "id": 8982851, "node_id": "MDQ6VXNlcjg5ODI4NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/8982851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HarrySky", "html_url": "https://github.com/HarrySky", "followers_url": "https://api.github.com/users/HarrySky/followers", "following_url": "https://api.github.com/users/HarrySky/following{/other_user}", "gists_url": "https://api.github.com/users/HarrySky/gists{/gist_id}", "starred_url": "https://api.github.com/users/HarrySky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HarrySky/subscriptions", "organizations_url": "https://api.github.com/users/HarrySky/orgs", "repos_url": "https://api.github.com/users/HarrySky/repos", "events_url": "https://api.github.com/users/HarrySky/events{/privacy}", "received_events_url": "https://api.github.com/users/HarrySky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-12-17T12:14:27Z", "updated_at": "2018-12-17T13:53:46Z", "closed_at": "2018-12-17T13:53:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.2\r\n* **PostgreSQL version**: 11.1 (official Docker image **postgres:11-alpine**)\r\n* **Python version**: 3.7\r\n* **Platform**: Docker Alpine 3.8\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: Yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: No\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: I don't know, but `uvloop` is used.\r\n\r\nI run PostgreSQL in separate Docker container and use volume to provide Unix Domain socket to Python container. When in Python container I create pool via `asyncpg.create_pool('postgresql://postgres/music?host=/postgres/.s.PGSQL.5432')` no pool is created.\r\n\r\nSocket is created and can be accessed:\r\n```\r\n$ sudo docker run --rm -v music-postgres:/postgres alpine:3.8 ls -al /postgres\r\ntotal 12\r\n drwxrwxr-x    2 postgres postgres      4096 Dec 17 11:38 .\r\n drwxr-xr-x    1 root     root          4096 Dec 17 12:11 ..\r\n srwxrwxrwx    1 postgres postgres         0 Dec 17 11:38 .s.PGSQL.5432\r\n -rw-------    1 postgres postgres        63 Dec 17 11:38 .s.PGSQL.5432.lock\r\n```\r\n\r\nIt seems that in `connect_utils.py` code Unix sockets get normalized into 'localhost' or maybe the problem is with something else? Maybe I should change postgresql URL?\r\n\r\n**UPDATE**: Added files I use\r\n* Dockerfile-postgresql:\r\n```\r\nFROM postgres:11-alpine\r\n\r\nCOPY docker/development/postgres.conf /etc/postgresql/postgres.conf\r\nENV POSTGRES_DB=music\r\nRUN mkdir /postgres\r\n```\r\n\r\n* postgres.conf:\r\n```\r\nlisten_addresses = ''\r\nlog_connections = on\r\n```\r\n\r\n* Dockerfile-starlette:\r\n```\r\nFROM python:3.7-alpine3.8\r\n\r\nRUN apk add --no-cache build-base \\\r\n    && pip3 install --no-cache-dir asyncpg sqlalchemy starlette gunicorn uvicorn \\\r\n    && apk del build-base \\\r\n    && mkdir /gunicorn /music\r\nWORKDIR /music\r\n\r\nCMD gunicorn main:SERVER -k uvicorn.workers.UvicornWorker -b unix:/gunicorn/starlette.sock\r\n```\r\n\r\n* main.py\r\n```\r\nimport asyncio\r\nimport asyncpg\r\nfrom starlette.applications import Starlette\r\n\r\nSERVER: Starlette = Starlette()\r\n\r\nasync def startup():\r\n    pool = await asyncpg.create_pool('postgresql://postgres/music?host=/postgres/.s.PGSQL.5432')\r\n    async with await pool.acquire() as con:\r\n        result = await con.fetch('SELECT 1')\r\n\r\nasyncio.ensure_future(startup())\r\n```\r\n\r\n* development (bash script):\r\n```\r\ndocker volume create --name music-postgres\r\ndocker volume create --name music-gunicorn\r\n\r\ndocker build --pull -f docker/development/Dockerfile-postgresql -t music-postgres:dev .\r\ndocker run --name=music-postgres --restart=always \\\r\n    -v music-postgres:/var/run/postgresql \\\r\n    -d music-postgres:dev -c 'config_file=/etc/postgresql/postgres.conf'\r\n\r\ndocker build --pull -f docker/development/Dockerfile-starlette -t music-starlette:dev .\r\ndocker run --name=music-starlette --restart=always \\\r\n    -v music-postgres:/postgres \\\r\n    -v music-gunicorn:/gunicorn \\\r\n    -v ${PWD}/backend/music:/music \\\r\n    -d music-starlette:dev\r\n```\r\n\r\n**I get this on start:**\r\n```\r\n[...]\r\n    pool = await asyncpg.create_pool('postgresql://postgres/music?host=/postgres/.s.PGSQL.5432')\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 398, in _async__init__\r\n    await self._initialize()\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 415, in _initialize\r\n    await first_ch.connect()\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 125, in connect\r\n    self._con = await self._pool._get_new_connection()\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/pool.py\", line 461, in _get_new_connection\r\n    **self._connect_kwargs)\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/connection.py\", line 1688, in connect\r\n    max_cacheable_statement_size=max_cacheable_statement_size)\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 551, in _connect\r\n    raise last_error\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 543, in _connect\r\n    connection_class=connection_class)\r\n  File \"/usr/local/lib/python3.7/site-packages/asyncpg/connect_utils.py\", line 513, in _connect_addr\r\n    connector, timeout=timeout, loop=loop)\r\n  File \"/usr/local/lib/python3.7/asyncio/tasks.py\", line 416, in wait_for\r\n    return fut.result()\r\n  File \"uvloop/loop.pyx\", line 1821, in create_connection\r\nsocket.gaierror: [Errno -2] Name does not resolve\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/392", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/392/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/392/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/392/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/392", "id": 391439806, "node_id": "MDU6SXNzdWUzOTE0Mzk4MDY=", "number": 392, "title": "Possible to INSERT with prepared statements", "user": {"login": "Gitborg", "id": 25074217, "node_id": "MDQ6VXNlcjI1MDc0MjE3", "avatar_url": "https://avatars2.githubusercontent.com/u/25074217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gitborg", "html_url": "https://github.com/Gitborg", "followers_url": "https://api.github.com/users/Gitborg/followers", "following_url": "https://api.github.com/users/Gitborg/following{/other_user}", "gists_url": "https://api.github.com/users/Gitborg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gitborg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gitborg/subscriptions", "organizations_url": "https://api.github.com/users/Gitborg/orgs", "repos_url": "https://api.github.com/users/Gitborg/repos", "events_url": "https://api.github.com/users/Gitborg/events{/privacy}", "received_events_url": "https://api.github.com/users/Gitborg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-16T06:30:32Z", "updated_at": "2019-12-28T17:52:58Z", "closed_at": "2019-01-02T15:45:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like INSERTs with prepared statements have been overlooked in asyncpg. The only attributes of a PreparedStatement object listed in the asyncpg docs relate to SELECT queries: `cursor`, `fetch`, `fetchrow`, `fetchval` etc. \r\n\r\nHave I missed it somewhere or is this likely to be implemented soon?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/391", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/391/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/391/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/391", "id": 389068504, "node_id": "MDU6SXNzdWUzODkwNjg1MDQ=", "number": 391, "title": "bigint (int64) insert attempt throws \"value out of int32 range\" exception", "user": {"login": "diraven", "id": 108279, "node_id": "MDQ6VXNlcjEwODI3OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/108279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diraven", "html_url": "https://github.com/diraven", "followers_url": "https://api.github.com/users/diraven/followers", "following_url": "https://api.github.com/users/diraven/following{/other_user}", "gists_url": "https://api.github.com/users/diraven/gists{/gist_id}", "starred_url": "https://api.github.com/users/diraven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diraven/subscriptions", "organizations_url": "https://api.github.com/users/diraven/orgs", "repos_url": "https://api.github.com/users/diraven/repos", "events_url": "https://api.github.com/users/diraven/events{/privacy}", "received_events_url": "https://api.github.com/users/diraven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-09T21:54:43Z", "updated_at": "2018-12-09T22:03:58Z", "closed_at": "2018-12-09T22:03:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: asyncpg==0.18.2\r\n* **PostgreSQL version**: PostgreSQL 11.1 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 8.2.1 20180831, 64-bit\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Don't use, reproduced locally.\r\n* **Python version**: Python 3.7.1\r\n* **Platform**:Linux archlinux 4.19.4-arch1-1-ARCH #1 SMP PREEMPT Fri Nov 23 09:06:58 UTC 2018 x86_64 GNU/Linux\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: no, n/a\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: n/a\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n```sql\r\ncreate table mydiscord_guild\r\n(\r\n  id serial not null\r\n    constraint mydiscord_guild_pkey\r\n      primary key,\r\n  discord_id text not null\r\n    constraint mydiscord_guild_uid_key\r\n      unique,\r\n  name text not null\r\n    constraint mydiscord_guild_name_key\r\n      unique,\r\n  trigger varchar(1) not null\r\n);\r\n```\r\n\r\nOn insert attempt I get this error even though the field is bigint and I guess should have been processed by the `int8_encode` instead:\r\n\r\n```\r\nasyncpg.exceptions.DataError: invalid input for query argument $1: 435075722181083147 (value out of int32 range)\r\n```\r\n\r\nPossibly related to https://github.com/MagicStack/asyncpg/issues/316 , but in this case it's not a custom datatype.\r\n\r\nPossibly related to https://github.com/MagicStack/asyncpg/issues/279, but it's not negative.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/390", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/390/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/390/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/390/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/390", "id": 385321607, "node_id": "MDU6SXNzdWUzODUzMjE2MDc=", "number": 390, "title": "How to interpolate arguments into a Postgres LIKE statement?", "user": {"login": "franco-telnyx", "id": 36857508, "node_id": "MDQ6VXNlcjM2ODU3NTA4", "avatar_url": "https://avatars3.githubusercontent.com/u/36857508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/franco-telnyx", "html_url": "https://github.com/franco-telnyx", "followers_url": "https://api.github.com/users/franco-telnyx/followers", "following_url": "https://api.github.com/users/franco-telnyx/following{/other_user}", "gists_url": "https://api.github.com/users/franco-telnyx/gists{/gist_id}", "starred_url": "https://api.github.com/users/franco-telnyx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/franco-telnyx/subscriptions", "organizations_url": "https://api.github.com/users/franco-telnyx/orgs", "repos_url": "https://api.github.com/users/franco-telnyx/repos", "events_url": "https://api.github.com/users/franco-telnyx/events{/privacy}", "received_events_url": "https://api.github.com/users/franco-telnyx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 410393392, "node_id": "MDU6TGFiZWw0MTAzOTMzOTI=", "url": "https://api.github.com/repos/MagicStack/asyncpg/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-28T15:27:43Z", "updated_at": "2018-11-28T15:51:37Z", "closed_at": "2018-11-28T15:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:\r\n* **PostgreSQL version**:\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**:\r\n* **Python version**:\r\n* **Platform**:\r\n* **Do you use pgbouncer?**:\r\n* **Did you install asyncpg with pip?**:\r\n* **If you built asyncpg locally, which version of Cython did you use?**:\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**:\r\n\r\n<!-- Enter your issue details below this comment. -->\r\nI cannot find anywhere how to interpolate an argument into a LIKE condition. Example of what I want to do:\r\n```\r\nLIST_VENDOR_DESTINATION_SETS = \"\"\"\r\nSELECT\r\n    i_destination_set,\r\n    name\r\nFROM\r\n    destination_sets\r\nWHERE\r\n    name LIKE '%[interpolate vendor name here]%'\r\n\"\"\"\r\n```\r\nCurrently I am doing\r\n```\r\nLIST_VENDOR_DESTINATION_SETS = \"\"\"\r\nSELECT\r\n    i_destination_set,\r\n    name\r\nFROM\r\n    destination_sets\r\nWHERE\r\n    name LIKE $1\r\n\"\"\"\r\n```\r\nthen\r\n```\r\nvendor_search_term = f\"%{vendor}%\"\r\n        async with connection_pool.acquire() as conn:\r\n            results = await conn.fetch(LIST_VENDOR_DESTINATION_SETS, vendor_search_term)\r\n```\r\n\r\nBut this seems sloppy and I'd prefer not to be building query pieces in my methods. How can I get that vendor name to get dropped in between the `%` signs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/389", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/389/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/389/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/389", "id": 383489964, "node_id": "MDU6SXNzdWUzODM0ODk5NjQ=", "number": 389, "title": "max_inactive_connection_lifetime does not close connections on unused pool connections", "user": {"login": "albertferras", "id": 7689174, "node_id": "MDQ6VXNlcjc2ODkxNzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7689174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertferras", "html_url": "https://github.com/albertferras", "followers_url": "https://api.github.com/users/albertferras/followers", "following_url": "https://api.github.com/users/albertferras/following{/other_user}", "gists_url": "https://api.github.com/users/albertferras/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertferras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertferras/subscriptions", "organizations_url": "https://api.github.com/users/albertferras/orgs", "repos_url": "https://api.github.com/users/albertferras/repos", "events_url": "https://api.github.com/users/albertferras/events{/privacy}", "received_events_url": "https://api.github.com/users/albertferras/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-22T11:16:46Z", "updated_at": "2019-01-02T17:25:19Z", "closed_at": "2019-01-02T17:25:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "<!--\r\nThank you for reporting an issue/feature request.\r\n\r\nIf this is a feature request, please disregard this template.  If this is\r\na bug report, please answer to the questions below.\r\n\r\nIt will be much easier for us to fix the issue if a test case that reproduces\r\nthe problem is provided, with clear instructions on how to run it.\r\n\r\nThank you!\r\n-->\r\n\r\n* **asyncpg version**:  0.18.2\r\n* **PostgreSQL version**:  ---\r\n* **Do you use a PostgreSQL SaaS?  If so, which?  Can you reproduce\r\n  the issue with a local PostgreSQL install?**: no\r\n* **Python version**: 3.7\r\n* **Platform**: ---\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: ---\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: yes\r\n\r\n<!-- Enter your issue details below this comment. -->\r\n\r\nWhen a pool is created with a `max_inactive_connection_lifetime` defined, it will not close the connections for connections that are never used.\r\nBy looking at the code, the `_setup_inactive_callback` is only called when releasing a connection (that you've previously acquired). Shouldn't this method also be called after every new connection that has been established? \r\n\r\nThis is an issue for my use-case because we init the pool with a bigger `min_size` than what we need until our application cache is filled (after 10min we actually need less connections). If some of the connections were never used, they will stay connected forever and never killed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/388", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/388/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/388/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/388", "id": 379467710, "node_id": "MDU6SXNzdWUzNzk0Njc3MTA=", "number": 388, "title": "asyncpg.exceptions.DataError: invalid input for query argument $1: 'aaa' (an integer is required (got type str))", "user": {"login": "araujoyuri", "id": 3741554, "node_id": "MDQ6VXNlcjM3NDE1NTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3741554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/araujoyuri", "html_url": "https://github.com/araujoyuri", "followers_url": "https://api.github.com/users/araujoyuri/followers", "following_url": "https://api.github.com/users/araujoyuri/following{/other_user}", "gists_url": "https://api.github.com/users/araujoyuri/gists{/gist_id}", "starred_url": "https://api.github.com/users/araujoyuri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/araujoyuri/subscriptions", "organizations_url": "https://api.github.com/users/araujoyuri/orgs", "repos_url": "https://api.github.com/users/araujoyuri/repos", "events_url": "https://api.github.com/users/araujoyuri/events{/privacy}", "received_events_url": "https://api.github.com/users/araujoyuri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-11-10T22:26:00Z", "updated_at": "2018-11-10T23:56:02Z", "closed_at": "2018-11-10T23:49:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.1\r\n* **PostgreSQL version**: 10.5\r\n* **Python version**: 3.7.1\r\n* **Platform**: Manjaro 18.0.0\r\n* **Do you use pgbouncer?**: No\r\n* **Did you install asyncpg with pip?**: I've installed with [Poetry](https://github.com/sdispater/poetry)\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: Yes\r\n\r\nIn my schema I've defined the id as SERIAL, but still asyncpg throws an error when I don't include it on the payload to insert. I've created a [gist](https://gist.github.com/araujoyuri/08a078e898a0b28b23e3c0e24fd0827e) (please forgive my \"workarounds\", it's my first time with async in python :P) with the files relevant to this problem.\r\n\r\nHere's the error stack:\r\n```\r\nFile \"asyncpg/protocol/codecs/base.pyx\", line 192, in asyncpg.protocol.protocol.Codec.encode\r\n  File \"asyncpg/protocol/codecs/base.pyx\", line 103, in asyncpg.protocol.protocol.Codec.encode_scalar\r\n  File \"asyncpg/pgproto/./codecs/int.pyx\", line 46, in asyncpg.pgproto.pgproto.int4_encode\r\nTypeError: an integer is required (got type str)\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/home/yuri/repos/price-alert-web-aiohttp/run.py\", line 10, in <module>\r\n    get_event_loop().run_until_complete(Database.insert('users', list(u)))\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 573, in run_until_complete\r\n    return future.result()\r\n  File \"/home/yuri/repos/price-alert-web-aiohttp/src/common/database.py\", line 50, in insert\r\n    await conn.execute(sql, *data)\r\n  File \"/home/yuri/.cache/pypoetry/virtualenvs/price-alert-web-aiohttp-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 275, in execute\r\n    _, status, _ = await self._execute(query, args, 0, timeout, True)\r\n  File \"/home/yuri/.cache/pypoetry/virtualenvs/price-alert-web-aiohttp-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 1414, in _execute\r\n    query, args, limit, timeout, return_status=return_status)\r\n  File \"/home/yuri/.cache/pypoetry/virtualenvs/price-alert-web-aiohttp-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 1422, in __execute\r\n    return await self._do_execute(query, executor, timeout)\r\n  File \"/home/yuri/.cache/pypoetry/virtualenvs/price-alert-web-aiohttp-py3.7/lib/python3.7/site-packages/asyncpg/connection.py\", line 1444, in _do_execute\r\n    result = await executor(stmt, None)\r\n  File \"asyncpg/protocol/protocol.pyx\", line 175, in bind_execute\r\n  File \"asyncpg/protocol/prepared_stmt.pyx\", line 160, in asyncpg.protocol.protocol.PreparedStatementState._encode_bind_msg\r\nasyncpg.exceptions.DataError: invalid input for query argument $1: 'aaa' (an integer is required (got type str))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/MagicStack/asyncpg/issues/385", "repository_url": "https://api.github.com/repos/MagicStack/asyncpg", "labels_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/385/comments", "events_url": "https://api.github.com/repos/MagicStack/asyncpg/issues/385/events", "html_url": "https://github.com/MagicStack/asyncpg/issues/385", "id": 378477793, "node_id": "MDU6SXNzdWUzNzg0Nzc3OTM=", "number": 385, "title": "Connection not returning to pool after ConnectionDoesNotExistError exception", "user": {"login": "feyukio", "id": 35849723, "node_id": "MDQ6VXNlcjM1ODQ5NzIz", "avatar_url": "https://avatars0.githubusercontent.com/u/35849723?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feyukio", "html_url": "https://github.com/feyukio", "followers_url": "https://api.github.com/users/feyukio/followers", "following_url": "https://api.github.com/users/feyukio/following{/other_user}", "gists_url": "https://api.github.com/users/feyukio/gists{/gist_id}", "starred_url": "https://api.github.com/users/feyukio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feyukio/subscriptions", "organizations_url": "https://api.github.com/users/feyukio/orgs", "repos_url": "https://api.github.com/users/feyukio/repos", "events_url": "https://api.github.com/users/feyukio/events{/privacy}", "received_events_url": "https://api.github.com/users/feyukio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-07T21:31:53Z", "updated_at": "2018-11-10T19:00:48Z", "closed_at": "2018-11-10T18:54:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "* **asyncpg version**: 0.18.1\r\n* **PostgreSQL version**: PostgreSQL 9.6.6 on x86_64-pc-linux-musl, compiled by gcc (Alpine 6.2.1) 6.2.1 20160822, 64-bit and PostgreSQL 9.5\r\n* **Do you use a PostgreSQL SaaS?  If so, which? Can you reproduce\r\n  the issue with a local PostgreSQL install?**: Yes, I can reproduce. AWS and local\r\n* **Python version**: 3.6.6\r\n* **Platform**: Linux\r\n* **Do you use pgbouncer?**: no\r\n* **Did you install asyncpg with pip?**: yes\r\n* **If you built asyncpg locally, which version of Cython did you use?**: no\r\n* **Can the issue be reproduced under both asyncio and\r\n  [uvloop](https://github.com/magicstack/uvloop)?**: didn't try using uvloop\r\n\r\nWhen a connection from a pool is killed from database (asyncpg.exceptions.ConnectionDoesNotExistError), the pool cannot recovery this connection and the pool size will be compromised, reaching zero connections available even though no queries are executing.\r\n\r\nThis can happen other ways besides the ConnectionDoesNotExistError exception.\r\n\r\nThe following code can be used to reproduce this issue.\r\n\r\n```py\r\nimport asyncio\r\nimport asyncpg\r\n\r\n_pool = None\r\n\r\n\r\nasync def connect():\r\n    global _pool\r\n    _pool = await asyncpg.create_pool(\r\n        host=\"localhost\",\r\n        user=\"postgres\",\r\n        password=\"postgres\",\r\n        database=\"postgres\",\r\n        port=5432,\r\n        min_size=0,\r\n        max_size=3\r\n    )\r\n\r\n\r\nasync def fetch(query, *args):\r\n    # Acquire a connection\r\n    async with _pool.acquire() as connection:\r\n        try:\r\n            result = await connection.fetch(query, *args)\r\n            print(\".\")\r\n            return [dict(row) for row in result]\r\n        except asyncpg.exceptions.ConnectionDoesNotExistError:\r\n            print(\"asyncpg.exceptions.ConnectionDoesNotExistError\")\r\n\r\n\r\ndef print_counts():\r\n    print(\"Queue size =\", _pool._queue.qsize())\r\n\r\n\r\nquery = \"select pg_sleep(2);\"\r\nterminate_query = \"select pg_terminate_backend(pid) from pg_stat_activity;\"\r\n\r\n\r\nasync def run():\r\n    await connect()\r\n    for i in range(5):\r\n        futures = [fetch(query) for _ in range(3)]\r\n        await asyncio.wait(futures)\r\n\r\n        print_counts()\r\n        await fetch(terminate_query)\r\n        print_counts()\r\n\r\n\r\ndef main():\r\n    loop = asyncio.get_event_loop()\r\n    try:\r\n        loop.run_until_complete(run())\r\n    finally:\r\n        loop.close()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}]}