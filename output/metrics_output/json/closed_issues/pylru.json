{"total_count": 11, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jlhutch/pylru/issues/29", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/29/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/29/events", "html_url": "https://github.com/jlhutch/pylru/issues/29", "id": 457928170, "node_id": "MDU6SXNzdWU0NTc5MjgxNzA=", "number": 29, "title": "Feature: Allow caching of none hashable types by using id(object) as key", "user": {"login": "daliclass", "id": 29014645, "node_id": "MDQ6VXNlcjI5MDE0NjQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/29014645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daliclass", "html_url": "https://github.com/daliclass", "followers_url": "https://api.github.com/users/daliclass/followers", "following_url": "https://api.github.com/users/daliclass/following{/other_user}", "gists_url": "https://api.github.com/users/daliclass/gists{/gist_id}", "starred_url": "https://api.github.com/users/daliclass/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daliclass/subscriptions", "organizations_url": "https://api.github.com/users/daliclass/orgs", "repos_url": "https://api.github.com/users/daliclass/repos", "events_url": "https://api.github.com/users/daliclass/events{/privacy}", "received_events_url": "https://api.github.com/users/daliclass/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-19T10:18:56Z", "updated_at": "2019-06-22T19:54:50Z", "closed_at": "2019-06-22T19:54:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nI am working with a lot of large numpy.ndarray and posting them over a network. I want to use a LRU cache so that if I make a call with the same numpy.ndarray I will get the same answer. numpy.ndarray take up a lot of memory and are unhashable, so I would need to use ```id(object)``` to identfiy the images.\r\n\r\nI would be happy to do the work to enable some kind of ```id(object)``` mode (or md5 etc) for caching if the feature would be accepted. This is very relevant to my use cases and I imagine would help other people working with large unhashable objects.\r\n\r\nTo be clear this is talking about using @lrudecorator(100, mode=id) or something like that to support caching of large unhashable objects. I can use the current library by interacting with the cache directly to solve my problem but would like to make it even simpler in the future. If above in unclear I will be providing code snippets later on to give more detail to my feature idea.\r\n\r\nLet me know what you think", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/24", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/24/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/24/events", "html_url": "https://github.com/jlhutch/pylru/issues/24", "id": 319884844, "node_id": "MDU6SXNzdWUzMTk4ODQ4NDQ=", "number": 24, "title": "Next release (1.0.10)?", "user": {"login": "spumer", "id": 735150, "node_id": "MDQ6VXNlcjczNTE1MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/735150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spumer", "html_url": "https://github.com/spumer", "followers_url": "https://api.github.com/users/spumer/followers", "following_url": "https://api.github.com/users/spumer/following{/other_user}", "gists_url": "https://api.github.com/users/spumer/gists{/gist_id}", "starred_url": "https://api.github.com/users/spumer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spumer/subscriptions", "organizations_url": "https://api.github.com/users/spumer/orgs", "repos_url": "https://api.github.com/users/spumer/repos", "events_url": "https://api.github.com/users/spumer/events{/privacy}", "received_events_url": "https://api.github.com/users/spumer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-05-03T11:38:56Z", "updated_at": "2018-05-09T04:53:26Z", "closed_at": "2018-05-09T04:53:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you upload new release with improvements to pypi?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/21", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/21/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/21/events", "html_url": "https://github.com/jlhutch/pylru/issues/21", "id": 216264435, "node_id": "MDU6SXNzdWUyMTYyNjQ0MzU=", "number": 21, "title": "cached.keys only return a few keys", "user": {"login": "xjianster", "id": 7235146, "node_id": "MDQ6VXNlcjcyMzUxNDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7235146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xjianster", "html_url": "https://github.com/xjianster", "followers_url": "https://api.github.com/users/xjianster/followers", "following_url": "https://api.github.com/users/xjianster/following{/other_user}", "gists_url": "https://api.github.com/users/xjianster/gists{/gist_id}", "starred_url": "https://api.github.com/users/xjianster/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xjianster/subscriptions", "organizations_url": "https://api.github.com/users/xjianster/orgs", "repos_url": "https://api.github.com/users/xjianster/repos", "events_url": "https://api.github.com/users/xjianster/events{/privacy}", "received_events_url": "https://api.github.com/users/xjianster/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-03-23T01:56:05Z", "updated_at": "2017-05-08T15:50:25Z", "closed_at": "2017-05-08T15:50:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "The function cached.keys returns only partial keys, and many repetitions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/18", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/18/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/18/events", "html_url": "https://github.com/jlhutch/pylru/issues/18", "id": 178508691, "node_id": "MDU6SXNzdWUxNzg1MDg2OTE=", "number": 18, "title": "linked list updates are not thread safe", "user": {"login": "cockcrow", "id": 13964825, "node_id": "MDQ6VXNlcjEzOTY0ODI1", "avatar_url": "https://avatars0.githubusercontent.com/u/13964825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cockcrow", "html_url": "https://github.com/cockcrow", "followers_url": "https://api.github.com/users/cockcrow/followers", "following_url": "https://api.github.com/users/cockcrow/following{/other_user}", "gists_url": "https://api.github.com/users/cockcrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/cockcrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cockcrow/subscriptions", "organizations_url": "https://api.github.com/users/cockcrow/orgs", "repos_url": "https://api.github.com/users/cockcrow/repos", "events_url": "https://api.github.com/users/cockcrow/events{/privacy}", "received_events_url": "https://api.github.com/users/cockcrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-22T02:55:30Z", "updated_at": "2017-05-08T16:14:03Z", "closed_at": "2017-05-08T16:14:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Got error in multi-threading usage.\n\nFound py3 has built-in lru cache. See https://hg.python.org/cpython/file/3.5/Lib/functools.py#l438\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/17", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/17/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/17/events", "html_url": "https://github.com/jlhutch/pylru/issues/17", "id": 128610843, "node_id": "MDU6SXNzdWUxMjg2MTA4NDM=", "number": 17, "title": "optional data for callback?", "user": {"login": "dmischel", "id": 8193393, "node_id": "MDQ6VXNlcjgxOTMzOTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/8193393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dmischel", "html_url": "https://github.com/dmischel", "followers_url": "https://api.github.com/users/dmischel/followers", "following_url": "https://api.github.com/users/dmischel/following{/other_user}", "gists_url": "https://api.github.com/users/dmischel/gists{/gist_id}", "starred_url": "https://api.github.com/users/dmischel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dmischel/subscriptions", "organizations_url": "https://api.github.com/users/dmischel/orgs", "repos_url": "https://api.github.com/users/dmischel/repos", "events_url": "https://api.github.com/users/dmischel/events{/privacy}", "received_events_url": "https://api.github.com/users/dmischel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-25T18:55:41Z", "updated_at": "2016-01-26T22:08:57Z", "closed_at": "2016-01-26T18:42:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I want to use pylru in an application and use the callback option. However, my callback would need additional information in order to execute. I would like to hand that information into the _init_() function as an optional dictionary. The callback would know what to do with it.\n\nIs this feasible or is there already a way to do this that I have missed? \n\nIf this is the wrong place to request a feature (or propose a code mod) please let me know. Thanks,\n\n< david\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/13", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/13/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/13/events", "html_url": "https://github.com/jlhutch/pylru/issues/13", "id": 63935361, "node_id": "MDU6SXNzdWU2MzkzNTM2MQ==", "number": 13, "title": "1.0.8 no longer works when wrapping a class member", "user": {"login": "adq", "id": 322473, "node_id": "MDQ6VXNlcjMyMjQ3Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/322473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adq", "html_url": "https://github.com/adq", "followers_url": "https://api.github.com/users/adq/followers", "following_url": "https://api.github.com/users/adq/following{/other_user}", "gists_url": "https://api.github.com/users/adq/gists{/gist_id}", "starred_url": "https://api.github.com/users/adq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adq/subscriptions", "organizations_url": "https://api.github.com/users/adq/orgs", "repos_url": "https://api.github.com/users/adq/repos", "events_url": "https://api.github.com/users/adq/events{/privacy}", "received_events_url": "https://api.github.com/users/adq/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-03-24T08:31:27Z", "updated_at": "2015-03-24T18:17:15Z", "closed_at": "2015-03-24T18:17:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, with 1.0.6, I could do this:\n\n```\nclass HTTPDecoder(object):\n    @lrudecorator(10000)\n    def device(self, ua):\n        ....\nhttpDecoder = HTTPDecoder()\nprint httpDecoder.device('a string')\n```\n\nWith 1.0.8, I now get this error. I haven't changed anything:\n\n```\nFile \"/usr/local/lib/python2.7/dist-packages/pylru.py\", line 523, in __call__\n    value = self.func(*args, **kwargs)\nTypeError: device() takes exactly 2 arguments (1 given)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/11", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/11/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/11/events", "html_url": "https://github.com/jlhutch/pylru/issues/11", "id": 61274779, "node_id": "MDU6SXNzdWU2MTI3NDc3OQ==", "number": 11, "title": "pylru can't be uninstalled by pip", "user": {"login": "cabiad", "id": 840172, "node_id": "MDQ6VXNlcjg0MDE3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/840172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cabiad", "html_url": "https://github.com/cabiad", "followers_url": "https://api.github.com/users/cabiad/followers", "following_url": "https://api.github.com/users/cabiad/following{/other_user}", "gists_url": "https://api.github.com/users/cabiad/gists{/gist_id}", "starred_url": "https://api.github.com/users/cabiad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cabiad/subscriptions", "organizations_url": "https://api.github.com/users/cabiad/orgs", "repos_url": "https://api.github.com/users/cabiad/repos", "events_url": "https://api.github.com/users/cabiad/events{/privacy}", "received_events_url": "https://api.github.com/users/cabiad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-13T22:20:05Z", "updated_at": "2015-03-28T04:33:42Z", "closed_at": "2015-03-28T04:33:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\n$ virtualenv .\nRunning virtualenv with interpreter /usr/bin/python2\nNew python executable in ./bin/python2\nAlso creating executable in ./bin/python\nInstalling setuptools, pip...done.\n$ bin/pip install pylru\nDownloading/unpacking pylru\n  Downloading pylru-1.0.6.tar.gz\n  Running setup.py (path:/home/chris/play/build/pylru/setup.py) egg_info for package pylru\n\nInstalling collected packages: pylru\n  Running setup.py install for pylru\n\nSuccessfully installed pylru\nCleaning up...\n$ bin/pip uninstall pylru\nCan't uninstall 'pylru'. No files were found to uninstall.\n$ bin/pip freeze\nargparse==1.2.1\npylru==1.0.6\nwsgiref==0.1.2\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/10", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/10/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/10/events", "html_url": "https://github.com/jlhutch/pylru/issues/10", "id": 61273791, "node_id": "MDU6SXNzdWU2MTI3Mzc5MQ==", "number": 10, "title": "lrudecorator overwrites wrapped function's __name__ and __doc__ (doesn't use functools.wraps)", "user": {"login": "cabiad", "id": 840172, "node_id": "MDQ6VXNlcjg0MDE3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/840172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cabiad", "html_url": "https://github.com/cabiad", "followers_url": "https://api.github.com/users/cabiad/followers", "following_url": "https://api.github.com/users/cabiad/following{/other_user}", "gists_url": "https://api.github.com/users/cabiad/gists{/gist_id}", "starred_url": "https://api.github.com/users/cabiad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cabiad/subscriptions", "organizations_url": "https://api.github.com/users/cabiad/orgs", "repos_url": "https://api.github.com/users/cabiad/repos", "events_url": "https://api.github.com/users/cabiad/events{/privacy}", "received_events_url": "https://api.github.com/users/cabiad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-03-13T22:18:12Z", "updated_at": "2015-03-18T20:35:53Z", "closed_at": "2015-03-18T20:35:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "See https://docs.python.org/2/library/functools.html#functools.wraps for details.\n\nThe following ipython session demonstrates the issue:\n\n```\nIn [8]: def s_plain(y):\n   ...:     \"square a number\"\n   ...:     return y * y\n   ...: \n\nIn [9]: s_plain.__doc__\nOut[9]: 'square a number'\n\nIn [10]: s_plain.__name__\nOut[10]: 's_plain'\n\nIn [11]: @lrudecorator(100)\ndef s(x):\n    \"square a number\"\n    return x * x\n   ....: \n\nIn [12]: s.__doc__\n\nIn [13]: s.__name__\nOut[13]: 'wrapped'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/9", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/9/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/9/events", "html_url": "https://github.com/jlhutch/pylru/issues/9", "id": 61266510, "node_id": "MDU6SXNzdWU2MTI2NjUxMA==", "number": 9, "title": "pip install pylru==1.0.6 doesn't actually install version 1.0.6 (was: lrudecorator wrapped functions do not accept keyword args)", "user": {"login": "cabiad", "id": 840172, "node_id": "MDQ6VXNlcjg0MDE3Mg==", "avatar_url": "https://avatars3.githubusercontent.com/u/840172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cabiad", "html_url": "https://github.com/cabiad", "followers_url": "https://api.github.com/users/cabiad/followers", "following_url": "https://api.github.com/users/cabiad/following{/other_user}", "gists_url": "https://api.github.com/users/cabiad/gists{/gist_id}", "starred_url": "https://api.github.com/users/cabiad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cabiad/subscriptions", "organizations_url": "https://api.github.com/users/cabiad/orgs", "repos_url": "https://api.github.com/users/cabiad/repos", "events_url": "https://api.github.com/users/cabiad/events{/privacy}", "received_events_url": "https://api.github.com/users/cabiad/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-13T21:59:49Z", "updated_at": "2015-03-16T18:28:36Z", "closed_at": "2015-03-16T18:28:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\n@lrudecorator(100)\ndef s(x):\n    return x * x\n```\n\n```\nIn [1]: s(1)\nOut[1]: 1\n\nIn [2]: s(x=1)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-7-197169c752a0> in <module>()\n----> 1 s(x=1)\n\nTypeError: wrapped() got an unexpected keyword argument 'x'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/4", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/4/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/4/events", "html_url": "https://github.com/jlhutch/pylru/issues/4", "id": 13139247, "node_id": "MDU6SXNzdWUxMzEzOTI0Nw==", "number": 4, "title": "Support data stores that does not expose a __getitem__/__setitem__ interface.", "user": {"login": "amrali", "id": 764671, "node_id": "MDQ6VXNlcjc2NDY3MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/764671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amrali", "html_url": "https://github.com/amrali", "followers_url": "https://api.github.com/users/amrali/followers", "following_url": "https://api.github.com/users/amrali/following{/other_user}", "gists_url": "https://api.github.com/users/amrali/gists{/gist_id}", "starred_url": "https://api.github.com/users/amrali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amrali/subscriptions", "organizations_url": "https://api.github.com/users/amrali/orgs", "repos_url": "https://api.github.com/users/amrali/repos", "events_url": "https://api.github.com/users/amrali/events{/privacy}", "received_events_url": "https://api.github.com/users/amrali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2013-04-12T21:02:11Z", "updated_at": "2013-04-18T04:08:24Z", "closed_at": "2013-04-18T04:08:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a project where I have to expose a dictionary interface to a data store so that pylru could wrap it. It is not that much of a trouble but it would be nicer and easier to maintain if pylru allowed for generic interface to a data store (e.g., function calls)\n\nI'm willing to submit a pull request for a change like that if you give the green light.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jlhutch/pylru/issues/2", "repository_url": "https://api.github.com/repos/jlhutch/pylru", "labels_url": "https://api.github.com/repos/jlhutch/pylru/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/jlhutch/pylru/issues/2/comments", "events_url": "https://api.github.com/repos/jlhutch/pylru/issues/2/events", "html_url": "https://github.com/jlhutch/pylru/issues/2", "id": 2646149, "node_id": "MDU6SXNzdWUyNjQ2MTQ5", "number": 2, "title": "clear cache for decorated method", "user": {"login": "bielcardona", "id": 1281837, "node_id": "MDQ6VXNlcjEyODE4Mzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1281837?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bielcardona", "html_url": "https://github.com/bielcardona", "followers_url": "https://api.github.com/users/bielcardona/followers", "following_url": "https://api.github.com/users/bielcardona/following{/other_user}", "gists_url": "https://api.github.com/users/bielcardona/gists{/gist_id}", "starred_url": "https://api.github.com/users/bielcardona/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bielcardona/subscriptions", "organizations_url": "https://api.github.com/users/bielcardona/orgs", "repos_url": "https://api.github.com/users/bielcardona/repos", "events_url": "https://api.github.com/users/bielcardona/events{/privacy}", "received_events_url": "https://api.github.com/users/bielcardona/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2011-12-23T10:43:30Z", "updated_at": "2011-12-24T17:38:36Z", "closed_at": "2011-12-24T17:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI am trying to use pylru to cache methods in a class. Say:\n\n``` python\nclass myclass(object):\n    def __init__(self,data):\n        self.data = data\n\n    @lrudecorator(100)\n    def longcomputation(self):\n        #do some \"hard work\" depending on self.data and store results in x\n        print \"I am working hard\"\n        x = self.data\n        return x\n\n    def update(self,newdata):\n        self.data = newdata\n```\n\nNow if I do:\n\n``` python\nobj = myclass(\"mydata\")\nprint obj.longcomputation()\nobj.update(\"mychangeddata\")\nprint obj.longcomputation()\n```\n\nI get\n\n``` python\nI am working hard\nmydata\nmydata\n```\n\nprinted on the console, as it should be.\n\nThe question I have is if there is some way to clear the cached method so that if I do:\n\n``` python\n    def update(self,newdata):\n        self.data = newdata\n        # \"something to clear the cache for longcomputation\"\n```\n\nI get \n\n``` python\nI am working hard\nmydata\nI am working hard\nmynewdata\n```\n", "performed_via_github_app": null, "score": 1.0}]}