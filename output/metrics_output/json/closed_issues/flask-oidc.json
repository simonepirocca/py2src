{"total_count": 36, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/104", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/104/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/104/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/104", "id": 654767997, "node_id": "MDU6SXNzdWU2NTQ3Njc5OTc=", "number": 104, "title": "Add option for `Host: <address>` for token introspection", "user": {"login": "svintit", "id": 44262998, "node_id": "MDQ6VXNlcjQ0MjYyOTk4", "avatar_url": "https://avatars1.githubusercontent.com/u/44262998?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svintit", "html_url": "https://github.com/svintit", "followers_url": "https://api.github.com/users/svintit/followers", "following_url": "https://api.github.com/users/svintit/following{/other_user}", "gists_url": "https://api.github.com/users/svintit/gists{/gist_id}", "starred_url": "https://api.github.com/users/svintit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svintit/subscriptions", "organizations_url": "https://api.github.com/users/svintit/orgs", "repos_url": "https://api.github.com/users/svintit/repos", "events_url": "https://api.github.com/users/svintit/events{/privacy}", "received_events_url": "https://api.github.com/users/svintit/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-07-10T13:04:38Z", "updated_at": "2020-07-23T11:00:23Z", "closed_at": "2020-07-23T11:00:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seems i've come across a problem I cannot solve using flask-oidc.\r\n\r\n```\r\nYou need to make sure that you introspect the token using the same DNS hostname/port as the token issuer. Unfortunately that's a not widely documented \"feature\" of Keycloak.\r\n```\r\n\r\nThe workaround is to add to the introspection request a header defining the `Host: <address>` of the issuer. There is no option to do this in `flask-oidc`. \r\n\r\nThis is defined in OpenID Connect documentation also:\r\n```\r\nPOST \"{base_url}/realms/{realm}/protocol/openid-connect/token/introspect\" HTTP/1.1\r\n  Host: {issuer_url}  # Issuer Request\r\n  Content-Type: application/x-www-form-urlencoded\r\n\r\n  data={\r\n     \"token\": <...>\r\n     \"token_type_hint\": \"access_token\"\r\n     \"client_id\": <...>\r\n     \"client_secret\": <...>\r\n  }\r\n```\r\nhttps://openid.net/specs/openid-connect-basic-1_0.html\r\n\r\nThis could be done by adding a new config variable that is loaded in from Flask. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/100", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/100/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/100/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/100", "id": 613057235, "node_id": "MDU6SXNzdWU2MTMwNTcyMzU=", "number": 100, "title": "No OpenIDConnect method to obtain id_token ?", "user": {"login": "jamesarems", "id": 7669557, "node_id": "MDQ6VXNlcjc2Njk1NTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/7669557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamesarems", "html_url": "https://github.com/jamesarems", "followers_url": "https://api.github.com/users/jamesarems/followers", "following_url": "https://api.github.com/users/jamesarems/following{/other_user}", "gists_url": "https://api.github.com/users/jamesarems/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamesarems/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamesarems/subscriptions", "organizations_url": "https://api.github.com/users/jamesarems/orgs", "repos_url": "https://api.github.com/users/jamesarems/repos", "events_url": "https://api.github.com/users/jamesarems/events{/privacy}", "received_events_url": "https://api.github.com/users/jamesarems/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-06T05:19:59Z", "updated_at": "2020-05-06T05:27:55Z", "closed_at": "2020-05-06T05:27:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nIs there any option to obtain id_token using this tool?  I can get access_token and refresh_token using \r\n\r\n```\r\naccess_token = oidc.get_access_token()\r\nrefresh_token = oidc.get_refresh_token()\r\n```\r\n\r\nBut i didn't find an option for id_token. Is there any way ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/99", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/99/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/99/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/99", "id": 599045212, "node_id": "MDU6SXNzdWU1OTkwNDUyMTI=", "number": 99, "title": "Decorator for validating token", "user": {"login": "npcode15", "id": 25517038, "node_id": "MDQ6VXNlcjI1NTE3MDM4", "avatar_url": "https://avatars0.githubusercontent.com/u/25517038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npcode15", "html_url": "https://github.com/npcode15", "followers_url": "https://api.github.com/users/npcode15/followers", "following_url": "https://api.github.com/users/npcode15/following{/other_user}", "gists_url": "https://api.github.com/users/npcode15/gists{/gist_id}", "starred_url": "https://api.github.com/users/npcode15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npcode15/subscriptions", "organizations_url": "https://api.github.com/users/npcode15/orgs", "repos_url": "https://api.github.com/users/npcode15/repos", "events_url": "https://api.github.com/users/npcode15/events{/privacy}", "received_events_url": "https://api.github.com/users/npcode15/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-04-13T18:12:27Z", "updated_at": "2020-04-13T18:42:56Z", "closed_at": "2020-04-13T18:42:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\n\r\nI would like to know if there is a separate decorator for validating the token?\r\nor is the use of **@auth.oidc_auth** dual purpose?\r\n\r\nLogin and logout with browser works perfectly however, I am not able to test the API using Postman.\r\nSteps\r\n- Logged in (using browser), received the token\r\n- Copied the token to Postman 'Auth' to be used as a 'Bearer'\r\n- Called a resource (API) with '@auth.oidc_auth(default)' decorator - _Postman returned the HTML page as it requires the login process again (probably discarded the access token)_\r\n\r\nPlease let me know. \r\n\r\nThank you.\r\n\r\n--------------\r\nI apologize - Invalid Issue", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/97", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/97/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/97/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/97", "id": 584171738, "node_id": "MDU6SXNzdWU1ODQxNzE3Mzg=", "number": 97, "title": "Doesn't work with Docker and Okta", "user": {"login": "anujkumar93", "id": 13256471, "node_id": "MDQ6VXNlcjEzMjU2NDcx", "avatar_url": "https://avatars0.githubusercontent.com/u/13256471?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anujkumar93", "html_url": "https://github.com/anujkumar93", "followers_url": "https://api.github.com/users/anujkumar93/followers", "following_url": "https://api.github.com/users/anujkumar93/following{/other_user}", "gists_url": "https://api.github.com/users/anujkumar93/gists{/gist_id}", "starred_url": "https://api.github.com/users/anujkumar93/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anujkumar93/subscriptions", "organizations_url": "https://api.github.com/users/anujkumar93/orgs", "repos_url": "https://api.github.com/users/anujkumar93/repos", "events_url": "https://api.github.com/users/anujkumar93/events{/privacy}", "received_events_url": "https://api.github.com/users/anujkumar93/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-19T05:26:56Z", "updated_at": "2020-03-29T22:16:16Z", "closed_at": "2020-03-29T22:15:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "@puiterwijk I have been using Flask-OIDC to integrate Okta authentication with my Flask application. I provided client secrets and redirect URIs for Flask-OIDC setup on Flask side as well as Okta side: 'http://localhost:5000/oidc/callback'. When I run this Flask application on my local using uwsgi, the login flow works fine. It redirects me to Okta and upon entering credentials, it redirects me back to my logged in app.\r\n\r\nBut when I deploy the exact same application to docker, login fails. The error message I get is `dev-xxxx.okta.com redirected you too many times`. I tried debugging by printing all the intermediate values between local and docker webapps, but both seem to be following the exact same flow. After looking at https://devforum.okta.com/t/infinite-loop-in-the-sign-in-page/1207/4 , I added 'http://<docker-ip-address>:5000/oidc/callback' to my OKTA_REDIRECT_URIS. But to no avail. I still get the same issue. \r\n\r\nOne thing that could be the reason here is that when I deploy the application onto docker, my ip address gets forwarded to the docker's IP address. e.g. when I access `http://localhost:5000/` , it is actually forwarding to `http://<docker-ip-address>:<docker-port>/`. Thus, when the `_oidc_callback` is called, after setting the token, it tries to redirect back to the request url, which is `localhost`, but since that gets forwarded to the docker container, it results in triggering reauthentication for some reason. Can somebody please help me with this? Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/90", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/90/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/90/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/90", "id": 482920841, "node_id": "MDU6SXNzdWU0ODI5MjA4NDE=", "number": 90, "title": "ERROR:flask_oidc:ERROR: Unable to get token info", "user": {"login": "asthraa", "id": 2007206, "node_id": "MDQ6VXNlcjIwMDcyMDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2007206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asthraa", "html_url": "https://github.com/asthraa", "followers_url": "https://api.github.com/users/asthraa/followers", "following_url": "https://api.github.com/users/asthraa/following{/other_user}", "gists_url": "https://api.github.com/users/asthraa/gists{/gist_id}", "starred_url": "https://api.github.com/users/asthraa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asthraa/subscriptions", "organizations_url": "https://api.github.com/users/asthraa/orgs", "repos_url": "https://api.github.com/users/asthraa/repos", "events_url": "https://api.github.com/users/asthraa/events{/privacy}", "received_events_url": "https://api.github.com/users/asthraa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T15:09:32Z", "updated_at": "2019-09-10T15:34:07Z", "closed_at": "2019-09-10T15:34:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nI am trying to setup keycloack integration with a simple flask api. I am trying to use https://gist.github.com/thomasdarimont/145dc9aa857b831ff2eff221b79d179a as the reference for setting up simple api. I have seen similar questions on this issue on stack overflow, but I didnt get any solution through these questions. May be some one can help me resolve this issue.\r\n\r\nMy code:\r\n\r\napp.py\r\n\r\n```\r\nimport json\r\nimport logging\r\n\r\nfrom flask import Flask, g\r\nfrom flask_oidc import OpenIDConnect\r\nimport requests\r\n\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\napp = Flask(__name__)\r\napp.config.update({\r\n    'SECRET_KEY': 'SomethingNotEntirelySecret',\r\n    'TESTING': True,\r\n    'DEBUG': True,\r\n    'OIDC_CLIENT_SECRETS': 'client_secrets.json',\r\n    'OIDC_ID_TOKEN_COOKIE_SECURE': False,\r\n    'OIDC_REQUIRE_VERIFIED_EMAIL': False,\r\n    'OIDC_USER_INFO_ENABLED': True,\r\n    'OIDC_OPENID_REALM': 'apiv3-login',\r\n    'OIDC_SCOPES': ['openid', 'email', 'profile'],\r\n    'OIDC_INTROSPECTION_AUTH_METHOD': 'client_secret_post',\r\n    'OIDC_TOKEN_TYPE_HINT': 'access_token'\r\n})\r\n\r\noidc = OpenIDConnect(app)\r\n\r\n\r\n@app.route('/')\r\ndef hello_world():\r\n    if oidc.user_loggedin:\r\n        return ('Hello, %s, <a href=\"/private\">See private</a> '\r\n                '<a href=\"/logout\">Log out</a>') % \\\r\n               oidc.user_getfield('preferred_username')\r\n    else:\r\n        return 'Welcome anonymous, <a href=\"/private\">Log in</a>'\r\n\r\n\r\n@app.route('/api', methods=['POST'])\r\n@oidc.accept_token(require_token=True)\r\ndef hello_api():\r\n    \"\"\"OAuth 2.0 protected API endpoint accessible via AccessToken\"\"\"\r\n    return json.dumps({'hello': 'Welcome %s' % g.oidc_token_info['sub']})\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    \"\"\"Performs local logout by removing the session cookie.\"\"\"\r\n    oidc.logout()\r\n    return 'Hi, you have been logged out! <a href=\"/\">Return</a>'\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, host='0.0.0.0')\r\n```\r\n\r\nclient_secrets.json\r\n\r\n```\r\n{\r\n    \"web\": {\r\n        \"issuer\": \"http://localhost:8080/auth/realms/apiv3\",\r\n        \"auth_uri\": \"http://localhost:8080/auth/realms/apiv3/protocol/openid-connect/auth\",\r\n        \"client_id\": \"apiv3-login\",\r\n        \"client_secret\": \"5551fe75-38c5-435a-a392-a6da6252439e\",\r\n        \"redirect_uris\": [\r\n            \"http://localhost:5000/*\"\r\n        ],\r\n        \"userinfo_uri\": \"http://localhost:8080/auth/realms/apiv3/protocol/openid-connect/userinfo\",\r\n        \"token_uri\": \"http://localhost:8080/auth/realms/apiv3/protocol/openid-connect/token\",\r\n        \"token_introspection_uri\": \"http://localhost:8080/auth/realms/apiv3/protocol/openid-connect/token/introspect\"\r\n    }\r\n}\r\n```\r\nI am trying to get the token using the endpoint(using postman)\r\n\r\nhttp://localhost:8080/auth/realms/apiv3/protocol/openid-connect/token\r\n\r\nwith grant type: password.\r\n\r\nWith the access token I am trying to call localhost:5000/api with authorization header bearer access token from above step. I am not sure what I am doing wrong.\r\n\r\nThe flask error shows ```ERROR:flask_oidc:ERROR: Unable to get token info```. Am I doing anything wrong?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/87", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/87/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/87/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/87", "id": 472888414, "node_id": "MDU6SXNzdWU0NzI4ODg0MTQ=", "number": 87, "title": "How can I unittest with flask-oidc + okta?", "user": {"login": "MartinThoma", "id": 1658117, "node_id": "MDQ6VXNlcjE2NTgxMTc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1658117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MartinThoma", "html_url": "https://github.com/MartinThoma", "followers_url": "https://api.github.com/users/MartinThoma/followers", "following_url": "https://api.github.com/users/MartinThoma/following{/other_user}", "gists_url": "https://api.github.com/users/MartinThoma/gists{/gist_id}", "starred_url": "https://api.github.com/users/MartinThoma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MartinThoma/subscriptions", "organizations_url": "https://api.github.com/users/MartinThoma/orgs", "repos_url": "https://api.github.com/users/MartinThoma/repos", "events_url": "https://api.github.com/users/MartinThoma/events{/privacy}", "received_events_url": "https://api.github.com/users/MartinThoma/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-25T14:09:28Z", "updated_at": "2019-07-29T13:47:24Z", "closed_at": "2019-07-29T13:47:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Flask-login has `LOGIN_DISABLED` ([source](https://flask-login.readthedocs.io/en/latest/)). Is there something similar for flask-oidc?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/68", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/68/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/68/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/68", "id": 375792080, "node_id": "MDU6SXNzdWUzNzU3OTIwODA=", "number": 68, "title": "Key reuse is potentially dangerous", "user": {"login": "nelhage", "id": 16725, "node_id": "MDQ6VXNlcjE2NzI1", "avatar_url": "https://avatars3.githubusercontent.com/u/16725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nelhage", "html_url": "https://github.com/nelhage", "followers_url": "https://api.github.com/users/nelhage/followers", "following_url": "https://api.github.com/users/nelhage/following{/other_user}", "gists_url": "https://api.github.com/users/nelhage/gists{/gist_id}", "starred_url": "https://api.github.com/users/nelhage/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nelhage/subscriptions", "organizations_url": "https://api.github.com/users/nelhage/orgs", "repos_url": "https://api.github.com/users/nelhage/repos", "events_url": "https://api.github.com/users/nelhage/events{/privacy}", "received_events_url": "https://api.github.com/users/nelhage/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-10-31T04:17:39Z", "updated_at": "2018-11-12T09:35:16Z", "closed_at": "2018-11-12T09:35:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "`flask-oidc` creates two JWS signers using the Flask secret key:\r\n\r\nhttps://github.com/puiterwijk/flask-oidc/blob/68767920a5419e45ba5e725bf758587f01a2a265/flask_oidc/__init__.py#L179-L183\r\n\r\nIn addition, Flask itself creates a signer [using the same key].(https://github.com/pallets/flask/blob/7e714bd28b6e96d82b2848b48cf8ff48b517b09b/flask/sessions.py#L330-L332)\r\n\r\nIn general, it's unsafe to reuse a cryptographic key for multiple purposes. The proper construction is to use a [KDF][kdf] like [HKDF][hkdf] to derive separate keys for each application.\r\n\r\nI'm not sure if this is actually exploitable in this case, but if it is, one shape would look like:\r\n- Because each of these signers is signing with an HMAC over the same key, the output of any one of them could be fed back into another, which will then accept the signature, since it's signed using the same key.\r\n- This potentially means that an attacker could e.g. swap the session cookie and the `OIDC_ID_TOKEN_COOKIE_NAME` cookie, which is certainly surprising at best.\r\n\r\nI haven't verified that the outputs are sufficiently compatible for the attack to actually work, but ideally the code wouldn't rely on details of slightly-differing output formats for an important security property.\r\n\r\n[kdf]: https://en.wikipedia.org/wiki/Key_derivation_function\r\n[hkdf]: https://en.wikipedia.org/wiki/HKDF", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/64", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/64/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/64/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/64", "id": 372063023, "node_id": "MDU6SXNzdWUzNzIwNjMwMjM=", "number": 64, "title": "Allow client_secrets as a dictionary", "user": {"login": "stanleykylee", "id": 5145324, "node_id": "MDQ6VXNlcjUxNDUzMjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5145324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stanleykylee", "html_url": "https://github.com/stanleykylee", "followers_url": "https://api.github.com/users/stanleykylee/followers", "following_url": "https://api.github.com/users/stanleykylee/following{/other_user}", "gists_url": "https://api.github.com/users/stanleykylee/gists{/gist_id}", "starred_url": "https://api.github.com/users/stanleykylee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stanleykylee/subscriptions", "organizations_url": "https://api.github.com/users/stanleykylee/orgs", "repos_url": "https://api.github.com/users/stanleykylee/repos", "events_url": "https://api.github.com/users/stanleykylee/events{/privacy}", "received_events_url": "https://api.github.com/users/stanleykylee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-10-19T18:14:25Z", "updated_at": "2018-11-12T09:44:07Z", "closed_at": "2018-11-12T09:44:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently the load_secrets function will always look for a file to open and read. Is there a reason for not allowing this function to load the secrets from a dictionary passed in instead of loading from a file?\r\n\r\nI do not want to save a static file on my root directory with all the secrets. I would like to be able to obtain the secrets programatically and not have to store any secrets on the file system.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/62", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/62/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/62/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/62", "id": 359844309, "node_id": "MDU6SXNzdWUzNTk4NDQzMDk=", "number": 62, "title": "Allow extra parameters when constructing auth_url", "user": {"login": "bsfford", "id": 5040268, "node_id": "MDQ6VXNlcjUwNDAyNjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5040268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bsfford", "html_url": "https://github.com/bsfford", "followers_url": "https://api.github.com/users/bsfford/followers", "following_url": "https://api.github.com/users/bsfford/following{/other_user}", "gists_url": "https://api.github.com/users/bsfford/gists{/gist_id}", "starred_url": "https://api.github.com/users/bsfford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bsfford/subscriptions", "organizations_url": "https://api.github.com/users/bsfford/orgs", "repos_url": "https://api.github.com/users/bsfford/repos", "events_url": "https://api.github.com/users/bsfford/events{/privacy}", "received_events_url": "https://api.github.com/users/bsfford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-09-13T10:54:14Z", "updated_at": "2018-11-12T09:56:56Z", "closed_at": "2018-11-12T09:56:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have no way of easily modifying the extra parameters when constructing the auth_url.\r\n\r\nIn OpenIDConnect::redirect_to_auth_server there is a local variable that adds parameters to the auth url -\r\n`\r\nextra_params = {\r\n            'state': urlsafe_b64encode(json.dumps(state).encode('utf-8')),\r\n }\r\n`\r\n\r\nI currently modify the auth_url via my client_secrets.json, but it would be useful to do this programmatically (e.g. In production I would like to add the parameter prompt=consent but not in development)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/60", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/60/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/60/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/60", "id": 346688799, "node_id": "MDU6SXNzdWUzNDY2ODg3OTk=", "number": 60, "title": "Deprecate this library", "user": {"login": "erip", "id": 2348806, "node_id": "MDQ6VXNlcjIzNDg4MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2348806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erip", "html_url": "https://github.com/erip", "followers_url": "https://api.github.com/users/erip/followers", "following_url": "https://api.github.com/users/erip/following{/other_user}", "gists_url": "https://api.github.com/users/erip/gists{/gist_id}", "starred_url": "https://api.github.com/users/erip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erip/subscriptions", "organizations_url": "https://api.github.com/users/erip/orgs", "repos_url": "https://api.github.com/users/erip/repos", "events_url": "https://api.github.com/users/erip/events{/privacy}", "received_events_url": "https://api.github.com/users/erip/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-01T17:08:48Z", "updated_at": "2020-02-08T23:02:29Z", "closed_at": "2020-02-08T23:02:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Google recently deprecate `oauth2client` in favor of [google-auth](https://google-auth.readthedocs.io/en/latest/). Since this library leans so heavily on the oauth2client, it might be good to deprecate this library or, at the very least, warn of the deprecation of `oauth2client`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/58", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/58/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/58/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/58", "id": 342351046, "node_id": "MDU6SXNzdWUzNDIzNTEwNDY=", "number": 58, "title": "Multiple audiences and not authorized party with list of one audience.", "user": {"login": "TheKigen", "id": 5594004, "node_id": "MDQ6VXNlcjU1OTQwMDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5594004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheKigen", "html_url": "https://github.com/TheKigen", "followers_url": "https://api.github.com/users/TheKigen/followers", "following_url": "https://api.github.com/users/TheKigen/following{/other_user}", "gists_url": "https://api.github.com/users/TheKigen/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheKigen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheKigen/subscriptions", "organizations_url": "https://api.github.com/users/TheKigen/orgs", "repos_url": "https://api.github.com/users/TheKigen/repos", "events_url": "https://api.github.com/users/TheKigen/events{/privacy}", "received_events_url": "https://api.github.com/users/TheKigen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-07-18T14:23:12Z", "updated_at": "2018-11-12T09:58:20Z", "closed_at": "2018-11-12T09:58:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe error is in function _is_id_token_valid().  If the id_token['aud'] is a list of one it treats it as though it was a list of multiple audiences and tries to require the azp field.\r\n\r\nThis needs to be corrected with a check for the len() if aud is a list.\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/56", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/56/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/56/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/56", "id": 332578833, "node_id": "MDU6SXNzdWUzMzI1Nzg4MzM=", "number": 56, "title": "cannot \"get\" on a list - only on a dict", "user": {"login": "scassella", "id": 25677280, "node_id": "MDQ6VXNlcjI1Njc3Mjgw", "avatar_url": "https://avatars2.githubusercontent.com/u/25677280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scassella", "html_url": "https://github.com/scassella", "followers_url": "https://api.github.com/users/scassella/followers", "following_url": "https://api.github.com/users/scassella/following{/other_user}", "gists_url": "https://api.github.com/users/scassella/gists{/gist_id}", "starred_url": "https://api.github.com/users/scassella/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scassella/subscriptions", "organizations_url": "https://api.github.com/users/scassella/orgs", "repos_url": "https://api.github.com/users/scassella/repos", "events_url": "https://api.github.com/users/scassella/events{/privacy}", "received_events_url": "https://api.github.com/users/scassella/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-14T21:57:59Z", "updated_at": "2018-06-14T22:35:57Z", "closed_at": "2018-06-14T22:35:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to initialize flask-oidc in my application, I am seeing this error: \r\n![screen shot 2018-06-14 at 2 54 40 pm](https://user-images.githubusercontent.com/25677280/41440306-eb123176-6fe2-11e8-8abb-5dad4854fcd7.png)\r\n\r\nWhen debugging, I can see in the source code for flask-oidc that the dict recieved from my client_secrets.json file is being converted to a list, then below the code is trying to access 'issuer' from that list.\r\nSince you cannot get key 'issuer' from a list of values, this is breaking the application. \r\n\r\n![screen shot 2018-06-14 at 2 53 01 pm](https://user-images.githubusercontent.com/25677280/41440241-ac6e0efe-6fe2-11e8-8b1c-2b10ad2fbbb6.png)\r\n\r\nThe application is using python 3.6.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/55", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/55/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/55/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/55", "id": 326030394, "node_id": "MDU6SXNzdWUzMjYwMzAzOTQ=", "number": 55, "title": "500 when server redeploys with different secret key", "user": {"login": "bkabrda", "id": 1050061, "node_id": "MDQ6VXNlcjEwNTAwNjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1050061?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkabrda", "html_url": "https://github.com/bkabrda", "followers_url": "https://api.github.com/users/bkabrda/followers", "following_url": "https://api.github.com/users/bkabrda/following{/other_user}", "gists_url": "https://api.github.com/users/bkabrda/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkabrda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkabrda/subscriptions", "organizations_url": "https://api.github.com/users/bkabrda/orgs", "repos_url": "https://api.github.com/users/bkabrda/repos", "events_url": "https://api.github.com/users/bkabrda/events{/privacy}", "received_events_url": "https://api.github.com/users/bkabrda/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-24T09:09:31Z", "updated_at": "2020-01-10T16:57:40Z", "closed_at": "2018-11-12T09:59:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\nbecause of a security incident, I had to replace `SECRET_KEY` of my server (Pagure 4.0.3) using `flask-oidc` 1.4.0. On redeploy with the new secret key, previously logged in users started getting this error:\r\n\r\n```\r\n[Thu May 24 09:00:44.419300 2018] [:error] [pid 31] 2018-05-24 09:00:44,351 [ERROR] flask.app: Exception on /rpms/setup [GET]\r\n[Thu May 24 09:00:44.419316 2018] [:error] [pid 31] Traceback (most recent call last):\r\n[Thu May 24 09:00:44.419318 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 2292, in wsgi_app\r\n[Thu May 24 09:00:44.419320 2018] [:error] [pid 31]     response = self.full_dispatch_request()\r\n[Thu May 24 09:00:44.419322 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\r\n[Thu May 24 09:00:44.419324 2018] [:error] [pid 31]     rv = self.handle_user_exception(e)\r\n[Thu May 24 09:00:44.419326 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 1718, in handle_user_exception\r\n[Thu May 24 09:00:44.419328 2018] [:error] [pid 31]     reraise(exc_type, exc_value, tb)\r\n[Thu May 24 09:00:44.419330 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 1811, in full_dispatch_request\r\n[Thu May 24 09:00:44.419332 2018] [:error] [pid 31]     rv = self.preprocess_request()\r\n[Thu May 24 09:00:44.419333 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask/app.py\", line 2087, in preprocess_request\r\n[Thu May 24 09:00:44.419335 2018] [:error] [pid 31]     rv = func()\r\n[Thu May 24 09:00:44.419337 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask_oidc/__init__.py\", line 406, in _before_request\r\n[Thu May 24 09:00:44.419338 2018] [:error] [pid 31]     self.authenticate_or_redirect()\r\n[Thu May 24 09:00:44.419340 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask_oidc/__init__.py\", line 426, in authenticate_or_redirect\r\n[Thu May 24 09:00:44.419342 2018] [:error] [pid 31]     id_token = self._get_cookie_id_token()\r\n[Thu May 24 09:00:44.419344 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/flask_oidc/__init__.py\", line 352, in _get_cookie_id_token\r\n[Thu May 24 09:00:44.419346 2018] [:error] [pid 31]     return self.cookie_serializer.loads(id_token_cookie)\r\n[Thu May 24 09:00:44.419347 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/itsdangerous.py\", line 795, in loads\r\n[Thu May 24 09:00:44.419349 2018] [:error] [pid 31]     self, s, salt, return_header=True)\r\n[Thu May 24 09:00:44.419351 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/itsdangerous.py\", line 749, in loads\r\n[Thu May 24 09:00:44.419353 2018] [:error] [pid 31]     self.make_signer(salt, self.algorithm).unsign(want_bytes(s)),\r\n[Thu May 24 09:00:44.419354 2018] [:error] [pid 31]   File \"/usr/lib/python2.7/site-packages/itsdangerous.py\", line 374, in unsign\r\n[Thu May 24 09:00:44.419356 2018] [:error] [pid 31]     payload=value)\r\n[Thu May 24 09:00:44.419358 2018] [:error] [pid 31] BadSignature: Signature 'o3c13YeSK_1_Mqrf9t7HoCi-tSXlkCBl6fW2JC0RHA8' does not match\r\n```\r\n\r\nUsers who weren't logged in previously could access the server and log in just fine. I think this error should be caught by flask-oidc and user logged out as consequence of it. Does that make sense?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/54", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/54/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/54/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/54", "id": 320815920, "node_id": "MDU6SXNzdWUzMjA4MTU5MjA=", "number": 54, "title": "\"No module named flask.ext\"", "user": {"login": "PJaros", "id": 1235182, "node_id": "MDQ6VXNlcjEyMzUxODI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1235182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PJaros", "html_url": "https://github.com/PJaros", "followers_url": "https://api.github.com/users/PJaros/followers", "following_url": "https://api.github.com/users/PJaros/following{/other_user}", "gists_url": "https://api.github.com/users/PJaros/gists{/gist_id}", "starred_url": "https://api.github.com/users/PJaros/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PJaros/subscriptions", "organizations_url": "https://api.github.com/users/PJaros/orgs", "repos_url": "https://api.github.com/users/PJaros/repos", "events_url": "https://api.github.com/users/PJaros/events{/privacy}", "received_events_url": "https://api.github.com/users/PJaros/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-05-07T13:59:52Z", "updated_at": "2018-09-04T16:54:18Z", "closed_at": "2018-09-04T16:54:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [documentation ](http://flask-oidc.readthedocs.io/en/latest/)  and the [code examples](https://github.com/puiterwijk/flask-oidc/blob/master/example.py) direct me to write:\r\n\r\n    from flask.ext.oidc import OpenIDConnect\r\n\r\nWith flask-oidc == 1.4.0 this will produce the error `ModuleNotFoundError: No module named 'flask.ext'`\r\n\r\nIt appears one needs to write\r\n\r\n    from flask_oidc import OpenIDConnect\r\n\r\ninstead.\r\n\r\nPlease let me emphasize that as a newbie to python-flask and oidc it is especially frustrating to have introducing tutorial code giving errors like this :P ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/52", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/52/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/52/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/52", "id": 310268963, "node_id": "MDU6SXNzdWUzMTAyNjg5NjM=", "number": 52, "title": "Issue with custom certification authority", "user": {"login": "njordr", "id": 4282925, "node_id": "MDQ6VXNlcjQyODI5MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/4282925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/njordr", "html_url": "https://github.com/njordr", "followers_url": "https://api.github.com/users/njordr/followers", "following_url": "https://api.github.com/users/njordr/following{/other_user}", "gists_url": "https://api.github.com/users/njordr/gists{/gist_id}", "starred_url": "https://api.github.com/users/njordr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/njordr/subscriptions", "organizations_url": "https://api.github.com/users/njordr/orgs", "repos_url": "https://api.github.com/users/njordr/repos", "events_url": "https://api.github.com/users/njordr/events{/privacy}", "received_events_url": "https://api.github.com/users/njordr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-03-31T20:17:58Z", "updated_at": "2019-06-23T19:42:25Z", "closed_at": "2018-11-12T10:10:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\r\n\r\nflask-oidc==1.3.0\r\npython 3.6.5\r\nflask 0.12.2\r\nubuntu 16.4.3\r\n\r\nI setup everything to login with keycloak. Everything worked as expected if run against keycloak over HTTP.\r\n\r\nThen I configured keycloak over HTTPS with a certificate created from a self signed CA:\r\n- flask redirect the browser to keycloak (no SSL issue because I imported the custom CA on my laptop)\r\n- I can do the login phase on keycloak\r\n- keycloak redirect the browser to flask (/oidc_callback)\r\n- flask return http code 500, error:\r\n```\r\n::ffff:172.18.0.11 - - [2018-03-31 21:19:23] \"GET / HTTP/1.1\" 302 2133 0.031266\r\nTraceback (most recent call last):\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/gevent/pywsgi.py\", line 935, in handle_one_response\r\n    self.run_application()\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/gevent/pywsgi.py\", line 908, in run_application\r\n    self.result = self.application(self.environ, self.start_response)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1997, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1985, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1540, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1982, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1614, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1517, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/_compat.py\", line 33, in reraise\r\n    raise value\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1612, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask/app.py\", line 1598, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/flask_oidc/__init__.py\", line 650, in _oidc_callback\r\n    credentials = flow.step2_exchange(code)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/oauth2client/_helpers.py\", line 133, in positional_wrapper\r\n    return wrapped(*args, **kwargs)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/oauth2client/client.py\", line 2054, in step2_exchange\r\n    http, self.token_uri, method='POST', body=body, headers=headers)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/oauth2client/transport.py\", line 282, in request\r\n    connection_type=connection_type)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/httplib2/__init__.py\", line 1514, in request\r\n    (response, content) = self._request(conn, authority, uri, request_uri, method, body, headers, redirections, cachekey)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/httplib2/__init__.py\", line 1264, in _request\r\n    (response, content) = self._conn_request(conn, request_uri, method, body, headers)\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/httplib2/__init__.py\", line 1187, in _conn_request\r\n    conn.connect()\r\n  File \"/root/.virtualenvs/spy-registry-kjDCNykl/lib/python3.6/site-packages/httplib2/__init__.py\", line 1013, in connect\r\n    self.sock = self._context.wrap_socket(sock, server_hostname=self.host)\r\n  File \"/opt/python36/lib/python3.6/ssl.py\", line 407, in wrap_socket\r\n  _context=self, _session=session)\r\n File \"/opt/python36/lib/python3.6/ssl.py\", line 814, in __init__\r\n   self.do_handshake()\r\n File \"/opt/python36/lib/python3.6/ssl.py\", line 1068, in do_handshake\r\n   self._sslobj.do_handshake()\r\n File \"/opt/python36/lib/python3.6/ssl.py\", line 689, in do_handshake\r\n   self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:833)\r\nSat Mar 31 21:19:23 2018 {'REMOTE_ADDR': '::ffff:172.18.0.11', 'REMOTE_PORT': '46558', 'HTTP_HOST': '10.100.100.10:6000', (hidden keys: 30)} failed with SSLError\r\n```\r\nI suppose the problem is in these rows (`flask_oidc/__init__.py`, method `_oidc_callback`):\r\n```\r\n        # make a request to IdP to exchange the auth code for OAuth credentials \r\n        flow = self._flow_for_request()                                         \r\n        credentials = flow.step2_exchange(code)                                 \r\n        id_token = credentials.id_token \r\n```\r\n\r\nI think flask tries to communicate with keycloak and the SSL handshake fails.\r\n\r\nCustom CA cert is imported in system ca store where flask runs.\r\n\r\nI tried to use the following env vars:\r\n- REQUESTS_CA_BUNDLE\r\n- PYTHONHTTPSVERIFY\r\n- SSL_CERT_DIR\r\n- SSL_CERT_FILE\r\n\r\nbut no way to get rid of the issue.\r\n\r\nI tried to follow the code, but I missed myself in it.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/50", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/50/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/50/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/50", "id": 301816886, "node_id": "MDU6SXNzdWUzMDE4MTY4ODY=", "number": 50, "title": "access_token and resource_server", "user": {"login": "ashic", "id": 565991, "node_id": "MDQ6VXNlcjU2NTk5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/565991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashic", "html_url": "https://github.com/ashic", "followers_url": "https://api.github.com/users/ashic/followers", "following_url": "https://api.github.com/users/ashic/following{/other_user}", "gists_url": "https://api.github.com/users/ashic/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashic/subscriptions", "organizations_url": "https://api.github.com/users/ashic/orgs", "repos_url": "https://api.github.com/users/ashic/repos", "events_url": "https://api.github.com/users/ashic/events{/privacy}", "received_events_url": "https://api.github.com/users/ashic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-02T16:05:14Z", "updated_at": "2018-11-12T10:08:19Z", "closed_at": "2018-11-12T10:08:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "For access_token based API calls, there's no way if getting any information, as get_access_token uses the sub of the id_token. If a user's not logged in (e.g. API call with Bearer token), then it blows up. Looking up the access token from the header, and passing it to oidc._get_token_info(token) does introspect and give the token details though. Is there something wrong with this approach? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/49", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/49/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/49/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/49", "id": 301778899, "node_id": "MDU6SXNzdWUzMDE3Nzg4OTk=", "number": 49, "title": "Issues with how basic auth is being done when in Python 3", "user": {"login": "ashic", "id": 565991, "node_id": "MDQ6VXNlcjU2NTk5MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/565991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashic", "html_url": "https://github.com/ashic", "followers_url": "https://api.github.com/users/ashic/followers", "following_url": "https://api.github.com/users/ashic/following{/other_user}", "gists_url": "https://api.github.com/users/ashic/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashic/subscriptions", "organizations_url": "https://api.github.com/users/ashic/orgs", "repos_url": "https://api.github.com/users/ashic/repos", "events_url": "https://api.github.com/users/ashic/events{/privacy}", "received_events_url": "https://api.github.com/users/ashic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-02T14:13:32Z", "updated_at": "2018-11-12T10:15:00Z", "closed_at": "2018-11-12T10:15:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm seeing a problem anywhere this library is using client secret basic as the auth mechanism. The issue boils down to:\r\n\r\n```\r\n bas = 'foo:bar'\r\n bytes = bytearray(bas, 'utf-8')\r\n s = 'Basic %s' % b64encode(bytes)\r\n s\r\n\"Basic b'Zm9vOmJhcg=='\"\r\n s2 = 'Basic %s' % b64encode(bytes).decode('utf-8')\r\n s2\r\n'Basic Zm9vOmJhcg=='\r\n```\r\nIn python 3.6.4, serializing bytes is outputting b'actual_value', which is then failing authentication. Adding a .decode('utf-8') results in a string, and the b'' isn't added anymore. This doesn't manifest in python 2. \r\n\r\nThe following works in both python 2 and 3:\r\n\r\n```\r\n bas = 'foo:bar'\r\n bytes = bytearray(bas, 'utf-8')\r\n s = str('Basic %s' % b64encode(bytes).decode('utf-8'))\r\n s\r\n```\r\nWould this be something you're willing to incorporate? I can get a PR ready for this if so. (I think this affects https://github.com/puiterwijk/flask-oidc/issues/44 as well).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/47", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/47/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/47/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/47", "id": 293641721, "node_id": "MDU6SXNzdWUyOTM2NDE3MjE=", "number": 47, "title": "The token is not refreshed after about 72 minutes", "user": {"login": "abompard", "id": 95780, "node_id": "MDQ6VXNlcjk1Nzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/95780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abompard", "html_url": "https://github.com/abompard", "followers_url": "https://api.github.com/users/abompard/followers", "following_url": "https://api.github.com/users/abompard/following{/other_user}", "gists_url": "https://api.github.com/users/abompard/gists{/gist_id}", "starred_url": "https://api.github.com/users/abompard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abompard/subscriptions", "organizations_url": "https://api.github.com/users/abompard/orgs", "repos_url": "https://api.github.com/users/abompard/repos", "events_url": "https://api.github.com/users/abompard/events{/privacy}", "received_events_url": "https://api.github.com/users/abompard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-01T18:47:06Z", "updated_at": "2018-11-12T10:16:57Z", "closed_at": "2018-11-12T10:16:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if it's the expected behaviour or not...\r\nI have this flask app (Fedora Hubs) that is designed to be left open for a while and auto-refreshes the page contents. To avoid the user being disconnected, I have setup a call to a `/ping` URL that the Javascript makes every minute. This `/ping` url is not decorated, but since it's inside the Flask app and flask_oidc is used, it should benefit from the `before_request` hook that is automatically setup.\r\n\r\nThis hook calls `authenticate_or_redirect()` which should automatically refresh the OIDC token using the refresh token, except it apparently never happens, or does not work. I'll try to print some stuff to see what's wrong here.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/36", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/36/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/36/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/36", "id": 237370839, "node_id": "MDU6SXNzdWUyMzczNzA4Mzk=", "number": 36, "title": "Provide API to retrieve access_token for calling backend services", "user": {"login": "thomasdarimont", "id": 314690, "node_id": "MDQ6VXNlcjMxNDY5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/314690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasdarimont", "html_url": "https://github.com/thomasdarimont", "followers_url": "https://api.github.com/users/thomasdarimont/followers", "following_url": "https://api.github.com/users/thomasdarimont/following{/other_user}", "gists_url": "https://api.github.com/users/thomasdarimont/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasdarimont/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasdarimont/subscriptions", "organizations_url": "https://api.github.com/users/thomasdarimont/orgs", "repos_url": "https://api.github.com/users/thomasdarimont/repos", "events_url": "https://api.github.com/users/thomasdarimont/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasdarimont/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-20T23:13:07Z", "updated_at": "2017-06-20T23:15:04Z", "closed_at": "2017-06-20T23:15:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the [docs](http://flask-oidc.readthedocs.io/en/latest/) there seems to be no way to get a hand at the `access_token` of the current user. \r\n\r\nIt would be very helpful if flask-oidc would provide a easy way to retrieve an `access_token` for the current user to make requests to other services.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/35", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/35/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/35/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/35", "id": 237366096, "node_id": "MDU6SXNzdWUyMzczNjYwOTY=", "number": 35, "title": "Token introspection uses a wrong value for token_type_hint", "user": {"login": "thomasdarimont", "id": 314690, "node_id": "MDQ6VXNlcjMxNDY5MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/314690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasdarimont", "html_url": "https://github.com/thomasdarimont", "followers_url": "https://api.github.com/users/thomasdarimont/followers", "following_url": "https://api.github.com/users/thomasdarimont/following{/other_user}", "gists_url": "https://api.github.com/users/thomasdarimont/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasdarimont/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasdarimont/subscriptions", "organizations_url": "https://api.github.com/users/thomasdarimont/orgs", "repos_url": "https://api.github.com/users/thomasdarimont/repos", "events_url": "https://api.github.com/users/thomasdarimont/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasdarimont/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-20T22:43:37Z", "updated_at": "2017-09-27T18:47:20Z", "closed_at": "2017-09-27T18:47:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `_get_token_info`method of the `OpenIDConnect` class currently uses 'Bearer' as \r\nthe value for the `token_type_hint` parameter.\r\nSee: https://github.com/puiterwijk/flask-oidc/blob/b5c9c1e2128e4d56e0457b431d5b0dbbac58e2d3/flask_oidc/__init__.py#L748\r\n\r\nAccording to the spec, only `access_token` or `refresh_token` are allowed as values for the `token_type_hint` parameter.\r\n\r\nSee:\r\nhttps://tools.ietf.org/html/rfc7662\r\n\r\n> Values for this field are defined in the \"OAuth Token Type Hints\" registry defined\r\n> in OAuth Token Revocation [RFC7009].\r\n\r\nThe `typ` field in the JWT must be mapped to the following `token_type_hint` values:\r\n* typ: Bearer --> access_token\r\n* typ: Refresh --> refresh_token\r\n\r\nAnother option may be to not set the `token_type_hint` parameter at all.\r\n\r\nSee also:\r\nhttps://connect2id.com/products/server/docs/api/token-introspection\r\n\r\nI stumbled upon this issue whilst trying to use [Keycloak](http://www.keycloak.org/) in combination with flask-oidc. When I send the token info request without the `token_type_hint` parameter (by patching the flask-oidc lib) then the token info can be retrieved from Keycloak `token_introspection_endpoint`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/32", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/32/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/32/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/32", "id": 228666547, "node_id": "MDU6SXNzdWUyMjg2NjY1NDc=", "number": 32, "title": "State crashes due bad url encoding", "user": {"login": "houmie", "id": 1832933, "node_id": "MDQ6VXNlcjE4MzI5MzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1832933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/houmie", "html_url": "https://github.com/houmie", "followers_url": "https://api.github.com/users/houmie/followers", "following_url": "https://api.github.com/users/houmie/following{/other_user}", "gists_url": "https://api.github.com/users/houmie/gists{/gist_id}", "starred_url": "https://api.github.com/users/houmie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/houmie/subscriptions", "organizations_url": "https://api.github.com/users/houmie/orgs", "repos_url": "https://api.github.com/users/houmie/repos", "events_url": "https://api.github.com/users/houmie/events{/privacy}", "received_events_url": "https://api.github.com/users/houmie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-05-15T10:07:48Z", "updated_at": "2017-09-27T19:02:06Z", "closed_at": "2017-09-27T19:02:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "```Illegal character in query at index 42: http://localhost:5000/oidc_callback?state={\"csrf_token\": \"OaYJMU9HSJVpZyJoJMcXCtwgQAG2xxx/\", \"destination\": \"eyJhbGciOiJIUzxxx.Imh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9wcml2YXRlIg.hjUDDvxxxEZpV5ILsdNvealTfdDUgoYPflpxxxupMRQ\"}```\r\n\r\nThe method `redirect_to_auth_server` where it does `extra_params=urlencode(extra_params)`, is not working as expected.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/31", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/31/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/31/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/31", "id": 225243450, "node_id": "MDU6SXNzdWUyMjUyNDM0NTA=", "number": 31, "title": "OIDC id token cookie path set to / and unconfigurable", "user": {"login": "leeyc0", "id": 2221335, "node_id": "MDQ6VXNlcjIyMjEzMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2221335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeyc0", "html_url": "https://github.com/leeyc0", "followers_url": "https://api.github.com/users/leeyc0/followers", "following_url": "https://api.github.com/users/leeyc0/following{/other_user}", "gists_url": "https://api.github.com/users/leeyc0/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeyc0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeyc0/subscriptions", "organizations_url": "https://api.github.com/users/leeyc0/orgs", "repos_url": "https://api.github.com/users/leeyc0/repos", "events_url": "https://api.github.com/users/leeyc0/events{/privacy}", "received_events_url": "https://api.github.com/users/leeyc0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-29T08:40:13Z", "updated_at": "2017-09-27T18:51:36Z", "closed_at": "2017-09-27T18:51:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am deploying my testing OIDC webapp which is mounted to /oidedemo in uwsgi, but I found that the OIDC id token cookie is set to / instead of /oidcdemo. \r\n\r\nAs per flask [Response.set_cookie](http://flask.pocoo.org/docs/0.12/api/#response-objects), if \"path\" is not set it default to /, which I believe it's unreasonable for privacy and security. (I have several independent application running on each server, and it's better that every application cannot read other's cookies)\r\n\r\nI believe flask-oidc should let the user to configure cookie path instead of missing it entirely.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/30", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/30/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/30/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/30", "id": 223847887, "node_id": "MDU6SXNzdWUyMjM4NDc4ODc=", "number": 30, "title": "flask-oidc expects the openid scope to be requested, but doesn't handle when it's not", "user": {"login": "jeremycline", "id": 1977525, "node_id": "MDQ6VXNlcjE5Nzc1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1977525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremycline", "html_url": "https://github.com/jeremycline", "followers_url": "https://api.github.com/users/jeremycline/followers", "following_url": "https://api.github.com/users/jeremycline/following{/other_user}", "gists_url": "https://api.github.com/users/jeremycline/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremycline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremycline/subscriptions", "organizations_url": "https://api.github.com/users/jeremycline/orgs", "repos_url": "https://api.github.com/users/jeremycline/repos", "events_url": "https://api.github.com/users/jeremycline/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremycline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-04-24T14:55:49Z", "updated_at": "2017-09-27T18:53:59Z", "closed_at": "2017-09-27T18:53:59Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Flask-OIDC expects the [id_token to not be None](https://github.com/puiterwijk/flask-oidc/blob/master/flask_oidc/__init__.py#L571), but it _will_ be None if the openid scope isn't requested.\r\n\r\nNo helpful exception is raised when this occurs (it results in a AttributeError since NoneType doesn't have ``get``). It would be much better to explicitly handle the error and raise an exception notifying the developer of their error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/29", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/29/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/29/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/29", "id": 222746370, "node_id": "MDU6SXNzdWUyMjI3NDYzNzA=", "number": 29, "title": "No OpenIDConnect method to obtain access/refresh token?", "user": {"login": "leeyc0", "id": 2221335, "node_id": "MDQ6VXNlcjIyMjEzMzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2221335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leeyc0", "html_url": "https://github.com/leeyc0", "followers_url": "https://api.github.com/users/leeyc0/followers", "following_url": "https://api.github.com/users/leeyc0/following{/other_user}", "gists_url": "https://api.github.com/users/leeyc0/gists{/gist_id}", "starred_url": "https://api.github.com/users/leeyc0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leeyc0/subscriptions", "organizations_url": "https://api.github.com/users/leeyc0/orgs", "repos_url": "https://api.github.com/users/leeyc0/repos", "events_url": "https://api.github.com/users/leeyc0/events{/privacy}", "received_events_url": "https://api.github.com/users/leeyc0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-04-19T13:54:13Z", "updated_at": "2017-09-27T19:30:58Z", "closed_at": "2017-09-27T19:30:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "It appears that OpenIDConnect has no object method to obtain access/refresh token. The only way I can figure out appears to be getting the credentials from credentials_store:\r\n\r\n```\r\noidc = OpenIDConnect()\r\n(...code validating/obtaining id_token...)\r\nsub = oidc.user_getfield(\"sub\")\r\ncredentials = oidc.credentials_store[sub]\r\naccess_token = credentials[\"access_token\"]\r\nrefresh_token = credentials[\"refresh_token\"]\r\n```\r\n\r\nI believe flask-oidc should provide method to obtain access/refresh token easily.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/25", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/25/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/25/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/25", "id": 211310461, "node_id": "MDU6SXNzdWUyMTEzMTA0NjE=", "number": 25, "title": "Make JSON rendering configurable for error responses", "user": {"login": "ncoghlan", "id": 1026649, "node_id": "MDQ6VXNlcjEwMjY2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1026649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncoghlan", "html_url": "https://github.com/ncoghlan", "followers_url": "https://api.github.com/users/ncoghlan/followers", "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}", "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions", "organizations_url": "https://api.github.com/users/ncoghlan/orgs", "repos_url": "https://api.github.com/users/ncoghlan/repos", "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}", "received_events_url": "https://api.github.com/users/ncoghlan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-03-02T07:26:02Z", "updated_at": "2017-03-14T09:10:41Z", "closed_at": "2017-03-14T09:10:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Combining flask-oidc with Flask-RESTful for Anitya, we've run into a problem where the error responses that flask-oidc pre-renders to JSON strings are then rendered *again* as encoded JSON text responses by Flask-RESTful: https://github.com/release-monitoring/anitya/issues/443\r\n\r\nThe lowest impact solution that occurred to me is to have `accept_token` accept an extra parameter (defaulting to `json.dumps`) that defines how the error rendering happens.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/24", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/24/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/24/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/24", "id": 209967400, "node_id": "MDU6SXNzdWUyMDk5Njc0MDA=", "number": 24, "title": "Internal server error from Ipsilon when calling user_getfield()", "user": {"login": "ncoghlan", "id": 1026649, "node_id": "MDQ6VXNlcjEwMjY2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1026649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncoghlan", "html_url": "https://github.com/ncoghlan", "followers_url": "https://api.github.com/users/ncoghlan/followers", "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}", "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions", "organizations_url": "https://api.github.com/users/ncoghlan/orgs", "repos_url": "https://api.github.com/users/ncoghlan/repos", "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}", "received_events_url": "https://api.github.com/users/ncoghlan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-24T06:05:34Z", "updated_at": "2017-02-24T11:23:59Z", "closed_at": "2017-02-24T11:13:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Working on Anitya's OIDC integration, I'm sending the access token to the server as part of the request's query string. The token validation decorator correctly finds it there, and sets the flask global `g.oidc_token_info`. However, the global that the rest of flask-oidc is looking for is `g.oidc_id_token`, and it never checks `g.oidc_token_info` at all (even as a fallback), so I need to pass the access token explictly to the API as follows: `APP.oidc.user_getfield('user_id', access_token)`.\r\n\r\n`access_token` is retrieved from the request using flask-reqparse:\r\n\r\n    _BASE_ARG_PARSER = reqparse.RequestParser(trim=True, bundle_errors=True)\r\n    _BASE_ARG_PARSER.add_argument('access_token', type=str)\r\n\r\nAnd then in the request itself, the initial parser is created via `_BASE_ARG_PARSER.copy()`\r\n\r\nBut when I do that, the call to `user_getfield` fails with the following traceback:\r\n\r\n```\r\n  File \"/home/ncoghlan/fedoradevel/anitya/anitya/api_v2.py\", line 65, in post\r\n    user_id=APP.oidc.user_getfield('user_id', access_token),\r\n  File \"/home/ncoghlan/.virtualenvs/anitya/lib/python3.5/site-packages/flask_oidc/__init__.py\", line 167, in user_getfield\r\n    info = self.user_getinfo([field], access_token)\r\n  File \"/home/ncoghlan/.virtualenvs/anitya/lib/python3.5/site-packages/flask_oidc/__init__.py\", line 196, in user_getinfo\r\n    all_info = self._retrieve_userinfo(access_token)\r\n  File \"/home/ncoghlan/.virtualenvs/anitya/lib/python3.5/site-packages/flask_oidc/__init__.py\", line 241, in _retrieve_userinfo\r\n    info = _json_loads(content)\r\n  File \"/home/ncoghlan/.virtualenvs/anitya/lib/python3.5/site-packages/flask_oidc/__init__.py\", line 52, in _json_loads\r\n    return json.loads(content)\r\n  File \"/usr/lib64/python3.5/json/__init__.py\", line 319, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/usr/lib64/python3.5/json/decoder.py\", line 339, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/usr/lib64/python3.5/json/decoder.py\", line 357, in raw_decode\r\n    raise JSONDecodeError(\"Expecting value\", s, err.value) from None\r\njson.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\r\n```\r\n\r\nThe debug logs show the following response from Ipsilon:\r\n\r\n```\r\nflask_oidc: DEBUG: Retrieved user info: b'<!DOCTYPE html>\\n<!--[if IE 8]><html class=\"ie8 login-pf\"><![endif]-->\\n<!--[if gt IE 8]><!-->\\n<html class=\"login-pf\">\\n<!--<![endif]-->\\n  <head>\\n    <title>Internal Error</title>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <link href=\"/ui/css/ipsilon.css\" rel=\"stylesheet\" media=\"screen, print\">\\n    <link href=\"/ui/css/styles.css\" rel=\"stylesheet\" media=\"screen, print\">\\n  </head>\\n  <body>\\n    <a href=\"/\" id=\"badge\" tabindex=\"-1\">\\n      <img src=\"/ui/img/logo.svg\" alt=\"Ipsilon IdP\" />\\n    </a>\\n    <div class=\"container\">\\n      <div class=\"row\">\\n        <div class=\"col-sm-12\">\\n          <div id=\"brand\">\\n            <img src=\"/ui/img/brand-lg.png\" alt=\"Ipsilon\">\\n          </div>\\n        </div>\\n        \\n<div class=\"col-sm-12\">\\n  <h1>500 - Internal Server Error</h1>\\n  \\n    <p>Ipsilon encountered an unexpected internal error while trying to\\n       fulfill your request.</p>\\n  \\n  <p>Please retry again.</p>\\n  <p>If the error persists, contact the server administrator to resolve\\n     the problem.</p>\\n</div>\\n\\n      </div>\\n    </div>\\n  </body>\\n</html>'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/23", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/23/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/23/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/23", "id": 209247418, "node_id": "MDU6SXNzdWUyMDkyNDc0MTg=", "number": 23, "title": "add documentation for usage with custom identity provider", "user": {"login": "dtenenba", "id": 2286826, "node_id": "MDQ6VXNlcjIyODY4MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2286826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtenenba", "html_url": "https://github.com/dtenenba", "followers_url": "https://api.github.com/users/dtenenba/followers", "following_url": "https://api.github.com/users/dtenenba/following{/other_user}", "gists_url": "https://api.github.com/users/dtenenba/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtenenba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtenenba/subscriptions", "organizations_url": "https://api.github.com/users/dtenenba/orgs", "repos_url": "https://api.github.com/users/dtenenba/repos", "events_url": "https://api.github.com/users/dtenenba/events{/privacy}", "received_events_url": "https://api.github.com/users/dtenenba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-21T19:25:48Z", "updated_at": "2017-03-09T07:37:25Z", "closed_at": "2017-03-09T07:37:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to use this project to test an OpenID Connect Identity Provider that I am developing, based on the [Django OIDC Provider](https://django-oidc-provider.readthedocs.io/en/v0.4.x/). \r\n\r\nNot all Identity Providers provide a `client_secrets.json` file, so it isn't clear to me how to get that or what values to put in it. \r\n\r\nAlso, when setting up the client in my identity provider, I need to provide information about which flow is being used, and what the redirect URI(s) are, and I'm not sure what to put in. \r\n\r\nIf the README had just a few sentences about how to use this with a custom identity provider, that would be great. \r\n\r\nThanks.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/19", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/19/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/19/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/19", "id": 201860822, "node_id": "MDU6SXNzdWUyMDE4NjA4MjI=", "number": 19, "title": "Python 3 incompatibility", "user": {"login": "abompard", "id": 95780, "node_id": "MDQ6VXNlcjk1Nzgw", "avatar_url": "https://avatars2.githubusercontent.com/u/95780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abompard", "html_url": "https://github.com/abompard", "followers_url": "https://api.github.com/users/abompard/followers", "following_url": "https://api.github.com/users/abompard/following{/other_user}", "gists_url": "https://api.github.com/users/abompard/gists{/gist_id}", "starred_url": "https://api.github.com/users/abompard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abompard/subscriptions", "organizations_url": "https://api.github.com/users/abompard/orgs", "repos_url": "https://api.github.com/users/abompard/repos", "events_url": "https://api.github.com/users/abompard/events{/privacy}", "received_events_url": "https://api.github.com/users/abompard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T13:28:19Z", "updated_at": "2017-01-19T13:33:39Z", "closed_at": "2017-01-19T13:33:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running `oidc-discover` on Python3 can lead to a traceback:\r\n```\r\nERROR:oidc-register:Error caught when discovering OP information:\r\nTraceback (most recent call last):\r\n  File \"[...]/lib/python3.5/site-packages/flask_oidc/registration_util.py\", line 65, in main\r\n    OP = discovery.discover_OP_information(args.provider_url)\r\n  File \"[...]/lib/python3.5/site-packages/flask_oidc/discovery.py\", line 43, in discover_OP_information\r\n    return json.loads(content)\r\n  File \"/usr/lib64/python3.5/json/__init__.py\", line 312, in loads\r\n    s.__class__.__name__))\r\nTypeError: the JSON object must be str, not 'bytes'\r\n```\r\nThis is because `httplib2` returns the content as bytes, not strings, and `json.loads()` expects strings. I have a patch to fix this, I'll submit a PR right now.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/18", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/18/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/18/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/18", "id": 198725577, "node_id": "MDU6SXNzdWUxOTg3MjU1Nzc=", "number": 18, "title": "Document (or point to documentation) how to use the API tokens", "user": {"login": "jeremycline", "id": 1977525, "node_id": "MDQ6VXNlcjE5Nzc1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1977525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremycline", "html_url": "https://github.com/jeremycline", "followers_url": "https://api.github.com/users/jeremycline/followers", "following_url": "https://api.github.com/users/jeremycline/following{/other_user}", "gists_url": "https://api.github.com/users/jeremycline/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremycline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremycline/subscriptions", "organizations_url": "https://api.github.com/users/jeremycline/orgs", "repos_url": "https://api.github.com/users/jeremycline/repos", "events_url": "https://api.github.com/users/jeremycline/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremycline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-04T14:53:35Z", "updated_at": "2017-02-08T11:18:05Z", "closed_at": "2017-02-08T11:18:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, the documentation mentions [an accept_token decorator](http://flask-oidc.readthedocs.io/en/latest/?badge=latest#resource-server), but provides no details on how a client should use this. I assume this is some sort of standard, but there's no indication of that in the docs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/17", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/17/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/17/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/17", "id": 198724119, "node_id": "MDU6SXNzdWUxOTg3MjQxMTk=", "number": 17, "title": "Document the Flask settings this plugin supports", "user": {"login": "jeremycline", "id": 1977525, "node_id": "MDQ6VXNlcjE5Nzc1MjU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1977525?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremycline", "html_url": "https://github.com/jeremycline", "followers_url": "https://api.github.com/users/jeremycline/followers", "following_url": "https://api.github.com/users/jeremycline/following{/other_user}", "gists_url": "https://api.github.com/users/jeremycline/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremycline/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremycline/subscriptions", "organizations_url": "https://api.github.com/users/jeremycline/orgs", "repos_url": "https://api.github.com/users/jeremycline/repos", "events_url": "https://api.github.com/users/jeremycline/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremycline/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-04T14:47:29Z", "updated_at": "2017-02-08T11:17:49Z", "closed_at": "2017-02-08T11:17:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Right now, the documentation does not mention settings at all. However, if you inspect the source, you'll discover there are quite a few settings that are used.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/13", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/13/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/13/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/13", "id": 192149242, "node_id": "MDU6SXNzdWUxOTIxNDkyNDI=", "number": 13, "title": "userinfo_uri is not required... its optional but the library requires it...", "user": {"login": "pdoronila", "id": 2334627, "node_id": "MDQ6VXNlcjIzMzQ2Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2334627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdoronila", "html_url": "https://github.com/pdoronila", "followers_url": "https://api.github.com/users/pdoronila/followers", "following_url": "https://api.github.com/users/pdoronila/following{/other_user}", "gists_url": "https://api.github.com/users/pdoronila/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdoronila/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdoronila/subscriptions", "organizations_url": "https://api.github.com/users/pdoronila/orgs", "repos_url": "https://api.github.com/users/pdoronila/repos", "events_url": "https://api.github.com/users/pdoronila/events{/privacy}", "received_events_url": "https://api.github.com/users/pdoronila/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-28T23:46:26Z", "updated_at": "2016-11-29T09:33:50Z", "closed_at": "2016-11-29T09:33:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Could there be option to configure the use of the userinfo_uri or not to use it? \r\n\r\nCoreOS OpenId Connect Provider (https://github.com/coreos/dex) didn't implement the userinfo endpoint because it's optional. \r\n\r\nIn order to get this library to work with coreos openId connect provider, I had to comment out lines 188 thru 199\r\n(https://github.com/puiterwijk/flask-oidc/blob/master/flask_oidc/__init__.py#L188-L199) for it to work with coreos openid connect provider. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/12", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/12/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/12/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/12", "id": 171117587, "node_id": "MDU6SXNzdWUxNzExMTc1ODc=", "number": 12, "title": "oidc-register fails under Python 3.5", "user": {"login": "ncoghlan", "id": 1026649, "node_id": "MDQ6VXNlcjEwMjY2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1026649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ncoghlan", "html_url": "https://github.com/ncoghlan", "followers_url": "https://api.github.com/users/ncoghlan/followers", "following_url": "https://api.github.com/users/ncoghlan/following{/other_user}", "gists_url": "https://api.github.com/users/ncoghlan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ncoghlan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ncoghlan/subscriptions", "organizations_url": "https://api.github.com/users/ncoghlan/orgs", "repos_url": "https://api.github.com/users/ncoghlan/repos", "events_url": "https://api.github.com/users/ncoghlan/events{/privacy}", "received_events_url": "https://api.github.com/users/ncoghlan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-15T06:52:04Z", "updated_at": "2017-02-08T11:45:48Z", "closed_at": "2016-11-15T22:58:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm attempting to adapt the Hubs OIDC code for use in Anitya, and ran into the following error trying to run oidc-register under a Python 3.5 venv: \n\n```\n$ oidc-register --debug https://iddev.fedorainfracloud.org/ http://localhost:5000\nError discovering OP information\nthe JSON object must be str, not 'bytes'\nERROR:oidc-register:Error caught when discovering OP information:\nTraceback (most recent call last):\n  File \"/home/ncoghlan/.virtualenvs/anitya/lib/python3.5/site-packages/flask_oidc/registration_util.py\", line 65, in main\n    OP = discovery.discover_OP_information(args.provider_url)\n  File \"/home/ncoghlan/.virtualenvs/anitya/lib/python3.5/site-packages/flask_oidc/discovery.py\", line 43, in discover_OP_information\n    return json.loads(content)\n  File \"/usr/lib64/python3.5/json/__init__.py\", line 312, in loads\n    s.__class__.__name__))\nTypeError: the JSON object must be str, not 'bytes'\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/7", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/7/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/7/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/7", "id": 79779691, "node_id": "MDU6SXNzdWU3OTc3OTY5MQ==", "number": 7, "title": "Clock skew", "user": {"login": "RangeVsRange", "id": 4272171, "node_id": "MDQ6VXNlcjQyNzIxNzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4272171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RangeVsRange", "html_url": "https://github.com/RangeVsRange", "followers_url": "https://api.github.com/users/RangeVsRange/followers", "following_url": "https://api.github.com/users/RangeVsRange/following{/other_user}", "gists_url": "https://api.github.com/users/RangeVsRange/gists{/gist_id}", "starred_url": "https://api.github.com/users/RangeVsRange/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RangeVsRange/subscriptions", "organizations_url": "https://api.github.com/users/RangeVsRange/orgs", "repos_url": "https://api.github.com/users/RangeVsRange/repos", "events_url": "https://api.github.com/users/RangeVsRange/events{/privacy}", "received_events_url": "https://api.github.com/users/RangeVsRange/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-05-23T08:31:28Z", "updated_at": "2016-05-17T09:32:21Z", "closed_at": "2016-05-17T09:32:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "With my PC clock 5 seconds behind the true time, authentication fails at `is_id_token_valid`, \"steps 9, 10\". I think there ought to be some allowance for clock skew.\n\n(But to fix it locally, I set my clock forward 5.5. seconds.)\n\n(Actually, what's the problem with the local machine's system time being before the authentication provider's system time at the creation of the token?)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/4", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/4/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/4/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/4", "id": 63378580, "node_id": "MDU6SXNzdWU2MzM3ODU4MA==", "number": 4, "title": "TODO: step 2: check issuer", "user": {"login": "RangeVsRange", "id": 4272171, "node_id": "MDQ6VXNlcjQyNzIxNzE=", "avatar_url": "https://avatars0.githubusercontent.com/u/4272171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RangeVsRange", "html_url": "https://github.com/RangeVsRange", "followers_url": "https://api.github.com/users/RangeVsRange/followers", "following_url": "https://api.github.com/users/RangeVsRange/following{/other_user}", "gists_url": "https://api.github.com/users/RangeVsRange/gists{/gist_id}", "starred_url": "https://api.github.com/users/RangeVsRange/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RangeVsRange/subscriptions", "organizations_url": "https://api.github.com/users/RangeVsRange/orgs", "repos_url": "https://api.github.com/users/RangeVsRange/repos", "events_url": "https://api.github.com/users/RangeVsRange/events{/privacy}", "received_events_url": "https://api.github.com/users/RangeVsRange/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-03-21T08:40:29Z", "updated_at": "2016-05-17T09:00:01Z", "closed_at": "2016-05-17T09:00:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "This smells like a massive security flaw. What does it mean? What impact does not checking issuer have? Can flask-oidc be considered secure if it's not checking the issuer?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/3", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/3/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/3/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/3", "id": 58040471, "node_id": "MDU6SXNzdWU1ODA0MDQ3MQ==", "number": 3, "title": "Fails with `ImportError: cannot import name TimedJSONWebSignatureSerializer`", "user": {"login": "altryne", "id": 463317, "node_id": "MDQ6VXNlcjQ2MzMxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altryne", "html_url": "https://github.com/altryne", "followers_url": "https://api.github.com/users/altryne/followers", "following_url": "https://api.github.com/users/altryne/following{/other_user}", "gists_url": "https://api.github.com/users/altryne/gists{/gist_id}", "starred_url": "https://api.github.com/users/altryne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altryne/subscriptions", "organizations_url": "https://api.github.com/users/altryne/orgs", "repos_url": "https://api.github.com/users/altryne/repos", "events_url": "https://api.github.com/users/altryne/events{/privacy}", "received_events_url": "https://api.github.com/users/altryne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "SteelPangolin", "id": 955421, "node_id": "MDQ6VXNlcjk1NTQyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/955421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteelPangolin", "html_url": "https://github.com/SteelPangolin", "followers_url": "https://api.github.com/users/SteelPangolin/followers", "following_url": "https://api.github.com/users/SteelPangolin/following{/other_user}", "gists_url": "https://api.github.com/users/SteelPangolin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteelPangolin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteelPangolin/subscriptions", "organizations_url": "https://api.github.com/users/SteelPangolin/orgs", "repos_url": "https://api.github.com/users/SteelPangolin/repos", "events_url": "https://api.github.com/users/SteelPangolin/events{/privacy}", "received_events_url": "https://api.github.com/users/SteelPangolin/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SteelPangolin", "id": 955421, "node_id": "MDQ6VXNlcjk1NTQyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/955421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteelPangolin", "html_url": "https://github.com/SteelPangolin", "followers_url": "https://api.github.com/users/SteelPangolin/followers", "following_url": "https://api.github.com/users/SteelPangolin/following{/other_user}", "gists_url": "https://api.github.com/users/SteelPangolin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteelPangolin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteelPangolin/subscriptions", "organizations_url": "https://api.github.com/users/SteelPangolin/orgs", "repos_url": "https://api.github.com/users/SteelPangolin/repos", "events_url": "https://api.github.com/users/SteelPangolin/events{/privacy}", "received_events_url": "https://api.github.com/users/SteelPangolin/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2015-02-18T08:38:14Z", "updated_at": "2015-03-26T04:53:20Z", "closed_at": "2015-03-26T04:53:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just importing `from flask_oidc import OpenIDConnect` fails with\n\n```\nImportError: cannot import name TimedJSONWebSignatureSerializer\n```\n\nAnd it seems that `TimedJSONWebSignatureSerializer` is not even included anymore in ItsDangerous anymore according to http://pythonhosted.org/itsdangerous/\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/2", "repository_url": "https://api.github.com/repos/puiterwijk/flask-oidc", "labels_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/2/comments", "events_url": "https://api.github.com/repos/puiterwijk/flask-oidc/issues/2/events", "html_url": "https://github.com/puiterwijk/flask-oidc/issues/2", "id": 58038814, "node_id": "MDU6SXNzdWU1ODAzODgxNA==", "number": 2, "title": "Is there any documentation for this somewhere?", "user": {"login": "altryne", "id": 463317, "node_id": "MDQ6VXNlcjQ2MzMxNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/altryne", "html_url": "https://github.com/altryne", "followers_url": "https://api.github.com/users/altryne/followers", "following_url": "https://api.github.com/users/altryne/following{/other_user}", "gists_url": "https://api.github.com/users/altryne/gists{/gist_id}", "starred_url": "https://api.github.com/users/altryne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/altryne/subscriptions", "organizations_url": "https://api.github.com/users/altryne/orgs", "repos_url": "https://api.github.com/users/altryne/repos", "events_url": "https://api.github.com/users/altryne/events{/privacy}", "received_events_url": "https://api.github.com/users/altryne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "puiterwijk", "id": 967561, "node_id": "MDQ6VXNlcjk2NzU2MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/967561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/puiterwijk", "html_url": "https://github.com/puiterwijk", "followers_url": "https://api.github.com/users/puiterwijk/followers", "following_url": "https://api.github.com/users/puiterwijk/following{/other_user}", "gists_url": "https://api.github.com/users/puiterwijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/puiterwijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/puiterwijk/subscriptions", "organizations_url": "https://api.github.com/users/puiterwijk/orgs", "repos_url": "https://api.github.com/users/puiterwijk/repos", "events_url": "https://api.github.com/users/puiterwijk/events{/privacy}", "received_events_url": "https://api.github.com/users/puiterwijk/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "puiterwijk", "id": 967561, "node_id": "MDQ6VXNlcjk2NzU2MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/967561?v=4", "gravatar_id": "", "url": "https://api.github.com/users/puiterwijk", "html_url": "https://github.com/puiterwijk", "followers_url": "https://api.github.com/users/puiterwijk/followers", "following_url": "https://api.github.com/users/puiterwijk/following{/other_user}", "gists_url": "https://api.github.com/users/puiterwijk/gists{/gist_id}", "starred_url": "https://api.github.com/users/puiterwijk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/puiterwijk/subscriptions", "organizations_url": "https://api.github.com/users/puiterwijk/orgs", "repos_url": "https://api.github.com/users/puiterwijk/repos", "events_url": "https://api.github.com/users/puiterwijk/events{/privacy}", "received_events_url": "https://api.github.com/users/puiterwijk/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2015-02-18T08:15:26Z", "updated_at": "2016-05-24T09:12:48Z", "closed_at": "2016-05-24T09:12:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd love to see a basic example or a documentation of using this\n", "performed_via_github_app": null, "score": 1.0}]}