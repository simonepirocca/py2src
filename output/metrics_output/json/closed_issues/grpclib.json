{"total_count": 86, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/118", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/118/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/118/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/118", "id": 673483700, "node_id": "MDU6SXNzdWU2NzM0ODM3MDA=", "number": 118, "title": "Feature request: before/after request methods", "user": {"login": "upcFrost", "id": 287771, "node_id": "MDQ6VXNlcjI4Nzc3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/287771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upcFrost", "html_url": "https://github.com/upcFrost", "followers_url": "https://api.github.com/users/upcFrost/followers", "following_url": "https://api.github.com/users/upcFrost/following{/other_user}", "gists_url": "https://api.github.com/users/upcFrost/gists{/gist_id}", "starred_url": "https://api.github.com/users/upcFrost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upcFrost/subscriptions", "organizations_url": "https://api.github.com/users/upcFrost/orgs", "repos_url": "https://api.github.com/users/upcFrost/repos", "events_url": "https://api.github.com/users/upcFrost/events{/privacy}", "received_events_url": "https://api.github.com/users/upcFrost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-05T11:58:44Z", "updated_at": "2020-08-09T21:03:07Z", "closed_at": "2020-08-09T21:03:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIt'd be really cool to support overridable methods called before and after the request (useful for logging and setting the request context), similar to flask `before_request` decorator. For myself I've implemented those using `functools.partial` wrapped around the handler inside the `__mapping__` call override, but it'd be great to have a standard way of doing it", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/117", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/117/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/117/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/117/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/117", "id": 670789205, "node_id": "MDU6SXNzdWU2NzA3ODkyMDU=", "number": 117, "title": "stream.end() on stream closed from other side leaves protocol in a broken state and raises h2 exception", "user": {"login": "mk-fg", "id": 227121, "node_id": "MDQ6VXNlcjIyNzEyMQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/227121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mk-fg", "html_url": "https://github.com/mk-fg", "followers_url": "https://api.github.com/users/mk-fg/followers", "following_url": "https://api.github.com/users/mk-fg/following{/other_user}", "gists_url": "https://api.github.com/users/mk-fg/gists{/gist_id}", "starred_url": "https://api.github.com/users/mk-fg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mk-fg/subscriptions", "organizations_url": "https://api.github.com/users/mk-fg/orgs", "repos_url": "https://api.github.com/users/mk-fg/repos", "events_url": "https://api.github.com/users/mk-fg/events{/privacy}", "received_events_url": "https://api.github.com/users/mk-fg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-01T11:35:04Z", "updated_at": "2020-08-01T15:45:31Z", "closed_at": "2020-08-01T15:45:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm not very familiar with gRPC and grpclib, so feel free to correct me on anything below, as I might be misunderstanding what's going on here.\r\n\r\nHave following issue when gRPC stream gets closed:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/root/.local/lib/python3.8/site-packages/etcd3aio/watch.py\", line 112, in sender_task\r\n    await stream.end()\r\n  File \"/root/.local/lib/python3.8/site-packages/grpclib/client.py\", line 289, in end\r\n    await self._stream.end()\r\n  File \"/root/.local/lib/python3.8/site-packages/grpclib/protocol.py\", line 461, in end\r\n    self._h2_connection.end_stream(self.id)\r\n  File \"/root/.local/lib/python3.8/site-packages/h2/connection.py\", line 883, in end_stream\r\n    frames = self.streams[stream_id].end_stream()\r\n  File \"/root/.local/lib/python3.8/site-packages/h2/stream.py\", line 956, in end_stream\r\n    self.state_machine.process_input(StreamInputs.SEND_END_STREAM)\r\n  File \"/root/.local/lib/python3.8/site-packages/h2/stream.py\", line 129, in process_input\r\n    return func(self, previous_state)\r\n  File \"/root/.local/lib/python3.8/site-packages/h2/stream.py\", line 348, in send_on_closed_stream\r\n    raise StreamClosedError(self.stream_id)\r\nh2.exceptions.StreamClosedError: 5\r\n```\r\n\r\nIf I understand correctly, stream is already closed from the other side (etcd daemon there logs error, so I assume does some kind of closing too), and attempting to \"end\" it via grpclib fails, as it tries to send something gRPC-related there, which it can't do in this state.\r\n\r\nThis looks like a bug, as underlying h2 exception slips through the stack instead of grpclib's StreamTerminatedError or something like that, if anything should be raised here at all.\r\n\r\nAnd this also does not finish closing the stream, leading to following error, I assume when GC collects the stream, if ignored:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/root/.local/lib/python3.8/site-packages/etcd3aio/watch.py\", line 114, in sender_task\r\n    except h2.exceptions.StreamClosedError: pass\r\n  File \"/root/.local/lib/python3.8/site-packages/grpclib/client.py\", line 531, in __aexit__\r\n    raise exc_val\r\n  File \"/root/.local/lib/python3.8/site-packages/grpclib/client.py\", line 521, in __aexit__\r\n    await self._maybe_finish()\r\n  File \"/root/.local/lib/python3.8/site-packages/grpclib/client.py\", line 497, in _maybe_finish\r\n    await self.recv_trailing_metadata()\r\n  File \"/root/.local/lib/python3.8/site-packages/grpclib/client.py\", line 438, in recv_trailing_metadata\r\n    raise ProtocolError('Outgoing stream was not ended')\r\ngrpclib.exceptions.ProtocolError: Outgoing stream was not ended\r\n```\r\n\r\nI.e. there doesn't seem to be a way to handle such case cleanly in grpclib-using application at the moment, as stream.end() does not work and yet not ending the stream is a ProtocolError.\r\n\r\nSeem to be happening here when communicating with etcd using grpclib-0.3.2 and grpclib-0.4.0rc1 installed from current git 87cc90257ffeaf1d677983980190054e65a301a7 via `pip install --user https://github.com/vmagamedov/grpclib/`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/116", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/116/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/116/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/116", "id": 666268557, "node_id": "MDU6SXNzdWU2NjYyNjg1NTc=", "number": 116, "title": "Allow infinite pings", "user": {"login": "tamirOK", "id": 13197461, "node_id": "MDQ6VXNlcjEzMTk3NDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/13197461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamirOK", "html_url": "https://github.com/tamirOK", "followers_url": "https://api.github.com/users/tamirOK/followers", "following_url": "https://api.github.com/users/tamirOK/following{/other_user}", "gists_url": "https://api.github.com/users/tamirOK/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamirOK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamirOK/subscriptions", "organizations_url": "https://api.github.com/users/tamirOK/orgs", "repos_url": "https://api.github.com/users/tamirOK/repos", "events_url": "https://api.github.com/users/tamirOK/events{/privacy}", "received_events_url": "https://api.github.com/users/tamirOK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-27T12:49:38Z", "updated_at": "2020-07-27T19:49:28Z", "closed_at": "2020-07-27T16:05:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI want my client to hold open connection to server infinitely long by doing pings. To do so, I have to provide correct values for `Configuration` object. Can you answer my questions please:\r\n\r\n- What is a difference between `_keepalive_time` and `http2_min_sent_ping_interval_without_data` settings? I have checked `Connection._ping` method and these options look very similar to me.\r\n- How can I remove limit on max number of sent pings?  \r\n- Can I allow ping function to run forever?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/115", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/115/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/115/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/115", "id": 663319959, "node_id": "MDU6SXNzdWU2NjMzMTk5NTk=", "number": 115, "title": "Reconnect channel automatically", "user": {"login": "tamirOK", "id": 13197461, "node_id": "MDQ6VXNlcjEzMTk3NDYx", "avatar_url": "https://avatars0.githubusercontent.com/u/13197461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamirOK", "html_url": "https://github.com/tamirOK", "followers_url": "https://api.github.com/users/tamirOK/followers", "following_url": "https://api.github.com/users/tamirOK/following{/other_user}", "gists_url": "https://api.github.com/users/tamirOK/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamirOK/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamirOK/subscriptions", "organizations_url": "https://api.github.com/users/tamirOK/orgs", "repos_url": "https://api.github.com/users/tamirOK/repos", "events_url": "https://api.github.com/users/tamirOK/events{/privacy}", "received_events_url": "https://api.github.com/users/tamirOK/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-21T21:27:44Z", "updated_at": "2020-07-22T07:39:18Z", "closed_at": "2020-07-22T07:39:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible for grpclib to reconnect channel automatically in case of network fail?\r\nFor example. there is already established channel on client side. Then network stops working for 1 second and resets. Will the channel reconnects to server in this case?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/114", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/114/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/114/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/114", "id": 659976803, "node_id": "MDU6SXNzdWU2NTk5NzY4MDM=", "number": 114, "title": "Channel doesn't implement Context Manager API, yet implements close()", "user": {"login": "theunkn0wn1", "id": 3110986, "node_id": "MDQ6VXNlcjMxMTA5ODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/3110986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theunkn0wn1", "html_url": "https://github.com/theunkn0wn1", "followers_url": "https://api.github.com/users/theunkn0wn1/followers", "following_url": "https://api.github.com/users/theunkn0wn1/following{/other_user}", "gists_url": "https://api.github.com/users/theunkn0wn1/gists{/gist_id}", "starred_url": "https://api.github.com/users/theunkn0wn1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theunkn0wn1/subscriptions", "organizations_url": "https://api.github.com/users/theunkn0wn1/orgs", "repos_url": "https://api.github.com/users/theunkn0wn1/repos", "events_url": "https://api.github.com/users/theunkn0wn1/events{/privacy}", "received_events_url": "https://api.github.com/users/theunkn0wn1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-18T07:29:32Z", "updated_at": "2020-07-21T22:57:39Z", "closed_at": "2020-07-21T22:55:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "the `Channel` type has a `close()` method which must be called by the user when they are done with this resource, yet it is extremely easy to forget to do so leading to incorrect code and warnings being emitted in `__del__` postmortem. \r\n\r\nThe classical way of handling objects that need to be closed when they have outlived their usefulness is to have that object be, or managed by,  a [`Context Manager`](https://docs.python.org/3/reference/datamodel.html#context-managers), and many of the built in / standard library types that fit this bill [such as file-like objects](https://docs.python.org/3/library/stdtypes.html#contextmanager.__enter__) and threaded/async [locks](https://docs.python.org/3/library/threading.html#lock-objects) implement this protocol.\r\n\r\nTo be a Context Manager, this class must  provide an `__enter__` and a `__exit__` (thus  implementing [`contextlib.AbstractContextManager`](https://docs.python.org/3/library/contextlib.html?highlight=context%20manager#contextlib.AbstractContextManager)).\r\nNot providing these methods means the object cannot be used as a context manager, denying for automatic closing of the channel object.\r\n\r\n## What I want to do\r\n```py\r\nwith Channel(host=\"localhost\", port=50051) as channel:\r\n    ... # stuff using Channel, such as creating and client stubs etc.\r\n# channel is automatically closed here.\r\nexit()\r\n```\r\n\r\n## What actually happens\r\n```py\r\nchannel = Channel(host=\"localhost\", port=50051)\r\n...\r\nexit()\r\n# oops, forgot to close the channel!\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/113", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/113/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/113/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/113", "id": 644865887, "node_id": "MDU6SXNzdWU2NDQ4NjU4ODc=", "number": 113, "title": "grpclib 0.3.2 unhelpful error with bad header value", "user": {"login": "danielgtaylor-isp", "id": 22035690, "node_id": "MDQ6VXNlcjIyMDM1Njkw", "avatar_url": "https://avatars1.githubusercontent.com/u/22035690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielgtaylor-isp", "html_url": "https://github.com/danielgtaylor-isp", "followers_url": "https://api.github.com/users/danielgtaylor-isp/followers", "following_url": "https://api.github.com/users/danielgtaylor-isp/following{/other_user}", "gists_url": "https://api.github.com/users/danielgtaylor-isp/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielgtaylor-isp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielgtaylor-isp/subscriptions", "organizations_url": "https://api.github.com/users/danielgtaylor-isp/orgs", "repos_url": "https://api.github.com/users/danielgtaylor-isp/repos", "events_url": "https://api.github.com/users/danielgtaylor-isp/events{/privacy}", "received_events_url": "https://api.github.com/users/danielgtaylor-isp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-24T19:21:54Z", "updated_at": "2020-06-25T15:59:53Z", "closed_at": "2020-06-25T15:59:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "When upgrading from grpclib 0.3.1 to 0.3.2 we experienced an issue where one of our headers had a bad value ending with `\\n` and the error message was not useful, requiring a lot of time to debug. Example:\r\n\r\n```py\r\nTraceback (most recent call last):\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 360, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/protocol.py\", line 349, in recv_headers\r\n    await self.headers_received.wait()\r\n  File \"/home/example/.pyenv/versions/3.7.7/lib/python3.7/asyncio/locks.py\", line 293, in wait\r\n    await fut\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/example/.pyenv/versions/3.7.7/lib/python3.7/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"uvloop/loop.pyx\", line 1451, in uvloop.loop.Loop.run_until_complete\r\n  File \"<stdin>\", line 4, in ls\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 830, in __call__\r\n    reply = await stream.recv_message()\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 408, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 380, in recv_initial_metadata\r\n    self.initial_metadata = im\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/utils.py\", line 70, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Stream reset by remote party, error_code: 1\r\n```\r\n\r\nThis is generated using code like this:\r\n\r\n```py\r\nasync def _add_auth(event: SendRequest) -> None:\r\n    \"\"\"Add user/key to the request headers of every outgoing request.\"\"\"\r\n    event.metadata[\"user\"] = USER_VALUE\r\n    event.metadata[\"key\"] = SECRET_VALUE\r\n\r\nlisten(grpc_channel, SendRequest, _add_auth)\r\n```\r\n\r\nIn our case, the bug was that `SECRET_VALUE` ended in a `\\n` which was a configuration mistake. As soon as we found the problem, we were able to get a better error like this:\r\n\r\n```py\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/example/.pyenv/versions/3.7.7/lib/python3.7/asyncio/runners.py\", line 43, in run\r\n    return loop.run_until_complete(main)\r\n  File \"uvloop/loop.pyx\", line 1451, in uvloop.loop.Loop.run_until_complete\r\n  File \"<stdin>\", line 4, in ls\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 830, in __call__\r\n    reply = await stream.recv_message()\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 408, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 376, in recv_initial_metadata\r\n    self._raise_for_grpc_status(headers_map)\r\n  File \"/home/example/.venv/lib/python3.7/site-packages/grpclib/client.py\", line 337, in _raise_for_grpc_status\r\n    raise GRPCError(status, message, details)\r\ngrpclib.exceptions.GRPCError: (<Status.UNAUTHENTICATED: 16>, 'request failed, invalid request metadata/auth', None)\r\n```\r\n\r\nAnd when passing the proper secret value the request now works.\r\n\r\nIt looks like this code was changed in https://github.com/vmagamedov/grpclib/commit/d2ff0029ab8e104e17052ddda27c21be7b25b4c5#diff-1e1ecaa37b653c7027d817b6c287965cR593-R596 for efficiency, and I'm not opposed to that change, but it would be nice to get some better error message. This issue wasted a **lot** of time for us unfortunately.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/111", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/111/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/111/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/111", "id": 628792348, "node_id": "MDU6SXNzdWU2Mjg3OTIzNDg=", "number": 111, "title": "*_grpc.py not generated when installed via poetry", "user": {"login": "seanaye", "id": 24496822, "node_id": "MDQ6VXNlcjI0NDk2ODIy", "avatar_url": "https://avatars3.githubusercontent.com/u/24496822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seanaye", "html_url": "https://github.com/seanaye", "followers_url": "https://api.github.com/users/seanaye/followers", "following_url": "https://api.github.com/users/seanaye/following{/other_user}", "gists_url": "https://api.github.com/users/seanaye/gists{/gist_id}", "starred_url": "https://api.github.com/users/seanaye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seanaye/subscriptions", "organizations_url": "https://api.github.com/users/seanaye/orgs", "repos_url": "https://api.github.com/users/seanaye/repos", "events_url": "https://api.github.com/users/seanaye/events{/privacy}", "received_events_url": "https://api.github.com/users/seanaye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-01T23:26:55Z", "updated_at": "2020-06-02T14:41:06Z", "closed_at": "2020-06-02T14:34:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm updating a project that used to use this repo and I haven't changed any code but not when I try to run the project I get \r\n\r\n```\r\nFile \"./rpc_pb2_grpc.py\", line 34, in __init__\r\nself.WalletBalance = channel.unary_unary(\r\nAttributeError: 'Channel' object has no attribute 'unary_unary'\r\n```\r\n\r\nrelevant code \r\n\r\n```python\r\nimport rpc_pb2 as ln\r\nimport rpc_pb2_grpc as lnrpc\r\nfrom grpclib.Client import Channel\r\n...\r\nself._channel = Channel('lnd', 9000, ssl=ctx)\r\n...\r\nself.stub = lnrpc.LightningStub(self._channel)\r\n```\r\nNot sure what is wrong here. rpc_pb2_grpc was compiled as follows\r\n\r\n`python -m grpc_tools.protoc --proto_path=googleapis:. --python_out=./build, --grpc_python_out=./build rpc.proto`\r\n\r\nwhere rpc.proto is from https://raw.githubusercontent.com/lightningnetwork/lnd/master/lnrpc/rpc.proto\r\n\r\nAppreciate any help.\r\n\r\nThanks.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/110", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/110/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/110/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/110", "id": 625436034, "node_id": "MDU6SXNzdWU2MjU0MzYwMzQ=", "number": 110, "title": "'Connection' object has no attribute '_transport'", "user": {"login": "n00bsys0p", "id": 1696688, "node_id": "MDQ6VXNlcjE2OTY2ODg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1696688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/n00bsys0p", "html_url": "https://github.com/n00bsys0p", "followers_url": "https://api.github.com/users/n00bsys0p/followers", "following_url": "https://api.github.com/users/n00bsys0p/following{/other_user}", "gists_url": "https://api.github.com/users/n00bsys0p/gists{/gist_id}", "starred_url": "https://api.github.com/users/n00bsys0p/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/n00bsys0p/subscriptions", "organizations_url": "https://api.github.com/users/n00bsys0p/orgs", "repos_url": "https://api.github.com/users/n00bsys0p/repos", "events_url": "https://api.github.com/users/n00bsys0p/events{/privacy}", "received_events_url": "https://api.github.com/users/n00bsys0p/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-27T07:04:17Z", "updated_at": "2020-05-30T16:51:49Z", "closed_at": "2020-05-27T19:08:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am and have been regularly seeing this in our server logs. It's constant and quite frequent. I've had a look through the library and I can't see anywhere that would allow a Connection to have no Transport, as it's assigned in the constructor.\r\n\r\nHere's a traceback (apologies for formatting, it's copied directly from our remote logging provider):\r\n\r\n```python\r\nTask exception was never retrieved\r\nfuture: <Task finished coro=<request_handler() done, defined at /usr/local/lib/python3.7/dist-packages/grpclib/server.py:342> exception=AttributeError(\"'Connection' object has no attribute '_transport'\")>\r\n\r\ngrpclib/protocol.py in flush at line 219\r\n                      stream_id=stream_id, wrapper=wrapper)\r\n\r\n    def flush(self) -> None:\r\n        data = self._connection.data_to_send()\r\n        if data:\r\n            self._transport.write(data)\r\n\r\n    def close(self) -> None:\r\n        if hasattr(self, '_transport'):\r\n            self._transport.close()\r\n            # remove cyclic references to improve memory usage\r\n\r\ngrpclib/protocol.py in ack at line 199\r\n        return self._connection.receive_data(data)  # type: ignore\r\n\r\n    def ack(self, stream_id: int, size: int) -> None:\r\n        if size:\r\n            self._connection.acknowledge_received_data(size, stream_id)\r\n            self.flush()\r\n\r\n    def pause_writing(self) -> None:\r\n        self.write_ready.clear()\r\n\r\n    def resume_writing(self) -> None:\r\n\r\n        def release_stream(*, _streams: _Streams = self.streams) -> None:\r\n            assert stream.id is not None\r\n            _stream = _streams.pop(stream.id)\r\n            self.connection.stream_close_waiter.set()\r\n            self.connection.ack(stream.id, _stream.buffer.unacked_size())\r\n        return release_stream\r\n\r\n    def close(self, reason: str = 'Connection closed') -> None:\r\n        self.connection.close()\r\n\r\ngrpclib/server.py in request_handler at line 446\r\n    except ProtocolError:\r\n        log.exception('Application error')\r\n    except Exception:\r\n        log.exception('Server error')\r\n    finally:\r\n        release_stream()\r\n\r\nclass _GC(abc.ABC):\r\n    _gc_counter = 0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/109", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/109/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/109/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/109", "id": 619484820, "node_id": "MDU6SXNzdWU2MTk0ODQ4MjA=", "number": 109, "title": "Using _Metadata as a typing", "user": {"login": "paulefoe", "id": 25705931, "node_id": "MDQ6VXNlcjI1NzA1OTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/25705931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulefoe", "html_url": "https://github.com/paulefoe", "followers_url": "https://api.github.com/users/paulefoe/followers", "following_url": "https://api.github.com/users/paulefoe/following{/other_user}", "gists_url": "https://api.github.com/users/paulefoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulefoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulefoe/subscriptions", "organizations_url": "https://api.github.com/users/paulefoe/orgs", "repos_url": "https://api.github.com/users/paulefoe/repos", "events_url": "https://api.github.com/users/paulefoe/events{/privacy}", "received_events_url": "https://api.github.com/users/paulefoe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-16T14:14:08Z", "updated_at": "2020-05-16T17:35:14Z", "closed_at": "2020-05-16T17:35:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, thanks for the great library, we are really enjoying using it!\r\n\r\nMy question is regarding `_Metadata` being a protected member of the module. Is there any reason for this? \r\nBecause sometimes we want to manipulate metadata inside our business logic and we send it as an argument to a function.\r\nThen, trying to annotate our function with types we would get a warning from IDE that it is protected.\r\nI would be glad to provide PR if you think this is okay?\r\n\r\nHere's the small example:\r\n\r\n```    \r\nasync def hello_world(\r\n        self,\r\n        stream: Stream[HelloWorldRequest, HelloWorldResponse]\r\n) -> None:\r\n        request = await stream.recv_message()\r\n        assert request is not None\r\n        result = await say_hello_with_metadata(\r\n              request.name,\r\n              stream.metadata,\r\n        )\r\n        await stream.send_message(result)\r\n\r\nasync def say_hello_with_metadata(name: str, metadata: _Metadata) -> str:\r\n        ...\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/108", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/108/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/108/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/108", "id": 619484300, "node_id": "MDU6SXNzdWU2MTk0ODQzMDA=", "number": 108, "title": "Running under Python 3.8 gives deprecation warnings \"The loop argument is deprecated since Python 3.8 . . .\"", "user": {"login": "dlparker", "id": 660124, "node_id": "MDQ6VXNlcjY2MDEyNA==", "avatar_url": "https://avatars1.githubusercontent.com/u/660124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlparker", "html_url": "https://github.com/dlparker", "followers_url": "https://api.github.com/users/dlparker/followers", "following_url": "https://api.github.com/users/dlparker/following{/other_user}", "gists_url": "https://api.github.com/users/dlparker/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlparker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlparker/subscriptions", "organizations_url": "https://api.github.com/users/dlparker/orgs", "repos_url": "https://api.github.com/users/dlparker/repos", "events_url": "https://api.github.com/users/dlparker/events{/privacy}", "received_events_url": "https://api.github.com/users/dlparker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-16T14:11:01Z", "updated_at": "2020-05-16T15:07:25Z", "closed_at": "2020-05-16T15:06:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get this warning in seven locations in grpclib 0.3.1, mostly in the form Event(loop=loop), though a couple of them are something else. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/106", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/106/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/106/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/106", "id": 604950526, "node_id": "MDU6SXNzdWU2MDQ5NTA1MjY=", "number": 106, "title": "RFC - Allow handler methods to return early by exceptions", "user": {"login": "tjstum", "id": 2078454, "node_id": "MDQ6VXNlcjIwNzg0NTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2078454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tjstum", "html_url": "https://github.com/tjstum", "followers_url": "https://api.github.com/users/tjstum/followers", "following_url": "https://api.github.com/users/tjstum/following{/other_user}", "gists_url": "https://api.github.com/users/tjstum/gists{/gist_id}", "starred_url": "https://api.github.com/users/tjstum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tjstum/subscriptions", "organizations_url": "https://api.github.com/users/tjstum/orgs", "repos_url": "https://api.github.com/users/tjstum/repos", "events_url": "https://api.github.com/users/tjstum/events{/privacy}", "received_events_url": "https://api.github.com/users/tjstum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-22T17:55:23Z", "updated_at": "2020-04-27T19:39:27Z", "closed_at": "2020-04-27T19:39:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "This is somewhere between a question and a feature request.\r\n\r\nLet's say you have a server that has boilerplate at the beginning of each method. Maybe it's like:\r\n```python\r\nclass FooServer(FooBase):\r\n    async def GetTheBar(self, stream):\r\n        try:\r\n            bar = ...  # some loookup function\r\n        except NoSuchBar:\r\n            await stream.send_message(status=NoBar)\r\n            return\r\n        \r\n        await stream.send_message(status=OK, bar=bar.to_proto())\r\n```\r\n\r\nThat works well enough, but if every such method has to start with those same 4 lines, it becomes a bit repetitive. It would be nice if that could be refactored. Perhaps something like:\r\n```python\r\nclass FooServer(FooBase):\r\n    async def get_bar(self, bar_name, stream):\r\n        try:\r\n            return ...  # the lookup function\r\n        except NoSuchBar:\r\n            await stream.send_message(status=NoBar)\r\n            raise grpclib.ResponseAlreadySent\r\n\r\n    async def GetTheBar(self, stream):\r\n        request = await stream.recv_message()\r\n        bar = await self.get_bar(..., stream)\r\n        await stream.send_message(status=OK, bar=bar.to_proto())\r\n```\r\nand then `request_handler` would discard the `ResponseAlreadySent` exception.\r\n\r\nIt is a little weirdly magical, but only a little (at least to my eyes). I thought about using `GRPCError` for this, but if an application carries its own statuses in the protocol definition, that might sort of hard to integrate (like some errors might be immediately fatal, but other errors could still fill in some of the information of the response)\r\n\r\nI'm happy to contribute a patch for this if it's a reasonable approach, but if there are other ways to solve this, I'm also happy to hear that.\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/105", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/105/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/105/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/105", "id": 602794665, "node_id": "MDU6SXNzdWU2MDI3OTQ2NjU=", "number": 105, "title": "Health check always waits check_ttl before first check", "user": {"login": "travigd", "id": 773453, "node_id": "MDQ6VXNlcjc3MzQ1Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/773453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/travigd", "html_url": "https://github.com/travigd", "followers_url": "https://api.github.com/users/travigd/followers", "following_url": "https://api.github.com/users/travigd/following{/other_user}", "gists_url": "https://api.github.com/users/travigd/gists{/gist_id}", "starred_url": "https://api.github.com/users/travigd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/travigd/subscriptions", "organizations_url": "https://api.github.com/users/travigd/orgs", "repos_url": "https://api.github.com/users/travigd/repos", "events_url": "https://api.github.com/users/travigd/events{/privacy}", "received_events_url": "https://api.github.com/users/travigd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-19T19:00:53Z", "updated_at": "2020-04-27T13:46:45Z", "closed_at": "2020-04-27T13:46:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "A side effect of the current implementation of `ServiceCheck.__check__`\r\n\r\nhttps://github.com/vmagamedov/grpclib/blob/9008ca89e237502678eba336a5c13fbf6a40efb0/grpclib/health/check.py#L94-L96\r\n\r\nis that we will always wait at least `check_ttl` seconds before we run the first check. Is this desired behavior? From my perspective it is not.\r\n\r\nThe workaround for this is to set `check_ttl` equal to zero (and optionally do your own caching for the health check value).\r\n\r\nOne way to fix this would be to set `self._last_check = -(check_ttl + 1)` so that the condition always passes, or to initialize it to `None` and write something like:\r\n```python3\r\n# Add test for self._last_check, always run check if it is None (or even 0)\r\nif self._last_check and time.monotonic() - self._last_check < self._check_ttl:\r\n    return self._value\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/103", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/103/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/103/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/103", "id": 552904658, "node_id": "MDU6SXNzdWU1NTI5MDQ2NTg=", "number": 103, "title": "Failed to generate special stub files.", "user": {"login": "devrivne", "id": 7127333, "node_id": "MDQ6VXNlcjcxMjczMzM=", "avatar_url": "https://avatars2.githubusercontent.com/u/7127333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devrivne", "html_url": "https://github.com/devrivne", "followers_url": "https://api.github.com/users/devrivne/followers", "following_url": "https://api.github.com/users/devrivne/following{/other_user}", "gists_url": "https://api.github.com/users/devrivne/gists{/gist_id}", "starred_url": "https://api.github.com/users/devrivne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devrivne/subscriptions", "organizations_url": "https://api.github.com/users/devrivne/orgs", "repos_url": "https://api.github.com/users/devrivne/repos", "events_url": "https://api.github.com/users/devrivne/events{/privacy}", "received_events_url": "https://api.github.com/users/devrivne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-21T14:16:13Z", "updated_at": "2020-05-30T15:54:39Z", "closed_at": "2020-05-30T15:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I do have a working project that I wanted to run with your implementation.\r\nGot next error on startup:\r\n`  File \"/usr/local/lib/python3.7/site-packages/grpclib/server.py\", line 569, in __init__\r\n    mapping.update(handler.__mapping__())\r\nAttributeError: 'TestServicer' object has no attribute '__mapping__'\r\n` \r\nWho should generate file with mapping?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/102", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/102/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/102/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/102", "id": 551274540, "node_id": "MDU6SXNzdWU1NTEyNzQ1NDA=", "number": 102, "title": "No attribute Error", "user": {"login": "littleday", "id": 5421234, "node_id": "MDQ6VXNlcjU0MjEyMzQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/5421234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/littleday", "html_url": "https://github.com/littleday", "followers_url": "https://api.github.com/users/littleday/followers", "following_url": "https://api.github.com/users/littleday/following{/other_user}", "gists_url": "https://api.github.com/users/littleday/gists{/gist_id}", "starred_url": "https://api.github.com/users/littleday/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/littleday/subscriptions", "organizations_url": "https://api.github.com/users/littleday/orgs", "repos_url": "https://api.github.com/users/littleday/repos", "events_url": "https://api.github.com/users/littleday/events{/privacy}", "received_events_url": "https://api.github.com/users/littleday/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-17T08:28:44Z", "updated_at": "2020-05-30T15:15:19Z", "closed_at": "2020-05-30T15:15:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "    server = Server([MyServicer(conf=config, logger=logger)])\r\n  File \"/opt/app-root/lib/python3.6/site-packages/grpclib/server.py\", line 569, in __init__\r\n    mapping.update(handler.__mapping__())\r\nAttributeError: 'MyServicer' object has no attribute '__mapping__'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/100", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/100/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/100/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/100", "id": 549833999, "node_id": "MDU6SXNzdWU1NDk4MzM5OTk=", "number": 100, "title": "stream-stream rpc method send\\receive in any order", "user": {"login": "aCLr", "id": 6426720, "node_id": "MDQ6VXNlcjY0MjY3MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/6426720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aCLr", "html_url": "https://github.com/aCLr", "followers_url": "https://api.github.com/users/aCLr/followers", "following_url": "https://api.github.com/users/aCLr/following{/other_user}", "gists_url": "https://api.github.com/users/aCLr/gists{/gist_id}", "starred_url": "https://api.github.com/users/aCLr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aCLr/subscriptions", "organizations_url": "https://api.github.com/users/aCLr/orgs", "repos_url": "https://api.github.com/users/aCLr/repos", "events_url": "https://api.github.com/users/aCLr/events{/privacy}", "received_events_url": "https://api.github.com/users/aCLr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2020-01-14T21:39:19Z", "updated_at": "2020-06-26T14:56:28Z", "closed_at": "2020-05-27T14:00:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "GRPC docs says:\r\n```\r\nBidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream. The two streams operate independently, so clients and servers can read and write in whatever order they like: for example, the server could wait to receive all the client messages before writing its responses, or it could alternately read a message then write a message, or some other combination of reads and writes. \r\n```\r\nLooks like on client-side I can send message to a stream, then read from the stream, then send message, then read and so on....\r\nBut current grpclib implementation does not allow it. Is it possible to change that? :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/95", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/95/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/95/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/95/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/95", "id": 529067121, "node_id": "MDU6SXNzdWU1MjkwNjcxMjE=", "number": 95, "title": "graceful_exit raise NotImplementedError under Windows", "user": {"login": "honglei", "id": 1011330, "node_id": "MDQ6VXNlcjEwMTEzMzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1011330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/honglei", "html_url": "https://github.com/honglei", "followers_url": "https://api.github.com/users/honglei/followers", "following_url": "https://api.github.com/users/honglei/following{/other_user}", "gists_url": "https://api.github.com/users/honglei/gists{/gist_id}", "starred_url": "https://api.github.com/users/honglei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/honglei/subscriptions", "organizations_url": "https://api.github.com/users/honglei/orgs", "repos_url": "https://api.github.com/users/honglei/repos", "events_url": "https://api.github.com/users/honglei/events{/privacy}", "received_events_url": "https://api.github.com/users/honglei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-27T01:52:10Z", "updated_at": "2020-05-30T16:14:32Z", "closed_at": "2020-05-30T16:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "for examples/helloworld/server.py, it could not  run under windows,  and raised the following error: \r\n```\r\n\ufffc File \"E:\\PythonLibs\\dmaproxy\\tests\\grpclib_\\server.py\", line 28, in <module>\r\n  asyncio.run(main())\r\nFile \"D:\\ProgramData\\Anaconda3\\envs\\win64py37\\Lib\\asyncio\\runners.py\", line 43, in run\r\n  return loop.run_until_complete(main)\r\nFile \"D:\\ProgramData\\Anaconda3\\envs\\win64py37\\Lib\\asyncio\\base_events.py\", line 579, in run_until_complete\r\n  return future.result()\r\n\ufffc File \"E:\\PythonLibs\\dmaproxy\\tests\\grpclib_\\server.py\", line 21, in main\r\n  with graceful_exit([server]):\r\nFile \"D:\\ProgramData\\Anaconda3\\envs\\win64py37\\Lib\\contextlib.py\", line 112, in __enter__\r\n  return next(self.gen)\r\nFile \"D:\\ProgramData\\Anaconda3\\envs\\win64py37\\Lib\\site-packages\\grpclib\\utils.py\", line 215, in graceful_exit\r\n  loop.add_signal_handler(sig_num, _exit_handler, sig_num, servers, flag)\r\nFile \"D:\\ProgramData\\Anaconda3\\envs\\win64py37\\Lib\\asyncio\\events.py\", line 540, in add_signal_handler\r\n  raise NotImplementedError\r\n\r\nbuiltins.NotImplementedError\r\n```\r\n\r\n[https://stackoverflow.com/questions/45987985/asyncio-loops-add-signal-handler-in-windows](url) ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/93", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/93/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/93/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/93", "id": 495369374, "node_id": "MDU6SXNzdWU0OTUzNjkzNzQ=", "number": 93, "title": "Reflection not working", "user": {"login": "622michael", "id": 16960359, "node_id": "MDQ6VXNlcjE2OTYwMzU5", "avatar_url": "https://avatars3.githubusercontent.com/u/16960359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/622michael", "html_url": "https://github.com/622michael", "followers_url": "https://api.github.com/users/622michael/followers", "following_url": "https://api.github.com/users/622michael/following{/other_user}", "gists_url": "https://api.github.com/users/622michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/622michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/622michael/subscriptions", "organizations_url": "https://api.github.com/users/622michael/orgs", "repos_url": "https://api.github.com/users/622michael/repos", "events_url": "https://api.github.com/users/622michael/events{/privacy}", "received_events_url": "https://api.github.com/users/622michael/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-18T17:52:22Z", "updated_at": "2019-09-19T16:14:52Z", "closed_at": "2019-09-18T17:54:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been unsuccessful in using ServerReflection. Originally, I thought this was a problem with my implementation. However, I tried the reflection example and I've still had no luck.\r\n\r\n**What I'm Doing**\r\n\r\nI cloned the repo and ran the reflection example.\r\n`python -m reflection.server`\r\n\r\nI used grpc_cli to hit the client using:\r\n`grpc_cli ls --l 127.0.0.1:50051`\r\n\r\nOutput:\r\n`Received an error when querying services endpoint.\r\nReflection request not implemented; is the ServerReflection service enabled?`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/92", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/92/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/92/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/92", "id": 491730535, "node_id": "MDU6SXNzdWU0OTE3MzA1MzU=", "number": 92, "title": "Reflection protocol v1alpha", "user": {"login": "SoerenBusse", "id": 7796567, "node_id": "MDQ6VXNlcjc3OTY1Njc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7796567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SoerenBusse", "html_url": "https://github.com/SoerenBusse", "followers_url": "https://api.github.com/users/SoerenBusse/followers", "following_url": "https://api.github.com/users/SoerenBusse/following{/other_user}", "gists_url": "https://api.github.com/users/SoerenBusse/gists{/gist_id}", "starred_url": "https://api.github.com/users/SoerenBusse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SoerenBusse/subscriptions", "organizations_url": "https://api.github.com/users/SoerenBusse/orgs", "repos_url": "https://api.github.com/users/SoerenBusse/repos", "events_url": "https://api.github.com/users/SoerenBusse/events{/privacy}", "received_events_url": "https://api.github.com/users/SoerenBusse/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-10T15:02:03Z", "updated_at": "2019-11-08T15:17:47Z", "closed_at": "2019-09-18T09:46:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\n\r\nI can't get the reflection protocol working with grpclib. I've tried it exactly like in your example:\r\n```\r\nself.services = ServerReflection.extend(self.services)\r\ngrpc_server: Server = Server(self.services)\r\n```\r\n\r\nHowever programs like `grpcurl` only `grpcox` only reports `Failed to list services: server does not support the reflection API`. They're requesting the following method, which can't be found:\r\n```\r\n/grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo\r\nAdding (b'grpc-message', b'Method not found') to the header table\r\n```\r\n\r\nMight this be related to the change in version 0.30 `Removed v1alpha reflection protocol, v1 remains`. What was the reason to remove v1alpha reflection protocol? I can't find any references to a reflection protocol v1. https://github.com/grpc/grpc/tree/master/src/proto/grpc/reflection\r\n\r\nThank you very much in advance\r\n\r\n**Edit:**\r\nI've just tried version 0.2.5 and I can successfully use the reflection api.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/91", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/91/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/91/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/91/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/91", "id": 491022420, "node_id": "MDU6SXNzdWU0OTEwMjI0MjA=", "number": 91, "title": "AttributeError after failing to handle SSLError", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-09T10:49:35Z", "updated_at": "2019-12-23T17:02:44Z", "closed_at": "2019-12-23T17:02:44Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If a server is setup with SSL enabled and receives an invalid connection (non-SSL connection in this case), the following sequence of exceptions occurs:\r\n\r\n```\r\nSSL handshake failed\r\nprotocol: <uvloop.loop.SSLProtocol object at 0x7f0645e49bc8>\r\ntransport: <TCPTransport closed=False reading=False 0x27efa38>\r\nTraceback (most recent call last):\r\n  File \"uvloop/sslproto.pyx\", line 500, in uvloop.loop.SSLProtocol._on_handshake_complete\r\n  File \"uvloop/sslproto.pyx\", line 484, in uvloop.loop.SSLProtocol._do_handshake\r\n  File \"/usr/lib/python3.6/ssl.py\", line 689, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:852)\r\n\r\nException in callback <bound method H2Protocol.connection_lost of <grpclib.protocol.H2Protocol object at 0x7f0644d921d0>>\r\nhandle: <Handle H2Protocol.connection_lost>\r\nTraceback (most recent call last):\r\n  File \"uvloop/cbhandles.pyx\", line 68, in uvloop.loop.Handle._run\r\n  File \"<snip>/grpclib/grpclib/protocol.py\", line 635, in connection_lost\r\n    self.processor.close()\r\nAttributeError: 'H2Protocol' object has no attribute 'processor'\r\n```\r\n\r\nThe SSLError appears to prevent the `processor` from getting created on the H2Protocol object, leading to another error when the connection closes. Either the SSLError should be handled in `connection_made` (may not be possible, looking by stack trace), or `connection_lost` should check that `processor` exists.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/90", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/90/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/90/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/90", "id": 489699151, "node_id": "MDU6SXNzdWU0ODk2OTkxNTE=", "number": 90, "title": "protoc fails with Murmur RPC protocol", "user": {"login": "K900", "id": 386765, "node_id": "MDQ6VXNlcjM4Njc2NQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/386765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/K900", "html_url": "https://github.com/K900", "followers_url": "https://api.github.com/users/K900/followers", "following_url": "https://api.github.com/users/K900/following{/other_user}", "gists_url": "https://api.github.com/users/K900/gists{/gist_id}", "starred_url": "https://api.github.com/users/K900/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/K900/subscriptions", "organizations_url": "https://api.github.com/users/K900/orgs", "repos_url": "https://api.github.com/users/K900/repos", "events_url": "https://api.github.com/users/K900/events{/privacy}", "received_events_url": "https://api.github.com/users/K900/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-05T11:42:40Z", "updated_at": "2019-09-19T16:15:19Z", "closed_at": "2019-09-18T09:44:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to connect to the Murmur RPC service over gRPC with grpclib, but compiling [the .proto file](https://github.com/mumble-voip/mumble/blob/master/src/murmur/MurmurRPC.proto) fails with\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/k900/grpc_scratch/venv/bin/protoc-gen-python_grpc\", line 11, in <module>\r\n    load_entry_point('grpclib==0.3.0', 'console_scripts', 'protoc-gen-python_grpc')()\r\n  File \"/home/k900/grpc_scratch/venv/lib/python3.7/site-packages/grpclib/plugin/main.py\", line 206, in main\r\n    request_type=types_map[method.input_type],\r\nKeyError: '.MurmurRPC.Server.Query'\r\n```\r\n\r\nUsing Python 3.7, \r\n```\r\ngrpcio==1.23.0\r\ngrpcio-tools==1.23.0\r\ngrpclib==0.3.0\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/89", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/89/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/89/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/89", "id": 483273208, "node_id": "MDU6SXNzdWU0ODMyNzMyMDg=", "number": 89, "title": "Explain to me please someone why is happening with this?", "user": {"login": "healfy", "id": 39737614, "node_id": "MDQ6VXNlcjM5NzM3NjE0", "avatar_url": "https://avatars3.githubusercontent.com/u/39737614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/healfy", "html_url": "https://github.com/healfy", "followers_url": "https://api.github.com/users/healfy/followers", "following_url": "https://api.github.com/users/healfy/following{/other_user}", "gists_url": "https://api.github.com/users/healfy/gists{/gist_id}", "starred_url": "https://api.github.com/users/healfy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/healfy/subscriptions", "organizations_url": "https://api.github.com/users/healfy/orgs", "repos_url": "https://api.github.com/users/healfy/repos", "events_url": "https://api.github.com/users/healfy/events{/privacy}", "received_events_url": "https://api.github.com/users/healfy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-21T08:27:07Z", "updated_at": "2019-08-21T15:26:17Z", "closed_at": "2019-08-21T15:26:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom typing import Type, TYPE_CHECKING\r\n\r\nfrom .base import CodecBase\r\n\r\n\r\nif TYPE_CHECKING:\r\n    from .._protocols import IProtoMessage  # noqa\r\n\r\n\r\nclass ProtoCodec(CodecBase):\r\n    __content_subtype__ = 'proto'\r\n\r\n    def encode(\r\n        self,\r\n        message: 'IProtoMessage',\r\n        message_type: Type['IProtoMessage'],\r\n    ) -> bytes:\r\n        if not isinstance(message, message_type):\r\n            raise TypeError('Message must be of type {!r}, not {!r}'\r\n                            .format(message_type, type(message)))\r\n        return message.SerializeToString()\r\n\r\n    def decode(\r\n        self,\r\n        data: bytes,\r\n        message_type: Type['IProtoMessage'],\r\n    ) -> 'IProtoMessage':\r\n        return message_type.FromString(data)\r\n```\r\n\r\nI had u huge and unobvious bug with this, \r\n<class 'observer_pb2.CheckBalanceResponse'> -- is result if type(message)\r\n<class 'observer_pb2.CheckBalanceResponse'> -- message_type\r\nAnd isinstance says that is False.\r\nBecause I imported my message CheckBalanceResponse directly from the file\r\n`from rpc import observer_pb2`\r\nAnd it doesn't work, but when I changed import to\r\n`from rpc.observer_pb2_grpc import observer__pb2` everything has worked,\r\nin observer_pb2_grpc \r\n`import observer_pb2 as observer__pb2`\r\nBut in fact these are two identical message classes,\r\nWhy not just do a type check?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/88", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/88/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/88/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/88/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/88", "id": 481788624, "node_id": "MDU6SXNzdWU0ODE3ODg2MjQ=", "number": 88, "title": "TypeError: 'type' object is not subscriptable - helloworld", "user": {"login": "jwalters-gpsw", "id": 19417021, "node_id": "MDQ6VXNlcjE5NDE3MDIx", "avatar_url": "https://avatars1.githubusercontent.com/u/19417021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwalters-gpsw", "html_url": "https://github.com/jwalters-gpsw", "followers_url": "https://api.github.com/users/jwalters-gpsw/followers", "following_url": "https://api.github.com/users/jwalters-gpsw/following{/other_user}", "gists_url": "https://api.github.com/users/jwalters-gpsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwalters-gpsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwalters-gpsw/subscriptions", "organizations_url": "https://api.github.com/users/jwalters-gpsw/orgs", "repos_url": "https://api.github.com/users/jwalters-gpsw/repos", "events_url": "https://api.github.com/users/jwalters-gpsw/events{/privacy}", "received_events_url": "https://api.github.com/users/jwalters-gpsw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-16T21:14:58Z", "updated_at": "2019-08-16T21:33:35Z", "closed_at": "2019-08-16T21:33:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "When running helloworld example getting error after generating new protoc files.\r\n\r\n```\r\n    async def SayHello(self, stream: Stream[HelloRequest, HelloReply]) -> None:\r\nTypeError: 'type' object is not subscriptable\r\n\r\n```\r\nUsing:\r\n```\r\ngrpcio             1.23.0   \r\ngrpcio-tools       1.23.0   \r\ngrpclib            0.3.0\r\n```\r\nPython: 3.7.3\r\nSeems to be a difference in data types:\r\n\r\n```\r\ndiff -r helloworld/helloworld_pb2.py helloworld.save/helloworld_pb2.py\r\n94,96c94,96\r\n< HelloRequest = _reflection.GeneratedProtocolMessageType('HelloRequest', (_message.Message,), {\r\n<   'DESCRIPTOR' : _HELLOREQUEST,\r\n<   '__module__' : 'helloworld.helloworld_pb2'\r\n---\r\n> HelloRequest = _reflection.GeneratedProtocolMessageType('HelloRequest', (_message.Message,), dict(\r\n>   DESCRIPTOR = _HELLOREQUEST,\r\n>   __module__ = 'helloworld.helloworld_pb2'\r\n98c98\r\n<   })\r\n---\r\n>   ))\r\n101,103c101,103\r\n< HelloReply = _reflection.GeneratedProtocolMessageType('HelloReply', (_message.Message,), {\r\n<   'DESCRIPTOR' : _HELLOREPLY,\r\n<   '__module__' : 'helloworld.helloworld_pb2'\r\n---\r\n> HelloReply = _reflection.GeneratedProtocolMessageType('HelloReply', (_message.Message,), dict(\r\n>   DESCRIPTOR = _HELLOREPLY,\r\n>   __module__ = 'helloworld.helloworld_pb2'\r\n105c105\r\n<   })\r\n---\r\n>   ))\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/87", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/87/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/87/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/87", "id": 475314545, "node_id": "MDU6SXNzdWU0NzUzMTQ1NDU=", "number": 87, "title": "Client-side support for trailing metadata in GRPCError?", "user": {"login": "alvin-trusttoken", "id": 44851516, "node_id": "MDQ6VXNlcjQ0ODUxNTE2", "avatar_url": "https://avatars2.githubusercontent.com/u/44851516?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alvin-trusttoken", "html_url": "https://github.com/alvin-trusttoken", "followers_url": "https://api.github.com/users/alvin-trusttoken/followers", "following_url": "https://api.github.com/users/alvin-trusttoken/following{/other_user}", "gists_url": "https://api.github.com/users/alvin-trusttoken/gists{/gist_id}", "starred_url": "https://api.github.com/users/alvin-trusttoken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alvin-trusttoken/subscriptions", "organizations_url": "https://api.github.com/users/alvin-trusttoken/orgs", "repos_url": "https://api.github.com/users/alvin-trusttoken/repos", "events_url": "https://api.github.com/users/alvin-trusttoken/events{/privacy}", "received_events_url": "https://api.github.com/users/alvin-trusttoken/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-31T19:20:38Z", "updated_at": "2019-09-05T01:07:45Z", "closed_at": "2019-08-29T08:04:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you currently support getting the metadata for Error responses, on the client-side? I noticed that the `GPRCError` class (https://github.com/vmagamedov/grpclib/blob/master/grpclib/exceptions.py#L6)  only includes the status code and message.\r\n\r\nWhat I am interested is the richer GRPC status model, described in https://www.grpc.io/docs/guides/error/ and https://grpc.github.io/grpc/python/grpc_status.html#. Basically, custom protobufs can be stored in the trailing metadata, to provide more context about errors.\r\n\r\nI've already implemented this on the Server side (which for me is written in standard grpcio python), and can also read it with grpcio Python client. Would like to see if I can read the metadata in grpclib as well.\r\n\r\nGreat library by the way!\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/86", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/86/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/86/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/86", "id": 474613538, "node_id": "MDU6SXNzdWU0NzQ2MTM1Mzg=", "number": 86, "title": "TypeError: 'ABCMeta' object is not subscriptable when running example", "user": {"login": "jwalters-gpsw", "id": 19417021, "node_id": "MDQ6VXNlcjE5NDE3MDIx", "avatar_url": "https://avatars1.githubusercontent.com/u/19417021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwalters-gpsw", "html_url": "https://github.com/jwalters-gpsw", "followers_url": "https://api.github.com/users/jwalters-gpsw/followers", "following_url": "https://api.github.com/users/jwalters-gpsw/following{/other_user}", "gists_url": "https://api.github.com/users/jwalters-gpsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwalters-gpsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwalters-gpsw/subscriptions", "organizations_url": "https://api.github.com/users/jwalters-gpsw/orgs", "repos_url": "https://api.github.com/users/jwalters-gpsw/repos", "events_url": "https://api.github.com/users/jwalters-gpsw/events{/privacy}", "received_events_url": "https://api.github.com/users/jwalters-gpsw/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-30T14:19:09Z", "updated_at": "2020-04-10T10:25:26Z", "closed_at": "2019-07-30T21:51:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "TypeError: 'ABCMeta' object is not subscriptable when running helloworld example server.\r\n\r\n```\r\nbash-3.2$ python -m helloworld.server\r\nTraceback (most recent call last):\r\n  File \"/anaconda3/envs/local-python37/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/anaconda3/envs/local-python37/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/Users/jwalters/tmp/grpclib/examples/helloworld/server.py\", line 11, in <module>\r\n    class Greeter(GreeterBase):\r\n  File \"/Users/jwalters/tmp/grpclib/examples/helloworld/server.py\", line 13, in Greeter\r\n    async def SayHello(self, stream: Stream[HelloRequest, HelloReply]) -> None:\r\nTypeError: 'ABCMeta' object is not subscriptable\r\nbash-3.2$ python -m helloworld.server\r\nTraceback (most recent call last):\r\n  File \"/anaconda3/envs/local-python37/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/anaconda3/envs/local-python37/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/Users/jwalters/tmp/grpclib/examples/helloworld/server.py\", line 11, in <module>\r\n    class Greeter(GreeterBase):\r\n  File \"/Users/jwalters/tmp/grpclib/examples/helloworld/server.py\", line 13, in Greeter\r\n    async def SayHello(self, stream: Stream[HelloRequest, HelloReply]) -> None:\r\nTypeError: 'ABCMeta' object is not subscriptable\r\n```\r\nPython version: 3.7.3\r\nLibraries:\r\n```\r\nPackage           Version  \r\n----------------- ---------\r\naiohttp           3.5.4    \r\nappnope           0.1.0    \r\nasn1crypto        0.24.0   \r\nasync-timeout     3.0.1    \r\nattrs             19.1.0   \r\nbackcall          0.1.0    \r\ncertifi           2019.6.16\r\ncffi              1.12.3   \r\nchainmap          1.0.3    \r\nchardet           3.0.4    \r\ncombomethod       1.0.12   \r\ncryptography      2.7      \r\ndecorator         4.4.0    \r\ndefusedxml        0.6.0    \r\ngrpclib           0.2.5    \r\nh2                3.1.0    \r\nhpack             3.0.0    \r\nhyperframe        5.2.0    \r\nidna              2.8      \r\njedi              0.14.1   \r\nmultidict         4.5.2    \r\nnulltype          2.3.1    \r\noauthlib          3.0.2    \r\noptions           1.4.10   \r\nparso             0.5.1    \r\npbr               5.4.1    \r\npexpect           4.7.0    \r\npickleshare       0.7.5    \r\npip               19.1.1   \r\nprompt-toolkit    2.0.9    \r\nprotobuf          3.9.0    \r\nptyprocess        0.6.0    \r\npycparser         2.19     \r\nPygments          2.4.2    \r\nPyJWT             1.7.1    \r\nrequests          2.22.0   \r\nrequests-oauthlib 1.2.0    \r\nrequests-toolbelt 0.9.1    \r\nsetuptools        41.0.1   \r\nsix               1.12.0   \r\nslackclient       2.1.0    \r\ntraitlets         4.3.2    \r\nurllib3           1.25.3   \r\nwcwidth           0.1.7    \r\nwheel             0.33.4   \r\nyarl              1.3.0    \r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/85", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/85/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/85/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/85", "id": 474109598, "node_id": "MDU6SXNzdWU0NzQxMDk1OTg=", "number": 85, "title": "How to identify the client making the request? (By IP?)", "user": {"login": "ArniDagur", "id": 19227577, "node_id": "MDQ6VXNlcjE5MjI3NTc3", "avatar_url": "https://avatars3.githubusercontent.com/u/19227577?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArniDagur", "html_url": "https://github.com/ArniDagur", "followers_url": "https://api.github.com/users/ArniDagur/followers", "following_url": "https://api.github.com/users/ArniDagur/following{/other_user}", "gists_url": "https://api.github.com/users/ArniDagur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArniDagur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArniDagur/subscriptions", "organizations_url": "https://api.github.com/users/ArniDagur/orgs", "repos_url": "https://api.github.com/users/ArniDagur/repos", "events_url": "https://api.github.com/users/ArniDagur/events{/privacy}", "received_events_url": "https://api.github.com/users/ArniDagur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-29T15:16:30Z", "updated_at": "2020-05-30T13:35:02Z", "closed_at": "2020-05-30T13:35:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Say I have code like this, where clients can request an event stream through which they're perpetually notified about what's going on:\r\n```python\r\nclass MyBase(SomeBase):\r\n    def __init__(self):\r\n        super().__init__()\r\n        self._event_queues = []\r\n\r\n    async GetEventStream(self, stream):\r\n        try:\r\n            event_queue = asyncio.Queue()\r\n            self._event_queues.append(event_queue)\r\n            while True:\r\n                event = await event_queue.get()\r\n                await stream.send_message(event)\r\n        finally:\r\n            print(\"Client disconnected. Dropping connection...\")\r\n            # Remove disconnected client's event queue\r\n            self._event_queues.remove(queue)\r\n\r\n    async DoSomeAction(self, stream):\r\n        action = await stream.recv_message()\r\n\r\n        # Tell everyone connected to the server that something happened\r\n        event = Event(value=\"some action happened\")\r\n        for queue in self._event_queues:\r\n            await queue.put(event)\r\n\r\n        await stream.send_message(google.protobuf.empty_pb2.Empty())\r\n```\r\n(Note that this code was written in the Github issue editor, and thus may not run)\r\n\r\nIn this example, everyone is notified through their event stream if any one person calls `DoSomeAction`. That is fine, but what if we only wanted to notify the specific client that made the call to `DoSomeAction` (perhaps along with another connected client picked at random)?\r\n\r\nHow can you tell that the client that called `DoSomeAction` is the same as the one that called `GetEventStream` five minutes earlier? Can you perhaps access the ip address from which the request was made?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/84", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/84/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/84/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/84/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/84", "id": 471046653, "node_id": "MDU6SXNzdWU0NzEwNDY2NTM=", "number": 84, "title": "How to add Channel Credentials?", "user": {"login": "maitham", "id": 15156137, "node_id": "MDQ6VXNlcjE1MTU2MTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/15156137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maitham", "html_url": "https://github.com/maitham", "followers_url": "https://api.github.com/users/maitham/followers", "following_url": "https://api.github.com/users/maitham/following{/other_user}", "gists_url": "https://api.github.com/users/maitham/gists{/gist_id}", "starred_url": "https://api.github.com/users/maitham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maitham/subscriptions", "organizations_url": "https://api.github.com/users/maitham/orgs", "repos_url": "https://api.github.com/users/maitham/repos", "events_url": "https://api.github.com/users/maitham/events{/privacy}", "received_events_url": "https://api.github.com/users/maitham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-22T11:40:27Z", "updated_at": "2020-05-30T15:51:57Z", "closed_at": "2020-05-30T15:51:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I currently have the following code:\r\n\r\n```\r\ncomposite_credentials = grpc.composite_channel_credentials(\r\n            ssl_credentials, google_auth_credentials\r\n        )\r\nChannel(host, port, ssl=composite_credentials, loop=loop)\r\n```\r\n\r\nThis doesn't work as this returns a composite ChannelCredentials object as per https://www.grpc.io/docs/guides/auth/ . Is this currently supported? Or should I try to get the headers required for authenticating requests to google?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/83", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/83/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/83/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/83", "id": 468905711, "node_id": "MDU6SXNzdWU0Njg5MDU3MTE=", "number": 83, "title": "Do not log raised exceptions", "user": {"login": "edigaryev", "id": 85709, "node_id": "MDQ6VXNlcjg1NzA5", "avatar_url": "https://avatars1.githubusercontent.com/u/85709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edigaryev", "html_url": "https://github.com/edigaryev", "followers_url": "https://api.github.com/users/edigaryev/followers", "following_url": "https://api.github.com/users/edigaryev/following{/other_user}", "gists_url": "https://api.github.com/users/edigaryev/gists{/gist_id}", "starred_url": "https://api.github.com/users/edigaryev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edigaryev/subscriptions", "organizations_url": "https://api.github.com/users/edigaryev/orgs", "repos_url": "https://api.github.com/users/edigaryev/repos", "events_url": "https://api.github.com/users/edigaryev/events{/privacy}", "received_events_url": "https://api.github.com/users/edigaryev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-16T22:54:38Z", "updated_at": "2019-07-20T05:17:29Z", "closed_at": "2019-07-20T05:17:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "This [blog post](https://sweetness.hmmz.org/2013-11-18-use-of-logging-package-from-within-a-library.html) sums the essence of this issue pretty well:\r\n\r\n>Roughly: if your library catches and swallows an exception in a graceful, designed-for manner, then it almost certainly shouldn't be logging the event as an exception. Since exceptions are logged at the highest priority, there is no way to turn off these useless, highly verbose, gracefully handled exception messages without disabling logging for your entire package, which might result in some important messages getting hidden that really should have been logged.\r\n\r\nA notorious example:\r\n\r\nhttps://github.com/vmagamedov/grpclib/blob/a21e598334e6dc5a08e9a4729406dee451bb4d58/grpclib/server.py#L402-L413\r\n\r\nCurrently I set the root logger to `CRITICAL` level to avoid getting all these redundant messages in the program's log:\r\n\r\n```python\r\nlogging.getLogger().setLevel(logging.CRITICAL)`\r\n```\r\n\r\n...but that's clearly a workaround.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/82", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/82/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/82/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/82", "id": 468121725, "node_id": "MDU6SXNzdWU0NjgxMjE3MjU=", "number": 82, "title": "Assert statement should be avoided in runtime code", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-15T13:16:43Z", "updated_at": "2019-07-15T17:13:35Z", "closed_at": "2019-07-15T15:03:53Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running Python with optimisations enabled, `assert` statements are skipped:\r\n\r\n>The current code generator emits no code for an assert statement when optimization is requested at compile time\r\n-- https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement\r\n\r\nSo `assert` statements are fine in test code or for library debugging, but should not be used in the library code for control flow or main type checks etc. Instead, `if` and `raise` should be used to give a proper error message to library users.\r\n\r\nFor example, the check for the passed proto instance being the correct type would be skipped and also presently raises a rather unhelpful `AssertionError` with no error context, where a `TypeError` would be more useful:\r\n\r\nhttps://github.com/vmagamedov/grpclib/blob/5c1018b2b9446c8c3f105bcd23d0a5668a31c3c2/grpclib/encoding/proto.py#L18\r\n\r\n```python3\r\n# e.g. becomes\r\nif not isinstance(message, message_type):\r\n    raise TypeError('Incorrect type {} passed for proto, expected {}'.format(type(message), message_type))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/81", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/81/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/81/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/81/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/81", "id": 466385778, "node_id": "MDU6SXNzdWU0NjYzODU3Nzg=", "number": 81, "title": "Performance comparison", "user": {"login": "amir-hadi", "id": 234253, "node_id": "MDQ6VXNlcjIzNDI1Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/234253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amir-hadi", "html_url": "https://github.com/amir-hadi", "followers_url": "https://api.github.com/users/amir-hadi/followers", "following_url": "https://api.github.com/users/amir-hadi/following{/other_user}", "gists_url": "https://api.github.com/users/amir-hadi/gists{/gist_id}", "starred_url": "https://api.github.com/users/amir-hadi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amir-hadi/subscriptions", "organizations_url": "https://api.github.com/users/amir-hadi/orgs", "repos_url": "https://api.github.com/users/amir-hadi/repos", "events_url": "https://api.github.com/users/amir-hadi/events{/privacy}", "received_events_url": "https://api.github.com/users/amir-hadi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-07-10T15:46:36Z", "updated_at": "2019-07-10T22:54:04Z", "closed_at": "2019-07-10T18:26:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys,\r\n\r\nI found this library because we are experimenting with gRPC in our company. I love Python, but I am quite new to the `asyncio` world of it. I executed the helloworld proto example with `grpclib` as the only library supporting `asyncio` and I was wondering about the performance of it. We are getting 2500 req/s using this library.\r\n\r\nWith NodeJS we are getting 17000 req/s on our developer machines.\r\n\r\nThis shall not end in a comparison of python vs node or anything faster, I really want to stick with Python (and use FastAPI + Starlette as framework), but wanted to checkin first, if we are doing something wrong with this library.\r\n\r\nThanks in advance,\r\nAmir", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/79", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/79/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/79/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/79", "id": 459501994, "node_id": "MDU6SXNzdWU0NTk1MDE5OTQ=", "number": 79, "title": "How to handle request cancel exception in server wrapper __exit__?", "user": {"login": "XuHaoJun", "id": 2219470, "node_id": "MDQ6VXNlcjIyMTk0NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/2219470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XuHaoJun", "html_url": "https://github.com/XuHaoJun", "followers_url": "https://api.github.com/users/XuHaoJun/followers", "following_url": "https://api.github.com/users/XuHaoJun/following{/other_user}", "gists_url": "https://api.github.com/users/XuHaoJun/gists{/gist_id}", "starred_url": "https://api.github.com/users/XuHaoJun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XuHaoJun/subscriptions", "organizations_url": "https://api.github.com/users/XuHaoJun/orgs", "repos_url": "https://api.github.com/users/XuHaoJun/repos", "events_url": "https://api.github.com/users/XuHaoJun/events{/privacy}", "received_events_url": "https://api.github.com/users/XuHaoJun/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-06-22T19:00:19Z", "updated_at": "2019-07-22T17:56:54Z", "closed_at": "2019-06-24T22:56:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "grpclib = \"=0.3.0rc4\"\r\nException:\r\n```\r\nRequest was cancelled\r\nTraceback (most recent call last):\r\n  File \"D:\\Users\\xuhaojun\\Dropbox\\projects\\openditto\\.venv\\lib\\site-packages\\grpclib\\server.py\", line 399, in request_handler\r\n    await method_func(stream)\r\n  File \"D:\\Users\\xuhaojun\\Dropbox\\projects\\openditto\\.venv\\lib\\site-packages\\grpclib\\utils.py\", line 68, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\n```\r\ngot asyncio.CancelledError when stream task cancel, but where to handle request exception?\r\nCode:\r\n``` python\r\n    # UNARY_STREAM - response streaming RPC\r\n    async def UnaryStreamGreeting(\r\n        self,\r\n        stream: Stream[HelloRequest, HelloReply],\r\n    ) -> None:\r\n        try:\r\n            request = await stream.recv_message()\r\n            assert request is not None\r\n            notificationQueue = asyncio.Queue()\r\n            self._queues[stream] = notificationQueue\r\n            while True:\r\n                notification = await notificationQueue.get()\r\n                await stream.send_message(\r\n                    HelloReply(message=f'Notification: {notification}!'))\r\n        except asyncio.CancelledError:\r\n            pass\r\n        finally:\r\n            del self._queues[stream]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/78", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/78/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/78/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/78", "id": 455770990, "node_id": "MDU6SXNzdWU0NTU3NzA5OTA=", "number": 78, "title": "Potential Race between EventsProcessor.close and EventsProcessor.register.release_stream", "user": {"login": "lawrencelomax", "id": 217883, "node_id": "MDQ6VXNlcjIxNzg4Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/217883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lawrencelomax", "html_url": "https://github.com/lawrencelomax", "followers_url": "https://api.github.com/users/lawrencelomax/followers", "following_url": "https://api.github.com/users/lawrencelomax/following{/other_user}", "gists_url": "https://api.github.com/users/lawrencelomax/gists{/gist_id}", "starred_url": "https://api.github.com/users/lawrencelomax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lawrencelomax/subscriptions", "organizations_url": "https://api.github.com/users/lawrencelomax/orgs", "repos_url": "https://api.github.com/users/lawrencelomax/repos", "events_url": "https://api.github.com/users/lawrencelomax/events{/privacy}", "received_events_url": "https://api.github.com/users/lawrencelomax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-06-13T14:21:22Z", "updated_at": "2019-10-22T06:58:21Z", "closed_at": "2019-10-22T06:58:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nFirstly thanks for the awesome library. Having a pure-python implementation of grpc is very [important for us](https://github.com/facebook/idb)!\r\n\r\nWe've been seeing a level of \"Connection was closed\" errors and believe that we've isolated this to some internal races in the `EventsProcessor` code. Since we were pretty sure that the server was well-formed, we executed an identical request with the `grpcio` library and found that we couldn't reproduce this behaviour.\r\n\r\nIn here I can see [that there is a streams](https://github.com/vmagamedov/grpclib/blob/master/grpclib/protocol.py#L459) dictionary on `EventsProcessor`. This dictionary [is added to in](https://github.com/vmagamedov/grpclib/blob/master/grpclib/protocol.py#L469) `EventsProcessor.register` and de-registered in a [callback that this method returns](https://github.com/vmagamedov/grpclib/blob/master/grpclib/protocol.py#L473).\r\n\r\nIf there are any active streams at the time that `EventsProcessor.close` is called, [each of the current streams will be marked with \"Connection was closed\"](https://github.com/vmagamedov/grpclib/blob/master/grpclib/protocol.py#L483). When profiling this, we noticed that the ordering of `EventsProcessor.close` and `release_stream` could vary. If `close` was called before `release_stream`, we'd see this error propagate.\r\n\r\nNot too sure of much of the internals here, but I assume that the reason this exists is that:\r\n- There can be many streams per connection.\r\n- If any streams are \"active\" when a connection has closed, that should be reported as a fault with the underlying TCP transport.\r\n- When a stream is \"ended\" it will be removed from the set of active streams and will therefore not error out when a connection is closed\r\n- There may be some variance in timing between the delivery of each of these events.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/77", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/77/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/77/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/77", "id": 454019654, "node_id": "MDU6SXNzdWU0NTQwMTk2NTQ=", "number": 77, "title": "cannot generate helloworld_grpc.py file", "user": {"login": "zhangyucumt", "id": 16399713, "node_id": "MDQ6VXNlcjE2Mzk5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16399713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhangyucumt", "html_url": "https://github.com/zhangyucumt", "followers_url": "https://api.github.com/users/zhangyucumt/followers", "following_url": "https://api.github.com/users/zhangyucumt/following{/other_user}", "gists_url": "https://api.github.com/users/zhangyucumt/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhangyucumt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhangyucumt/subscriptions", "organizations_url": "https://api.github.com/users/zhangyucumt/orgs", "repos_url": "https://api.github.com/users/zhangyucumt/repos", "events_url": "https://api.github.com/users/zhangyucumt/events{/privacy}", "received_events_url": "https://api.github.com/users/zhangyucumt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-10T06:38:32Z", "updated_at": "2019-06-10T11:57:49Z", "closed_at": "2019-06-10T11:57:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "when I run \r\n`python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./helloworld.proto`, I got two files `helloworld_pb2.py` and `helloworld_pb2_grpc.py`.  How can I get `helloworld_grpc.py` like examples?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/76", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/76/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/76/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/76/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/76", "id": 451399202, "node_id": "MDU6SXNzdWU0NTEzOTkyMDI=", "number": 76, "title": "How can i generate sync Stub?", "user": {"login": "Ehco1996", "id": 24697284, "node_id": "MDQ6VXNlcjI0Njk3Mjg0", "avatar_url": "https://avatars0.githubusercontent.com/u/24697284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ehco1996", "html_url": "https://github.com/Ehco1996", "followers_url": "https://api.github.com/users/Ehco1996/followers", "following_url": "https://api.github.com/users/Ehco1996/following{/other_user}", "gists_url": "https://api.github.com/users/Ehco1996/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ehco1996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ehco1996/subscriptions", "organizations_url": "https://api.github.com/users/Ehco1996/orgs", "repos_url": "https://api.github.com/users/Ehco1996/repos", "events_url": "https://api.github.com/users/Ehco1996/events{/privacy}", "received_events_url": "https://api.github.com/users/Ehco1996/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-03T10:09:50Z", "updated_at": "2019-06-03T10:20:23Z", "closed_at": "2019-06-03T10:20:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "i found that `protoc-gen-python_grpc` will be replaced  after install grpclib,\r\n\r\nso if i run `python3 -m grpc_tools.protoc -I. --python_out=. -python_grpc_out=. xx.proto`\r\n\r\nthe generated code is in async way\uff0cbut i want a sync stub .\r\n\r\nIn other words, I want to a async grpc server but **sync** client !\r\n\r\nso , can you help out ? thanks!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/75", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/75/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/75/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/75", "id": 450337478, "node_id": "MDU6SXNzdWU0NTAzMzc0Nzg=", "number": 75, "title": "Fix client.Stream methods to raise proper GRPCError when possible", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-30T14:31:40Z", "updated_at": "2019-06-28T15:50:29Z", "closed_at": "2019-06-28T15:30:05Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently only `client.Stream.recv_initial_metadata()` method handles properly the case, when we receive trailers with subsequent `RST_STREAM` frame. Other methods raise `StreamTerminatedError` instead of `GRPCError`, which makes it impossible to handle some expected gRPC errors (e.g. `ABORTED`).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/74", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/74/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/74/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/74", "id": 447539824, "node_id": "MDU6SXNzdWU0NDc1Mzk4MjQ=", "number": 74, "title": "FlowControlError when streaming file", "user": {"login": "zeyadsalloum", "id": 939436, "node_id": "MDQ6VXNlcjkzOTQzNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/939436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeyadsalloum", "html_url": "https://github.com/zeyadsalloum", "followers_url": "https://api.github.com/users/zeyadsalloum/followers", "following_url": "https://api.github.com/users/zeyadsalloum/following{/other_user}", "gists_url": "https://api.github.com/users/zeyadsalloum/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeyadsalloum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeyadsalloum/subscriptions", "organizations_url": "https://api.github.com/users/zeyadsalloum/orgs", "repos_url": "https://api.github.com/users/zeyadsalloum/repos", "events_url": "https://api.github.com/users/zeyadsalloum/events{/privacy}", "received_events_url": "https://api.github.com/users/zeyadsalloum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-23T09:18:26Z", "updated_at": "2019-05-23T13:17:14Z", "closed_at": "2019-05-23T13:11:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nI have been using grpclib to stream files to a grpc server. and every so often i get an error that looks like\r\n`Cannot send 71786 bytes, flow control window is -293402.`\r\nI can see that this is coming from h2 [here](https://github.com/python-hyper/hyper-h2/blob/master/h2/connection.py#L847). any clue what might be happening?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/73", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/73/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/73/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/73/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/73", "id": 447098896, "node_id": "MDU6SXNzdWU0NDcwOTg4OTY=", "number": 73, "title": "Is it possible to do multiprocessing using grpclib? ", "user": {"login": "maitham", "id": 15156137, "node_id": "MDQ6VXNlcjE1MTU2MTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/15156137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maitham", "html_url": "https://github.com/maitham", "followers_url": "https://api.github.com/users/maitham/followers", "following_url": "https://api.github.com/users/maitham/following{/other_user}", "gists_url": "https://api.github.com/users/maitham/gists{/gist_id}", "starred_url": "https://api.github.com/users/maitham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maitham/subscriptions", "organizations_url": "https://api.github.com/users/maitham/orgs", "repos_url": "https://api.github.com/users/maitham/repos", "events_url": "https://api.github.com/users/maitham/events{/privacy}", "received_events_url": "https://api.github.com/users/maitham/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-22T12:09:51Z", "updated_at": "2019-06-03T21:28:15Z", "closed_at": "2019-06-03T21:28:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to do multiprocessing using grpclib for cpu intensive tasks? If so can anyone provide an example?  Something similar to this .. https://github.com/grpc/grpc/blob/master/examples/python/multiprocessing/server.py", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/72", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/72/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/72/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/72/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/72", "id": 441311045, "node_id": "MDU6SXNzdWU0NDEzMTEwNDU=", "number": 72, "title": "Try to make loop argument optional", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-07T15:56:02Z", "updated_at": "2019-05-07T19:54:30Z", "closed_at": "2019-05-07T19:54:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/71", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/71/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/71/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/71", "id": 441074853, "node_id": "MDU6SXNzdWU0NDEwNzQ4NTM=", "number": 71, "title": "Can server side server be a worker for gunicorn?", "user": {"login": "jiamo", "id": 732751, "node_id": "MDQ6VXNlcjczMjc1MQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/732751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jiamo", "html_url": "https://github.com/jiamo", "followers_url": "https://api.github.com/users/jiamo/followers", "following_url": "https://api.github.com/users/jiamo/following{/other_user}", "gists_url": "https://api.github.com/users/jiamo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jiamo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jiamo/subscriptions", "organizations_url": "https://api.github.com/users/jiamo/orgs", "repos_url": "https://api.github.com/users/jiamo/repos", "events_url": "https://api.github.com/users/jiamo/events{/privacy}", "received_events_url": "https://api.github.com/users/jiamo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-07T07:11:24Z", "updated_at": "2019-05-13T08:38:56Z", "closed_at": "2019-05-13T08:38:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is single process to run server . Is it possible to make server process like a sanic worker which can be a worker in gunicorn?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/70", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/70/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/70/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/70", "id": 432012131, "node_id": "MDU6SXNzdWU0MzIwMTIxMzE=", "number": 70, "title": "Fix trailers-only response", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-11T13:04:33Z", "updated_at": "2019-05-14T19:09:54Z", "closed_at": "2019-05-14T19:09:54Z", "author_association": "OWNER", "active_lock_reason": null, "body": "According to the spec trailers-only responses looks like this:\r\n```\r\nTrailers-Only \u2192 HTTP-Status Content-Type Trailers\r\n```\r\nOur current implementation doesn't sends required `content-type` header.\r\n\r\n`Stream.recv_initial_metadata` method on the client-side should be modified if it is possible to send trailers-only response without errors. And trailing metadata probably should be stored in the `Stream.trailing_metadata` property.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/69", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/69/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/69/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/69", "id": 431595781, "node_id": "MDU6SXNzdWU0MzE1OTU3ODE=", "number": 69, "title": "Empty stream not permitted", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-04-10T16:22:04Z", "updated_at": "2019-05-14T19:08:42Z", "closed_at": "2019-05-14T19:08:42Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider a service defined as the following:\r\n\r\n```\r\nservice blah {\r\n     rpc ListSomeObjects(SomeRequest) returns (stream SomeObject) {}\r\n}\r\n```\r\n\r\nThis is a common usage pattern, such as returning a directory listing and is part of the interoperability tests from core grpc: https://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md#empty_stream. If no objects exist to return, the stream should return no messages, but also no error. However, with grpclib, if the stream sends no messages and ends, the library will force send a `UNKNOWN` error:\r\n\r\nhttps://github.com/vmagamedov/grpclib/blob/66de865a2c1cf5d9cc147cb5761ad2d0f07f7f19/grpclib/server.py#L239-L241\r\n\r\nManually trying to send the trailers as `OK` with `send_trailing_metadata` also fails, as the same check exists here:\r\n\r\nhttps://github.com/vmagamedov/grpclib/blob/66de865a2c1cf5d9cc147cb5761ad2d0f07f7f19/grpclib/server.py#L179-L181\r\n\r\nTo fix, the library should only automatically send `UNKNOWN` if no messages have been sent _and_ the response type is not streaming. Likewise for the check in `send_trailing_metadata`, which should allow sending OK for empty streaming responses.\r\n\r\nThere may also be similar changes needed in the client side, but I've not checked.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/68", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/68/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/68/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/68", "id": 428767268, "node_id": "MDU6SXNzdWU0Mjg3NjcyNjg=", "number": 68, "title": "Channel does not close", "user": {"login": "zeyadsalloum", "id": 939436, "node_id": "MDQ6VXNlcjkzOTQzNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/939436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeyadsalloum", "html_url": "https://github.com/zeyadsalloum", "followers_url": "https://api.github.com/users/zeyadsalloum/followers", "following_url": "https://api.github.com/users/zeyadsalloum/following{/other_user}", "gists_url": "https://api.github.com/users/zeyadsalloum/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeyadsalloum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeyadsalloum/subscriptions", "organizations_url": "https://api.github.com/users/zeyadsalloum/orgs", "repos_url": "https://api.github.com/users/zeyadsalloum/repos", "events_url": "https://api.github.com/users/zeyadsalloum/events{/privacy}", "received_events_url": "https://api.github.com/users/zeyadsalloum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-03T13:26:58Z", "updated_at": "2019-10-22T07:08:29Z", "closed_at": "2019-10-22T07:08:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "This lib is great btw! and I am glad i tried it out. I have a small issue with closing channels though. I can't seem to close the channel at all. I tried calling close() on my object's __del__ and i tried to make my object a context manager and calling close() on __exit__ but i just get an exception that the run loop has closed. \r\nI can see that the channel gets closed anyways on its __del__ so why not just remove the warning?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/67", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/67/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/67/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/67", "id": 427213679, "node_id": "MDU6SXNzdWU0MjcyMTM2Nzk=", "number": 67, "title": "Flow control exhaustion if recv_message missed", "user": {"login": "aaliddell", "id": 9061354, "node_id": "MDQ6VXNlcjkwNjEzNTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/9061354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaliddell", "html_url": "https://github.com/aaliddell", "followers_url": "https://api.github.com/users/aaliddell/followers", "following_url": "https://api.github.com/users/aaliddell/following{/other_user}", "gists_url": "https://api.github.com/users/aaliddell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaliddell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaliddell/subscriptions", "organizations_url": "https://api.github.com/users/aaliddell/orgs", "repos_url": "https://api.github.com/users/aaliddell/repos", "events_url": "https://api.github.com/users/aaliddell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaliddell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-03-29T23:33:25Z", "updated_at": "2019-04-18T19:25:10Z", "closed_at": "2019-04-18T17:05:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If `recv_message` is not called on a stream prior to the end of the handler, the connection will eventually deadlock due to flow control window exhaustion. The situations where this may occur are:\r\n- An exception is raised in the handler prior to calling `recv_message` or prior to the end of stream in a non-unary method\r\n- `recv_message` is never called, perhaps due to using an [Empty](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/empty.proto) proto message as the request type and hence forgetting to explicitly receive the empty message that takes a few bytes of flow control window (this just tripped me up...)\r\n- Possibly, but not tested: if the deadline is exceeded prior to the call to `recv_message`\r\n\r\nWhilst this is indeed partly [documented](https://grpclib.readthedocs.io/en/latest/server.html#grpclib.server.Stream.recv_message) as being the case, this is a rather prickly issue, as it'll only occur after the server has been running successfully for a while (~13000 requests for Empty message) and give no indication as to what has occurred. In the above situations, as `recv_message` is not called (or not called enough times to match the client), `Buffer._ack` is not called for all the received data and the client slowly loses its flow control window until deadlock occurs. I call this deadlock because at the point the window becomes exhausted, the troublesome handlers have already completed (possibly hours or days ago) and their streams closed, so there is now no way of re-commencing communication with the client due to there being no method of acknowledging the blocked data (the only solution in this case is reconnecting the client)\r\n\r\nA couple of possibilities (both could be used if desired):\r\n- If the handler completes and the stream ends, any data remaining in the `Buffer` should be acknowledged, as this data will now never be read but is currently considered unacknowledged indefinitely. The exact placement of this check I am not sure of though, as there appears to be a few places it may suit; possibly in `Stream.end`?\r\n- If the handler completes and the streams ends with data remaining unread in the `Buffer`, an error/warning should be raised\r\n\r\nOne of these fixes the issue, the other fixes the broken developer :smile: \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/63", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/63/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/63/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/63", "id": 425407429, "node_id": "MDU6SXNzdWU0MjU0MDc0Mjk=", "number": 63, "title": "Error when creating stub", "user": {"login": "sawdiggy", "id": 10037746, "node_id": "MDQ6VXNlcjEwMDM3NzQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/10037746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sawdiggy", "html_url": "https://github.com/sawdiggy", "followers_url": "https://api.github.com/users/sawdiggy/followers", "following_url": "https://api.github.com/users/sawdiggy/following{/other_user}", "gists_url": "https://api.github.com/users/sawdiggy/gists{/gist_id}", "starred_url": "https://api.github.com/users/sawdiggy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sawdiggy/subscriptions", "organizations_url": "https://api.github.com/users/sawdiggy/orgs", "repos_url": "https://api.github.com/users/sawdiggy/repos", "events_url": "https://api.github.com/users/sawdiggy/events{/privacy}", "received_events_url": "https://api.github.com/users/sawdiggy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-26T13:08:07Z", "updated_at": "2019-03-26T15:04:49Z", "closed_at": "2019-03-26T13:56:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Every time I try to use the channel generated by this client library, I get the following error\r\n\r\n```Exception has occurred: AttributeError\r\n'Channel' object has no attribute 'unary_unary'\r\n\r\nAll this happens when I attempt to create a client to TF serving\r\n\r\n```\r\n    loop = asyncio.get_event_loop()\r\n    channel = Channel('0.0.0.0', 9000, loop=loop)\r\n    stub =  PredictionServiceStub(channel)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/61", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/61/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/61/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/61", "id": 420350778, "node_id": "MDU6SXNzdWU0MjAzNTA3Nzg=", "number": 61, "title": "What is the best way to share a Channel between multiple gRPC requests?", "user": {"login": "hyunilmmt", "id": 35283894, "node_id": "MDQ6VXNlcjM1MjgzODk0", "avatar_url": "https://avatars3.githubusercontent.com/u/35283894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyunilmmt", "html_url": "https://github.com/hyunilmmt", "followers_url": "https://api.github.com/users/hyunilmmt/followers", "following_url": "https://api.github.com/users/hyunilmmt/following{/other_user}", "gists_url": "https://api.github.com/users/hyunilmmt/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyunilmmt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyunilmmt/subscriptions", "organizations_url": "https://api.github.com/users/hyunilmmt/orgs", "repos_url": "https://api.github.com/users/hyunilmmt/repos", "events_url": "https://api.github.com/users/hyunilmmt/events{/privacy}", "received_events_url": "https://api.github.com/users/hyunilmmt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-13T07:18:49Z", "updated_at": "2019-03-26T21:01:46Z", "closed_at": "2019-03-26T21:01:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a service that needs to reuse/share a single `Channel` instance between multiple requests, often simultaneously. The service wraps all gRPC calls with a context manager, and it sets its `channel` to `None` upon `__aexit__`. This results in calling `Channel`'s `__del__` method, and closing the connection. This is causing a race condition between simultaneous requests because the channel connection is closed while some of these requests are still using it.\r\n\r\nDo you have any suggestions to resolve this issue wisely?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/60", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/60/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/60/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/60/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/60", "id": 419223100, "node_id": "MDU6SXNzdWU0MTkyMjMxMDA=", "number": 60, "title": "How can I determine on the client side that server side is fall", "user": {"login": "Valentin-Miroshnichenko", "id": 10279529, "node_id": "MDQ6VXNlcjEwMjc5NTI5", "avatar_url": "https://avatars1.githubusercontent.com/u/10279529?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Valentin-Miroshnichenko", "html_url": "https://github.com/Valentin-Miroshnichenko", "followers_url": "https://api.github.com/users/Valentin-Miroshnichenko/followers", "following_url": "https://api.github.com/users/Valentin-Miroshnichenko/following{/other_user}", "gists_url": "https://api.github.com/users/Valentin-Miroshnichenko/gists{/gist_id}", "starred_url": "https://api.github.com/users/Valentin-Miroshnichenko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Valentin-Miroshnichenko/subscriptions", "organizations_url": "https://api.github.com/users/Valentin-Miroshnichenko/orgs", "repos_url": "https://api.github.com/users/Valentin-Miroshnichenko/repos", "events_url": "https://api.github.com/users/Valentin-Miroshnichenko/events{/privacy}", "received_events_url": "https://api.github.com/users/Valentin-Miroshnichenko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-10T19:36:11Z", "updated_at": "2019-03-26T21:02:27Z", "closed_at": "2019-03-26T21:02:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello. I would like to know. How can I determine on the client side that server side is fall (server process was killed). I mean get exception on client side if server side not available?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/59", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/59/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/59/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/59", "id": 417705506, "node_id": "MDU6SXNzdWU0MTc3MDU1MDY=", "number": 59, "title": "How to send metadata from client?", "user": {"login": "zeyadsalloum", "id": 939436, "node_id": "MDQ6VXNlcjkzOTQzNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/939436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeyadsalloum", "html_url": "https://github.com/zeyadsalloum", "followers_url": "https://api.github.com/users/zeyadsalloum/followers", "following_url": "https://api.github.com/users/zeyadsalloum/following{/other_user}", "gists_url": "https://api.github.com/users/zeyadsalloum/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeyadsalloum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeyadsalloum/subscriptions", "organizations_url": "https://api.github.com/users/zeyadsalloum/orgs", "repos_url": "https://api.github.com/users/zeyadsalloum/repos", "events_url": "https://api.github.com/users/zeyadsalloum/events{/privacy}", "received_events_url": "https://api.github.com/users/zeyadsalloum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-06T09:34:05Z", "updated_at": "2019-03-06T16:35:51Z", "closed_at": "2019-03-06T16:35:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "is there an example of how the client would send metadata? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/58", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/58/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/58/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/58", "id": 409372507, "node_id": "MDU6SXNzdWU0MDkzNzI1MDc=", "number": 58, "title": "Stream response method memory leak", "user": {"login": "sky01230", "id": 47568241, "node_id": "MDQ6VXNlcjQ3NTY4MjQx", "avatar_url": "https://avatars0.githubusercontent.com/u/47568241?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sky01230", "html_url": "https://github.com/sky01230", "followers_url": "https://api.github.com/users/sky01230/followers", "following_url": "https://api.github.com/users/sky01230/following{/other_user}", "gists_url": "https://api.github.com/users/sky01230/gists{/gist_id}", "starred_url": "https://api.github.com/users/sky01230/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sky01230/subscriptions", "organizations_url": "https://api.github.com/users/sky01230/orgs", "repos_url": "https://api.github.com/users/sky01230/repos", "events_url": "https://api.github.com/users/sky01230/events{/privacy}", "received_events_url": "https://api.github.com/users/sky01230/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-02-12T15:59:14Z", "updated_at": "2019-03-31T18:36:59Z", "closed_at": "2019-03-31T18:36:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey!\r\nI'm using stream response method with timeout.\r\n```python\r\nwhile True:\r\n    try:\r\n        channel = Channel(**HOST, loop=asyncio.get_event_loop(), ssl=my_ssl_context())\r\n        stub = ServerStub(channel)\r\n        async with stub.my_channel.open(timeout=1) as stream:\r\n            await stream.send_message(sync_queue, end=True)\r\n            async for message in stream:\r\n                print(message)\r\n    except Exception:\r\n        logger.error('Error', exc_info=True)\r\n```\r\nIf server does not send response in 1 second, i received an exception \"Deadline exceed\" and i try to connect again. This quickly ends all RAM memory.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/57", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/57/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/57/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/57", "id": 408645336, "node_id": "MDU6SXNzdWU0MDg2NDUzMzY=", "number": 57, "title": "How to keep the client waiting for the server to finish the task", "user": {"login": "chaojizhangdaxin", "id": 39790868, "node_id": "MDQ6VXNlcjM5NzkwODY4", "avatar_url": "https://avatars0.githubusercontent.com/u/39790868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chaojizhangdaxin", "html_url": "https://github.com/chaojizhangdaxin", "followers_url": "https://api.github.com/users/chaojizhangdaxin/followers", "following_url": "https://api.github.com/users/chaojizhangdaxin/following{/other_user}", "gists_url": "https://api.github.com/users/chaojizhangdaxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/chaojizhangdaxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chaojizhangdaxin/subscriptions", "organizations_url": "https://api.github.com/users/chaojizhangdaxin/orgs", "repos_url": "https://api.github.com/users/chaojizhangdaxin/repos", "events_url": "https://api.github.com/users/chaojizhangdaxin/events{/privacy}", "received_events_url": "https://api.github.com/users/chaojizhangdaxin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-11T06:05:59Z", "updated_at": "2019-03-01T09:51:29Z", "closed_at": "2019-03-01T09:51:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\nWhy does my server report errors when it processes tasks? Accept the picture uploaded by the client, and the server calls the third party package to identify the picture. Finally, the result of recognition is returned to the client.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/56", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/56/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/56/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/56", "id": 408535704, "node_id": "MDU6SXNzdWU0MDg1MzU3MDQ=", "number": 56, "title": "Support of asynchronous bidirectional streaming", "user": {"login": "mr2dark", "id": 3892442, "node_id": "MDQ6VXNlcjM4OTI0NDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3892442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mr2dark", "html_url": "https://github.com/mr2dark", "followers_url": "https://api.github.com/users/mr2dark/followers", "following_url": "https://api.github.com/users/mr2dark/following{/other_user}", "gists_url": "https://api.github.com/users/mr2dark/gists{/gist_id}", "starred_url": "https://api.github.com/users/mr2dark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mr2dark/subscriptions", "organizations_url": "https://api.github.com/users/mr2dark/orgs", "repos_url": "https://api.github.com/users/mr2dark/repos", "events_url": "https://api.github.com/users/mr2dark/events{/privacy}", "received_events_url": "https://api.github.com/users/mr2dark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-10T13:35:32Z", "updated_at": "2019-03-01T10:08:37Z", "closed_at": "2019-03-01T10:08:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would call the current implementation (`grpclib==0.2.2rc2`) of `grpclib.client.StreamStreamMethod.__call__` rather synchronous.\r\nThe input messages are considered as of known size and the output items are gathered in a list before return.\r\nFor purposes like realtime speech recognition both the mentioned features are not applicable.\r\nI actually managed to workaround this working directly with the stream being returned by `grpclib.client.StreamStreamMethod.open()` method.\r\nPlease see the illustrative code snippet below.\r\nCurrently the code snippet uses the separate task for sending messages while processing received messages in the main body but this can be done vice versa as well. \r\n\r\nAnd this code snippet fails with `RuntimeError('Concurrent call detected')` because `Wrapper` supports only one task to be cancelled. Actually `Wrapper` doesn't cancel anything but `DeadlineWrapper` does.\r\nFor testing purposes I removed the `Wrapper`'s check for concurrent calls and everything works fine. \r\n\r\nSo in order for gprclib to properly support asynchronous bidirectional streaming I propose to implement the following:\r\n1. Remove the concurrent call check for `Wrapper` as it's not used at this level anyway\r\n1. Add support for several tasks to be cancelled via `DeadlineWrapper`\r\n1. Or add support for several tasks to be taken into account in `Wrapper`\r\n\r\nAlso you can consider `grpclib.client.StreamStreamMethod.__call__` to be implemented in the way closer to logic presented in the snippet below.\r\n1. Make `grpclib.client.StreamStreamMethod.__call__` accepting an asyncronous iterator for messages to be sent and converting it to a task\r\n1. Make it returning the stream (not the list) and the message sending task so it can be managed later (cancelled, awaited etc.)\r\n\r\nI do understand that this can result in rather overcomplicated API so I don't insist on this.\r\n \r\n```python\r\nloop = asyncio.get_event_loop()\r\nchannel = grpclib.client.Channel(server, port, loop=loop, ssl=True)\r\nstub = ServiceStub(channel)\r\n\r\nasync def stream_sender(stream, ...):\r\n    data = await <get more data>\r\n    while data is not None:\r\n        await stream.send_message(Request(content=data))\r\n        data = await <get more data>\r\n    await stream.end()\r\n\r\nasync with stub.Recognize.open() as stream:\r\n    send_task = asyncio.ensure_future(stream_sender(stream, ...))\r\n    async for response in stream:\r\n        <process the response>\r\n    await send_task\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/55", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/55/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/55/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/55", "id": 403386924, "node_id": "MDU6SXNzdWU0MDMzODY5MjQ=", "number": 55, "title": "exception: KeyError: <class 'h2.events.PingReceived'>", "user": {"login": "x1m", "id": 6183880, "node_id": "MDQ6VXNlcjYxODM4ODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/6183880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/x1m", "html_url": "https://github.com/x1m", "followers_url": "https://api.github.com/users/x1m/followers", "following_url": "https://api.github.com/users/x1m/following{/other_user}", "gists_url": "https://api.github.com/users/x1m/gists{/gist_id}", "starred_url": "https://api.github.com/users/x1m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/x1m/subscriptions", "organizations_url": "https://api.github.com/users/x1m/orgs", "repos_url": "https://api.github.com/users/x1m/repos", "events_url": "https://api.github.com/users/x1m/events{/privacy}", "received_events_url": "https://api.github.com/users/x1m/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-26T01:01:07Z", "updated_at": "2019-01-26T09:06:08Z", "closed_at": "2019-01-26T09:06:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, thanks for this awesome lib!\r\n\r\nMy server is suddenly raising an exception. No other requests can be processed.\r\nNot sure when and where this came from.. cannot reproduce this exception.\r\n\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/protocol.py\", line 407, in process\r\n    proc = self.processors[event.__class__]\r\nKeyError: <class 'h2.events.PingReceived'>\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/asyncio/selector_events.py\", line 813, in _read_ready__data_received\r\n    self._protocol.data_received(data)\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/protocol.py\", line 509, in data_received\r\n    self.processor.process(event)\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/protocol.py\", line 409, in process\r\n    raise NotImplementedError(event)\r\nNotImplementedError: <PingReceived ping_data:02041010090e0707>\r\n```\r\n\r\n\r\nI use:\r\nPython 3.7.2\r\ngrpclib==0.2.1\r\n4.14.65+ x86_64 GNU/Linux Debian 9.6\r\n\r\nDoes the **0.2.2rc** version of the library fix the issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/54", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/54/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/54/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/54/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/54", "id": 403147076, "node_id": "MDU6SXNzdWU0MDMxNDcwNzY=", "number": 54, "title": "Support gRPC keepalive ping", "user": {"login": "edigaryev", "id": 85709, "node_id": "MDQ6VXNlcjg1NzA5", "avatar_url": "https://avatars1.githubusercontent.com/u/85709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edigaryev", "html_url": "https://github.com/edigaryev", "followers_url": "https://api.github.com/users/edigaryev/followers", "following_url": "https://api.github.com/users/edigaryev/following{/other_user}", "gists_url": "https://api.github.com/users/edigaryev/gists{/gist_id}", "starred_url": "https://api.github.com/users/edigaryev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edigaryev/subscriptions", "organizations_url": "https://api.github.com/users/edigaryev/orgs", "repos_url": "https://api.github.com/users/edigaryev/repos", "events_url": "https://api.github.com/users/edigaryev/events{/privacy}", "received_events_url": "https://api.github.com/users/edigaryev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-01-25T12:57:10Z", "updated_at": "2019-01-25T18:23:26Z", "closed_at": "2019-01-25T16:16:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to serve an RPC using grpclib 0.2.1 and receiving connections from clients running gRPC 1.18.0, I get the following exceptions:\r\n\r\n```\r\nFatal error: protocol.data_received() call failed.\r\nprotocol: <grpclib.protocol.H2Protocol object at 0x7f799dda4048>\r\ntransport: <_SelectorSocketTransport fd=7 read=polling write=<idle, bufsize=0>>\r\nTraceback (most recent call last):\r\n  File \"[...]/lib/python3.7/site-packages/grpclib/protocol.py\", line 407, in process\r\n    proc = self.processors[event.__class__]\r\nKeyError: <class 'h2.events.PingReceived'>\r\n```\r\n\r\nIt seems that gRPC [keepalive mechanism](https://github.com/grpc/grpc/blob/master/doc/keepalive.md) that was added last year into gRPC is not fully supported yet.\r\n\r\nAlso, perhaps there should be a distinction between critical and non-critical protocol extensions, like in [X.509](https://tools.ietf.org/html/rfc5280#section-4.2), but I'm not sure if this is the case for gRPC protocol.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/53", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/53/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/53/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/53", "id": 400689007, "node_id": "MDU6SXNzdWU0MDA2ODkwMDc=", "number": 53, "title": "Documentation on setting custom error codes", "user": {"login": "deanott", "id": 20297406, "node_id": "MDQ6VXNlcjIwMjk3NDA2", "avatar_url": "https://avatars3.githubusercontent.com/u/20297406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deanott", "html_url": "https://github.com/deanott", "followers_url": "https://api.github.com/users/deanott/followers", "following_url": "https://api.github.com/users/deanott/following{/other_user}", "gists_url": "https://api.github.com/users/deanott/gists{/gist_id}", "starred_url": "https://api.github.com/users/deanott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deanott/subscriptions", "organizations_url": "https://api.github.com/users/deanott/orgs", "repos_url": "https://api.github.com/users/deanott/repos", "events_url": "https://api.github.com/users/deanott/events{/privacy}", "received_events_url": "https://api.github.com/users/deanott/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1198986203, "node_id": "MDU6TGFiZWwxMTk4OTg2MjAz", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/doc", "name": "doc", "color": "aba5ef", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-18T11:39:00Z", "updated_at": "2019-01-21T07:11:03Z", "closed_at": "2019-01-21T07:11:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, new to `grpc` protocols and I was trying to understand how to set explicit `error_codes` but could not find a reference in the docs.\r\n\r\nFor example, in `grpc` I could do the following:\r\n```\r\ndef GRPCMethod(self, request, context):\r\n    context.set_details(\"Ouch!\")\r\n    context.set_code(grpc.StatusCode.INVALID_ARGUMENT)\r\n    return response\r\n```\r\nHow would I do the following in `grpclib`? or what is the best practice for this?\r\n\r\nThe exact situtation I have is my server code does a check to ensure that a message string has a certain number of characters and if it does not I want to return a `INVALID_ARGUMENT` and a message explaining the reason. \r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/52", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/52/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/52/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/52", "id": 400660449, "node_id": "MDU6SXNzdWU0MDA2NjA0NDk=", "number": 52, "title": "Stream reset by remote party", "user": {"login": "nbonnotte", "id": 9929982, "node_id": "MDQ6VXNlcjk5Mjk5ODI=", "avatar_url": "https://avatars3.githubusercontent.com/u/9929982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbonnotte", "html_url": "https://github.com/nbonnotte", "followers_url": "https://api.github.com/users/nbonnotte/followers", "following_url": "https://api.github.com/users/nbonnotte/following{/other_user}", "gists_url": "https://api.github.com/users/nbonnotte/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbonnotte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbonnotte/subscriptions", "organizations_url": "https://api.github.com/users/nbonnotte/orgs", "repos_url": "https://api.github.com/users/nbonnotte/repos", "events_url": "https://api.github.com/users/nbonnotte/events{/privacy}", "received_events_url": "https://api.github.com/users/nbonnotte/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1198986203, "node_id": "MDU6TGFiZWwxMTk4OTg2MjAz", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/doc", "name": "doc", "color": "aba5ef", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-01-18T10:19:43Z", "updated_at": "2019-01-28T14:45:43Z", "closed_at": "2019-01-28T14:45:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get a `StreamTerminatedError` when using a `grpclib` client to call a unary-stream service, but I don't see what's wrong with my client, and I could not find a reference to `StreamTerminatedError` in the `grpclib` documentation.\r\n\r\nThe client calls the service with this:\r\n```python\r\n    async def fetch_from_source(self):\r\n        ...\r\n        async with stub.GetCategory.open() as stream:\r\n            await stream.send_message(rpc.CategoryRequest())\r\n            async for reply in stream:\r\n                yield ...\r\n```\r\n\r\nAnd here is the traceback I get:\r\n```\r\nERROR:asyncio:Task exception was never retrieved\r\nfuture: <Task finished coro=<handle_import() done, defined at /srv/src/ui/tasks.py:16> exception=StreamTerminatedError('Stream reset by remote party, error_code: 0')>\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/client.py\", line 310, in recv_message\r\n    self._recv_type)\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/stream.py\", line 10, in recv_message\r\n    meta = await stream.recv_data(5)\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/protocol.py\", line 226, in recv_data\r\n    return await self.__buffer__.read(size)\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/protocol.py\", line 97, in read\r\n    await self._ready_event.wait()\r\n  File \"/usr/local/lib/python3.7/asyncio/locks.py\", line 293, in wait\r\n    await fut\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/srv/src/ui/tasks.py\", line 34, in handle_import\r\n    feed_report_id=feed_report_id,\r\n  ...\r\n  File \"/srv/src/classifier/modeling/adapters/grpc.py\", line 36, in fetch_from_source\r\n    async for reply in stream:\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/stream.py\", line 53, in __anext__\r\n    message = await self.recv_message()\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/client.py\", line 312, in recv_message\r\n    return message\r\n  File \"/usr/local/lib/python3.7/site-packages/grpclib/utils.py\", line 48, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Stream reset by remote party, error_code: 0\r\n```\r\nThere is nothing special from the `grpcio` server side either (except maybe it's Python 2.7)\r\n```\r\nclass CatalogServicer(catalog_pb2_grpc.CatalogServicer):\r\n    def GetCategory(self, request, context):\r\n        categories = [...]\r\n        for data in categories:\r\n            logger.info(\"RPC transmit category %s\", data[\"id\"])\r\n            yield catalog_types_pb2.Category(...)\r\n            logger.info(\"RPC transmitted category %s\", data[\"id\"])\r\n```\r\nand the logs show nothing.\r\n\r\nI guess it comes from [theses lines in `grpclib.protocol`](https://github.com/vmagamedov/grpclib/blob/c38f3074f48755b07b6b16affa14f591d7e051ba/grpclib/protocol.py#L328-L330), which get called from [this other line](https://github.com/vmagamedov/grpclib/blob/c38f3074f48755b07b6b16affa14f591d7e051ba/grpclib/protocol.py#L468) because of a `StreamReset` event. But why?\r\n\r\nIf I catch and silence the exception, everything seems to work fine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/50", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/50/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/50/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/50", "id": 390871456, "node_id": "MDU6SXNzdWUzOTA4NzE0NTY=", "number": 50, "title": "Client Channels not closing ?", "user": {"login": "TimZaman", "id": 7721540, "node_id": "MDQ6VXNlcjc3MjE1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7721540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimZaman", "html_url": "https://github.com/TimZaman", "followers_url": "https://api.github.com/users/TimZaman/followers", "following_url": "https://api.github.com/users/TimZaman/following{/other_user}", "gists_url": "https://api.github.com/users/TimZaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimZaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimZaman/subscriptions", "organizations_url": "https://api.github.com/users/TimZaman/orgs", "repos_url": "https://api.github.com/users/TimZaman/repos", "events_url": "https://api.github.com/users/TimZaman/events{/privacy}", "received_events_url": "https://api.github.com/users/TimZaman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-13T21:41:03Z", "updated_at": "2018-12-15T07:09:45Z", "closed_at": "2018-12-15T07:00:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "It _seems_ that client channels aren't closed.\r\n\r\nEg if i were to do something like:\r\n```py\r\nfor _ in range(100):\r\n    channel = Channel(...)\r\n    stub = MyStub(channel)\r\n```\r\nThen it seems my process still had 100 files open, whereas if i add `channel.close()` everything seems fine. I noticed this because i ran into `ulimit` problems, when having a ton of channel switching (intentional).\r\n\r\nIt's also quite possible that I'm stupid and misusing something but I think the above is valid.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/49", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/49/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/49/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/49", "id": 387935628, "node_id": "MDU6SXNzdWUzODc5MzU2Mjg=", "number": 49, "title": "Limit connections", "user": {"login": "TimZaman", "id": 7721540, "node_id": "MDQ6VXNlcjc3MjE1NDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7721540?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimZaman", "html_url": "https://github.com/TimZaman", "followers_url": "https://api.github.com/users/TimZaman/followers", "following_url": "https://api.github.com/users/TimZaman/following{/other_user}", "gists_url": "https://api.github.com/users/TimZaman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimZaman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimZaman/subscriptions", "organizations_url": "https://api.github.com/users/TimZaman/orgs", "repos_url": "https://api.github.com/users/TimZaman/repos", "events_url": "https://api.github.com/users/TimZaman/events{/privacy}", "received_events_url": "https://api.github.com/users/TimZaman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-12-05T20:38:33Z", "updated_at": "2019-01-18T16:39:00Z", "closed_at": "2019-01-18T16:39:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I couldn't find this in the docs, but for a use-case I have, I want to limit the amount of open connections to 1. How do I go about this? Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/48", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/48/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/48/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/48/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/48", "id": 383561257, "node_id": "MDU6SXNzdWUzODM1NjEyNTc=", "number": 48, "title": "Middleware/Hooks support", "user": {"login": "volfco", "id": 433045, "node_id": "MDQ6VXNlcjQzMzA0NQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/433045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/volfco", "html_url": "https://github.com/volfco", "followers_url": "https://api.github.com/users/volfco/followers", "following_url": "https://api.github.com/users/volfco/following{/other_user}", "gists_url": "https://api.github.com/users/volfco/gists{/gist_id}", "starred_url": "https://api.github.com/users/volfco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/volfco/subscriptions", "organizations_url": "https://api.github.com/users/volfco/orgs", "repos_url": "https://api.github.com/users/volfco/repos", "events_url": "https://api.github.com/users/volfco/events{/privacy}", "received_events_url": "https://api.github.com/users/volfco/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-22T14:35:12Z", "updated_at": "2019-03-31T16:24:54Z", "closed_at": "2019-03-31T16:24:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would love if there was a way I could have callbacks before and after each function, and at various points like before/after exceptions. I want to add some basic method tracing (request time & result) and sentry logging to my application- and while I can do that with some common code in each function, it's a bit messy.\r\n\r\nPersonally, I think doing something like the following is ideal:\r\n\r\n```\r\nclass Hooks:\r\n\r\n    def BeforeMethod(self, state):\r\n        pass\r\n\r\n    def AfterMethod(self, state):\r\n        pass\r\n\r\n...\r\n\r\nserver = Server([Greeter()], hooks=Hooks(), loop=loop)\r\n```\r\nWhere `state` is a dict/object that has request information, such the requested method, and can be modified to persist data throughout the request (so I could store request start time, and then access it in a after request hook).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/47", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/47/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/47/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/47", "id": 374110596, "node_id": "MDU6SXNzdWUzNzQxMTA1OTY=", "number": 47, "title": "Add argument user_agent to Channel constructor", "user": {"login": "sergeyspatar", "id": 29392547, "node_id": "MDQ6VXNlcjI5MzkyNTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/29392547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergeyspatar", "html_url": "https://github.com/sergeyspatar", "followers_url": "https://api.github.com/users/sergeyspatar/followers", "following_url": "https://api.github.com/users/sergeyspatar/following{/other_user}", "gists_url": "https://api.github.com/users/sergeyspatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergeyspatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergeyspatar/subscriptions", "organizations_url": "https://api.github.com/users/sergeyspatar/orgs", "repos_url": "https://api.github.com/users/sergeyspatar/repos", "events_url": "https://api.github.com/users/sergeyspatar/events{/privacy}", "received_events_url": "https://api.github.com/users/sergeyspatar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-25T20:05:47Z", "updated_at": "2018-11-02T13:54:15Z", "closed_at": "2018-11-02T13:54:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice if `user_agent` could be set in Channel constructor, also allowing passing `None` if we don't want header `user-agent` be present at all.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/46", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/46/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/46/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/46", "id": 374093749, "node_id": "MDU6SXNzdWUzNzQwOTM3NDk=", "number": 46, "title": "Client opens multiple connections to Server if first requests are made concurrently", "user": {"login": "sergeyspatar", "id": 29392547, "node_id": "MDQ6VXNlcjI5MzkyNTQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/29392547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergeyspatar", "html_url": "https://github.com/sergeyspatar", "followers_url": "https://api.github.com/users/sergeyspatar/followers", "following_url": "https://api.github.com/users/sergeyspatar/following{/other_user}", "gists_url": "https://api.github.com/users/sergeyspatar/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergeyspatar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergeyspatar/subscriptions", "organizations_url": "https://api.github.com/users/sergeyspatar/orgs", "repos_url": "https://api.github.com/users/sergeyspatar/repos", "events_url": "https://api.github.com/users/sergeyspatar/events{/privacy}", "received_events_url": "https://api.github.com/users/sergeyspatar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-10-25T19:18:30Z", "updated_at": "2018-10-25T19:34:57Z", "closed_at": "2018-10-25T19:34:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "One of the benefits of HTTP/2 transport for gRPC is that all messages are transmitted over single TCP connection between Client and Server. In my test I start 1000 concurrent RPC calls by creating asyncio tasks `loop.create_task(stub.SayHello(...))`. Client initiates many TCP connections to Server and in a moment new connections start failing, probably because of limited *backlog=100* in [asyncio.loop.create_server()](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server). See example below:\r\n\r\nhelloworld.proto:\r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage helloworld;\r\n\r\nmessage HelloRequest {\r\n  string name = 1;\r\n}\r\n\r\nmessage HelloReply {\r\n  string message = 1;\r\n}\r\n\r\nservice Greeter {\r\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\r\n}\r\n```\r\n\r\ntest_server.py:\r\n```python\r\n#!/usr/bin/env python3\r\nimport asyncio\r\nfrom grpclib.server import Server\r\nfrom helloworld_pb2 import HelloReply\r\nfrom helloworld_grpc import GreeterBase\r\n\r\nclass Greeter(GreeterBase):\r\n\r\n    async def SayHello(self, stream):\r\n        request = await stream.recv_message()\r\n        message = f'Hello, {request.name}!'\r\n        await stream.send_message(HelloReply(message=message))\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nserver = Server([Greeter()], loop=loop)\r\nloop.run_until_complete(server.start('127.0.0.1', 50051))\r\nloop.run_forever()\r\n```\r\n\r\ntest_client.py:\r\n```python\r\n#!/usr/bin/env python3\r\nimport sys\r\nimport traceback\r\nimport asyncio\r\nfrom grpclib.client import Channel\r\nfrom helloworld_pb2 import HelloRequest\r\nfrom helloworld_grpc import GreeterStub\r\n\r\n\r\nasync def test(loop, num):\r\n\r\n    channel = Channel('127.0.0.1', 50051, loop=loop)\r\n    stub = GreeterStub(channel)\r\n\r\n    tasks = []\r\n\r\n    for i in range(num):\r\n        coro = stub.SayHello(HelloRequest(name=str(i)))\r\n        task = loop.create_task(coro)\r\n        tasks.append(task)\r\n\r\n    for task in tasks:\r\n        try:\r\n            response = await task\r\n            print(response.message)\r\n        except Exception:\r\n            traceback.print_exc(file=sys.stdout)\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(test(loop, 1000))\r\n```\r\n\r\nClient output:\r\n```\r\n# ./test_client.py\r\nHello, 0!\r\nHello, 1!\r\nHello, 2!\r\nHello, 3!\r\nHello, 4!\r\nHello, 5!\r\nHello, 6!\r\nHello, 7!\r\nHello, 8!\r\nHello, 9!\r\nHello, 10!\r\nHello, 11!\r\nHello, 12!\r\nHello, 13!\r\nHello, 14!\r\nHello, 15!\r\nHello, 16!\r\nHello, 17!\r\nHello, 18!\r\nHello, 19!\r\nHello, 20!\r\nHello, 21!\r\nHello, 22!\r\nHello, 23!\r\nHello, 24!\r\nHello, 25!\r\nHello, 26!\r\nHello, 27!\r\nHello, 28!\r\nHello, 29!\r\nHello, 30!\r\nHello, 31!\r\nHello, 32!\r\nHello, 33!\r\nHello, 34!\r\nHello, 35!\r\nHello, 36!\r\nHello, 37!\r\nHello, 38!\r\nHello, 39!\r\nHello, 40!\r\nHello, 41!\r\nHello, 42!\r\nHello, 43!\r\nHello, 44!\r\nHello, 45!\r\nHello, 46!\r\nHello, 47!\r\nHello, 48!\r\nHello, 49!\r\nHello, 50!\r\nHello, 51!\r\nHello, 52!\r\nHello, 53!\r\nHello, 54!\r\nHello, 55!\r\nHello, 56!\r\nHello, 57!\r\nHello, 58!\r\nHello, 59!\r\nHello, 60!\r\nHello, 61!\r\nHello, 62!\r\nHello, 63!\r\nHello, 64!\r\nHello, 65!\r\nHello, 66!\r\nHello, 67!\r\nHello, 68!\r\nHello, 69!\r\nHello, 70!\r\nHello, 71!\r\nHello, 72!\r\nHello, 73!\r\nHello, 74!\r\nHello, 75!\r\nHello, 76!\r\nHello, 77!\r\nHello, 78!\r\nHello, 79!\r\nHello, 80!\r\nHello, 81!\r\nHello, 82!\r\nHello, 83!\r\nHello, 84!\r\nHello, 85!\r\nHello, 86!\r\nHello, 87!\r\nHello, 88!\r\nHello, 89!\r\nHello, 90!\r\nHello, 91!\r\nHello, 92!\r\nHello, 93!\r\nHello, 94!\r\nHello, 95!\r\nHello, 96!\r\nHello, 97!\r\nHello, 98!\r\nHello, 99!\r\nHello, 100!\r\nHello, 101!\r\nHello, 102!\r\nHello, 103!\r\nHello, 104!\r\nHello, 105!\r\nHello, 106!\r\nHello, 107!\r\nHello, 108!\r\nHello, 109!\r\nHello, 110!\r\nHello, 111!\r\nHello, 112!\r\nHello, 113!\r\nHello, 114!\r\nHello, 115!\r\nHello, 116!\r\nHello, 117!\r\nHello, 118!\r\nHello, 119!\r\nHello, 120!\r\nHello, 121!\r\nHello, 122!\r\nHello, 123!\r\nHello, 124!\r\nHello, 125!\r\nHello, 126!\r\nHello, 127!\r\nHello, 128!\r\nHello, 129!\r\nHello, 130!\r\nHello, 131!\r\nHello, 132!\r\nHello, 133!\r\nHello, 134!\r\nHello, 135!\r\nHello, 136!\r\nHello, 137!\r\nHello, 138!\r\nHello, 139!\r\nHello, 140!\r\nHello, 141!\r\nHello, 142!\r\nHello, 143!\r\nHello, 144!\r\nHello, 145!\r\nHello, 146!\r\nHello, 147!\r\nHello, 148!\r\nHello, 149!\r\nHello, 150!\r\nHello, 151!\r\nHello, 152!\r\nHello, 153!\r\nHello, 154!\r\nHello, 155!\r\nHello, 156!\r\nHello, 157!\r\nHello, 158!\r\nHello, 159!\r\nHello, 160!\r\nHello, 161!\r\nHello, 162!\r\nHello, 163!\r\nHello, 164!\r\nHello, 165!\r\nHello, 166!\r\nHello, 167!\r\nHello, 168!\r\nHello, 169!\r\nHello, 170!\r\nHello, 171!\r\nHello, 172!\r\nHello, 173!\r\nHello, 174!\r\nHello, 175!\r\nHello, 176!\r\nHello, 177!\r\nHello, 178!\r\nHello, 179!\r\nHello, 180!\r\nHello, 181!\r\nHello, 182!\r\nHello, 183!\r\nHello, 184!\r\nHello, 185!\r\nHello, 186!\r\nHello, 187!\r\nHello, 188!\r\nHello, 189!\r\nHello, 190!\r\nHello, 191!\r\nHello, 192!\r\nHello, 193!\r\nHello, 194!\r\nHello, 195!\r\nHello, 196!\r\nHello, 197!\r\nHello, 198!\r\nHello, 199!\r\nHello, 200!\r\nHello, 201!\r\nHello, 202!\r\nHello, 203!\r\nHello, 204!\r\nHello, 205!\r\nHello, 206!\r\nHello, 207!\r\nHello, 208!\r\nHello, 209!\r\nHello, 210!\r\nHello, 211!\r\nHello, 212!\r\nHello, 213!\r\nHello, 214!\r\nHello, 215!\r\nHello, 216!\r\nHello, 217!\r\nHello, 218!\r\nHello, 219!\r\nHello, 220!\r\nHello, 221!\r\nHello, 222!\r\nHello, 223!\r\nHello, 224!\r\nHello, 225!\r\nHello, 226!\r\nHello, 227!\r\nHello, 228!\r\nHello, 229!\r\nHello, 230!\r\nHello, 231!\r\nHello, 232!\r\nHello, 233!\r\nHello, 234!\r\nHello, 235!\r\nHello, 236!\r\nHello, 237!\r\nHello, 238!\r\nHello, 239!\r\nHello, 240!\r\nHello, 241!\r\nHello, 242!\r\nHello, 243!\r\nHello, 244!\r\nHello, 245!\r\nHello, 246!\r\nHello, 247!\r\nHello, 248!\r\nHello, 249!\r\nHello, 250!\r\nHello, 251!\r\nHello, 252!\r\nHello, 253!\r\nHello, 254!\r\nHello, 255!\r\nHello, 256!\r\nHello, 257!\r\nHello, 258!\r\nHello, 259!\r\nHello, 260!\r\nHello, 261!\r\nHello, 262!\r\nHello, 263!\r\nHello, 264!\r\nHello, 265!\r\nHello, 266!\r\nHello, 267!\r\nHello, 268!\r\nHello, 269!\r\nHello, 270!\r\nHello, 271!\r\nHello, 272!\r\nHello, 273!\r\nHello, 274!\r\nHello, 275!\r\nHello, 276!\r\nHello, 277!\r\nHello, 278!\r\nHello, 279!\r\nHello, 280!\r\nHello, 281!\r\nHello, 282!\r\nHello, 283!\r\nHello, 284!\r\nHello, 285!\r\nHello, 286!\r\nHello, 287!\r\nHello, 288!\r\nHello, 289!\r\nHello, 290!\r\nHello, 291!\r\nHello, 292!\r\nHello, 293!\r\nHello, 294!\r\nHello, 295!\r\nHello, 296!\r\nHello, 297!\r\nHello, 298!\r\nHello, 299!\r\nHello, 300!\r\nHello, 301!\r\nHello, 302!\r\nHello, 303!\r\nHello, 304!\r\nHello, 305!\r\nHello, 306!\r\nHello, 307!\r\nHello, 308!\r\nHello, 309!\r\nHello, 310!\r\nHello, 311!\r\nHello, 312!\r\nHello, 313!\r\nHello, 314!\r\nHello, 315!\r\nHello, 316!\r\nHello, 317!\r\nHello, 318!\r\nHello, 319!\r\nHello, 320!\r\nHello, 321!\r\nHello, 322!\r\nHello, 323!\r\nHello, 324!\r\nHello, 325!\r\nHello, 326!\r\nHello, 327!\r\nHello, 328!\r\nHello, 329!\r\nHello, 330!\r\nHello, 331!\r\nHello, 332!\r\nHello, 333!\r\nHello, 334!\r\nHello, 335!\r\nHello, 336!\r\nHello, 337!\r\nHello, 338!\r\nHello, 339!\r\nHello, 340!\r\nHello, 341!\r\nHello, 342!\r\nHello, 343!\r\nHello, 344!\r\nHello, 345!\r\nHello, 346!\r\nHello, 347!\r\nHello, 348!\r\nHello, 349!\r\nHello, 350!\r\nHello, 351!\r\nHello, 352!\r\nHello, 353!\r\nHello, 354!\r\nHello, 355!\r\nHello, 356!\r\nHello, 357!\r\nHello, 358!\r\nHello, 359!\r\nHello, 360!\r\nHello, 361!\r\nHello, 362!\r\nHello, 363!\r\nHello, 364!\r\nHello, 365!\r\nHello, 366!\r\nHello, 367!\r\nHello, 368!\r\nHello, 369!\r\nHello, 370!\r\nHello, 371!\r\nHello, 372!\r\nHello, 373!\r\nHello, 374!\r\nHello, 375!\r\nHello, 376!\r\nHello, 377!\r\nHello, 378!\r\nHello, 379!\r\nHello, 380!\r\nHello, 381!\r\nHello, 382!\r\nHello, 383!\r\nHello, 384!\r\nHello, 385!\r\nHello, 386!\r\nHello, 387!\r\nHello, 388!\r\nHello, 389!\r\nHello, 390!\r\nHello, 391!\r\nHello, 392!\r\nHello, 393!\r\nHello, 394!\r\nHello, 395!\r\nHello, 396!\r\nHello, 397!\r\nHello, 398!\r\nHello, 399!\r\nHello, 400!\r\nHello, 401!\r\nHello, 402!\r\nHello, 403!\r\nHello, 404!\r\nHello, 405!\r\nHello, 406!\r\nHello, 407!\r\nHello, 408!\r\nHello, 409!\r\nHello, 410!\r\nHello, 411!\r\nHello, 412!\r\nHello, 413!\r\nHello, 414!\r\nHello, 415!\r\nHello, 416!\r\nHello, 417!\r\nHello, 418!\r\nHello, 419!\r\nHello, 420!\r\nHello, 421!\r\nHello, 422!\r\nHello, 423!\r\nHello, 424!\r\nHello, 425!\r\nHello, 426!\r\nHello, 427!\r\nHello, 428!\r\nHello, 429!\r\nHello, 430!\r\nHello, 431!\r\nHello, 432!\r\nHello, 433!\r\nHello, 434!\r\nHello, 435!\r\nHello, 436!\r\nHello, 437!\r\nHello, 438!\r\nHello, 439!\r\nHello, 440!\r\nHello, 441!\r\nHello, 442!\r\nHello, 443!\r\nHello, 444!\r\nHello, 445!\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nHello, 450!\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"./test_client.py\", line 30, in test\r\n    response = await task\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 243, in recv_initial_metadata\r\n    .format(content_type))\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/utils.py\", line 41, in __exit__\r\n    raise self._error\r\ngrpclib.exceptions.StreamTerminatedError: Connection was closed\r\nHello, 476!\r\nHello, 477!\r\nHello, 478!\r\nHello, 479!\r\nHello, 480!\r\nHello, 481!\r\nHello, 482!\r\nHello, 483!\r\nHello, 484!\r\nHello, 485!\r\nHello, 486!\r\nHello, 487!\r\nHello, 488!\r\nHello, 489!\r\nHello, 490!\r\nHello, 491!\r\nHello, 492!\r\nHello, 493!\r\nHello, 494!\r\nHello, 495!\r\nHello, 496!\r\nHello, 497!\r\nHello, 498!\r\nHello, 499!\r\nHello, 500!\r\nHello, 501!\r\nHello, 502!\r\nHello, 503!\r\nHello, 504!\r\nHello, 505!\r\nHello, 506!\r\nHello, 507!\r\nHello, 508!\r\nHello, 509!\r\nHello, 510!\r\nHello, 511!\r\nHello, 512!\r\nHello, 513!\r\nHello, 514!\r\nHello, 515!\r\nHello, 516!\r\nHello, 517!\r\nHello, 518!\r\nHello, 519!\r\nHello, 520!\r\nHello, 521!\r\nHello, 522!\r\nHello, 523!\r\nHello, 524!\r\nHello, 525!\r\nHello, 526!\r\nHello, 527!\r\nHello, 528!\r\nHello, 529!\r\nHello, 530!\r\nHello, 531!\r\nHello, 532!\r\nHello, 533!\r\nHello, 534!\r\nHello, 535!\r\nHello, 536!\r\nHello, 537!\r\nHello, 538!\r\nHello, 539!\r\nHello, 540!\r\nHello, 541!\r\nHello, 542!\r\nHello, 543!\r\nHello, 544!\r\nHello, 545!\r\nHello, 546!\r\nHello, 547!\r\nHello, 548!\r\nHello, 549!\r\nHello, 550!\r\nHello, 551!\r\nHello, 552!\r\nHello, 553!\r\nHello, 554!\r\nHello, 555!\r\nHello, 556!\r\nHello, 557!\r\nHello, 558!\r\nHello, 559!\r\nHello, 560!\r\nHello, 561!\r\nHello, 562!\r\nHello, 563!\r\nHello, 564!\r\nHello, 565!\r\nHello, 566!\r\nHello, 567!\r\nHello, 568!\r\nHello, 569!\r\nHello, 570!\r\nHello, 571!\r\nHello, 572!\r\nHello, 573!\r\nHello, 574!\r\nHello, 575!\r\nHello, 576!\r\nHello, 577!\r\nHello, 578!\r\nHello, 579!\r\nHello, 580!\r\nHello, 581!\r\nHello, 582!\r\nHello, 583!\r\nHello, 584!\r\nHello, 585!\r\nHello, 586!\r\nHello, 587!\r\nHello, 588!\r\nHello, 589!\r\nHello, 590!\r\nHello, 591!\r\nHello, 592!\r\nHello, 593!\r\nHello, 594!\r\nHello, 595!\r\nHello, 596!\r\nHello, 597!\r\nHello, 598!\r\nHello, 599!\r\nHello, 600!\r\nHello, 601!\r\nHello, 602!\r\nHello, 603!\r\nHello, 604!\r\nHello, 605!\r\nHello, 606!\r\nHello, 607!\r\nHello, 608!\r\nHello, 609!\r\nHello, 610!\r\nHello, 611!\r\nHello, 612!\r\nHello, 613!\r\nHello, 614!\r\nHello, 615!\r\nHello, 616!\r\nHello, 617!\r\nHello, 618!\r\nHello, 619!\r\nHello, 620!\r\nHello, 621!\r\nHello, 622!\r\nHello, 623!\r\nHello, 624!\r\nHello, 625!\r\nHello, 626!\r\nHello, 627!\r\nHello, 628!\r\nHello, 629!\r\nHello, 630!\r\nHello, 631!\r\nHello, 632!\r\nHello, 633!\r\nHello, 634!\r\nHello, 635!\r\nHello, 636!\r\nHello, 637!\r\nHello, 638!\r\nHello, 639!\r\nHello, 640!\r\nHello, 641!\r\nHello, 642!\r\nHello, 643!\r\nHello, 644!\r\nHello, 645!\r\nHello, 646!\r\nHello, 647!\r\nHello, 648!\r\nHello, 649!\r\nHello, 650!\r\nHello, 651!\r\nHello, 652!\r\nHello, 653!\r\nHello, 654!\r\nHello, 655!\r\nHello, 656!\r\nHello, 657!\r\nHello, 658!\r\nHello, 659!\r\nHello, 660!\r\nHello, 661!\r\nHello, 662!\r\nHello, 663!\r\nHello, 664!\r\nHello, 665!\r\nHello, 666!\r\nHello, 667!\r\nHello, 668!\r\nHello, 669!\r\nHello, 670!\r\nHello, 671!\r\nHello, 672!\r\nHello, 673!\r\nHello, 674!\r\nHello, 675!\r\nHello, 676!\r\nHello, 677!\r\nHello, 678!\r\nHello, 679!\r\nHello, 680!\r\nHello, 681!\r\nHello, 682!\r\nHello, 683!\r\nHello, 684!\r\nHello, 685!\r\nHello, 686!\r\nHello, 687!\r\nHello, 688!\r\nHello, 689!\r\nHello, 690!\r\nHello, 691!\r\nHello, 692!\r\nHello, 693!\r\nHello, 694!\r\nHello, 695!\r\nHello, 696!\r\nHello, 697!\r\nHello, 698!\r\nHello, 699!\r\nHello, 700!\r\nHello, 701!\r\nHello, 702!\r\nHello, 703!\r\nHello, 704!\r\nHello, 705!\r\nHello, 706!\r\nHello, 707!\r\nHello, 708!\r\nHello, 709!\r\nHello, 710!\r\nHello, 711!\r\nHello, 712!\r\nHello, 713!\r\nHello, 714!\r\nHello, 715!\r\nHello, 716!\r\nHello, 717!\r\nHello, 718!\r\nHello, 719!\r\nHello, 720!\r\nHello, 721!\r\nHello, 722!\r\nHello, 723!\r\nHello, 724!\r\nHello, 725!\r\nHello, 726!\r\nHello, 727!\r\nHello, 728!\r\nHello, 729!\r\nHello, 730!\r\nHello, 731!\r\nHello, 732!\r\nHello, 733!\r\nHello, 734!\r\nHello, 735!\r\nHello, 736!\r\nHello, 737!\r\nHello, 738!\r\nHello, 739!\r\nHello, 740!\r\nHello, 741!\r\nHello, 742!\r\nHello, 743!\r\nHello, 744!\r\nHello, 745!\r\nHello, 746!\r\nHello, 747!\r\nHello, 748!\r\nHello, 749!\r\nHello, 750!\r\nHello, 751!\r\nHello, 752!\r\nHello, 753!\r\nHello, 754!\r\nHello, 755!\r\nHello, 756!\r\nHello, 757!\r\nHello, 758!\r\nHello, 759!\r\nHello, 760!\r\nHello, 761!\r\nHello, 762!\r\nHello, 763!\r\nHello, 764!\r\nHello, 765!\r\nHello, 766!\r\nHello, 767!\r\nHello, 768!\r\nHello, 769!\r\nHello, 770!\r\nHello, 771!\r\nHello, 772!\r\nHello, 773!\r\nHello, 774!\r\nHello, 775!\r\nHello, 776!\r\nHello, 777!\r\nHello, 778!\r\nHello, 779!\r\nHello, 780!\r\nHello, 781!\r\nHello, 782!\r\nHello, 783!\r\nHello, 784!\r\nHello, 785!\r\nHello, 786!\r\nHello, 787!\r\nHello, 788!\r\nHello, 789!\r\nHello, 790!\r\nHello, 791!\r\nHello, 792!\r\nHello, 793!\r\nHello, 794!\r\nHello, 795!\r\nHello, 796!\r\nHello, 797!\r\nHello, 798!\r\nHello, 799!\r\nHello, 800!\r\nHello, 801!\r\nHello, 802!\r\nHello, 803!\r\nHello, 804!\r\nHello, 805!\r\nHello, 806!\r\nHello, 807!\r\nHello, 808!\r\nHello, 809!\r\nHello, 810!\r\nHello, 811!\r\nHello, 812!\r\nHello, 813!\r\nHello, 814!\r\nHello, 815!\r\nHello, 816!\r\nHello, 817!\r\nHello, 818!\r\nHello, 819!\r\nHello, 820!\r\nHello, 821!\r\nHello, 822!\r\nHello, 823!\r\nHello, 824!\r\nHello, 825!\r\nHello, 826!\r\nHello, 827!\r\nHello, 828!\r\nHello, 829!\r\nHello, 830!\r\nHello, 831!\r\nHello, 832!\r\nHello, 833!\r\nHello, 834!\r\nHello, 835!\r\nHello, 836!\r\nHello, 837!\r\nHello, 838!\r\nHello, 839!\r\nHello, 840!\r\nHello, 841!\r\nHello, 842!\r\nHello, 843!\r\nHello, 844!\r\nHello, 845!\r\nHello, 846!\r\nHello, 847!\r\nHello, 848!\r\nHello, 849!\r\nHello, 850!\r\nHello, 851!\r\nHello, 852!\r\nHello, 853!\r\nHello, 854!\r\nHello, 855!\r\nHello, 856!\r\nHello, 857!\r\nHello, 858!\r\nHello, 859!\r\nHello, 860!\r\nHello, 861!\r\nHello, 862!\r\nHello, 863!\r\nHello, 864!\r\nHello, 865!\r\nHello, 866!\r\nHello, 867!\r\nHello, 868!\r\nHello, 869!\r\nHello, 870!\r\nHello, 871!\r\nHello, 872!\r\nHello, 873!\r\nHello, 874!\r\nHello, 875!\r\nHello, 876!\r\nHello, 877!\r\nHello, 878!\r\nHello, 879!\r\nHello, 880!\r\nHello, 881!\r\nHello, 882!\r\nHello, 883!\r\nHello, 884!\r\nHello, 885!\r\nHello, 886!\r\nHello, 887!\r\nHello, 888!\r\nHello, 889!\r\nHello, 890!\r\nHello, 891!\r\nHello, 892!\r\nHello, 893!\r\nHello, 894!\r\nHello, 895!\r\nHello, 896!\r\nHello, 897!\r\nHello, 898!\r\nHello, 899!\r\nHello, 900!\r\nHello, 901!\r\nHello, 902!\r\nHello, 903!\r\nHello, 904!\r\nHello, 905!\r\nHello, 906!\r\nHello, 907!\r\nHello, 908!\r\nHello, 909!\r\nHello, 910!\r\nHello, 911!\r\nHello, 912!\r\nHello, 913!\r\nHello, 914!\r\nHello, 915!\r\nHello, 916!\r\nHello, 917!\r\nHello, 918!\r\nHello, 919!\r\nHello, 920!\r\nHello, 921!\r\nHello, 922!\r\nHello, 923!\r\nHello, 924!\r\nHello, 925!\r\nHello, 926!\r\nHello, 927!\r\nHello, 928!\r\nHello, 929!\r\nHello, 930!\r\nHello, 931!\r\nHello, 932!\r\nHello, 933!\r\nHello, 934!\r\nHello, 935!\r\nHello, 936!\r\nHello, 937!\r\nHello, 938!\r\nHello, 939!\r\nHello, 940!\r\nHello, 941!\r\nHello, 942!\r\nHello, 943!\r\nHello, 944!\r\nHello, 945!\r\nHello, 946!\r\nHello, 947!\r\nHello, 948!\r\nHello, 949!\r\nHello, 950!\r\nHello, 951!\r\nHello, 952!\r\nHello, 953!\r\nHello, 954!\r\nHello, 955!\r\nHello, 956!\r\nHello, 957!\r\nHello, 958!\r\nHello, 959!\r\nHello, 960!\r\nHello, 961!\r\nHello, 962!\r\nHello, 963!\r\nHello, 964!\r\nHello, 965!\r\nHello, 966!\r\nHello, 967!\r\nHello, 968!\r\nHello, 969!\r\nHello, 970!\r\nHello, 971!\r\nHello, 972!\r\nHello, 973!\r\nHello, 974!\r\nHello, 975!\r\nHello, 976!\r\nHello, 977!\r\nHello, 978!\r\nHello, 979!\r\nHello, 980!\r\nHello, 981!\r\nHello, 982!\r\nHello, 983!\r\nHello, 984!\r\nHello, 985!\r\nHello, 986!\r\nHello, 987!\r\nHello, 988!\r\nHello, 989!\r\nHello, 990!\r\nHello, 991!\r\nHello, 992!\r\nHello, 993!\r\nHello, 994!\r\nHello, 995!\r\nHello, 996!\r\nHello, 997!\r\nHello, 998!\r\nHello, 999!\r\n```\r\n\r\nI also captured tcpdump [test_client.zip](https://github.com/vmagamedov/grpclib/files/2516309/test_client.zip), where you can see that hundreds of TCP connections are initiated.\r\n\r\nOne solution to prevent this issue is to send one request first to \"warm up\" and wait for server response. This way we ensure a connection is established and can be reused for future concurrent requests:\r\n\r\ntest_client_with_warm_up.py:\r\n```python\r\n#!/usr/bin/env python3\r\nimport sys\r\nimport traceback\r\nimport asyncio\r\nfrom grpclib.client import Channel\r\nfrom helloworld_pb2 import HelloRequest\r\nfrom helloworld_grpc import GreeterStub\r\n\r\n\r\nasync def test(loop, num):\r\n\r\n    channel = Channel('127.0.0.1', 50051, loop=loop)\r\n    stub = GreeterStub(channel)\r\n\r\n    # Initial request to establish connection to Server before processing concurrent calls\r\n    response = await stub.SayHello(HelloRequest(name='Init'))\r\n    print(response.message)\r\n\r\n    tasks = []\r\n\r\n    for i in range(num):\r\n        coro = stub.SayHello(HelloRequest(name=str(i)))\r\n        task = loop.create_task(coro)\r\n        tasks.append(task)\r\n\r\n    for task in tasks:\r\n        try:\r\n            response = await task\r\n            print(response.message)\r\n        except Exception:\r\n            traceback.print_exc(file=sys.stdout)\r\n\r\n\r\nloop = asyncio.get_event_loop()\r\nloop.run_until_complete(test(loop, 1000))\r\n```\r\n\r\nBut I think grpclib.client.Channel should handle this internally.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/45", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/45/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/45/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/45", "id": 371833777, "node_id": "MDU6SXNzdWUzNzE4MzM3Nzc=", "number": 45, "title": "[protoc-plugin] readme command line to generate the stub file not using correct plugin ", "user": {"login": "bansalnvn", "id": 2838137, "node_id": "MDQ6VXNlcjI4MzgxMzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2838137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bansalnvn", "html_url": "https://github.com/bansalnvn", "followers_url": "https://api.github.com/users/bansalnvn/followers", "following_url": "https://api.github.com/users/bansalnvn/following{/other_user}", "gists_url": "https://api.github.com/users/bansalnvn/gists{/gist_id}", "starred_url": "https://api.github.com/users/bansalnvn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bansalnvn/subscriptions", "organizations_url": "https://api.github.com/users/bansalnvn/orgs", "repos_url": "https://api.github.com/users/bansalnvn/repos", "events_url": "https://api.github.com/users/bansalnvn/events{/privacy}", "received_events_url": "https://api.github.com/users/bansalnvn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-19T07:14:10Z", "updated_at": "2018-10-19T07:41:03Z", "closed_at": "2018-10-19T07:41:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently the example command line given in the readme file just generates the standard stub file which does not support the asyncio.\r\n\r\nhttps://github.com/vmagamedov/grpclib#protoc-plugin\r\n\r\nDoes this need a change ?\r\nAs I am not able to generate the `proto_grpc.py` files.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/44", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/44/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/44/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/44", "id": 371524637, "node_id": "MDU6SXNzdWUzNzE1MjQ2Mzc=", "number": 44, "title": "Race condition in Channel.__connect__ cause creation of extra tcp sockets", "user": {"login": "krkd", "id": 2574104, "node_id": "MDQ6VXNlcjI1NzQxMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/2574104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krkd", "html_url": "https://github.com/krkd", "followers_url": "https://api.github.com/users/krkd/followers", "following_url": "https://api.github.com/users/krkd/following{/other_user}", "gists_url": "https://api.github.com/users/krkd/gists{/gist_id}", "starred_url": "https://api.github.com/users/krkd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krkd/subscriptions", "organizations_url": "https://api.github.com/users/krkd/orgs", "repos_url": "https://api.github.com/users/krkd/repos", "events_url": "https://api.github.com/users/krkd/events{/privacy}", "received_events_url": "https://api.github.com/users/krkd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-18T13:14:44Z", "updated_at": "2018-10-18T15:50:33Z", "closed_at": "2018-10-18T15:48:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I found a race condition at `Channel.__connect__`\r\n\r\n```\r\n\r\n    async def __connect__(self):\r\n        if self._protocol is None or self._protocol.handler.connection_lost:\r\n            if self._path is not None:\r\n                _, self._protocol = await self._loop.create_unix_connection(\r\n                    self._protocol_factory, self._path, ssl=self._ssl)\r\n            else:\r\n                _, self._protocol = await self._loop.create_connection(\r\n                    self._protocol_factory, self._host, self._port,\r\n                    ssl=self._ssl)\r\n        return self._protocol\r\n```\r\n\r\nusing stubs from examples.helloword.client \r\n\r\n```\r\nasync def main():\r\n    loop = asyncio.get_event_loop()\r\n    channel = Channel('127.0.0.1', 50051, loop=loop)\r\n    stub = GreeterStub(channel)\r\n\r\n    coros = [stub.SayHello(HelloRequest(name='World')) for i in range(5)]\r\n    await asyncio.gather(*coros)\r\n```\r\n\r\nWill cause creation of 5 TCP sockets.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/43", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/43/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/43/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/43", "id": 368129914, "node_id": "MDU6SXNzdWUzNjgxMjk5MTQ=", "number": 43, "title": "Streaming compatabiltiy with grpcio server", "user": {"login": "recro-lataille", "id": 43007015, "node_id": "MDQ6VXNlcjQzMDA3MDE1", "avatar_url": "https://avatars2.githubusercontent.com/u/43007015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/recro-lataille", "html_url": "https://github.com/recro-lataille", "followers_url": "https://api.github.com/users/recro-lataille/followers", "following_url": "https://api.github.com/users/recro-lataille/following{/other_user}", "gists_url": "https://api.github.com/users/recro-lataille/gists{/gist_id}", "starred_url": "https://api.github.com/users/recro-lataille/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/recro-lataille/subscriptions", "organizations_url": "https://api.github.com/users/recro-lataille/orgs", "repos_url": "https://api.github.com/users/recro-lataille/repos", "events_url": "https://api.github.com/users/recro-lataille/events{/privacy}", "received_events_url": "https://api.github.com/users/recro-lataille/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 524962456, "node_id": "MDU6TGFiZWw1MjQ5NjI0NTY=", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-10-09T09:54:06Z", "updated_at": "2019-01-28T14:05:36Z", "closed_at": "2019-01-28T14:05:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am having issues with streaming data to grpcio server from grpclib client. this is a stream-unary connection. the issue is occurring when I send a large number of messages across the single stream connection (I am cutting a large file into small <4mb pieces and sending them from the client to server as bytes. when I use a grpclib server everything goes smoothly but when integrating with grpcio a number of messages send then the server hangs indefinably. This isn't exact but is essentially what I am doing (I probably have typos below). to replicate just create large bytesIO then cut it up and send it across in pieces. \r\n\r\nthe call is very basic\r\nasync with stub.stream_parts.open() as stream:  \r\n     for part in file_parts:\r\n          await send_message(PartsStream(bytes=part['bytes']\r\n     await stream.close()\r\n\r\n    ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/42", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/42/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/42/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/42", "id": 368073115, "node_id": "MDU6SXNzdWUzNjgwNzMxMTU=", "number": 42, "title": "Don't generate a file if the .proto doesn't contain any services", "user": {"login": "rwlincoln", "id": 36113520, "node_id": "MDQ6VXNlcjM2MTEzNTIw", "avatar_url": "https://avatars1.githubusercontent.com/u/36113520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rwlincoln", "html_url": "https://github.com/rwlincoln", "followers_url": "https://api.github.com/users/rwlincoln/followers", "following_url": "https://api.github.com/users/rwlincoln/following{/other_user}", "gists_url": "https://api.github.com/users/rwlincoln/gists{/gist_id}", "starred_url": "https://api.github.com/users/rwlincoln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rwlincoln/subscriptions", "organizations_url": "https://api.github.com/users/rwlincoln/orgs", "repos_url": "https://api.github.com/users/rwlincoln/repos", "events_url": "https://api.github.com/users/rwlincoln/events{/privacy}", "received_events_url": "https://api.github.com/users/rwlincoln/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2018-10-09T07:22:17Z", "updated_at": "2020-05-30T16:18:50Z", "closed_at": "2020-05-30T16:18:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some protobuf packages may be split into multiple `.proto` files, but generated with a single call to `protoc`. For example:\r\n\r\n```\r\n/myapi/myapi.proto\r\n/myapi/services.proto\r\n```\r\n\r\nIn this case, a `myapi_grpc.py` will be generated even if `myapi.proto` doesn't contain any services. Could `grpclib` be modified to only generate files if a service is defined in the corresponding `.proto` file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/41", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/41/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/41/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/41", "id": 367980284, "node_id": "MDU6SXNzdWUzNjc5ODAyODQ=", "number": 41, "title": "grpclib health module installation", "user": {"login": "elainewu96", "id": 42749556, "node_id": "MDQ6VXNlcjQyNzQ5NTU2", "avatar_url": "https://avatars0.githubusercontent.com/u/42749556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elainewu96", "html_url": "https://github.com/elainewu96", "followers_url": "https://api.github.com/users/elainewu96/followers", "following_url": "https://api.github.com/users/elainewu96/following{/other_user}", "gists_url": "https://api.github.com/users/elainewu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/elainewu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elainewu96/subscriptions", "organizations_url": "https://api.github.com/users/elainewu96/orgs", "repos_url": "https://api.github.com/users/elainewu96/repos", "events_url": "https://api.github.com/users/elainewu96/events{/privacy}", "received_events_url": "https://api.github.com/users/elainewu96/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-08T22:53:57Z", "updated_at": "2018-10-16T16:25:12Z", "closed_at": "2018-10-16T16:25:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanted to use the health package in grpclib, but when I installed grpclib using pip3 I don't get the reflection or health packages and my version is grpclib==0.1.1. Is there a newer version with those modules?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/40", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/40/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/40/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/40", "id": 366066569, "node_id": "MDU6SXNzdWUzNjYwNjY1Njk=", "number": 40, "title": "Typehinting support?", "user": {"login": "LiraNuna", "id": 205628, "node_id": "MDQ6VXNlcjIwNTYyOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/205628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LiraNuna", "html_url": "https://github.com/LiraNuna", "followers_url": "https://api.github.com/users/LiraNuna/followers", "following_url": "https://api.github.com/users/LiraNuna/following{/other_user}", "gists_url": "https://api.github.com/users/LiraNuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/LiraNuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LiraNuna/subscriptions", "organizations_url": "https://api.github.com/users/LiraNuna/orgs", "repos_url": "https://api.github.com/users/LiraNuna/repos", "events_url": "https://api.github.com/users/LiraNuna/events{/privacy}", "received_events_url": "https://api.github.com/users/LiraNuna/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-02T20:28:27Z", "updated_at": "2019-06-03T21:34:50Z", "closed_at": "2019-06-03T21:34:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to add an option for the generated code to allow typehints? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/39", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/39/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/39/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/39", "id": 363841779, "node_id": "MDU6SXNzdWUzNjM4NDE3Nzk=", "number": 39, "title": "client side cpu busy 100% when reached max_concurrent_streams", "user": {"login": "weidaxu1988", "id": 9329401, "node_id": "MDQ6VXNlcjkzMjk0MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9329401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weidaxu1988", "html_url": "https://github.com/weidaxu1988", "followers_url": "https://api.github.com/users/weidaxu1988/followers", "following_url": "https://api.github.com/users/weidaxu1988/following{/other_user}", "gists_url": "https://api.github.com/users/weidaxu1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/weidaxu1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weidaxu1988/subscriptions", "organizations_url": "https://api.github.com/users/weidaxu1988/orgs", "repos_url": "https://api.github.com/users/weidaxu1988/repos", "events_url": "https://api.github.com/users/weidaxu1988/events{/privacy}", "received_events_url": "https://api.github.com/users/weidaxu1988/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-09-26T03:13:44Z", "updated_at": "2018-10-02T13:42:01Z", "closed_at": "2018-10-02T13:34:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, I'm using grpclib==0.1.1. when the number of my client side streams is larger than max_concurrent_streams, sometime the cpu increases the usage to 100%.\r\n\r\nAnd I found the code in `grpclib/protocol` as following:\r\n```\r\nasync def send_request(self, headers, end_stream=False, *, _processor):\r\n        assert self.id is None, self.id\r\n        while True:\r\n            # this is the first thing we should check before even trying to\r\n            # create new stream, because this wait() can be cancelled by timeout\r\n            # and we wouldn't need to create new stream at all\r\n            if not self._connection.write_ready.is_set():\r\n                await self._connection.write_ready.wait()\r\n\r\n            if self._connection.outbound_streams_limit.reached():\r\n                await self._connection.outbound_streams_limit.wait()\r\n                # while we were trying to create a new stream, write buffer\r\n                # can became full, so we need to repeat checks from checking\r\n                # if we can write() data\r\n                continue\r\n\r\n            # `get_next_available_stream_id()` should be as close to\r\n            # `connection.send_headers()` as possible, without any async\r\n            # interruptions in between, see the docs on the\r\n            # `get_next_available_stream_id()` method\r\n            stream_id = self._h2_connection.get_next_available_stream_id()\r\n            try:\r\n                self._h2_connection.send_headers(stream_id, headers,\r\n                                                 end_stream=end_stream)\r\n            except TooManyStreamsError:\r\n                continue\r\n            else:\r\n                self._connection.outbound_streams_limit.acquire()\r\n                self.id = stream_id\r\n                self.__buffer__ = Buffer(self.id, self._connection,\r\n                                         self._h2_connection, loop=self._loop)\r\n                release_stream = _processor.register(self)\r\n                self._transport.write(self._h2_connection.data_to_send())\r\n                return release_stream\r\n```\r\n\r\nthe `while True` loop will block synchronized forever until one stream is released.\r\nAnd I did some tested, `self._connection.outbound_streams_limit.reached()` works ok so the client never blocks, but sometime the it didn't and the client blocks. I will do some more test, see if it is my fault.\r\nDose there should have a default timeout in order to raise the exception `TooManyStreamsError`?\r\n\r\nBTW, How can I set `max_concurrent_streams` on server_side, Thanks?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/38", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/38/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/38/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/38", "id": 362489961, "node_id": "MDU6SXNzdWUzNjI0ODk5NjE=", "number": 38, "title": "Server side can't know whether the stream is closed from client ", "user": {"login": "weidaxu1988", "id": 9329401, "node_id": "MDQ6VXNlcjkzMjk0MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/9329401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weidaxu1988", "html_url": "https://github.com/weidaxu1988", "followers_url": "https://api.github.com/users/weidaxu1988/followers", "following_url": "https://api.github.com/users/weidaxu1988/following{/other_user}", "gists_url": "https://api.github.com/users/weidaxu1988/gists{/gist_id}", "starred_url": "https://api.github.com/users/weidaxu1988/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weidaxu1988/subscriptions", "organizations_url": "https://api.github.com/users/weidaxu1988/orgs", "repos_url": "https://api.github.com/users/weidaxu1988/repos", "events_url": "https://api.github.com/users/weidaxu1988/events{/privacy}", "received_events_url": "https://api.github.com/users/weidaxu1988/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-21T07:30:37Z", "updated_at": "2018-09-22T19:40:14Z", "closed_at": "2018-09-22T19:40:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "My client subscribes info from server using the request-streaming rpc. And I found the server keeps sending data via the stream without any error raised when the client was exited.\r\nI tried to print `stream._stream._h2_connection.state_machine.state` on server side after client was closed, but I keep getting `ConnectionState.SERVER_OPEN` which I expect `ConnectionState.CLOSED`.\r\nAny reply helps.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/36", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/36/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/36/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/36", "id": 356710842, "node_id": "MDU6SXNzdWUzNTY3MTA4NDI=", "number": 36, "title": "Any plans for support flatbuffers?", "user": {"login": "mjason3", "id": 3388500, "node_id": "MDQ6VXNlcjMzODg1MDA=", "avatar_url": "https://avatars3.githubusercontent.com/u/3388500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjason3", "html_url": "https://github.com/mjason3", "followers_url": "https://api.github.com/users/mjason3/followers", "following_url": "https://api.github.com/users/mjason3/following{/other_user}", "gists_url": "https://api.github.com/users/mjason3/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjason3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjason3/subscriptions", "organizations_url": "https://api.github.com/users/mjason3/orgs", "repos_url": "https://api.github.com/users/mjason3/repos", "events_url": "https://api.github.com/users/mjason3/events{/privacy}", "received_events_url": "https://api.github.com/users/mjason3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-04T08:48:04Z", "updated_at": "2018-09-12T20:19:00Z", "closed_at": "2018-09-12T20:19:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, flatbuffer is very efficient for rpc provided by Google: https://google.github.io/flatbuffers/ and official gRPC also support that. Is there any plan that grpclib also support flatbuffers?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/34", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/34/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/34/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/34", "id": 349398086, "node_id": "MDU6SXNzdWUzNDkzOTgwODY=", "number": 34, "title": "Usage: channels", "user": {"login": "dfee", "id": 262602, "node_id": "MDQ6VXNlcjI2MjYwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/262602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfee", "html_url": "https://github.com/dfee", "followers_url": "https://api.github.com/users/dfee/followers", "following_url": "https://api.github.com/users/dfee/following{/other_user}", "gists_url": "https://api.github.com/users/dfee/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfee/subscriptions", "organizations_url": "https://api.github.com/users/dfee/orgs", "repos_url": "https://api.github.com/users/dfee/repos", "events_url": "https://api.github.com/users/dfee/events{/privacy}", "received_events_url": "https://api.github.com/users/dfee/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-10T06:58:21Z", "updated_at": "2018-08-10T20:41:37Z", "closed_at": "2018-08-10T17:40:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "On the server side, I can have multiple handlers all served together.\r\n\r\nOn the client side, is there a penalty, or something wrong, by not sharing a channel between multiple stubs (either by stub class or stub instance)?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/32", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/32/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/32/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/32", "id": 346843687, "node_id": "MDU6SXNzdWUzNDY4NDM2ODc=", "number": 32, "title": " grpc_reflection", "user": {"login": "ciiiii", "id": 28784251, "node_id": "MDQ6VXNlcjI4Nzg0MjUx", "avatar_url": "https://avatars3.githubusercontent.com/u/28784251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ciiiii", "html_url": "https://github.com/ciiiii", "followers_url": "https://api.github.com/users/ciiiii/followers", "following_url": "https://api.github.com/users/ciiiii/following{/other_user}", "gists_url": "https://api.github.com/users/ciiiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ciiiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ciiiii/subscriptions", "organizations_url": "https://api.github.com/users/ciiiii/orgs", "repos_url": "https://api.github.com/users/ciiiii/repos", "events_url": "https://api.github.com/users/ciiiii/events{/privacy}", "received_events_url": "https://api.github.com/users/ciiiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-02T03:15:23Z", "updated_at": "2018-08-09T18:37:35Z", "closed_at": "2018-08-09T18:37:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "+ Is there any plan about [grpc-reflection](https://github.com/grpc/grpc/tree/master/src/python/grpcio_reflection/grpc_reflection)?\r\n+ It provides information about publicly-accessible gRPC services on a server, and assists clients at runtime to construct RPC requests and responses without precompiled service information.\r\n+ Or can you provide some advise about migration?Thx.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/31", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/31/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/31/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/31", "id": 346786887, "node_id": "MDU6SXNzdWUzNDY3ODY4ODc=", "number": 31, "title": "grpclib does memory leak due h2_connection._closed_streams", "user": {"login": "hellysmile", "id": 1834317, "node_id": "MDQ6VXNlcjE4MzQzMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1834317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellysmile", "html_url": "https://github.com/hellysmile", "followers_url": "https://api.github.com/users/hellysmile/followers", "following_url": "https://api.github.com/users/hellysmile/following{/other_user}", "gists_url": "https://api.github.com/users/hellysmile/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellysmile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellysmile/subscriptions", "organizations_url": "https://api.github.com/users/hellysmile/orgs", "repos_url": "https://api.github.com/users/hellysmile/repos", "events_url": "https://api.github.com/users/hellysmile/events{/privacy}", "received_events_url": "https://api.github.com/users/hellysmile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-01T22:04:46Z", "updated_at": "2018-08-09T15:58:02Z", "closed_at": "2018-08-09T15:58:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, it is mostly replication issue found in https://github.com/python-hyper/hyper-h2/issues/1163\r\n\r\nIs there any way recreate client connection over time or after some amount of finished requests?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/30", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/30/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/30/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/30", "id": 346432845, "node_id": "MDU6SXNzdWUzNDY0MzI4NDU=", "number": 30, "title": "How to send metadata from server", "user": {"login": "ciiiii", "id": 28784251, "node_id": "MDQ6VXNlcjI4Nzg0MjUx", "avatar_url": "https://avatars3.githubusercontent.com/u/28784251?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ciiiii", "html_url": "https://github.com/ciiiii", "followers_url": "https://api.github.com/users/ciiiii/followers", "following_url": "https://api.github.com/users/ciiiii/following{/other_user}", "gists_url": "https://api.github.com/users/ciiiii/gists{/gist_id}", "starred_url": "https://api.github.com/users/ciiiii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ciiiii/subscriptions", "organizations_url": "https://api.github.com/users/ciiiii/orgs", "repos_url": "https://api.github.com/users/ciiiii/repos", "events_url": "https://api.github.com/users/ciiiii/events{/privacy}", "received_events_url": "https://api.github.com/users/ciiiii/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-01T03:17:07Z", "updated_at": "2018-08-09T15:53:46Z", "closed_at": "2018-08-02T03:09:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "*send_initial_metadata()* can 't pass Metadata object, I think document should be more detailed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/28", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/28/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/28/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/28", "id": 341147625, "node_id": "MDU6SXNzdWUzNDExNDc2MjU=", "number": 28, "title": "Custom grpc status codes support", "user": {"login": "hellysmile", "id": 1834317, "node_id": "MDQ6VXNlcjE4MzQzMTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1834317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellysmile", "html_url": "https://github.com/hellysmile", "followers_url": "https://api.github.com/users/hellysmile/followers", "following_url": "https://api.github.com/users/hellysmile/following{/other_user}", "gists_url": "https://api.github.com/users/hellysmile/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellysmile/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellysmile/subscriptions", "organizations_url": "https://api.github.com/users/hellysmile/orgs", "repos_url": "https://api.github.com/users/hellysmile/repos", "events_url": "https://api.github.com/users/hellysmile/events{/privacy}", "received_events_url": "https://api.github.com/users/hellysmile/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-07-13T20:19:39Z", "updated_at": "2018-08-09T18:37:51Z", "closed_at": "2018-08-09T18:37:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there! Thnx for awesome lib!\r\n\r\nIs there any way to provide custom headers map for stub/channel? Cuz right now it raises ValueError for unknown status code", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/27", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/27/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/27/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/27", "id": 340672768, "node_id": "MDU6SXNzdWUzNDA2NzI3Njg=", "number": 27, "title": "Server failed to properly handle request cancel", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 524962456, "node_id": "MDU6TGFiZWw1MjQ5NjI0NTY=", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-12T14:51:48Z", "updated_at": "2019-02-27T18:35:10Z", "closed_at": "2018-10-27T18:43:05Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Exception:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/server.py\", line 310, in request_handler\r\n    await method.func(stream)\r\n  File \"/usr/local/lib/python3.6/dist-packages/featureflags/server/rpc/service.py\", line 51, in Exchange\r\n    await self._queue.StoreStats.add(task, timeout=timeout)\r\n  File \"/usr/local/lib/python3.6/dist-packages/taskqueue/client/queue.py\", line 21, in add\r\n    await self._task_queue_stub.Add(task, timeout=timeout)\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 473, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 286, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/client.py\", line 221, in recv_initial_metadata\r\n    headers = await self._stream.recv_headers()\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 215, in recv_headers\r\n    return await self.__headers__.get()\r\n  File \"/usr/lib/python3.6/asyncio/queues.py\", line 167, in get\r\n    yield from getter\r\nconcurrent.futures._base.CancelledError\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/h2/connection.py\", line 585, in _get_or_create_stream\r\n    return self.streams[stream_id]\r\nKeyError: 48141\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/server.py\", line 325, in request_handler\r\n    raise\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/server.py\", line 220, in __aexit__\r\n    status_message=status_message)\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/server.py\", line 170, in send_trailing_metadata\r\n    await self._stream.send_headers(headers, end_stream=True)\r\n  File \"/usr/local/lib/python3.6/dist-packages/grpclib/protocol.py\", line 267, in send_headers\r\n    end_stream=end_stream)\r\n  File \"/usr/local/lib/python3.6/dist-packages/h2/connection.py\", line 763, in send_headers\r\n    stream_id, AllowedStreamIDs(self.config.client_side)\r\n  File \"/usr/local/lib/python3.6/dist-packages/h2/connection.py\", line 587, in _get_or_create_stream\r\n    return self._begin_new_stream(stream_id, allowed_ids)\r\n  File \"/usr/local/lib/python3.6/dist-packages/h2/connection.py\", line 454, in _begin_new_stream\r\n    raise StreamIDTooLowError(stream_id, highest_stream_id)\r\nh2.exceptions.StreamIDTooLowError: StreamIDTooLowError: 48141 is lower than 48143\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/26", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/26/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/26/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/26", "id": 334786882, "node_id": "MDU6SXNzdWUzMzQ3ODY4ODI=", "number": 26, "title": "False-positive isinstance assert after generation", "user": {"login": "condemil", "id": 722990, "node_id": "MDQ6VXNlcjcyMjk5MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/722990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/condemil", "html_url": "https://github.com/condemil", "followers_url": "https://api.github.com/users/condemil/followers", "following_url": "https://api.github.com/users/condemil/following{/other_user}", "gists_url": "https://api.github.com/users/condemil/gists{/gist_id}", "starred_url": "https://api.github.com/users/condemil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/condemil/subscriptions", "organizations_url": "https://api.github.com/users/condemil/orgs", "repos_url": "https://api.github.com/users/condemil/repos", "events_url": "https://api.github.com/users/condemil/events{/privacy}", "received_events_url": "https://api.github.com/users/condemil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-06-22T08:15:11Z", "updated_at": "2018-06-29T09:45:40Z", "closed_at": "2018-06-29T09:45:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Python version: 3.6.5\r\nOS: macOS 10.13.5\r\nTested versions: 0.1.0 and 0.1.1rc2\r\n\r\nThe following [line](https://github.com/vmagamedov/grpclib/blob/master/grpclib/encoding/proto.py#L8) gives false-positive AssertionError for generated class. When I removed the assert I was able to call the server and received the proper response.\r\n\r\nHow to reproduce:\r\nTo reproduce the issue the `helloworld_pb2.py` and `helloworld_grpc.py` files from hello world example should be re-generated with `grpc_tools` command inside the current directory.\r\n\r\n- Go to directory `grpclib/example/helloworld/`\r\n- Run the command\r\n\r\n      python3 -m grpc_tools.protoc -I. --python_out=. --python_grpc_out=. helloworld.proto\r\n\r\nbe aware that the command called from the same directory where `.proto` file is located\r\n\r\n- Run `server.py`\r\n- Call server with command\r\n\r\n      grpcurl -plaintext -proto helloworld.proto 127.0.0.1:50051 helloworld.Greeter/UnaryUnaryGreeting\r\n\r\nThis issue prevents you to store `.proto` files aside `.py` sources.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/24", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/24/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/24/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/24", "id": 319884496, "node_id": "MDU6SXNzdWUzMTk4ODQ0OTY=", "number": 24, "title": "Server does not send a response when a handler is not found", "user": {"login": "Bondza", "id": 1886115, "node_id": "MDQ6VXNlcjE4ODYxMTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1886115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bondza", "html_url": "https://github.com/Bondza", "followers_url": "https://api.github.com/users/Bondza/followers", "following_url": "https://api.github.com/users/Bondza/following{/other_user}", "gists_url": "https://api.github.com/users/Bondza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bondza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bondza/subscriptions", "organizations_url": "https://api.github.com/users/Bondza/orgs", "repos_url": "https://api.github.com/users/Bondza/repos", "events_url": "https://api.github.com/users/Bondza/events{/privacy}", "received_events_url": "https://api.github.com/users/Bondza/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2018-05-03T11:37:38Z", "updated_at": "2018-05-07T20:50:00Z", "closed_at": "2018-05-07T20:50:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nBy accident I tried using `grpc_cli ls` when trying grpclib and I noticed that `grpc_cli` never exits and I think it's because it never gets a response.\r\n\r\nThe server outputs:\r\n```\r\nServer error\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python3.6/site-packages/grpclib/server.py\", line 139, in request_handler\r\n    assert method is not None, h2_path\r\nAssertionError: /grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo\r\n```\r\nSo then it should run these lines of [code](https://github.com/vmagamedov/grpclib/blob/master/grpclib/server.py#L252-L255).\r\n\r\nShould it not return `Status.UNIMPLEMENTED` in this case? It looks like this is what [grpc](https://github.com/grpc/grpc/blob/master/src/python/grpcio/grpc/_server.py#L623-L625) does.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/22", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/22/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/22/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/22", "id": 312894088, "node_id": "MDU6SXNzdWUzMTI4OTQwODg=", "number": 22, "title": "Example is outdated", "user": {"login": "ccocheci", "id": 1972673, "node_id": "MDQ6VXNlcjE5NzI2NzM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1972673?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccocheci", "html_url": "https://github.com/ccocheci", "followers_url": "https://api.github.com/users/ccocheci/followers", "following_url": "https://api.github.com/users/ccocheci/following{/other_user}", "gists_url": "https://api.github.com/users/ccocheci/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccocheci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccocheci/subscriptions", "organizations_url": "https://api.github.com/users/ccocheci/orgs", "repos_url": "https://api.github.com/users/ccocheci/repos", "events_url": "https://api.github.com/users/ccocheci/events{/privacy}", "received_events_url": "https://api.github.com/users/ccocheci/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-10T12:08:47Z", "updated_at": "2018-04-10T14:58:41Z", "closed_at": "2018-04-10T14:58:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Please update the example code. The helloworld.proto was updated, but the example code using it was not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/20", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/20/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/20/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/20", "id": 310514296, "node_id": "MDU6SXNzdWUzMTA1MTQyOTY=", "number": 20, "title": "Support for Existing Definitions and Signatures", "user": {"login": "seglberg", "id": 799727, "node_id": "MDQ6VXNlcjc5OTcyNw==", "avatar_url": "https://avatars3.githubusercontent.com/u/799727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seglberg", "html_url": "https://github.com/seglberg", "followers_url": "https://api.github.com/users/seglberg/followers", "following_url": "https://api.github.com/users/seglberg/following{/other_user}", "gists_url": "https://api.github.com/users/seglberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/seglberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seglberg/subscriptions", "organizations_url": "https://api.github.com/users/seglberg/orgs", "repos_url": "https://api.github.com/users/seglberg/repos", "events_url": "https://api.github.com/users/seglberg/events{/privacy}", "received_events_url": "https://api.github.com/users/seglberg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-02T15:22:01Z", "updated_at": "2018-07-12T14:53:18Z", "closed_at": "2018-07-12T14:53:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am very excited about a project like this finally making progress on proper concurrency support for grpc. \r\n\r\nI am curious about the vision for this library. I understand that grpcio is not a run time requirement, but since the standard grpcio library is already in wide use, I think it would be beneficial to create \"shim\" library instead of a replacement.\r\n\r\nFor example, consider using the grpc definitions generated by the upstream protobuf compiler and using the existing workflow and method signatures. This is made possible since a subclass can override a parent's method with an async version.\r\n\r\nFor example:\r\n```python\r\n# Standard gRPC\r\n\r\nimport futures\r\nimport grpc\r\nimport example_pb2\r\nimport example_pb2_grpc\r\n\r\nclass ExampleServicer(example_pb2_grpc.ExampleServicer):\r\n    def GetSomething(request, context):\r\n         value = do_something(request.param)\r\n         return example_pb2.Something(value=value)\r\n\r\n    def GetSomething2(request, context):\r\n         value = do_something2(request.param)\r\n         return example_pb2.Something2(value=value)\r\n\r\ndef serve():\r\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\r\n    example_pb2_grpc.add_ExampleServicer_to_server(ExampleServicer(), server)\r\n    server.add_insecure_port('[::]:50051')\r\n    server.start()\r\n```\r\n```python\r\n# Shimmed gRPC\r\n\r\nimport asyncio\r\nimport grpclib\r\nimport example_pb2\r\nimport example_pb2_grpc\r\n\r\nclass ExampleServicer(example_pb2_grpc.ExampleServicer):\r\n    async def GetSomething(request, context):\r\n        # Notice this method has become async\r\n        # and should be called as a coroutine.\r\n        value = await do_something_async(request.param)\r\n        return example_pb2.Something(value=value)\r\n\r\n    def GetSomething2(request, context):\r\n         # Notice this method is not async\r\n         # and should be called as a normal method.\r\n         # Perhaps run_in_executor?\r\n         value = do_something2(request.param)\r\n         return example_pb2.Something2(value=value)\r\n\r\ndef serve():\r\n    loop = asyncio.get_event_loop()\r\n    server = grpclib.server(loop)\r\n    example_pb2_grpc.add_ExampleServicer_to_server(ExampleServicer(), server)\r\n    server.add_insecure_port('[::]:50051')\r\n    server.start()  # loop.run_forever() ?\r\n```\r\n\r\nI think this would massively increase the adoption rate of this library. We have a few hundred definitions at the moment and essentially rewriting the servicers would be difficult at this point. Being able to move over different rpc methods to async as we touch them would be amazing. Personally I could care less that the grpcio requirement is removed, since we are already using it at this point.\r\n\r\nAnother idea would be to make the behavior of grpclib match that of the orginal grpcio library. For example, we rely on exceptions being propagated in order to capture them by Sentry but grpclib behavior is to swallow exception. This means we would have to rely on some monkey patching to hook capturing of exceptions at this point.\r\n\r\nAgain, awesome work on this! I am just curious to see what other think about adopting a library like this in their projects.\r\n\r\n:+1: :sunglasses: \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/18", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/18/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/18/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/18", "id": 301021318, "node_id": "MDU6SXNzdWUzMDEwMjEzMTg=", "number": 18, "title": "Support async generator for <Any>StreamMethod classes", "user": {"login": "claws", "id": 1298001, "node_id": "MDQ6VXNlcjEyOTgwMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1298001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claws", "html_url": "https://github.com/claws", "followers_url": "https://api.github.com/users/claws/followers", "following_url": "https://api.github.com/users/claws/following{/other_user}", "gists_url": "https://api.github.com/users/claws/gists{/gist_id}", "starred_url": "https://api.github.com/users/claws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claws/subscriptions", "organizations_url": "https://api.github.com/users/claws/orgs", "repos_url": "https://api.github.com/users/claws/repos", "events_url": "https://api.github.com/users/claws/events{/privacy}", "received_events_url": "https://api.github.com/users/claws/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-28T13:21:14Z", "updated_at": "2019-02-19T20:27:33Z", "closed_at": "2018-07-12T14:55:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The current implementation of the UnaryStreamMethod assumes that it will accumulate all replies before returning. This is not always desirable.\r\n\r\nFor example, in my use case I have a Unary_Stream method that provides a publisher style interface. The client sends a Unary request to open the channel and then expects to process a never ending stream of updates. In this use case I need to be able to receive and process individual updates as they are received. In this use case an async generator style interface would be preferable.\r\n\r\nSomething along the lines of:\r\n```python\r\nasync for update in stub.UnaryStreamGreeting(request):\r\n    handle_update(update)\r\n```\r\n\r\nI can kind of achieve what I want if I modify the ``grpclib.client.py`` code a little to be:\r\n```python\r\nclass UnaryStreamMethod(ServiceMethod):\r\n\r\n    async def __call__(self, message, *, timeout=None, metadata=None):\r\n        async with self.open(timeout=timeout, metadata=metadata) as stream:\r\n            await stream.send_message(message, end=True)\r\n            # return await _to_list(stream)\r\n            async for reply in stream.recv_message():\r\n                yield reply\r\n```\r\nHowever this will only work with the more advanced usage such as this:\r\n```python\r\n    async with stub.UnaryStreamGreeting.open() as stream:\r\n        print(f'sending {request.name}')\r\n        await stream.send_message(request, end=True)\r\n        async for response in stream:\r\n            print(f'received: {response.message}')\r\n```\r\nand not with the simpler usage such as this:\r\n```python\r\nresponses = await stub.UnaryStreamGreeting(request)\r\n```\r\nwhich raises:\r\n```python\r\nTypeError: object async_generator can't be used in 'await' expression\r\n```\r\n\r\nPerhaps implementing ``__aiter__`` and ``__anext__`` on the UnaryStreamMethod class could provide the appropriate API allowing it to be used as an async generator to yield individual messages.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/13", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/13/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/13/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/13", "id": 277907279, "node_id": "MDU6SXNzdWUyNzc5MDcyNzk=", "number": 13, "title": "PyPI release", "user": {"login": "mosquito", "id": 792981, "node_id": "MDQ6VXNlcjc5Mjk4MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/792981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mosquito", "html_url": "https://github.com/mosquito", "followers_url": "https://api.github.com/users/mosquito/followers", "following_url": "https://api.github.com/users/mosquito/following{/other_user}", "gists_url": "https://api.github.com/users/mosquito/gists{/gist_id}", "starred_url": "https://api.github.com/users/mosquito/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mosquito/subscriptions", "organizations_url": "https://api.github.com/users/mosquito/orgs", "repos_url": "https://api.github.com/users/mosquito/repos", "events_url": "https://api.github.com/users/mosquito/events{/privacy}", "received_events_url": "https://api.github.com/users/mosquito/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-11-29T21:08:14Z", "updated_at": "2017-11-30T13:38:08Z", "closed_at": "2017-11-30T13:38:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Why the `grpclib` was not released on pypi?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/9", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/9/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/9/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/9", "id": 272513700, "node_id": "MDU6SXNzdWUyNzI1MTM3MDA=", "number": 9, "title": "Transport implementation is buggy", "user": {"login": "fraxinas", "id": 1109826, "node_id": "MDQ6VXNlcjExMDk4MjY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1109826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fraxinas", "html_url": "https://github.com/fraxinas", "followers_url": "https://api.github.com/users/fraxinas/followers", "following_url": "https://api.github.com/users/fraxinas/following{/other_user}", "gists_url": "https://api.github.com/users/fraxinas/gists{/gist_id}", "starred_url": "https://api.github.com/users/fraxinas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fraxinas/subscriptions", "organizations_url": "https://api.github.com/users/fraxinas/orgs", "repos_url": "https://api.github.com/users/fraxinas/repos", "events_url": "https://api.github.com/users/fraxinas/events{/privacy}", "received_events_url": "https://api.github.com/users/fraxinas/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 524962456, "node_id": "MDU6TGFiZWw1MjQ5NjI0NTY=", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2017-11-09T10:31:08Z", "updated_at": "2018-06-09T10:52:07Z", "closed_at": "2018-06-09T10:52:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n$ python3 -m helloworld.server\r\nServing on 127.0.0.1:50051\r\nException in callback _SelectorSocketTransport._read_ready()\r\nhandle: <Handle _SelectorSocketTransport._read_ready()>\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/asyncio/events.py\", line 127, in _run\r\n    self._callback(*self._args)\r\n  File \"/usr/lib/python3.6/asyncio/selector_events.py\", line 731, in _read_ready\r\n    self._protocol.data_received(data)\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/protocol.py\", line 412, in data_received\r\n    self.processor.process(event)\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/protocol.py\", line 335, in process\r\n    proc(event)\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/protocol.py\", line 371, in process_stream_reset\r\n    stream = self.streams.pop(event.stream_id)\r\nKeyError: 1\r\nServer error\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/server.py\", line 137, in request_handler\r\n    await method.func(stream)\r\n  File \"/home/fraxinas/Code/grpclib/example/helloworld/server.py\", line 14, in SayHello\r\n    await stream.send_message(HelloReply(message=message))\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/server.py\", line 48, in send_message\r\n    await self.send_initial_metadata()\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/server.py\", line 43, in send_initial_metadata\r\n    ('content-type', CONTENT_TYPE)])\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/protocol.py\", line 231, in send_headers\r\n    end_stream=end_stream)\r\n  File \"/usr/lib/python3.6/site-packages/h2/connection.py\", line 766, in send_headers\r\n    headers, self.encoder, end_stream\r\n  File \"/usr/lib/python3.6/site-packages/h2/stream.py\", line 895, in send_headers\r\n    events = self.state_machine.process_input(input_)\r\n  File \"/usr/lib/python3.6/site-packages/h2/stream.py\", line 129, in process_input\r\n    return func(self, previous_state)\r\n  File \"/usr/lib/python3.6/site-packages/h2/stream.py\", line 348, in send_on_closed_stream\r\n    raise StreamClosedError(self.stream_id)\r\nh2.exceptions.StreamClosedError: 1\r\n```\r\n\r\n```\r\n$ python3 -m helloworld.client\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/fraxinas/Code/grpclib/example/helloworld/client.py\", line 17, in <module>\r\n    asyncio.get_event_loop().run_until_complete(main())\r\n  File \"/usr/lib/python3.6/asyncio/base_events.py\", line 467, in run_until_complete\r\n    return future.result()\r\n  File \"/home/fraxinas/Code/grpclib/example/helloworld/client.py\", line 13, in main\r\n    print(await stub.SayHello(HelloRequest(name='World')))\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/client.py\", line 234, in __call__\r\n    return await stream.recv_message()\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/client.py\", line 117, in recv_message\r\n    await self.recv_initial_metadata()\r\n  File \"/usr/lib/python3.6/site-packages/grpclib/client.py\", line 95, in recv_initial_metadata\r\n    async with self._with_deadline():\r\nAttributeError: __aexit__\r\n``` \r\nwith master https://github.com/vmagamedov/grpclib/commit/d523b60cbe52bdfc8f5b30e7a3223906b91d6cc9 and\r\n```\r\n$ python -V\r\nPython 3.6.2\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/8", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/8/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/8/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/8", "id": 269159047, "node_id": "MDU6SXNzdWUyNjkxNTkwNDc=", "number": 8, "title": "Wake up all coroutines in protocol.Stream after connection was lost", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 524962456, "node_id": "MDU6TGFiZWw1MjQ5NjI0NTY=", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-27T16:09:29Z", "updated_at": "2018-05-29T06:46:48Z", "closed_at": "2018-05-29T06:46:47Z", "author_association": "OWNER", "active_lock_reason": null, "body": "On the server-side this is not very critical, because all request handlers are cancelled in case of connection lost. But on the client-side it is possible to hang forever.\r\n\r\nList of awaitable things client and server can still await after connection was lost:\r\n\r\n- `protocol.Stream.__headers__.get()`\r\n- `protocol.Stream.__buffer__.read()`\r\n- `protocol.Stream._connection.write_ready.wait()`\r\n- `protocol.Stream.__window_updated__.wait()`\r\n- `protocol.Stream._connection.outbound_streams_limit.wait()`\r\n\r\nAll coroutines, which are awaiting these things should be awaken and they should raise exception.\r\n\r\nPossible solution: see [async-timeout](https://github.com/aio-libs/async-timeout) for implementation details. It is possible to keep track of all currently running tasks (e.g. `recv_headers`) and cancel them. But `Task.cancel()` will loose all details and it is hard to debug such errors.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/7", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/7/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/7/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/7", "id": 269156232, "node_id": "MDU6SXNzdWUyNjkxNTYyMzI=", "number": 7, "title": "Stream's id should be generated right before sending request to the server", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 524962456, "node_id": "MDU6TGFiZWw1MjQ5NjI0NTY=", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-27T16:00:10Z", "updated_at": "2017-10-30T22:09:17Z", "closed_at": "2017-10-30T22:09:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Currently `H2Connection.get_next_available_stream_id` is generated too early and can be reused by another stream from another coroutine if concurrency is more than 1.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/6", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/6/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/6/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/6", "id": 269154422, "node_id": "MDU6SXNzdWUyNjkxNTQ0MjI=", "number": 6, "title": "Maximum open streams limit is not handled properly on the client-side", "user": {"login": "vmagamedov", "id": 179213, "node_id": "MDQ6VXNlcjE3OTIxMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/179213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmagamedov", "html_url": "https://github.com/vmagamedov", "followers_url": "https://api.github.com/users/vmagamedov/followers", "following_url": "https://api.github.com/users/vmagamedov/following{/other_user}", "gists_url": "https://api.github.com/users/vmagamedov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmagamedov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmagamedov/subscriptions", "organizations_url": "https://api.github.com/users/vmagamedov/orgs", "repos_url": "https://api.github.com/users/vmagamedov/repos", "events_url": "https://api.github.com/users/vmagamedov/events{/privacy}", "received_events_url": "https://api.github.com/users/vmagamedov/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 524962456, "node_id": "MDU6TGFiZWw1MjQ5NjI0NTY=", "url": "https://api.github.com/repos/vmagamedov/grpclib/labels/bug", "name": "bug", "color": "ee0701", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-27T15:54:24Z", "updated_at": "2017-10-30T20:16:26Z", "closed_at": "2017-10-30T19:44:06Z", "author_association": "OWNER", "active_lock_reason": null, "body": "This leads to such exceptions when you try to open more than 100 (default in h2 server) concurrent streams:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/volodymyr/workspace/grpclib/example/.venv/lib/python3.6/site-packages/grpclib/client.py\", line 234, in __call__\r\n    await stream.send_message(message, end=True)\r\n  File \"/Users/volodymyr/workspace/grpclib/example/.venv/lib/python3.6/site-packages/grpclib/client.py\", line 72, in send_message\r\n    await self.send_request()\r\n  File \"/Users/volodymyr/workspace/grpclib/example/.venv/lib/python3.6/site-packages/grpclib/client.py\", line 67, in send_request\r\n    await self._stream.send_headers(headers_list)\r\n  File \"/Users/volodymyr/workspace/grpclib/example/.venv/lib/python3.6/site-packages/grpclib/protocol.py\", line 146, in send_headers\r\n    end_stream=end_stream)\r\n  File \"/Users/volodymyr/workspace/grpclib/example/.venv/lib/python3.6/site-packages/h2/connection.py\", line 758, in send_headers\r\n    (max_open_streams, self.open_outbound_streams)\r\nh2.exceptions.TooManyStreamsError: Max outbound streams is 100, 100 open\r\n```\r\nClient should wait when currently open streams count will be less than maximum allowed by the server.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/4", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/4/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/4/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/4", "id": 259223655, "node_id": "MDU6SXNzdWUyNTkyMjM2NTU=", "number": 4, "title": "No Python 2.7 support due to dependancy `multidict`.", "user": {"login": "denis-trofimov", "id": 24657082, "node_id": "MDQ6VXNlcjI0NjU3MDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/24657082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denis-trofimov", "html_url": "https://github.com/denis-trofimov", "followers_url": "https://api.github.com/users/denis-trofimov/followers", "following_url": "https://api.github.com/users/denis-trofimov/following{/other_user}", "gists_url": "https://api.github.com/users/denis-trofimov/gists{/gist_id}", "starred_url": "https://api.github.com/users/denis-trofimov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denis-trofimov/subscriptions", "organizations_url": "https://api.github.com/users/denis-trofimov/orgs", "repos_url": "https://api.github.com/users/denis-trofimov/repos", "events_url": "https://api.github.com/users/denis-trofimov/events{/privacy}", "received_events_url": "https://api.github.com/users/denis-trofimov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-20T16:22:30Z", "updated_at": "2017-09-21T07:40:22Z", "closed_at": "2017-09-21T07:40:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "If interested, please see comment here. I can not pass installing further now.\r\nhttps://github.com/aio-libs/multidict/issues/4", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/3", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/3/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/3/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/3", "id": 259219825, "node_id": "MDU6SXNzdWUyNTkyMTk4MjU=", "number": 3, "title": "No module named `pathlib` while pip install.", "user": {"login": "denis-trofimov", "id": 24657082, "node_id": "MDQ6VXNlcjI0NjU3MDgy", "avatar_url": "https://avatars1.githubusercontent.com/u/24657082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denis-trofimov", "html_url": "https://github.com/denis-trofimov", "followers_url": "https://api.github.com/users/denis-trofimov/followers", "following_url": "https://api.github.com/users/denis-trofimov/following{/other_user}", "gists_url": "https://api.github.com/users/denis-trofimov/gists{/gist_id}", "starred_url": "https://api.github.com/users/denis-trofimov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denis-trofimov/subscriptions", "organizations_url": "https://api.github.com/users/denis-trofimov/orgs", "repos_url": "https://api.github.com/users/denis-trofimov/repos", "events_url": "https://api.github.com/users/denis-trofimov/events{/privacy}", "received_events_url": "https://api.github.com/users/denis-trofimov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-20T16:09:46Z", "updated_at": "2017-09-22T12:15:35Z", "closed_at": "2017-09-22T12:15:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Broken in python 2.7 virtualenv.\r\n\r\n(py27) denis@ra:~/p$ python\r\nPython 2.7.13 (default, Jan 19 2017, 14:48:08) \r\n[GCC 6.3.0 20170118] on linux2\r\n\r\n```py\r\n(py27) denis@ra:~/p$ pip install grpclib                                    \r\nRequirement already satisfied: grpclib in /home/denis/.virtualenvs/py27/lib/python2.7/site-packages/grpclib-0.2.0-py2.7.egg\r\nCollecting h2 (from grpclib)\r\n  Using cached h2-3.0.1-py2.py3-none-any.whl\r\nCollecting async-timeout>=1.3.0 (from grpclib)\r\n  Using cached async-timeout-1.4.0.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-build-pNkdSz/async-timeout/setup.py\", line 1, in <module>\r\n        import pathlib\r\n    ImportError: No module named pathlib\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-pNkdSz/async-timeout/\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vmagamedov/grpclib/issues/2", "repository_url": "https://api.github.com/repos/vmagamedov/grpclib", "labels_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/2/comments", "events_url": "https://api.github.com/repos/vmagamedov/grpclib/issues/2/events", "html_url": "https://github.com/vmagamedov/grpclib/issues/2", "id": 258810250, "node_id": "MDU6SXNzdWUyNTg4MTAyNTA=", "number": 2, "title": "Use templating to generate code files", "user": {"login": "claws", "id": 1298001, "node_id": "MDQ6VXNlcjEyOTgwMDE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1298001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claws", "html_url": "https://github.com/claws", "followers_url": "https://api.github.com/users/claws/followers", "following_url": "https://api.github.com/users/claws/following{/other_user}", "gists_url": "https://api.github.com/users/claws/gists{/gist_id}", "starred_url": "https://api.github.com/users/claws/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claws/subscriptions", "organizations_url": "https://api.github.com/users/claws/orgs", "repos_url": "https://api.github.com/users/claws/repos", "events_url": "https://api.github.com/users/claws/events{/privacy}", "received_events_url": "https://api.github.com/users/claws/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-19T12:55:41Z", "updated_at": "2017-09-20T14:28:30Z", "closed_at": "2017-09-20T14:28:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Based on past experience I have found that generating source code files using templates is far more understandable and sustainable than manually managing structures and indenting as is done currently in the ``plugin/main.py``. \r\n\r\nI have modified the grplib package to use this approach, by using *jinja2*. If you are interested in seeing this let me know and I'll submit a pull request. ", "performed_via_github_app": null, "score": 1.0}]}