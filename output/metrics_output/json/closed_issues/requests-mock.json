{"total_count": 52, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/142", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/142/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/142/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/142", "id": 674958462, "node_id": "MDU6SXNzdWU2NzQ5NTg0NjI=", "number": 142, "title": "Query string parameters get lost", "user": {"login": "lahwaacz", "id": 1289205, "node_id": "MDQ6VXNlcjEyODkyMDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1289205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lahwaacz", "html_url": "https://github.com/lahwaacz", "followers_url": "https://api.github.com/users/lahwaacz/followers", "following_url": "https://api.github.com/users/lahwaacz/following{/other_user}", "gists_url": "https://api.github.com/users/lahwaacz/gists{/gist_id}", "starred_url": "https://api.github.com/users/lahwaacz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lahwaacz/subscriptions", "organizations_url": "https://api.github.com/users/lahwaacz/orgs", "repos_url": "https://api.github.com/users/lahwaacz/repos", "events_url": "https://api.github.com/users/lahwaacz/events{/privacy}", "received_events_url": "https://api.github.com/users/lahwaacz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-07T11:40:19Z", "updated_at": "2020-08-11T17:00:44Z", "closed_at": "2020-08-11T17:00:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to write tests for some code using an RPC API. The communication is done via `requests.get(some_url, params=some_params)`, but the `params` seem to get lost somewhere in the requests-mock adapter...\r\n\r\nA simple reproducible example (using `pytest`):\r\n```python\r\nimport requests\r\nimport requests_mock\r\n\r\ndef test_params(requests_mock):\r\n    api_url = \"mock://example.org/api.php\"\r\n    params = {'key': 'val'}\r\n    output = {'key': ['val']}\r\n\r\n    def api_callback(request, context):\r\n        if not request.qs:\r\n            context.status_code = 400\r\n            context.reason = \"No query string given\"\r\n        return request.qs\r\n    get = requests_mock.get(api_url, json=api_callback)\r\n\r\n    # this does not work\r\n    response = requests.get(api_url, params=params)\r\n    # this works\r\n#    response = requests.get(api_url + \"?key=val\")\r\n\r\n    assert response.status_code == 200\r\n    assert response.json() == output\r\n    assert get.called_once\r\n    assert get.last_request.qs == output\r\n```\r\nThe output is:\r\n```\r\n======================================== FAILURES ========================================\r\n______________________________________ test_params _______________________________________\r\n\r\nrequests_mock = <requests_mock.mocker.Mocker object at 0x7fc4b2c7bdc0>\r\n\r\n    def test_params(requests_mock):\r\n        api_url = \"mock://example.org/api.php\"\r\n        params = {'key': 'val'}\r\n        output = {'key': ['val']}\r\n    \r\n        def api_callback(request, context):\r\n            if not request.qs:\r\n                context.status_code = 400\r\n                context.reason = \"No query string given\"\r\n            return request.qs\r\n        get = requests_mock.get(api_url, json=api_callback)\r\n    \r\n        # this does not work\r\n        response = requests.get(api_url, params=params)\r\n        # this works\r\n    #    response = requests.get(api_url + \"?key=val\")\r\n    \r\n>       assert response.status_code == 200\r\nE       assert 400 == 200\r\nE        +  where 400 = <Response [400]>.status_code\r\n\r\ntest_requests_mock.py:21: AssertionError\r\n```\r\n\r\nCan you help me?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/135", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/135/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/135/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/135/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/135", "id": 596907694, "node_id": "MDU6SXNzdWU1OTY5MDc2OTQ=", "number": 135, "title": "limited copy when used as decorator", "user": {"login": "rfportilla", "id": 1591692, "node_id": "MDQ6VXNlcjE1OTE2OTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1591692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rfportilla", "html_url": "https://github.com/rfportilla", "followers_url": "https://api.github.com/users/rfportilla/followers", "following_url": "https://api.github.com/users/rfportilla/following{/other_user}", "gists_url": "https://api.github.com/users/rfportilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/rfportilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rfportilla/subscriptions", "organizations_url": "https://api.github.com/users/rfportilla/orgs", "repos_url": "https://api.github.com/users/rfportilla/repos", "events_url": "https://api.github.com/users/rfportilla/events{/privacy}", "received_events_url": "https://api.github.com/users/rfportilla/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T22:46:01Z", "updated_at": "2020-04-09T02:19:38Z", "closed_at": "2020-04-09T02:19:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I sub-classed Mocker so that I could add several pre-configured matches.  This is boiler plate for 100+ tests.  When I use in with block, it works perfectly.  However, it fails when using as decorator.  I discovered that Mocker.decorate_callable() calls a very limited self.copy.  This fails to copy the _adapter.  If replaced with copy.deepcopy(), everything is copied properly and the decorator works as expected.  \r\n\r\n2 lines needed:\r\n```\r\n...\r\nfrom copy import deepcopy\r\n```\r\n\r\n```\r\n...\r\n   def copy(self):\r\n       return deepcopy(self)\r\n...\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/132", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/132/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/132/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/132", "id": 592615482, "node_id": "MDU6SXNzdWU1OTI2MTU0ODI=", "number": 132, "title": "Query strings not working on custom protocols (mock://)", "user": {"login": "kedare", "id": 359877, "node_id": "MDQ6VXNlcjM1OTg3Nw==", "avatar_url": "https://avatars3.githubusercontent.com/u/359877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kedare", "html_url": "https://github.com/kedare", "followers_url": "https://api.github.com/users/kedare/followers", "following_url": "https://api.github.com/users/kedare/following{/other_user}", "gists_url": "https://api.github.com/users/kedare/gists{/gist_id}", "starred_url": "https://api.github.com/users/kedare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kedare/subscriptions", "organizations_url": "https://api.github.com/users/kedare/orgs", "repos_url": "https://api.github.com/users/kedare/repos", "events_url": "https://api.github.com/users/kedare/events{/privacy}", "received_events_url": "https://api.github.com/users/kedare/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2020-04-02T13:03:53Z", "updated_at": "2020-04-27T08:27:03Z", "closed_at": "2020-04-27T08:27:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nI started to use this library to mock API servers, it is working fine until when I start to have to match query strings, it looks like they get completely deleted during the process of going thru the matcher.\r\n\r\nI made some tests and when I run real http requests, the value of `response.request.url` does include the query string (like `https://www.google.com/?test=true`), but when mocking, they are removed from the original URL (like `https://www.google.com/`)\r\n\r\nThen it doesn't match the matchers (I get a `requests_mock.exceptions.NoMockAddress` when both the matcher and the query I an trying to run have the query strings)\r\n\r\nI could not find any workaround so far, is this a known issue ?\r\n\r\n```\r\nrequests==2.23.0\r\nrequests-mock==1.7.0\r\n```\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/129", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/129/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/129/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/129", "id": 570271287, "node_id": "MDU6SXNzdWU1NzAyNzEyODc=", "number": 129, "title": "Needed feature: partial or pattern matching of url", "user": {"login": "cowlinator", "id": 4963190, "node_id": "MDQ6VXNlcjQ5NjMxOTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/4963190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cowlinator", "html_url": "https://github.com/cowlinator", "followers_url": "https://api.github.com/users/cowlinator/followers", "following_url": "https://api.github.com/users/cowlinator/following{/other_user}", "gists_url": "https://api.github.com/users/cowlinator/gists{/gist_id}", "starred_url": "https://api.github.com/users/cowlinator/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cowlinator/subscriptions", "organizations_url": "https://api.github.com/users/cowlinator/orgs", "repos_url": "https://api.github.com/users/cowlinator/repos", "events_url": "https://api.github.com/users/cowlinator/events{/privacy}", "received_events_url": "https://api.github.com/users/cowlinator/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-25T02:39:05Z", "updated_at": "2020-03-03T21:22:36Z", "closed_at": "2020-03-03T21:22:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "According to the documentation, `requests_mock.mock().get()` needs to be called for every single absolute URL path that my module may make a request to while being tested.  It turns out that for my use case, this is a pretty huge number of URLs.  \r\n\r\nExample: \r\n```\r\nwith requests_mock.mock() as mock_req:\r\n    mock_req.get(\"https://a.particular.domain/00001\", text=\"hi\")\r\n    mock_req.get(\"https://a.particular.domain/00002\", text=\"hi\")\r\n    mock_req.get(\"https://a.particular.domain/00003\", text=\"hi\")\r\n    # etc.\r\n```\r\n\r\nBut the functionality I need is very simple:  every request to `https://a.particular.domain` , regardless of path, should return the exact same data.\r\n\r\nI'd really like to see some kind of regex or glob pattern matching for URLs.  Or, if that is too complex to implement, I'd like to be able to specify a domain without a path.\r\n\r\nExample: \r\n```\r\nwith requests_mock.mock() as mock_req:\r\n    mock_req.get(\"a.particular.domain\", text=\"hi\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/127", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/127/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/127/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/127", "id": 569612801, "node_id": "MDU6SXNzdWU1Njk2MTI4MDE=", "number": 127, "title": "CI Fails on tests.test_request.RequestTests.test_base_params", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-02-24T03:05:39Z", "updated_at": "2020-02-24T03:10:35Z", "closed_at": "2020-02-24T03:10:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "CircleCI is failing on tests.test_request.RequestTests.test_base_params. It looks like they implement a HTTP proxy of some sort that has just started being found in the python environments. \r\n\r\nI'm not sure if this is a CircleCI change, a requests change or something else but it probably doesn't make sense to check something that is modifiable from the outside environment. https://github.com/jamielennox/requests-mock/blob/779a9c87ca20d7d185bc6b64bfdac4b0725160f7/tests/test_request.py#L58", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/124", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/124/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/124/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/124", "id": 567715746, "node_id": "MDU6SXNzdWU1Njc3MTU3NDY=", "number": 124, "title": "_IOReader causes infinite loop with response.iter_content(None)", "user": {"login": "ergoithz", "id": 5426406, "node_id": "MDQ6VXNlcjU0MjY0MDY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5426406?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ergoithz", "html_url": "https://github.com/ergoithz", "followers_url": "https://api.github.com/users/ergoithz/followers", "following_url": "https://api.github.com/users/ergoithz/following{/other_user}", "gists_url": "https://api.github.com/users/ergoithz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ergoithz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ergoithz/subscriptions", "organizations_url": "https://api.github.com/users/ergoithz/orgs", "repos_url": "https://api.github.com/users/ergoithz/repos", "events_url": "https://api.github.com/users/ergoithz/events{/privacy}", "received_events_url": "https://api.github.com/users/ergoithz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/4", "html_url": "https://github.com/jamielennox/requests-mock/milestone/4", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/4/labels", "id": 5133891, "node_id": "MDk6TWlsZXN0b25lNTEzMzg5MQ==", "number": 4, "title": "1.8.0", "description": "", "creator": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "closed", "created_at": "2020-02-24T03:16:03Z", "updated_at": "2020-05-02T13:10:05Z", "due_on": null, "closed_at": "2020-05-02T13:10:05Z"}, "comments": 3, "created_at": "2020-02-19T17:24:35Z", "updated_at": "2020-02-24T03:19:12Z", "closed_at": "2020-02-24T03:19:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "With `stream=True`, when using `requests.Response.iter_content` as in `response.iter_content(None)`, entering the requests urllib3 stream codepath, `urllib3.response.Response` will end calling `_IOReader.read` without arguments. That will cause `_IOReader.closed` to never be updated to `True` so `urllib3.Response.stream` will iterate indefinitely, propagating to `requests.Response.iter_content`, and hanging consumers in an infinite loop.\r\n\r\nTested with `requests==2.22.0` `urllib3==1.25.8` `requests-mock==1.7.0`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/122", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/122/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/122/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/122", "id": 562749051, "node_id": "MDU6SXNzdWU1NjI3NDkwNTE=", "number": 122, "title": "stack overflow tag for requests-mock", "user": {"login": "scharf", "id": 3731059, "node_id": "MDQ6VXNlcjM3MzEwNTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3731059?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scharf", "html_url": "https://github.com/scharf", "followers_url": "https://api.github.com/users/scharf/followers", "following_url": "https://api.github.com/users/scharf/following{/other_user}", "gists_url": "https://api.github.com/users/scharf/gists{/gist_id}", "starred_url": "https://api.github.com/users/scharf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scharf/subscriptions", "organizations_url": "https://api.github.com/users/scharf/orgs", "repos_url": "https://api.github.com/users/scharf/repos", "events_url": "https://api.github.com/users/scharf/events{/privacy}", "received_events_url": "https://api.github.com/users/scharf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-10T18:34:12Z", "updated_at": "2020-02-11T04:34:23Z", "closed_at": "2020-02-11T04:34:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just added a Stack Overflow tag [requests-mock](https://stackoverflow.com/questions/tagged/requests-mock) for this library. I used the following as [tag info](https://stackoverflow.com/tags/requests-mock/info):\r\n\r\n> The requests-mock python library at its core is simply a transport adapter that can be preloaded with responses that are returned if certain URIs are requested. This is particularly useful in unit tests where you want to return known responses from HTTP requests without making actual calls.\r\n\r\nIs this ok?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/118", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/118/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/118/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/118", "id": 545441459, "node_id": "MDU6SXNzdWU1NDU0NDE0NTk=", "number": 118, "title": "Response reason should be set based on status_code", "user": {"login": "jacobbogdanov", "id": 48320751, "node_id": "MDQ6VXNlcjQ4MzIwNzUx", "avatar_url": "https://avatars2.githubusercontent.com/u/48320751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacobbogdanov", "html_url": "https://github.com/jacobbogdanov", "followers_url": "https://api.github.com/users/jacobbogdanov/followers", "following_url": "https://api.github.com/users/jacobbogdanov/following{/other_user}", "gists_url": "https://api.github.com/users/jacobbogdanov/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacobbogdanov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacobbogdanov/subscriptions", "organizations_url": "https://api.github.com/users/jacobbogdanov/orgs", "repos_url": "https://api.github.com/users/jacobbogdanov/repos", "events_url": "https://api.github.com/users/jacobbogdanov/events{/privacy}", "received_events_url": "https://api.github.com/users/jacobbogdanov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/4", "html_url": "https://github.com/jamielennox/requests-mock/milestone/4", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/4/labels", "id": 5133891, "node_id": "MDk6TWlsZXN0b25lNTEzMzg5MQ==", "number": 4, "title": "1.8.0", "description": "", "creator": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 7, "state": "closed", "created_at": "2020-02-24T03:16:03Z", "updated_at": "2020-05-02T13:10:05Z", "due_on": null, "closed_at": "2020-05-02T13:10:05Z"}, "comments": 2, "created_at": "2020-01-05T17:01:06Z", "updated_at": "2020-02-24T03:18:51Z", "closed_at": "2020-02-24T03:18:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `requests.exceptions.HTTPError` message value produced by calling `requests.Response.raise_for_status()` is not consistent when using `requests_mock`.\r\n\r\ncurrent behavior: (assuming there is a web server running on `localhost:443`)\r\n```python\r\n>>>\r\n>>> import requests\r\n>>> requests.get(\"https://localhost/not-found\").raise_for_status()\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n    requests.get(\"https://localhost/not-found\").raise_for_status()\r\n  File \"python3.8/site-packages/requests/models.py\", line 967, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://localhost/not-found\r\n>>>\r\n>>>\r\n>>>\r\n>>>\r\n>>> import requests_mock\r\n>>> with requests_mock.Mocker() as m:\r\n...     m.get(\"https://localhost/not-found\", status_code=404)\r\n...     requests.get(\"https://localhost/not-found\").raise_for_status()\r\n... \r\n<requests_mock.adapter._Matcher object at 0x10898e550>\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 3, in <module>\r\n    requests.get(\"https://localhost/not-found\").raise_for_status()\r\n  File python3.8/site-packages/requests/models.py\", line 967, in raise_for_status\r\n    raise HTTPError(http_error_msg, response=self)\r\nrequests.exceptions.HTTPError: 404 Client Error: None for url: https://localhost/not-found\r\n>>>\r\n```\r\n\r\nSo what should've been:\r\n```\r\n404 Client Error: Not Found for url: https://localhost/not-found\r\n```\r\nended up being\r\n```\r\n404 Client Error: None for url: https://localhost/not-found\r\n```\r\n\r\nThe message is _almost_ identical, but when run using `requests_mock` the `reason` on the `requests.Response` object is never set, so `None` is printed in the message.\r\n\r\nI know that the mock accepts a `reason` argument, but to make it easier to use the caller shouldn't need to specify the `reason` as the default behavior should be to derive the reason from the `status_code`.\r\n\r\nBoth the stdlib (python3.5+) and the `requests` library have this mapping\r\nhttps://docs.python.org/3/library/http.html?highlight=httpstatus#http.HTTPStatus\r\n```python\r\nreason = http.HTTPStatus(status_code).phrase\r\n```\r\n\r\nhttps://requests.readthedocs.io/en/master/api/#status-code-lookup\r\n(although this looks like the opposite mapping: name -> code.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/115", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/115/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/115/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/115", "id": 523846734, "node_id": "MDU6SXNzdWU1MjM4NDY3MzQ=", "number": 115, "title": "Impossible to use array mocking of request_headers", "user": {"login": "papadeltasierra", "id": 18214079, "node_id": "MDQ6VXNlcjE4MjE0MDc5", "avatar_url": "https://avatars3.githubusercontent.com/u/18214079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/papadeltasierra", "html_url": "https://github.com/papadeltasierra", "followers_url": "https://api.github.com/users/papadeltasierra/followers", "following_url": "https://api.github.com/users/papadeltasierra/following{/other_user}", "gists_url": "https://api.github.com/users/papadeltasierra/gists{/gist_id}", "starred_url": "https://api.github.com/users/papadeltasierra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/papadeltasierra/subscriptions", "organizations_url": "https://api.github.com/users/papadeltasierra/orgs", "repos_url": "https://api.github.com/users/papadeltasierra/repos", "events_url": "https://api.github.com/users/papadeltasierra/events{/privacy}", "received_events_url": "https://api.github.com/users/papadeltasierra/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-16T13:42:45Z", "updated_at": "2019-11-23T21:26:10Z", "closed_at": "2019-11-23T13:52:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "`requests_mock` allows arrays of GET (say) responses to be defined using an array syntax but neither `request_headers` nor `complete_qs` are allowed in this array.  Seems that there is no way to configure a set of different `request_headers` or `complete_qs` requirements for multiple GETs.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/111", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/111/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/111/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/111/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/111", "id": 503565228, "node_id": "MDU6SXNzdWU1MDM1NjUyMjg=", "number": 111, "title": "Single request mock", "user": {"login": "Cherlepops", "id": 39387659, "node_id": "MDQ6VXNlcjM5Mzg3NjU5", "avatar_url": "https://avatars3.githubusercontent.com/u/39387659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cherlepops", "html_url": "https://github.com/Cherlepops", "followers_url": "https://api.github.com/users/Cherlepops/followers", "following_url": "https://api.github.com/users/Cherlepops/following{/other_user}", "gists_url": "https://api.github.com/users/Cherlepops/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cherlepops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cherlepops/subscriptions", "organizations_url": "https://api.github.com/users/Cherlepops/orgs", "repos_url": "https://api.github.com/users/Cherlepops/repos", "events_url": "https://api.github.com/users/Cherlepops/events{/privacy}", "received_events_url": "https://api.github.com/users/Cherlepops/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-07T16:39:32Z", "updated_at": "2020-03-31T14:02:43Z", "closed_at": "2020-03-31T14:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to mock a request and leave all the others request execute normally ?\r\n\r\nPrecisely in a pytest test where multiples requests are made and only one should be mocked.\r\n\r\nI saw that in the \"send\" function in adapter.py if a request doesn't have a matching mock it raise a NoMockAddress, is there a way to avoid this ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/109", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/109/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/109/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/109", "id": 497560344, "node_id": "MDU6SXNzdWU0OTc1NjAzNDQ=", "number": 109, "title": "v1.7.0 regression: partial match doesn't seem to work anymore", "user": {"login": "volans-", "id": 6888121, "node_id": "MDQ6VXNlcjY4ODgxMjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6888121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/volans-", "html_url": "https://github.com/volans-", "followers_url": "https://api.github.com/users/volans-/followers", "following_url": "https://api.github.com/users/volans-/following{/other_user}", "gists_url": "https://api.github.com/users/volans-/gists{/gist_id}", "starred_url": "https://api.github.com/users/volans-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/volans-/subscriptions", "organizations_url": "https://api.github.com/users/volans-/orgs", "repos_url": "https://api.github.com/users/volans-/repos", "events_url": "https://api.github.com/users/volans-/events{/privacy}", "received_events_url": "https://api.github.com/users/volans-/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-24T09:12:43Z", "updated_at": "2020-03-31T14:03:04Z", "closed_at": "2020-03-31T14:03:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, with the recent release of v1.7.0 I've noticed a regression in my project with partial matching that was working fine with v1.6.0.\r\n\r\nHere an example snippet to repro it.\r\n\r\n## v1.6.0\r\n```\r\n>>> import requests\r\n>>> import requests_mock\r\n>>> with requests_mock.Mocker() as mocker:\r\n...     mocker.register_uri('GET', 'https://localhost:443/endpoint?query=')\r\n...     requests.get('https://localhost:443/endpoint?query=foo')\r\n...\r\n<requests_mock.adapter._Matcher object at 0x107064a90>\r\n<Response [200]>\r\n```\r\n\r\n## v1.7.0\r\n```\r\n>>> import requests\r\n>>> import requests_mock\r\n>>> with requests_mock.Mocker() as mocker:\r\n...     mocker.register_uri('GET', 'https://localhost:443/endpoint?query=')\r\n...     requests.get('https://localhost:443/endpoint?query=foo')\r\n...\r\n<requests_mock.adapter._Matcher object at 0x109d31128>\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 3, in <module>\r\n  File \".venv/lib/python3.6/site-packages/requests/api.py\", line 75, in get\r\n    return request('get', url, params=params, **kwargs)\r\n  File \".venv/lib/python3.6/site-packages/requests/api.py\", line 60, in request\r\n    return session.request(method=method, url=url, **kwargs)\r\n  File \".venv/lib/python3.6/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \".venv/lib/python3.6/site-packages/requests_mock/mocker.py\", line 111, in _fake_send\r\n    return _original_send(session, request, **kwargs)\r\n  File \".venv/lib/python3.6/site-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \".venv/lib/python3.6/site-packages/requests_mock/adapter.py\", line 255, in send\r\n    raise exceptions.NoMockAddress(request)\r\nrequests_mock.exceptions.NoMockAddress: No mock address: GET https://localhost:443/endpoint?query=foo\r\n```\r\n\r\nI've also tried to set `complete_qs=False` to force it without success, although I didn't see any change related to it between the two versions so I guess is not related to that.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/105", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/105/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/105/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/105", "id": 474646769, "node_id": "MDU6SXNzdWU0NzQ2NDY3Njk=", "number": 105, "title": "redirects not working with second url real_http=True", "user": {"login": "cyberintUser1", "id": 48477520, "node_id": "MDQ6VXNlcjQ4NDc3NTIw", "avatar_url": "https://avatars0.githubusercontent.com/u/48477520?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cyberintUser1", "html_url": "https://github.com/cyberintUser1", "followers_url": "https://api.github.com/users/cyberintUser1/followers", "following_url": "https://api.github.com/users/cyberintUser1/following{/other_user}", "gists_url": "https://api.github.com/users/cyberintUser1/gists{/gist_id}", "starred_url": "https://api.github.com/users/cyberintUser1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cyberintUser1/subscriptions", "organizations_url": "https://api.github.com/users/cyberintUser1/orgs", "repos_url": "https://api.github.com/users/cyberintUser1/repos", "events_url": "https://api.github.com/users/cyberintUser1/events{/privacy}", "received_events_url": "https://api.github.com/users/cyberintUser1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 158142802, "node_id": "MDU6TGFiZWwxNTgxNDI4MDI=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-30T15:15:53Z", "updated_at": "2020-03-31T13:33:30Z", "closed_at": "2020-03-31T13:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nwith requests_mock.mock() as req_mock:\r\n    req_mock.post(url1, status_code=HTTPStatus.FOUND, headers={'location': url2})\r\n    req_mock.get(url2, real_http=True)\r\n\r\nrequests.post(url1)\r\n```\r\n\r\nthis is resulting ConnectionError (since url1 is not reachable)\r\n\r\nfrom what I can tell the redirection works ok, than mocker._fake_send calling _original_send and adapter._RunRealHTTP is being raised and caught (which is ok), it then tries to restore the original requests session adapter but unfortunately because the first redirection has yet to finish, the original adapter was not restored, so what the second requests consider the original requests session adapter is actually the fake adapter", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/103", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/103/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/103/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/103", "id": 468918585, "node_id": "MDU6SXNzdWU0Njg5MTg1ODU=", "number": 103, "title": "Requests 3 is coming. Pin requirements", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-16T23:40:23Z", "updated_at": "2019-07-20T07:31:49Z", "closed_at": "2019-07-20T07:31:49Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We currently have requirements defined as:\r\n\r\n```\r\nrequests>=2.3\r\n```\r\n\r\nwhich is going to including the upcoming requests 3 and I haven't had a chance at all to look at how that works, for now we just need to cap that, and it might need to get backported.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/102", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/102/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/102/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/102", "id": 464925503, "node_id": "MDU6SXNzdWU0NjQ5MjU1MDM=", "number": 102, "title": "Assign custom url in the mocked response", "user": {"login": "NickSchimek", "id": 19519317, "node_id": "MDQ6VXNlcjE5NTE5MzE3", "avatar_url": "https://avatars2.githubusercontent.com/u/19519317?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NickSchimek", "html_url": "https://github.com/NickSchimek", "followers_url": "https://api.github.com/users/NickSchimek/followers", "following_url": "https://api.github.com/users/NickSchimek/following{/other_user}", "gists_url": "https://api.github.com/users/NickSchimek/gists{/gist_id}", "starred_url": "https://api.github.com/users/NickSchimek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NickSchimek/subscriptions", "organizations_url": "https://api.github.com/users/NickSchimek/orgs", "repos_url": "https://api.github.com/users/NickSchimek/repos", "events_url": "https://api.github.com/users/NickSchimek/events{/privacy}", "received_events_url": "https://api.github.com/users/NickSchimek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 158142804, "node_id": "MDU6TGFiZWwxNTgxNDI4MDQ=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 158142805, "node_id": "MDU6TGFiZWwxNTgxNDI4MDU=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-07T07:54:37Z", "updated_at": "2019-07-20T16:29:37Z", "closed_at": "2019-07-20T16:29:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to define the url to be assigned to the `url` attribute in the response?\r\n\r\nIf not, would it be possible to add it in?\r\n\r\nThanks, really great tool you have here!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/101", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/101/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/101/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/101", "id": 457661501, "node_id": "MDU6SXNzdWU0NTc2NjE1MDE=", "number": 101, "title": "Add support for query strings without values", "user": {"login": "clintkelly", "id": 5353412, "node_id": "MDQ6VXNlcjUzNTM0MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/5353412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clintkelly", "html_url": "https://github.com/clintkelly", "followers_url": "https://api.github.com/users/clintkelly/followers", "following_url": "https://api.github.com/users/clintkelly/following{/other_user}", "gists_url": "https://api.github.com/users/clintkelly/gists{/gist_id}", "starred_url": "https://api.github.com/users/clintkelly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clintkelly/subscriptions", "organizations_url": "https://api.github.com/users/clintkelly/orgs", "repos_url": "https://api.github.com/users/clintkelly/repos", "events_url": "https://api.github.com/users/clintkelly/events{/privacy}", "received_events_url": "https://api.github.com/users/clintkelly/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 158142802, "node_id": "MDU6TGFiZWwxNTgxNDI4MDI=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}, {"id": 158142805, "node_id": "MDU6TGFiZWwxNTgxNDI4MDU=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/help%20wanted", "name": "help wanted", "color": "159818", "default": true, "description": null}, {"id": 849667581, "node_id": "MDU6TGFiZWw4NDk2Njc1ODE=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/low", "name": "low", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-18T19:41:59Z", "updated_at": "2019-08-23T04:10:05Z", "closed_at": "2019-08-23T04:10:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently if I try to mock calls to the same URI with two different query params (without values), I always get the response from the most-recently-defined mock.\r\n\r\nHere is an example URL: `http://foo.com/bar?baz`\r\n\r\nI used a debugger with a test using a URL like this. The constructor correctly captures the query param:\r\n\r\n```\r\n>>> urlparse('http://foo.com/bar?baz')\r\nParseResult(scheme='http', netloc='foo.com', path='/bar', params='', query='baz', fragment='')\r\n```\r\n\r\nSo in this case, the value for `self._query` in the `_Matcher` instance will be just `'baz'`:\r\nhttps://github.com/jamielennox/requests-mock/blob/cb894f1f822b3bbeb9be5b0b12dd2f27c7b6399b/requests_mock/adapter.py#L103\r\n\r\nHowever, the later code that does the actual matching assumes k/v pairs for query strings. In particular, this line:\r\n```\r\n        matcher_qs = urlparse.parse_qs(self._query)\r\n```\r\nwill return an empty dict:\r\n```\r\n>>> parse_qs('baz')\r\n{}\r\n```\r\n\r\nTherefore, if I cannot mock calls to two separate URLs that differ only by query params without values.\r\n\r\nI think we can fix this pretty easily by changing the argument to the call to `parse_qs`:\r\n```\r\n>>> parse_qs('baz', keep_blank_values=True)\r\n{'baz': ['']}\r\n```\r\n\r\nHappy to submit a PR if you like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/96", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/96/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/96/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/96/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/96", "id": 443528424, "node_id": "MDU6SXNzdWU0NDM1Mjg0MjQ=", "number": 96, "title": "text for post as fixture fails", "user": {"login": "Rubyj", "id": 4855908, "node_id": "MDQ6VXNlcjQ4NTU5MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/4855908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rubyj", "html_url": "https://github.com/Rubyj", "followers_url": "https://api.github.com/users/Rubyj/followers", "following_url": "https://api.github.com/users/Rubyj/following{/other_user}", "gists_url": "https://api.github.com/users/Rubyj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rubyj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rubyj/subscriptions", "organizations_url": "https://api.github.com/users/Rubyj/orgs", "repos_url": "https://api.github.com/users/Rubyj/repos", "events_url": "https://api.github.com/users/Rubyj/events{/privacy}", "received_events_url": "https://api.github.com/users/Rubyj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-13T17:59:19Z", "updated_at": "2019-05-21T15:35:47Z", "closed_at": "2019-05-21T11:15:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "@jamielennox \r\nWhen my `text` to a post request is coming from a fixture, my POST request fails with the error:\r\n\r\n```\r\nFixture \"success_message\" called directly. Fixtures are not meant to be called directly,\r\nbut are created automatically when test functions request them as parameters.\r\n```\r\n\r\n```\r\n@pytest.fixture()\r\ndef mock_slack_url():\r\n    return \"http://postslack.com\"\r\n\r\n\r\n@pytest.fixture()\r\ndef success_message:\r\n    return \"success\"\r\n\r\n\r\ndef test_post(mock_slack_url, requests_mock):\r\n    requests_mock.post(mock_slack_url, text=success_message)\r\n    response = requests.post(mock_slack_url, json=success_message)\r\n    response.raise_for_status()\r\n    assert response.text == success_message\r\n```\r\nNot sure if anyone is aware of this issue yet.\r\n\r\nTLDR using a fixture in a `requests_mock.post(text=)` causes an error. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/89", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/89/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/89/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/89/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/89", "id": 438023878, "node_id": "MDU6SXNzdWU0MzgwMjM4Nzg=", "number": 89, "title": "Tests fail with earlier versions of requests", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/2", "html_url": "https://github.com/jamielennox/requests-mock/milestone/2", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/2/labels", "id": 3337595, "node_id": "MDk6TWlsZXN0b25lMzMzNzU5NQ==", "number": 2, "title": "1.6.0", "description": "", "creator": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-05-10T22:35:04Z", "updated_at": "2019-04-28T12:19:35Z", "due_on": "2019-04-28T07:00:00Z", "closed_at": "2019-04-28T12:19:07Z"}, "comments": 0, "created_at": "2019-04-28T07:19:15Z", "updated_at": "2019-04-28T08:56:20Z", "closed_at": "2019-04-28T08:56:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "There are a bunch of failing tests with requests < 2, mostly to do with cookie handling. There are also a bunch of failing tests with early versions of requests 2. We either need to bump the version requirement or add a contrib layer.\r\n\r\nWith requests 1 the library won't even load, so given i've not heard anything that should be safe to drop. Need to look into what the consequences of v2 are.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/87", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/87/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/87/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/87", "id": 434654135, "node_id": "MDU6SXNzdWU0MzQ2NTQxMzU=", "number": 87, "title": "pytest  fixture : No way of raising side_effect (requests.exceptions)", "user": {"login": "jps-ob", "id": 45568768, "node_id": "MDQ6VXNlcjQ1NTY4NzY4", "avatar_url": "https://avatars0.githubusercontent.com/u/45568768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jps-ob", "html_url": "https://github.com/jps-ob", "followers_url": "https://api.github.com/users/jps-ob/followers", "following_url": "https://api.github.com/users/jps-ob/following{/other_user}", "gists_url": "https://api.github.com/users/jps-ob/gists{/gist_id}", "starred_url": "https://api.github.com/users/jps-ob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jps-ob/subscriptions", "organizations_url": "https://api.github.com/users/jps-ob/orgs", "repos_url": "https://api.github.com/users/jps-ob/repos", "events_url": "https://api.github.com/users/jps-ob/events{/privacy}", "received_events_url": "https://api.github.com/users/jps-ob/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-18T08:38:25Z", "updated_at": "2019-07-25T04:27:16Z", "closed_at": "2019-07-25T04:27:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to test Connection/Timeout Exception for requests calls.\r\n\r\n```\r\nfrom unittest import mock\r\n\r\n@mock.patch('requests.post', side_effect=requests.exceptions.ConnectTimeout)\r\ndef test_connection_error():\r\n```\r\n\r\nAs stated [in docs here](https://requests-mock.readthedocs.io/en/latest/pytest.html)\r\n> The fixture then provides the same interface as the **requests_mock.Mocker** letting you use requests-mock as you would expect.\r\n\r\nrequests-mock pytest fixture helps testing other failure scenarios, but not raising exception as side-effect. Hence  I would like to define custom Adapter for requests-mock as [documented here](https://requests-mock.readthedocs.io/en/latest/matching.html)\r\n\r\nThis is not possible with **requests-mock pytest plugin**  and without importing **requests-mock module** \r\n\r\nHowever this would create namespace class hence, we need something like this\r\n`import requests_mock as req_mock_mod`\r\n\r\nQ1. Is there any possibility of using plugin to raise Request.Exception  and/or define custom adapters ?\r\n\r\nAlso  the following (with requests_mock plugin fixture) doesn't raise mocked side effect\r\n```\r\n@mock.patch('requests.post', side_effect=requests.exceptions.ConnectTimeout)\r\ndef test_connection_error():\r\n```\r\n\r\nbut passing requests_mock does trigger \r\n```\r\n@mock.patch('requests.post', side_effect=requests.exceptions.ConnectTimeout)\r\ndef test_connection_error(requests_mock):\r\n``` \r\n\r\nQ2. Is this expected behaviour or a case of namespace corruption ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/86", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/86/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/86/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/86", "id": 432453273, "node_id": "MDU6SXNzdWU0MzI0NTMyNzM=", "number": 86, "title": "Overwrites encoding detected by requests", "user": {"login": "blueyed", "id": 9766, "node_id": "MDQ6VXNlcjk3NjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/9766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blueyed", "html_url": "https://github.com/blueyed", "followers_url": "https://api.github.com/users/blueyed/followers", "following_url": "https://api.github.com/users/blueyed/following{/other_user}", "gists_url": "https://api.github.com/users/blueyed/gists{/gist_id}", "starred_url": "https://api.github.com/users/blueyed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blueyed/subscriptions", "organizations_url": "https://api.github.com/users/blueyed/orgs", "repos_url": "https://api.github.com/users/blueyed/repos", "events_url": "https://api.github.com/users/blueyed/events{/privacy}", "received_events_url": "https://api.github.com/users/blueyed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/2", "html_url": "https://github.com/jamielennox/requests-mock/milestone/2", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/2/labels", "id": 3337595, "node_id": "MDk6TWlsZXN0b25lMzMzNzU5NQ==", "number": 2, "title": "1.6.0", "description": "", "creator": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-05-10T22:35:04Z", "updated_at": "2019-04-28T12:19:35Z", "due_on": "2019-04-28T07:00:00Z", "closed_at": "2019-04-28T12:19:07Z"}, "comments": 2, "created_at": "2019-04-12T08:42:29Z", "updated_at": "2019-04-28T09:01:48Z", "closed_at": "2019-04-28T09:01:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If `content` and `headers` are used for a mocked response, requests might set the `encoding` via https://github.com/kennethreitz/requests/blob/9742da7f91f595796a412a8150aacc00191be039/requests/utils.py#L476-L494 already, but then requests-mock sets it to `None` again:\r\nhttps://github.com/jamielennox/requests-mock/blob/5ad9bed818a9a78d1699b472d4932bf22756d53f/requests_mock/response.py#L173\r\n\r\nI think this would be better, and does not cause failures with any current tests:\r\n\r\n```diff\r\n requests_mock/response.py | 6 +++---\r\n 1 file changed, 3 insertions(+), 3 deletions(-)\r\n\r\ndiff --git i/requests_mock/response.py w/requests_mock/response.py\r\nindex 1869fa7..3038764 100644\r\n--- i/requests_mock/response.py\r\n+++ w/requests_mock/response.py\r\n@@ -145,7 +145,7 @@ def create_response(request, **kwargs):\r\n     content = kwargs.pop('content', None)\r\n     text = kwargs.pop('text', None)\r\n     json = kwargs.pop('json', None)\r\n-    encoding = None\r\n+    headers = kwargs.pop('headers', {})\r\n \r\n     if content is not None and not isinstance(content, six.binary_type):\r\n         raise TypeError('Content should be binary data')\r\n@@ -157,11 +157,12 @@ def create_response(request, **kwargs):\r\n     if text is not None:\r\n         encoding = 'utf-8'\r\n         content = text.encode(encoding)\r\n+        headers.setdefault(\"content-type\", \"text/html; charset=%s\" % encoding)\r\n     if content is not None:\r\n         body = _IOReader(content)\r\n     if not raw:\r\n         raw = HTTPResponse(status=kwargs.get('status_code', _DEFAULT_STATUS),\r\n-                           headers=kwargs.get('headers', {}),\r\n+                           headers=headers,\r\n                            reason=kwargs.get('reason'),\r\n                            body=body or _IOReader(six.b('')),\r\n                            decode_content=False,\r\n@@ -170,7 +171,6 @@ def create_response(request, **kwargs):\r\n \r\n     response = _http_adapter.build_response(request, raw)\r\n     response.connection = connection\r\n-    response.encoding = encoding\r\n \r\n     _extract_cookies(request, response, kwargs.get('cookies'))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/83", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/83/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/83/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/83", "id": 412216232, "node_id": "MDU6SXNzdWU0MTIyMTYyMzI=", "number": 83, "title": "Requests custom adapter is ignored", "user": {"login": "dapicester", "id": 3007132, "node_id": "MDQ6VXNlcjMwMDcxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/3007132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dapicester", "html_url": "https://github.com/dapicester", "followers_url": "https://api.github.com/users/dapicester/followers", "following_url": "https://api.github.com/users/dapicester/following{/other_user}", "gists_url": "https://api.github.com/users/dapicester/gists{/gist_id}", "starred_url": "https://api.github.com/users/dapicester/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dapicester/subscriptions", "organizations_url": "https://api.github.com/users/dapicester/orgs", "repos_url": "https://api.github.com/users/dapicester/repos", "events_url": "https://api.github.com/users/dapicester/events{/privacy}", "received_events_url": "https://api.github.com/users/dapicester/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-20T02:36:32Z", "updated_at": "2020-06-15T22:42:56Z", "closed_at": "2019-02-24T13:20:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I use a custom adapter to implement a retry in a client class:\r\n```python\r\n session = requests.Session()\r\n retry = requests.packages.urllib3.Retry(\r\n   total=5,\r\n   backoff_factor=0.1,\r\n   method_whitelist=('GET', 'POST', 'DELETE'),\r\n   status_forcelist=(502, 503, 504)\r\n)\r\nsession.mount(BASE_URL, requests.adapters.HTTPAdapter(max_retries=retry))\r\n```\r\nThen `session` is used to make requests like:\r\n```python\r\nsession.request('GET', BASE_URL)\r\n```\r\nFinally I test my client class but the retry doesn't work:\r\n```python\r\n@requests_mock.Mocker()\r\ndef test_retry(self, mocker):\r\n  mocker.register_uri('GET', BASE_URL, [\r\n    {'status_code': 502},\r\n    {'status_code': 200, text='ok'}\r\n  )\r\n  response = my_client.get_stuff()\r\n  self.assertEqual(response.status_code, 200) # this fails, got 502\r\n```\r\n\r\nThis issue may be related to #20.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/82", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/82/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/82/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/82", "id": 407523190, "node_id": "MDU6SXNzdWU0MDc1MjMxOTA=", "number": 82, "title": "How to mock inner POST method without affecting outer POST method?", "user": {"login": "yangquan1982", "id": 5253134, "node_id": "MDQ6VXNlcjUyNTMxMzQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5253134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yangquan1982", "html_url": "https://github.com/yangquan1982", "followers_url": "https://api.github.com/users/yangquan1982/followers", "following_url": "https://api.github.com/users/yangquan1982/following{/other_user}", "gists_url": "https://api.github.com/users/yangquan1982/gists{/gist_id}", "starred_url": "https://api.github.com/users/yangquan1982/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yangquan1982/subscriptions", "organizations_url": "https://api.github.com/users/yangquan1982/orgs", "repos_url": "https://api.github.com/users/yangquan1982/repos", "events_url": "https://api.github.com/users/yangquan1982/events{/privacy}", "received_events_url": "https://api.github.com/users/yangquan1982/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-07T03:00:32Z", "updated_at": "2019-02-20T19:08:36Z", "closed_at": "2019-02-20T19:08:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "There is a POST method A inside which another POST method B is called. I want to test method A by mocking method B. Don't how to deal this kind of nested POST methods scenario.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/80", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/80/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/80/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/80/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/80", "id": 393742997, "node_id": "MDU6SXNzdWUzOTM3NDI5OTc=", "number": 80, "title": "TypeError not raised when prepared request is sent without a Content-Length if requests_mock is being used", "user": {"login": "adamtheturtle", "id": 797801, "node_id": "MDQ6VXNlcjc5NzgwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/797801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamtheturtle", "html_url": "https://github.com/adamtheturtle", "followers_url": "https://api.github.com/users/adamtheturtle/followers", "following_url": "https://api.github.com/users/adamtheturtle/following{/other_user}", "gists_url": "https://api.github.com/users/adamtheturtle/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamtheturtle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamtheturtle/subscriptions", "organizations_url": "https://api.github.com/users/adamtheturtle/orgs", "repos_url": "https://api.github.com/users/adamtheturtle/repos", "events_url": "https://api.github.com/users/adamtheturtle/events{/privacy}", "received_events_url": "https://api.github.com/users/adamtheturtle/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-23T11:38:11Z", "updated_at": "2019-04-23T06:06:12Z", "closed_at": "2019-04-23T06:06:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following Python script runs without raising an `AssertionError`.\r\nThis to me was an unexpected difference between code which uses ``requests_mock`` and code which does not.\r\n\r\n```python\r\nimport requests\r\nimport json\r\nfrom requests.structures import CaseInsensitiveDict\r\nimport requests_mock\r\n\r\nurl = 'http://example.com/'\r\nmethod = 'POST'\r\n\r\nrequest = requests.Request(method=method, url=url, data=b'{}')\r\nprepared_request = request.prepare()\r\nheaders = dict(prepared_request.headers)\r\ndel headers['Content-Length']\r\n\r\nprepared_request.headers = CaseInsensitiveDict(data=headers)\r\nsession = requests.Session()\r\n\r\nwith requests_mock.mock() as m:\r\n    m.register_uri(method, url, text='resp')\r\n    session.send(request=prepared_request)\r\n\r\nexception_raised = False\r\ntry:\r\n    session.send(request=prepared_request)\r\nexcept TypeError:\r\n    exception_raised = True\r\n\r\nassert exception_raised\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/78", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/78/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/78/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/78", "id": 386085253, "node_id": "MDU6SXNzdWUzODYwODUyNTM=", "number": 78, "title": "can't pickle weakref objects", "user": {"login": "arossert", "id": 7085494, "node_id": "MDQ6VXNlcjcwODU0OTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/7085494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arossert", "html_url": "https://github.com/arossert", "followers_url": "https://api.github.com/users/arossert/followers", "following_url": "https://api.github.com/users/arossert/following{/other_user}", "gists_url": "https://api.github.com/users/arossert/gists{/gist_id}", "starred_url": "https://api.github.com/users/arossert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arossert/subscriptions", "organizations_url": "https://api.github.com/users/arossert/orgs", "repos_url": "https://api.github.com/users/arossert/repos", "events_url": "https://api.github.com/users/arossert/events{/privacy}", "received_events_url": "https://api.github.com/users/arossert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-30T08:28:28Z", "updated_at": "2018-12-19T00:09:05Z", "closed_at": "2018-12-19T00:09:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a scenario in my application where I need to pickle a requests `Response` object.\r\nWhen using the original requests library the `Response` object is picklable without any issues but when using the `requests-mock` in my tests I'm getting the error.\r\n```\r\nTypeError: can't pickle weakref objects\r\n```\r\n\r\nIs there someting that I can do to make the `requests-mock` `Response` object picklable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/70", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/70/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/70/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/70", "id": 355431135, "node_id": "MDU6SXNzdWUzNTU0MzExMzU=", "number": 70, "title": "Suggestion, allow mock to throw timeout exception", "user": {"login": "daliclass", "id": 29014645, "node_id": "MDQ6VXNlcjI5MDE0NjQ1", "avatar_url": "https://avatars3.githubusercontent.com/u/29014645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daliclass", "html_url": "https://github.com/daliclass", "followers_url": "https://api.github.com/users/daliclass/followers", "following_url": "https://api.github.com/users/daliclass/following{/other_user}", "gists_url": "https://api.github.com/users/daliclass/gists{/gist_id}", "starred_url": "https://api.github.com/users/daliclass/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daliclass/subscriptions", "organizations_url": "https://api.github.com/users/daliclass/orgs", "repos_url": "https://api.github.com/users/daliclass/repos", "events_url": "https://api.github.com/users/daliclass/events{/privacy}", "received_events_url": "https://api.github.com/users/daliclass/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-30T05:35:53Z", "updated_at": "2018-09-04T07:56:10Z", "closed_at": "2018-09-04T07:56:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey!\r\n\r\nI am a long time user and have been enjoying this library. I think it would be a good idea to add a timeout to requests mock so that its easy to test the below code\r\n\r\n```\r\ntry:\r\n    requests.get(url, timeout=0.5)\r\nexcept requests.exceptions.Timeout as timeout_exception:\r\n    pass\r\n    # Do something\r\n```        \r\nI like the idea of setting a request_timeout=0.3 on requests_mock and it throwing the exception, rather than patching the .get method on requests.\r\n\r\nHappy to do the work if we think its a good idea?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/66", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/66/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/66/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/66/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/66", "id": 343290609, "node_id": "MDU6SXNzdWUzNDMyOTA2MDk=", "number": 66, "title": "Tests failing after 1.5.1 release", "user": {"login": "Mariatta", "id": 5844587, "node_id": "MDQ6VXNlcjU4NDQ1ODc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5844587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mariatta", "html_url": "https://github.com/Mariatta", "followers_url": "https://api.github.com/users/Mariatta/followers", "following_url": "https://api.github.com/users/Mariatta/following{/other_user}", "gists_url": "https://api.github.com/users/Mariatta/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mariatta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mariatta/subscriptions", "organizations_url": "https://api.github.com/users/Mariatta/orgs", "repos_url": "https://api.github.com/users/Mariatta/repos", "events_url": "https://api.github.com/users/Mariatta/events{/privacy}", "received_events_url": "https://api.github.com/users/Mariatta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-07-21T02:46:15Z", "updated_at": "2018-07-21T03:55:07Z", "closed_at": "2018-07-21T03:50:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "May I know what are the the changes from 1.5.0 to 1.5.1?\r\nI couldn't seem to find the changelog.\r\n\r\nMy tests used to pass in 1.5.0 but now failing using requests-mock 1.5.1, and the error seems to originate from request-mock.\r\n\r\nThe only change in the PR is simply updating requests-mock from 1.5.0 to 1.5.1:\r\nhttps://github.com/python/miss-islington/pull/118\r\n\r\nYou can see the test output here:\r\nhttps://travis-ci.org/python/miss-islington/jobs/406491092\r\n\r\nIs there any change I need to do in the way I wrote the tests?\r\n\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/62", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/62/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/62/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/62", "id": 343278168, "node_id": "MDU6SXNzdWUzNDMyNzgxNjg=", "number": 62, "title": "Support pytest < 2.9.0", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-07-21T00:00:57Z", "updated_at": "2018-07-21T00:45:48Z", "closed_at": "2018-07-21T00:45:48Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Reported: https://bugzilla.redhat.com/show_bug.cgi?id=1605138\r\n\r\nWe've added requests-mock to EPEL which is still shipping py.test 2.7.0. This version does not have the type='bool' option to parser.addini(). \r\n\r\nWe can temporarily work around that until such time as we can rely on pytest >= 2.9", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/59", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/59/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/59/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/59", "id": 332985373, "node_id": "MDU6SXNzdWUzMzI5ODUzNzM=", "number": 59, "title": "Request history should include value for stream parameter", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-06-16T12:52:53Z", "updated_at": "2018-06-16T13:59:18Z", "closed_at": "2018-06-16T13:59:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The request object in history provides almost all the parameters that are passed when the request is made. For example verify, cert, timeout are all there. \r\n\r\nFor some reason stream was missed from this list. My guess is because I expect requests-mock doesn't handle proper stream data without extra effort so it was left out to not be confusing. \r\n\r\nEven if in future more work is required for proper stream handling, the basic parameter should be recorded and available in history for validating.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/56", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/56/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/56/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/56", "id": 321733258, "node_id": "MDU6SXNzdWUzMjE3MzMyNTg=", "number": 56, "title": "fixture 'requests_mock' not found with Pytest", "user": {"login": "rexwangcc", "id": 14366016, "node_id": "MDQ6VXNlcjE0MzY2MDE2", "avatar_url": "https://avatars2.githubusercontent.com/u/14366016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rexwangcc", "html_url": "https://github.com/rexwangcc", "followers_url": "https://api.github.com/users/rexwangcc/followers", "following_url": "https://api.github.com/users/rexwangcc/following{/other_user}", "gists_url": "https://api.github.com/users/rexwangcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/rexwangcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rexwangcc/subscriptions", "organizations_url": "https://api.github.com/users/rexwangcc/orgs", "repos_url": "https://api.github.com/users/rexwangcc/repos", "events_url": "https://api.github.com/users/rexwangcc/events{/privacy}", "received_events_url": "https://api.github.com/users/rexwangcc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/1", "html_url": "https://github.com/jamielennox/requests-mock/milestone/1", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/1/labels", "id": 3310952, "node_id": "MDk6TWlsZXN0b25lMzMxMDk1Mg==", "number": 1, "title": "1.5.0", "description": "", "creator": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2018-05-01T06:07:55Z", "updated_at": "2018-05-10T22:35:28Z", "due_on": null, "closed_at": "2018-05-10T22:35:28Z"}, "comments": 2, "created_at": "2018-05-09T21:29:27Z", "updated_at": "2018-05-10T22:33:40Z", "closed_at": "2018-05-10T22:33:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran into this error with Pytest:\r\n```\r\nE       fixture 'requests_mock' not found\r\n>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, pytestconfig, record_property, record_xml_attribute, record_xml_property, recwarn, tmpdir, tmpdir_factory\r\n>       use 'pytest --fixtures [testpath]' for help on them.\r\n```\r\n\r\nthe versions:\r\n```\r\npytest==3.5.0\r\npytest-cov==2.5.1\r\nrequests==2.18.4\r\nrequests-mock==1.4.0\r\nrequests-oauthlib==0.8.0\r\n```\r\n\r\nAny insights here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/44", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/44/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/44/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/44", "id": 303393252, "node_id": "MDU6SXNzdWUzMDMzOTMyNTI=", "number": 44, "title": "Nested context managers", "user": {"login": "Amnesthesia", "id": 3265008, "node_id": "MDQ6VXNlcjMyNjUwMDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/3265008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amnesthesia", "html_url": "https://github.com/Amnesthesia", "followers_url": "https://api.github.com/users/Amnesthesia/followers", "following_url": "https://api.github.com/users/Amnesthesia/following{/other_user}", "gists_url": "https://api.github.com/users/Amnesthesia/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amnesthesia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amnesthesia/subscriptions", "organizations_url": "https://api.github.com/users/Amnesthesia/orgs", "repos_url": "https://api.github.com/users/Amnesthesia/repos", "events_url": "https://api.github.com/users/Amnesthesia/events{/privacy}", "received_events_url": "https://api.github.com/users/Amnesthesia/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-08T08:21:09Z", "updated_at": "2020-03-31T13:33:30Z", "closed_at": "2020-03-31T13:33:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a use case where I want to provide a set of test helpers for mocking requests as part of a package, e.g providing test helpers for mocking authentication, and then for fetching data. \r\n\r\nIt works fine to use the helpers provided for authentication mocking, and for fetching data \u2014 unless you use them at the same time. As soon as `with request_mock.Mocker() as mock:` becomes nested more than one level, it seems like the `Adapter` is overriding the other, which means you can only have one Mock instance at a time for the mocks to work and which makes it difficult to load them from different files.\r\n\r\nI've solved this in my package by subclassing `Mocker` and making it a Singleton, and I'm curious if there's any big downside to this, or if this is something the package could provide out of the box?\r\n\r\nI'm not sure this is the best solution, but it's worked for me:\r\n\r\n```python\r\nclass Singleton(type):\r\n    _instances = {}\r\n    def __call__(cls, *args, **kwargs):\r\n        if cls not in cls._instances:\r\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\r\n        return cls._instances[cls]\r\n    \r\n    \r\nclass Mocker(requests_mock.Mocker, metaclass=Singleton):\r\n    \"\"\"We're using a Singleton class here to use instead of requests_mock.Mocker,\r\n    because requests_mock.Mocker prevents us from nesting mocks as it replaces its\r\n    own instances in context managers. By ensuring that there can only be one instance\r\n    of the Mocker class, we can be sure that nesting will work, but we have to ensure we\r\n    don't call `start` more than once.\r\n    \"\"\"\r\n    def __enter__(self):\r\n        if not self._last_send:\r\n            self.start()\r\n        return self\r\n```\r\n\r\nAfter this, nesting works fine", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/30", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/30/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/30/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/30", "id": 300471475, "node_id": "MDU6SXNzdWUzMDA0NzE0NzU=", "number": 30, "title": "[PATCH] Fix last_request examples", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-27T02:31:24Z", "updated_at": "2018-02-27T02:52:19Z", "closed_at": "2018-02-27T02:52:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "last_request examples should not refer to qs for netloc and scheme.\n\nLaunchpad Details: [#LP1751891](https://bugs.launchpad.net/bugs/1751891) Ville Skytt\u00e4 - 2018-02-26 20:09:15 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/29", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/29/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/29/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/29", "id": 300471466, "node_id": "MDU6SXNzdWUzMDA0NzE0NjY=", "number": 29, "title": "[PATCH] Spelling fixes", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-27T02:31:20Z", "updated_at": "2018-02-27T02:52:19Z", "closed_at": "2018-02-27T02:52:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Patch with spelling fixes is attached.\n\nLaunchpad Details: [#LP1751890](https://bugs.launchpad.net/bugs/1751890) Ville Skytt\u00e4 - 2018-02-26 20:07:41 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/28", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/28/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/28/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/28", "id": 300471445, "node_id": "MDU6SXNzdWUzMDA0NzE0NDU=", "number": 28, "title": "Mocker decorators not recognisable by pytest", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 158142804, "node_id": "MDU6TGFiZWwxNTgxNDI4MDQ=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 849667420, "node_id": "MDU6TGFiZWw4NDk2Njc0MjA=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/medium", "name": "medium", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/1", "html_url": "https://github.com/jamielennox/requests-mock/milestone/1", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/milestones/1/labels", "id": 3310952, "node_id": "MDk6TWlsZXN0b25lMzMxMDk1Mg==", "number": 1, "title": "1.5.0", "description": "", "creator": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2018-05-01T06:07:55Z", "updated_at": "2018-05-10T22:35:28Z", "due_on": null, "closed_at": "2018-05-10T22:35:28Z"}, "comments": 3, "created_at": "2018-02-27T02:31:15Z", "updated_at": "2018-05-03T00:18:53Z", "closed_at": "2018-05-03T00:18:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "When running the following code with pytest, it passes on Python 2.7 but both tests fail on Python 3.6 with the message \"E fixture 'mocked_obj' not found\":\n\n#------\nimport requests_mock\n\n\n@requests_mock.Mocker()\ndef test_foo(mocked_obj):\n    pass\n\n\n@requests_mock.Mocker()\nclass TestFoo(object):\n\n    def test_foo(self, mocked_obj):\n        pass\n#------\n\nI've already opened an issue on Pytest side but according to pytest folks it's not possible to recognise the 'mocked_obj' parameter as the one already passed by the decorator because of missing metadata, hence pytest looks for a fixture with that name and fail.\n\nSee the pytest issue on GitHub for additional information on the test environments and the related discussion:\n\nhttps://github.com/pytest-dev/pytest/issues/2749\n\nLaunchpad Details: [#LP1714756](https://bugs.launchpad.net/bugs/1714756) Volans - 2017-09-03 09:05:36 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/27", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/27/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/27/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/27", "id": 300471404, "node_id": "MDU6SXNzdWUzMDA0NzE0MDQ=", "number": 27, "title": "outer mock broken by nested mocks", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-02-27T02:31:01Z", "updated_at": "2020-03-31T13:33:30Z", "closed_at": "2020-03-31T13:33:30Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I was using 0.6 and nesting didn't work: the inner mock didn't take effect.\n\nI was thrilled when I saw \"Allow for nested mocking\".\n\nHowever, now the outer mock doesn't take effect. This is still broken from my perspective. \n\n----\n\nIn [8]: with requests_mock.Mocker() as m:\n   ...:     m.get('http://test.com', text='resp')\n   ...:     with requests_mock.Mocker() as m2:\n   ...:         m2.get('http://david.com', text='hi')\n   ...:         r = requests.get('http://test.com')\n   ...:         print(r.content)\n   ...:\n\n<snip>\n\nNoMockAddress: No mock address: GET http://test.com/\n---\n\nI actually prefer the old behavior (and am suggesting my team revert to the older version), because at least then it was clear that nested mocks don't work. Now it's easy to get tripped up by the mistake I just made: We have a base class that sets up a bunch of mocks. I was writing a test that needed a new mock. Initially my test didn't happen to use the mocks from the base class, so I didn't know that anything was wrong. But then things changed slightly and the base class's mocks were required, and it all broke.\n\nI think the ideal behavior would be to try the inner mock first, and if there's no match go to the outer mock.\n\nLaunchpad Details: [#LP1687039](https://bugs.launchpad.net/bugs/1687039) David Chudzicki - 2017-04-28 15:07:43 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/26", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/26/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/26/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/26", "id": 300471368, "node_id": "MDU6SXNzdWUzMDA0NzEzNjg=", "number": 26, "title": "can not match on query parameters listed in the requests.get param keyword", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-02-27T02:30:49Z", "updated_at": "2018-05-02T23:44:45Z", "closed_at": "2018-05-02T23:44:27Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I would like to be able to set up different mock responses based on the query parameters. The code that I'm testing using the params keyword to pass the query parameter to the requests.get. If I include the query parameters in the string to be matched, the matching does not occur.\n\nIt would also be great if the request_history would include the query parameters specified using the keyword param.\n\nLaunchpad Details: [#LP1675133](https://bugs.launchpad.net/bugs/1675133) Mary Bucknell - 2017-03-22 18:51:11 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/21", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/21/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/21/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/21", "id": 300471243, "node_id": "MDU6SXNzdWUzMDA0NzEyNDM=", "number": 21, "title": "Allow a reset() on a mocker", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-27T02:30:03Z", "updated_at": "2020-05-02T07:20:34Z", "closed_at": "2020-05-02T07:20:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Similar to how mock allows you to do mock.reset() to clear the history we should allow that on our history trackers.\n\nLaunchpad Details: [#LP1630149](https://bugs.launchpad.net/bugs/1630149) Jamie Lennox - 2016-10-04 07:34:25 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/18", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/18/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/18/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/18", "id": 300471182, "node_id": "MDU6SXNzdWUzMDA0NzExODI=", "number": 18, "title": "real_http gets overwritten in a mocked callback", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667420, "node_id": "MDU6TGFiZWw4NDk2Njc0MjA=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/medium", "name": "medium", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-27T02:29:45Z", "updated_at": "2020-05-02T13:05:54Z", "closed_at": "2020-05-02T13:05:53Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I wrote a component test in which the mocked API does a little more than just returning HTTP responses: later, the API will send an HTTP request to a listener started by the module being tested. In order to do this, I call a function which will send the request back to the component before completing its response. I get a NoMockAddress exception when I attempt to make this request from inside the callback, yet I have validated that I can send an unmatched request outside of the callback context.\n\nHere is code that does this:\n\nimport module\nimport requests\nimport requests_mock\n\ndef callback(request, context):\n    send_another_request()\n\ndef send_another_request():\n    requests.get('http://httpbin.org/get')\n\ndef test_foo():\n    with requests_mock.Mocker(real_http=True) as mock:\n        mock.post('http://foo.org', text=callback)\n        module.foo()\n\nLaunchpad Details: [#LP1639039](https://bugs.launchpad.net/bugs/1639039) Kaleb Smart - 2016-11-03 20:22:50 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/16", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/16/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/16/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/16", "id": 300470624, "node_id": "MDU6SXNzdWUzMDA0NzA2MjQ=", "number": 16, "title": "remove py26 support", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 38, "created_at": "2018-02-27T02:26:24Z", "updated_at": "2018-02-27T02:29:03Z", "closed_at": "2018-02-27T02:29:03Z", "author_association": "OWNER", "active_lock_reason": null, "body": "as of mitaka, the infra team won't have the resources available to reasonably test py26, also the oslo team is dropping py26 support from their libraries. sine we rely on oslo for a lot of our work, and depend on infra for our CI, we should drop py26 support too.\n\nLaunchpad Details: [#LP1519510](https://bugs.launchpad.net/bugs/1519510) Steve Martinelli - 2015-11-24 22:06:29 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/15", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/15/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/15/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/15", "id": 300470598, "node_id": "MDU6SXNzdWUzMDA0NzA1OTg=", "number": 15, "title": "Support generators for Response.content", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T02:26:16Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "For testing of Responses with chunked data, or other mid-read fiddling, it would be helpful if `content` was able to be a generator.\n\ni.e.\n\ndef raise_read_timeout(*args):\n    yield 'Fake read data'.encode('utf8')\n    raise requests.exceptions.ReadTimeout('Fake read timeout')\n\n...\nrequests_mocker.get(mock_url, content=raise_read_timeout)\n\nCurrently this is caught in `create_response`'s type checking\n\n        if content and not isinstance(content, six.binary_type):\n>           raise TypeError('Content should be binary data')\nE           TypeError: Content should be binary data\n\n\nThe way I found that worked was to set body=BytesIOWithRaise()\nwhere BytesIOWithRaise is a basic BytesIO with .read() that emits some chunks before raising an exception. Solution at https://github.com/coala/coala/pull/3833\n\nOr is there another better way to do this?\n\nLaunchpad Details: [#LP1669458](https://bugs.launchpad.net/bugs/1669458) John Vandenberg - 2017-03-02 14:52:32 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/14", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/14/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/14/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/14", "id": 300470550, "node_id": "MDU6SXNzdWUzMDA0NzA1NTA=", "number": 14, "title": "Add form and multipart_form helpers to request", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-02-27T02:25:59Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We have a json() helper on last_request, however for form encoded a=b&c=d data and multipart form encoded data we don't have a helper. Whilst there are less useful with APIs they are a common usage for people using requests.\n\nLaunchpad Details: [#LP1632584](https://bugs.launchpad.net/bugs/1632584) Jamie Lennox - 2016-10-12 07:28:51 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/13", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/13/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/13/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/13", "id": 300470534, "node_id": "MDU6SXNzdWUzMDA0NzA1MzQ=", "number": 13, "title": "Allow a reset() on a mocker", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-27T02:25:55Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Similar to how mock allows you to do mock.reset() to clear the history we should allow that on our history trackers.\n\nLaunchpad Details: [#LP1630149](https://bugs.launchpad.net/bugs/1630149) Jamie Lennox - 2016-10-04 07:34:25 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/12", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/12/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/12/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/12", "id": 300470514, "node_id": "MDU6SXNzdWUzMDA0NzA1MTQ=", "number": 12, "title": "Mocker.copy fails to copy the adapter", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667581, "node_id": "MDU6TGFiZWw4NDk2Njc1ODE=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/low", "name": "low", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T02:25:49Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I am trying to use django-rest-framework's RequestsClient with requests_mock. This has taken me down quite the rat hole. After reading a ton of the requests_mock code, I've concluded that the best way for me to do this is to essentially exclude the requests being made to http://testserver.\n\nTo do this, I create my own mocker instance before decorating my classes:\n\nmocker = requests_mocker.Mocker()\nmocker.register_uri(requests_mock.ANY, re.compile(r\"^https?://testserver/\"), real_http=True)\n\n@mocker\nclass MyAPITestCase(APITestCase):\n\n\u00a0\u00a0\u00a0\u00a0client_class = RequestsClient\n\n\u00a0\u00a0\u00a0\u00a0...\n\nHowever, this does not work. After digging around, I discovered this is due to Mocker.decorate_class making a copy of itself, but failing to include the adaptor on the copy.\n\nA quick fix for my code is to override `copy`:\n\nclass Mocker(requests_mock.Mocker):\n\n\u00a0\u00a0\u00a0\u00a0def copy(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m = Mocker(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kw=self._kw,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0real_http=self._real_http\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m._adapter = self._adapter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return m\n\nEverything works as expected. I'd love to submit a patch, but I don't have a ton of time to work through all the contribution guidelines for the OpenStack project.\n\nLaunchpad Details: [#LP1639352](https://bugs.launchpad.net/bugs/1639352) brosner - 2016-11-04 21:13:52 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/11", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/11/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/11/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/11", "id": 300470496, "node_id": "MDU6SXNzdWUzMDA0NzA0OTY=", "number": 11, "title": "mocking doesn't drain iterator", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667581, "node_id": "MDU6TGFiZWw4NDk2Njc1ODE=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/low", "name": "low", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T02:25:42Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "If you pass a generator to data in requests it will iterate over the generator and include that info into the request. This has the result of draining the provided iterator. Currently we don't do this, nor do we read provided files.\n\nIt's rare this would be something that an application is testing the result of. The provided case is that swiftclient updates the md5sum as the iterator is read which is currently not happening. \n\nThe downside of this is that the body available in last_request is now expended. Again this probably doesn't matter but it's a change in behaviour. \n\nUsing itertools.tee we can both drain the generator and maintain the request history - but i'm not sure it's worth it.\n\nLaunchpad Details: [#LP1616751](https://bugs.launchpad.net/bugs/1616751) Jamie Lennox - 2016-08-25 06:19:58 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/10", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/10/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/10/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/10", "id": 300470474, "node_id": "MDU6SXNzdWUzMDA0NzA0NzQ=", "number": 10, "title": "real_http gets overwritten in a mocked callback", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667420, "node_id": "MDU6TGFiZWw4NDk2Njc0MjA=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/medium", "name": "medium", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-27T02:25:36Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I wrote a component test in which the mocked API does a little more than just returning HTTP responses: later, the API will send an HTTP request to a listener started by the module being tested. In order to do this, I call a function which will send the request back to the component before completing its response. I get a NoMockAddress exception when I attempt to make this request from inside the callback, yet I have validated that I can send an unmatched request outside of the callback context.\n\nHere is code that does this:\n\nimport module\nimport requests\nimport requests_mock\n\ndef callback(request, context):\n    send_another_request()\n\ndef send_another_request():\n    requests.get('http://httpbin.org/get')\n\ndef test_foo():\n    with requests_mock.Mocker(real_http=True) as mock:\n        mock.post('http://foo.org', text=callback)\n        module.foo()\n\nLaunchpad Details: [#LP1639039](https://bugs.launchpad.net/bugs/1639039) Kaleb Smart - 2016-11-03 20:22:50 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/9", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/9/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/9/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/9", "id": 300470444, "node_id": "MDU6SXNzdWUzMDA0NzA0NDQ=", "number": 9, "title": "Cookies not propagated to requests.Session", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667420, "node_id": "MDU6TGFiZWw4NDk2Njc0MjA=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/medium", "name": "medium", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-27T02:25:27Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I'm having problems setting cookies using the requests_mock header= option.  A cookie makes it as far as the requests.Response object, but does not reach the requests.Session I used to make it.  I've tried several variants of the Set-Cookie header and believe I have it formatted correctly.\n\nThe following code demonstrates it:\n\nimport requests, requests_mock\n\nwith requests_mock.Mocker() as m:\n  m.register_uri('GET', 'http://github.com', text='data', headers={\n    \"Set-Cookie\": \"food=pie; Max-Age=3600; Version=1\"\n  })\n  sess = requests.Session()\n  resp = sess.get(\"http://github.com\")\n  for c in resp.cookies:\n    print(\"resp cookie: %s\" % c)\n  for c in sess.cookies:\n    print(\"sess cookie: %s\" % c)\n    \n    \nExpected result: 'food=pie' cookie listed in both resp and sess cookies.  Running the code outside of the \"with\" does this.\n\nActual result: 'food=pie' cookie listed in only resp and is not sent back to the server in further requests.\n\nLaunchpad Details: [#LP1550980](https://bugs.launchpad.net/bugs/1550980) Alex - 2016-02-28 19:09:46 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/8", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/8/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/8/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/8", "id": 300469642, "node_id": "MDU6SXNzdWUzMDA0Njk2NDI=", "number": 8, "title": "remove py26 support", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 35, "created_at": "2018-02-27T02:20:42Z", "updated_at": "2018-02-27T02:24:19Z", "closed_at": "2018-02-27T02:24:19Z", "author_association": "OWNER", "active_lock_reason": null, "body": "as of mitaka, the infra team won't have the resources available to reasonably test py26, also the oslo team is dropping py26 support from their libraries. sine we rely on oslo for a lot of our work, and depend on infra for our CI, we should drop py26 support too.\n\nLaunchpad Details: [#LP1519510](https://bugs.launchpad.net/bugs/1519510) Steve Martinelli - 2015-11-24 22:06:29 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/7", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/7/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/7/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/7", "id": 300469618, "node_id": "MDU6SXNzdWUzMDA0Njk2MTg=", "number": 7, "title": "Support generators for Response.content", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T02:20:35Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "For testing of Responses with chunked data, or other mid-read fiddling, it would be helpful if `content` was able to be a generator.\n\ni.e.\n\ndef raise_read_timeout(*args):\n    yield 'Fake read data'.encode('utf8')\n    raise requests.exceptions.ReadTimeout('Fake read timeout')\n\n...\nrequests_mocker.get(mock_url, content=raise_read_timeout)\n\nCurrently this is caught in `create_response`'s type checking\n\n        if content and not isinstance(content, six.binary_type):\n>           raise TypeError('Content should be binary data')\nE           TypeError: Content should be binary data\n\n\nThe way I found that worked was to set body=BytesIOWithRaise()\nwhere BytesIOWithRaise is a basic BytesIO with .read() that emits some chunks before raising an exception. Solution at https://github.com/coala/coala/pull/3833\n\nOr is there another better way to do this?\n\nLaunchpad Details: [#LP1669458](https://bugs.launchpad.net/bugs/1669458) John Vandenberg - 2017-03-02 14:52:32 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/6", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/6/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/6/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/6", "id": 300469564, "node_id": "MDU6SXNzdWUzMDA0Njk1NjQ=", "number": 6, "title": "Add form and multipart_form helpers to request", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2018-02-27T02:20:18Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We have a json() helper on last_request, however for form encoded a=b&c=d data and multipart form encoded data we don't have a helper. Whilst there are less useful with APIs they are a common usage for people using requests.\n\nLaunchpad Details: [#LP1632584](https://bugs.launchpad.net/bugs/1632584) Jamie Lennox - 2016-10-12 07:28:51 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/5", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/5/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/5/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/5", "id": 300469546, "node_id": "MDU6SXNzdWUzMDA0Njk1NDY=", "number": 5, "title": "Allow a reset() on a mocker", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667739, "node_id": "MDU6TGFiZWw4NDk2Njc3Mzk=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/wishlist", "name": "wishlist", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-27T02:20:13Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Similar to how mock allows you to do mock.reset() to clear the history we should allow that on our history trackers.\n\nLaunchpad Details: [#LP1630149](https://bugs.launchpad.net/bugs/1630149) Jamie Lennox - 2016-10-04 07:34:25 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/4", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/4/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/4/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/4", "id": 300469532, "node_id": "MDU6SXNzdWUzMDA0Njk1MzI=", "number": 4, "title": "Mocker.copy fails to copy the adapter", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667581, "node_id": "MDU6TGFiZWw4NDk2Njc1ODE=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/low", "name": "low", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T02:20:08Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I am trying to use django-rest-framework's RequestsClient with requests_mock. This has taken me down quite the rat hole. After reading a ton of the requests_mock code, I've concluded that the best way for me to do this is to essentially exclude the requests being made to http://testserver.\n\nTo do this, I create my own mocker instance before decorating my classes:\n\nmocker = requests_mocker.Mocker()\nmocker.register_uri(requests_mock.ANY, re.compile(r\"^https?://testserver/\"), real_http=True)\n\n@mocker\nclass MyAPITestCase(APITestCase):\n\n\u00a0\u00a0\u00a0\u00a0client_class = RequestsClient\n\n\u00a0\u00a0\u00a0\u00a0...\n\nHowever, this does not work. After digging around, I discovered this is due to Mocker.decorate_class making a copy of itself, but failing to include the adaptor on the copy.\n\nA quick fix for my code is to override `copy`:\n\nclass Mocker(requests_mock.Mocker):\n\n\u00a0\u00a0\u00a0\u00a0def copy(self):\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m = Mocker(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kw=self._kw,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0real_http=self._real_http\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0m._adapter = self._adapter\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return m\n\nEverything works as expected. I'd love to submit a patch, but I don't have a ton of time to work through all the contribution guidelines for the OpenStack project.\n\nLaunchpad Details: [#LP1639352](https://bugs.launchpad.net/bugs/1639352) brosner - 2016-11-04 21:13:52 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/3", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/3/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/3/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/3", "id": 300469511, "node_id": "MDU6SXNzdWUzMDA0Njk1MTE=", "number": 3, "title": "mocking doesn't drain iterator", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667581, "node_id": "MDU6TGFiZWw4NDk2Njc1ODE=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/low", "name": "low", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-02-27T02:19:59Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "If you pass a generator to data in requests it will iterate over the generator and include that info into the request. This has the result of draining the provided iterator. Currently we don't do this, nor do we read provided files.\n\nIt's rare this would be something that an application is testing the result of. The provided case is that swiftclient updates the md5sum as the iterator is read which is currently not happening. \n\nThe downside of this is that the body available in last_request is now expended. Again this probably doesn't matter but it's a change in behaviour. \n\nUsing itertools.tee we can both drain the generator and maintain the request history - but i'm not sure it's worth it.\n\nLaunchpad Details: [#LP1616751](https://bugs.launchpad.net/bugs/1616751) Jamie Lennox - 2016-08-25 06:19:58 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/2", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/2/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/2/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/2", "id": 300469485, "node_id": "MDU6SXNzdWUzMDA0Njk0ODU=", "number": 2, "title": "real_http gets overwritten in a mocked callback", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667420, "node_id": "MDU6TGFiZWw4NDk2Njc0MjA=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/medium", "name": "medium", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-27T02:19:53Z", "updated_at": "2018-02-27T02:29:02Z", "closed_at": "2018-02-27T02:29:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I wrote a component test in which the mocked API does a little more than just returning HTTP responses: later, the API will send an HTTP request to a listener started by the module being tested. In order to do this, I call a function which will send the request back to the component before completing its response. I get a NoMockAddress exception when I attempt to make this request from inside the callback, yet I have validated that I can send an unmatched request outside of the callback context.\n\nHere is code that does this:\n\nimport module\nimport requests\nimport requests_mock\n\ndef callback(request, context):\n    send_another_request()\n\ndef send_another_request():\n    requests.get('http://httpbin.org/get')\n\ndef test_foo():\n    with requests_mock.Mocker(real_http=True) as mock:\n        mock.post('http://foo.org', text=callback)\n        module.foo()\n\nLaunchpad Details: [#LP1639039](https://bugs.launchpad.net/bugs/1639039) Kaleb Smart - 2016-11-03 20:22:50 +0000", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jamielennox/requests-mock/issues/1", "repository_url": "https://api.github.com/repos/jamielennox/requests-mock", "labels_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/1/comments", "events_url": "https://api.github.com/repos/jamielennox/requests-mock/issues/1/events", "html_url": "https://github.com/jamielennox/requests-mock/issues/1", "id": 300469450, "node_id": "MDU6SXNzdWUzMDA0Njk0NTA=", "number": 1, "title": "Cookies not propagated to requests.Session", "user": {"login": "jamielennox", "id": 416057, "node_id": "MDQ6VXNlcjQxNjA1Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/416057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamielennox", "html_url": "https://github.com/jamielennox", "followers_url": "https://api.github.com/users/jamielennox/followers", "following_url": "https://api.github.com/users/jamielennox/following{/other_user}", "gists_url": "https://api.github.com/users/jamielennox/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamielennox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamielennox/subscriptions", "organizations_url": "https://api.github.com/users/jamielennox/orgs", "repos_url": "https://api.github.com/users/jamielennox/repos", "events_url": "https://api.github.com/users/jamielennox/events{/privacy}", "received_events_url": "https://api.github.com/users/jamielennox/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 849667420, "node_id": "MDU6TGFiZWw4NDk2Njc0MjA=", "url": "https://api.github.com/repos/jamielennox/requests-mock/labels/medium", "name": "medium", "color": "ededed", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-02-27T02:19:42Z", "updated_at": "2018-02-27T02:29:01Z", "closed_at": "2018-02-27T02:29:01Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I'm having problems setting cookies using the requests_mock header= option.  A cookie makes it as far as the requests.Response object, but does not reach the requests.Session I used to make it.  I've tried several variants of the Set-Cookie header and believe I have it formatted correctly.\n\nThe following code demonstrates it:\n\nimport requests, requests_mock\n\nwith requests_mock.Mocker() as m:\n  m.register_uri('GET', 'http://github.com', text='data', headers={\n    \"Set-Cookie\": \"food=pie; Max-Age=3600; Version=1\"\n  })\n  sess = requests.Session()\n  resp = sess.get(\"http://github.com\")\n  for c in resp.cookies:\n    print(\"resp cookie: %s\" % c)\n  for c in sess.cookies:\n    print(\"sess cookie: %s\" % c)\n    \n    \nExpected result: 'food=pie' cookie listed in both resp and sess cookies.  Running the code outside of the \"with\" does this.\n\nActual result: 'food=pie' cookie listed in only resp and is not sent back to the server in further requests.\n\nLaunchpad Details: [#LP1550980](https://bugs.launchpad.net/bugs/1550980) Alex - 2016-02-28 19:09:46 +0000", "performed_via_github_app": null, "score": 1.0}]}