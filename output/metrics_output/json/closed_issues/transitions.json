{"total_count": 311, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/pytransitions/transitions/issues/458", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/458/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/458/events", "html_url": "https://github.com/pytransitions/transitions/issues/458", "id": 681022717, "node_id": "MDU6SXNzdWU2ODEwMjI3MTc=", "number": 458, "title": "Transition behavior difference in HSM", "user": {"login": "matlom", "id": 42643680, "node_id": "MDQ6VXNlcjQyNjQzNjgw", "avatar_url": "https://avatars1.githubusercontent.com/u/42643680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matlom", "html_url": "https://github.com/matlom", "followers_url": "https://api.github.com/users/matlom/followers", "following_url": "https://api.github.com/users/matlom/following{/other_user}", "gists_url": "https://api.github.com/users/matlom/gists{/gist_id}", "starred_url": "https://api.github.com/users/matlom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matlom/subscriptions", "organizations_url": "https://api.github.com/users/matlom/orgs", "repos_url": "https://api.github.com/users/matlom/repos", "events_url": "https://api.github.com/users/matlom/events{/privacy}", "received_events_url": "https://api.github.com/users/matlom/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-18T12:59:57Z", "updated_at": "2020-08-20T11:20:48Z", "closed_at": "2020-08-20T11:20:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I run the example notebook `examples/Graph MIxin Demo Nested.ipynb` with the following states and transitions:\r\n\r\nPython: 3.6.8\r\nTransitions: 0.8.2\r\n\r\n```python\r\nstates = [{'name': 'caffeinated', 'on_enter': 'do_x',\r\n           'children':['dithering', 'running']},\r\n          {'name': 'standing', 'on_enter': ['do_x', 'do_y'], 'on_exit': 'do_z'},\r\n          {'name': 'walking', 'tags': ['accepted', 'pending'], 'timeout': 5, 'on_timeout': 'do_z'},\r\n          \r\n         ]\r\ntransitions = [\r\n  ['walk', 'standing', 'walking'],\r\n  ['go', 'standing', 'walking'],\r\n  ['stop', 'walking', 'standing'],\r\n  {'trigger': 'drink', 'source': '*', 'dest': 'caffeinated_dithering',\r\n   'conditions':'is_hot', 'unless': 'is_too_hot'},\r\n  ['walk', 'caffeinated_dithering', 'caffeinated_running'],\r\n  ['relax', 'caffeinated', 'standing'],\r\n  ['sip', 'standing', 'caffeinated'],\r\n  ['drink', 'caffeinated_dithering', '=']\r\n]\r\n```\r\n\r\n\r\n\r\nI get an exception (below) when following these two transitions: \r\n\r\n```python\r\nmodel.drink()\r\nmodel.drink()\r\n```\r\n\r\nThe only difference to the example notebook is that I moved the transition `['drink', 'caffeinated_dithering', '=']` to the `transitions` instead of defining it in the state child `caffeinated`. I do not get this exception in version 0.7. \r\n\r\n\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-13-0b8549feb4ed> in <module>\r\n----> 1 model.drink()\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in trigger_event(self, _model, _trigger, *args, **kwargs)\r\n    696         \"\"\"\r\n    697         with self():\r\n--> 698             res = self._trigger_event(_model, _trigger, None, *args, **kwargs)\r\n    699         return self._check_event_result(res, _model, _trigger)\r\n    700 \r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _trigger_event(self, _model, _trigger, _state_tree, *args, **kwargs)\r\n    856                     res[key] = self._trigger_event(_model, _trigger, value, *args, **kwargs)\r\n    857             if not res.get(key, None) and _trigger in self.events:\r\n--> 858                 res[key] = self.events[_trigger].trigger(_model, self, *args, **kwargs)\r\n    859         return None if not res or all(v is None for v in res.values()) else any(res.values())\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in trigger(self, _model, _machine, *args, **kwargs)\r\n    110         # Machine._process should not be called somewhere else. That's why it should not be exposed\r\n    111         # to Machine users.\r\n--> 112         return _machine._process(func)\r\n    113 \r\n    114     def _trigger(self, _model, _machine, *args, **kwargs):\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/core.py in _process(self, trigger)\r\n   1112             if not self._transition_queue:\r\n   1113                 # if trigger raises an Error, it has to be handled by the Machine.process caller\r\n-> 1114                 return trigger()\r\n   1115             else:\r\n   1116                 raise MachineError(\"Attempt to process events synchronously while transition queue is not empty!\")\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _trigger(self, _model, _machine, *args, **kwargs)\r\n    125                 event_data.source_name = state_name\r\n    126                 event_data.source_path = copy.copy(state_path)\r\n--> 127                 res = self._process(event_data)\r\n    128                 if res:\r\n    129                     elems = state_path\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _process(self, event_data)\r\n    141             for trans in self.transitions[event_data.source_name]:\r\n    142                 event_data.transition = trans\r\n--> 143                 if trans.execute(event_data):\r\n    144                     event_data.result = True\r\n    145                     break\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/core.py in execute(self, event_data)\r\n    267 \r\n    268         if self.dest:  # if self.dest is None this is an internal transition with no actual state change\r\n--> 269             self._change_state(event_data)\r\n    270 \r\n    271         event_data.machine.callbacks(itertools.chain(self.after, event_data.machine.after_state_change), event_data)\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/diagrams.py in _change_state(self, event_data)\r\n     29         graph.reset_styling()\r\n     30         graph.set_previous_transition(self.source, self.dest, event_data.event.name)\r\n---> 31         _super(TransitionGraphSupport, self)._change_state(event_data)  # pylint: disable=protected-access\r\n     32         for state in _flatten(listify(getattr(event_data.model, event_data.machine.model_attribute))):\r\n     33             graph.set_node_style(self.dest if hasattr(state, 'name') else state, 'active')\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _change_state(self, event_data)\r\n    257 \r\n    258     def _change_state(self, event_data):\r\n--> 259         state_tree, exit_partials, enter_partials = self._resolve_transition(event_data)\r\n    260         for func in exit_partials:\r\n    261             func()\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _resolve_transition(self, event_data)\r\n    243                          for state_name in _resolve_order(scoped_tree)]\r\n    244         if dst_name_path:\r\n--> 245             new_states, enter_partials = self._enter_nested(root, dst_name_path, scope + root, event_data)\r\n    246         else:\r\n    247             new_states, enter_partials = {}, []\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _enter_nested(self, root, dest, prefix_path, event_data)\r\n    268             state_name = root.pop(0)\r\n    269             with event_data.machine(state_name):\r\n--> 270                 return self._enter_nested(root, dest, prefix_path, event_data)\r\n    271         elif dest:\r\n    272             new_states = OrderedDict()\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in _enter_nested(self, root, dest, prefix_path, event_data)\r\n    272             new_states = OrderedDict()\r\n    273             state_name = dest.pop(0)\r\n--> 274             with event_data.machine(state_name):\r\n    275                 new_states[state_name], new_enter = self._enter_nested([], dest, prefix_path + [state_name], event_data)\r\n    276                 enter_partials = [partial(event_data.machine.scoped.scoped_enter, event_data, prefix_path)] + new_enter\r\n\r\n~/dev/my_app/venv/lib/python3.6/site-packages/transitions/extensions/nesting.py in __call__(self, to_scope)\r\n    338         if isinstance(to_scope, string_types):\r\n    339             state_name = to_scope.split(self.state_cls.separator)[0]\r\n--> 340             state = self.states[state_name]\r\n    341             to_scope = (state, state.states, state.events)\r\n    342         elif isinstance(to_scope, Enum):\r\n\r\nKeyError: 'caffeinated'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/456", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/456/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/456/events", "html_url": "https://github.com/pytransitions/transitions/issues/456", "id": 674312626, "node_id": "MDU6SXNzdWU2NzQzMTI2MjY=", "number": 456, "title": "Multiple models with HierarchicalMachine : Parent does not resolve child conditions", "user": {"login": "alexandretanem", "id": 17599937, "node_id": "MDQ6VXNlcjE3NTk5OTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/17599937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandretanem", "html_url": "https://github.com/alexandretanem", "followers_url": "https://api.github.com/users/alexandretanem/followers", "following_url": "https://api.github.com/users/alexandretanem/following{/other_user}", "gists_url": "https://api.github.com/users/alexandretanem/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandretanem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandretanem/subscriptions", "organizations_url": "https://api.github.com/users/alexandretanem/orgs", "repos_url": "https://api.github.com/users/alexandretanem/repos", "events_url": "https://api.github.com/users/alexandretanem/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandretanem/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-06T13:25:43Z", "updated_at": "2020-08-10T19:27:34Z", "closed_at": "2020-08-10T19:27:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhen using the [Reuse of previously created HSMs](https://github.com/pytransitions/transitions/tree/master#reuse-of-previously-created-hsms) principle of HierarchicalMachine, I can't make the Parent state machine being aware of Children SM conditions.\r\n\r\nIn the example below there is no difference with or without the line `machineParent.add_model(modelChild)`.\r\nConstraint: I don't want Parent to inherit from Child... in the sense of python inheritance.\r\n\r\nIs this an issue from `transitions` or there is another way to achieve this ?\r\n\r\n\r\n```python\r\n\r\nclass Child():\r\n    def __init__(self):\r\n        self.true = True\r\n\r\n    def ok(self):\r\n        return self.true\r\n\r\nclass Parent():\r\n    pass\r\n\r\nmodelChild = Child()\r\nmachineChild = HierarchicalGraphMachine(model=modelChild, states=['init', 'done'], initial='init', auto_transitions=False)\r\nmachineChild.add_transition('go', 'init', 'done', conditions=['ok'])\r\n\r\nmodelParent = Parent()\r\nmachineParent = HierarchicalGraphMachine(model=modelParent, states=['init', 'done', {'name':'child', 'children':machineChild}], initial='init', auto_transitions=False)\r\nmachineParent.add_model(modelChild)\r\nmachineParent.add_transition('go', 'init', 'child')\r\nmachineParent.add_transition('finish', 'child_done', 'done')\r\n\r\ndef printState():\r\n    print(\"# ===\")\r\n    print(\"# PARENT : {} => {}\".format(modelParent.state, machineParent.get_triggers(modelParent.state)))\r\n    print(\"# CHILD : {} => {}\".format(modelChild.state, machineChild.get_triggers(modelChild.state)))\r\n\r\nprintState()\r\n# ===\r\n# PARENT : init => ['go']\r\n# CHILD : init => ['go']\r\nmodelParent.go()\r\nprintState()\r\n# ===\r\n# PARENT : child_init => ['go']\r\n# CHILD : init => ['go']\r\nmodelParent.go()\r\n\r\n# Raise an exception\r\n> Traceback (most recent call last):\r\n>  File \"/usr/local/lib/python3.8/dist-packages/transitions/core.py\", line 1087, in resolve_callable\r\n>    func = getattr(event_data.model, func)\r\n> AttributeError: 'Parent' object has no attribute 'ok'\r\n> During handling of the above exception, another exception occurred:\r\n[...]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/454", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/454/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/454/events", "html_url": "https://github.com/pytransitions/transitions/issues/454", "id": 668833306, "node_id": "MDU6SXNzdWU2Njg4MzMzMDY=", "number": 454, "title": "Tests fail on python3.6", "user": {"login": "ConiKost", "id": 4583460, "node_id": "MDQ6VXNlcjQ1ODM0NjA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4583460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ConiKost", "html_url": "https://github.com/ConiKost", "followers_url": "https://api.github.com/users/ConiKost/followers", "following_url": "https://api.github.com/users/ConiKost/following{/other_user}", "gists_url": "https://api.github.com/users/ConiKost/gists{/gist_id}", "starred_url": "https://api.github.com/users/ConiKost/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ConiKost/subscriptions", "organizations_url": "https://api.github.com/users/ConiKost/orgs", "repos_url": "https://api.github.com/users/ConiKost/repos", "events_url": "https://api.github.com/users/ConiKost/events{/privacy}", "received_events_url": "https://api.github.com/users/ConiKost/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-30T15:01:01Z", "updated_at": "2020-08-04T19:48:17Z", "closed_at": "2020-07-31T09:29:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I do run the tests, I can see them failing on python3.6. On newer python3.7 and onwards, all tests pass.\r\n\r\nLog: https://pastebin.com/He0LwbPa", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/453", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/453/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/453/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/453/events", "html_url": "https://github.com/pytransitions/transitions/issues/453", "id": 666578783, "node_id": "MDU6SXNzdWU2NjY1Nzg3ODM=", "number": 453, "title": "Attaching a model with multiple states to multiple machines ", "user": {"login": "Yishu1997", "id": 60525713, "node_id": "MDQ6VXNlcjYwNTI1NzEz", "avatar_url": "https://avatars1.githubusercontent.com/u/60525713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Yishu1997", "html_url": "https://github.com/Yishu1997", "followers_url": "https://api.github.com/users/Yishu1997/followers", "following_url": "https://api.github.com/users/Yishu1997/following{/other_user}", "gists_url": "https://api.github.com/users/Yishu1997/gists{/gist_id}", "starred_url": "https://api.github.com/users/Yishu1997/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Yishu1997/subscriptions", "organizations_url": "https://api.github.com/users/Yishu1997/orgs", "repos_url": "https://api.github.com/users/Yishu1997/repos", "events_url": "https://api.github.com/users/Yishu1997/events{/privacy}", "received_events_url": "https://api.github.com/users/Yishu1997/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-27T20:55:06Z", "updated_at": "2020-08-04T07:02:35Z", "closed_at": "2020-08-04T07:02:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "As mentioned in the documentation we can attach multiple machine to a model with multiple states using different `model_attribute` values.\r\n\r\nI am implementing it similar to the way mentioned in the documentation\r\n\r\n```\r\nclass Matter():\r\n    pass\r\n\r\nlump = Matter()\r\n\r\nstates = ['solid','liquid','gas']\r\ntransitions = [\r\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid'},\r\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas'}\r\n]\r\n\r\nmatter_machine = Machine(lump, states=states, transitions=transitions, initial='solid', model_attribute='state')\r\nshipment_machine = Machine(lump, states=states, transitions=transitions, initial='liquid', model_attribute='shipping_state')\r\n\r\n\r\nlump.melt()\r\nlump.evaporate()\r\nprint(lump.state)\r\n>>> gas\r\nprint(lump.shipping_state)\r\n>>> liquid\r\n```\r\n\r\nHow shall I access the Machine which has the `model_attribute='shipping_state'` that is `shipment_machine`, as all the transitions get carried out only on the first machine that is the `matter_machine` as it is initialized first. I am not able to perform any transition on the `shipment_machine`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/452", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/452/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/452/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/452/events", "html_url": "https://github.com/pytransitions/transitions/issues/452", "id": 665488169, "node_id": "MDU6SXNzdWU2NjU0ODgxNjk=", "number": 452, "title": "add label to Graph node and edge", "user": {"login": "badiku", "id": 30396109, "node_id": "MDQ6VXNlcjMwMzk2MTA5", "avatar_url": "https://avatars2.githubusercontent.com/u/30396109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badiku", "html_url": "https://github.com/badiku", "followers_url": "https://api.github.com/users/badiku/followers", "following_url": "https://api.github.com/users/badiku/following{/other_user}", "gists_url": "https://api.github.com/users/badiku/gists{/gist_id}", "starred_url": "https://api.github.com/users/badiku/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badiku/subscriptions", "organizations_url": "https://api.github.com/users/badiku/orgs", "repos_url": "https://api.github.com/users/badiku/repos", "events_url": "https://api.github.com/users/badiku/events{/privacy}", "received_events_url": "https://api.github.com/users/badiku/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-07-25T01:17:36Z", "updated_at": "2020-08-20T13:11:08Z", "closed_at": "2020-08-20T13:11:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi, I like GraphMachine, \r\nand I'd like to add some label to nodes and edges.\r\n\r\nI see there're some basic label codes in `diagrams.py` for supporting label,\r\nbut when building a machine with label, got this error:\r\n```python\r\nfrom transitions.extensions import GraphMachine\r\nmachine = GraphMachine(states=dict(name='test', label='test'))\r\n```\r\n\r\n> site-packages\\transitions\\core.py in _create_state(cls, *args, **kwargs)\r\n> \u3000   616     @classmethod\r\n> \u3000   617     def _create_state(cls, *args, **kwargs):\r\n> --> 618         return cls.state_cls(*args, **kwargs)\r\n> \u3000   619 \r\n> \u3000   620     @property\r\n\r\n> TypeError: __init__() got an unexpected keyword argument 'label'\r\n\r\nso, the problem is :  `diagrams.py` support label, \r\nbut by default in `core.py` State and Transition class do not support label argument.\r\n\r\n\r\nold codes for getting label:\r\nin diagrams.py:\r\n```python\r\nclass BaseGraph(object)\r\n    def _convert_state_attributes(self, state):\r\n            label = state.get('label', state['name'])\r\n\r\n\r\n    def _transition_label(self, tran):\r\n      edge_label = tran.get('label', tran['trigger'])\r\n```\r\n\r\ndoes author forget these codes?\r\n\r\nto support label, I tried to add label argument in `core.py`\uff1a \r\n```python\r\nclass State(object):\r\n    def __init__(..., label=None):\r\n        ...\r\n        self.label = label\r\n\r\nclass Transition(object):\r\n    def __init__(..., label=None):\r\n        ...\r\n        self.label = label\r\n```\r\n\r\nand in `markup.py`,  add label to attributes list:\r\n```python\r\nclass MarkupMachine(Machine):\r\n    state_attributes = ['on_exit', 'on_enter', 'ignore_invalid_triggers', 'timeout', 'on_timeout', 'tags', 'label'] \r\n    transition_attributes = ['source', 'dest', 'prepare', 'before', 'after', 'label']\r\n```\r\n\r\nseemed ok. but there'd be some better method.\r\n\r\nrelated issue: #442\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/451", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/451/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/451/events", "html_url": "https://github.com/pytransitions/transitions/issues/451", "id": 661275843, "node_id": "MDU6SXNzdWU2NjEyNzU4NDM=", "number": 451, "title": "how to recover a state from where it enters?", "user": {"login": "EricJin101", "id": 26600982, "node_id": "MDQ6VXNlcjI2NjAwOTgy", "avatar_url": "https://avatars1.githubusercontent.com/u/26600982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EricJin101", "html_url": "https://github.com/EricJin101", "followers_url": "https://api.github.com/users/EricJin101/followers", "following_url": "https://api.github.com/users/EricJin101/following{/other_user}", "gists_url": "https://api.github.com/users/EricJin101/gists{/gist_id}", "starred_url": "https://api.github.com/users/EricJin101/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EricJin101/subscriptions", "organizations_url": "https://api.github.com/users/EricJin101/orgs", "repos_url": "https://api.github.com/users/EricJin101/repos", "events_url": "https://api.github.com/users/EricJin101/events{/privacy}", "received_events_url": "https://api.github.com/users/EricJin101/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-20T02:23:54Z", "updated_at": "2020-08-20T13:11:55Z", "closed_at": "2020-08-20T13:11:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "For instance, we got\r\nstates = ['Offline', 'Idle', 'Error', {'name': 'Work', 'children': ['Running', 'Stop']}]\r\n\r\ntransitions = [['login', 'Offline', 'Idle'], ['work', 'Idle', 'Work'], ...., ['error' , '*', 'Error'], ['recover', 'Error', '*']]\r\n\r\nA (triger.error) -> Error (triger.recover) -> A\r\nB (triger.error) -> Error (triger.recover) -> B\r\nC (triger.error) -> Error (triger.recover) -> C\r\ncan I recover an Error state from where it enters?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/450", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/450/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/450/events", "html_url": "https://github.com/pytransitions/transitions/issues/450", "id": 657894306, "node_id": "MDU6SXNzdWU2NTc4OTQzMDY=", "number": 450, "title": "Possibility to alter the node posiition?", "user": {"login": "dennylab", "id": 28300445, "node_id": "MDQ6VXNlcjI4MzAwNDQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/28300445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dennylab", "html_url": "https://github.com/dennylab", "followers_url": "https://api.github.com/users/dennylab/followers", "following_url": "https://api.github.com/users/dennylab/following{/other_user}", "gists_url": "https://api.github.com/users/dennylab/gists{/gist_id}", "starred_url": "https://api.github.com/users/dennylab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dennylab/subscriptions", "organizations_url": "https://api.github.com/users/dennylab/orgs", "repos_url": "https://api.github.com/users/dennylab/repos", "events_url": "https://api.github.com/users/dennylab/events{/privacy}", "received_events_url": "https://api.github.com/users/dennylab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T06:42:01Z", "updated_at": "2020-07-16T16:51:02Z", "closed_at": "2020-07-16T16:51:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nMy graph looks like this:\r\n![smb0](https://user-images.githubusercontent.com/28300445/87635861-09888e00-c740-11ea-8edd-980091be8d54.png)\r\n\r\nIs it possible to move the \"new\" node to the top as example?\r\nI tried for node in graph.iternodes(): node.attr[\"pos\"] = \"0,0!\", but it didn't work...\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/449", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/449/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/449/events", "html_url": "https://github.com/pytransitions/transitions/issues/449", "id": 653401933, "node_id": "MDU6SXNzdWU2NTM0MDE5MzM=", "number": 449, "title": "get_triggers / get_transitions with HierarchicalMachine", "user": {"login": "alexandretanem", "id": 17599937, "node_id": "MDQ6VXNlcjE3NTk5OTM3", "avatar_url": "https://avatars1.githubusercontent.com/u/17599937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandretanem", "html_url": "https://github.com/alexandretanem", "followers_url": "https://api.github.com/users/alexandretanem/followers", "following_url": "https://api.github.com/users/alexandretanem/following{/other_user}", "gists_url": "https://api.github.com/users/alexandretanem/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandretanem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandretanem/subscriptions", "organizations_url": "https://api.github.com/users/alexandretanem/orgs", "repos_url": "https://api.github.com/users/alexandretanem/repos", "events_url": "https://api.github.com/users/alexandretanem/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandretanem/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-08T15:42:56Z", "updated_at": "2020-07-17T16:18:27Z", "closed_at": "2020-07-17T16:12:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Taking the example from the Readme \"[Reuse of previously created HSMs](https://github.com/pytransitions/transitions#reuse-of-previously-created-hsms)\", i tried to print the result of get_triggers on the parent Machine, for each state.\r\n- When current state is a state of the parent machine, get_triggers return all possible triggers from these states => OK\r\n- When current state is a state of the child machine, calling get_triggers on the parent machine does not return anything while it is possible to call a child's trigger. In the example, in state counting_1, collector.get_triggers return nothing, while collector.increase() works and changes the state.\r\n\r\n**Is it the expected behaviour ? Wouldn't it be interesting to also have children's possible triggers ?**\r\n\r\n\r\n\r\n```python\r\nfrom transitions.extensions import HierarchicalMachine as Machine\r\n\r\ncount_states = ['1', '2', 'done']\r\ncount_trans = [\r\n    ['increase', '1', '2'],\r\n    ['decrease', '2', '1'],\r\n    ['done', '2', 'done'],\r\n    ['reset', '*', '1']\r\n]\r\n\r\ncounter = Machine(states=count_states, transitions=count_trans, initial='1')\r\n\r\ncounter.increase()\r\nstates = ['waiting', 'collecting', {'name': 'counting', 'children': counter}]\r\n\r\ntransitions = [\r\n    ['collect', 'waiting', 'collecting'],\r\n    ['wait', ['collecting','counting_done'], 'waiting'],\r\n    ['count', 'collecting', 'counting']\r\n]\r\n\r\ndef print_state_trig(machine):\r\n    print(\"State : \"+machine.state+\" > \"+str(machine.get_triggers(machine.state)))\r\n\r\ncollector = Machine(states=states, transitions=transitions, initial='waiting', auto_transitions=False)\r\n\r\nprint_state_trig(collector)\r\ncollector.collect()\r\nprint_state_trig(collector)\r\ncollector.count()\r\nprint_state_trig(collector)\r\ncollector.increase()\r\nprint_state_trig(collector)\r\ncollector.done()\r\nprint_state_trig(collector)\r\ncollector.wait()\r\n\r\n# Output : \r\n# State : waiting > ['collect']\r\n# State : collecting > ['wait', 'count']\r\n# State : counting_1 > []       ##\u00a0Expected : State : counting_1 > ['increase', 'reset']\r\n# State : counting_2 > []       ## Expected : State : counting_2 > ['decrease', 'done', 'reset']\r\n# State : counting_done > ['wait']\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/443", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/443/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/443/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/443/events", "html_url": "https://github.com/pytransitions/transitions/issues/443", "id": 638266838, "node_id": "MDU6SXNzdWU2MzgyNjY4Mzg=", "number": 443, "title": "Examples of exporting a transition model as json or YAML.", "user": {"login": "pdcoded", "id": 9830931, "node_id": "MDQ6VXNlcjk4MzA5MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9830931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdcoded", "html_url": "https://github.com/pdcoded", "followers_url": "https://api.github.com/users/pdcoded/followers", "following_url": "https://api.github.com/users/pdcoded/following{/other_user}", "gists_url": "https://api.github.com/users/pdcoded/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdcoded/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdcoded/subscriptions", "organizations_url": "https://api.github.com/users/pdcoded/orgs", "repos_url": "https://api.github.com/users/pdcoded/repos", "events_url": "https://api.github.com/users/pdcoded/events{/privacy}", "received_events_url": "https://api.github.com/users/pdcoded/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-14T01:55:43Z", "updated_at": "2020-06-25T21:57:28Z", "closed_at": "2020-06-18T11:35:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any example that we can refer to the export of an FSM model as a JSON or YAML. And loading it back from JSON/YAML. \r\n\r\nA simple example would help as there is a lot of prev. issues raised around it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/442", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/442/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/442/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/442/events", "html_url": "https://github.com/pytransitions/transitions/issues/442", "id": 637529538, "node_id": "MDU6SXNzdWU2Mzc1Mjk1Mzg=", "number": 442, "title": "State translations", "user": {"login": "dennylab", "id": 28300445, "node_id": "MDQ6VXNlcjI4MzAwNDQ1", "avatar_url": "https://avatars0.githubusercontent.com/u/28300445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dennylab", "html_url": "https://github.com/dennylab", "followers_url": "https://api.github.com/users/dennylab/followers", "following_url": "https://api.github.com/users/dennylab/following{/other_user}", "gists_url": "https://api.github.com/users/dennylab/gists{/gist_id}", "starred_url": "https://api.github.com/users/dennylab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dennylab/subscriptions", "organizations_url": "https://api.github.com/users/dennylab/orgs", "repos_url": "https://api.github.com/users/dennylab/repos", "events_url": "https://api.github.com/users/dennylab/events{/privacy}", "received_events_url": "https://api.github.com/users/dennylab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-12T06:55:07Z", "updated_at": "2020-06-12T10:19:04Z", "closed_at": "2020-06-12T10:19:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using HierarchicalGraphMachine to generate a graph based on my model.\r\n\r\nHere is a stripped version of my Model:\r\n\r\n```\r\n#  Copyright (C) 2012 - 2020 by labsolution S.a.r.l & Co KG. all rights reserved\r\n\r\n\r\nclass States:\r\n    STATE_NEW = 'new'\r\n    STATE_CONVERT = 'convert_to_tree'\r\n\r\n\r\nSATTE_TRANSLATION = {\r\n    States.STATE_NEW: 'New',\r\n    States.STATE_CONVERT: 'Convert structured data into tree format',\r\n}\r\n\r\n\r\nclass SMBModelDefinition:\r\n    states = [\r\n        States.STATE_NEW,\r\n        States.STATE_CONVERT,\r\n    ]\r\n\r\n    transitions = [\r\n      ['go', f'{States.STATE_NEW}', f'{States.STATE_CONVERT}'],\r\n    ]\r\n\r\n```\r\n\r\nWhat I'm missing is a feature to generate the graph, but to use my `SATTE_TRANSLATION` as state labels. So I would have human readable labels on my graph, but internally I can use technical keywords because of technical reasons (hooks and so on).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/441", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/441/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/441/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/441/events", "html_url": "https://github.com/pytransitions/transitions/issues/441", "id": 636834224, "node_id": "MDU6SXNzdWU2MzY4MzQyMjQ=", "number": 441, "title": "Orthogonal edge routing with Graphviz", "user": {"login": "rSrkn", "id": 48635617, "node_id": "MDQ6VXNlcjQ4NjM1NjE3", "avatar_url": "https://avatars3.githubusercontent.com/u/48635617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rSrkn", "html_url": "https://github.com/rSrkn", "followers_url": "https://api.github.com/users/rSrkn/followers", "following_url": "https://api.github.com/users/rSrkn/following{/other_user}", "gists_url": "https://api.github.com/users/rSrkn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rSrkn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rSrkn/subscriptions", "organizations_url": "https://api.github.com/users/rSrkn/orgs", "repos_url": "https://api.github.com/users/rSrkn/repos", "events_url": "https://api.github.com/users/rSrkn/events{/privacy}", "received_events_url": "https://api.github.com/users/rSrkn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-11T08:41:20Z", "updated_at": "2020-06-14T23:04:41Z", "closed_at": "2020-06-14T23:04:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \r\nHow can I configure state machine to draw graph with straight line connections ( \"orthogonal edge routing\") instead of curved lines. That feature exists in Graphviz as explained in the below question:\r\nhttps://stackoverflow.com/questions/8939973/how-can-i-generate-rectangle-style-edges-instead-of-curves-in-graphviz\r\n\r\nbut I could not find how to apply this to the state machine.\r\nDoes anybody have any idea or can forward me to any useful information?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/440", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/440/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/440/events", "html_url": "https://github.com/pytransitions/transitions/issues/440", "id": 635818723, "node_id": "MDU6SXNzdWU2MzU4MTg3MjM=", "number": 440, "title": "Can't reference IntEnum state with value 0 in transition destination", "user": {"login": "Pathfinder216", "id": 17412026, "node_id": "MDQ6VXNlcjE3NDEyMDI2", "avatar_url": "https://avatars3.githubusercontent.com/u/17412026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pathfinder216", "html_url": "https://github.com/Pathfinder216", "followers_url": "https://api.github.com/users/Pathfinder216/followers", "following_url": "https://api.github.com/users/Pathfinder216/following{/other_user}", "gists_url": "https://api.github.com/users/Pathfinder216/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pathfinder216/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pathfinder216/subscriptions", "organizations_url": "https://api.github.com/users/Pathfinder216/orgs", "repos_url": "https://api.github.com/users/Pathfinder216/repos", "events_url": "https://api.github.com/users/Pathfinder216/events{/privacy}", "received_events_url": "https://api.github.com/users/Pathfinder216/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-09T23:23:23Z", "updated_at": "2020-06-10T11:41:12Z", "closed_at": "2020-06-10T11:38:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I defined an IntEnum that I'm using as the states. It has a member with value 0. When defining the transitions, I can't use that member as a destination. I can, however, get it to work by using a string of the enumeration name.\r\n\r\n### Minimal example:\r\n```python\r\nfrom enum import IntEnum\r\nfrom transitions import Machine\r\n\r\nclass State(IntEnum):\r\n    FOO = 0\r\n    BAR = 1\r\n\r\ntransitions = [\r\n    ['foo', State.FOO, State.BAR],\r\n    ['bar', State.BAR, State.FOO],\r\n    # ['bar', State.BAR, 'FOO'],\r\n]\r\n\r\nclass StateMachine(Machine):\r\n    def __init__(self):\r\n        super().__init__(states=State, initial=State.FOO, transitions=transitions)\r\n\r\nm = StateMachine()\r\nm.foo()\r\nassert m.is_BAR()\r\nm.bar()\r\nassert m.is_FOO()  # raises AssertionError\r\n```\r\nMaking any one (or more) of the following changes causes it to work fine and not raise an `AssertionError`:\r\n- Switching the 'bar' transition to the commented-out one\r\n- Changing the value of `State.FOO` to anything other than `0`\r\n- Changing from `IntEnum` to `Enum`\r\n\r\nI setup logging to the console to see what was going on. I noticed the following message: `DEBUG:transitions.core:Initiating transition from state BAR to state None...`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/439", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/439/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/439/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/439/events", "html_url": "https://github.com/pytransitions/transitions/issues/439", "id": 626949734, "node_id": "MDU6SXNzdWU2MjY5NDk3MzQ=", "number": 439, "title": "A newbie question", "user": {"login": "mniemotka", "id": 66100817, "node_id": "MDQ6VXNlcjY2MTAwODE3", "avatar_url": "https://avatars3.githubusercontent.com/u/66100817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mniemotka", "html_url": "https://github.com/mniemotka", "followers_url": "https://api.github.com/users/mniemotka/followers", "following_url": "https://api.github.com/users/mniemotka/following{/other_user}", "gists_url": "https://api.github.com/users/mniemotka/gists{/gist_id}", "starred_url": "https://api.github.com/users/mniemotka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mniemotka/subscriptions", "organizations_url": "https://api.github.com/users/mniemotka/orgs", "repos_url": "https://api.github.com/users/mniemotka/repos", "events_url": "https://api.github.com/users/mniemotka/events{/privacy}", "received_events_url": "https://api.github.com/users/mniemotka/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-29T02:20:14Z", "updated_at": "2020-06-10T13:05:19Z", "closed_at": "2020-06-10T11:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have written a state machine for a pool controller, but I am struggling with something that is noted in the documentation about forcing the on_enter method to fire off when I initialize the model.    The documentation says:\r\n\"Note that on_enter_\u00abstate name\u00bb callback will not fire when a Machine is first initialized. For example if you have an on_enter_A() callback defined, and initialize the Machine with initial='A', on_enter_A() will not be fired until the next time you enter state A. (If you need to make sure on_enter_A() fires at initialization, you can simply create a dummy initial state and then explicitly call to_A() inside the __init__ method.)\"\r\n\r\nBut I am not sure where I need to call this out....I create a Class called Pool Controller, then create an instance of Pool Controller like this\r\nMyController=Pool_Controller\r\n\r\nAnd then I create the state machine like this\r\n\r\nmachine = Machine(MyController, states=states, transitions, initial='dummy_state')\r\n\r\n\r\nwhere do I need to put the to_initial_state() to get the dummy_state immediately jump to my initial_state so that on_enter_initial_state will execute when the model intializes?\r\n\r\nSorry if this is a basic question.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/438", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/438/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/438/events", "html_url": "https://github.com/pytransitions/transitions/issues/438", "id": 620914602, "node_id": "MDU6SXNzdWU2MjA5MTQ2MDI=", "number": 438, "title": "test_codestyle.py: AssertionError", "user": {"login": "Bridouz", "id": 10825150, "node_id": "MDQ6VXNlcjEwODI1MTUw", "avatar_url": "https://avatars2.githubusercontent.com/u/10825150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bridouz", "html_url": "https://github.com/Bridouz", "followers_url": "https://api.github.com/users/Bridouz/followers", "following_url": "https://api.github.com/users/Bridouz/following{/other_user}", "gists_url": "https://api.github.com/users/Bridouz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bridouz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bridouz/subscriptions", "organizations_url": "https://api.github.com/users/Bridouz/orgs", "repos_url": "https://api.github.com/users/Bridouz/repos", "events_url": "https://api.github.com/users/Bridouz/events{/privacy}", "received_events_url": "https://api.github.com/users/Bridouz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-19T11:53:16Z", "updated_at": "2020-05-20T14:29:03Z", "closed_at": "2020-05-20T14:29:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Packaging latest version for my distro (Alpine):\r\n\r\n```\r\n_______________________ TestCodeFormat.test_conformance ________________________\r\n\r\nself = <tests.test_codestyle.TestCodeFormat testMethod=test_conformance>\r\n\r\n    def test_conformance(self):\r\n        \"\"\"Test that we conform to PEP-8.\"\"\"\r\n        style = pycodestyle.StyleGuide(quiet=False, ignore=['E501', 'W605'])\r\n        if exists('transitions'):  # when run from root directory (e.g. tox)\r\n            style.input_dir('transitions')\r\n            style.input_dir('tests')\r\n        else:  # when run from test directory (e.g. pycharm)\r\n            style.input_dir('../transitions')\r\n            style.input_dir('.')\r\n        result = style.check_files()\r\n>       self.assertEqual(result.total_errors, 0,\r\n                         \"Found code style errors (and warnings).\")\r\nE       AssertionError: 1 != 0 : Found code style errors (and warnings).\r\n\r\ntests/test_codestyle.py:17: AssertionError\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/437", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/437/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/437/events", "html_url": "https://github.com/pytransitions/transitions/issues/437", "id": 619552064, "node_id": "MDU6SXNzdWU2MTk1NTIwNjQ=", "number": 437, "title": "Warnings raised when using multiple machine on same model", "user": {"login": "potens1", "id": 3988571, "node_id": "MDQ6VXNlcjM5ODg1NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3988571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/potens1", "html_url": "https://github.com/potens1", "followers_url": "https://api.github.com/users/potens1/followers", "following_url": "https://api.github.com/users/potens1/following{/other_user}", "gists_url": "https://api.github.com/users/potens1/gists{/gist_id}", "starred_url": "https://api.github.com/users/potens1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/potens1/subscriptions", "organizations_url": "https://api.github.com/users/potens1/orgs", "repos_url": "https://api.github.com/users/potens1/repos", "events_url": "https://api.github.com/users/potens1/events{/privacy}", "received_events_url": "https://api.github.com/users/potens1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-16T20:42:43Z", "updated_at": "2020-06-12T14:19:44Z", "closed_at": "2020-06-12T14:19:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In addition to #436 using multiple machines per model raise warnings about\r\n`Model already contains attribute 'trigger'. Skip binding.`\r\n\r\nIt is harmles but it is the symptom of the \"non-merge\" trigger problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/436", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/436/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/436/events", "html_url": "https://github.com/pytransitions/transitions/issues/436", "id": 619447970, "node_id": "MDU6SXNzdWU2MTk0NDc5NzA=", "number": 436, "title": "Ability to manage multiple states per Model breaks the trigger method ", "user": {"login": "potens1", "id": 3988571, "node_id": "MDQ6VXNlcjM5ODg1NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3988571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/potens1", "html_url": "https://github.com/potens1", "followers_url": "https://api.github.com/users/potens1/followers", "following_url": "https://api.github.com/users/potens1/following{/other_user}", "gists_url": "https://api.github.com/users/potens1/gists{/gist_id}", "starred_url": "https://api.github.com/users/potens1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/potens1/subscriptions", "organizations_url": "https://api.github.com/users/potens1/orgs", "repos_url": "https://api.github.com/users/potens1/repos", "events_url": "https://api.github.com/users/potens1/events{/privacy}", "received_events_url": "https://api.github.com/users/potens1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/13", "html_url": "https://github.com/pytransitions/transitions/milestone/13", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/13/labels", "id": 5557023, "node_id": "MDk6TWlsZXN0b25lNTU1NzAyMw==", "number": 13, "title": "0.8.2", "description": "", "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-06-18T14:34:46Z", "updated_at": "2020-06-27T16:47:44Z", "due_on": "2020-06-26T07:00:00Z", "closed_at": "2020-06-27T16:47:44Z"}, "comments": 2, "created_at": "2020-05-16T11:18:21Z", "updated_at": "2020-06-27T16:40:37Z", "closed_at": "2020-06-27T16:40:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm still investigating, but it sounds like using multiple states on a single model breaks the ability to use the model.trigger method (or, to be more precise, the trigger is working on a single Machine, not on all of them)\r\n\r\nIt sounds like only the first Machine changing the model will be able to \"trigger\". Here is a simple test case:\r\n```python\r\nfrom transitions import Machine\r\n\r\n\r\nclass Model:\r\n    def __init__(self):\r\n        Machine(\r\n            model=self,\r\n            states=[\"a_1\", \"a_2\"],\r\n            transitions=[{\"trigger\": \"go1\", \"source\": \"a_1\", \"dest\": \"a_2\"}],\r\n            initial=\"a_1\",\r\n            model_attribute=\"state_a\",\r\n        )\r\n        Machine(\r\n            model=self,\r\n            states=[\"b_1\", \"b_2\"],\r\n            transitions=[{\"trigger\": \"go2\", \"source\": \"b_1\", \"dest\": \"b_2\"}],\r\n            initial=\"b_1\",\r\n            model_attribute=\"state_b\",\r\n        )\r\n\r\n\r\ndef test_go1():\r\n    model = Model()\r\n    model.trigger(\"go1\")\r\n    assert model.state_a == \"a_2\"\r\n\r\n\r\ndef test_go2():\r\n    model = Model()\r\n    model.trigger(\"go2\")   #   <-       THIS IS BROKEN\r\n    #  model.go2()               #   <-   THIS WILL WORK\r\n    assert model.state_b == \"b_2\"\r\n```\r\n\r\nThis feature was added by #387", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/435", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/435/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/435/events", "html_url": "https://github.com/pytransitions/transitions/issues/435", "id": 615273961, "node_id": "MDU6SXNzdWU2MTUyNzM5NjE=", "number": 435, "title": "Comparison with django-fsm", "user": {"login": "somghosh", "id": 5731118, "node_id": "MDQ6VXNlcjU3MzExMTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/5731118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/somghosh", "html_url": "https://github.com/somghosh", "followers_url": "https://api.github.com/users/somghosh/followers", "following_url": "https://api.github.com/users/somghosh/following{/other_user}", "gists_url": "https://api.github.com/users/somghosh/gists{/gist_id}", "starred_url": "https://api.github.com/users/somghosh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/somghosh/subscriptions", "organizations_url": "https://api.github.com/users/somghosh/orgs", "repos_url": "https://api.github.com/users/somghosh/repos", "events_url": "https://api.github.com/users/somghosh/events{/privacy}", "received_events_url": "https://api.github.com/users/somghosh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}, {"id": 137204908, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDg=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-09T22:41:08Z", "updated_at": "2020-06-10T11:48:07Z", "closed_at": "2020-06-10T11:48:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I wanted to know the pros and cons of `django-fsm` vs  `transitions` , https://github.com/viewflow/django-fsm\r\n\r\n\r\nAny info on the relative plus/minus of the two packages and which one is suitable where, if any such use cases favour one over another inside the business logic/transitions use cases will be appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/434", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/434/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/434/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/434/events", "html_url": "https://github.com/pytransitions/transitions/issues/434", "id": 612393647, "node_id": "MDU6SXNzdWU2MTIzOTM2NDc=", "number": 434, "title": "Slow while declaring in Loop", "user": {"login": "Gauraviitkgp", "id": 23613158, "node_id": "MDQ6VXNlcjIzNjEzMTU4", "avatar_url": "https://avatars3.githubusercontent.com/u/23613158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gauraviitkgp", "html_url": "https://github.com/Gauraviitkgp", "followers_url": "https://api.github.com/users/Gauraviitkgp/followers", "following_url": "https://api.github.com/users/Gauraviitkgp/following{/other_user}", "gists_url": "https://api.github.com/users/Gauraviitkgp/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gauraviitkgp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gauraviitkgp/subscriptions", "organizations_url": "https://api.github.com/users/Gauraviitkgp/orgs", "repos_url": "https://api.github.com/users/Gauraviitkgp/repos", "events_url": "https://api.github.com/users/Gauraviitkgp/events{/privacy}", "received_events_url": "https://api.github.com/users/Gauraviitkgp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-05T07:23:57Z", "updated_at": "2020-05-08T13:44:49Z", "closed_at": "2020-05-08T13:44:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I've like 100,000 instaces of a class each which is calling the machine. \r\n\r\n```\r\nclass Matter(object):\r\n    pass\r\n\r\nmachine = Machine(states=states, transitions=transitions, initial='Healthy')\r\n\r\nprint(\"At End:\",timeit.time.process_time())\r\nfor i in range(100000):\r\n\tlump = Matter()\r\n\tmachine = Machine(lump, states=states, transitions=transitions, initial='Healthy')\r\nprint(\"At End:\",timeit.time.process_time())\r\n```\r\nThis process takes around 28 seconds to complete which is kinda slowing things up. Is there any faster way to do it? If we do by Machine.add_model() it takes \r\n```\r\nmachine = Machine(states=states, transitions=transitions, initial='Healthy')\r\nlump=[]\r\nprint(\"At End:\",timeit.time.process_time())\r\nfor i in range(100000):\r\n\tlump.append(Matter())\r\nprint(\"At End:\",timeit.time.process_time())\t\r\nmachine.add_model(lump)\r\nprint(\"At End:\",timeit.time.process_time())\r\n```\r\nThis Takes around 79 seconds. Any suggestions on how to speed up?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/433", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/433/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/433/events", "html_url": "https://github.com/pytransitions/transitions/issues/433", "id": 611962513, "node_id": "MDU6SXNzdWU2MTE5NjI1MTM=", "number": 433, "title": "Passing data - passing a string leads to error", "user": {"login": "mat-l", "id": 5571947, "node_id": "MDQ6VXNlcjU1NzE5NDc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5571947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mat-l", "html_url": "https://github.com/mat-l", "followers_url": "https://api.github.com/users/mat-l/followers", "following_url": "https://api.github.com/users/mat-l/following{/other_user}", "gists_url": "https://api.github.com/users/mat-l/gists{/gist_id}", "starred_url": "https://api.github.com/users/mat-l/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mat-l/subscriptions", "organizations_url": "https://api.github.com/users/mat-l/orgs", "repos_url": "https://api.github.com/users/mat-l/repos", "events_url": "https://api.github.com/users/mat-l/events{/privacy}", "received_events_url": "https://api.github.com/users/mat-l/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T15:26:33Z", "updated_at": "2020-05-05T13:38:58Z", "closed_at": "2020-05-05T13:38:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear all,\r\n\r\nsimilar to the example [Passing-data](https://github.com/pytransitions/transitions#passing-data) I have copied the code lines to my project.\r\n\r\nInstead of temps or pressures I would like to hand over a string which is afterwards published to the ROS (Robot Operating System).\r\nAfter creating the statemachine object \"sm\" and performing the transition \"starting\" with the given data which should be passed, in this case the variable is \"rospubmessage\" and the value is a string \"test\", the pyhon script is throwing an error:\r\n\r\n> sm.starting(rospubmessage=\"test\")\r\n> Traceback (most recent call last):\r\n>   File \"/usr/lib/python3.6/code.py\", line 91, in runcode\r\n>     exec(code, self.locals)\r\n>   File \"<input>\", line 1, in <module>\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/extensions/locking.py\", line 90, in trigger\r\n>     return _super(LockedEvent, self).trigger(model, *args, **kwargs)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 390, in trigger\r\n>     return self.machine._process(func)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 1109, in _process\r\n>     return trigger()\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 408, in _trigger\r\n>     return self._process(event_data)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 417, in _process\r\n>     if trans.execute(event_data):\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 269, in execute\r\n>     self._change_state(event_data)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 279, in _change_state\r\n>     event_data.machine.get_state(self.dest).enter(event_data)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 121, in enter\r\n>     event_data.machine.callbacks(self.on_enter, event_data)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/extensions/locking.py\", line 176, in _locked_method\r\n>     return func(*args, **kwargs)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 1044, in callbacks\r\n>     self.callback(func, event_data)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/extensions/locking.py\", line 176, in _locked_method\r\n>     return func(*args, **kwargs)\r\n>   File \"/home/mat/.local/lib/python3.6/site-packages/transitions/core.py\", line 1065, in callback\r\n>     func(*event_data.args, **event_data.kwargs)\r\n> TypeError: rospublisher() got an unexpected keyword argument 'rospubmessage'\r\n\r\nThe code looks as follows:\r\n\r\n```\r\nclass StatemachineClass(object):\r\n    def __init__(self): self.set_environment()\r\n    def set_environment(self, rospubmessage=str(\"1\"), rossubmessage=str(\"2\")):\r\n        self.rospubmessage = rospubmessage\r\n        self.rossubmessage = rossubmessage\r\n\r\n    def print_rospubmessage(self): print(\"Current rospubmessage is: %s\" % self.rospubmessage)\r\n    def print_rossubmessage(self): print(\"Current rospubmessage is: %s\" % self.rossubmessage)\r\n\r\n    def rospublisher(self):\r\n        print(\"the message is: \" + str(self.rospubmessage))\r\n\r\n\r\n## The states\r\nstates = [\r\n    State(name='initial'),\r\n    State(name='startup', on_enter=['rospublisher'],\r\n    State('operation', on_enter=['rossubscriber']),\r\n    State(name='shutdown', on_exit=['say_goodbye2'])\r\n]\r\n\r\nsm = StatemachineClass()\r\nmachine = Machine(sm, states, initial='initial')\r\n\r\nmachine.add_transition('starting', 'initial', 'startup', before='set_environment')\r\nmachine.add_transition('operating', 'startup', 'operation')\r\nmachine.add_transition('stopping', 'operation', 'initial')\r\n```\r\n\r\n\r\nCould you please help me with the error?\r\nBest regards\r\nmatl", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/432", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/432/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/432/events", "html_url": "https://github.com/pytransitions/transitions/issues/432", "id": 611549400, "node_id": "MDU6SXNzdWU2MTE1NDk0MDA=", "number": 432, "title": "elegant approach for a transition condition", "user": {"login": "pdcoded", "id": 9830931, "node_id": "MDQ6VXNlcjk4MzA5MzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/9830931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pdcoded", "html_url": "https://github.com/pdcoded", "followers_url": "https://api.github.com/users/pdcoded/followers", "following_url": "https://api.github.com/users/pdcoded/following{/other_user}", "gists_url": "https://api.github.com/users/pdcoded/gists{/gist_id}", "starred_url": "https://api.github.com/users/pdcoded/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pdcoded/subscriptions", "organizations_url": "https://api.github.com/users/pdcoded/orgs", "repos_url": "https://api.github.com/users/pdcoded/repos", "events_url": "https://api.github.com/users/pdcoded/events{/privacy}", "received_events_url": "https://api.github.com/users/pdcoded/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-04T00:54:19Z", "updated_at": "2020-05-04T01:04:08Z", "closed_at": "2020-05-04T01:04:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thank you for this lightweight library. I have used it extensively for configuring states of my dialog system.\r\n\r\nHere is a condition I want to emulate in best possible way ::\r\n\r\nI have states and transitions already defined which works perfectly. I want to add a new state, let's say \"X-state\" which is triggered by any of the already defined states if the trigger word is let's say \"ABC\". \r\nIt should work for all the states basically something like ::\r\n\r\nself.machine.add_transition(trigger='XYZ',\r\n                                    source='[*ANY STATE]',\r\n                                    dest='X-state')\r\n\r\nPossible ?? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/431", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/431/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/431/events", "html_url": "https://github.com/pytransitions/transitions/issues/431", "id": 607151202, "node_id": "MDU6SXNzdWU2MDcxNTEyMDI=", "number": 431, "title": "Type-safe Usage?", "user": {"login": "GavanWilhite", "id": 2085119, "node_id": "MDQ6VXNlcjIwODUxMTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/2085119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GavanWilhite", "html_url": "https://github.com/GavanWilhite", "followers_url": "https://api.github.com/users/GavanWilhite/followers", "following_url": "https://api.github.com/users/GavanWilhite/following{/other_user}", "gists_url": "https://api.github.com/users/GavanWilhite/gists{/gist_id}", "starred_url": "https://api.github.com/users/GavanWilhite/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GavanWilhite/subscriptions", "organizations_url": "https://api.github.com/users/GavanWilhite/orgs", "repos_url": "https://api.github.com/users/GavanWilhite/repos", "events_url": "https://api.github.com/users/GavanWilhite/events{/privacy}", "received_events_url": "https://api.github.com/users/GavanWilhite/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-27T00:17:24Z", "updated_at": "2020-06-10T11:49:37Z", "closed_at": "2020-06-10T11:49:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there any ways to do type-safe transitions?\r\n\r\nEnums or statically defined transition collections / function definitions?\r\n\r\nI'm coming from TypeScript land, so perhaps this is swimming upstream.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/430", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/430/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/430/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/430/events", "html_url": "https://github.com/pytransitions/transitions/issues/430", "id": 604224192, "node_id": "MDU6SXNzdWU2MDQyMjQxOTI=", "number": 430, "title": "Manually Defining Trigger Methods Breaks Declared State Transitions", "user": {"login": "campellcl", "id": 6627179, "node_id": "MDQ6VXNlcjY2MjcxNzk=", "avatar_url": "https://avatars1.githubusercontent.com/u/6627179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/campellcl", "html_url": "https://github.com/campellcl", "followers_url": "https://api.github.com/users/campellcl/followers", "following_url": "https://api.github.com/users/campellcl/following{/other_user}", "gists_url": "https://api.github.com/users/campellcl/gists{/gist_id}", "starred_url": "https://api.github.com/users/campellcl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/campellcl/subscriptions", "organizations_url": "https://api.github.com/users/campellcl/orgs", "repos_url": "https://api.github.com/users/campellcl/repos", "events_url": "https://api.github.com/users/campellcl/events{/privacy}", "received_events_url": "https://api.github.com/users/campellcl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-21T19:20:43Z", "updated_at": "2020-06-12T13:31:05Z", "closed_at": "2020-06-12T13:31:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation in the README states (the emphasis is mine): \r\n> Notice the shiny new methods attached to the Matter instance (`evaporate()`, `ionize()`, etc.). Each method triggers the corresponding transition. **You don't have to explicitly define these methods anywhere**; the name of each transition is bound to the model passed to the `Machine` initializer (in this case, `lump`).\r\n\r\nI interpreted this to mean that you *may* define the trigger methods manually, but don't have to. If we don't define the trigger methods manually (as in the below example) the output matches what is expected:\r\n\r\nSource code:\r\n```python\r\nfrom transitions import State, Machine\r\n\r\nclass StateMachineModel:\r\n    \r\n    state = None\r\n\r\n    def __init__(self):\r\n        pass\r\n\r\n    # def transition_one(self):\r\n    #     print('transitioning states...')\r\n    \r\n    # def transition_two(self):\r\n    #     print('transitioning states...')\r\n\r\nif __name__ == '__main__':\r\n    states = [State(name='A'), State(name='B'), State(name='C'), State(name='D')]\r\n    transitions = [\r\n        {'trigger': 'transition_one', 'source': 'A', 'dest': 'B'},\r\n        {'trigger': 'transition_two', 'source': 'B', 'dest': 'C'},\r\n        {'trigger': 'transition_three', 'source': 'C', 'dest': 'D'}\r\n    ]\r\n    state_machine_model = StateMachineModel()\r\n    state_machine = Machine(model=state_machine_model, states=states, transitions=transitions, initial=states[0])\r\n    print('state_machine_model (current state): %s' % state_machine_model.state)\r\n    state_machine_model.transition_one()\r\n    print('state_machine_model (current state): %s' % state_machine_model.state)\r\n    state_machine_model.transition_two()\r\n    print('state_machine_model (current state): %s' % state_machine_model.state)\r\n```\r\n\r\nOutput: \r\n```\r\nstate_machine_model (current state): A\r\nstate_machine_model (current state): B\r\nstate_machine_model (current state): C\r\n```\r\n\r\nHowever, if we do define the trigger methods manually (e.g. uncomment the trigger functions as shown below) the state machine fails to transition states:\r\n\r\n```python\r\nfrom transitions import State, Machine\r\n\r\nclass StateMachineModel:\r\n\r\n    state = None\r\n\r\n    def __init__(self):\r\n        pass\r\n\r\n    def transition_one(self):\r\n        print('transitioning states...')\r\n\r\n    def transition_two(self):\r\n        print('transitioning states...')\r\n\r\nif __name__ == '__main__':\r\n    states = [State(name='A'), State(name='B'), State(name='C'), State(name='D')]\r\n    transitions = [\r\n        {'trigger': 'transition_one', 'source': 'A', 'dest': 'B'},\r\n        {'trigger': 'transition_two', 'source': 'B', 'dest': 'C'},\r\n        {'trigger': 'transition_three', 'source': 'C', 'dest': 'D'}\r\n    ]\r\n    state_machine_model = StateMachineModel()\r\n    state_machine = Machine(model=state_machine_model, states=states, transitions=transitions, initial=states[0])\r\n    print('state_machine_model (current state): %s' % state_machine_model.state)\r\n    state_machine_model.transition_one()\r\n    print('state_machine_model (current state): %s' % state_machine_model.state)\r\n    state_machine_model.transition_two()\r\n    print('state_machine_model (current state): %s' % state_machine_model.state)\r\n```\r\nUnanticipated output:\r\n```\r\nstate_machine_model (current state): A\r\ntransitioning states...\r\nstate_machine_model (current state): A\r\ntransitioning states...\r\nstate_machine_model (current state): A\r\n```\r\n\r\nIf this is the expected behavior, please consider modifying the language in the README to make it clear that: in the event the user *does explicitly define the trigger methods*, they will have to manage the state transitions themselves. \r\n\r\nIf the behavior of explicitly defining trigger methods is permitted but I have not done it correctly, please add an example to the README which showcases the proper way to manually override the trigger methods while still preserving the functionality of automated state transitions. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/429", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/429/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/429/events", "html_url": "https://github.com/pytransitions/transitions/issues/429", "id": 602685134, "node_id": "MDU6SXNzdWU2MDI2ODUxMzQ=", "number": 429, "title": "Trying to implement AsyncTimeoutState, RecursionError", "user": {"login": "potens1", "id": 3988571, "node_id": "MDQ6VXNlcjM5ODg1NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3988571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/potens1", "html_url": "https://github.com/potens1", "followers_url": "https://api.github.com/users/potens1/followers", "following_url": "https://api.github.com/users/potens1/following{/other_user}", "gists_url": "https://api.github.com/users/potens1/gists{/gist_id}", "starred_url": "https://api.github.com/users/potens1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/potens1/subscriptions", "organizations_url": "https://api.github.com/users/potens1/orgs", "repos_url": "https://api.github.com/users/potens1/repos", "events_url": "https://api.github.com/users/potens1/events{/privacy}", "received_events_url": "https://api.github.com/users/potens1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/13", "html_url": "https://github.com/pytransitions/transitions/milestone/13", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/13/labels", "id": 5557023, "node_id": "MDk6TWlsZXN0b25lNTU1NzAyMw==", "number": 13, "title": "0.8.2", "description": "", "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-06-18T14:34:46Z", "updated_at": "2020-06-27T16:47:44Z", "due_on": "2020-06-26T07:00:00Z", "closed_at": "2020-06-27T16:47:44Z"}, "comments": 4, "created_at": "2020-04-19T10:57:36Z", "updated_at": "2020-06-27T16:42:43Z", "closed_at": "2020-06-27T16:42:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello, I'm trying to implement an AsyncTimeoutState extension to better interact with asyncio instead of having threads coming into play.\r\nI'm hitting the case where, when the timeout is cancelled and awaited after the timeout is done, I get RecusionError, and I don't get where it's coming from.\r\nHere is what I've unit now:\r\n\r\n```python\r\nimport asyncio\r\n\r\nimport pytest\r\nfrom transitions.core import listify\r\nfrom transitions.extensions.asyncio import AsyncMachine, AsyncState\r\nfrom transitions.extensions.states import add_state_features\r\n\r\n\r\nclass Timer:\r\n    def __init__(self, timeout, callback, args):\r\n        self._timeout = timeout\r\n        self._callback = callback\r\n        self._task = asyncio.create_task(self._job())\r\n        self._args = args\r\n        self.is_alive = True\r\n        self._timed_out = False\r\n\r\n    async def _job(self):\r\n        await asyncio.sleep(self._timeout)\r\n        await self._callback(*self._args)\r\n\r\n    async def cancel(self):\r\n        self.is_alive = False\r\n        if self._timed_out:\r\n            self._task.cancel()\r\n        try:\r\n            await self._task  # <---- Here is the problem\r\n        except asyncio.CancelledError:\r\n            pass\r\n\r\n\r\nclass AsyncTimeout(AsyncState):\r\n    \"\"\"\r\n    Adds timeout functionality to an state. Timeouts are handled model-specific.\r\n\r\n    Attributes:\r\n        timeout (float): Seconds after which a timeout function should be\r\n                         called.\r\n        on_timeout (list): Functions to call when a timeout is triggered.\r\n    \"\"\"\r\n\r\n    dynamic_methods = [\"on_timeout\"]\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        \"\"\"\r\n        Args:\r\n            **kwargs: If kwargs contain 'timeout', assign the float value to\r\n                self.timeout. If timeout is set, 'on_timeout' needs to be\r\n                passed with kwargs as well or an AttributeError will be thrown\r\n                if timeout is not passed or equal 0.\r\n        \"\"\"\r\n        self.timeout = kwargs.pop(\"timeout\", 0)\r\n        self._on_timeout = None\r\n        if self.timeout > 0:\r\n            try:\r\n                self.on_timeout = kwargs.pop(\"on_timeout\")\r\n            except KeyError:\r\n                raise AttributeError(\r\n                    \"Timeout state requires 'on_timeout' when timeout is set.\"\r\n                )\r\n        else:\r\n            self._on_timeout = kwargs.pop(\"on_timeout\", [])\r\n        self.runner = {}\r\n        super().__init__(*args, **kwargs)\r\n\r\n    async def enter(self, event_data):\r\n        \"\"\"\r\n        Extends `transitions.core.State.enter` by starting a timeout timer for\r\n        the current model when the state is entered and self.timeout is larger\r\n        than 0.\r\n        \"\"\"\r\n        if self.timeout > 0:\r\n            timer = Timer(\r\n                self.timeout, self._process_timeout, args=(event_data,)\r\n            )\r\n            self.runner[id(event_data.model)] = timer\r\n        await super().enter(event_data)\r\n\r\n    async def exit(self, event_data):\r\n        timer_task = self.runner.get(id(event_data.model), None)\r\n        if timer_task is not None and timer_task.is_alive:\r\n            await timer_task.cancel()\r\n        await super().exit(event_data)\r\n\r\n    async def start_timeout(self, delay, event_data):\r\n        await asyncio.sleep(delay)\r\n        await self._process_timeout(event_data)\r\n\r\n    async def _process_timeout(self, event_data):\r\n        await event_data.model.go()\r\n        await asyncio.sleep(0.1)\r\n\r\n    @property\r\n    def on_timeout(self):\r\n        \"\"\"\r\n        List of strings and callables to be called when the state timeouts.\r\n        \"\"\"\r\n        return self._on_timeout\r\n\r\n    @on_timeout.setter\r\n    def on_timeout(self, value):\r\n        \"\"\" Listifies passed values and assigns them to on_timeout.\"\"\"\r\n        self._on_timeout = listify(value)\r\n\r\n\r\n@add_state_features(AsyncTimeout)\r\nclass CustomStateMachine(AsyncMachine):\r\n    pass\r\n\r\n\r\nclass SocialSuperhero(object):\r\n    def __init__(self):\r\n        self.entourage = 0\r\n\r\n    def on_enter_waiting(self, ev):\r\n        self.entourage += 1\r\n\r\n    async def fin(self, ev):\r\n        print(\"Done !\")\r\n\r\n@pytest.mark.asyncio\r\nasync def test_async_state():\r\n    states = [\r\n        {\"name\": \"preparing\"},\r\n        {\"name\": \"waiting\", \"timeout\": 1, \"on_timeout\": \"go\"},\r\n        {\"name\": \"away\"},\r\n    ]  # The city needs us!\r\n\r\n    transitions = [\r\n        [\"done\", \"preparing\", \"waiting\"],\r\n        [\r\n            \"join\",\r\n            \"waiting\",\r\n            \"waiting\",\r\n        ],  # Entering Waiting again will increase our entourage\r\n        [\"go\", \"waiting\", \"away\"],\r\n    ]  # Okay, let' move\r\n\r\n    hero = SocialSuperhero()\r\n    machine = CustomStateMachine(\r\n        model=hero, states=states, transitions=transitions, initial=\"preparing\",\r\n        finalize_event=\"fin\", send_event=True\r\n    )\r\n    assert hero.state == \"preparing\"  # Preparing for the night shift\r\n    await hero.done()\r\n    assert hero.state == \"waiting\"  # Waiting for fellow superheroes to join us\r\n    assert hero.entourage == 1  # It's just us so far\r\n    await asyncio.sleep(0.2)  # Waiting...\r\n    await hero.join()  # Weeh, we got company\r\n    await asyncio.sleep(0.3)  # Waiting...\r\n    await hero.join()  # Even more company \\o/\r\n    await asyncio.sleep(2)  # Waiting...\r\n    assert (\r\n        hero.state == \"away\"\r\n    )  # Impatient superhero already left the building\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import logging\r\n\r\n    logging.basicConfig(level=logging.DEBUG)\r\n    asyncio.run(test_async_state(), debug=True)\r\n```\r\n\r\nIf I don't `await` the `Timer._task` after the cancel, everything _seems_ okay, but, if I'm not wrong, I fear the `asyncio.Task` will never be garbage collected (not sure of that).\r\n\r\nDoes someone has any idea/view/enlightening about that ?\r\n\r\nThe error is:\r\n```\r\nERROR    asyncio:base_events.py:1619 Exception in callback <TaskStepMethWrapper object at 0x7fc5f402ea10>()\r\nhandle: <Handle <TaskStepMethWrapper object at 0x7fc5f402ea10>() created at /usr/lib/python3.7/asyncio/base_events.py:404>\r\nsource_traceback: Object created at (most recent call last):\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 541, in run_forever\r\n    self._run_once()\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1778, in _run_once\r\n    handle._run()\r\n  File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\r\n    self._context.run(self._callback, *self._args)\r\n  File \"/home/nic/development/states/tests/test_asyncstate.py\", line 19, in _job\r\n    await self._callback(*self._args)\r\n  File \"/home/nic/development/states/tests/test_asyncstate.py\", line 88, in _process_timeout\r\n    await event_data.model.go()\r\n  File \"/home/nic/.virtualenvs/states-T205R_h3/lib/python3.7/site-packages/transitions/extensions/asyncio.py\", line 188, in trigger\r\n    t = asyncio.create_task(self.machine._process(func))\r\n  File \"/usr/lib/python3.7/asyncio/tasks.py\", line 351, in create_task\r\n    return loop.create_task(coro)\r\n  File \"/usr/lib/python3.7/asyncio/base_events.py\", line 404, in create_task\r\n    task = tasks.Task(coro, loop=self)\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\r\n    self._context.run(self._callback, *self._args)\r\nRecursionError: maximum recursion depth exceeded while calling a Python object\r\n\r\n```\r\n\r\n**EDIT**: Added `if` to check if the Timer._task should be canceled or not, that should be done, but, it does not change the problem", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/428", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/428/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/428/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/428/events", "html_url": "https://github.com/pytransitions/transitions/issues/428", "id": 598460923, "node_id": "MDU6SXNzdWU1OTg0NjA5MjM=", "number": 428, "title": "Using parallel states in \"HierarchicalGraphMachine\" raise  KeyError: 'parallel'", "user": {"login": "xiaohuihui1024", "id": 20126304, "node_id": "MDQ6VXNlcjIwMTI2MzA0", "avatar_url": "https://avatars1.githubusercontent.com/u/20126304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuihui1024", "html_url": "https://github.com/xiaohuihui1024", "followers_url": "https://api.github.com/users/xiaohuihui1024/followers", "following_url": "https://api.github.com/users/xiaohuihui1024/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuihui1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuihui1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuihui1024/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuihui1024/orgs", "repos_url": "https://api.github.com/users/xiaohuihui1024/repos", "events_url": "https://api.github.com/users/xiaohuihui1024/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuihui1024/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-12T11:06:12Z", "updated_at": "2020-06-12T11:49:23Z", "closed_at": "2020-06-12T11:49:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, @aleneum \r\nI found some bugs in the Hierarchical extension in version 0.8.x.\r\nMainly involves enumeration, graphics, state separator.\r\nSome combinations will cause the HSM not to work properly.\r\n\r\nOne of the issues is as follows:\r\n\r\n```python\r\n# works fine\r\n\r\n# from transitions.extensions import HierarchicalGraphMachine as Machine\r\nfrom transitions.extensions import HierarchicalMachine as Machine\r\nfrom transitions.extensions.nesting import NestedState\r\nNestedState.separator = '\u21a6'\r\nimport logging\r\nextra_args = dict(auto_transitions=False,)\r\nstates = [\"A\",\"B\",\"C\",\r\n          {'name': \"D\", 'parallel': [\"D_A\", \"D_B\"],}\r\n         ]\r\nlogging.basicConfig(level=logging.INFO)\r\nmachine = Machine(states=states, initial='A', **extra_args)\r\n```\r\n\r\nThe above code using `HierarchicalMachine` works fine.\r\nWhen using `HierarchicalGraphMachine`, it does not work properly\r\nNote: Whether `NestedState.separator = '\u21a6'` is executed or not, it is still the result\r\n\r\n```python\r\n# error\r\n\r\nfrom transitions.extensions import HierarchicalGraphMachine as Machine\r\n# from transitions.extensions import HierarchicalMachine as Machine\r\nfrom transitions.extensions.nesting import NestedState\r\nNestedState.separator = '\u21a6'\r\nimport logging\r\nextra_args = dict(auto_transitions=False, use_pygraphviz=False, show_conditions=False, show_state_attributes=True,)\r\n# extra_args = dict(auto_transitions=False,)\r\nstates = [\"A\",\"B\",\"C\",\r\n          {'name': \"D\", 'parallel': [\"D_A\", \"D_B\"],}\r\n         ]\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\nmachine = Machine(states=states, initial='A', **extra_args)\r\n```\r\n\r\n<pre><span>---------------------------------------------------------------------------</span>\r\n<span>KeyError</span>                                  Traceback (most recent call last)\r\n<span>&lt;ipython-input-18-026c4cb2adbd&gt;</span> in <span>&lt;module&gt;</span>\r\n<span>     11</span> \r\n<span>     12</span> logging<span>.</span>basicConfig<span>(</span>level<span>=</span>logging<span>.</span>INFO<span>)</span>\r\n<span>---&gt; 13</span><span> </span>machine <span>=</span> Machine<span>(</span>states<span>=</span>states<span>,</span> initial<span>=</span><span>'A'</span><span>,</span> <span>**</span>extra_args<span>)</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams.py</span> in <span>__init__</span><span>(self, *args, **kwargs)</span>\r\n<span>    148</span> \r\n<span>    149</span>         _LOGGER<span>.</span>debug<span>(</span><span>\"Using graph engine %s\"</span><span>,</span> self<span>.</span>graph_cls<span>)</span>\r\n<span>--&gt; 150</span><span>         </span>_super<span>(</span>GraphMachine<span>,</span> self<span>)</span><span>.</span>__init__<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\r\n<span>    151</span> \r\n<span>    152</span>         <span># for backwards compatibility assign get_combined_graph to get_graph</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\markup.py</span> in <span>__init__</span><span>(self, *args, **kwargs)</span>\r\n<span>     26</span>                 self<span>.</span>_add_markup_model<span>(</span>m<span>)</span>\r\n<span>     27</span>         <span>else</span><span>:</span>\r\n<span>---&gt; 28</span><span>             </span>super<span>(</span>MarkupMachine<span>,</span> self<span>)</span><span>.</span>__init__<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\r\n<span>     29</span>             self<span>.</span>_markup<span>[</span><span>'before_state_change'</span><span>]</span> <span>=</span> <span>[</span>x <span>for</span> x <span>in</span> <span>(</span>rep<span>(</span>f<span>)</span> <span>for</span> f <span>in</span> self<span>.</span>before_state_change<span>)</span> <span>if</span> x<span>]</span>\r\n<span>     30</span>             self<span>.</span>_markup<span>[</span><span>'after_state_change'</span><span>]</span> <span>=</span> <span>[</span>x <span>for</span> x <span>in</span> <span>(</span>rep<span>(</span>f<span>)</span> <span>for</span> f <span>in</span> self<span>.</span>before_state_change<span>)</span> <span>if</span> x<span>]</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\nesting.py</span> in <span>__init__</span><span>(self, *args, **kwargs)</span>\r\n<span>    337</span>         self<span>.</span>_stack <span>=</span> <span>[</span><span>]</span>\r\n<span>    338</span>         self<span>.</span>scoped <span>=</span> self\r\n<span>--&gt; 339</span><span>         </span>_super<span>(</span>HierarchicalMachine<span>,</span> self<span>)</span><span>.</span>__init__<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\r\n<span>    340</span> \r\n<span>    341</span>     <span>def</span> __call__<span>(</span>self<span>,</span> to_scope<span>=</span><span>None</span><span>)</span><span>:</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\core.py</span> in <span>__init__</span><span>(self, model, states, initial, transitions, send_event, auto_transitions, ordered_transitions, ignore_invalid_triggers, before_state_change, after_state_change, name, queued, prepare_event, finalize_event, model_attribute, **kwargs)</span>\r\n<span>    572</span> \r\n<span>    573</span>         <span>if</span> model<span>:</span>\r\n<span>--&gt; 574</span><span>             </span>self<span>.</span>add_model<span>(</span>model<span>)</span>\r\n<span>    575</span> \r\n<span>    576</span>     <span>def</span> add_model<span>(</span>self<span>,</span> model<span>,</span> initial<span>=</span><span>None</span><span>)</span><span>:</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams.py</span> in <span>add_model</span><span>(self, model, initial)</span>\r\n<span>    214</span>                 <span>raise</span> AttributeError<span>(</span><span>'Model already has a get_graph attribute. Graph retrieval cannot be bound.'</span><span>)</span>\r\n<span>    215</span>             setattr<span>(</span>mod<span>,</span> <span>'get_graph'</span><span>,</span> partial<span>(</span>self<span>.</span>_get_graph<span>,</span> mod<span>)</span><span>)</span>\r\n<span>--&gt; 216</span><span>             </span>_ <span>=</span> mod<span>.</span>get_graph<span>(</span>title<span>=</span>self<span>.</span>title<span>,</span> force_new<span>=</span><span>True</span><span>)</span>  <span># initialises graph</span>\r\n<span>    217</span> \r\n<span>    218</span>     def add_states(self, states, on_enter=None, on_exit=None,\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams.py</span> in <span>_get_graph</span><span>(self, model, title, force_new, show_roi)</span>\r\n<span>    176</span>     <span>def</span> _get_graph<span>(</span>self<span>,</span> model<span>,</span> title<span>=</span><span>None</span><span>,</span> force_new<span>=</span><span>False</span><span>,</span> show_roi<span>=</span><span>False</span><span>)</span><span>:</span>\r\n<span>    177</span>         <span>if</span> force_new<span>:</span>\r\n<span>--&gt; 178</span><span>             </span>grph <span>=</span> self<span>.</span>graph_cls<span>(</span>self<span>,</span> title<span>=</span>title <span>if</span> title <span>is</span> <span>not</span> <span>None</span> <span>else</span> self<span>.</span>title<span>)</span>\r\n<span>    179</span>             self<span>.</span>model_graphs<span>[</span>model<span>]</span> <span>=</span> grph\r\n<span>    180</span>             <span>try</span><span>:</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams_graphviz.py</span> in <span>__init__</span><span>(self, *args, **kwargs)</span>\r\n<span>    126</span>     <span>def</span> __init__<span>(</span>self<span>,</span> <span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span><span>:</span>\r\n<span>    127</span>         self<span>.</span>_cluster_states <span>=</span> <span>[</span><span>]</span>\r\n<span>--&gt; 128</span><span>         </span>_super<span>(</span>NestedGraph<span>,</span> self<span>)</span><span>.</span>__init__<span>(</span><span>*</span>args<span>,</span> <span>**</span>kwargs<span>)</span>\r\n<span>    129</span> \r\n<span>    130</span>     <span>def</span> set_previous_transition<span>(</span>self<span>,</span> src<span>,</span> dst<span>,</span> key<span>=</span><span>None</span><span>)</span><span>:</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams_graphviz.py</span> in <span>__init__</span><span>(self, machine, title)</span>\r\n<span>     37</span>     <span>def</span> __init__<span>(</span>self<span>,</span> machine<span>,</span> title<span>=</span><span>None</span><span>)</span><span>:</span>\r\n<span>     38</span>         self<span>.</span>reset_styling<span>(</span><span>)</span>\r\n<span>---&gt; 39</span><span>         </span>_super<span>(</span>Graph<span>,</span> self<span>)</span><span>.</span>__init__<span>(</span>machine<span>,</span> title<span>)</span>\r\n<span>     40</span> \r\n<span>     41</span>     <span>def</span> set_previous_transition<span>(</span>self<span>,</span> src<span>,</span> dst<span>,</span> key<span>=</span><span>None</span><span>)</span><span>:</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams.py</span> in <span>__init__</span><span>(self, machine, title)</span>\r\n<span>    239</span>         self<span>.</span>fsm_graph <span>=</span> <span>None</span>\r\n<span>    240</span>         self<span>.</span>roi_state <span>=</span> <span>None</span>\r\n<span>--&gt; 241</span><span>         </span>self<span>.</span>generate<span>(</span>title<span>)</span>\r\n<span>    242</span> \r\n<span>    243</span>     <span>def</span> _convert_state_attributes<span>(</span>self<span>,</span> state<span>)</span><span>:</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams_graphviz.py</span> in <span>generate</span><span>(self, title, roi_state)</span>\r\n<span>     93</span>             state_names <span>+=</span> <span>[</span>k <span>for</span> k<span>,</span> style <span>in</span> self<span>.</span>custom_styles<span>[</span><span>'node'</span><span>]</span><span>.</span>items<span>(</span><span>)</span> <span>if</span> style<span>]</span>\r\n<span>     94</span>             states <span>=</span> _filter_states<span>(</span>states<span>,</span> state_names<span>,</span> self<span>.</span>machine<span>.</span>state_cls<span>)</span>\r\n<span>---&gt; 95</span><span>         </span>self<span>.</span>_add_nodes<span>(</span>states<span>,</span> fsm_graph<span>)</span>\r\n<span>     96</span>         self<span>.</span>_add_edges<span>(</span>transitions<span>,</span> fsm_graph<span>)</span>\r\n<span>     97</span>         setattr<span>(</span>fsm_graph<span>,</span> <span>'draw'</span><span>,</span> partial<span>(</span>self<span>.</span>draw<span>,</span> fsm_graph<span>)</span><span>)</span>\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams_graphviz.py</span> in <span>_add_nodes</span><span>(self, states, container, prefix, default_style)</span>\r\n<span>    152</span>                         root<span>.</span>node<span>(</span>name <span>+</span> <span>\"_anchor\"</span><span>,</span> shape<span>=</span><span>'point'</span><span>,</span> fillcolor<span>=</span><span>'black'</span><span>,</span> width<span>=</span>width<span>)</span>\r\n<span>    153</span>                     self._add_nodes(state['children'], sub, default_style='parallel' if is_parallel else 'default',\r\n<span>--&gt; 154</span><span>                                     prefix=prefix + state['name'] + self.machine.state_cls.separator)\r\n</span><span>    155</span>             <span>else</span><span>:</span>\r\n<span>    156</span>                 style <span>=</span> self<span>.</span>custom_styles<span>[</span><span>'node'</span><span>]</span><span>[</span>name<span>]</span> <span>or</span> default_style\r\n\r\n<span>C:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\diagrams_graphviz.py</span> in <span>_add_nodes</span><span>(self, states, container, prefix, default_style)</span>\r\n<span>    155</span>             <span>else</span><span>:</span>\r\n<span>    156</span>                 style <span>=</span> self<span>.</span>custom_styles<span>[</span><span>'node'</span><span>]</span><span>[</span>name<span>]</span> <span>or</span> default_style\r\n<span>--&gt; 157</span><span>                 </span>container<span>.</span>node<span>(</span>name<span>,</span> label<span>=</span>label<span>,</span> <span>**</span>self<span>.</span>machine<span>.</span>style_attributes<span>[</span><span>'node'</span><span>]</span><span>[</span>style<span>]</span><span>)</span>\r\n<span>    158</span> \r\n<span>    159</span>     <span>def</span> _add_edges<span>(</span>self<span>,</span> transitions<span>,</span> container<span>,</span> prefix<span>=</span><span>''</span><span>)</span><span>:</span>\r\n\r\n<span>KeyError</span>: 'parallel'\r\n\r\n</pre>\r\n\r\nWhen replacing `parallel` with `children` the second piece of code works fine.\r\n\r\n```python\r\n# works fine\r\nfrom transitions.extensions import HierarchicalGraphMachine as Machine\r\n# from transitions.extensions import HierarchicalMachine as Machine\r\nfrom transitions.extensions.nesting import NestedState\r\nNestedState.separator = '\u21a6' \r\nimport logging\r\nextra_args = dict(auto_transitions=False, use_pygraphviz=False, show_conditions=False, show_state_attributes=True,)\r\n# extra_args = dict(auto_transitions=False,)\r\nstates = [\"A\",\"B\",\"C\",\r\n          {'name': \"D\", 'children': [\"D_A\", \"D_B\"],}\r\n         ]\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\nmachine = Machine(states=states, initial='A', **extra_args)\r\n```\r\n\r\nMaybe **the combination of** **\u2018parallel\u2019** and **\u2018Graph\u2019** caused this problem\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/426", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/426/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/426/events", "html_url": "https://github.com/pytransitions/transitions/issues/426", "id": 597448584, "node_id": "MDU6SXNzdWU1OTc0NDg1ODQ=", "number": 426, "title": "pylint complains that transition methods don't exist", "user": {"login": "Bob-May", "id": 47577359, "node_id": "MDQ6VXNlcjQ3NTc3MzU5", "avatar_url": "https://avatars3.githubusercontent.com/u/47577359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bob-May", "html_url": "https://github.com/Bob-May", "followers_url": "https://api.github.com/users/Bob-May/followers", "following_url": "https://api.github.com/users/Bob-May/following{/other_user}", "gists_url": "https://api.github.com/users/Bob-May/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bob-May/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bob-May/subscriptions", "organizations_url": "https://api.github.com/users/Bob-May/orgs", "repos_url": "https://api.github.com/users/Bob-May/repos", "events_url": "https://api.github.com/users/Bob-May/events{/privacy}", "received_events_url": "https://api.github.com/users/Bob-May/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-09T17:45:52Z", "updated_at": "2020-06-12T10:20:08Z", "closed_at": "2020-06-12T10:20:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "From readme.md\r\n\r\n> Notice the shiny new methods attached to the Matter instance (evaporate(), ionize(), etc.). Each method triggers the corresponding transition. You don't have to explicitly define these methods anywhere; the name of each transition is bound to the model passed to the Machine initializer (in this case, lump). Additionally, there is a method called trigger now attached to your model. This method lets you execute transitions by name in case dynamic triggering is required.\r\n\r\nexample to reproduce:\r\n```\r\nimport transitions\r\nclass myStateMachine(object):\r\n\r\n    # Define states\r\n    states = ['State_A', 'State_B']\r\n\r\n    def __init__(self):\r\n\r\n        # Initialize the state machine\r\n        self.state = None #prevents the linter from complaining that there is no state member\r\n        self.machine = transitions.Machine(model=self, states=self.states, initial='State_A')\r\n\r\n        #Define Transitions\r\n        self.machine.add_transition('to_B','State_A', 'State_B')\r\n        self.machine.add_transition('to_A', 'State_B', 'State_A')\r\n        \r\n        \r\nif __name__ == \"__main__\":\r\n    \r\n    example = myStateMachine()\r\n    example.to_B()\r\n    print(example.state)\r\n```\r\n\r\n> output>>\r\n> State_B\r\n> State_A\r\n\r\npylint complains\r\n\r\n> Instance of 'myStateMachine' has no 'to_B' member\r\n> Instance of 'myStateMachine' has no 'to_A' member\r\n\r\nHow to prevent these errors?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/425", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/425/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/425/events", "html_url": "https://github.com/pytransitions/transitions/issues/425", "id": 597209235, "node_id": "MDU6SXNzdWU1OTcyMDkyMzU=", "number": 425, "title": "State names being split", "user": {"login": "abhishek-sharma97", "id": 19312886, "node_id": "MDQ6VXNlcjE5MzEyODg2", "avatar_url": "https://avatars1.githubusercontent.com/u/19312886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhishek-sharma97", "html_url": "https://github.com/abhishek-sharma97", "followers_url": "https://api.github.com/users/abhishek-sharma97/followers", "following_url": "https://api.github.com/users/abhishek-sharma97/following{/other_user}", "gists_url": "https://api.github.com/users/abhishek-sharma97/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhishek-sharma97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhishek-sharma97/subscriptions", "organizations_url": "https://api.github.com/users/abhishek-sharma97/orgs", "repos_url": "https://api.github.com/users/abhishek-sharma97/repos", "events_url": "https://api.github.com/users/abhishek-sharma97/events{/privacy}", "received_events_url": "https://api.github.com/users/abhishek-sharma97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-09T11:15:19Z", "updated_at": "2020-06-12T10:19:04Z", "closed_at": "2020-06-12T10:19:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using transitions 0.8.1\r\nWhile creating a HeirarchicalMachine with states and transitions having \"_\" in the name, the split function is just picking up the first substring after the split and giving KeyError stating the substring is not found in the states dictionary\r\nAny particular reason for adding this split? This was working perfectly with 0.7.2.\r\n\r\n```\r\nstates = [\r\n        {\"name\": \"null\"},\r\n        {\"name\": \"app_draft\"},\r\n        {\"name\": \"validation_pending\"},\r\n        {\"name\": \"validation_failed\"},\r\n        {\"name\": \"ready\"},\r\n    ]\r\n```\r\n\r\nOn further digging, realised that its happening here: https://github.com/pytransitions/transitions/blob/ddd0709af13e007c9cd8dd56fda77dbc51f90f60/transitions/extensions/nesting.py#L343\r\n\r\n\r\nIs it because of the counter addition functionality added for children states?  Any suggestions and answers will be really appreciated.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/424", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/424/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/424/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/424/events", "html_url": "https://github.com/pytransitions/transitions/issues/424", "id": 596888063, "node_id": "MDU6SXNzdWU1OTY4ODgwNjM=", "number": 424, "title": "Checking possible transitions", "user": {"login": "Panos26", "id": 44948373, "node_id": "MDQ6VXNlcjQ0OTQ4Mzcz", "avatar_url": "https://avatars3.githubusercontent.com/u/44948373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Panos26", "html_url": "https://github.com/Panos26", "followers_url": "https://api.github.com/users/Panos26/followers", "following_url": "https://api.github.com/users/Panos26/following{/other_user}", "gists_url": "https://api.github.com/users/Panos26/gists{/gist_id}", "starred_url": "https://api.github.com/users/Panos26/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Panos26/subscriptions", "organizations_url": "https://api.github.com/users/Panos26/orgs", "repos_url": "https://api.github.com/users/Panos26/repos", "events_url": "https://api.github.com/users/Panos26/events{/privacy}", "received_events_url": "https://api.github.com/users/Panos26/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-04-08T21:56:20Z", "updated_at": "2020-06-10T17:18:55Z", "closed_at": "2020-06-10T17:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using the transitions module in ROS environment where the \"inputs\" will be from messages so I am not the one that controls the machine. I want it to check every possible transition every time it gets new data. I tried using the `get_triggers` but since it returns a list of strings I can't use the possible transitions from there. The solution I've come up with is this: \r\n\r\n```\r\nstates = ['Off','Manual','Ready']\r\ntransitions = [\r\n            { 'trigger': 'off_2_manual', 'source': 'Off', 'dest': 'Manual', 'conditions': 'trans_1'},\r\n            { 'trigger': 'manual_2_off', 'source': 'Manual', 'dest': 'Off', 'conditions': 'trans_2'},\r\n            { 'trigger': 'off_2_ready', 'source': 'Off', 'dest': 'Ready', 'conditions': 'trans_3'},\r\n            { 'trigger': 'ready_2_off', 'source': 'Ready', 'dest': 'Off', 'conditions': 'trans_4'}\r\n  ]\r\n\r\nself.machine  = Machine(model=self, states=self.states,transitions=self.transitions, initial='Off')\r\nself.check_for_transitions()\r\n\r\ndef check_for_transitions(self):\r\n            try: self.manual_2_off()\r\n            except: pass\r\n            try: self.manual_2_off()\r\n            except: pass\r\n            try: self.off_2_ready()\r\n            except: pass\r\n            try: self.ready_2_off()\r\n            except: pass\r\n```\r\n\r\nIs there a better way? \r\n*PS VScode keeps underlining `self.manyal_2_off` and `self._transition_` saying instance of class has no such member but it works fine...is this a problem?\r\n\r\nThanks for the great package", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/423", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/423/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/423/events", "html_url": "https://github.com/pytransitions/transitions/issues/423", "id": 596740051, "node_id": "MDU6SXNzdWU1OTY3NDAwNTE=", "number": 423, "title": "Transition with 3 conditions, if the first fail go to \"Invalid\", if one the the two other fail goes to \"Rollbacked\"", "user": {"login": "Jr0ussy", "id": 28924721, "node_id": "MDQ6VXNlcjI4OTI0NzIx", "avatar_url": "https://avatars1.githubusercontent.com/u/28924721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jr0ussy", "html_url": "https://github.com/Jr0ussy", "followers_url": "https://api.github.com/users/Jr0ussy/followers", "following_url": "https://api.github.com/users/Jr0ussy/following{/other_user}", "gists_url": "https://api.github.com/users/Jr0ussy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jr0ussy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jr0ussy/subscriptions", "organizations_url": "https://api.github.com/users/Jr0ussy/orgs", "repos_url": "https://api.github.com/users/Jr0ussy/repos", "events_url": "https://api.github.com/users/Jr0ussy/events{/privacy}", "received_events_url": "https://api.github.com/users/Jr0ussy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T17:27:39Z", "updated_at": "2020-04-17T15:17:58Z", "closed_at": "2020-04-17T15:17:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThe code I have right now is if any conditions fail, it will go to Rollbacked, but I want that is if the first fail to go to Invalid, how can I do that?\r\n\r\nHere the code:\r\n\r\n`self.machine.add_transition(trigger='deployment', source='Valid', dest='Deployed', conditions=['validate_before', 'run_deployment', 'validate_after'], after='audit')\r\n        self.machine.add_transition(trigger='deployment', source='Valid', dest='Rollbacked', conditions=['run_rollback', 'validate_rollback'], after='audit')\r\n        self.machine.add_transition(trigger='deployment', source='Valid', dest='Rollback_failed', after='audit')`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/421", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/421/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/421/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/421/events", "html_url": "https://github.com/pytransitions/transitions/issues/421", "id": 594601534, "node_id": "MDU6SXNzdWU1OTQ2MDE1MzQ=", "number": 421, "title": "Incorrect transition between nested states", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/13", "html_url": "https://github.com/pytransitions/transitions/milestone/13", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/13/labels", "id": 5557023, "node_id": "MDk6TWlsZXN0b25lNTU1NzAyMw==", "number": 13, "title": "0.8.2", "description": "", "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-06-18T14:34:46Z", "updated_at": "2020-06-27T16:47:44Z", "due_on": "2020-06-26T07:00:00Z", "closed_at": "2020-06-27T16:47:44Z"}, "comments": 17, "created_at": "2020-04-05T19:13:20Z", "updated_at": "2020-06-29T08:42:16Z", "closed_at": "2020-06-27T16:47:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following state machine:\r\n```python\r\nclass ServiceRestartState(Enum):\r\n    starting = auto()\r\n    stopping = auto()\r\n    stopped = auto()\r\n\r\n\r\nclass ServiceState(Enum):\r\n    initialized = auto()\r\n    starting = auto()\r\n    started = auto()\r\n    restarting = ServiceRestartState\r\n    stopping = auto()\r\n    stopped = auto()\r\n\r\n\r\nclass Service(HierarchicalAsyncMachine):\r\n    def __init__(self):\r\n        transitions = [\r\n            ['starting', [ServiceState.initialized, ServiceState.stopped], ServiceState.starting],\r\n            ['started', [ServiceState.starting, ServiceRestartState.starting], ServiceState.started],\r\n            ['restarting', ServiceState.started, 'restarting'],\r\n            ['stopping', 'restarting', ServiceRestartState.stopping],\r\n            ['stopped', ServiceRestartState.stopping, ServiceRestartState.stopped],\r\n            ['starting', ServiceRestartState.stopped, ServiceRestartState.starting],\r\n            ['stopping', ServiceState.started, ServiceState.stopping],\r\n            ['stopped', ServiceState.stopping, ServiceState.stopped],\r\n        ]\r\n        super().__init__(states=ServiceState,\r\n                         transitions=transitions,\r\n                         initial=ServiceState.initialized,\r\n                         auto_transitions=False)\r\n```\r\n\r\nIf I am currently at the stopped stage I can't transition to stopped.\r\n\r\nHowever if you do attempt to do so the `stopped` trigger will transition the state machine to `ServiceRestartState.stopped`.\r\n\r\nTry the code below:\r\n```python\r\nm = Service()\r\nm.add_transition('travel', ServiceState.initialized, ServiceState.stopped)\r\nm.travel()\r\nm.stopped()\r\n```\r\n\r\nI tried changing the name of the nested states, I tried to rename the triggers to not be the same. Nothing works.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/420", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/420/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/420/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/420/events", "html_url": "https://github.com/pytransitions/transitions/issues/420", "id": 594412373, "node_id": "MDU6SXNzdWU1OTQ0MTIzNzM=", "number": 420, "title": "Enable usage of other event loops in `AsyncMachine`", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/13", "html_url": "https://github.com/pytransitions/transitions/milestone/13", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/13/labels", "id": 5557023, "node_id": "MDk6TWlsZXN0b25lNTU1NzAyMw==", "number": 13, "title": "0.8.2", "description": "", "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 4, "state": "closed", "created_at": "2020-06-18T14:34:46Z", "updated_at": "2020-06-27T16:47:44Z", "due_on": "2020-06-26T07:00:00Z", "closed_at": "2020-06-27T16:47:44Z"}, "comments": 10, "created_at": "2020-04-05T11:38:53Z", "updated_at": "2020-06-29T08:43:12Z", "closed_at": "2020-06-27T16:44:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "[AnyIO](https://anyio.readthedocs.io/en/latest/) is a library which abstracts event loops.\r\nCurrently our implementation only supports AsyncIO but trio is also a popular event loop which we can support.\r\nAnyIO allows us to support both with ease.\r\n\r\nI can port all of the code except these lines:\r\nhttps://github.com/pytransitions/transitions/blob/9237b9e0978ad3d904d4f0e7b3d82d99a6b7e76f/transitions/extensions/asyncio.py#L125-L136\r\n\r\nI think we should be using a [CancelScope](https://anyio.readthedocs.io/en/latest/cancellation.html) but I'm not really sure how.\r\nAny feedback is appreciated.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/419", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/419/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/419/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/419/events", "html_url": "https://github.com/pytransitions/transitions/issues/419", "id": 594407194, "node_id": "MDU6SXNzdWU1OTQ0MDcxOTQ=", "number": 419, "title": "Cannot add transition to a parent state if the parent is a nested enum", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-04-05T11:27:55Z", "updated_at": "2020-06-10T17:17:31Z", "closed_at": "2020-06-10T17:15:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have the following enumeration:\r\n```python\r\nclass ServiceRestartState(Enum):\r\n    starting = auto()\r\n    stopping = auto()\r\n    stopped = auto()\r\n\r\n\r\nclass ServiceState(Enum):\r\n    initialized = auto()\r\n    starting = auto()\r\n    started = auto()\r\n    restarting = ServiceRestartState\r\n    stopping = auto()\r\n    stopped = auto()\r\n```\r\n\r\nWhen I try to transition from initialized to restarting in my test, the state machine remains on the initialized state:\r\n```python\r\nmachine = HierarchicalAsyncMachine()\r\nmachine.add_transition(\"travel\", ServiceState.initialized, ServiceState.restarting)\r\nawait machine.travel()\r\nassert not machine.is_initialized()\r\nassert machine.is_restarting() # Raises an assertion error\r\n```\r\nHowever this works correctly:\r\n```python\r\nmachine = HierarchicalAsyncMachine()\r\nmachine.add_transition(\"travel\", ServiceState.initialized, 'restarting')\r\nawait machine.travel()\r\nassert not machine.is_initialized()\r\nassert machine.is_restarting()\r\n```\r\n\r\nThis is because the name of the state is the name of the enum's key.\r\nhttps://github.com/pytransitions/transitions/blob/ddd0709af13e007c9cd8dd56fda77dbc51f90f60/transitions/extensions/nesting.py#L419-L420\r\n\r\nI think the fix is to take the entire object instead but I'm not sure.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/417", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/417/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/417/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/417/events", "html_url": "https://github.com/pytransitions/transitions/issues/417", "id": 593950969, "node_id": "MDU6SXNzdWU1OTM5NTA5Njk=", "number": 417, "title": "Passing arguments dict_keys(['add_self']) to Machine() caused an inheritance error", "user": {"login": "xiaohuihui1024", "id": 20126304, "node_id": "MDQ6VXNlcjIwMTI2MzA0", "avatar_url": "https://avatars1.githubusercontent.com/u/20126304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuihui1024", "html_url": "https://github.com/xiaohuihui1024", "followers_url": "https://api.github.com/users/xiaohuihui1024/followers", "following_url": "https://api.github.com/users/xiaohuihui1024/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuihui1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuihui1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuihui1024/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuihui1024/orgs", "repos_url": "https://api.github.com/users/xiaohuihui1024/repos", "events_url": "https://api.github.com/users/xiaohuihui1024/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuihui1024/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-04T17:03:25Z", "updated_at": "2020-05-17T14:18:14Z", "closed_at": "2020-05-17T14:18:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, @aleneum \r\nUsing:\r\ntransitions 0.8.0+\r\n\r\nThe [alternative-initialization-patterns](https://github.com/pytransitions/transitions#alternative-initialization-patterns) section of the documentation\r\n  has the following code\uff1a\r\n```python\r\nfrom transitions import Machine\r\nclass Matter():\r\n    pass\r\n\r\nlump1 = Matter()\r\nlump2 = Matter()\r\n\r\nmachine = Machine(states=states, transitions=transitions, initial='solid', add_self=False)\r\n\r\nmachine.add_model(lump1)\r\nmachine.add_model(lump2, initial='liquid')\r\n\r\nlump1.state  # 'solid'\r\nlump2.state  # 'liquid'\r\n\r\nmachine.remove_model([lump1, lump2])\r\ndel lump1  # lump1 is garbage collected\r\ndel lump2  # lump2 is garbage collected\r\n```\r\nThe `add_self` parameter in the machine initialization parameters may be invalid, it will cause an error\r\n\r\n```\r\nTypeError                                 Traceback (most recent call last)\r\n~/anaconda3/lib/python3.7/site-packages/transitions/core.py in __init__(self, model, states, initial, transitions, send_event, auto_transitions, ordered_transitions, ignore_invalid_triggers, before_state_change, after_state_change, name, queued, prepare_event, finalize_event, model_attribute, **kwargs)\r\n    533         try:\r\n--> 534             super(Machine, self).__init__(**kwargs)\r\n    535         except TypeError as err:\r\n\r\nTypeError: object.__init__() takes exactly one argument (the instance to initialize)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-d3b64a9ef538> in <module>\r\n      6 lump2 = Matter()\r\n      7 \r\n----> 8 machine = Machine(states=states, transitions=transitions, initial='solid', add_self=False)\r\n      9 \r\n     10 machine.add_model(lump1)\r\n\r\n~/anaconda3/lib/python3.7/site-packages/transitions/core.py in __init__(self, model, states, initial, transitions, send_event, auto_transitions, ordered_transitions, ignore_invalid_triggers, before_state_change, after_state_change, name, queued, prepare_event, finalize_event, model_attribute, **kwargs)\r\n    534             super(Machine, self).__init__(**kwargs)\r\n    535         except TypeError as err:\r\n--> 536             raise ValueError('Passing arguments {0} caused an inheritance error: {1}'.format(kwargs.keys(), err))\r\n    537 \r\n    538         # initialize protected attributes first\r\n\r\nValueError: Passing arguments dict_keys(['add_self']) caused an inheritance error: object.__init__() takes exactly one argument (the instance to initialize)\r\n```\r\n\r\n**I don\u2019t quite understand how to use `add_self` correctly**\r\n\r\n**In addition**, this part of the document mentions:\r\n\r\n> If you don't provide an initial state in the state machine constructor, you must provide one every time you add a model:\r\n> ```python\r\n> machine = Machine(states=states, transitions=transitions, add_self=False)\r\n> machine.add_model(Matter())\r\n> >>> \"MachineError: No initial state configured for machine, must specify when adding model.\"\r\n> machine.add_model(Matter(), initial='liquid')\r\n> ```\r\n\r\nI can understand the meaning of the sample code, but in fact it does not work like the above code.\r\n\r\n```python\r\n# my sample code\r\nfrom transitions import Machine\r\nstates=['solid', 'liquid', 'gas', 'plasma']\r\ntransitions = [\r\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid' },  # \u7194\u5316\uff1a\u56fa\u6001->\u6db2\u6001\r\n    { 'trigger': 'evaporate', 'source': 'liquid', 'dest': 'gas' },  # \u84b8\u53d1\uff1a\u6db2\u6001->\u6c14\u6001\r\n    { 'trigger': 'sublimate', 'source': 'solid', 'dest': 'gas' },  # \u5347\u534e\uff1a \u56fa\u6001->\u6c14\u6001\r\n    { 'trigger': 'ionize', 'source': 'gas', 'dest': 'plasma' }  # \u7535\u79bb\uff1a\u6c14\u6001->\u7b49\u79bb\u5b50\u4f53\r\n]\r\nclass Matter():\r\n    pass\r\n# Not working properly due to the above reasons\r\n# machine = Machine(states=states, transitions=transitions, add_self=False)\r\n\r\n# Remove the add_self parameter\r\nmachine = Machine(states=states, transitions=transitions)\r\n\r\nmachine.add_model(Matter())\r\n```\r\n`machine`  has no an initial state (at least not specified in the initialization parameters). \r\n`machine.add_model(Matter()) ` also did not specify an initial state for `Matter()`\r\nIt didn't occur the error in the document example, but it works normally.\r\n\r\nI try to verify what the initial state of the model is\uff1a\r\n\r\n```python\r\nmachine.models[0].state\r\n```\r\nThe result is as follows\r\n```\r\n'initial'\r\n```\r\nI guess it should be added to the `initial` state **by default**\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/414", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/414/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/414/events", "html_url": "https://github.com/pytransitions/transitions/issues/414", "id": 593351187, "node_id": "MDU6SXNzdWU1OTMzNTExODc=", "number": 414, "title": "HierarchicalMachine cannot add state of type State.", "user": {"login": "xiaohuihui1024", "id": 20126304, "node_id": "MDQ6VXNlcjIwMTI2MzA0", "avatar_url": "https://avatars1.githubusercontent.com/u/20126304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuihui1024", "html_url": "https://github.com/xiaohuihui1024", "followers_url": "https://api.github.com/users/xiaohuihui1024/followers", "following_url": "https://api.github.com/users/xiaohuihui1024/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuihui1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuihui1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuihui1024/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuihui1024/orgs", "repos_url": "https://api.github.com/users/xiaohuihui1024/repos", "events_url": "https://api.github.com/users/xiaohuihui1024/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuihui1024/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-03T12:35:10Z", "updated_at": "2020-04-04T09:03:07Z", "closed_at": "2020-04-04T09:03:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi @aleneum \r\nUsing:\r\nWindows 10 64 bit\r\nPython 3.7.4 (Anaconda)\r\ntransitions 0.8.1\r\nGraphviz 2.38.0 (binary)\r\ngraphviz 0.13.2 (python package)\r\n\r\nI found a issue that HierarchicalMachine  cannot add state of type State.\r\n\r\n```python\r\nfrom transitions.extensions.factory import HierarchicalGraphMachine, HierarchicalMachine\r\nfrom transitions import Machine\r\nclass Matter(object):\r\n    def say_hello(self): print(\"hello, new state!\")\r\n    def say_goodbye(self): print(\"goodbye, old state!\")\r\n\r\nlump = Matter()\r\n\r\nstates = [\r\n    State(name='solid', on_exit=['say_goodbye']), \r\n    'liquid',\r\n    { 'name': 'gas' }\r\n    ]\r\nm1 = HierarchicalMachine(lump, states=states)\r\n```\r\n`'solid'` state is an instance of the State class\r\n\r\nThe error output is as follows\r\n\r\n```log\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-18-f8fcfa6ee343> in <module>\r\n     20 ]\r\n     21 # machine = GraphMachine(states=states, transitions=transitions, initial='Waiting for Sending SignIn Package',**extra_args)\r\n---> 22 machine1 = HierarchicalMachine(states=states, transitions=transitions, initial='Waiting for Sending SignIn Package')\r\n\r\nC:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\nesting.py in __init__(self, *args, **kwargs)\r\n    337         self._stack = []\r\n    338         self.scoped = self\r\n--> 339         _super(HierarchicalMachine, self).__init__(*args, **kwargs)\r\n    340 \r\n    341     def __call__(self, to_scope=None):\r\n\r\nC:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\core.py in __init__(self, model, states, initial, transitions, send_event, auto_transitions, ordered_transitions, ignore_invalid_triggers, before_state_change, after_state_change, name, queued, prepare_event, finalize_event, model_attribute, **kwargs)\r\n    560 \r\n    561         if states is not None:\r\n--> 562             self.add_states(states)\r\n    563 \r\n    564         if initial is not None:\r\n\r\nC:\\Anaconda\\Lib\\site-packages\\transitions-0.8.1-py3.7.egg\\transitions\\extensions\\nesting.py in add_states(self, states, on_enter, on_exit, ignore_invalid_triggers, **kwargs)\r\n    498                     self.scoped.initial = state.initial\r\n    499             else:\r\n--> 500                 raise ValueError(\"Cannot add state of type {0}.\".format(type(state).__name__))\r\n    501 \r\n    502     def add_transition(self, trigger, source, dest, conditions=None,\r\n\r\nValueError: Cannot add state of type State.\r\n```\r\n\r\nUsing HierarchicalGraphMachine will have the same issue\r\n\r\n```python\r\nm2 = HierarchicalGraphMachine(lump, states=states)\r\n```\r\n\r\nBut using Machine can work normally\r\n```python\r\nmachine = Machine(lump, states=states)\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/413", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/413/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/413/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/413/events", "html_url": "https://github.com/pytransitions/transitions/issues/413", "id": 591642490, "node_id": "MDU6SXNzdWU1OTE2NDI0OTA=", "number": 413, "title": "HierarchicalGraphMachine bug: transitions defined in 'parallel' or 'children' cannot be displayed in the graph, but it works", "user": {"login": "xiaohuihui1024", "id": 20126304, "node_id": "MDQ6VXNlcjIwMTI2MzA0", "avatar_url": "https://avatars1.githubusercontent.com/u/20126304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaohuihui1024", "html_url": "https://github.com/xiaohuihui1024", "followers_url": "https://api.github.com/users/xiaohuihui1024/followers", "following_url": "https://api.github.com/users/xiaohuihui1024/following{/other_user}", "gists_url": "https://api.github.com/users/xiaohuihui1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaohuihui1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaohuihui1024/subscriptions", "organizations_url": "https://api.github.com/users/xiaohuihui1024/orgs", "repos_url": "https://api.github.com/users/xiaohuihui1024/repos", "events_url": "https://api.github.com/users/xiaohuihui1024/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaohuihui1024/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-01T05:43:55Z", "updated_at": "2020-04-02T21:19:31Z", "closed_at": "2020-04-02T21:19:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using:\r\nWindows 10 64 bit\r\nPython 3.7.4 (Anaconda)\r\ntransitions 0.8.0\r\nGraphviz 2.38.0 (binary)\r\ngraphviz 0.13.2 (python package)\r\n\r\nThe following code is from `README.md` and changes `HierarchicalMachine` to `HierarchicalGraphMachine` because I want to visualize parallel HSM\r\n\r\n```python\r\nfrom transitions.extensions.factory import HierarchicalGraphMachine as Machine\r\nimport logging\r\nstates = ['A', 'B', {'name': 'C', 'parallel': [{'name': '1', 'children': ['a', 'b', 'c'], 'initial': 'a',\r\n                                                'transitions': [['go', 'a', 'b']]},\r\n                                               {'name': '2', 'children': ['x', 'y', 'z'], 'initial': 'z'}],\r\n                      'transitions': [['go', '2_z', '2_x']]}]\r\n\r\ntransitions = [['reset', 'C_1_b', 'B']]\r\nlogging.basicConfig(level=logging.INFO)\r\nextra_args = dict(show_conditions=True, show_state_attributes=True, use_pygraphviz=False)\r\nmachine = Machine(states=states, transitions=transitions, initial='A',**extra_args)\r\nmachine.get_graph().draw('my_state_diagram', format='png')\r\n```\r\nThis produces the graph like this:\r\n\r\n![my_state_diagram](https://user-images.githubusercontent.com/20126304/78100985-a84ee000-7418-11ea-9218-3b18f5dd28ba.png)\r\n\r\nNote: The transition from `C_1_a` to `C_1_b` is not shown, but it is defined in `states`\r\n\r\nthen I try the following triggers:\r\n\r\n```python\r\nmachine.to_C()\r\n```\r\n```\r\nINFO:transitions.extensions.nesting:Exited state A\r\nINFO:transitions.extensions.nesting:Entered state C\r\nINFO:transitions.extensions.nesting:Entered state C_1\r\nINFO:transitions.extensions.nesting:Entered state C_2\r\nINFO:transitions.extensions.nesting:Entered state C_1_a\r\nINFO:transitions.extensions.nesting:Entered state C_2_z\r\n```\r\n```python\r\nmachine.go()\r\nmachine.get_graph()\r\n```\r\n```\r\nINFO:transitions.extensions.nesting:Exited state C_1_a\r\nINFO:transitions.extensions.nesting:Entered state C_1_b\r\nINFO:transitions.extensions.nesting:Exited state C_2_z\r\nINFO:transitions.extensions.nesting:Entered state C_2_x\r\n```\r\n![my_state_diagram1](https://user-images.githubusercontent.com/20126304/78101969-af2b2200-741b-11ea-9ec0-5d7975081c77.png)\r\n\r\nIt can be found from the log output that `C_1_a`-> `C_1_b` did occur, but it **cannot** be displayed in the graph.\r\n\r\nChanging the `states` definition in the above code to the following also happens.\r\n```python\r\nstates = ['A', 'B', {'name': 'C', 'children': [{'name': '1', 'children': ['a', 'b', 'c'], 'initial': 'a',\r\n                                                'transitions': [['go', 'a', 'b']]},\r\n                                               {'name': '2', 'children': ['x', 'y', 'z'], 'initial': 'z'}],\r\n                      'transitions': [['go', '2_z', '2_x']]}]\r\n```\r\n\r\n**Is this expected behavior ?**", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/412", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/412/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/412/events", "html_url": "https://github.com/pytransitions/transitions/issues/412", "id": 590406724, "node_id": "MDU6SXNzdWU1OTA0MDY3MjQ=", "number": 412, "title": "Model state tree does serialize nested parallel states only when they are the first child.", "user": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/12", "html_url": "https://github.com/pytransitions/transitions/milestone/12", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/12/labels", "id": 5240767, "node_id": "MDk6TWlsZXN0b25lNTI0MDc2Nw==", "number": 12, "title": "0.8.1", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2020-03-26T15:49:10Z", "updated_at": "2020-04-04T09:10:29Z", "due_on": null, "closed_at": "2020-04-04T09:10:29Z"}, "comments": 0, "created_at": "2020-03-30T16:01:26Z", "updated_at": "2020-04-02T21:14:51Z", "closed_at": "2020-04-02T21:14:50Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\ntree = {\r\n    'P': {\r\n        '1': {},\r\n        '2': {\r\n            'a': {},\r\n            'b': {\r\n                'x': {\r\n                    '1': {},\r\n                    '2': {}\r\n                },\r\n                'y': {}\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Expected:\r\n\r\n```python\r\n['P_1', ['P_2_a', [['P_2_b_x_1', 'P_2_b_x_2'], 'P_2_b_y']]]\r\n```\r\n\r\n#### Actual\r\n\r\n```python\r\n'P_1'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/411", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/411/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/411/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/411/events", "html_url": "https://github.com/pytransitions/transitions/issues/411", "id": 589737517, "node_id": "MDU6SXNzdWU1ODk3Mzc1MTc=", "number": 411, "title": "Tests depend on order of execution", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-29T07:28:17Z", "updated_at": "2020-04-02T21:21:56Z", "closed_at": "2020-04-02T21:21:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I verified this by running the test suite with [`pytest-randomly`](https://github.com/pytest-dev/pytest-randomly).\r\n\r\nWe cannot currently include this plugin in CI because of https://github.com/pytest-dev/pytest-xdist/issues/472.\r\n\r\nThe following tests randomly fail when the execution order is not correct:\r\n\r\n1)\r\n```\r\n_________________________ TestWithGraphTransitions.test_pickle _________________________\r\n\r\nself = <tests.test_nesting.TestWithGraphTransitions testMethod=test_pickle>\r\n\r\n    def test_pickle(self):\r\n        import sys\r\n        if sys.version_info < (3, 4):\r\n            import dill as pickle\r\n        else:\r\n            import pickle\r\n\r\n        states = ['A', 'B', {'name': 'C', 'children': ['1', '2', {'name': '3', 'children': ['a', 'b', 'c']}]},\r\n                  'D', 'E', 'F']\r\n        transitions = [\r\n            {'trigger': 'walk', 'source': 'A', 'dest': 'B'},\r\n            {'trigger': 'run', 'source': 'B', 'dest': 'C'},\r\n            {'trigger': 'sprint', 'source': 'C', 'dest': 'D'}\r\n        ]\r\n        m = self.stuff.machine_cls(states=states, transitions=transitions, initial='A')\r\n        m.walk()\r\n        dump = pickle.dumps(m)\r\n        self.assertIsNotNone(dump)\r\n        m2 = pickle.loads(dump)\r\n        self.assertEqual(m.state, m2.state)\r\n        m2.run()\r\n>       m2.to_C_3_a()\r\n\r\ntests/test_nesting.py:397:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <transitions.extensions.factory.HierarchicalGraphMachine object at 0x7ffb92122490>\r\nname = 'to_C_3_a'\r\n\r\n    def __getattr__(self, name):\r\n        # Machine.__dict__ does not contain double underscore variables.\r\n        # Class variables will be mangled.\r\n        if name.startswith('__'):\r\n            raise AttributeError(\"'{}' does not exist on <Machine@{}>\"\r\n                                 .format(name, id(self)))\r\n\r\n        # Could be a callback\r\n        callback_type, target = self._identify_callback(name)\r\n\r\n        if callback_type is not None:\r\n            if callback_type in self.transition_cls.dynamic_methods:\r\n                if target not in self.events:\r\n                    raise AttributeError(\"event '{}' is not registered on <Machine@{}>\"\r\n                                         .format(target, id(self)))\r\n                return partial(self.events[target].add_callback, callback_type)\r\n\r\n            elif callback_type in self.state_cls.dynamic_methods:\r\n                state = self.get_state(target)\r\n                return partial(state.add_callback, callback_type[3:])\r\n\r\n        # Nothing matched\r\n>       raise AttributeError(\"'{}' does not exist on <Machine@{}>\".format(name, id(self)))\r\nE       AttributeError: 'to_C_3_a' does not exist on <Machine@140718464181392>\r\n\r\ntransitions/core.py:1171: AttributeError\r\n```\r\n2)\r\n```\r\n__________________________ TestTransitions.test_wrong_nesting __________________________\r\n\r\nself = <tests.test_reuse.TestTransitions testMethod=test_wrong_nesting>\r\n\r\n    def test_wrong_nesting(self):\r\n\r\n        correct = ['A', {'name': 'B', 'children': self.stuff.machine}]\r\n        wrong_type = ['A', {'name': 'B', 'children': self.stuff}]\r\n        siblings = ['A', {'name': 'B', 'children': ['1', self.stuff.machine]}]\r\n        collision = ['A', {'name': 'B', 'children': ['A', self.stuff.machine]}]\r\n\r\n>       m = self.machine_cls(states=correct)\r\n\r\ntests/test_reuse.py:144:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ntransitions/extensions/nesting.py:342: in __init__\r\n    _super(HierarchicalMachine, self).__init__(*args, **kwargs)\r\ntransitions/core.py:574: in __init__\r\n    self.add_model(model)\r\ntransitions/extensions/nesting.py:374: in add_model\r\n    _super(HierarchicalMachine, self).add_model(models, initial=initial)\r\ntransitions/core.py:595: in add_model\r\n    self._add_model_to_state(state, mod)\r\ntransitions/extensions/nesting.py:689: in _add_model_to_state\r\n    self._add_model_to_state(state, model)\r\ntransitions/extensions/nesting.py:681: in _add_model_to_state\r\n    if hasattr(model, method) and inspect.ismethod(getattr(model, method)) and \\\r\ntransitions/core.py:1167: in __getattr__\r\n    state = self.get_state(target)\r\ntransitions/extensions/nesting.py:555: in get_state\r\n    return self.get_state(state, hint)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <transitions.extensions.nesting.HierarchicalMachine object at 0x7f1d7b5f2d30>\r\nstate = ['A'], hint = ['B', 'A']\r\n\r\n    def get_state(self, state, hint=None):\r\n        \"\"\" Return the State instance with the passed name. \"\"\"\r\n        if isinstance(state, Enum):\r\n            state = [state.name]\r\n        elif isinstance(state, string_types):\r\n            state = state.split(self.state_cls.separator)\r\n        if not hint:\r\n            state = copy.copy(state)\r\n            hint = copy.copy(state)\r\n        if len(state) > 1:\r\n            child = state.pop(0)\r\n            try:\r\n                with self(child):\r\n                    return self.get_state(state, hint)\r\n            except KeyError:\r\n                with self():\r\n                    state = self\r\n                    for elem in hint:\r\n                        state = state.states[elem]\r\n                return state\r\n        elif state[0] not in self.states:\r\n>           raise ValueError(\"State '%s' is not a registered state.\" % state)\r\nE           ValueError: State '['A']' is not a registered state.\r\n\r\ntransitions/extensions/nesting.py:563: ValueError\r\n```\r\n3)\r\n```\r\n_________________________ TestTransitions.test_blueprint_reuse _________________________\r\n\r\nself = <tests.test_reuse.TestTransitions testMethod=test_blueprint_reuse>\r\n\r\n    def test_blueprint_reuse(self):\r\n        State = self.state_cls\r\n        states = ['1', '2', '3']\r\n        transitions = [\r\n            {'trigger': 'increase', 'source': '1', 'dest': '2'},\r\n            {'trigger': 'increase', 'source': '2', 'dest': '3'},\r\n            {'trigger': 'decrease', 'source': '3', 'dest': '2'},\r\n            {'trigger': 'decrease', 'source': '1', 'dest': '1'},\r\n            {'trigger': 'reset', 'source': '*', 'dest': '1'},\r\n        ]\r\n\r\n        counter = self.machine_cls(states=states, transitions=transitions, before_state_change='check',\r\n                                   after_state_change='clear', initial='1')\r\n\r\n        new_states = ['A', 'B', {'name': 'C', 'children': counter}]\r\n        new_transitions = [\r\n            {'trigger': 'forward', 'source': 'A', 'dest': 'B'},\r\n            {'trigger': 'forward', 'source': 'B', 'dest': 'C%s1' % State.separator},\r\n            {'trigger': 'backward', 'source': 'C', 'dest': 'B'},\r\n            {'trigger': 'backward', 'source': 'B', 'dest': 'A'},\r\n            {'trigger': 'calc', 'source': '*', 'dest': 'C'},\r\n        ]\r\n\r\n        walker = self.machine_cls(states=new_states, transitions=new_transitions, before_state_change='watch',\r\n                                  after_state_change='look_back', initial='A')\r\n\r\n        walker.watch = lambda: 'walk'\r\n        walker.look_back = lambda: 'look_back'\r\n        walker.check = lambda: 'check'\r\n        walker.clear = lambda: 'clear'\r\n\r\n        with self.assertRaises(MachineError):\r\n            walker.increase()\r\n        self.assertEqual(walker.state, 'A')\r\n        walker.forward()\r\n        walker.forward()\r\n        self.assertEqual(walker.state, 'C%s1' % State.separator)\r\n        walker.increase()\r\n        self.assertEqual(walker.state, 'C%s2' % State.separator)\r\n        walker.reset()\r\n        self.assertEqual(walker.state, 'C%s1' % State.separator)\r\n        walker.to_A()\r\n        self.assertEqual(walker.state, 'A')\r\n        walker.calc()\r\n>       self.assertEqual(walker.state, 'C_1')\r\nE       AssertionError: 'C.1' != 'C_1'\r\nE       - C.1\r\nE       ?  ^\r\nE       + C_1\r\nE       ?  ^\r\n\r\ntests/test_reuse.py:73: AssertionError\r\n```\r\n\r\nThese are just the tests I managed to fail in a somewhat reproducible way.\r\nTests should never depend on order as they might incorrectly fail the build.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/409", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/409/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/409/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/409/events", "html_url": "https://github.com/pytransitions/transitions/issues/409", "id": 588496744, "node_id": "MDU6SXNzdWU1ODg0OTY3NDQ=", "number": 409, "title": "How to pass arguments to a transition?", "user": {"login": "noamzilo", "id": 4740186, "node_id": "MDQ6VXNlcjQ3NDAxODY=", "avatar_url": "https://avatars1.githubusercontent.com/u/4740186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noamzilo", "html_url": "https://github.com/noamzilo", "followers_url": "https://api.github.com/users/noamzilo/followers", "following_url": "https://api.github.com/users/noamzilo/following{/other_user}", "gists_url": "https://api.github.com/users/noamzilo/gists{/gist_id}", "starred_url": "https://api.github.com/users/noamzilo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noamzilo/subscriptions", "organizations_url": "https://api.github.com/users/noamzilo/orgs", "repos_url": "https://api.github.com/users/noamzilo/repos", "events_url": "https://api.github.com/users/noamzilo/events{/privacy}", "received_events_url": "https://api.github.com/users/noamzilo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-26T15:12:27Z", "updated_at": "2020-03-26T17:10:57Z", "closed_at": "2020-03-26T17:10:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://stackoverflow.com/questions/60856982/python-transitions-library-how-to-pass-argumnets-to-a-transition\r\n\r\nIt is not clear to me from the doc, or I can't find it.\r\nHow do I pass an argument to a transition?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/408", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/408/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/408/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/408/events", "html_url": "https://github.com/pytransitions/transitions/issues/408", "id": 588225054, "node_id": "MDU6SXNzdWU1ODgyMjUwNTQ=", "number": 408, "title": "Travis CI does not appear in PR checks", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-26T07:57:05Z", "updated_at": "2020-04-01T09:28:36Z", "closed_at": "2020-03-31T17:33:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It's harder to contribute when you don't know the build status after you open a PR.\r\nPlease investigate.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/404", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/404/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/404/events", "html_url": "https://github.com/pytransitions/transitions/issues/404", "id": 587854311, "node_id": "MDU6SXNzdWU1ODc4NTQzMTE=", "number": 404, "title": "Support for nested states from nested Enums", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-25T17:11:13Z", "updated_at": "2020-04-02T21:21:37Z", "closed_at": "2020-04-02T21:21:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Consider the following Enum:\r\n```python\r\nfrom enum import Enum, auto\r\nclass Foo(Enum):\r\n  A = auto()\r\n  B = auto()\r\n\r\nclass Bar(Enum):\r\n  FOO = Foo\r\n  C = auto()\r\n```\r\n\r\nIf we were to provide `Bar` to a `HierarchicalMachine` I'd expect it to take all the items in Foo as children of the Foo state.\r\n\r\nHowever this is not the case:\r\n```\r\nIn[18]: from transitions.extensions import HierarchicalMachine\r\nIn[19]: HierarchicalMachine(states=Bar)\r\nOut[19]: <transitions.extensions.nesting.HierarchicalMachine at 0x7f517ea75d90>\r\nIn[20]: machine = HierarchicalMachine(states=Bar)\r\nIn[21]: machine.states\r\nOut[21]: \r\nOrderedDict([('FOO', <NestedState('FOO')@139987994034720>),\r\n             ('C', <NestedState('C')@139987994035296>),\r\n             ('initial', <NestedState('initial')@139987994035200>)])\r\nIn[22]: machine.states['FOO']\r\nOut[22]: <NestedState('FOO')@139987994034720>\r\nIn[23]: machine.states['FOO'].states\r\nOut[23]: OrderedDict()\r\n```\r\n\r\nThis can be easily added if I am not wrong.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/402", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/402/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/402/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/402/events", "html_url": "https://github.com/pytransitions/transitions/issues/402", "id": 587519837, "node_id": "MDU6SXNzdWU1ODc1MTk4Mzc=", "number": 402, "title": "0.8 bug: nested state cannot be initial state", "user": {"login": "caha321", "id": 61871680, "node_id": "MDQ6VXNlcjYxODcxNjgw", "avatar_url": "https://avatars0.githubusercontent.com/u/61871680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caha321", "html_url": "https://github.com/caha321", "followers_url": "https://api.github.com/users/caha321/followers", "following_url": "https://api.github.com/users/caha321/following{/other_user}", "gists_url": "https://api.github.com/users/caha321/gists{/gist_id}", "starred_url": "https://api.github.com/users/caha321/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caha321/subscriptions", "organizations_url": "https://api.github.com/users/caha321/orgs", "repos_url": "https://api.github.com/users/caha321/repos", "events_url": "https://api.github.com/users/caha321/events{/privacy}", "received_events_url": "https://api.github.com/users/caha321/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-25T08:16:56Z", "updated_at": "2020-03-25T16:27:53Z", "closed_at": "2020-03-25T16:17:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "minimal example (slightly modified example of the documentation):\r\n\r\n```\r\nfrom transitions.extensions import HierarchicalMachine as Machine\r\n\r\nstates = ['A', 'B',\r\n  {'name': 'C', 'children':['1', '2',\r\n    {'name': '3', 'children': ['a', 'b', 'c']}\r\n  ]}\r\n]\r\n\r\ntransitions = [\r\n    ['reset', 'C', 'A']\r\n]\r\n\r\n# we rely on auto transitions\r\nmachine = Machine(states=states, transitions=transitions, initial='C_1')\r\n```\r\n\r\nResult:\r\n\r\n> ValueError: State 1 cannot be added since it already exists.\r\n\r\nIn version 0.7.2 this worked perfectly fine", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/401", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/401/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/401/events", "html_url": "https://github.com/pytransitions/transitions/issues/401", "id": 587440783, "node_id": "MDU6SXNzdWU1ODc0NDA3ODM=", "number": 401, "title": "AsyncGraphMachine returns `True` whether or not conditions fail", "user": {"login": "kbinpgh", "id": 6920393, "node_id": "MDQ6VXNlcjY5MjAzOTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6920393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbinpgh", "html_url": "https://github.com/kbinpgh", "followers_url": "https://api.github.com/users/kbinpgh/followers", "following_url": "https://api.github.com/users/kbinpgh/following{/other_user}", "gists_url": "https://api.github.com/users/kbinpgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbinpgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbinpgh/subscriptions", "organizations_url": "https://api.github.com/users/kbinpgh/orgs", "repos_url": "https://api.github.com/users/kbinpgh/repos", "events_url": "https://api.github.com/users/kbinpgh/events{/privacy}", "received_events_url": "https://api.github.com/users/kbinpgh/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-25T04:51:48Z", "updated_at": "2020-03-26T03:34:38Z", "closed_at": "2020-03-26T03:34:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "This example has a condition for the transition labelled `reset`. calling the `reset()` trigger returns `True` whether or not the transition's condition callback check failed/passed.\r\n\r\n```\r\nfrom transitions.extensions import MachineFactory\r\nfrom enum import Enum, auto\r\nimport time\r\nfrom IPython.display import Image, display, display_png\r\nimport os, sys, inspect, io, asyncio\r\nimport logging\r\n\r\nclass State(Enum):\r\n    START = auto(),\r\n    ONE = auto(),\r\n    TWO = auto(),\r\n    THREE = auto(),\r\n\r\nclass Model(object):\r\n    transition_1 = dict(\r\n        trigger='one',\r\n        source=State.START,\r\n        dest=State.ONE,\r\n        before='before',\r\n        after='after',\r\n    )\r\n\r\n    transition_2 = dict(\r\n        trigger='two',\r\n        source=State.ONE,\r\n        dest=State.TWO,\r\n        before='before',\r\n        after='after',\r\n    )\r\n\r\n    transition_3 = dict(\r\n        trigger='three',\r\n        source=State.TWO,\r\n        dest=State.THREE,\r\n        before='before',\r\n        after='after',\r\n    )\r\n\r\n    transition_0 = dict(\r\n        trigger='reset',\r\n        source=State.THREE,\r\n        dest=State.START,\r\n        before='before',\r\n        after='after',\r\n        conditions='sooner_than',\r\n    )\r\n\r\n    def __init__(self):\r\n        self.start_time = None\r\n        machine = MachineFactory.get_predefined(graph=True, asyncio=True)(\r\n            model=self,\r\n            states = [v for v in State],\r\n            transitions = [\r\n                self.transition_0, \r\n                self.transition_1, \r\n                self.transition_2, \r\n                self.transition_3\r\n            ],\r\n            queued = True,\r\n        )\r\n\r\n    def start(self):\r\n        self.cycles = 0\r\n        self.start_time = time.time()\r\n        print(f\"{time.time()}> started\")\r\n        \r\n    async def after(self, which=None):\r\n        print(f\"{time.time()}> After transition. which={which}, model={self}\")\r\n        if which == 'one':\r\n            #start_time = time.time()\r\n            await self.two(which='two')\r\n        if which == 'two':\r\n            #start_time = time.time()\r\n            await self.three(which='three')\r\n        if which == 'three':\r\n            #start_time = time.time()\r\n            result = await self.reset(which='reset')\r\n            print(f\"reset returned {result}\")\r\n        if which == 'reset':\r\n            #start_time = time.time()\r\n            await self.one(which='one')\r\n            \r\n    async def before(self, which=None):\r\n        print(f\"{time.time()}> Before transition {which}\")\r\n        if which == 'reset':\r\n            end_time = time.time()\r\n            print(f\"Reset at {end_time} in {end_time-self.start_time}s\") \r\n            self.cycles += 1\r\n        \r\n    async def sooner_than(self, which=None):\r\n        duration = time.time()-self.start_time\r\n        print(f\"{duration}s elapsed\")\r\n        return duration < 0.0\r\n\r\nasync def main():\r\n    model = Model()\r\n\r\n    logging.basicConfig(level=logging.DEBUG)\r\n\r\n    await model.to_START()\r\n    model.start()\r\n    await model.one(which='one')\r\n\r\n    await asyncio.sleep(4)\r\n\r\n    assert model.is_THREE()\r\n\r\n    result = await model.reset(which='reset')\r\n    print(f\"reset returned :{result}\")\r\n\r\n    print(model.cycles)\r\nasyncio.run(main())\r\n```\r\n\r\na snippet of the Ooutput (with log level set to DEBUG):\r\n```\r\nDEBUG:transitions.extensions.asyncio:Initiating transition from state THREE to state START...\r\nDEBUG:transitions.extensions.asyncio:Executed callbacks before conditions.\r\n4.008964776992798s elapsed\r\nDEBUG:transitions.extensions.asyncio:Transition condition failed: Transition halted.\r\nDEBUG:transitions.extensions.asyncio:Executed machine finalize callbacks\r\nreset returned :True\r\n0\r\n```\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/400", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/400/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/400/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/400/events", "html_url": "https://github.com/pytransitions/transitions/issues/400", "id": 587407649, "node_id": "MDU6SXNzdWU1ODc0MDc2NDk=", "number": 400, "title": "AsyncGraphMachine cannot be initialized with Enums as states in 0.8.0", "user": {"login": "kbinpgh", "id": 6920393, "node_id": "MDQ6VXNlcjY5MjAzOTM=", "avatar_url": "https://avatars1.githubusercontent.com/u/6920393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kbinpgh", "html_url": "https://github.com/kbinpgh", "followers_url": "https://api.github.com/users/kbinpgh/followers", "following_url": "https://api.github.com/users/kbinpgh/following{/other_user}", "gists_url": "https://api.github.com/users/kbinpgh/gists{/gist_id}", "starred_url": "https://api.github.com/users/kbinpgh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kbinpgh/subscriptions", "organizations_url": "https://api.github.com/users/kbinpgh/orgs", "repos_url": "https://api.github.com/users/kbinpgh/repos", "events_url": "https://api.github.com/users/kbinpgh/events{/privacy}", "received_events_url": "https://api.github.com/users/kbinpgh/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-25T03:01:01Z", "updated_at": "2020-03-25T17:29:22Z", "closed_at": "2020-03-25T17:29:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following snippet of code throws an error when trying to initialize an `AsyncGraphMachine`\r\n\r\n```\r\nfrom transitions.extensions import MachineFactory\r\nfrom enum import Enum, auto\r\nimport time\r\n\r\nclass State(Enum):\r\n    START = auto(),\r\n    ONE = auto(),\r\n    TWO = auto(),\r\n    THREE = auto(),\r\n\r\ndef before(which=None, future=None):\r\n    global start_time\r\n    print(f\"Before transition{which}\")\r\n    if which == 'one':\r\n        start_time = time.time()\r\n    \r\ndef after(which=None):\r\n    global start_time\r\n    print(f\"After transition{which}\")\r\n    if which == 'reset':\r\n        end_time = time.time()\r\n        print(f\"Done at {end_time} in {end_time-start_time}s\")    \r\n    \r\ntransition_1 = dict(\r\n    trigger='one',\r\n    source=State.START,\r\n    dest=State.ONE,\r\n    before=before,\r\n    after=after,\r\n)\r\n\r\ntransition_2 = dict(\r\n    trigger='two',\r\n    source=State.ONE,\r\n    dest=State.TWO,\r\n    before=before,\r\n    after=after,\r\n)\r\n\r\ntransition_3 = dict(\r\n    trigger='three',\r\n    source=State.TWO,\r\n    dest=State.THREE,\r\n    before=before,\r\n    after=after,\r\n)\r\n\r\ntransition_0 = dict(\r\n    trigger='reset',\r\n    source=State.THREE,\r\n    dest=State.START,\r\n    before=before,\r\n    after=after,\r\n)\r\n\r\nclass Model(object):\r\n    pass\r\n\r\nglobal start_time\r\nstart_time = None\r\nmodel = Model()\r\n        \r\nmachine = MachineFactory.get_predefined(graph=True, asyncio=True)(\r\n    model=model,\r\n    states = [v for v in State],\r\n    transitions = [transition_0, transition_1, transition_2, transition_3],\r\n    queued = True,\r\n    initial = State.START,\r\n)\r\n```\r\n\r\nIf the line: `initial = State.START,` is commented out, there is no error thrown, but a default, unconnected inital state is created in the machine. Transitions seem to work normally with this workaround.\r\n\r\n*Error details:*\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n~/.local/lib/python3.7/site-packages/pygraphviz/agraph.py in __new__(self, graph, name, nh)\r\n   1614             try:\r\n-> 1615                 nh = gv.agnode(graph.handle, n.encode(graph.encoding), _Action.find)\r\n   1616             except KeyError:\r\n\r\nKeyError: 'agnode: no key'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-58-83ccb3c51131> in <module>\r\n     66     transitions = [transition_0, transition_1, transition_2, transition_3],\r\n     67     queued = True,\r\n---> 68     initial = State.START\r\n     69 )\r\n\r\n/usr/local/lib/python3.7/site-packages/transitions/extensions/diagrams.py in __init__(self, *args, **kwargs)\r\n    139 \r\n    140         _LOGGER.debug(\"Using graph engine %s\", self.graph_cls)\r\n--> 141         _super(GraphMachine, self).__init__(*args, **kwargs)\r\n    142 \r\n    143         # for backwards compatibility assign get_combined_graph to get_graph\r\n\r\n/usr/local/lib/python3.7/site-packages/transitions/extensions/markup.py in __init__(self, *args, **kwargs)\r\n     26                 self._add_markup_model(m)\r\n     27         else:\r\n---> 28             super(MarkupMachine, self).__init__(*args, **kwargs)\r\n     29             self._markup['before_state_change'] = [x for x in (rep(f) for f in self.before_state_change) if x]\r\n     30             self._markup['after_state_change'] = [x for x in (rep(f) for f in self.before_state_change) if x]\r\n\r\n/usr/local/lib/python3.7/site-packages/transitions/core.py in __init__(self, model, states, initial, transitions, send_event, auto_transitions, ordered_transitions, ignore_invalid_triggers, before_state_change, after_state_change, name, queued, prepare_event, finalize_event, model_attribute, **kwargs)\r\n    572 \r\n    573         if model:\r\n--> 574             self.add_model(model)\r\n    575 \r\n    576     def add_model(self, model, initial=None):\r\n\r\n/usr/local/lib/python3.7/site-packages/transitions/extensions/diagrams.py in add_model(self, model, initial)\r\n    203                 raise AttributeError('Model already has a get_graph attribute. Graph retrieval cannot be bound.')\r\n    204             setattr(mod, 'get_graph', partial(self._get_graph, mod))\r\n--> 205             _ = mod.get_graph(title=self.title, force_new=True)  # initialises graph\r\n    206 \r\n    207     def add_states(self, states, on_enter=None, on_exit=None,\r\n\r\n/usr/local/lib/python3.7/site-packages/transitions/extensions/diagrams.py in _get_graph(self, model, title, force_new, show_roi)\r\n    169             self.model_graphs[model] = grph\r\n    170             try:\r\n--> 171                 self.model_graphs[model].set_node_style(getattr(model, self.model_attribute), 'active')\r\n    172             except AttributeError:\r\n    173                 _LOGGER.info(\"Could not set active state of diagram\")\r\n\r\n/usr/local/lib/python3.7/site-packages/transitions/extensions/diagrams_pygraphviz.py in set_node_style(self, state, style)\r\n    129 \r\n    130     def set_node_style(self, state, style):\r\n--> 131         node = self.fsm_graph.get_node(state)\r\n    132         style_attr = self.fsm_graph.style_attributes.get('node', {}).get(style)\r\n    133         node.attr.update(style_attr)\r\n\r\n~/.local/lib/python3.7/site-packages/pygraphviz/agraph.py in get_node(self, n)\r\n    420         a\r\n    421         \"\"\"\r\n--> 422         return Node(self, n)\r\n    423 \r\n    424     def add_edge(self, u, v=None, key=None, **attr):\r\n\r\n~/.local/lib/python3.7/site-packages/pygraphviz/agraph.py in __new__(self, graph, name, nh)\r\n   1615                 nh = gv.agnode(graph.handle, n.encode(graph.encoding), _Action.find)\r\n   1616             except KeyError:\r\n-> 1617                 raise KeyError(\"Node %s not in graph.\" % n)\r\n   1618 \r\n   1619         n.ghandle = graph.handle\r\n\r\nKeyError: 'Node State.START not in graph.'\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/399", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/399/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/399/events", "html_url": "https://github.com/pytransitions/transitions/issues/399", "id": 586393639, "node_id": "MDU6SXNzdWU1ODYzOTM2Mzk=", "number": 399, "title": "Add a Hierarchical variant to AsyncMachine ", "user": {"login": "thedrow", "id": 48936, "node_id": "MDQ6VXNlcjQ4OTM2", "avatar_url": "https://avatars2.githubusercontent.com/u/48936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thedrow", "html_url": "https://github.com/thedrow", "followers_url": "https://api.github.com/users/thedrow/followers", "following_url": "https://api.github.com/users/thedrow/following{/other_user}", "gists_url": "https://api.github.com/users/thedrow/gists{/gist_id}", "starred_url": "https://api.github.com/users/thedrow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thedrow/subscriptions", "organizations_url": "https://api.github.com/users/thedrow/orgs", "repos_url": "https://api.github.com/users/thedrow/repos", "events_url": "https://api.github.com/users/thedrow/events{/privacy}", "received_events_url": "https://api.github.com/users/thedrow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/12", "html_url": "https://github.com/pytransitions/transitions/milestone/12", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/12/labels", "id": 5240767, "node_id": "MDk6TWlsZXN0b25lNTI0MDc2Nw==", "number": 12, "title": "0.8.1", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2020-03-26T15:49:10Z", "updated_at": "2020-04-04T09:10:29Z", "due_on": null, "closed_at": "2020-04-04T09:10:29Z"}, "comments": 4, "created_at": "2020-03-23T17:37:23Z", "updated_at": "2020-04-02T21:24:02Z", "closed_at": "2020-04-02T21:24:02Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Currently this implementation is missing from the library.\r\n\r\nUnless there's an implementation limitation I'm unaware of I assume that nobody requested it until now and that's why it isn't implemented.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/398", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/398/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/398/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/398/events", "html_url": "https://github.com/pytransitions/transitions/issues/398", "id": 585619527, "node_id": "MDU6SXNzdWU1ODU2MTk1Mjc=", "number": 398, "title": "After 0.8.0 update start getting [TypeError: 'GraphMachine' object is not callable] when changing a state.", "user": {"login": "rSrkn", "id": 48635617, "node_id": "MDQ6VXNlcjQ4NjM1NjE3", "avatar_url": "https://avatars3.githubusercontent.com/u/48635617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rSrkn", "html_url": "https://github.com/rSrkn", "followers_url": "https://api.github.com/users/rSrkn/followers", "following_url": "https://api.github.com/users/rSrkn/following{/other_user}", "gists_url": "https://api.github.com/users/rSrkn/gists{/gist_id}", "starred_url": "https://api.github.com/users/rSrkn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rSrkn/subscriptions", "organizations_url": "https://api.github.com/users/rSrkn/orgs", "repos_url": "https://api.github.com/users/rSrkn/repos", "events_url": "https://api.github.com/users/rSrkn/events{/privacy}", "received_events_url": "https://api.github.com/users/rSrkn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-03-22T01:05:09Z", "updated_at": "2020-03-26T18:02:15Z", "closed_at": "2020-03-26T18:02:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "An existing **GraphMachine**  is raising an error when changing a state.\r\nIt works OK as before 0.8.0 update if I use \r\n`from transitions import Machine` instead of \r\n`from transitions.extensions import GraphMachine as Machine`\r\n\r\n**Transitions**:\r\n```\r\n        transitions = [\r\n            {\r\n                'trigger': 'trigger_proceed',\r\n                'source': self.received,  # received state (initial)\r\n                'dest': self.waiting_for_approval,\r\n                'after': 'send_notification'  \r\n            },\r\n...\r\n```\r\n\r\n**Partial stack trace**\r\n```\r\nfinite_state_machine.trigger_proceed()\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/core.py\", line 390, in trigger\r\n    return self.machine._process(func)\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/core.py\", line 1122, in _process\r\n    self._transition_queue[0]()\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/core.py\", line 408, in _trigger\r\n    return self._process(event_data)\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/core.py\", line 417, in _process\r\n    if trans.execute(event_data):\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/core.py\", line 269, in execute\r\n    self._change_state(event_data)\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/extensions/diagrams.py\", line 29, in _change_state\r\n    graph.set_previous_transition(self.source, self.dest)\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/extensions/diagrams_pygraphviz.py\", line 236, in set_previous_transition\r\n    src = self._get_global_name(src.split(self.machine.state_cls.separator))\r\n  File \"/Users/c4-m411-g5467/.local/share/virtualenvs/st-1gA9slZY/lib/python3.7/site-packages/transitions/extensions/diagrams.py\", line 260, in _get_global_name\r\n    with self.machine(state):\r\nTypeError: 'GraphMachine' object is not callable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/396", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/396/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/396/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/396/events", "html_url": "https://github.com/pytransitions/transitions/issues/396", "id": 582286126, "node_id": "MDU6SXNzdWU1ODIyODYxMjY=", "number": 396, "title": "Example in non-quick start fails", "user": {"login": "salmanisd", "id": 5398380, "node_id": "MDQ6VXNlcjUzOTgzODA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5398380?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salmanisd", "html_url": "https://github.com/salmanisd", "followers_url": "https://api.github.com/users/salmanisd/followers", "following_url": "https://api.github.com/users/salmanisd/following{/other_user}", "gists_url": "https://api.github.com/users/salmanisd/gists{/gist_id}", "starred_url": "https://api.github.com/users/salmanisd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salmanisd/subscriptions", "organizations_url": "https://api.github.com/users/salmanisd/orgs", "repos_url": "https://api.github.com/users/salmanisd/repos", "events_url": "https://api.github.com/users/salmanisd/events{/privacy}", "received_events_url": "https://api.github.com/users/salmanisd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-03-16T13:15:27Z", "updated_at": "2020-03-20T12:54:22Z", "closed_at": "2020-03-20T11:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nTraceback (most recent call last):\r\n...\r\nNameError: name 'State' is not defined\r\n\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/395", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/395/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/395/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/395/events", "html_url": "https://github.com/pytransitions/transitions/issues/395", "id": 568941456, "node_id": "MDU6SXNzdWU1Njg5NDE0NTY=", "number": 395, "title": "Async prepare functions", "user": {"login": "TanjaBayer", "id": 30770185, "node_id": "MDQ6VXNlcjMwNzcwMTg1", "avatar_url": "https://avatars1.githubusercontent.com/u/30770185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TanjaBayer", "html_url": "https://github.com/TanjaBayer", "followers_url": "https://api.github.com/users/TanjaBayer/followers", "following_url": "https://api.github.com/users/TanjaBayer/following{/other_user}", "gists_url": "https://api.github.com/users/TanjaBayer/gists{/gist_id}", "starred_url": "https://api.github.com/users/TanjaBayer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TanjaBayer/subscriptions", "organizations_url": "https://api.github.com/users/TanjaBayer/orgs", "repos_url": "https://api.github.com/users/TanjaBayer/repos", "events_url": "https://api.github.com/users/TanjaBayer/events{/privacy}", "received_events_url": "https://api.github.com/users/TanjaBayer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-02-21T13:00:42Z", "updated_at": "2020-02-24T08:03:26Z", "closed_at": "2020-02-24T08:03:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI looked through old issues but did not find a real solution to that, and even not if **async prepare functions** are supported at all or not.\r\n\r\nMinimal example of what I try to achieve:\r\n```Python\r\nclass Evaluator:\r\n  async def my_prepare_function():\r\n    await asyncio.sleep(10)\r\n\r\nstates = ['Start', 'End']\r\n\r\ntransitions = { 'trigger': 'run', source': '*', dest': 'End', 'prepare': 'my_prepare_function'}\r\n\r\n_eval = Evaluator()\r\n\r\n machine = Machine(_eval, states, transitions=transitions, initial='Start')\r\n\r\n_eval.run()\r\n\r\nassert _eval.state =='End'\r\n```\r\n\r\nThe my_prepare_function in reality contains some http requests to services, I need to have the result from before going to the next state.\r\n\r\nBefore using an async function _eval.run() was waiting for the my_prepare_function to finish before going continuing, but now, as the function is ansync it does no longer wait and _eval.state did not yet change when trying to assert the state.\r\n\r\n**Is this in general possible with pytransition?**  \r\nOr is this not at all supported. I can also switch back to using plain threads and waiting for all of them to finish in the my_prepare_function(), but I think using async would be the more elegant way.\r\n\r\nThanks in advance\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/394", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/394/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/394/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/394/events", "html_url": "https://github.com/pytransitions/transitions/issues/394", "id": 567422450, "node_id": "MDU6SXNzdWU1Njc0MjI0NTA=", "number": 394, "title": "Raise exception when adding transition to non-existing state", "user": {"login": "ltog", "id": 4726277, "node_id": "MDQ6VXNlcjQ3MjYyNzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4726277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltog", "html_url": "https://github.com/ltog", "followers_url": "https://api.github.com/users/ltog/followers", "following_url": "https://api.github.com/users/ltog/following{/other_user}", "gists_url": "https://api.github.com/users/ltog/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltog/subscriptions", "organizations_url": "https://api.github.com/users/ltog/orgs", "repos_url": "https://api.github.com/users/ltog/repos", "events_url": "https://api.github.com/users/ltog/events{/privacy}", "received_events_url": "https://api.github.com/users/ltog/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-19T09:13:52Z", "updated_at": "2020-03-20T09:22:21Z", "closed_at": "2020-03-18T17:01:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using transitions=0.7.2 I worked on code that looked like this:\r\n\r\n```python3\r\n#!/usr/bin/env python3\r\n\r\nfrom transitions import Machine\r\n\r\nclass Blub(object):\r\n    states = ['no', 'yes']\r\n\r\n    def __init__(self):\r\n\r\n        self.machine = Machine(model=self, states=Blub.states, initial='no')\r\n\r\n        self.machine.add_transition(trigger='nod',\r\n                                    source='no',\r\n                                    dest='yes')\r\n\r\n        # add internal transition\r\n        self.machine.add_transition(trigger='nod',\r\n                                    source='yes',\r\n                                    dest='None') # <-- should not have quotes, exception should happen here\r\n\r\n\r\nif __name__=='__main__':\r\n    b = Blub()\r\n    print(b.state)\r\n    b.nod()\r\n    print(b.state)\r\n    b.nod()\r\n    print(b.state) # but exception happens here\r\n```\r\n\r\nThe second transition should have been an internal transition (defined by setting `dest=None`) but by mistake I wrote `None` in quotes. This resulted in `transitions` looking for a state called `None`.\r\n\r\nGenerally speaking, I would have expected that trying to add a transition to a non-existing state would raise an exception immediately. However, an exception is only raised when one indeed tries to do the transition.\r\n\r\nI propose to add a check in `add_transition` looking for invalid source and destination states. This check would raise an exception if an invalid state was encountered. This would allow to detect invalid configurations early and decrease the risk of errors happening in seemingly running software.\r\n\r\nPS: After typing all of my text I saw that https://github.com/pytransitions/transitions/issues/155 already mentioned my concern. A tradeoff seems to be necessary between code complexity, the ability of detecting errors early and being able to dynamically adding states after already having defined transitions using these states.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/393", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/393/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/393/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/393/events", "html_url": "https://github.com/pytransitions/transitions/issues/393", "id": 562167578, "node_id": "MDU6SXNzdWU1NjIxNjc1Nzg=", "number": 393, "title": "Deprecation warning due to invalid escape sequences in Python 3.8", "user": {"login": "tirkarthi", "id": 3972343, "node_id": "MDQ6VXNlcjM5NzIzNDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3972343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirkarthi", "html_url": "https://github.com/tirkarthi", "followers_url": "https://api.github.com/users/tirkarthi/followers", "following_url": "https://api.github.com/users/tirkarthi/following{/other_user}", "gists_url": "https://api.github.com/users/tirkarthi/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirkarthi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirkarthi/subscriptions", "organizations_url": "https://api.github.com/users/tirkarthi/orgs", "repos_url": "https://api.github.com/users/tirkarthi/repos", "events_url": "https://api.github.com/users/tirkarthi/events{/privacy}", "received_events_url": "https://api.github.com/users/tirkarthi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-09T12:16:58Z", "updated_at": "2020-03-20T12:57:50Z", "closed_at": "2020-03-20T12:57:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Deprecation warnings are raised due to invalid escape sequences in Python 3.8 . Below is a log of the warnings raised during compiling all the python files. Using raw strings or escaping them will fix this issue.\r\n\r\n```\r\nfind . -iname '*.py'  | xargs -P 4 -I{} python -Walways -m py_compile {}\r\n\r\n./transitions/extensions/diagrams_pygraphviz.py:126: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- enter:\\l  + ' + '\\l  + '.join(state['on_enter'])\r\n./transitions/extensions/diagrams_pygraphviz.py:126: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- enter:\\l  + ' + '\\l  + '.join(state['on_enter'])\r\n./transitions/extensions/diagrams_pygraphviz.py:128: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- exit:\\l  + ' + '\\l  + '.join(state['on_exit'])\r\n./transitions/extensions/diagrams_pygraphviz.py:128: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- exit:\\l  + ' + '\\l  + '.join(state['on_exit'])\r\n./transitions/extensions/diagrams_pygraphviz.py:130: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- timeout(' + state['timeout'] + 's)  -> (' + ', '.join(state['on_timeout']) + ')'\r\n./transitions/extensions/diagrams_graphviz.py:145: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- enter:\\l  + ' + '\\l  + '.join(state['on_enter'])\r\n./transitions/extensions/diagrams_graphviz.py:145: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- enter:\\l  + ' + '\\l  + '.join(state['on_enter'])\r\n./transitions/extensions/diagrams_graphviz.py:147: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- exit:\\l  + ' + '\\l  + '.join(state['on_exit'])\r\n./transitions/extensions/diagrams_graphviz.py:147: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- exit:\\l  + ' + '\\l  + '.join(state['on_exit'])\r\n./transitions/extensions/diagrams_graphviz.py:149: DeprecationWarning: invalid escape sequence \\l\r\n  label += '\\l- timeout(' + state['timeout'] + 's)  -> (' + ', '.join(state['on_timeout']) + ')'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/391", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/391/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/391/events", "html_url": "https://github.com/pytransitions/transitions/issues/391", "id": 554913970, "node_id": "MDU6SXNzdWU1NTQ5MTM5NzA=", "number": 391, "title": "GraphMachine does not like it when you use enums for the states", "user": {"login": "dwightmulcahy", "id": 8507802, "node_id": "MDQ6VXNlcjg1MDc4MDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8507802?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwightmulcahy", "html_url": "https://github.com/dwightmulcahy", "followers_url": "https://api.github.com/users/dwightmulcahy/followers", "following_url": "https://api.github.com/users/dwightmulcahy/following{/other_user}", "gists_url": "https://api.github.com/users/dwightmulcahy/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwightmulcahy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwightmulcahy/subscriptions", "organizations_url": "https://api.github.com/users/dwightmulcahy/orgs", "repos_url": "https://api.github.com/users/dwightmulcahy/repos", "events_url": "https://api.github.com/users/dwightmulcahy/events{/privacy}", "received_events_url": "https://api.github.com/users/dwightmulcahy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-24T19:31:11Z", "updated_at": "2020-04-02T21:27:09Z", "closed_at": "2020-04-02T21:27:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "so this minimal example will bomb when you use states that are enums...\r\n```\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/statemachine.py\", line 24, in __init__\r\n    self.machine = GraphMachine(model=self, use_pygraphviz=False, states=Health.States, initial=Health.States.UNKNOWN)\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/transitions/extensions/diagrams.py\", line 138, in __init__\r\n    _ = model.get_graph(title=self.title, force_new=True)  # initialises graph\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/transitions/extensions/diagrams.py\", line 164, in _get_graph\r\n    grph = self.graph_cls(self, title=title if title is not None else self.title)\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/transitions/extensions/diagrams_graphviz.py\", line 40, in __init__\r\n    self.generate(title)\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/transitions/extensions/diagrams_graphviz.py\", line 110, in generate\r\n    self._add_nodes(states, fsm_graph)\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/transitions/extensions/diagrams_graphviz.py\", line 58, in _add_nodes\r\n    **self.machine.style_attributes['node'][style])\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/graphviz/dot.py\", line 130, in node\r\n    name = self._quote(name)\r\n  File \"/Users/dwight-personal/PycharmProjects/healthcheck/venv/lib/python3.7/site-packages/graphviz/lang.py\", line 63, in quote\r\n    if is_html_string(identifier) and not isinstance(identifier, NoHtml):\r\nTypeError: expected string or bytes-like object\r\n```\r\n\r\nas an example:\r\n```\r\nclass Health(object):\r\n    class States(enum.Enum):\r\n        UNKNOWN = 0\r\n...\r\n    def __init__(self):\r\n        self.machine = GraphMachine(model=self, use_pygraphviz=False, states=Health.States, initial=Health.States.UNKNOWN)\r\n...\r\n        self.machine.get_graph().draw('my_state_diagram.png', prog='dot')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/388", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/388/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/388/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/388/events", "html_url": "https://github.com/pytransitions/transitions/issues/388", "id": 546560027, "node_id": "MDU6SXNzdWU1NDY1NjAwMjc=", "number": 388, "title": "Thread safe machine without locking", "user": {"login": "martin-intex", "id": 13764622, "node_id": "MDQ6VXNlcjEzNzY0NjIy", "avatar_url": "https://avatars2.githubusercontent.com/u/13764622?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martin-intex", "html_url": "https://github.com/martin-intex", "followers_url": "https://api.github.com/users/martin-intex/followers", "following_url": "https://api.github.com/users/martin-intex/following{/other_user}", "gists_url": "https://api.github.com/users/martin-intex/gists{/gist_id}", "starred_url": "https://api.github.com/users/martin-intex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martin-intex/subscriptions", "organizations_url": "https://api.github.com/users/martin-intex/orgs", "repos_url": "https://api.github.com/users/martin-intex/repos", "events_url": "https://api.github.com/users/martin-intex/events{/privacy}", "received_events_url": "https://api.github.com/users/martin-intex/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-07T23:21:14Z", "updated_at": "2020-01-08T09:22:36Z", "closed_at": "2020-01-08T08:04:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI would like to implement a transition variant that can be used with threads but does not\r\nblock until a thread is done. See the simple example below. The calls in the run methods are never executed because a lock is held (due to the thread created/started) in the constructor.\r\nActually I read the source of the LockedMachine but did not understand how the trigger function actually has knowledge of the additional thread I'd created.\r\nHowever - when not using the LockedMachine but the plain Machine variant the example works as expected (e.g. B->C->A->B->C->A->A->B->C) but I think it is not thread safe since the trigger method is not reentrant safe.\r\nIs there is an implementation with a reentrant safe trigger but no locking of additional threads?\r\n\r\n~~~\r\nimport time\r\nfrom transitions.extensions import LockedMachine as Machine\r\n#from transitions import Machine #This works as expected\r\nimport threading\r\n\r\nclass Test(Machine):\r\n    states=['A','B','C']\r\n    def __init__(self):\r\n        Machine.__init__(self, states=self.states,\r\n                                initial='A'\r\n                                )\r\n        self.thread=threading.Thread(target=self.thread_run)\r\n        self.thread.start()\r\n\r\n    def thread_run(self):\r\n        while True:\r\n            time.sleep(7)\r\n            self.to_A()\r\n\r\n    def run(self):\r\n        while True:\r\n            self.to_B()\r\n            self.to_C()\r\n            self.to_A()\r\n\r\n            \r\n    def on_enter_A(self):\r\n        print(\"->A\")\r\n        time.sleep(1)\r\n    def on_enter_B(self):\r\n        print(\"->B\")\r\n        time.sleep(1)\r\n    def on_enter_C(self):\r\n        print(\"->C\")\r\n        time.sleep(1)\r\n        \r\n\r\nt=Test()\r\nt.run()        \r\n\r\n`\r\nimport time\r\nfrom transitions.extensions import LockedMachine as Machine\r\n#from transitions import Machine #This works as expected\r\nimport threading\r\n\r\nclass Test(Machine):\r\n    states=['A','B','C']\r\n    def __init__(self):\r\n        Machine.__init__(self, states=self.states,\r\n                                initial='A'\r\n                                )\r\n        self.thread=threading.Thread(target=self.thread_run)\r\n        self.thread.start()\r\n\r\n    def thread_run(self):\r\n        while True:\r\n            time.sleep(7)\r\n            self.to_A()\r\n\r\n    def run(self):\r\n        while True:\r\n            self.to_B()\r\n            self.to_C()\r\n            self.to_A()\r\n\r\n            \r\n    def on_enter_A(self):\r\n        print(\"->A\")\r\n        time.sleep(1)\r\n    def on_enter_B(self):\r\n        print(\"->B\")\r\n        time.sleep(1)\r\n    def on_enter_C(self):\r\n        print(\"->C\")\r\n        time.sleep(1)\r\n        \r\n\r\nt=Test()\r\nt.run()        \r\n~~~", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/385", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/385/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/385/events", "html_url": "https://github.com/pytransitions/transitions/issues/385", "id": 542306540, "node_id": "MDU6SXNzdWU1NDIzMDY1NDA=", "number": 385, "title": "Generate predicate methods in lowercase", "user": {"login": "artofhuman", "id": 1192122, "node_id": "MDQ6VXNlcjExOTIxMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1192122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artofhuman", "html_url": "https://github.com/artofhuman", "followers_url": "https://api.github.com/users/artofhuman/followers", "following_url": "https://api.github.com/users/artofhuman/following{/other_user}", "gists_url": "https://api.github.com/users/artofhuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/artofhuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artofhuman/subscriptions", "organizations_url": "https://api.github.com/users/artofhuman/orgs", "repos_url": "https://api.github.com/users/artofhuman/repos", "events_url": "https://api.github.com/users/artofhuman/events{/privacy}", "received_events_url": "https://api.github.com/users/artofhuman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-25T09:44:06Z", "updated_at": "2020-04-04T09:10:17Z", "closed_at": "2020-04-04T09:10:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, @aleneum.\r\n\r\nWhat do you think about the additional option for generating predicate methods in lowercase?\r\n\r\nFor example if we use enums usually we add enum values in  uppercase like:\r\n``` python\r\nclass States(enum.Enum):\r\n    ERROR = 0\r\n    RED = 1\r\n    YELLOW = 2\r\n    GREEN = 3\r\n\r\nm = Machine(states=States, transitions=transitions, initial=States.RED)\r\n```\r\nAnd machine generate predicate methods like:\r\n`m.is_RED()` where state name part in upperacese.\r\n\r\nIt dont allows switching from strings to enums without rewrite codebase.\r\n\r\nFor example\r\nif we have old machine\r\n`m = Machine(states=['error', 'red'], transitions=transitions, initial='red')`\r\nand want to switch to enums we should rewrite predicates from `.is_error()` to `.is_ERROR()`\r\n\r\nIn this case, I propose to add the option to machine `auto_lowercase=True` or same analog.\r\n\r\nI can prepare PR for this. WDYT?\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/384", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/384/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/384/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/384/events", "html_url": "https://github.com/pytransitions/transitions/issues/384", "id": 538810335, "node_id": "MDU6SXNzdWU1Mzg4MTAzMzU=", "number": 384, "title": "Dynamically add/remove tags to state", "user": {"login": "lakenn", "id": 17800986, "node_id": "MDQ6VXNlcjE3ODAwOTg2", "avatar_url": "https://avatars2.githubusercontent.com/u/17800986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lakenn", "html_url": "https://github.com/lakenn", "followers_url": "https://api.github.com/users/lakenn/followers", "following_url": "https://api.github.com/users/lakenn/following{/other_user}", "gists_url": "https://api.github.com/users/lakenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/lakenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lakenn/subscriptions", "organizations_url": "https://api.github.com/users/lakenn/orgs", "repos_url": "https://api.github.com/users/lakenn/repos", "events_url": "https://api.github.com/users/lakenn/events{/privacy}", "received_events_url": "https://api.github.com/users/lakenn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-17T03:27:22Z", "updated_at": "2019-12-21T09:51:38Z", "closed_at": "2019-12-21T09:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Think it would be very helpful if the tags can be added/removed dynamically.\r\n\r\nEg. this can act as the outstanding tasks to be completed  when a state is entered.\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/383", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/383/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/383/events", "html_url": "https://github.com/pytransitions/transitions/issues/383", "id": 533816240, "node_id": "MDU6SXNzdWU1MzM4MTYyNDA=", "number": 383, "title": "docstrings for transitions?", "user": {"login": "carlodri", "id": 5230366, "node_id": "MDQ6VXNlcjUyMzAzNjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/5230366?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlodri", "html_url": "https://github.com/carlodri", "followers_url": "https://api.github.com/users/carlodri/followers", "following_url": "https://api.github.com/users/carlodri/following{/other_user}", "gists_url": "https://api.github.com/users/carlodri/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlodri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlodri/subscriptions", "organizations_url": "https://api.github.com/users/carlodri/orgs", "repos_url": "https://api.github.com/users/carlodri/repos", "events_url": "https://api.github.com/users/carlodri/events{/privacy}", "received_events_url": "https://api.github.com/users/carlodri/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-12-06T08:24:42Z", "updated_at": "2020-01-10T08:43:56Z", "closed_at": "2020-01-10T08:43:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "is there a way to add docstrings/documentation for transitions that should be attached to the generated class methods?\r\n\r\nthanks for the great package!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/382", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/382/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/382/events", "html_url": "https://github.com/pytransitions/transitions/issues/382", "id": 533510544, "node_id": "MDU6SXNzdWU1MzM1MTA1NDQ=", "number": 382, "title": "Resetting transitions states and it\u2019s histories", "user": {"login": "proxyroot", "id": 21299746, "node_id": "MDQ6VXNlcjIxMjk5NzQ2", "avatar_url": "https://avatars2.githubusercontent.com/u/21299746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/proxyroot", "html_url": "https://github.com/proxyroot", "followers_url": "https://api.github.com/users/proxyroot/followers", "following_url": "https://api.github.com/users/proxyroot/following{/other_user}", "gists_url": "https://api.github.com/users/proxyroot/gists{/gist_id}", "starred_url": "https://api.github.com/users/proxyroot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/proxyroot/subscriptions", "organizations_url": "https://api.github.com/users/proxyroot/orgs", "repos_url": "https://api.github.com/users/proxyroot/repos", "events_url": "https://api.github.com/users/proxyroot/events{/privacy}", "received_events_url": "https://api.github.com/users/proxyroot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-05T18:08:15Z", "updated_at": "2020-01-10T08:44:09Z", "closed_at": "2020-01-10T08:44:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there a way to clear or delete fsm related data", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/381", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/381/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/381/events", "html_url": "https://github.com/pytransitions/transitions/issues/381", "id": 528553622, "node_id": "MDU6SXNzdWU1Mjg1NTM2MjI=", "number": 381, "title": "\"OR\" conditions", "user": {"login": "sergei3000", "id": 18502517, "node_id": "MDQ6VXNlcjE4NTAyNTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/18502517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergei3000", "html_url": "https://github.com/sergei3000", "followers_url": "https://api.github.com/users/sergei3000/followers", "following_url": "https://api.github.com/users/sergei3000/following{/other_user}", "gists_url": "https://api.github.com/users/sergei3000/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergei3000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergei3000/subscriptions", "organizations_url": "https://api.github.com/users/sergei3000/orgs", "repos_url": "https://api.github.com/users/sergei3000/repos", "events_url": "https://api.github.com/users/sergei3000/events{/privacy}", "received_events_url": "https://api.github.com/users/sergei3000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-11-26T08:02:04Z", "updated_at": "2020-02-22T16:11:40Z", "closed_at": "2020-02-22T16:11:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "As per the documentation, all the conditions should return `True` for a transition to execute.\r\n\r\nIt would be great to have disjunctive conditions too. Something like this:\r\n`machine.add_transition('heat', 'solid', 'liquid', conditions=['is_really_hot'], or_conditions=['is_very_dense'])`\r\n`machine.add_transition('heat', 'solid', 'gas', unless=['is_flammable', 'is_really_hot'], or_unless=['is_ice_cold', 'is_moving'])`\r\nWith possibility of multiple `or...`'s per each transition.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/380", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/380/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/380/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/380/events", "html_url": "https://github.com/pytransitions/transitions/issues/380", "id": 515050945, "node_id": "MDU6SXNzdWU1MTUwNTA5NDU=", "number": 380, "title": "loop_includes_initial flag to Machine.add_ordered_transitions is confusing", "user": {"login": "facundofc", "id": 20469597, "node_id": "MDQ6VXNlcjIwNDY5NTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/20469597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facundofc", "html_url": "https://github.com/facundofc", "followers_url": "https://api.github.com/users/facundofc/followers", "following_url": "https://api.github.com/users/facundofc/following{/other_user}", "gists_url": "https://api.github.com/users/facundofc/gists{/gist_id}", "starred_url": "https://api.github.com/users/facundofc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facundofc/subscriptions", "organizations_url": "https://api.github.com/users/facundofc/orgs", "repos_url": "https://api.github.com/users/facundofc/repos", "events_url": "https://api.github.com/users/facundofc/events{/privacy}", "received_events_url": "https://api.github.com/users/facundofc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-30T23:42:52Z", "updated_at": "2020-03-20T11:40:15Z", "closed_at": "2020-03-20T11:40:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following code does not work as I would expect:\r\n\r\n```python\r\nm = Machine('self', ['A', 'B', 'C'], initial='A')\r\nm.add_ordered_transitions(['C', 'B', 'A'], loop=False)\r\nm.to_C()\r\nm.next_state()\r\n```\r\n\r\nThe final `next_state()` call raises a `MachineError` complaining that there's no trigger `next_state` from state `B`.\r\n\r\nLooking at the code, the issue seems to be the `loop=False`.\r\n\r\nMy use case is to have an FSM that's just a linear sequence through a set of states, back and forth, with no loop. So my first try didn't work:\r\n\r\n```python\r\nm = Machine('self', ['A', 'B', 'C'], initial='A', ordered_transitions=True)\r\nm.add_ordered_transitions(['C', 'B', 'A'], loop=False)\r\n```\r\n\r\nMy thought is that what's referred to as the \"loop\" actually refers to going from the last state to the first of the provided states' list. It could be that the `loop_includes_initial` flag is meaningless if the first state provided is not the initial one. My proposal is to raise `ValueError` if `loop == True`, `loop_includes_initial == True` but `states[0] != self._initial`. What do you think about this?\r\n\r\nI'm more than willing to submit a pull request about this, but I'm unsure about what the fix should do.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/379", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/379/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/379/events", "html_url": "https://github.com/pytransitions/transitions/issues/379", "id": 514672487, "node_id": "MDU6SXNzdWU1MTQ2NzI0ODc=", "number": 379, "title": "Memory optimized FSM", "user": {"login": "ajay2611", "id": 10583753, "node_id": "MDQ6VXNlcjEwNTgzNzUz", "avatar_url": "https://avatars1.githubusercontent.com/u/10583753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajay2611", "html_url": "https://github.com/ajay2611", "followers_url": "https://api.github.com/users/ajay2611/followers", "following_url": "https://api.github.com/users/ajay2611/following{/other_user}", "gists_url": "https://api.github.com/users/ajay2611/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajay2611/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajay2611/subscriptions", "organizations_url": "https://api.github.com/users/ajay2611/orgs", "repos_url": "https://api.github.com/users/ajay2611/repos", "events_url": "https://api.github.com/users/ajay2611/events{/privacy}", "received_events_url": "https://api.github.com/users/ajay2611/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-30T13:32:54Z", "updated_at": "2020-01-10T09:20:09Z", "closed_at": "2020-01-10T09:20:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have got a very simple class as below. \r\n```\r\nclass Test:\r\n    states = ['A', 'B', 'C']\r\n    transitions = [['change',  'A',  'B']]\r\n\r\n    def __init__(self, tid):\r\n        self.tid = tid\r\n        self.machine = Machine(model=self, states=Test.states, transitions=Test.transitions, initial='A')\r\n```\r\nEach object of the above class takes ~60KB(my actual class has more states and transitions than the above example) which is too much as I've to create around 3.5L objects. I can't use `__slots__` in my `Test` class as `Machine` adds extra variables/methods to it. \r\n\r\nAny ideas on how to do it in a memory-optimized way?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/377", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/377/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/377/events", "html_url": "https://github.com/pytransitions/transitions/issues/377", "id": 514572098, "node_id": "MDU6SXNzdWU1MTQ1NzIwOTg=", "number": 377, "title": "Trigger methods mask away KeyError exceptions", "user": {"login": "facundofc", "id": 20469597, "node_id": "MDQ6VXNlcjIwNDY5NTk3", "avatar_url": "https://avatars3.githubusercontent.com/u/20469597?v=4", "gravatar_id": "", "url": "https://api.github.com/users/facundofc", "html_url": "https://github.com/facundofc", "followers_url": "https://api.github.com/users/facundofc/followers", "following_url": "https://api.github.com/users/facundofc/following{/other_user}", "gists_url": "https://api.github.com/users/facundofc/gists{/gist_id}", "starred_url": "https://api.github.com/users/facundofc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/facundofc/subscriptions", "organizations_url": "https://api.github.com/users/facundofc/orgs", "repos_url": "https://api.github.com/users/facundofc/repos", "events_url": "https://api.github.com/users/facundofc/events{/privacy}", "received_events_url": "https://api.github.com/users/facundofc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/11", "html_url": "https://github.com/pytransitions/transitions/milestone/11", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/11/labels", "id": 4944915, "node_id": "MDk6TWlsZXN0b25lNDk0NDkxNQ==", "number": 11, "title": "0.7.2", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2019-12-19T08:03:22Z", "updated_at": "2020-03-20T14:02:13Z", "due_on": null, "closed_at": "2020-03-20T14:02:13Z"}, "comments": 1, "created_at": "2019-10-30T10:58:12Z", "updated_at": "2020-01-10T09:20:58Z", "closed_at": "2020-01-10T09:20:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "If any callback raises a KeyError exception it is translated into an AttributeError with the \"Do not know event named TRIGGER_NAME\" message.\r\n\r\nThis is misleading and I think not the correct behavior.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/375", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/375/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/375/events", "html_url": "https://github.com/pytransitions/transitions/issues/375", "id": 512831210, "node_id": "MDU6SXNzdWU1MTI4MzEyMTA=", "number": 375, "title": "typo in method doc string", "user": {"login": "meysam81", "id": 30233243, "node_id": "MDQ6VXNlcjMwMjMzMjQz", "avatar_url": "https://avatars0.githubusercontent.com/u/30233243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meysam81", "html_url": "https://github.com/meysam81", "followers_url": "https://api.github.com/users/meysam81/followers", "following_url": "https://api.github.com/users/meysam81/following{/other_user}", "gists_url": "https://api.github.com/users/meysam81/gists{/gist_id}", "starred_url": "https://api.github.com/users/meysam81/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meysam81/subscriptions", "organizations_url": "https://api.github.com/users/meysam81/orgs", "repos_url": "https://api.github.com/users/meysam81/repos", "events_url": "https://api.github.com/users/meysam81/events{/privacy}", "received_events_url": "https://api.github.com/users/meysam81/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-26T12:42:57Z", "updated_at": "2019-12-25T12:02:41Z", "closed_at": "2019-12-25T12:02:41Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "there's a typo in method doc string & I would be glad to resolve it via a PR if that's ok:\r\nhttps://github.com/pytransitions/transitions/blob/02076d3f259efd1a2c066a823547ecd7083a49b7/transitions/core.py#L97\r\n\r\nthe correct description is: *Callbacks executed when a state is __exited__.*", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/374", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/374/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/374/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/374/events", "html_url": "https://github.com/pytransitions/transitions/issues/374", "id": 511844304, "node_id": "MDU6SXNzdWU1MTE4NDQzMDQ=", "number": 374, "title": "'machine.on_exit' and 'machine.on_enter' callbacks?", "user": {"login": "sergei3000", "id": 18502517, "node_id": "MDQ6VXNlcjE4NTAyNTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/18502517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergei3000", "html_url": "https://github.com/sergei3000", "followers_url": "https://api.github.com/users/sergei3000/followers", "following_url": "https://api.github.com/users/sergei3000/following{/other_user}", "gists_url": "https://api.github.com/users/sergei3000/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergei3000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergei3000/subscriptions", "organizations_url": "https://api.github.com/users/sergei3000/orgs", "repos_url": "https://api.github.com/users/sergei3000/repos", "events_url": "https://api.github.com/users/sergei3000/events{/privacy}", "received_events_url": "https://api.github.com/users/sergei3000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-24T10:09:28Z", "updated_at": "2020-02-22T17:35:16Z", "closed_at": "2020-02-22T16:09:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "As a feature request.\r\n\r\nIt would be great if it was possible to declare callbacks 'on_exit' and 'on_enter' on entire model. Similar to 'machine.prepare_event', 'machine.before_state_change', 'machine.after_state_change' and 'machine.finalize_event'.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/372", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/372/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/372/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/372/events", "html_url": "https://github.com/pytransitions/transitions/issues/372", "id": 509298973, "node_id": "MDU6SXNzdWU1MDkyOTg5NzM=", "number": 372, "title": "Ability to manage multiple states per Model;Custom state field for Model", "user": {"login": "v1k45", "id": 7877501, "node_id": "MDQ6VXNlcjc4Nzc1MDE=", "avatar_url": "https://avatars3.githubusercontent.com/u/7877501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/v1k45", "html_url": "https://github.com/v1k45", "followers_url": "https://api.github.com/users/v1k45/followers", "following_url": "https://api.github.com/users/v1k45/following{/other_user}", "gists_url": "https://api.github.com/users/v1k45/gists{/gist_id}", "starred_url": "https://api.github.com/users/v1k45/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/v1k45/subscriptions", "organizations_url": "https://api.github.com/users/v1k45/orgs", "repos_url": "https://api.github.com/users/v1k45/repos", "events_url": "https://api.github.com/users/v1k45/events{/privacy}", "received_events_url": "https://api.github.com/users/v1k45/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/11", "html_url": "https://github.com/pytransitions/transitions/milestone/11", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/11/labels", "id": 4944915, "node_id": "MDk6TWlsZXN0b25lNDk0NDkxNQ==", "number": 11, "title": "0.7.2", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2019-12-19T08:03:22Z", "updated_at": "2020-03-20T14:02:13Z", "due_on": null, "closed_at": "2020-03-20T14:02:13Z"}, "comments": 6, "created_at": "2019-10-18T20:36:57Z", "updated_at": "2020-01-07T10:31:07Z", "closed_at": "2020-01-07T10:31:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First of all, thanks for this powerful lib :)\r\n\r\nCurrently the library makes an assumption that all Models will track the \"state\" using the `state` attribute. This assumption leads to two problems:\r\n\r\n1. No ability to track the state changes in some other attribute/field.\r\n2. A Model cannot have multiple states.\r\n\r\nFor example, If a use-case were to have two different fields on the Model. Both of them would represent different states and would be controlled by different Machines.\r\n\r\nSomething like this:\r\n```python\r\nlump = Matter()\r\n\r\nlump.global_state\r\nlump.pipeline_state\r\n\r\nglobal_machine = Machine(lump, model_field='global_state', **kwargs)\r\npipeline_machine = Machine(lump, model_field='pipeline_state', **kwargs)\r\n```\r\n\r\nIs this out of scope of this library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/371", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/371/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/371/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/371/events", "html_url": "https://github.com/pytransitions/transitions/issues/371", "id": 505116690, "node_id": "MDU6SXNzdWU1MDUxMTY2OTA=", "number": 371, "title": "Support for parallel states?", "user": {"login": "fkromer", "id": 10199742, "node_id": "MDQ6VXNlcjEwMTk5NzQy", "avatar_url": "https://avatars1.githubusercontent.com/u/10199742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fkromer", "html_url": "https://github.com/fkromer", "followers_url": "https://api.github.com/users/fkromer/followers", "following_url": "https://api.github.com/users/fkromer/following{/other_user}", "gists_url": "https://api.github.com/users/fkromer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fkromer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fkromer/subscriptions", "organizations_url": "https://api.github.com/users/fkromer/orgs", "repos_url": "https://api.github.com/users/fkromer/repos", "events_url": "https://api.github.com/users/fkromer/events{/privacy}", "received_events_url": "https://api.github.com/users/fkromer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-10T08:27:59Z", "updated_at": "2020-03-20T14:11:14Z", "closed_at": "2020-03-20T13:22:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does `transitions` support something equivalent to [Qt for Python's Parallel States](https://doc.qt.io/qtforpython/overviews/statemachine-api.html#using-parallel-states-to-avoid-a-combinatorial-explosion-of-states) ([exemplary graphical reprensentation](https://statecharts.github.io/glossary/parallel-state.html))?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/369", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/369/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/369/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/369/events", "html_url": "https://github.com/pytransitions/transitions/issues/369", "id": 488725997, "node_id": "MDU6SXNzdWU0ODg3MjU5OTc=", "number": 369, "title": "AssertionError: Description should start with a headline", "user": {"login": "mali30", "id": 34193234, "node_id": "MDQ6VXNlcjM0MTkzMjM0", "avatar_url": "https://avatars3.githubusercontent.com/u/34193234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mali30", "html_url": "https://github.com/mali30", "followers_url": "https://api.github.com/users/mali30/followers", "following_url": "https://api.github.com/users/mali30/following{/other_user}", "gists_url": "https://api.github.com/users/mali30/gists{/gist_id}", "starred_url": "https://api.github.com/users/mali30/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mali30/subscriptions", "organizations_url": "https://api.github.com/users/mali30/orgs", "repos_url": "https://api.github.com/users/mali30/repos", "events_url": "https://api.github.com/users/mali30/events{/privacy}", "received_events_url": "https://api.github.com/users/mali30/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-03T17:16:07Z", "updated_at": "2019-09-03T17:49:23Z", "closed_at": "2019-09-03T17:49:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nOS: MacOS v10.14.6\r\npython3 version: Python 3.7.4\r\nAre you using a virtualenv : No\r\n```\r\n\r\nExpected: The `setup.py` runs successfully and I am able to use transitions in my python script\r\n\r\nActual: I downloaded transitions via the GitHub download and tried running the command \r\n`python3 setup.py install`,  I received the error \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"setup.py\", line 11, in <module>\r\n    assert long_description[:3] == '## '  # Description should start with a headline (## Quickstart)\r\nAssertionError\r\n```\r\n\r\nAny ideas on what to do about this?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/367", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/367/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/367/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/367/events", "html_url": "https://github.com/pytransitions/transitions/issues/367", "id": 487859220, "node_id": "MDU6SXNzdWU0ODc4NTkyMjA=", "number": 367, "title": "Example (not an issue)", "user": {"login": "dan-bar-dov", "id": 44744269, "node_id": "MDQ6VXNlcjQ0NzQ0MjY5", "avatar_url": "https://avatars3.githubusercontent.com/u/44744269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-bar-dov", "html_url": "https://github.com/dan-bar-dov", "followers_url": "https://api.github.com/users/dan-bar-dov/followers", "following_url": "https://api.github.com/users/dan-bar-dov/following{/other_user}", "gists_url": "https://api.github.com/users/dan-bar-dov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-bar-dov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-bar-dov/subscriptions", "organizations_url": "https://api.github.com/users/dan-bar-dov/orgs", "repos_url": "https://api.github.com/users/dan-bar-dov/repos", "events_url": "https://api.github.com/users/dan-bar-dov/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-bar-dov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-01T08:50:17Z", "updated_at": "2019-09-02T09:54:27Z", "closed_at": "2019-09-02T09:47:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thought I'd share.\r\nI wanted to make visual modifications to the graphs, this is a working example of what I came up with. Probably this can be added to an example.\r\n\r\n```\r\ndef create_graph():\r\n    class Model:\r\n        pass\r\n\r\n    m = Model()\r\n    CustomGraphMachine.machine_attributes['ratio'] = '0.471'\r\n    machine = CustomGraphMachine(m, states=session_states, transitions=session_trans, initial='INITIAL',\r\n                                 show_conditions=True, show_state_attributes=True)\r\n\r\n    machine.style_attributes['node']['fail'] = {'fillcolor': 'brown1'}\r\n    machine.style_attributes['node']['transient'] = {'fillcolor': 'gold'}\r\n    machine.style_attributes['node']['target'] = {'fillcolor': 'chartreuse'}\r\n\r\n    for s in transient_states:\r\n        machine.model_graphs[m].set_node_style(s['name'], 'transient')\r\n    for s in target_states:\r\n        machine.model_graphs[m].set_node_style(s['name'], 'target')\r\n    for s in fail_states:\r\n        machine.model_graphs[m].set_node_style(s['name'], 'fail')\r\n\r\n    # draw the whole graph ...\r\n    m.get_graph().draw('state_diagram.png', prog='dot')\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/366", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/366/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/366/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/366/events", "html_url": "https://github.com/pytransitions/transitions/issues/366", "id": 487359047, "node_id": "MDU6SXNzdWU0ODczNTkwNDc=", "number": 366, "title": "enum based example crashes with transitions==0.7.0", "user": {"login": "attila123", "id": 1728046, "node_id": "MDQ6VXNlcjE3MjgwNDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/1728046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/attila123", "html_url": "https://github.com/attila123", "followers_url": "https://api.github.com/users/attila123/followers", "following_url": "https://api.github.com/users/attila123/following{/other_user}", "gists_url": "https://api.github.com/users/attila123/gists{/gist_id}", "starred_url": "https://api.github.com/users/attila123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/attila123/subscriptions", "organizations_url": "https://api.github.com/users/attila123/orgs", "repos_url": "https://api.github.com/users/attila123/repos", "events_url": "https://api.github.com/users/attila123/events{/privacy}", "received_events_url": "https://api.github.com/users/attila123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-30T08:34:07Z", "updated_at": "2019-09-13T07:54:58Z", "closed_at": "2019-09-13T07:54:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, after reading the documentation I decided to use enums for the states. But I had some crash issue so I tried the example directly from https://github.com/pytransitions/transitions/blob/master/README.md as it is:\r\n```\r\nimport enum  # Python 2.7 users need to have 'enum34' installed\r\nfrom transitions import Machine\r\n\r\nclass States(enum.Enum):\r\n    ERROR = 0\r\n    RED = 1\r\n    YELLOW = 2\r\n    GREEN = 3\r\n\r\ntransitions = [['proceed', States.RED, States.YELLOW],\r\n               ['proceed', States.YELLOW, States.GREEN],\r\n               ['error', '*', States.ERROR]]\r\n\r\nm = Machine(states=States, transitions=transitions, initial=States.RED)\r\nassert m.is_RED()\r\nassert m.state is States.RED\r\nstate = m.get_state(States.RED)  # get transitions.State object\r\nprint(state.name)  # >>> RED\r\nm.proceed()\r\nm.proceed()\r\nassert m.is_GREEN()\r\nm.error()\r\nassert m.state is States.ERROR\r\n```\r\nSo I copy-pasted it to a new .py file in my PyCharm project (transitions==0.7.0 was already added to my requirements.txt and installed in the venv), and run it, and it also crashes (I use Python 3.7.4 in Linux):\r\n```\r\n/path/to/my/project/.tox/py37/bin/python /path/to/my/project/tmp_transitions_enum.py\r\nTraceback (most recent call last):\r\n  File \"/path/to/my/project/tmp_transitions_enum.py\", line 14, in <module>\r\n    m = Machine(states=States, transitions=transitions, initial=States.RED)\r\n  File \"/path/to/my/project/.tox/py37/lib/python3.7/site-packages/transitions/core.py\", line 552, in __init__\r\n    self.add_states(states)\r\n  File \"/path/to/my/project/.tox/py37/lib/python3.7/site-packages/transitions/core.py\", line 755, in add_states\r\n    self.states[state.name] = state\r\n  File \"/path/to/my/project/.tox/py37/lib/python3.7/enum.py\", line 349, in __getattr__\r\n    raise AttributeError(name) from None\r\nAttributeError: name\r\n\r\nProcess finished with exit code 1\r\n\r\nUpdate:\r\n```\r\nTo prove that my environment is otherwise OK, with minimal changes I converted the example to string based states and then it runs fine (exits successfully):\r\n```\r\nimport enum  # Python 2.7 users need to have 'enum34' installed\r\nfrom transitions import Machine\r\n\r\nstates = ['ERROR', 'RED', 'YELLOW', 'GREEN']\r\n\r\ntransitions = [['proceed', 'RED', 'YELLOW'],\r\n               ['proceed', 'YELLOW', 'GREEN'],\r\n               ['error', '*', 'ERROR']]\r\n\r\nm = Machine(states=states, transitions=transitions, initial='RED')\r\nassert m.is_RED()\r\nassert m.state is 'RED'\r\nstate = m.get_state('RED')  # get transitions.State object\r\nprint(state.name)  # >>> RED\r\nm.proceed()\r\nm.proceed()\r\nassert m.is_GREEN()\r\nm.error()\r\nassert m.state is 'ERROR'\r\n```\r\nAs a workaround, I think I will go with the following state name pattern, which will be the easiest to convert back to enums after this issue fixed:\r\n\r\n```\r\nimport enum  # Python 2.7 users need to have 'enum34' installed\r\nfrom transitions import Machine\r\n\r\nstates = ['States_ERROR', 'States_RED', 'States_YELLOW', 'States_GREEN']\r\n\r\ntransitions = [['proceed', 'States_RED', 'States_YELLOW'],\r\n               ['proceed', 'States_YELLOW', 'States_GREEN'],\r\n               ['error', '*', 'States_ERROR']]\r\n\r\nm = Machine(states=states, transitions=transitions, initial='States_RED')\r\nassert m.is_States_RED()\r\nassert m.state is 'States_RED'\r\nstate = m.get_state('States_RED')  # get transitions.State object\r\nprint(state.name)  # >>> RED\r\nm.proceed()\r\nm.proceed()\r\nassert m.is_States_GREEN()\r\nm.error()\r\nassert m.state is 'States_ERROR'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/365", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/365/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/365/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/365/events", "html_url": "https://github.com/pytransitions/transitions/issues/365", "id": 486825552, "node_id": "MDU6SXNzdWU0ODY4MjU1NTI=", "number": 365, "title": "Type hints for Enum", "user": {"login": "andrewpwade", "id": 1777508, "node_id": "MDQ6VXNlcjE3Nzc1MDg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1777508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewpwade", "html_url": "https://github.com/andrewpwade", "followers_url": "https://api.github.com/users/andrewpwade/followers", "following_url": "https://api.github.com/users/andrewpwade/following{/other_user}", "gists_url": "https://api.github.com/users/andrewpwade/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewpwade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewpwade/subscriptions", "organizations_url": "https://api.github.com/users/andrewpwade/orgs", "repos_url": "https://api.github.com/users/andrewpwade/repos", "events_url": "https://api.github.com/users/andrewpwade/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewpwade/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-29T08:52:35Z", "updated_at": "2019-08-30T10:56:17Z", "closed_at": "2019-08-30T10:41:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\n#357 introduced support for enums. The docstring type hint (parsed by at least Pycharm) is `list` which produces a type warning in Pycharm. E.g. changing it to `list or Enum` removes the warning. \r\n\r\nI'm not sure what the type hint would be for an individual state, e.g. for `initial` given Enum.auto etc?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/363", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/363/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/363/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/363/events", "html_url": "https://github.com/pytransitions/transitions/issues/363", "id": 483368964, "node_id": "MDU6SXNzdWU0ODMzNjg5NjQ=", "number": 363, "title": "Are lists of callbacks (for example in \"conditions\") executed strictly in order?", "user": {"login": "sergei3000", "id": 18502517, "node_id": "MDQ6VXNlcjE4NTAyNTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/18502517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sergei3000", "html_url": "https://github.com/sergei3000", "followers_url": "https://api.github.com/users/sergei3000/followers", "following_url": "https://api.github.com/users/sergei3000/following{/other_user}", "gists_url": "https://api.github.com/users/sergei3000/gists{/gist_id}", "starred_url": "https://api.github.com/users/sergei3000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sergei3000/subscriptions", "organizations_url": "https://api.github.com/users/sergei3000/orgs", "repos_url": "https://api.github.com/users/sergei3000/repos", "events_url": "https://api.github.com/users/sergei3000/events{/privacy}", "received_events_url": "https://api.github.com/users/sergei3000/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-08-21T11:41:01Z", "updated_at": "2019-08-21T12:01:51Z", "closed_at": "2019-08-21T12:01:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is the execution order of methods inside one type like \"before\", \"conditions\" and others guaranteed? Or should I create new states instead?\r\nI could not find an answer to this question in the documentation. It would be great to update it to include an answer to this question.\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/362", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/362/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/362/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/362/events", "html_url": "https://github.com/pytransitions/transitions/issues/362", "id": 482963870, "node_id": "MDU6SXNzdWU0ODI5NjM4NzA=", "number": 362, "title": "Improve isolation in HSM (for reuse and export) ", "user": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 639044365, "node_id": "MDU6TGFiZWw2MzkwNDQzNjU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/draft", "name": "draft", "color": "fbca04", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-20T16:31:31Z", "updated_at": "2020-03-20T13:25:17Z", "closed_at": "2020-03-20T13:25:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, it can be tough to reuse modules if the content and state names are not known (see #332).\r\n\r\n### Current Issues\r\n\r\n* name collision: Since all callbacks/convenience functions are added to the same (set of) model(s), there is a risk of\r\n* configuration is tricky: you cannot just assign a machine as a substate and be done with it\r\n\r\n### Required (currently available) features\r\n\r\n* dispatch: unknown events in submachine should be dispatched to parents\r\n* override: it should be possible to hook into submachine events and override behaviour\r\n\r\n### New Features\r\n\r\n* it should not be necessary to tinker with models when adding a machine to an HSM\r\n* nested models could be used to avoid collisions\r\n* `Machine.states` may only contain root level states and forwards event_handling to `NestedState` if necessary\r\n\r\n```yaml\r\nNestedState:\r\n    name: 'StateName'\r\n    states: []  # list of NestedState\r\n    models: []  # list of local models  \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/359", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/359/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/359/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/359/events", "html_url": "https://github.com/pytransitions/transitions/issues/359", "id": 477288466, "node_id": "MDU6SXNzdWU0NzcyODg0NjY=", "number": 359, "title": "Take a logger parameter to override internal logger", "user": {"login": "dan-bar-dov", "id": 44744269, "node_id": "MDQ6VXNlcjQ0NzQ0MjY5", "avatar_url": "https://avatars3.githubusercontent.com/u/44744269?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dan-bar-dov", "html_url": "https://github.com/dan-bar-dov", "followers_url": "https://api.github.com/users/dan-bar-dov/followers", "following_url": "https://api.github.com/users/dan-bar-dov/following{/other_user}", "gists_url": "https://api.github.com/users/dan-bar-dov/gists{/gist_id}", "starred_url": "https://api.github.com/users/dan-bar-dov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dan-bar-dov/subscriptions", "organizations_url": "https://api.github.com/users/dan-bar-dov/orgs", "repos_url": "https://api.github.com/users/dan-bar-dov/repos", "events_url": "https://api.github.com/users/dan-bar-dov/events{/privacy}", "received_events_url": "https://api.github.com/users/dan-bar-dov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-06T10:04:42Z", "updated_at": "2019-08-14T07:34:26Z", "closed_at": "2019-08-14T07:27:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to incorporate the transitions log in my application log. \r\nIf a machine could take a logger as an optional parameter, it would override the core _LOGGER.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/358", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/358/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/358/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/358/events", "html_url": "https://github.com/pytransitions/transitions/issues/358", "id": 476448614, "node_id": "MDU6SXNzdWU0NzY0NDg2MTQ=", "number": 358, "title": "[Feature request] Support for source/destination information in machine callback", "user": {"login": "Matheus-Garbelini", "id": 6465668, "node_id": "MDQ6VXNlcjY0NjU2Njg=", "avatar_url": "https://avatars2.githubusercontent.com/u/6465668?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matheus-Garbelini", "html_url": "https://github.com/Matheus-Garbelini", "followers_url": "https://api.github.com/users/Matheus-Garbelini/followers", "following_url": "https://api.github.com/users/Matheus-Garbelini/following{/other_user}", "gists_url": "https://api.github.com/users/Matheus-Garbelini/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matheus-Garbelini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matheus-Garbelini/subscriptions", "organizations_url": "https://api.github.com/users/Matheus-Garbelini/orgs", "repos_url": "https://api.github.com/users/Matheus-Garbelini/repos", "events_url": "https://api.github.com/users/Matheus-Garbelini/events{/privacy}", "received_events_url": "https://api.github.com/users/Matheus-Garbelini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-03T12:45:33Z", "updated_at": "2019-08-13T14:51:46Z", "closed_at": "2019-08-13T14:00:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, is it possible to pass the source/destination transition before_state_change or after_state_change callback? I'm trying to log the transition, so if I receive this information in such callbacks I'd be able to do something like this: `print(state + '-->' + destination)`.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/356", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/356/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/356/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/356/events", "html_url": "https://github.com/pytransitions/transitions/issues/356", "id": 472354858, "node_id": "MDU6SXNzdWU0NzIzNTQ4NTg=", "number": 356, "title": "migrate to pytest?", "user": {"login": "artofhuman", "id": 1192122, "node_id": "MDQ6VXNlcjExOTIxMjI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1192122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/artofhuman", "html_url": "https://github.com/artofhuman", "followers_url": "https://api.github.com/users/artofhuman/followers", "following_url": "https://api.github.com/users/artofhuman/following{/other_user}", "gists_url": "https://api.github.com/users/artofhuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/artofhuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/artofhuman/subscriptions", "organizations_url": "https://api.github.com/users/artofhuman/orgs", "repos_url": "https://api.github.com/users/artofhuman/repos", "events_url": "https://api.github.com/users/artofhuman/events{/privacy}", "received_events_url": "https://api.github.com/users/artofhuman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/9", "html_url": "https://github.com/pytransitions/transitions/milestone/9", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/9/labels", "id": 4569935, "node_id": "MDk6TWlsZXN0b25lNDU2OTkzNQ==", "number": 9, "title": "0.8.0", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 3, "state": "closed", "created_at": "2019-08-13T15:46:24Z", "updated_at": "2020-03-20T14:02:15Z", "due_on": null, "closed_at": "2020-03-20T14:02:15Z"}, "comments": 4, "created_at": "2019-07-24T15:38:58Z", "updated_at": "2019-08-22T06:32:00Z", "closed_at": "2019-08-22T06:32:00Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi, @aleneum. \r\nWhat do you think can we migrate this project from `nosetests` to `pytest`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/353", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/353/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/353/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/353/events", "html_url": "https://github.com/pytransitions/transitions/issues/353", "id": 464824426, "node_id": "MDU6SXNzdWU0NjQ4MjQ0MjY=", "number": 353, "title": "Method Chaining", "user": {"login": "prabhatM", "id": 7250780, "node_id": "MDQ6VXNlcjcyNTA3ODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7250780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/prabhatM", "html_url": "https://github.com/prabhatM", "followers_url": "https://api.github.com/users/prabhatM/followers", "following_url": "https://api.github.com/users/prabhatM/following{/other_user}", "gists_url": "https://api.github.com/users/prabhatM/gists{/gist_id}", "starred_url": "https://api.github.com/users/prabhatM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/prabhatM/subscriptions", "organizations_url": "https://api.github.com/users/prabhatM/orgs", "repos_url": "https://api.github.com/users/prabhatM/repos", "events_url": "https://api.github.com/users/prabhatM/events{/privacy}", "received_events_url": "https://api.github.com/users/prabhatM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-06T06:39:59Z", "updated_at": "2019-07-08T14:56:08Z", "closed_at": "2019-07-08T14:56:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does it have method chaining or do we expect soon?\r\n\r\nPrabhat", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/351", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/351/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/351/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/351/events", "html_url": "https://github.com/pytransitions/transitions/issues/351", "id": 446604073, "node_id": "MDU6SXNzdWU0NDY2MDQwNzM=", "number": 351, "title": "Calculating transition based on current state", "user": {"login": "maneeshbhunwal123", "id": 4371726, "node_id": "MDQ6VXNlcjQzNzE3MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4371726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maneeshbhunwal123", "html_url": "https://github.com/maneeshbhunwal123", "followers_url": "https://api.github.com/users/maneeshbhunwal123/followers", "following_url": "https://api.github.com/users/maneeshbhunwal123/following{/other_user}", "gists_url": "https://api.github.com/users/maneeshbhunwal123/gists{/gist_id}", "starred_url": "https://api.github.com/users/maneeshbhunwal123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maneeshbhunwal123/subscriptions", "organizations_url": "https://api.github.com/users/maneeshbhunwal123/orgs", "repos_url": "https://api.github.com/users/maneeshbhunwal123/repos", "events_url": "https://api.github.com/users/maneeshbhunwal123/events{/privacy}", "received_events_url": "https://api.github.com/users/maneeshbhunwal123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-21T12:57:05Z", "updated_at": "2019-08-27T10:46:04Z", "closed_at": "2019-08-27T10:46:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "In my use case I want to calculate trigger based on current state and put that logic inside states. Is this possible by the library? currently the way I see that library works is,\r\nlets say you are on state_1 and define what should happen if trigger_a has happened, but i what if I want to use it like\r\n\r\nlet's say I am on state_1 and input_x has come, not there is big fat business logic in state_1, which determines my target state.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/350", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/350/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/350/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/350/events", "html_url": "https://github.com/pytransitions/transitions/issues/350", "id": 443335737, "node_id": "MDU6SXNzdWU0NDMzMzU3Mzc=", "number": 350, "title": "Issues with the `EventData` object being sent to the callback functions", "user": {"login": "parthsharma1996", "id": 12585488, "node_id": "MDQ6VXNlcjEyNTg1NDg4", "avatar_url": "https://avatars1.githubusercontent.com/u/12585488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parthsharma1996", "html_url": "https://github.com/parthsharma1996", "followers_url": "https://api.github.com/users/parthsharma1996/followers", "following_url": "https://api.github.com/users/parthsharma1996/following{/other_user}", "gists_url": "https://api.github.com/users/parthsharma1996/gists{/gist_id}", "starred_url": "https://api.github.com/users/parthsharma1996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parthsharma1996/subscriptions", "organizations_url": "https://api.github.com/users/parthsharma1996/orgs", "repos_url": "https://api.github.com/users/parthsharma1996/repos", "events_url": "https://api.github.com/users/parthsharma1996/events{/privacy}", "received_events_url": "https://api.github.com/users/parthsharma1996/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-13T11:00:31Z", "updated_at": "2019-08-27T10:46:20Z", "closed_at": "2019-08-27T10:46:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two issues with the `EventData` object being sent to the callback functions:\r\n\r\n\r\nFor most part of our project we didn't really need any event related details like the trigger, transition etc in the callback functions. Hence we do not have the argument `event_data` in any of our callback function definitions. \r\nNow we've hit a requirement in which a `prepare_event` function needs the destination associated with the currently undergoing transition. \r\n\r\nTo implement this currently we'll have to change the function definitions of all of our callback functions, while only a couple of them will actually use this information. \r\nIs there a way to get this information using some internal (`self.xyz`) variable instead of passing the `event_data` function? \r\n\r\n\r\nSecondly, in the `event_data` object being passed to the `prepare_event` functions, the `.transition` attribute is `None` because apparently they are only set before the execution of a transition which is attributed to this code (Line 403 onwards in `core.py`)\r\n\r\n    def _process(self, event_data):\r\n        for func in self.machine.prepare_event:\r\n            self.machine.callback(func, event_data)\r\n            _LOGGER.debug(\"Executed machine preparation callback '%s' before conditions.\", func)\r\n\r\n        try:\r\n            for trans in self.transitions[event_data.state.name]:\r\n                event_data.transition = trans\r\n                if trans.execute(event_data):\r\n                    event_data.result = True\r\n                    break\r\n\r\n1. Can you explain why this is the case and why aren't the `prepare_event` functions being called before instead of being called with each transition? \r\n\r\nOur use-case requires a `prepare_event` function to know the `dest` attribute of the currently  undergoing transition. Is that possible?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/349", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/349/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/349/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/349/events", "html_url": "https://github.com/pytransitions/transitions/issues/349", "id": 442182195, "node_id": "MDU6SXNzdWU0NDIxODIxOTU=", "number": 349, "title": "Can't trigger event from state", "user": {"login": "Akido-Omega", "id": 48595854, "node_id": "MDQ6VXNlcjQ4NTk1ODU0", "avatar_url": "https://avatars1.githubusercontent.com/u/48595854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akido-Omega", "html_url": "https://github.com/Akido-Omega", "followers_url": "https://api.github.com/users/Akido-Omega/followers", "following_url": "https://api.github.com/users/Akido-Omega/following{/other_user}", "gists_url": "https://api.github.com/users/Akido-Omega/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akido-Omega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akido-Omega/subscriptions", "organizations_url": "https://api.github.com/users/Akido-Omega/orgs", "repos_url": "https://api.github.com/users/Akido-Omega/repos", "events_url": "https://api.github.com/users/Akido-Omega/events{/privacy}", "received_events_url": "https://api.github.com/users/Akido-Omega/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-09T11:11:42Z", "updated_at": "2019-08-13T14:31:36Z", "closed_at": "2019-08-13T14:31:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Hi I'm trying to use HierarchicalMachine and got a error `transitions.core.MachineError: \"Can't trigger event add_funds from state up!\"`\r\n\r\nI don't want use '*' with 'can_add_funds' and want keep state order. What did I miss ?\r\n\r\n```python\r\nfrom transitions.extensions import HierarchicalMachine as Machine\r\n\r\nclass Market(Machine):\r\n\r\n   def __init__(self):\r\n   .......\r\n        states = ['begin',\r\n                        {'name': 'up', 'children':['crossing_basis']},\r\n                        {'name':'flat', 'children': ['crossing_basis','crossing_lower']},\r\n                        {'name': 'down', 'children': ['crossing_lower','lower_diff']}]\r\n\r\n\r\n        Machine.__init__(self, states=trend_states, initial=state, auto_transitions=False)\r\n\r\n        self.add_transition('check_trend','*', 'up', conditions=['is_up_trend'], after=self.print_state)\r\n        self.add_transition('check_trend','*', 'flat', conditions=['is_flat_trend'], after=self.print_state)\r\n        self.add_transition('check_trend','*', 'down', conditions=['is_down_trend'], after=self.print_state)\r\n\r\n        self.add_transition('can_start_deal','up', 'up_crossing_basis',\r\n                            conditions=['deal_basis_cross', 'is_deal_new'],\r\n                            after=self.create_base_order)\r\n        self.add_transition('can_start_deal','flat', 'flat_crossing_basis',\r\n                            conditions=['deal_basis_cross', 'is_deal_new'],\r\n                            after=self.create_base_order)\r\n        self.add_transition('can_start_deal','flat', 'flat_crossing_lower',\r\n                            conditions=['deal_lower_cross', 'is_deal_new'],\r\n                            after=self.create_base_order)\r\n        self.add_transition('can_start_deal','down', 'down_crossing_lower',\r\n                            conditions=['deal_lower_cross', 'is_deal_new'],\r\n                            after=self.create_base_order)\r\n\r\n\r\n        self.add_transition('can_add_funds', 'flat_crossing_basis', 'flat_crossing_lower',\r\n                            conditions=['deal_lower_cross', 'is_deal_bought'], unless='candle_has_order',\r\n                            after=self.create_safety_order)\r\n\r\n        self.add_transition('can_add_funds', 'down_crossing_lower', 'down_lower_diff',\r\n                            conditions=['deal_lower_diff', 'is_deal_bought'], unless='candle_has_order',\r\n                            after=self.create_safety_order)\r\n\r\n       market = Market(deal)\r\n\r\n                market.check_trend()\r\n                print(f\"{market.deal.symbol} {market.state}\")\r\n                market.can_start_deal()\r\n                print(f\"get_triggers {market.get_triggers('flat_crossing_lower')}\")\r\n                market.can_add_funds()`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/348", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/348/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/348/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/348/events", "html_url": "https://github.com/pytransitions/transitions/issues/348", "id": 441846328, "node_id": "MDU6SXNzdWU0NDE4NDYzMjg=", "number": 348, "title": "RuntimeError: this event loop is already running.", "user": {"login": "alexcrownjr", "id": 35556369, "node_id": "MDQ6VXNlcjM1NTU2MzY5", "avatar_url": "https://avatars3.githubusercontent.com/u/35556369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrownjr", "html_url": "https://github.com/alexcrownjr", "followers_url": "https://api.github.com/users/alexcrownjr/followers", "following_url": "https://api.github.com/users/alexcrownjr/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrownjr/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrownjr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrownjr/subscriptions", "organizations_url": "https://api.github.com/users/alexcrownjr/orgs", "repos_url": "https://api.github.com/users/alexcrownjr/repos", "events_url": "https://api.github.com/users/alexcrownjr/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrownjr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-08T17:31:39Z", "updated_at": "2019-08-27T11:10:08Z", "closed_at": "2019-08-27T11:10:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using dev-async branch and got this error \"RuntimeError: this event loop is already running.\" ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/347", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/347/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/347/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/347/events", "html_url": "https://github.com/pytransitions/transitions/issues/347", "id": 440700173, "node_id": "MDU6SXNzdWU0NDA3MDAxNzM=", "number": 347, "title": "Merge two machines together", "user": {"login": "parthsharma1996", "id": 12585488, "node_id": "MDQ6VXNlcjEyNTg1NDg4", "avatar_url": "https://avatars1.githubusercontent.com/u/12585488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/parthsharma1996", "html_url": "https://github.com/parthsharma1996", "followers_url": "https://api.github.com/users/parthsharma1996/followers", "following_url": "https://api.github.com/users/parthsharma1996/following{/other_user}", "gists_url": "https://api.github.com/users/parthsharma1996/gists{/gist_id}", "starred_url": "https://api.github.com/users/parthsharma1996/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/parthsharma1996/subscriptions", "organizations_url": "https://api.github.com/users/parthsharma1996/orgs", "repos_url": "https://api.github.com/users/parthsharma1996/repos", "events_url": "https://api.github.com/users/parthsharma1996/events{/privacy}", "received_events_url": "https://api.github.com/users/parthsharma1996/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-06T13:28:37Z", "updated_at": "2019-08-27T10:46:42Z", "closed_at": "2019-08-27T10:46:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "I currently have two machines in different files.\r\n\r\nIt is possible to _merge_ these two machines together such that I end up with a bigger machine which has the superset of all states and transitions.\r\n\r\nBasically I want to keep these two machine modular and avoid\r\n\r\n1. Manually copying the `states`, `transitions` etc from one file to another.\r\n2. Importing the python module and then manually writing `self.states = machine1.states + machine2.states`. \r\n\t- Also since I have written a lot of functions in these classes anyway I am not sure how I can \"add\" functions.\r\n\r\nI did look at the solution for https://github.com/pytransitions/transitions/issues/271 \r\nbut I don't want to make the other machine a child of the first one. I want them to be of the same level. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/346", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/346/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/346/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/346/events", "html_url": "https://github.com/pytransitions/transitions/issues/346", "id": 440606464, "node_id": "MDU6SXNzdWU0NDA2MDY0NjQ=", "number": 346, "title": "Proposal to add callback if condition is not satisfied", "user": {"login": "amitabhn", "id": 10218330, "node_id": "MDQ6VXNlcjEwMjE4MzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10218330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitabhn", "html_url": "https://github.com/amitabhn", "followers_url": "https://api.github.com/users/amitabhn/followers", "following_url": "https://api.github.com/users/amitabhn/following{/other_user}", "gists_url": "https://api.github.com/users/amitabhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitabhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitabhn/subscriptions", "organizations_url": "https://api.github.com/users/amitabhn/orgs", "repos_url": "https://api.github.com/users/amitabhn/repos", "events_url": "https://api.github.com/users/amitabhn/events{/privacy}", "received_events_url": "https://api.github.com/users/amitabhn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-06T09:08:00Z", "updated_at": "2019-09-13T07:57:20Z", "closed_at": "2019-09-13T07:57:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "It might be a good idea to be able to add a callback function that will be called if the given conditions could not be satisfied. This would keep the transition concise, readable and easily understandable without needing to add multiple transitions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/345", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/345/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/345/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/345/events", "html_url": "https://github.com/pytransitions/transitions/issues/345", "id": 440602272, "node_id": "MDU6SXNzdWU0NDA2MDIyNzI=", "number": 345, "title": "Proposal for adding list of triggers to transition configuration", "user": {"login": "amitabhn", "id": 10218330, "node_id": "MDQ6VXNlcjEwMjE4MzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10218330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitabhn", "html_url": "https://github.com/amitabhn", "followers_url": "https://api.github.com/users/amitabhn/followers", "following_url": "https://api.github.com/users/amitabhn/following{/other_user}", "gists_url": "https://api.github.com/users/amitabhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitabhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitabhn/subscriptions", "organizations_url": "https://api.github.com/users/amitabhn/orgs", "repos_url": "https://api.github.com/users/amitabhn/repos", "events_url": "https://api.github.com/users/amitabhn/events{/privacy}", "received_events_url": "https://api.github.com/users/amitabhn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-06T08:56:00Z", "updated_at": "2019-08-27T11:07:03Z", "closed_at": "2019-08-27T11:07:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "It might be a good idea to be able to add multiple triggers to the same source and destination state transition. Given that the transitions configuration list forms the core logic of the state machine, I would want it to be as concise, readable and easily understandable as possible and not make it too verbose. So instead of having to define multiple transition dicts for multiple triggers but same source and destination state (and other callbacks), it would be better to keep it centralized at one place.\r\nExample:\r\n`transitions = [\r\n    { 'trigger': 'start_cmd_from_local_button', 'source': 'standby', 'dest': 'active' },\r\n    { 'trigger': 'start_cmd_from_remote_server', 'source': 'standby', 'dest': 'active' }\r\n]`\r\ncan be condensed into\r\n`transitions = [\r\n    { 'trigger': ['start_from_local_button', 'start_from_remote_server'], 'source': 'standby', 'dest': 'active' }\r\n]`\r\n\r\nAlso, this wouldn't be too hard to implement as the Machine can be easily extended. But can this functionality be made part of the core library?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/344", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/344/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/344/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/344/events", "html_url": "https://github.com/pytransitions/transitions/issues/344", "id": 440415786, "node_id": "MDU6SXNzdWU0NDA0MTU3ODY=", "number": 344, "title": "Calling next_state() does not fire any conditions ", "user": {"login": "stmezzo", "id": 42194011, "node_id": "MDQ6VXNlcjQyMTk0MDEx", "avatar_url": "https://avatars0.githubusercontent.com/u/42194011?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stmezzo", "html_url": "https://github.com/stmezzo", "followers_url": "https://api.github.com/users/stmezzo/followers", "following_url": "https://api.github.com/users/stmezzo/following{/other_user}", "gists_url": "https://api.github.com/users/stmezzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/stmezzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stmezzo/subscriptions", "organizations_url": "https://api.github.com/users/stmezzo/orgs", "repos_url": "https://api.github.com/users/stmezzo/repos", "events_url": "https://api.github.com/users/stmezzo/events{/privacy}", "received_events_url": "https://api.github.com/users/stmezzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-05T08:10:03Z", "updated_at": "2019-08-19T20:02:00Z", "closed_at": "2019-08-19T20:02:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that when using ordered transitions, calling next_state() does not seem to fire off the condition:\r\n\r\n```python\r\nfrom transitions import State, Machine\r\nclass Matter(Machine):\r\n    def is_flammable(self):\r\n        print('got inside here flammable')`\r\n        return False\r\n    def is_really_hot(self):\r\n        print('got inside here really hot')\r\n        return True\r\n\r\n    def __init__(self):\r\n\r\n        states = [\r\n                    State(name='aaa'),\r\n                    State(name='bbb'),\r\n                    State(name='ccc'),\r\n                  ]\r\n\r\n        transitions = [\r\n                    {'trigger': 'heat', 'source': 'aaa', 'dest': 'bbb', 'conditions': ['is_flammable']},\r\n                    {'trigger': 'heat2', 'source': 'bbb', 'dest': 'ccc', 'conditions': ['is_really_hot']},\r\n                ]\r\n\r\n        Machine.__init__(self, states=states, transitions=transitions, initial='bbb')\r\n        self.add_ordered_transitions()\r\n```\r\nCalling with next_state():\r\n```python\r\nlump = Matter()\r\nprint(lump.state)\r\nlump.next_state()\r\nprint(lump.state)\r\n```\r\nOutput:\r\n```python\r\nbbb\r\nccc\r\n```\r\n\r\nCalling with heat2():\r\n```python\r\nlump = Matter()\r\nprint(lump.state)\r\nlump.heat2()\r\nprint(lump.state)\r\n```\r\nOutput:\r\n```python\r\nbbb\r\ngot inside here really hot\r\nccc\r\n```\r\n\r\nAs you can see, only calling with heat2() fires the condition 'is_really_hot'", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/343", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/343/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/343/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/343/events", "html_url": "https://github.com/pytransitions/transitions/issues/343", "id": 438761495, "node_id": "MDU6SXNzdWU0Mzg3NjE0OTU=", "number": 343, "title": "get_graph attribute not found", "user": {"login": "UltraHector", "id": 3948073, "node_id": "MDQ6VXNlcjM5NDgwNzM=", "avatar_url": "https://avatars1.githubusercontent.com/u/3948073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/UltraHector", "html_url": "https://github.com/UltraHector", "followers_url": "https://api.github.com/users/UltraHector/followers", "following_url": "https://api.github.com/users/UltraHector/following{/other_user}", "gists_url": "https://api.github.com/users/UltraHector/gists{/gist_id}", "starred_url": "https://api.github.com/users/UltraHector/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/UltraHector/subscriptions", "organizations_url": "https://api.github.com/users/UltraHector/orgs", "repos_url": "https://api.github.com/users/UltraHector/repos", "events_url": "https://api.github.com/users/UltraHector/events{/privacy}", "received_events_url": "https://api.github.com/users/UltraHector/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/7", "html_url": "https://github.com/pytransitions/transitions/milestone/7", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/7/labels", "id": 3009690, "node_id": "MDk6TWlsZXN0b25lMzAwOTY5MA==", "number": 7, "title": "0.7.0", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-01-03T10:08:36Z", "updated_at": "2019-09-02T14:10:02Z", "due_on": null, "closed_at": "2019-09-02T14:10:02Z"}, "comments": 2, "created_at": "2019-04-30T12:50:50Z", "updated_at": "2019-08-20T15:32:20Z", "closed_at": "2019-08-20T15:32:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems that if you use the LockedHierarchicalGraphMachine and use 'add_model' method. \r\nThe get_graph method is not added to the models. The following code will reproduce the error.\r\n```\r\nfrom transitions.extensions import LockedHierarchicalGraphMachine\r\nclass Matter():\r\n    pass\r\n\r\nlump1 = Matter()\r\nlump2 = Matter()\r\n\r\nstates=['solid', 'liquid', 'gas', 'plasma']\r\ntransitions = [\r\n    { 'trigger': 'melt', 'source': 'solid', 'dest': 'liquid'},\r\n]\r\n\r\nmachine = LockedHierarchicalGraphMachine(states=states, transitions=transitions, initial='solid')\r\n\r\nmachine.add_model(lump1)\r\nmachine.add_model(lump2, initial='solid')\r\n\r\nlump2.melt()\r\nprint(lump1.state)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/342", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/342/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/342/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/342/events", "html_url": "https://github.com/pytransitions/transitions/issues/342", "id": 438665563, "node_id": "MDU6SXNzdWU0Mzg2NjU1NjM=", "number": 342, "title": "Proposal for \"during\" action in addition to \"entry\" and \"exit\".", "user": {"login": "slovak194", "id": 7280672, "node_id": "MDQ6VXNlcjcyODA2NzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/7280672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slovak194", "html_url": "https://github.com/slovak194", "followers_url": "https://api.github.com/users/slovak194/followers", "following_url": "https://api.github.com/users/slovak194/following{/other_user}", "gists_url": "https://api.github.com/users/slovak194/gists{/gist_id}", "starred_url": "https://api.github.com/users/slovak194/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slovak194/subscriptions", "organizations_url": "https://api.github.com/users/slovak194/orgs", "repos_url": "https://api.github.com/users/slovak194/repos", "events_url": "https://api.github.com/users/slovak194/events{/privacy}", "received_events_url": "https://api.github.com/users/slovak194/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-30T08:49:31Z", "updated_at": "2019-09-13T07:57:57Z", "closed_at": "2019-09-13T07:57:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!\r\n\r\nI like \"transitions\", but I also had a nice experience working with another FSM framework (another language) and what is really missing for me in \"transitions\" is a \"during\" action callback.\r\n\r\n**during Actions:**\r\nDuring actions are executed when a state is active, an event occurs, and no valid transition to another state is available.\r\n\r\nI see that there is a possibility to emulate this with inner transitions with \"prepare\" callback, but it is not exactly the same.\r\nIs it desired to extend functionality of \"transitions\" with such semantic?\r\n\r\nBR,\r\nAlex", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/341", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/341/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/341/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/341/events", "html_url": "https://github.com/pytransitions/transitions/issues/341", "id": 432105787, "node_id": "MDU6SXNzdWU0MzIxMDU3ODc=", "number": 341, "title": "Async support lacks support for State.enter/exit and cannot handle synchronized conditions", "user": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204903, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDM=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2019-04-11T16:06:07Z", "updated_at": "2019-04-11T19:27:09Z", "closed_at": "2019-04-11T19:27:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Currently, not every callback in `dev-async` is handled correctly. Found by @ablakey in #259.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/339", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/339/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/339/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/339/events", "html_url": "https://github.com/pytransitions/transitions/issues/339", "id": 429484697, "node_id": "MDU6SXNzdWU0Mjk0ODQ2OTc=", "number": 339, "title": "get_models feature request", "user": {"login": "dea-n", "id": 3758845, "node_id": "MDQ6VXNlcjM3NTg4NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3758845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dea-n", "html_url": "https://github.com/dea-n", "followers_url": "https://api.github.com/users/dea-n/followers", "following_url": "https://api.github.com/users/dea-n/following{/other_user}", "gists_url": "https://api.github.com/users/dea-n/gists{/gist_id}", "starred_url": "https://api.github.com/users/dea-n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dea-n/subscriptions", "organizations_url": "https://api.github.com/users/dea-n/orgs", "repos_url": "https://api.github.com/users/dea-n/repos", "events_url": "https://api.github.com/users/dea-n/events{/privacy}", "received_events_url": "https://api.github.com/users/dea-n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-04-04T21:10:13Z", "updated_at": "2019-08-16T10:07:04Z", "closed_at": "2019-08-16T10:07:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be cool if a list of models could be retrieved that have been added using add_model(). What wold be cooler is if the get_model function took a state argument and returned all models in that state.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/338", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/338/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/338/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/338/events", "html_url": "https://github.com/pytransitions/transitions/issues/338", "id": 428756239, "node_id": "MDU6SXNzdWU0Mjg3NTYyMzk=", "number": 338, "title": "Set state doesn't trigger on_enter", "user": {"login": "mumrau", "id": 14805850, "node_id": "MDQ6VXNlcjE0ODA1ODUw", "avatar_url": "https://avatars1.githubusercontent.com/u/14805850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mumrau", "html_url": "https://github.com/mumrau", "followers_url": "https://api.github.com/users/mumrau/followers", "following_url": "https://api.github.com/users/mumrau/following{/other_user}", "gists_url": "https://api.github.com/users/mumrau/gists{/gist_id}", "starred_url": "https://api.github.com/users/mumrau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mumrau/subscriptions", "organizations_url": "https://api.github.com/users/mumrau/orgs", "repos_url": "https://api.github.com/users/mumrau/repos", "events_url": "https://api.github.com/users/mumrau/events{/privacy}", "received_events_url": "https://api.github.com/users/mumrau/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-04-03T13:05:01Z", "updated_at": "2019-04-12T15:44:13Z", "closed_at": "2019-04-12T14:14:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI have a machine which gets its initial state dinamycally assigned, and I can't get the `on_enter` of my desired initial state to run.\r\nI know that the `on_enter` is not triggered on the initial state, taht's why I am using a dummy state and then calling `set_state(my_dynamic_state)`. Nonetheless, this event doesn't trigger the desired `on_enter` method.\r\nIt doesn't look coherent with the table describing the callbacks order in the documentation that's why I'm quite surprised, there might be a bug given the expected behavior.\r\n\r\nThank you in advance, the library is quite awesome anyway !!\r\nEDIT: my workaround is the following:\r\n```python\r\non_enter = getattr(model, \"to_\" + entry.phase)\r\n    on_enter()\r\n```\r\nBut it isn't really elegant to be honest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/336", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/336/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/336/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/336/events", "html_url": "https://github.com/pytransitions/transitions/issues/336", "id": 408225894, "node_id": "MDU6SXNzdWU0MDgyMjU4OTQ=", "number": 336, "title": "'OR' conditions", "user": {"login": "ccattywampus", "id": 35576338, "node_id": "MDQ6VXNlcjM1NTc2MzM4", "avatar_url": "https://avatars2.githubusercontent.com/u/35576338?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ccattywampus", "html_url": "https://github.com/ccattywampus", "followers_url": "https://api.github.com/users/ccattywampus/followers", "following_url": "https://api.github.com/users/ccattywampus/following{/other_user}", "gists_url": "https://api.github.com/users/ccattywampus/gists{/gist_id}", "starred_url": "https://api.github.com/users/ccattywampus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ccattywampus/subscriptions", "organizations_url": "https://api.github.com/users/ccattywampus/orgs", "repos_url": "https://api.github.com/users/ccattywampus/repos", "events_url": "https://api.github.com/users/ccattywampus/events{/privacy}", "received_events_url": "https://api.github.com/users/ccattywampus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-08T16:25:56Z", "updated_at": "2019-02-08T16:49:28Z", "closed_at": "2019-02-08T16:48:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible to implement something similar to the 'OR' operation for conditions?\r\n\r\nCurrently we have something akin to AND in 'conditions' and NOT AND in 'unless'.\r\n\r\nHowever, there are many instances wherein you want to take a certain route if one-of-many is either true or false.\r\n\r\nCurious to hear your feedback!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/335", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/335/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/335/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/335/events", "html_url": "https://github.com/pytransitions/transitions/issues/335", "id": 405170976, "node_id": "MDU6SXNzdWU0MDUxNzA5NzY=", "number": 335, "title": "AttributeError: 'indicate_logged_in' does not exist on <Machine@82249904>", "user": {"login": "Edvard-D", "id": 12294778, "node_id": "MDQ6VXNlcjEyMjk0Nzc4", "avatar_url": "https://avatars1.githubusercontent.com/u/12294778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edvard-D", "html_url": "https://github.com/Edvard-D", "followers_url": "https://api.github.com/users/Edvard-D/followers", "following_url": "https://api.github.com/users/Edvard-D/following{/other_user}", "gists_url": "https://api.github.com/users/Edvard-D/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edvard-D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edvard-D/subscriptions", "organizations_url": "https://api.github.com/users/Edvard-D/orgs", "repos_url": "https://api.github.com/users/Edvard-D/repos", "events_url": "https://api.github.com/users/Edvard-D/events{/privacy}", "received_events_url": "https://api.github.com/users/Edvard-D/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-31T10:11:59Z", "updated_at": "2019-02-04T11:01:27Z", "closed_at": "2019-02-04T11:01:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've run into an error that I've been trying to make sense of. For context, I have the following base class that derives from Machine and implements the state machine, initialized as follows:\r\n\r\n`\r\n\r\n    def __init__(self, label: str):\r\n        self.label = label\r\n        states = [\r\n            'logged_in',\r\n            'logged_out'\r\n        ]\r\n        super(Base, self).__init__(states=states, initial='logged_out')\r\n        self.add_transition('log_in', 'logged_out', 'logged_in')\r\n        self.add_transition('log_out', 'logged_in', 'logged_out')`\r\n\r\nThis class has a method that uses asyncio and arsenic (async webdriver) to have the user authenticate themselves.\r\n\r\n`\r\n\r\n    async def authenticate(self):\r\n        async with visible.get_session() as session:\r\n            await session.get(self.login_url)\r\n            while self.state == 'logged_out':\r\n                try:\r\n                    await session.get_element(self.element_selector)\r\n                    self.cookies = session.get_all_cookies()\r\n                    self.log_in()\r\n                except arsenic.errors.NoSuchElement:\r\n                    await asyncio.sleep(1)`\r\n\r\nYou can see that I'm trying to transition the state using `self.log_in`, but I'm running into an error. Am I doing something wrong?\r\n\r\n`Traceback (most recent call last):\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 1018, in resolve_callable\r\n    func = getattr(event_data.model, func)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 1108, in __getattr__\r\n    raise AttributeError(\"'{}' does not exist on <Machine@{}>\".format(name, id(self)))\r\nAttributeError: 'indicate_logged_in' does not exist on <Machine@82249904>`\r\n\r\n`During handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 1021, in resolve_callable\r\n    mod, name = func.rsplit('.', 1)\r\nValueError: not enough values to unpack (expected 2, got 1)`\r\n\r\n`During handling of the above exception, another exception occurred:\r\nTraceback (most recent call last):\r\n  File \"c:\\Users\\HP\\.vscode\\extensions\\ms-python.python-2019.1.0\\pythonFiles\\ptvsd_launcher.py\", line 45, in <module>\r\n    main(ptvsdArgs)\r\n  File \"c:\\Users\\HP\\.vscode\\extensions\\ms-python.python-2019.1.0\\pythonFiles\\lib\\python\\ptvsd\\__main__.py\", line 348, in main\r\n    run()\r\n  File \"c:\\Users\\HP\\.vscode\\extensions\\ms-python.python-2019.1.0\\pythonFiles\\lib\\python\\ptvsd\\__main__.py\", line 253, in run_file\r\n    runpy.run_path(target, run_name='__main__')\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\runpy.py\", line 263, in run_path\r\n    pkg_name=pkg_name, script_name=fname)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\runpy.py\", line 96, in _run_module_code\r\n    mod_name, mod_spec, pkg_name, script_name)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\HP\\Desktop\\Automator\\setup.py\", line 27, in <module>\r\n    main()\r\n  File \"C:\\Users\\HP\\Desktop\\Automator\\setup.py\", line 23, in main\r\n    loop.run_until_complete(kl24.authenticate())\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\asyncio\\base_events.py\", line 568, in run_until_complete\r\n    return future.result()\r\n  File \"C:\\Users\\HP\\Desktop\\Automator\\automator\\domains\\kl24.py\", line 20, in authenticate\r\n    self.log_in()\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 383, in trigger\r\n    return self.machine._process(func)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 1046, in _process\r\n    return trigger()\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 399, in _trigger\r\n    return self._process(event_data)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 409, in _process\r\n    if trans.execute(event_data):\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 263, in execute\r\n    self._change_state(event_data)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 274, in _change_state\r\n    event_data.machine.get_state(self.dest).enter(event_data)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 120, in enter\r\n    event_data.machine.callback(handle, event_data)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 1001, in callback\r\n    func = self.resolve_callable(func, event_data)\r\n  File \"C:\\Users\\HP\\AppData\\Local\\Programs\\Python\\Python37-32\\lib\\site-packages\\transitions\\core.py\", line 1027, in resolve_callable\r\n    raise AttributeError(\"Callable with name '%s' could neither be retrieved from the passed \"\r\nAttributeError: Callable with name '%s' could neither be retrieved from the passed model nor imported from a module.`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/334", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/334/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/334/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/334/events", "html_url": "https://github.com/pytransitions/transitions/issues/334", "id": 405001444, "node_id": "MDU6SXNzdWU0MDUwMDE0NDQ=", "number": 334, "title": "Flexible state type", "user": {"login": "justinttl", "id": 9387665, "node_id": "MDQ6VXNlcjkzODc2NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/9387665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justinttl", "html_url": "https://github.com/justinttl", "followers_url": "https://api.github.com/users/justinttl/followers", "following_url": "https://api.github.com/users/justinttl/following{/other_user}", "gists_url": "https://api.github.com/users/justinttl/gists{/gist_id}", "starred_url": "https://api.github.com/users/justinttl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justinttl/subscriptions", "organizations_url": "https://api.github.com/users/justinttl/orgs", "repos_url": "https://api.github.com/users/justinttl/repos", "events_url": "https://api.github.com/users/justinttl/events{/privacy}", "received_events_url": "https://api.github.com/users/justinttl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/10", "html_url": "https://github.com/pytransitions/transitions/milestone/10", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/10/labels", "id": 4589537, "node_id": "MDk6TWlsZXN0b25lNDU4OTUzNw==", "number": 10, "title": "0.7.1", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 1, "state": "closed", "created_at": "2019-08-20T15:36:37Z", "updated_at": "2020-03-20T14:02:12Z", "due_on": null, "closed_at": "2020-03-20T14:02:12Z"}, "comments": 8, "created_at": "2019-01-30T22:52:15Z", "updated_at": "2019-08-21T01:22:42Z", "closed_at": "2019-08-20T15:40:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "**Problem**\r\nCurrently, it is impossible to define states for a machine as an iterable collection of objects (Enums).\r\n \r\n![image](https://user-images.githubusercontent.com/9387665/52018141-6f834600-24b7-11e9-99cd-babfd3b2b821.png)\r\n\r\nConsidering that it is now possible to set callbacks directly with reference to the Callable (#82 #83), this seems like another step to remove more loose string based referencing. More type hint + intellisense \\m/\r\n\r\n![image](https://user-images.githubusercontent.com/9387665/52016856-a8b9b700-24b3-11e9-9e60-9a223d23a60a.png)\r\n\r\nIf you attempt to feed in a list of Enum objects...\r\n![image](https://user-images.githubusercontent.com/9387665/52017875-aa38ae80-24b6-11e9-8b09-e5e1ff759ea8.png)\r\n\r\n\r\n**Feature Request**\r\nIt would be nice if passing states as Enums or any generic iterable is natively supported.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/333", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/333/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/333/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/333/events", "html_url": "https://github.com/pytransitions/transitions/issues/333", "id": 404866559, "node_id": "MDU6SXNzdWU0MDQ4NjY1NTk=", "number": 333, "title": "Machineinitialization with NestedStates fails in v0.6.9 but works in v0.5.2", "user": {"login": "Blindfreddy", "id": 11428188, "node_id": "MDQ6VXNlcjExNDI4MTg4", "avatar_url": "https://avatars2.githubusercontent.com/u/11428188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blindfreddy", "html_url": "https://github.com/Blindfreddy", "followers_url": "https://api.github.com/users/Blindfreddy/followers", "following_url": "https://api.github.com/users/Blindfreddy/following{/other_user}", "gists_url": "https://api.github.com/users/Blindfreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blindfreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blindfreddy/subscriptions", "organizations_url": "https://api.github.com/users/Blindfreddy/orgs", "repos_url": "https://api.github.com/users/Blindfreddy/repos", "events_url": "https://api.github.com/users/Blindfreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/Blindfreddy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-30T16:55:31Z", "updated_at": "2019-01-31T11:26:12Z", "closed_at": "2019-01-31T11:26:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I recently updated from 0.5.2 to 0.6.9 but now my machine initialization doesn't work anymore when I have nested states, ie a state with a substate. Any suggestions would be welcome. \r\n\r\nWithout substates it works same in 0.5.2 and 0.6.9\r\n\r\nThe approach is that I build a dictionary with all the relevant parameters matching Machine's  constructor signature, then pass that dictionary in expanded form to instantiate the Machine. The example below is 'dumbed down' to demonstrate the problem.\r\n\r\n```\r\nimport copy\r\nfrom transitions.extensions import HierarchicalMachine as Machine\r\nfrom transitions.extensions.nesting import NestedState\r\n\r\nNS_SEP = '_'\r\n\r\nstates = [{'name' : 'ON', }]\r\n\r\nsm_def = {'states' : states}\r\n\r\nd = {}\r\nd['states'] = [NestedState(**s) for s in sm_def['states']]\r\nm = Machine(**d)\r\nprint(f\"Machine: {m}\")\r\nprint(f\"Machine states: {m.states}\")\r\nprint(f\"works like a charm !\\n\")\r\n\r\n######################\r\n# works fine to here #\r\n######################\r\n\r\n\r\n# now add substate\r\nm = None\r\nprint(f\"now with substates, doesn't work !\")\r\nfc_sm = copy.deepcopy(sm_def)\r\nfc_sm['sub_states'] = [\r\n    {\r\n        'name' : 'BELOW_SETPOINT',\r\n        'parent' : 'ON'\r\n    },\r\n]\r\n\r\nsm_def = fc_sm\r\nfor sub_state in sm_def['sub_states']:\r\n    sub_state['parent'] = [\r\n        state for state in d['states'] if \r\n        state.name == sub_state['parent']][0] \r\n    print(\"added substate {}.\".format(sub_state))\r\nmy_sub_states = [NestedState(**i) for i in sm_def['sub_states']]\r\nd['states'].extend(my_sub_states)\r\n\r\nprint(f\"Machine substates: {my_sub_states}\")\r\nprint(d)\r\n\r\n\r\n####################################\r\n#  works in 0.5.2 but fails in 0.6.9\r\n####################################\r\nm1 = Machine(**d)\r\n\r\nprint(f\"Machine: {m}\")\r\nprint(f\"Machine states: {m.states}\")\r\n```\r\nOutput:\r\n```\r\nMachine: <transitions.extensions.nesting.HierarchicalMachine object at 0x10f2ee5c0>\r\nMachine states: OrderedDict([('ON', <NestedState('ON')@4549698896>), ('initial', <NestedState('initial')@4555485648>)])\r\nworks like a charm !\r\n\r\nnow with substates, doesn't work !\r\nadded substate {'name': 'BELOW_SETPOINT', 'parent': <NestedState('ON')@4549698896>}.\r\nMachine substates: [<NestedState('ON_BELOW_SETPOINT')@4555509488>]\r\n{'states': [<NestedState('ON')@4549698896>, <NestedState('ON_BELOW_SETPOINT')@4555509488>]}\r\nTraceback (most recent call last):\r\n  File \"pkg1/smt.py\", line 50, in <module>\r\n    m1 = Machine(**d)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/transitions/extensions/nesting.py\", line 268, in __init__\r\n    _super(HierarchicalMachine, self).__init__(*args, **kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/transitions/core.py\", line 558, in __init__\r\n    self.add_states(states)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/transitions/extensions/nesting.py\", line 453, in add_states\r\n    ignore_invalid_triggers=ignore_invalid_triggers, **kwargs)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/transitions/extensions/nesting.py\", line 442, in _traverse\r\n    % (new.name, state_names))\r\nValueError: State ON_BELOW_SETPOINT cannot be added since it is already in state list ['ON', 'ON_BELOW_SETPOINT', 'ON_BELOW_SETPOINT'].\r\n```\r\n\r\nAs you can see it complains that the substate is already there.....\r\n\r\nHopefully something simple to fix....or maybe I have to use a different initialization approach now.\r\n\r\nThanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/332", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/332/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/332/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/332/events", "html_url": "https://github.com/pytransitions/transitions/issues/332", "id": 401874172, "node_id": "MDU6SXNzdWU0MDE4NzQxNzI=", "number": 332, "title": "Nested machine not working as expected", "user": {"login": "keivanzavari", "id": 3716940, "node_id": "MDQ6VXNlcjM3MTY5NDA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3716940?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keivanzavari", "html_url": "https://github.com/keivanzavari", "followers_url": "https://api.github.com/users/keivanzavari/followers", "following_url": "https://api.github.com/users/keivanzavari/following{/other_user}", "gists_url": "https://api.github.com/users/keivanzavari/gists{/gist_id}", "starred_url": "https://api.github.com/users/keivanzavari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keivanzavari/subscriptions", "organizations_url": "https://api.github.com/users/keivanzavari/orgs", "repos_url": "https://api.github.com/users/keivanzavari/repos", "events_url": "https://api.github.com/users/keivanzavari/events{/privacy}", "received_events_url": "https://api.github.com/users/keivanzavari/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-22T17:31:32Z", "updated_at": "2019-08-20T16:37:10Z", "closed_at": "2019-08-20T16:37:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi \r\nI have been looking at closed issues, SO, and googling to solve this issue. But I haven't been able to solve my problem and this seems to be the only way to describe it and hope to get an answer.\r\nI am making a state machine which can include several substates which are also all state machines. So this basically boils down to reusing HSM according to readme.\r\n\r\nmy highest level SM looks like this:\r\n```python\r\nfrom transitions.extensions import LockedHierarchicalMachine as Machine\r\nfrom coordination.running import RunningStateMachine\r\n\r\nlogging.basicConfig(level=logging.ERROR)\r\nlogging.getLogger(\"transitions\").setLevel(logging.INFO)\r\n\r\nclass RPPStateMachine(Machine):\r\n    def __init__(self, name):\r\n        self._running = RunningStateMachine()\r\n        self.name = name\r\n        states = [\r\n            \"init\",\r\n            {\"name\": \"running\", \"children\": self._running},\r\n            \"stop\",\r\n        ]\r\n\r\n        Machine.__init__(self, states=states, initial=\"init\")\r\n\r\n        self.add_transition(\"e_run\", \"init\", \"run\", after=self.run_machine)\r\n        self.add_transition(\"e_stop\", \"*\", \"stop\")\r\n\r\n    def run_machine(self):\r\n        self._running.initialize()\r\n```\r\nAs you see a state machine with three states `init`, `running` and `stop`. Once the event `e_run()` is sent via something like\r\n```python\r\nmachine = RPPStateMachine(\"my_machine\")\r\nmachine.e_run()\r\n```\r\nmachine transitions to `running` state. \r\n_I do it in an indirect way because I wanted things to happen automatically. `e_run()` transitions to `running` and after `run_machine` calls `initialize` method of running class which fires an event to start up the chain of events. Below I show `running` and that clears thing up._\r\n\r\nSo the running state is defined as\r\n\r\n```python\r\nfrom transitions.extensions import LockedHierarchicalMachine as Machine\r\nfrom coordination.test_mode import TestingStateMachine\r\nfrom coordination.release_mode import ReleaseStateMachine\r\n\r\nclass RunningStateMachine(Machine):\r\n    def __init__(self):\r\n        self._test_mode = TestingStateMachine()\r\n        self._release_demo = ReleaseStateMachine()\r\n        states = [\r\n            \"init\",\r\n            \"configuration\",\r\n            \"idle\",\r\n            {\"name\": \"test_mode\", \"children\": self._test_mode},\r\n            {\"name\": \"release_mode\", \"children\": self._release_mode},\r\n        ]\r\n\r\n        Machine.__init__(self, states=states, initial=\"init\")\r\n        self.add_transition(\"e_start_running\", \"init\", \"configuration\", after=self.configuration)\r\n        self.add_transition(\"e_success_config\", \"configuration\", \"idle\")\r\n        self.add_transition(\"e_test_mode\", \"idle\", \"test_mode\")\r\n        self.add_transition(\"e_release_mode\", \"idle\", \"release_mode\")\r\n        self.add_transition(\"e_start_running\", \"idle\", \"init\")\r\n\r\n    def initialize(self):\r\n        print(\"Initialization step for running, emitting e_start.\")\r\n        self.e_start_running()\r\n\r\n    def configuration(self):\r\n        print(\"Configuring...\")\r\n        print( \"Current state: \" + self.state)\r\n\r\n        self.e_success_config()\r\n```\r\n\r\nwhich similar to its parent, is composed of a few states and a few substates.\r\nI have also enabled logging to see which states I enter and exit. To my experience, nesting state machines is very useful as you can reuse the states you have written before. Besides as your state machine grows, it helps to keep things more modular. So no state becomes huge and difficult to read/understand.\r\n\r\nSo the unusual behavior is that when `e_run()` is called I get prints of\r\n```python\r\nINFO:transitions.core:Entered state running\r\nINFO:transitions.core:Entered state running_init\r\nInitialization step for running, emitting e_start.\r\nINFO:transitions.core:Exited state init\r\nINFO:transitions.core:Entered state configuration\r\nConfiguring...\r\ncurrent state: configuration\r\nINFO:transitions.core:Exited state configuration\r\nINFO:transitions.core:Entered state idle\r\n```\r\n\r\nAs you see \r\n```python\r\nmachine.state\r\n>>> 'running_init'\r\n```\r\nwhile\r\n```python\r\nmachine._running.state\r\n>>> 'idle'\r\n```\r\n\r\nI can of course move the transition definitions to the parent state, but that's unhandy. I cannot do that for all sub-states. Obviously, I want each substate to be responsible for it's own behavior. What is the common practice? Is this a bug or intended behavior?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/331", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/331/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/331/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/331/events", "html_url": "https://github.com/pytransitions/transitions/issues/331", "id": 399216163, "node_id": "MDU6SXNzdWUzOTkyMTYxNjM=", "number": 331, "title": "Multiple models in a single machine, each having different states and triggers and callback methods", "user": {"login": "amitabhn", "id": 10218330, "node_id": "MDQ6VXNlcjEwMjE4MzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/10218330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amitabhn", "html_url": "https://github.com/amitabhn", "followers_url": "https://api.github.com/users/amitabhn/followers", "following_url": "https://api.github.com/users/amitabhn/following{/other_user}", "gists_url": "https://api.github.com/users/amitabhn/gists{/gist_id}", "starred_url": "https://api.github.com/users/amitabhn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amitabhn/subscriptions", "organizations_url": "https://api.github.com/users/amitabhn/orgs", "repos_url": "https://api.github.com/users/amitabhn/repos", "events_url": "https://api.github.com/users/amitabhn/events{/privacy}", "received_events_url": "https://api.github.com/users/amitabhn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-01-15T07:17:40Z", "updated_at": "2019-01-29T21:59:22Z", "closed_at": "2019-01-29T21:59:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to create a single machine containing multiple models, where each model has its own states, triggers and callback methods. In other words, each model actually implements a completely different state machines that is independent of the other models (except for a few triggers that need to be sent to all models), yet all of them are part of the same machine.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/330", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/330/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/330/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/330/events", "html_url": "https://github.com/pytransitions/transitions/issues/330", "id": 389876564, "node_id": "MDU6SXNzdWUzODk4NzY1NjQ=", "number": 330, "title": "Feature Request: Display accepted states in GraphMachine diagrams", "user": {"login": "peey", "id": 4688870, "node_id": "MDQ6VXNlcjQ2ODg4NzA=", "avatar_url": "https://avatars0.githubusercontent.com/u/4688870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peey", "html_url": "https://github.com/peey", "followers_url": "https://api.github.com/users/peey/followers", "following_url": "https://api.github.com/users/peey/following{/other_user}", "gists_url": "https://api.github.com/users/peey/gists{/gist_id}", "starred_url": "https://api.github.com/users/peey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peey/subscriptions", "organizations_url": "https://api.github.com/users/peey/orgs", "repos_url": "https://api.github.com/users/peey/repos", "events_url": "https://api.github.com/users/peey/events{/privacy}", "received_events_url": "https://api.github.com/users/peey/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-11T17:38:02Z", "updated_at": "2019-08-16T10:13:26Z", "closed_at": "2019-08-16T10:13:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using the `Error` feature, I can specify which states are \"accepted\"\r\n\r\nIt would be great if we distinguish between the accepted states and unaccepted states in the diagram when using this feature. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/329", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/329/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/329/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/329/events", "html_url": "https://github.com/pytransitions/transitions/issues/329", "id": 388050285, "node_id": "MDU6SXNzdWUzODgwNTAyODU=", "number": 329, "title": "Hierarchical logic problem", "user": {"login": "kentoshima", "id": 5557493, "node_id": "MDQ6VXNlcjU1NTc0OTM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5557493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kentoshima", "html_url": "https://github.com/kentoshima", "followers_url": "https://api.github.com/users/kentoshima/followers", "following_url": "https://api.github.com/users/kentoshima/following{/other_user}", "gists_url": "https://api.github.com/users/kentoshima/gists{/gist_id}", "starred_url": "https://api.github.com/users/kentoshima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kentoshima/subscriptions", "organizations_url": "https://api.github.com/users/kentoshima/orgs", "repos_url": "https://api.github.com/users/kentoshima/repos", "events_url": "https://api.github.com/users/kentoshima/events{/privacy}", "received_events_url": "https://api.github.com/users/kentoshima/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-12-06T04:18:20Z", "updated_at": "2018-12-06T11:31:08Z", "closed_at": "2018-12-06T11:31:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "like the sample in Hierarchical State Machine\r\nif machine is in \"caffeinated_walking\" or \"caffeinated_dithering\" state , the value of machine.caffeinated should be True.  but i got a False", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/327", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/327/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/327/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/327/events", "html_url": "https://github.com/pytransitions/transitions/issues/327", "id": 387295005, "node_id": "MDU6SXNzdWUzODcyOTUwMDU=", "number": 327, "title": "Same code with Different result by different installment!!", "user": {"login": "liuzongquan", "id": 3122475, "node_id": "MDQ6VXNlcjMxMjI0NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/3122475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liuzongquan", "html_url": "https://github.com/liuzongquan", "followers_url": "https://api.github.com/users/liuzongquan/followers", "following_url": "https://api.github.com/users/liuzongquan/following{/other_user}", "gists_url": "https://api.github.com/users/liuzongquan/gists{/gist_id}", "starred_url": "https://api.github.com/users/liuzongquan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liuzongquan/subscriptions", "organizations_url": "https://api.github.com/users/liuzongquan/orgs", "repos_url": "https://api.github.com/users/liuzongquan/repos", "events_url": "https://api.github.com/users/liuzongquan/events{/privacy}", "received_events_url": "https://api.github.com/users/liuzongquan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-12-04T13:50:18Z", "updated_at": "2018-12-06T07:58:23Z", "closed_at": "2018-12-06T07:58:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "hi all,\r\n   the following code execute on different envs with different results, that's so Weird\uff01\r\nsample code:\r\n\r\n```\r\n#!/usr/bin/env/python\r\n#-*- coding: utf-8 -*-\r\nfrom transitions import Machine\r\nimport sys \r\nimport logging\r\nlogging.basicConfig(level=logging.DEBUG)\r\n#Set transitions' log level to INFO; DEBUG messages will be omitted\r\nlogging.getLogger('transitions').setLevel(logging.DEBUG)\r\n\r\nclass DST(object):\r\n\r\n    def __init__(self):\r\n        \r\n        self.states = ['A', 'B', 'C']\r\n        self.initial_state = 'A'\r\n\r\n        self.machine = Machine(model=self, states=self.states, initial=self.initial_state)\r\n        self.machine.add_transition(source='A', dest='B', trigger='go', conditions='check_cond')\r\n        self.machine.add_transition(source='A', dest='C', trigger='go', conditions='check_cond')\r\n\r\n        \r\n    def go(self):\r\n        pass\r\n    \r\n    def check_cond(self):\r\n        return True\r\n    \r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    test_case = DST()\r\n    print (test_case.state)\r\n    test_case.go()\r\n    print (test_case.state)\r\n```\r\nEnvs-1: pip install transitions\r\nthe result is expected:\r\n\r\n> A\r\nDEBUG:transitions.core:Initiating transition from state A to state B...\r\nDEBUG:transitions.core:Exiting state A. Processing callbacks...\r\nINFO:transitions.core:Exited state A\r\nDEBUG:transitions.core:Entering state B. Processing callbacks...\r\nINFO:transitions.core:Entered state B\r\nB\r\n\r\nEnvs-2: git clone https://github.com/pytransitions/transitions.git and then python setup.py install\r\nthe result is Wrong!\r\n\r\n> WARNING:transitions.core:Model already contains an attribute 'go'. Skip binding.\r\nA\r\nA\r\n\r\nAny body encounters the same problem?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/326", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/326/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/326/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/326/events", "html_url": "https://github.com/pytransitions/transitions/issues/326", "id": 382277915, "node_id": "MDU6SXNzdWUzODIyNzc5MTU=", "number": 326, "title": "Allow conditions to work with truthy and falsy values instead of just 'True' and 'False'", "user": {"login": "potens1", "id": 3988571, "node_id": "MDQ6VXNlcjM5ODg1NzE=", "avatar_url": "https://avatars2.githubusercontent.com/u/3988571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/potens1", "html_url": "https://github.com/potens1", "followers_url": "https://api.github.com/users/potens1/followers", "following_url": "https://api.github.com/users/potens1/following{/other_user}", "gists_url": "https://api.github.com/users/potens1/gists{/gist_id}", "starred_url": "https://api.github.com/users/potens1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/potens1/subscriptions", "organizations_url": "https://api.github.com/users/potens1/orgs", "repos_url": "https://api.github.com/users/potens1/repos", "events_url": "https://api.github.com/users/potens1/events{/privacy}", "received_events_url": "https://api.github.com/users/potens1/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-11-19T15:53:43Z", "updated_at": "2019-08-16T10:10:29Z", "closed_at": "2019-08-16T10:10:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I don't know if this is something that is wanted, but it seems the `conditions` and `unless` are compared to the `True` or `False` value, not the boolean value of the expression, i.e:\r\n\r\n```\r\nfrom transitions import Machine\r\n\r\nclass TestMachine(Machine):\r\n    def __init__(self):\r\n        self.states = [\"init\", \"ok\", \"nok\"]\r\n        self.transitions = [{\r\n            \"trigger\": 'go',\r\n            \"source\": 'init',\r\n            \"dest\": \"ok\",\r\n            \"conditions\": \"is_ok\"\r\n        }, {\r\n            \"trigger\": 'go',\r\n            \"source\": 'init',\r\n            \"dest\": \"nok\",\r\n            \"unless\": \"is_ok\"\r\n        }]\r\n        machine = super().__init__(\r\n            model=self,\r\n            initial=\"init\",\r\n            transitions=self.transitions,\r\n            states=self.states)\r\n\r\n    def is_ok(self):\r\n        return None\r\n\r\n\r\ntest = TestMachine()\r\ntest.go()\r\nassert test.state == 'nok'\r\n\r\n >>> AssertionError: assert 'init' == 'nok'\r\n```\r\nHere, is_ok return None, so, it's boolean value is False, so, it should be the `unless` path that should be done but:\r\n```\r\ncore.py                    256 DEBUG    Transition condition failed: is_ok() does not return True. Transition halted.\r\ncore.py                    246 DEBUG    Initiating transition from state init to state nok...\r\ncore.py                    256 DEBUG    Transition condition failed: is_ok() does not return False. Transition halted.\r\n```\r\nI know the doc talks about `True` and `False`, but, it sounds -at least to me- surprising.\r\n\r\nMaybe do some add in doc to explain the comparison is _really_ done against True and False, not on the boolean value of the expression.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/325", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/325/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/325/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/325/events", "html_url": "https://github.com/pytransitions/transitions/issues/325", "id": 381151970, "node_id": "MDU6SXNzdWUzODExNTE5NzA=", "number": 325, "title": "Replace pygraphviz with graphviz", "user": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204905, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDU=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 635194344, "node_id": "MDU6TGFiZWw2MzUxOTQzNDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/feedback%20wanted", "name": "feedback wanted", "color": "0e8a16", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/7", "html_url": "https://github.com/pytransitions/transitions/milestone/7", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/7/labels", "id": 3009690, "node_id": "MDk6TWlsZXN0b25lMzAwOTY5MA==", "number": 7, "title": "0.7.0", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-01-03T10:08:36Z", "updated_at": "2019-09-02T14:10:02Z", "due_on": null, "closed_at": "2019-09-02T14:10:02Z"}, "comments": 1, "created_at": "2018-11-15T13:04:12Z", "updated_at": "2019-08-16T12:48:09Z", "closed_at": "2019-08-16T12:48:09Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Since there are some issues with `pygraphviz` which makes the graph feature more or less unusable on Windows, I implemented  an alternative based on `graphviz`. `graphviz` requires a `Graphviz` installation available in `PATH`. Currently, it is part of the `dev-graphviz` branch and I consider merging it into `next-release` for 0.7.0. Feel free to comment whether you consider that a valid option or not.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/324", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/324/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/324/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/324/events", "html_url": "https://github.com/pytransitions/transitions/issues/324", "id": 378560137, "node_id": "MDU6SXNzdWUzNzg1NjAxMzc=", "number": 324, "title": "Try the sample with  GraphMachine extension", "user": {"login": "occoder", "id": 1981057, "node_id": "MDQ6VXNlcjE5ODEwNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1981057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/occoder", "html_url": "https://github.com/occoder", "followers_url": "https://api.github.com/users/occoder/followers", "following_url": "https://api.github.com/users/occoder/following{/other_user}", "gists_url": "https://api.github.com/users/occoder/gists{/gist_id}", "starred_url": "https://api.github.com/users/occoder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/occoder/subscriptions", "organizations_url": "https://api.github.com/users/occoder/orgs", "repos_url": "https://api.github.com/users/occoder/repos", "events_url": "https://api.github.com/users/occoder/events{/privacy}", "received_events_url": "https://api.github.com/users/occoder/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 137204904, "node_id": "MDU6TGFiZWwxMzcyMDQ5MDQ=", "url": "https://api.github.com/repos/pytransitions/transitions/labels/duplicate", "name": "duplicate", "color": "cccccc", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-11-08T03:08:29Z", "updated_at": "2019-01-03T12:28:46Z", "closed_at": "2018-11-09T08:39:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nfrom transitions import Machine\r\nimport random\r\n# from transitions.extensions import GraphMachine as Machine\r\nfrom transitions.extensions import MachineFactory\r\n\r\n# create a machine with mixins\r\ndiagram_cls = MachineFactory.get_predefined(graph=True)\r\n\r\nclass NarcolepticSuperhero(object):\r\n\r\n    # Define some states. Most of the time, narcoleptic superheroes are just like\r\n    # everyone else. Except for...\r\n    states = ['asleep', 'hanging out', 'hungry', 'sweaty', 'saving the world']\r\n\r\n    def __init__(self, name):\r\n\r\n        # No anonymous superheroes on my watch! Every narcoleptic superhero gets\r\n        # a name. Any name at all. SleepyMan. SlumberGirl. You get the idea.\r\n        self.name = name\r\n\r\n        # What have we accomplished today?\r\n        self.kittens_rescued = 0\r\n\r\n        # Initialize the state machine\r\n        self.machine = diagram_cls(model=self, states=NarcolepticSuperhero.states, initial='asleep')\r\n\r\n        # Add some transitions. We could also define these using a static list of\r\n        # dictionaries, as we did with states above, and then pass the list to\r\n        # the Machine initializer as the transitions= argument.\r\n\r\n        # At some point, every superhero must rise and shine.\r\n        self.machine.add_transition(trigger='wake_up', source='asleep', dest='hanging out')\r\n\r\n        # Superheroes need to keep in shape.\r\n        self.machine.add_transition('work_out', 'hanging out', 'hungry')\r\n\r\n        # Those calories won't replenish themselves!\r\n        self.machine.add_transition('eat', 'hungry', 'hanging out')\r\n\r\n        # Superheroes are always on call. ALWAYS. But they're not always\r\n        # dressed in work-appropriate clothing.\r\n        self.machine.add_transition('distress_call', '*', 'saving the world',\r\n                         before='change_into_super_secret_costume')\r\n\r\n        # When they get off work, they're all sweaty and disgusting. But before\r\n        # they do anything else, they have to meticulously log their latest\r\n        # escapades. Because the legal department says so.\r\n        self.machine.add_transition('complete_mission', 'saving the world', 'sweaty',\r\n                         after='update_journal')\r\n\r\n        # Sweat is a disorder that can be remedied with water.\r\n        # Unless you've had a particularly long day, in which case... bed time!\r\n        self.machine.add_transition('clean_up', 'sweaty', 'asleep', conditions=['is_exhausted'])\r\n        self.machine.add_transition('clean_up', 'sweaty', 'hanging out')\r\n\r\n        # Our NarcolepticSuperhero can fall asleep at pretty much any time.\r\n        self.machine.add_transition('nap', '*', 'asleep')\r\n\r\n    def update_journal(self):\r\n        \"\"\" Dear Diary, today I saved Mr. Whiskers. Again. \"\"\"\r\n        self.kittens_rescued += 1\r\n\r\n    def is_exhausted(self):\r\n        \"\"\" Basically a coin toss. \"\"\"\r\n        return random.random() < 0.5\r\n\r\n    def change_into_super_secret_costume(self):\r\n        print(\"Beauty, eh?\")\r\n\r\nif __name__ == \"__main__\":\r\n    batman = NarcolepticSuperhero(\"Batman\")\r\n    print(batman.state)\r\n    batman.get_graph().draw('my_state_diagram.png', prog='dot')\r\n    batman.get_graph(show_roi=True).draw('my_state_diagram.png', prog='dot')\r\n```\r\n\r\nRun this giving following exceptions:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Python34\\lib\\site-packages\\pygraphviz\\agraph.py\", line 478, in add_edge\r\n    eh = gv.agedge(self.handle, uh, vh, key, _Action.create)\r\nKeyError: 'agedge: no key'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/PycharmProjects/test/test.py\", line 71, in <module>\r\n    batman = NarcolepticSuperhero(\"Batman\")\r\n  File \"C:/PycharmProjects/test/test.py\", line 43, in __init__\r\n    before='change_into_super_secret_costume')\r\n  File \"C:\\Python34\\lib\\site-packages\\transitions\\extensions\\diagrams.py\", line 425, in add_transition\r\n    model.get_graph(force_new=True)\r\n  File \"C:\\Python34\\lib\\site-packages\\transitions\\extensions\\diagrams.py\", line 373, in _get_graph\r\n    self.model_graphs[model] = self.graph_cls(self).get_graph(title if title is not None else self.title)\r\n  File \"C:\\Python34\\lib\\site-packages\\transitions\\extensions\\diagrams.py\", line 179, in get_graph\r\n    self._add_edges(self.machine.events.copy(), fsm_graph)\r\n  File \"C:\\Python34\\lib\\site-packages\\transitions\\extensions\\diagrams.py\", line 137, in _add_edges\r\n    container.add_edge(src, dst, **edge_attr)\r\n  File \"C:\\Python34\\lib\\site-packages\\pygraphviz\\agraph.py\", line 481, in add_edge\r\n    eh = gv.agedge(self.handle, uh, vh, key, _Action.find)\r\nKeyError: 'agedge: no key'\r\n\r\nProcess finished with exit code 1\r\n\r\n```\r\nI was using Python 3.4 64-bit, Graphviz (Stable 2.38 Windows install packages), Pygraphviz 1.3.1, transitions 0.6.9 and windows 7 64-bit", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/323", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/323/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/323/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/323/events", "html_url": "https://github.com/pytransitions/transitions/issues/323", "id": 374842337, "node_id": "MDU6SXNzdWUzNzQ4NDIzMzc=", "number": 323, "title": "Finite State Machine with the unknown transitions", "user": {"login": "leonbrag", "id": 5290089, "node_id": "MDQ6VXNlcjUyOTAwODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5290089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leonbrag", "html_url": "https://github.com/leonbrag", "followers_url": "https://api.github.com/users/leonbrag/followers", "following_url": "https://api.github.com/users/leonbrag/following{/other_user}", "gists_url": "https://api.github.com/users/leonbrag/gists{/gist_id}", "starred_url": "https://api.github.com/users/leonbrag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leonbrag/subscriptions", "organizations_url": "https://api.github.com/users/leonbrag/orgs", "repos_url": "https://api.github.com/users/leonbrag/repos", "events_url": "https://api.github.com/users/leonbrag/events{/privacy}", "received_events_url": "https://api.github.com/users/leonbrag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-29T03:14:57Z", "updated_at": "2018-10-29T08:35:15Z", "closed_at": "2018-10-29T08:35:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have a following design, which I would like to use Transition for:\r\n\r\n1. I have a set of source states (call it Ss)\r\n2. I have a set of destination states (call it Sd)\r\n\r\nSome transitions from Ss to Sd are valid. Some are not. However I don't really have any particulate event that triggers transition.\r\n\r\nIs there a way to use Transition module for the case above?\r\n\r\nEssentially I just want have something like this:\r\n\r\ntry:\r\n   FSM.transition (source=SsN, destination, SdN, onsuccess=\"mySuccessFunc\")\r\nexception Exception as e:\r\n   print (\"this transition is not valid\")\r\n\r\n\r\n I can create a dummy event, but then I will need to create a **separate** dummy event for **each** valid transitions. I can then iterate through all dummy events. This would accomplish a task, but it seems like  hack.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/322", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/322/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/322/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/322/events", "html_url": "https://github.com/pytransitions/transitions/issues/322", "id": 374800495, "node_id": "MDU6SXNzdWUzNzQ4MDA0OTU=", "number": 322, "title": "Processing the Event in Transitions without a if/elif statement", "user": {"login": "SuperChomsky", "id": 44447714, "node_id": "MDQ6VXNlcjQ0NDQ3NzE0", "avatar_url": "https://avatars1.githubusercontent.com/u/44447714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SuperChomsky", "html_url": "https://github.com/SuperChomsky", "followers_url": "https://api.github.com/users/SuperChomsky/followers", "following_url": "https://api.github.com/users/SuperChomsky/following{/other_user}", "gists_url": "https://api.github.com/users/SuperChomsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/SuperChomsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SuperChomsky/subscriptions", "organizations_url": "https://api.github.com/users/SuperChomsky/orgs", "repos_url": "https://api.github.com/users/SuperChomsky/repos", "events_url": "https://api.github.com/users/SuperChomsky/events{/privacy}", "received_events_url": "https://api.github.com/users/SuperChomsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-28T21:29:18Z", "updated_at": "2018-10-29T08:44:00Z", "closed_at": "2018-10-29T08:44:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I don't know if it's possible to do what i am asking for, if it is not, i think it could be a good feature to add in Transitions. I want to implement a FSM where the transition are triggered by an event that is processed by avoiding a if/elif statement.\r\n\r\nFor example: I have a simple FSM of a lamp, if it came (in a non-deterministic way) the 'goInlampOn' event we move to the 'on' state, if the 'goInlampOff' event arrives we move to the 'off' state.\r\nSo my question is:\r\n\r\nis there a way to create a method called  'process_event(event)' in the FSM class that process each event with the logic of my FSM without using a very long ( not in this very simple case) if-elif statement ?\r\nHere an example of the code:\r\n\r\n\r\n```\r\nclass MyFsm(object):\r\n    \r\n    transitions = [\r\n        {'trigger': 'switchOff','source':'on','dest':'off'},\r\n        {'trigger': 'switchOn','source':'off','dest':'on'}\r\n    ]    \r\n    def __init__(self):\r\n        ''' initialating the FSM '''      \r\n        self.machine = Machine(model=self, states = self.states ,transitions= self.transitions, initial = 'on' )       \r\n        on = On()\r\n        off = Off()\r\n        self.machine.add_state(off)\r\n        self.machine.add_state(on)\r\n   \r\n\r\n            \r\n    #A SMART SOLUTION TO IMPLEMENT THIS METHOD WITHOUT USING   if state == off: ... elif state==on...   \r\n    def process_event(self,event):              \r\n         \r\n         if self.state == 'off':            \r\n             if event == 'goInlampOn':\r\n                 self.switchOn()\r\n                \r\n         elif self.state == 'on':          \r\n             if event == 'goInlampOff':\r\n                 self.switchOff()\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/pytransitions/transitions/issues/321", "repository_url": "https://api.github.com/repos/pytransitions/transitions", "labels_url": "https://api.github.com/repos/pytransitions/transitions/issues/321/labels{/name}", "comments_url": "https://api.github.com/repos/pytransitions/transitions/issues/321/comments", "events_url": "https://api.github.com/repos/pytransitions/transitions/issues/321/events", "html_url": "https://github.com/pytransitions/transitions/issues/321", "id": 374479729, "node_id": "MDU6SXNzdWUzNzQ0Nzk3Mjk=", "number": 321, "title": "Refactor .travis.yml", "user": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/pytransitions/transitions/milestones/7", "html_url": "https://github.com/pytransitions/transitions/milestone/7", "labels_url": "https://api.github.com/repos/pytransitions/transitions/milestones/7/labels", "id": 3009690, "node_id": "MDk6TWlsZXN0b25lMzAwOTY5MA==", "number": 7, "title": "0.7.0", "description": null, "creator": {"login": "aleneum", "id": 205986, "node_id": "MDQ6VXNlcjIwNTk4Ng==", "avatar_url": "https://avatars0.githubusercontent.com/u/205986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleneum", "html_url": "https://github.com/aleneum", "followers_url": "https://api.github.com/users/aleneum/followers", "following_url": "https://api.github.com/users/aleneum/following{/other_user}", "gists_url": "https://api.github.com/users/aleneum/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleneum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleneum/subscriptions", "organizations_url": "https://api.github.com/users/aleneum/orgs", "repos_url": "https://api.github.com/users/aleneum/repos", "events_url": "https://api.github.com/users/aleneum/events{/privacy}", "received_events_url": "https://api.github.com/users/aleneum/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 5, "state": "closed", "created_at": "2018-01-03T10:08:36Z", "updated_at": "2019-09-02T14:10:02Z", "due_on": null, "closed_at": "2019-09-02T14:10:02Z"}, "comments": 1, "created_at": "2018-10-26T17:35:17Z", "updated_at": "2019-05-13T14:06:40Z", "closed_at": "2019-05-13T14:06:39Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The current style does support Python 3.7 tests. Python 3.7 only works with the (non-standard) distribution `xenial`. Switching to the mentioned [here](https://github.com/travis-ci/travis-ci/issues/9815) enables the required configuration steps. I'd prefer the second option with versions in the matrix.", "performed_via_github_app": null, "score": 1.0}]}