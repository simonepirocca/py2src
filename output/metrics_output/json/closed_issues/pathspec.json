{"total_count": 16, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/37", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/37/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/37/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/37", "id": 576458024, "node_id": "MDU6SXNzdWU1NzY0NTgwMjQ=", "number": 37, "title": "Support Python Pathlib", "user": {"login": "logavanc", "id": 2148189, "node_id": "MDQ6VXNlcjIxNDgxODk=", "avatar_url": "https://avatars1.githubusercontent.com/u/2148189?v=4", "gravatar_id": "", "url": "https://api.github.com/users/logavanc", "html_url": "https://github.com/logavanc", "followers_url": "https://api.github.com/users/logavanc/followers", "following_url": "https://api.github.com/users/logavanc/following{/other_user}", "gists_url": "https://api.github.com/users/logavanc/gists{/gist_id}", "starred_url": "https://api.github.com/users/logavanc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/logavanc/subscriptions", "organizations_url": "https://api.github.com/users/logavanc/orgs", "repos_url": "https://api.github.com/users/logavanc/repos", "events_url": "https://api.github.com/users/logavanc/events{/privacy}", "received_events_url": "https://api.github.com/users/logavanc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-05T18:45:32Z", "updated_at": "2020-04-09T13:09:21Z", "closed_at": "2020-04-09T13:09:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `match_file` and `match_files` functions do not seem to support `pathlib.Path` objects, which would be convenient.  If that is something that you want, I would be happy to work on a pull request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/33", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/33/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/33/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/33", "id": 570793303, "node_id": "MDU6SXNzdWU1NzA3OTMzMDM=", "number": 33, "title": "Feature request: Accept Path as arguments", "user": {"login": "pykong", "id": 20211140, "node_id": "MDQ6VXNlcjIwMjExMTQw", "avatar_url": "https://avatars1.githubusercontent.com/u/20211140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pykong", "html_url": "https://github.com/pykong", "followers_url": "https://api.github.com/users/pykong/followers", "following_url": "https://api.github.com/users/pykong/following{/other_user}", "gists_url": "https://api.github.com/users/pykong/gists{/gist_id}", "starred_url": "https://api.github.com/users/pykong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pykong/subscriptions", "organizations_url": "https://api.github.com/users/pykong/orgs", "repos_url": "https://api.github.com/users/pykong/repos", "events_url": "https://api.github.com/users/pykong/events{/privacy}", "received_events_url": "https://api.github.com/users/pykong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T19:50:13Z", "updated_at": "2020-03-02T14:20:21Z", "closed_at": "2020-03-02T14:20:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We write the year 2020: Pythonistas have largely adopted the use of the `pathlib` module as a more convenient way to perform file system operation that old stinkin `os.path` and its comrades.\r\n\r\nHence it would be great if all of `pathspec` function would accept Path objects or iterables thereof as arguments, compared to plain strings.\r\n\r\nPutting a conversion to a string via `str(my_path)` at the right places is all it takes to make it work.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/32", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/32/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/32/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/32", "id": 570791047, "node_id": "MDU6SXNzdWU1NzA3OTEwNDc=", "number": 32, "title": "Feature request: Unicode support", "user": {"login": "pykong", "id": 20211140, "node_id": "MDQ6VXNlcjIwMjExMTQw", "avatar_url": "https://avatars1.githubusercontent.com/u/20211140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pykong", "html_url": "https://github.com/pykong", "followers_url": "https://api.github.com/users/pykong/followers", "following_url": "https://api.github.com/users/pykong/following{/other_user}", "gists_url": "https://api.github.com/users/pykong/gists{/gist_id}", "starred_url": "https://api.github.com/users/pykong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pykong/subscriptions", "organizations_url": "https://api.github.com/users/pykong/orgs", "repos_url": "https://api.github.com/users/pykong/repos", "events_url": "https://api.github.com/users/pykong/events{/privacy}", "received_events_url": "https://api.github.com/users/pykong/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-25T19:45:51Z", "updated_at": "2020-02-26T12:42:24Z", "closed_at": "2020-02-26T12:42:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@cpburnz Thanks for putting this neat little highly useful python package out there.\r\nI like to work with files featuring weird little symbols inside their names, to make the life of the Spanish speaking users of my package `copier`: https://github.com/pykong/copier/issues/118#issuecomment-591032273\r\n\r\nI would need `pathspec` to handle files like: `n\u0303ana.txt` which currently get just never match and hence are never ignored.\r\n\r\nA possible solution would be to use the [regex](https://pypi.org/project/regex/) library, which is a drop-in replacement for pythons inbuilt `re` lib, but featuring full unicode support among other power-ups.\r\n\r\nIf you would accept a dependency to your package I would be ready to open a **PR** implementing the required changes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/31", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/31/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/31/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/31", "id": 551133340, "node_id": "MDU6SXNzdWU1NTExMzMzNDA=", "number": 31, "title": "match_tree doesn't return the symlinks regardless of the followSymlinks parameter", "user": {"login": "ftrofin", "id": 8718388, "node_id": "MDQ6VXNlcjg3MTgzODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8718388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftrofin", "html_url": "https://github.com/ftrofin", "followers_url": "https://api.github.com/users/ftrofin/followers", "following_url": "https://api.github.com/users/ftrofin/following{/other_user}", "gists_url": "https://api.github.com/users/ftrofin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftrofin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftrofin/subscriptions", "organizations_url": "https://api.github.com/users/ftrofin/orgs", "repos_url": "https://api.github.com/users/ftrofin/repos", "events_url": "https://api.github.com/users/ftrofin/events{/privacy}", "received_events_url": "https://api.github.com/users/ftrofin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-01-17T00:34:01Z", "updated_at": "2020-04-09T13:12:47Z", "closed_at": "2020-04-09T13:12:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "This may be considered a bug or  \"works as designed\", depending on the interpretation of \"followSymlinks\", but wanted to point out a (design?) flaw in match_tree:\r\n\r\n Suppose I want to archive a folder so I specify a very inclusive pattern: \"Libs/\"\r\n\r\nUnder 'Libs/' I have a Mac framework named 'Crmsdk'. Mac frameworks are really just directories with a particular structure inside but the interesting aspect for us is that it has symlinks. This is how Crmsdk.framework looks inside (first level):\r\n\r\n```$ ls -la Libs/Crmsdk.framework \r\nlrwxr-xr-x  1 flo  staff    23 Oct  1 17:13 CrmSdk -> Versions/Current/CrmSdk\r\nlrwxr-xr-x  1 flo  staff    26 Oct  1 17:13 Resources -> Versions/Current/Resources\r\ndrwxr-xr-x  5 flo  staff   160 Jan 15 00:23 Versions\r\n```\r\n\r\nNotice that `Resources` is a symlink pointing inside the `Versions` folder. \r\n\r\nNow, when I call the path_spec.match_tree() function, regardless of the value of `followSymlinks` parameter, I can never get the `Resources` folder as an entry in the result set. Which, someone might argue, is what I should expect because:\r\n\r\n- if `followSymlinks` is True I will get entries like:\r\n\r\n```Libs/CrmSdk.framework/Resources/CrmRsc1\r\nLibs/CrmSdk.framework/Resources/CrmRsc2\r\n...\r\nLibs/CrmSdk.framework/Versions/Current/Resources/CrmRsc1\r\nLibs/CrmSdk.framework/Versions/Current/Resources/CrmRsc2\r\n```\r\n\r\nWhich is normal because the code is following the symlinks and `Resources` is just a symlink to `Versions/Current/Resources`.\r\n\r\n- if `followSymlinks` is False, then `Resources` doesn't even show up in the results list as a folder after CrmSdk.framework, in other words I get only these entries:\r\n\r\n```Libs/CrmSdk.framework/Versions/Current/Resources/CrmRsc1\r\nLibs/CrmSdk.framework/Versions/Current/Resources/CrmRsc2\r\n```\r\nI don't get any `Libs/CrmSdk.framework/Resources` entries.\r\n\r\nThis puts me in the impossibility to create an archive of the matched entries that I can unzip on another location and have it recreated the same (because the symlinks are missing).\r\n\r\nOne may claim that this is a bug and when `followSymlinks` is False, the Resources folder should be returned in the list of results (clients shouldn't make an assumption about the entries returned: they may be files, folders or symlinks - it's their job to properly handle it). Bottom line is that symlinks are missing in the results list regardless of the flag's value.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/30", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/30/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/30/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/30", "id": 548662731, "node_id": "MDU6SXNzdWU1NDg2NjI3MzE=", "number": 30, "title": "pathspec should expose the information of what matched in a string/path", "user": {"login": "ftrofin", "id": 8718388, "node_id": "MDQ6VXNlcjg3MTgzODg=", "avatar_url": "https://avatars0.githubusercontent.com/u/8718388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftrofin", "html_url": "https://github.com/ftrofin", "followers_url": "https://api.github.com/users/ftrofin/followers", "following_url": "https://api.github.com/users/ftrofin/following{/other_user}", "gists_url": "https://api.github.com/users/ftrofin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftrofin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftrofin/subscriptions", "organizations_url": "https://api.github.com/users/ftrofin/orgs", "repos_url": "https://api.github.com/users/ftrofin/repos", "events_url": "https://api.github.com/users/ftrofin/events{/privacy}", "received_events_url": "https://api.github.com/users/ftrofin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67379660, "node_id": "MDU6TGFiZWw2NzM3OTY2MA==", "url": "https://api.github.com/repos/cpburnz/python-path-specification/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-01-13T01:34:07Z", "updated_at": "2020-04-09T13:21:11Z", "closed_at": "2020-04-09T13:21:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "This library is very cool and I want to use it a project. However, i'm running against a severe limitation: I can't tell which part of a filename was matched. \r\nConsider this example: I have several match patterns (let's call them SpecEntries). They specified what I'm looking for and, optionally, what should the matched thing be remapped to. Example:\r\n'/Documentation/':  'docs/',\r\n'/*.html': 'docs/',\r\n'**/Examples/SDK/':  'docs/'\r\n\r\nIn the above examples, all those patterns on the left side are remapped to a 'docs/' folder.\r\nNow I'm using match_tree to iterate and directory and compare against the patterns specified by my SpecEntries.\r\n\r\n1. The first issue is that the results returned by match_tree doesn't specify which pattern matched which file. I worked around this by iterating through my patterns, compile each one and calling match_files against it. Doable but inneficient (consider this an improvement request).\r\n\r\n2. After the matches are returned I'd like to remap those paths according to the right hand side of the SpecEntry for example:\r\n\r\n      '/Documentation/foo.txt' ->     'docs/foo.txt'\r\n      'foo.html': 'docs/foo.html'\r\n      'blah/Examples/SDK/bar.txt' -> 'docs/bar.txt'\r\n\r\nThe problem is that there isn't an API that will allow me to do this. pathspec library knows which part of the path matched my specifier but it doesn't expose that information to me so I can't do this remapping. (I considered using regular expressions or fnmatch but they won't easily match pathspec's capabilities - for example no easy way to match '**')\r\n\r\nIs it possible to expose the matching logic in the library APi so callers can implement this kind of remapping feature?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/26", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/26/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/26/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/26", "id": 499185772, "node_id": "MDU6SXNzdWU0OTkxODU3NzI=", "number": 26, "title": "method to escape gitwildmatch", "user": {"login": "mroutis", "id": 7363250, "node_id": "MDQ6VXNlcjczNjMyNTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/7363250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mroutis", "html_url": "https://github.com/mroutis", "followers_url": "https://api.github.com/users/mroutis/followers", "following_url": "https://api.github.com/users/mroutis/following{/other_user}", "gists_url": "https://api.github.com/users/mroutis/gists{/gist_id}", "starred_url": "https://api.github.com/users/mroutis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mroutis/subscriptions", "organizations_url": "https://api.github.com/users/mroutis/orgs", "repos_url": "https://api.github.com/users/mroutis/repos", "events_url": "https://api.github.com/users/mroutis/events{/privacy}", "received_events_url": "https://api.github.com/users/mroutis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-27T01:22:50Z", "updated_at": "2019-10-03T02:53:29Z", "closed_at": "2019-10-03T02:53:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be great to have a method for escaping a string according to gitwildmatch, thus, putting backslashes before `!`, `[`, `]`, `?` `*`.\r\n\r\nI could send a PR if there's interest on this", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/22", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/22/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/22/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/22", "id": 360142277, "node_id": "MDU6SXNzdWUzNjAxNDIyNzc=", "number": 22, "title": "dangling symlinks cause crash", "user": {"login": "wimglenn", "id": 6615374, "node_id": "MDQ6VXNlcjY2MTUzNzQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6615374?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wimglenn", "html_url": "https://github.com/wimglenn", "followers_url": "https://api.github.com/users/wimglenn/followers", "following_url": "https://api.github.com/users/wimglenn/following{/other_user}", "gists_url": "https://api.github.com/users/wimglenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/wimglenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wimglenn/subscriptions", "organizations_url": "https://api.github.com/users/wimglenn/orgs", "repos_url": "https://api.github.com/users/wimglenn/repos", "events_url": "https://api.github.com/users/wimglenn/events{/privacy}", "received_events_url": "https://api.github.com/users/wimglenn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-14T03:19:09Z", "updated_at": "2018-09-15T16:49:24Z", "closed_at": "2018-09-15T16:49:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using `PathSpec.match_tree`, If there is a broken symlink encountered, we get unhandled exception. It's here:\r\n\r\nhttps://github.com/cpburnz/python-path-specification/blob/da86e2c4d557df2d0a7cc9743268a7173d3a4828/pathspec/util.py#L68\r\n\r\nI think you could fix it with `os.lstat` instead, but that's backwards incompat change.\r\n\r\nPerhaps `iter_tree` could have an option to not follow symlinks? You could follow the example of `os.walk`, which accepts a `followlinks` keyword arg, and also an `onerror` callback which can be used to handle problems such as permission errors when stat each file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/21", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/21/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/21/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/21", "id": 349178699, "node_id": "MDU6SXNzdWUzNDkxNzg2OTk=", "number": 21, "title": "Deprecation warining", "user": {"login": "thmxv", "id": 948798, "node_id": "MDQ6VXNlcjk0ODc5OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/948798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thmxv", "html_url": "https://github.com/thmxv", "followers_url": "https://api.github.com/users/thmxv/followers", "following_url": "https://api.github.com/users/thmxv/following{/other_user}", "gists_url": "https://api.github.com/users/thmxv/gists{/gist_id}", "starred_url": "https://api.github.com/users/thmxv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thmxv/subscriptions", "organizations_url": "https://api.github.com/users/thmxv/orgs", "repos_url": "https://api.github.com/users/thmxv/repos", "events_url": "https://api.github.com/users/thmxv/events{/privacy}", "received_events_url": "https://api.github.com/users/thmxv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-09T15:28:27Z", "updated_at": "2018-08-14T13:33:29Z", "closed_at": "2018-08-14T13:30:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the following deprecation warning\r\n\r\n/usr/lib/python3.7/site-packages/pathspec/pathspec.py:27: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\r\n  self.patterns = patterns if isinstance(patterns, collections.Container) else list(patterns)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/20", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/20/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/20/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/20", "id": 306610190, "node_id": "MDU6SXNzdWUzMDY2MTAxOTA=", "number": 20, "title": "a \"./\" infront of the filename provides wrong matches", "user": {"login": "spMohanty", "id": 1581312, "node_id": "MDQ6VXNlcjE1ODEzMTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1581312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spMohanty", "html_url": "https://github.com/spMohanty", "followers_url": "https://api.github.com/users/spMohanty/followers", "following_url": "https://api.github.com/users/spMohanty/following{/other_user}", "gists_url": "https://api.github.com/users/spMohanty/gists{/gist_id}", "starred_url": "https://api.github.com/users/spMohanty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spMohanty/subscriptions", "organizations_url": "https://api.github.com/users/spMohanty/orgs", "repos_url": "https://api.github.com/users/spMohanty/repos", "events_url": "https://api.github.com/users/spMohanty/events{/privacy}", "received_events_url": "https://api.github.com/users/spMohanty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-03-19T19:53:41Z", "updated_at": "2018-04-06T13:25:08Z", "closed_at": "2018-04-06T13:25:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider the use case when you have a directory structure like this : \r\n```\r\n.\r\n|-- 0.csv\r\n|-- A\r\n|   `-- 1.csv\r\n`-- .gitignore\r\n```\r\n\r\nand the contents of `.gitignore` are : \r\n```\r\n*.csv\r\n!A/0.csv\r\n```\r\n\r\n`ignorespec.match_file(\"A/0.csv\")` returns `True`, which is expected. \r\nwhile \r\n`ignorespec.match_file(\"./A/0.csv\")` returns `False`. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/18", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/18/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/18/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/18", "id": 259773181, "node_id": "MDU6SXNzdWUyNTk3NzMxODE=", "number": 18, "title": "Fail to match directory", "user": {"login": "ant31", "id": 1044332, "node_id": "MDQ6VXNlcjEwNDQzMzI=", "avatar_url": "https://avatars2.githubusercontent.com/u/1044332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ant31", "html_url": "https://github.com/ant31", "followers_url": "https://api.github.com/users/ant31/followers", "following_url": "https://api.github.com/users/ant31/following{/other_user}", "gists_url": "https://api.github.com/users/ant31/gists{/gist_id}", "starred_url": "https://api.github.com/users/ant31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ant31/subscriptions", "organizations_url": "https://api.github.com/users/ant31/orgs", "repos_url": "https://api.github.com/users/ant31/repos", "events_url": "https://api.github.com/users/ant31/events{/privacy}", "received_events_url": "https://api.github.com/users/ant31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-22T10:34:00Z", "updated_at": "2018-01-16T00:54:54Z", "closed_at": "2018-01-16T00:54:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI have a simple case: \r\n```\r\npattern = \"cargo/\"\r\nspec = pathspec.PathSpec.from_lines('gitwildmatch', pattern)\r\nreturn spec.match_file(\"cargo\")\r\n=> False\r\n```\r\nI was expecting True\r\n\r\nedit: \r\n`cargo/a` is ignored as expected", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/16", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/16/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/16/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/16", "id": 239197164, "node_id": "MDU6SXNzdWUyMzkxOTcxNjQ=", "number": 16, "title": "Python 2.6 support", "user": {"login": "adrienverge", "id": 5244945, "node_id": "MDQ6VXNlcjUyNDQ5NDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5244945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adrienverge", "html_url": "https://github.com/adrienverge", "followers_url": "https://api.github.com/users/adrienverge/followers", "following_url": "https://api.github.com/users/adrienverge/following{/other_user}", "gists_url": "https://api.github.com/users/adrienverge/gists{/gist_id}", "starred_url": "https://api.github.com/users/adrienverge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adrienverge/subscriptions", "organizations_url": "https://api.github.com/users/adrienverge/orgs", "repos_url": "https://api.github.com/users/adrienverge/repos", "events_url": "https://api.github.com/users/adrienverge/events{/privacy}", "received_events_url": "https://api.github.com/users/adrienverge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-06-28T15:09:47Z", "updated_at": "2017-07-04T20:09:13Z", "closed_at": "2017-07-01T20:13:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nSince today, pathspec is used by yamllint, which is used by Ansible, OpenStack and others.\r\n\r\nThe problem is: all these software must support Python 2.6, but pathspec currently doesn't. This leads to issues like https://github.com/adrienverge/yamllint/issues/55 and https://github.com/ansible/ansible/pull/26186.\r\n\r\nIn your opinion, what's the amount of work needed to support Python 2.6?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/14", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/14/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/14/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/14", "id": 237593158, "node_id": "MDU6SXNzdWUyMzc1OTMxNTg=", "number": 14, "title": "Unintuitive behavior with binary paths/patterns", "user": {"login": "AndersBlomdell", "id": 980574, "node_id": "MDQ6VXNlcjk4MDU3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/980574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndersBlomdell", "html_url": "https://github.com/AndersBlomdell", "followers_url": "https://api.github.com/users/AndersBlomdell/followers", "following_url": "https://api.github.com/users/AndersBlomdell/following{/other_user}", "gists_url": "https://api.github.com/users/AndersBlomdell/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndersBlomdell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndersBlomdell/subscriptions", "organizations_url": "https://api.github.com/users/AndersBlomdell/orgs", "repos_url": "https://api.github.com/users/AndersBlomdell/repos", "events_url": "https://api.github.com/users/AndersBlomdell/events{/privacy}", "received_events_url": "https://api.github.com/users/AndersBlomdell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-21T16:27:52Z", "updated_at": "2017-07-01T20:12:42Z", "closed_at": "2017-07-01T20:12:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following program illustrates some possible variations:\r\n\r\n```python\r\n#!/usr/bin/python3\r\n\r\nimport pathspec\r\nimport os\r\n\r\nprint(\"A. String pattern, string path:\\n    \", end=\"\")\r\ntry:\r\n    s = pathspec.PathSpec.from_lines('gitwildmatch', ['*.py'])\r\n    for p in os.listdir('pathspec'):\r\n        if s.match_file(p):\r\n            print(p, end=\" \")\r\n    print()\r\nexcept Exception as e:\r\n    print(\"FAILED '%s'\" % e)\r\n\r\nprint(\"B. String pattern, binary path:\\n    \", end=\"\")\r\ntry:\r\n    s = pathspec.PathSpec.from_lines('gitwildmatch', ['*.py'])\r\n    for p in os.listdir(b'pathspec'):\r\n        if s.match_file(p):\r\n            print(p, end=' ')\r\n    print()\r\nexcept Exception as e:\r\n    print(\"FAILED '%s'\" % e)\r\n\r\nprint(\"C. String pattern, binary path + surrogateescape:\\n    \", end=\"\")\r\ntry:\r\n    s = pathspec.PathSpec.from_lines('gitwildmatch', ['*.py'])\r\n    for p in os.listdir(b'pathspec'):\r\n        if s.match_file(p.decode('utf8','surrogateescape')):\r\n            print(p, end=' ')\r\n    print()\r\nexcept Exception as e:\r\n    print(\"FAILED '%s'\" % e)\r\n\r\nprint(\"D. Binary pattern, binary path:\\n    \", end=\"\")\r\ns = pathspec.PathSpec.from_lines('gitwildmatch', [b'*.py'])\r\ntry:\r\n    for p in os.listdir(b'pathspec'):\r\n        if s.match_file(p):\r\n            print(p, end=' ')\r\n    print()\r\nexcept Exception as e:\r\n    print(\"FAILED '%s'\" % e)\r\n```\r\nGives the following result when run in the source directory:\r\n```\r\nA. String pattern, string path:\r\n    util.py pattern.py pathspec.py __init__.py compat.py \r\nB. String pattern, binary path:\r\n    FAILED 'cannot use a string pattern on a bytes-like object'\r\nC. String pattern, binary path + surrogateescape:\r\n    b'util.py' b'pattern.py' b'pathspec.py' b'__init__.py' b'compat.py' \r\nD. Binary pattern, binary path:\r\n    \r\n```\r\n\r\nIMHO examples A-C behaves as expected, while example D does not match any files, neither does it complain on the pattern. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/12", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/12/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/12/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/12", "id": 169090169, "node_id": "MDU6SXNzdWUxNjkwOTAxNjk=", "number": 12, "title": "Add PathSpec.match_file", "user": {"login": "demurgos", "id": 2262218, "node_id": "MDQ6VXNlcjIyNjIyMTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/2262218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/demurgos", "html_url": "https://github.com/demurgos", "followers_url": "https://api.github.com/users/demurgos/followers", "following_url": "https://api.github.com/users/demurgos/following{/other_user}", "gists_url": "https://api.github.com/users/demurgos/gists{/gist_id}", "starred_url": "https://api.github.com/users/demurgos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/demurgos/subscriptions", "organizations_url": "https://api.github.com/users/demurgos/orgs", "repos_url": "https://api.github.com/users/demurgos/repos", "events_url": "https://api.github.com/users/demurgos/events{/privacy}", "received_events_url": "https://api.github.com/users/demurgos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-08-03T09:43:23Z", "updated_at": "2016-08-23T12:08:59Z", "closed_at": "2016-08-23T02:13:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\nI was looking for a Python implementation to match files with the rules defined in `.gitignore` files and this project is great!\nMy use case is to synchronize directories across a network and most of the control logic (filter, compare, update) is at the inode level to allow me to maximize the number of skipped elements (to not explore excluded directories for example).\nI would like to update my current filter logic to support git patterns: given a list of patterns, is my file path matched or not ? The issue is that currently `pathspec` seems to be heavily oriented around processing lists of paths, what if I have a single file ? \n\nHere is what my current implementation boils down to:\n\n``` python\nspec = pathspec.PathSpec.from_lines(pathspec.GitIgnorePattern, patterns)\ndef match_file(file_path):\n    return len(list(spec.match_files([file_path]))) > 0  # This should not be so complicated\n\nis_ignored = match_file(u'testfile.py')\n```\n\nAs you can see, it's pretty cumbersome: I have to create a a collection with a single item, run the matcher and then extract the result.\n\nIdeally, I would imagine that PathSpec exposes a `match_file` function returning a boolean and `match_files` (or `filter_files` since it's currently acting as a filter ?) would just reuse it:\n\n``` python\nclass PathSpec(object):\n    # ...\n\n    def match_file(self, file, separators=None):  # Core logic\n        norm, path = util.normalize_file(file, separators=separators)  # Single file version\n        is_matched = util.match_file(self.patterns, norm)  # Single file version\n        return is_matched  # bool\n\n    def match_files(self, files, separators=None):  # Quality of life function: it just replaces a one line generator\n        return (file for file in files if self.match_file(file, separators))\n```\n\nBasically, it boils down to the fact the library does not expose single item functions to let me iterate other my files as I want but hides a loop inside every function.\nWhat do you think about adding better support for single file matching ? I am aware that due to the current architecture of the library, it would require some refactoring but I believe that it would be for the best. Could you implement it or should I do it and send a PR (since it's a big change, I'd rather wait for your feedback)\n\n**Side note**: the _real_ name of the gitignore matcher is [wildmatch](https://github.com/git/git/blob/master/wildmatch.c). How about adding this as an alias name when registering the pattern ? Your module deserves to be better referenced (I had some troubles to find it even if I knew what I was looking for).\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/11", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/11/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/11/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/11", "id": 156647004, "node_id": "MDU6SXNzdWUxNTY2NDcwMDQ=", "number": 11, "title": "Provide a library function/method for converting a glob to an uncompiled regex string.", "user": {"login": "kwlzn", "id": 1883523, "node_id": "MDQ6VXNlcjE4ODM1MjM=", "avatar_url": "https://avatars0.githubusercontent.com/u/1883523?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwlzn", "html_url": "https://github.com/kwlzn", "followers_url": "https://api.github.com/users/kwlzn/followers", "following_url": "https://api.github.com/users/kwlzn/following{/other_user}", "gists_url": "https://api.github.com/users/kwlzn/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwlzn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwlzn/subscriptions", "organizations_url": "https://api.github.com/users/kwlzn/orgs", "repos_url": "https://api.github.com/users/kwlzn/repos", "events_url": "https://api.github.com/users/kwlzn/events{/privacy}", "received_events_url": "https://api.github.com/users/kwlzn/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67379660, "node_id": "MDU6TGFiZWw2NzM3OTY2MA==", "url": "https://api.github.com/repos/cpburnz/python-path-specification/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-05-25T01:55:59Z", "updated_at": "2016-07-15T18:02:06Z", "closed_at": "2016-07-15T13:32:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "currently, the way to get a regex string for a given gitignore-style glob is:\n\n```\n>>> pathspec.GitIgnorePattern('/dist/').regex.pattern\n'^dist/.*$'\n```\n\nwhich incurs the glob->regex translation inside `GitIgnorePattern.__init__` which in turn calls `RegexPattern.__init__` which automatically compiles the regex.\n\nfor the simple case of just wanting to convert a glob into a non-compiled regex string, it'd be great to have a utility function/method that could both be used inside `GitIgnorePattern.__init__` and outside as part of the public API.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/6", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/6/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/6/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/6", "id": 47505500, "node_id": "MDU6SXNzdWU0NzUwNTUwMA==", "number": 6, "title": "Exclude folder using exclamation mark ('!') doesn't work", "user": {"login": "wangxuepeng", "id": 4516203, "node_id": "MDQ6VXNlcjQ1MTYyMDM=", "avatar_url": "https://avatars0.githubusercontent.com/u/4516203?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wangxuepeng", "html_url": "https://github.com/wangxuepeng", "followers_url": "https://api.github.com/users/wangxuepeng/followers", "following_url": "https://api.github.com/users/wangxuepeng/following{/other_user}", "gists_url": "https://api.github.com/users/wangxuepeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/wangxuepeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wangxuepeng/subscriptions", "organizations_url": "https://api.github.com/users/wangxuepeng/orgs", "repos_url": "https://api.github.com/users/wangxuepeng/repos", "events_url": "https://api.github.com/users/wangxuepeng/events{/privacy}", "received_events_url": "https://api.github.com/users/wangxuepeng/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67379658, "node_id": "MDU6TGFiZWw2NzM3OTY1OA==", "url": "https://api.github.com/repos/cpburnz/python-path-specification/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-11-01T13:07:48Z", "updated_at": "2014-11-08T15:01:41Z", "closed_at": "2014-11-08T14:54:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using pattern \n\"\"\"\n!test1/\n*.txt\n\"\"\"\n\nto scan a folder, from gitingore description\n(http://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)\n  # ignore all files in the build/ directory\nbuild/\n\nthis should exclude everything under test1 folder, but the run result shows the line dose not work, the result still show all contents under test 1 folder.\n\n[An Example Folder Structure]\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test1\\a.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test1\\b.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test1\\c\\c1.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test2\\a.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test2\\b.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test2\\c\\c1.txt\n\n[Code]\nSCAN_PATTERN = \"\"\"\n!test1/\n*.txt\n\"\"\"\n\nspec = pathspec.PathSpec.from_lines(pathspec.GitIgnorePattern, SCAN_PATTERN.splitlines())\nspec.match_tree('d:\\dev\\eclipse_workspace\\test_scan')\n\n[Run Result]\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test1\\a.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test1\\b.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test1\\c\\c1.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test2\\a.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test2\\b.txt\nd:\\dev\\eclipse_workspace\\test_scan\\src\\test2\\c\\c1.txt\n\nCan you please have a look? Thanks.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/2", "repository_url": "https://api.github.com/repos/cpburnz/python-path-specification", "labels_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/2/comments", "events_url": "https://api.github.com/repos/cpburnz/python-path-specification/issues/2/events", "html_url": "https://github.com/cpburnz/python-path-specification/issues/2", "id": 25890164, "node_id": "MDU6SXNzdWUyNTg5MDE2NA==", "number": 2, "title": "Tabs?", "user": {"login": "pombredanne", "id": 675997, "node_id": "MDQ6VXNlcjY3NTk5Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/675997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pombredanne", "html_url": "https://github.com/pombredanne", "followers_url": "https://api.github.com/users/pombredanne/followers", "following_url": "https://api.github.com/users/pombredanne/following{/other_user}", "gists_url": "https://api.github.com/users/pombredanne/gists{/gist_id}", "starred_url": "https://api.github.com/users/pombredanne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pombredanne/subscriptions", "organizations_url": "https://api.github.com/users/pombredanne/orgs", "repos_url": "https://api.github.com/users/pombredanne/repos", "events_url": "https://api.github.com/users/pombredanne/events{/privacy}", "received_events_url": "https://api.github.com/users/pombredanne/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 67379663, "node_id": "MDU6TGFiZWw2NzM3OTY2Mw==", "url": "https://api.github.com/repos/cpburnz/python-path-specification/labels/wontfix", "name": "wontfix", "color": "ffffff", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-01-19T22:13:09Z", "updated_at": "2014-11-08T15:16:52Z", "closed_at": "2014-01-20T03:51:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Caleb:\nAny reason why you use tabs rather that the conventional PEP 8 space-based indentation?\nhttp://www.python.org/dev/peps/pep-0008/\nCordially\n", "performed_via_github_app": null, "score": 1.0}]}