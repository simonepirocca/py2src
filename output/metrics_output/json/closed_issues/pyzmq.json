{"total_count": 1269, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/zeromq/libzmq/issues/3995", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3995/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3995/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3995/events", "html_url": "https://github.com/zeromq/libzmq/issues/3995", "id": 666682358, "node_id": "MDU6SXNzdWU2NjY2ODIzNTg=", "number": 3995, "title": "libzmq websocket transport usage problem in \"zmq_bind\".", "user": {"login": "HEIDIES", "id": 18500260, "node_id": "MDQ6VXNlcjE4NTAwMjYw", "avatar_url": "https://avatars2.githubusercontent.com/u/18500260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HEIDIES", "html_url": "https://github.com/HEIDIES", "followers_url": "https://api.github.com/users/HEIDIES/followers", "following_url": "https://api.github.com/users/HEIDIES/following{/other_user}", "gists_url": "https://api.github.com/users/HEIDIES/gists{/gist_id}", "starred_url": "https://api.github.com/users/HEIDIES/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HEIDIES/subscriptions", "organizations_url": "https://api.github.com/users/HEIDIES/orgs", "repos_url": "https://api.github.com/users/HEIDIES/repos", "events_url": "https://api.github.com/users/HEIDIES/events{/privacy}", "received_events_url": "https://api.github.com/users/HEIDIES/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-28T01:19:18Z", "updated_at": "2020-07-30T08:12:27Z", "closed_at": "2020-07-30T08:12:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nI have compiled libzmq from source with  \"ENABLE_DRAFTS\". Everything went on okay until failed on binding a Websocket port\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): v4.3.2\r\n* OS: ubuntu 18.04 LTS\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  `void *context = zmq_ctx_new ();\r\n    void *pub = zmq_socket (context, ZMQ_PUB);\r\n    int rc = zmq_bind(pub, \"ws://127.0.0.1:5001/zeromq\");\r\n    assert (rc == 0);`\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nassert failed.\r\n\r\n# What's the expected result?\r\n\r\nassert succeed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3978", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3978/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3978/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3978/events", "html_url": "https://github.com/zeromq/libzmq/issues/3978", "id": 648794113, "node_id": "MDU6SXNzdWU2NDg3OTQxMTM=", "number": 3978, "title": "zeromq-4.2.2: first message not published", "user": {"login": "robmool", "id": 25300387, "node_id": "MDQ6VXNlcjI1MzAwMzg3", "avatar_url": "https://avatars2.githubusercontent.com/u/25300387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robmool", "html_url": "https://github.com/robmool", "followers_url": "https://api.github.com/users/robmool/followers", "following_url": "https://api.github.com/users/robmool/following{/other_user}", "gists_url": "https://api.github.com/users/robmool/gists{/gist_id}", "starred_url": "https://api.github.com/users/robmool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robmool/subscriptions", "organizations_url": "https://api.github.com/users/robmool/orgs", "repos_url": "https://api.github.com/users/robmool/repos", "events_url": "https://api.github.com/users/robmool/events{/privacy}", "received_events_url": "https://api.github.com/users/robmool/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-01T08:48:31Z", "updated_at": "2020-07-01T09:27:43Z", "closed_at": "2020-07-01T09:02:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nIn several projects we're using ZMQ (zeromq-4.2.2) to send/receive messages over the Internet using the following scheme:\r\n\r\nA ZMQ proxy setup with the zmq_proxy() function which is always running under normal circumstances.\r\n\r\nAll the clients (ZMQ_PUB and ZMQ_SUB) connect to the ZMQ proxy using the following setup:\r\nzmq_ctx_new()\r\nzmq_socket()\r\nzmq_setsockopt()\r\nzmq_connect()\r\n\r\nThe problem is that the proxy doesn't receive the first message when publishing right after the zmq_connect() call which makes perfectly sense since the TCP socket is still in progress. For the time being I've put a sleep of several milliseconds after the zmq_connect() but this is not the right solution.\r\n\r\nI've also tried to use the ZMQ_CONNECT_TIMEOUT option but doesn't seem to have any affect.\r\nIs there a way to check the socket status (\"in progress\", \"connected\", \"timeout\", \"closed\", etc.)?\r\n\r\n# Environment\r\n* libzmq version (commit hash if unreleased): 4.2.2\r\n* OS: Linux\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3972", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3972/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3972/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3972/events", "html_url": "https://github.com/zeromq/libzmq/issues/3972", "id": 646863466, "node_id": "MDU6SXNzdWU2NDY4NjM0NjY=", "number": 3972, "title": "Multi Puplishers and Subscribers Issues", "user": {"login": "jackvery6", "id": 33345589, "node_id": "MDQ6VXNlcjMzMzQ1NTg5", "avatar_url": "https://avatars1.githubusercontent.com/u/33345589?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackvery6", "html_url": "https://github.com/jackvery6", "followers_url": "https://api.github.com/users/jackvery6/followers", "following_url": "https://api.github.com/users/jackvery6/following{/other_user}", "gists_url": "https://api.github.com/users/jackvery6/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackvery6/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackvery6/subscriptions", "organizations_url": "https://api.github.com/users/jackvery6/orgs", "repos_url": "https://api.github.com/users/jackvery6/repos", "events_url": "https://api.github.com/users/jackvery6/events{/privacy}", "received_events_url": "https://api.github.com/users/jackvery6/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-28T07:42:10Z", "updated_at": "2020-07-02T09:45:56Z", "closed_at": "2020-07-02T09:45:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nI try to run the wuproxy/wuclient/wuserver example , when I start wuproxy and wuclient, then I want to run two wuserver which send different topic, but wuclient will receive message from the first starting wuserver , the later starting wuserver's message will not be received by wuclient. That's difficult for me to figure out what is happening.\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: ubuntu 18.04\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nwuproxy.c:\r\n\r\n//  Weather proxy device\r\n\r\n#include \"zhelpers.h\"\r\n\r\nint main (void)\r\n{\r\n    void *context = zmq_ctx_new ();\r\n\r\n    //  This is where the weather server sits\r\n    void *frontend = zmq_socket (context, ZMQ_XSUB);\r\n    //zmq_connect (frontend, \"tcp://192.168.55.210:5556\");\r\n\tzmq_connect (frontend, \"ipc://test-wu-frontend.ipc\");\r\n\r\n    //  This is our public endpoint for subscribers\r\n    void *backend = zmq_socket (context, ZMQ_XPUB);\r\n    //zmq_bind (backend, \"tcp://10.1.1.0:8100\");\r\n\tzmq_bind (backend, \"ipc://test-wu-backend.ipc\");\r\n\r\n    //  Run the proxy until the user interrupts us\r\n    zmq_proxy (frontend, backend, NULL);\r\n    \r\n    zmq_close (frontend);\r\n    zmq_close (backend);\r\n    zmq_ctx_destroy (context);\r\n    return 0;\r\n}\r\n\r\n\r\nwuclient.c\r\n#include \"zhelpers.h\"\r\nint main (int argc, char *argv [])\r\n{\r\n    //  Socket to talk to server\r\n    printf (\"Collecting updates from weather server...\\n\");\r\n    void *context = zmq_ctx_new ();\r\n    void *subscriber = zmq_socket (context, ZMQ_SUB);\r\n    int rc = zmq_connect (subscriber, \"ipc://test-wu-frontend.ipc\");\r\n    assert (rc == 0);\r\n\r\n    //  Subscribe to zipcode, default is NYC, 10001\r\n    char *filter = (argc > 1)? argv [1]: \"10001 \";\r\n    rc = zmq_setsockopt (subscriber, ZMQ_SUBSCRIBE,\r\n                         filter, strlen (filter));\r\n\tassert (rc == 0);\r\n    rc = zmq_setsockopt (subscriber, ZMQ_SUBSCRIBE,\r\n                         \"10002\", strlen (\"10002\"));\r\n    assert (rc == 0);\r\n\r\n    //  Process 100 updates\r\n    int update_nbr;\r\n    long total_temp = 0;\r\n    for (update_nbr = 0; update_nbr < 100; update_nbr++) {\r\n        char *string = s_recv (subscriber);\r\n\r\n        int zipcode, temperature, relhumidity;\r\n        sscanf (string, \"%d %d %d\",\r\n            &zipcode, &temperature, &relhumidity);\r\n        total_temp += temperature;\r\n\tprintf(\"recv string:%s \\n\",string);\r\n        free (string);\r\n    }\r\n    printf (\"Average temperature for zipcode '%s' was %dF\\n\",\r\n        filter, (int) (total_temp / update_nbr));\r\n\r\n    zmq_close (subscriber);\r\n    zmq_ctx_destroy (context);\r\n    return 0;\r\n}\r\n\r\n\r\nwuserver1.c\r\n\r\n#include \"zhelpers.h\"\r\n\r\nint main (void)\r\n{\r\n    //  Prepare our context and publisher\r\n    void *context = zmq_ctx_new ();\r\n    void *publisher = zmq_socket (context, ZMQ_PUB);\r\n    //int rc = zmq_bind (publisher, \"tcp://*:5556\");\r\n\tint rc = zmq_bind (publisher, \"ipc://test-wu-frontend.ipc\");\r\n    assert (rc == 0);\r\n\r\n    //  Initialize random number generator\r\n    srandom ((unsigned) time (NULL));\r\n    while (1) {\r\n        //  Get values that will fool the boss\r\n        int zipcode, temperature, relhumidity;\r\n        zipcode     = randof (100000);\r\n        temperature = randof (215) - 80;\r\n        relhumidity = randof (50) + 10;\r\n\r\n        //  Send message to all subscribers\r\n        char update [20];\r\n        sprintf (update, \"%05d %d %d\", 10001, temperature, relhumidity);\r\n        s_send (publisher, update);\r\n\tsleep(3);\r\n    }\r\n    zmq_close (publisher);\r\n    zmq_ctx_destroy (context);\r\n    return 0;\r\n}\r\n\r\n\r\nwuserver2.c\r\n#include \"zhelpers.h\"\r\n\r\nint main (void)\r\n{\r\n    //  Prepare our context and publisher\r\n    void *context = zmq_ctx_new ();\r\n    void *publisher = zmq_socket (context, ZMQ_PUB);\r\n    //int rc = zmq_bind (publisher, \"tcp://*:5556\");\r\n\tint rc = zmq_bind (publisher, \"ipc://test-wu-frontend.ipc\");\r\n    assert (rc == 0);\r\n\r\n    //  Initialize random number generator\r\n    srandom ((unsigned) time (NULL));\r\n    while (1) {\r\n        //  Get values that will fool the boss\r\n        int zipcode, temperature, relhumidity;\r\n        zipcode     = randof (100000);\r\n        temperature = randof (215) - 80;\r\n        relhumidity = randof (50) + 10;\r\n\r\n        //  Send message to all subscribers\r\n        char update [20];\r\n        sprintf (update, \"%05d %d %d\", 10002, temperature, relhumidity);\r\n        s_send (publisher, update);\r\n\tsleep(3);\r\n    }\r\n    zmq_close (publisher);\r\n    zmq_ctx_destroy (context);\r\n    return 0;\r\n}\r\n\r\n# What's the expected result?\r\nI expect that the wuclient could receive message from wuserver1 and wuserver2\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3971", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3971/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3971/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3971/events", "html_url": "https://github.com/zeromq/libzmq/issues/3971", "id": 646857112, "node_id": "MDU6SXNzdWU2NDY4NTcxMTI=", "number": 3971, "title": "test_security_zap crash", "user": {"login": "dimhen", "id": 65384618, "node_id": "MDQ6VXNlcjY1Mzg0NjE4", "avatar_url": "https://avatars1.githubusercontent.com/u/65384618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dimhen", "html_url": "https://github.com/dimhen", "followers_url": "https://api.github.com/users/dimhen/followers", "following_url": "https://api.github.com/users/dimhen/following{/other_user}", "gists_url": "https://api.github.com/users/dimhen/gists{/gist_id}", "starred_url": "https://api.github.com/users/dimhen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dimhen/subscriptions", "organizations_url": "https://api.github.com/users/dimhen/orgs", "repos_url": "https://api.github.com/users/dimhen/repos", "events_url": "https://api.github.com/users/dimhen/events{/privacy}", "received_events_url": "https://api.github.com/users/dimhen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-28T06:57:48Z", "updated_at": "2020-06-30T15:02:05Z", "closed_at": "2020-06-30T15:02:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\ntest_security_zap FAIL\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): d78ecb8dc89983952f7381af4f229ecb1eea21ab\r\n* OS: Fedora 32 / x86_64\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  valgrind --tool=memcheck --expensive-definedness-checks=yes --trace-children=yes ./tests/test_security_zap\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n[...]\r\ntests/test_security_zap.cpp:469:test_zap_protocol_error_wrong_request_id_curve:PASS\r\ntests/test_security_zap.cpp:469:test_zap_protocol_error_wrong_status_invalid_curve:PASS\r\n==29946== Thread 3 ZMQbg/IO/0:\r\n==29946== Invalid read of size 1\r\n==29946==    at 0x48887D7: zmq::pipe_t::check_read() (pipe.cpp:173)\r\n==29946==    by 0x4876493: zmq::io_thread_t::in_event() (io_thread.cpp:91)\r\n==29946==    by 0x4874445: zmq::epoll_t::loop() (epoll.cpp:206)\r\n==29946==    by 0x48AD927: thread_routine (thread.cpp:250)\r\n==29946==    by 0x4948431: start_thread (pthread_create.c:477)\r\n==29946==    by 0x4DB59D2: clone (clone.S:95)\r\n==29946==  Address 0x58 is not stack'd, malloc'd or (recently) free'd\r\n==29946== \r\n==29946== \r\n==29946== Process terminating with default action of signal 11 (SIGSEGV): dumping core\r\n==29946==  Access not within mapped region at address 0x58\r\n==29946==    at 0x48887D7: zmq::pipe_t::check_read() (pipe.cpp:173)\r\n==29946==    by 0x4876493: zmq::io_thread_t::in_event() (io_thread.cpp:91)\r\n==29946==    by 0x4874445: zmq::epoll_t::loop() (epoll.cpp:206)\r\n==29946==    by 0x48AD927: thread_routine (thread.cpp:250)\r\n==29946==    by 0x4948431: start_thread (pthread_create.c:477)\r\n==29946==    by 0x4DB59D2: clone (clone.S:95)\r\n==29946==  If you believe this happened as a result of a stack\r\n==29946==  overflow in your program's main thread (unlikely but\r\n==29946==  possible), you can try to increase the size of the\r\n==29946==  main thread stack using the --main-stacksize= flag.\r\n==29946==  The main thread stack size used in this run was 8388608.\r\n==29946== \r\n==29946== HEAP SUMMARY:\r\n==29946==     in use at exit: 145,915 bytes in 95 blocks\r\n==29946==   total heap usage: 7,646 allocs, 7,551 frees, 11,071,260 bytes allocated\r\n==29946== \r\n==29946== LEAK SUMMARY:\r\n==29946==    definitely lost: 0 bytes in 0 blocks\r\n==29946==    indirectly lost: 0 bytes in 0 blocks\r\n==29946==      possibly lost: 912 bytes in 3 blocks\r\n==29946==    still reachable: 145,003 bytes in 92 blocks\r\n==29946==         suppressed: 0 bytes in 0 blocks\r\n==29946== Rerun with --leak-check=full to see details of leaked memory\r\n==29946== \r\n==29946== For lists of detected and suppressed errors, rerun with: -s\r\n==29946== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\r\n\r\n\r\n\r\n# What's the expected result?\r\ntest PASS\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3970", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3970/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3970/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3970/events", "html_url": "https://github.com/zeromq/libzmq/issues/3970", "id": 646842557, "node_id": "MDU6SXNzdWU2NDY4NDI1NTc=", "number": 3970, "title": "Invalid argument (../libzmq/src/condition_variable.hpp:308)", "user": {"login": "wzli", "id": 8307912, "node_id": "MDQ6VXNlcjgzMDc5MTI=", "avatar_url": "https://avatars2.githubusercontent.com/u/8307912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wzli", "html_url": "https://github.com/wzli", "followers_url": "https://api.github.com/users/wzli/followers", "following_url": "https://api.github.com/users/wzli/following{/other_user}", "gists_url": "https://api.github.com/users/wzli/gists{/gist_id}", "starred_url": "https://api.github.com/users/wzli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wzli/subscriptions", "organizations_url": "https://api.github.com/users/wzli/orgs", "repos_url": "https://api.github.com/users/wzli/repos", "events_url": "https://api.github.com/users/wzli/events{/privacy}", "received_events_url": "https://api.github.com/users/wzli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 25, "created_at": "2020-06-28T05:08:43Z", "updated_at": "2020-07-14T08:16:27Z", "closed_at": "2020-07-14T08:16:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nRare and sporadic crashing with\r\nInvalid argument (../libzmq/src/condition_variable.hpp:308)\r\n\r\nI've encountered this problem twice, once on d0d23446f5797364c885c7fdc982e5a1efe616fa, and once on v4.3.2 (hoping it would be more stable).\r\n\r\n# Environment\r\nUbuntu 18.04 docker container\r\n\r\n* libzmq version: \r\nd0d23446f5797364c885c7fdc982e5a1efe616fa\r\nand v4.3.2\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nIt happens rarely, haven't found out how to reliably reproduce. Maybe correlated high processing load, but here's my setup.\r\nA P2P mesh with 32 nodes running inside different docker containers on the same host, talking over the virtual bridge network. Each node binds a dish socket and transmits over radio socket using UDP. On average each node transmits ~8kB messages to 4-6 neighbors at around 30Hz. I encountered the problem on some node after letting the system run for a while.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nInvalid argument (../libzmq/src/condition_variable.hpp:308)\r\nAborted (core dumped)\r\nexited with code 134\r\n\r\nUnfortunately, I couldn't retrieve core dump since the docker container shutdown right after the crash. Will will keep the container running next time if I catch it again.\r\n\r\n# What's the expected result?\r\nNo crash and continued operation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3963", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3963/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3963/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3963/events", "html_url": "https://github.com/zeromq/libzmq/issues/3963", "id": 642319320, "node_id": "MDU6SXNzdWU2NDIzMTkzMjA=", "number": 3963, "title": "ZMQ_SNDHWM and ZMQ_RCVHWM do not work well", "user": {"login": "SRC-xiaojin", "id": 22129386, "node_id": "MDQ6VXNlcjIyMTI5Mzg2", "avatar_url": "https://avatars1.githubusercontent.com/u/22129386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SRC-xiaojin", "html_url": "https://github.com/SRC-xiaojin", "followers_url": "https://api.github.com/users/SRC-xiaojin/followers", "following_url": "https://api.github.com/users/SRC-xiaojin/following{/other_user}", "gists_url": "https://api.github.com/users/SRC-xiaojin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SRC-xiaojin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SRC-xiaojin/subscriptions", "organizations_url": "https://api.github.com/users/SRC-xiaojin/orgs", "repos_url": "https://api.github.com/users/SRC-xiaojin/repos", "events_url": "https://api.github.com/users/SRC-xiaojin/events{/privacy}", "received_events_url": "https://api.github.com/users/SRC-xiaojin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-20T06:20:23Z", "updated_at": "2020-06-20T10:01:34Z", "closed_at": "2020-06-20T10:01:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nHi : \r\nI push msg below:\r\n        int send_hwm_ = NUM;\r\n\r\n        zmq::context_t context;\r\n        zmq::socket_t backend(context, socket_type::push);\r\n\r\n        backend.bind(\"tcp://10.254.0.42:10001\");\r\n        backend.set(zmq::sockopt::sndhwm, send_hwm_);\r\n        backend.set(zmq::sockopt::connect_timeout, 1000);\r\n\r\n        for (uint32_t i = 0; i < NUM; i++)\r\n        {\r\n            std::string SendMsg = std::string(strJson) + std::to_string(i);\r\n            zmq::message_t message(SendMsg.begin(), SendMsg.end());\r\n            send_result_t resut = backend.send(message, send_flags::dontwait);\r\n        }\r\n\r\nI pull msg below:\r\n    int recv_hwm_ = NUM;\r\n\r\n    zmq::context_t context;\r\n    zmq::socket_t frontend(context, socket_type::pull);\r\n\r\n    frontend.connect(\"tcp://10.254.0.42:10001\");\r\n    frontend.set(zmq::sockopt::rcvhwm, recv_hwm_);\r\n    frontend.set(zmq::sockopt::connect_timeout, 1000);\r\n\r\nfor (;;)\r\n    {\r\n        zmq::message_t message;\r\n        recv_result_t result = frontend.recv(message,recv_flags::dontwait);\r\n\r\n        if (result.has_value())\r\n        {\r\n            //std::cout << message.to_string() << std::endl;\r\n            count++;\r\n            std::cout << \"count is: \" << count << std::endl;\r\n            if (count == 1 || count % NUM == 1)\r\n            {\r\n                start = std::chrono::system_clock::now();\r\n            }\r\n\r\n            if (count == NUM || count % NUM == 0)\r\n            {\r\n                std::chrono::system_clock::time_point end = std::chrono::system_clock::now();\r\n                std::cout << \"[\" << __FUNCTION__ << \"]\"\r\n                          << \"ChronoScope: \" << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count()\r\n                          << \"ms.\" << std::endl;\r\n                break;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            continue;\r\n        }\r\n    }\r\n\r\n\r\nwhen I set NUM 1000, it works well.But when I set NUM 2000, pull size can only receive 1000 msg,But I have set ZMQ_SNDHWM and ZMQ_RCVHWM 2000, what is the problem, and How can I control it.\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: Linux VM_0_42_centos 3.10.0-514.21.1.el7.x86_64 #1 SMP Thu May 25 17:04:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3956", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3956/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3956/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3956/events", "html_url": "https://github.com/zeromq/libzmq/issues/3956", "id": 636319476, "node_id": "MDU6SXNzdWU2MzYzMTk0NzY=", "number": 3956, "title": "Pub-sub filtering does not appear to use exact matching", "user": {"login": "4scastro", "id": 26650102, "node_id": "MDQ6VXNlcjI2NjUwMTAy", "avatar_url": "https://avatars0.githubusercontent.com/u/26650102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/4scastro", "html_url": "https://github.com/4scastro", "followers_url": "https://api.github.com/users/4scastro/followers", "following_url": "https://api.github.com/users/4scastro/following{/other_user}", "gists_url": "https://api.github.com/users/4scastro/gists{/gist_id}", "starred_url": "https://api.github.com/users/4scastro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/4scastro/subscriptions", "organizations_url": "https://api.github.com/users/4scastro/orgs", "repos_url": "https://api.github.com/users/4scastro/repos", "events_url": "https://api.github.com/users/4scastro/events{/privacy}", "received_events_url": "https://api.github.com/users/4scastro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-10T14:56:58Z", "updated_at": "2020-06-10T15:10:57Z", "closed_at": "2020-06-10T15:10:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nWhen sending messages with an envelope in a pub-sub pattern [as per the docs](http://zguide.zeromq.org/page:chapter2#Pub-Sub-Message-Envelopes) it seems like the filtering does not use exact matching. In other words, if the message is published with an envelope \"B\" and the subscriber subscribes with \"Baa\", it still gets those messages. Unless I'm missing something, I thought the point of separating the filter into a separate part of the message was so it could unambiguously filter messages based on the envelope?\r\n\r\n# Environment\r\nWindows 10\r\n\r\n* libzmq version (commit hash if unreleased): \r\n4.3.2 - Used the Windows VS2015 binaries downloaded [from here](https://zeromq.org/download/)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1. Start with the two C examples provided [here](http://zguide.zeromq.org/page:chapter2#Pub-Sub-Message-Envelopes)\r\n2. Modify the subscriber to subscribe to \"Baa\" instead of \"B\"\r\n3. Run the publisher and subscriber code.\r\n\r\nAlternatively, instead of modifying the subscriber modify the publisher to publish over \"Baa\" instead of \"B\" - this exhibits the same behaviour.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nThe subscriber receives the messages. In the received multipart message, the envelope matches what was originally published despite being different to what was used to subscribe.\r\n\r\n# What's the expected result?\r\n\r\nI would have expected the messages to be filtered on the basis that the subscriber has subscribed to a filter that does not exactly match the envelope the publisher is using to publish. If this isn't a bug and is in fact expected behaviour, it isn't clear from the docs that this is the case.\r\n\r\nLet me know if you need any more info. Thanks in advance!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3948", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3948/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3948/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3948/events", "html_url": "https://github.com/zeromq/libzmq/issues/3948", "id": 629793301, "node_id": "MDU6SXNzdWU2Mjk3OTMzMDE=", "number": 3948, "title": "do we support mips cpu arch", "user": {"login": "xiaozhitaba", "id": 10022712, "node_id": "MDQ6VXNlcjEwMDIyNzEy", "avatar_url": "https://avatars3.githubusercontent.com/u/10022712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiaozhitaba", "html_url": "https://github.com/xiaozhitaba", "followers_url": "https://api.github.com/users/xiaozhitaba/followers", "following_url": "https://api.github.com/users/xiaozhitaba/following{/other_user}", "gists_url": "https://api.github.com/users/xiaozhitaba/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiaozhitaba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiaozhitaba/subscriptions", "organizations_url": "https://api.github.com/users/xiaozhitaba/orgs", "repos_url": "https://api.github.com/users/xiaozhitaba/repos", "events_url": "https://api.github.com/users/xiaozhitaba/events{/privacy}", "received_events_url": "https://api.github.com/users/xiaozhitaba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-03T08:17:20Z", "updated_at": "2020-06-03T08:33:21Z", "closed_at": "2020-06-03T08:32:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "do we support mips cpu arch ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3946", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3946/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3946/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3946/events", "html_url": "https://github.com/zeromq/libzmq/issues/3946", "id": 628012768, "node_id": "MDU6SXNzdWU2MjgwMTI3Njg=", "number": 3946, "title": "Terminate is freezing", "user": {"login": "aviz", "id": 2520726, "node_id": "MDQ6VXNlcjI1MjA3MjY=", "avatar_url": "https://avatars1.githubusercontent.com/u/2520726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aviz", "html_url": "https://github.com/aviz", "followers_url": "https://api.github.com/users/aviz/followers", "following_url": "https://api.github.com/users/aviz/following{/other_user}", "gists_url": "https://api.github.com/users/aviz/gists{/gist_id}", "starred_url": "https://api.github.com/users/aviz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aviz/subscriptions", "organizations_url": "https://api.github.com/users/aviz/orgs", "repos_url": "https://api.github.com/users/aviz/repos", "events_url": "https://api.github.com/users/aviz/events{/privacy}", "received_events_url": "https://api.github.com/users/aviz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T18:03:48Z", "updated_at": "2020-06-02T10:48:15Z", "closed_at": "2020-06-02T10:48:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nWith the following stack\r\nApache / PHP / ZeroMQ.\r\n\r\nWhen apache decides to close a worker and fork a new one, ZeroMQ Lib is freezing the termination process and causing the worker not to die.\r\nFollowing is the stack trace.\r\napache calling php terminate which calls zmq terminate.\r\n zmq::ctx_t::terminate passes -1 as the timeout to  zmq::mailbox_t::recv which means endless timeout, thus the process freezing.\r\n```\r\n#0  0x00007fe9a8db2bed in poll () from /lib64/libc.so.6\r\n#1  0x00007fe9970eaaca in zmq::signaler_t::wait(int) () from /lib64/libzmq.so.5\r\n#2  0x00007fe9970cf870 in zmq::mailbox_t::recv(zmq::command_t*, int) () from /lib64/libzmq.so.5\r\n#3  0x00007fe9970bdddc in zmq::ctx_t::terminate() () from /lib64/libzmq.so.5\r\n#4  0x00007fe9971025b8 in zmq_ctx_term () from /lib64/libzmq.so.5\r\n#5  0x00007fe997325238 in php_zmq_context_destroy (context=0x560cc9e21660) at /var/tmp/zmq/zmq.c:145\r\n#6  0x00007fe997325252 in php_zmq_context_dtor (res=0x560cc9ccb780) at /var/tmp/zmq/zmq.c:2752\r\n#7  0x00007fe9a563e58e in plist_entry_destructor () from /usr/lib64/httpd/modules/libphp7.so\r\n#8  0x00007fe9a563b378 in zend_hash_graceful_reverse_destroy () from /usr/lib64/httpd/modules/libphp7.so\r\n#9  0x00007fe9a5628e08 in zend_shutdown () from /usr/lib64/httpd/modules/libphp7.so\r\n#10 0x00007fe9a55c669b in php_module_shutdown () from /usr/lib64/httpd/modules/libphp7.so\r\n#11 0x00007fe9a55c6759 in php_module_shutdown_wrapper () from /usr/lib64/httpd/modules/libphp7.so\r\n#12 0x00007fe9a56c5a11 in php_apache_child_shutdown () from /usr/lib64/httpd/modules/libphp7.so\r\n#13 0x00007fe9a94c61ae in apr_pool_destroy () from /lib64/libapr-1.so.0\r\n#14 0x00007fe9a86b21dc in clean_child_exit () from /usr/lib64/httpd/modules/mod_mpm_prefork.so\r\n#15 0x00007fe9a86b2687 in child_main () from /usr/lib64/httpd/modules/mod_mpm_prefork.so\r\n#16 0x00007fe9a86b29f5 in make_child () from /usr/lib64/httpd/modules/mod_mpm_prefork.so\r\n#17 0x00007fe9a86b368e in prefork_run () from /usr/lib64/httpd/modules/mod_mpm_prefork.so\r\n#18 0x0000560cc7e7dffe in ap_run_mpm ()\r\n#19 0x0000560cc7e76d76 in main ()\r\n```\r\n\r\n# Environment\r\ncentos 7, php 7, zmqlib 4.1.4\r\n\r\n* libzmq version (commit hash if unreleased): zmqlib 4.1.4 (installed from centos)\r\n* OS: Linux Centos 7\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nafter a while, apache processes stating to hang.\r\n\r\n\r\n# What's the expected result?\r\n\r\napache to be able to close a worker..\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3945", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3945/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3945/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3945/events", "html_url": "https://github.com/zeromq/libzmq/issues/3945", "id": 627979778, "node_id": "MDU6SXNzdWU2Mjc5Nzk3Nzg=", "number": 3945, "title": "Failing tests", "user": {"login": "rex4539", "id": 227442, "node_id": "MDQ6VXNlcjIyNzQ0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/227442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rex4539", "html_url": "https://github.com/rex4539", "followers_url": "https://api.github.com/users/rex4539/followers", "following_url": "https://api.github.com/users/rex4539/following{/other_user}", "gists_url": "https://api.github.com/users/rex4539/gists{/gist_id}", "starred_url": "https://api.github.com/users/rex4539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions", "organizations_url": "https://api.github.com/users/rex4539/orgs", "repos_url": "https://api.github.com/users/rex4539/repos", "events_url": "https://api.github.com/users/rex4539/events{/privacy}", "received_events_url": "https://api.github.com/users/rex4539/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-31T14:57:27Z", "updated_at": "2020-05-31T15:06:55Z", "closed_at": "2020-05-31T15:06:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\n3 failing tests.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 3a2b3bc62555d4a9f1be3f524a015942093e08a6\r\n* OS: macOS 10.15.5 (19F94a)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  Make check\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n```\r\n====================================\r\n   zeromq 4.3.3: ./test-suite.log\r\n====================================\r\n\r\n# TOTAL: 116\r\n# PASS:  113\r\n# SKIP:  0\r\n# XFAIL: 0\r\n# FAIL:  3\r\n# XPASS: 0\r\n# ERROR: 0\r\n\r\n.. contents:: :depth: 2\r\n\r\nFAIL: tests/test_system\r\n=======================\r\n\r\ntests/test_system.cpp:114:test_localhost:PASS\r\nW: Only able to create 247 sockets on this box\r\ntests/test_system.cpp:96:test_max_sockets:FAIL: I: Tune your system to increase maximum allowed file handles\\nI: Run 'ulimit -n 1200' in bash\\n\r\n\r\n-----------------------\r\n2 Tests 1 Failures 0 Ignored \r\nFAIL\r\nFAIL tests/test_system (exit status: 1)\r\n\r\nFAIL: tests/test_shutdown_stress\r\n================================\r\n\r\ntests/test_shutdown_stress.cpp:55:test_shutdown_stress:FAIL: zmq_connect (socket, tdata->endpoint) failed, errno = 38 (Socket operation on non-socket)\r\n\r\n-----------------------\r\n1 Tests 1 Failures 0 Ignored \r\nFAIL\r\nFAIL tests/test_shutdown_stress (exit status: 1)\r\n\r\nFAIL: tests/test_connect_curve_fuzzer\r\n=====================================\r\n\r\nFAIL tests/test_connect_curve_fuzzer (exit status: 141)\r\n\r\n```\r\n\r\n# What's the expected result?\r\n\r\nTests pass.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3944", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3944/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3944/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3944/events", "html_url": "https://github.com/zeromq/libzmq/issues/3944", "id": 627972676, "node_id": "MDU6SXNzdWU2Mjc5NzI2NzY=", "number": 3944, "title": "libzmq 4.3.2 Segment fault at zmq::epoll_t::rm_fd", "user": {"login": "yapingcat", "id": 32125710, "node_id": "MDQ6VXNlcjMyMTI1NzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/32125710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yapingcat", "html_url": "https://github.com/yapingcat", "followers_url": "https://api.github.com/users/yapingcat/followers", "following_url": "https://api.github.com/users/yapingcat/following{/other_user}", "gists_url": "https://api.github.com/users/yapingcat/gists{/gist_id}", "starred_url": "https://api.github.com/users/yapingcat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yapingcat/subscriptions", "organizations_url": "https://api.github.com/users/yapingcat/orgs", "repos_url": "https://api.github.com/users/yapingcat/repos", "events_url": "https://api.github.com/users/yapingcat/events{/privacy}", "received_events_url": "https://api.github.com/users/yapingcat/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-31T14:19:14Z", "updated_at": "2020-06-09T09:26:00Z", "closed_at": "2020-06-09T09:25:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n# Issue description\r\nHello ! \r\nI have a  64-bit mutithreaded application running on embedded environment,and zmq coredumps  with the below stack. it may occur only occasionally.\r\n```\r\n#0  0xb6a8f07c in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:66\r\n#1  0xb6a926c0 in __GI_abort () at abort.c:90\r\n#2  0x00cbcf00 in zmq::zmq_abort (errmsg_=errmsg_@entry=0x0) at src/err.cpp:88\r\n#3  0x00cbcd44 in zmq::epoll_t::rm_fd (this=0xb6b910ac <lock>, handle_=<optimized out>) at src/epoll.cpp:113\r\n#4  0x00ce0360 in zmq::io_object_t::rm_fd (this=this@entry=0xb5801690, handle_=<optimized out>) at src/io_object.cpp:70\r\n#5  0x00cf13fc in zmq::stream_engine_t::unplug (this=this@entry=0xb5801690) at src/stream_engine.cpp:285\r\n#6  0x00cf180c in zmq::stream_engine_t::error (this=0xb5801690, reason_=zmq::stream_engine_t::timeout_error) at src/stream_engine.cpp:1103\r\n#7  0x00cc6768 in zmq::poller_base_t::execute_timers (this=this@entry=0x1bcc788) at src/poller_base.cpp:103\r\n#8  0x00cbc61c in zmq::epoll_t::loop (this=0x1bcc788) at src/epoll.cpp:173\r\n#9  0x00cd53cc in thread_routine (arg_=0x1bcc7c0) at src/thread.cpp:225\r\n#10 0xb6a24e44 in start_thread (arg=0x964ff250) at pthread_create.c:314\r\n#11 0xb6b2dd28 in ?? () from /lib/a7_softfp_neon-vfpv4/libc.so.6\r\n```\r\n```\r\n(gdb) f 3\r\n#3  0x00cbcd44 in zmq::epoll_t::rm_fd (this=0xb6b910ac <lock>, handle_=<optimized out>) at src/epoll.cpp:113\r\n113\tin src/epoll.cpp\r\n(gdb) p *this\r\n$5 = {<zmq::worker_poller_base_t> = {<zmq::poller_base_t> = {_vptr.poller_base_t = 0x0, _clock = {_last_tsc = 0, _last_time = 0}, _timers = {_M_t = {\r\n          _M_impl = {<std::allocator<std::_Rb_tree_node<std::pair<unsigned long long const, zmq::poller_base_t::timer_info_t> > >> = {<__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned long long const, zmq::poller_base_t::timer_info_t> > >> = {<No data fields>}, <No data fields>}, \r\n            _M_key_compare = {<std::binary_function<unsigned long long, unsigned long long, bool>> = {<No data fields>}, <No data fields>}, _M_header = {_M_color = std::_S_red, _M_parent = 0xb5700468, _M_left = 0xb5700570, _M_right = 0x0}, _M_node_count = 0}}}, _load = {_value = {<std::__atomic_base<unsigned int>> = {\r\n            _M_i = 32}, <No data fields>}}}, _ctx = @0x4, _worker = {_tfn = 0x4bd60 <std::ios_base::Init::~Init()@plt>, _arg = 0xb6ebbadc <std::__ioinit>, _name = \"\\310z\\351\\266\\004\\000\\000\\000\\034\\240\\337\\266\\f\\274\\361\\266\", _started = 200, _descriptor = 4, _thread_priority = -1226858508, _thread_sched_policy = -1225671672, \r\n      _thread_affinity_cpus = {_M_t = {_M_impl = {<std::allocator<std::_Rb_tree_node<int> >> = {<__gnu_cxx::new_allocator<std::_Rb_tree_node<int> >> = {<No data fields>}, <No data fields>}, _M_key_compare = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, _M_header = {_M_color = (unknown: 4), \r\n              _M_parent = 0xb6f4ca98 <_dl_fini>, _M_left = 0x0, _M_right = 0x0}, _M_node_count = 4}}}}}, _epoll_fd = 310624, _retired = {<std::_Vector_base<zmq::epoll_t::poll_entry_t*, std::allocator<zmq::epoll_t::poll_entry_t*> >> = {\r\n      _M_impl = {<std::allocator<zmq::epoll_t::poll_entry_t*>> = {<__gnu_cxx::new_allocator<zmq::epoll_t::poll_entry_t*>> = {<No data fields>}, <No data fields>}, _M_start = 0x11820d5 <std::__ioinit>, _M_finish = 0x116e264, _M_end_of_storage = 0x4}}, <No data fields>}}\r\n```\r\n```\r\n(gdb) f 8\r\n#8  0x00cbc61c in zmq::epoll_t::loop (this=0x1bcc788) at src/epoll.cpp:173\r\n173\tin src/epoll.cpp\r\n(gdb) p *this\r\n$4 = {<zmq::worker_poller_base_t> = {<zmq::poller_base_t> = {_vptr.poller_base_t = 0x1035080 <vtable for zmq::epoll_t+8>, _clock = {_last_tsc = 137035310075376, _last_time = 137035310}, _timers = {_M_t = {\r\n          _M_impl = {<std::allocator<std::_Rb_tree_node<std::pair<unsigned long long const, zmq::poller_base_t::timer_info_t> > >> = {<__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<unsigned long long const, zmq::poller_base_t::timer_info_t> > >> = {<No data fields>}, <No data fields>}, \r\n            _M_key_compare = {<std::binary_function<unsigned long long, unsigned long long, bool>> = {<No data fields>}, <No data fields>}, _M_header = {_M_color = std::_S_red, _M_parent = 0xb5800de0, _M_left = 0xb5800de0, _M_right = 0xb5800de0}, _M_node_count = 1}}}, _load = {_value = {<std::__atomic_base<unsigned int>> = {\r\n            _M_i = 6}, <No data fields>}}}, _ctx = @0x1cd2aa0, _worker = {_tfn = 0xcc62e4 <zmq::worker_poller_base_t::worker_routine(void*)>, _arg = 0x1bcc788, _name = \"ZMQbg/IO/0\\000\\000\\000\\000\\000\", _started = true, _descriptor = 2521821776, _thread_priority = -1, _thread_sched_policy = -1, _thread_affinity_cpus = {_M_t = {\r\n          _M_impl = {<std::allocator<std::_Rb_tree_node<int> >> = {<__gnu_cxx::new_allocator<std::_Rb_tree_node<int> >> = {<No data fields>}, <No data fields>}, _M_key_compare = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, _M_header = {_M_color = std::_S_red, _M_parent = 0x0, \r\n              _M_left = 0x1bcc7ec, _M_right = 0x1bcc7ec}, _M_node_count = 0}}}}}, _epoll_fd = 93, _retired = {<std::_Vector_base<zmq::epoll_t::poll_entry_t*, std::allocator<zmq::epoll_t::poll_entry_t*> >> = {\r\n      _M_impl = {<std::allocator<zmq::epoll_t::poll_entry_t*>> = {<__gnu_cxx::new_allocator<zmq::epoll_t::poll_entry_t*>> = {<No data fields>}, <No data fields>}, _M_start = 0xb5800490, _M_finish = 0xb5800490, _M_end_of_storage = 0xb5800494}}, <No data fields>}}\r\n```\r\nwe can see that, in frame 3 and frame 8, the two \u201cthis\u201d pointer  are different. I think it's strange.\r\nbecause the two \"this\" pointer should point to the same epoll_t object.\r\n\r\n# Environment\r\n\r\n```\r\nLinux version 3.10.0_hi3536 (xiaocong@bogon) (gcc version 4.8.3 20131202 (prerelease) (Hisilicon_v400) ) #23 SMP Wed Apr 22 14:43:34 CST 2020\r\n\r\nzmq version: 4.3.2\r\n```\r\n# What's the expected result?\r\nI expected to solve this problem. or please provide me with any other pointers to get around it\r\n\r\nThanks \r\nRegards\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3941", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3941/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3941/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3941/events", "html_url": "https://github.com/zeromq/libzmq/issues/3941", "id": 627517257, "node_id": "MDU6SXNzdWU2Mjc1MTcyNTc=", "number": 3941, "title": "errno portability", "user": {"login": "Miosss", "id": 8083959, "node_id": "MDQ6VXNlcjgwODM5NTk=", "avatar_url": "https://avatars0.githubusercontent.com/u/8083959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Miosss", "html_url": "https://github.com/Miosss", "followers_url": "https://api.github.com/users/Miosss/followers", "following_url": "https://api.github.com/users/Miosss/following{/other_user}", "gists_url": "https://api.github.com/users/Miosss/gists{/gist_id}", "starred_url": "https://api.github.com/users/Miosss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Miosss/subscriptions", "organizations_url": "https://api.github.com/users/Miosss/orgs", "repos_url": "https://api.github.com/users/Miosss/repos", "events_url": "https://api.github.com/users/Miosss/events{/privacy}", "received_events_url": "https://api.github.com/users/Miosss/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-29T20:22:09Z", "updated_at": "2020-06-01T17:33:34Z", "closed_at": "2020-05-29T22:18:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\n# Issue description\r\nI am using cppzmq. In  `socket_t.recv(...)` there is this if:\r\n`\r\nif (zmq_errno() == EAGAIN)\r\n\treturn {};\r\n`\r\nwhich returns `optional<>{}` (no value) when EAGAIN is encountered.  And it is, because I call `recv` with ZMQ_DONTWAIT flag. The problem is, that this condition is false (!) but the `zmq_errno()` returns correctly EAGAIN (11).\r\n\r\nThough this may seem bizarre, I debuged it and the problem is in the left part of the equality test: `== EAGAIN`. Because `EAGAIN` is 42, instead of 11.\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* cppzmq: 4.6.0\r\n* OS: Windows\r\n\r\nI am preety sure what is the cause of the problem, though I do not have idea how to solve it. But it all comes down to the setup I believe.\r\n\r\nI use libzmq in C++ Builder 10.3 (old Borland). But building CMake with bcc32c was impossible for me. so I took the shortcut. I built the libzmq.dll with MSVC 2019 and generated libzmq.lib using Borland's implib tool.\r\nThanks to that, I can link with the dll. \r\n\r\nBut there is the problem - **errno**. I already have problem with the same dll used from go: [pebbe/zmq4 repo](https://github.com/pebbe/zmq4/issues/164). I found out, that `zmq_errno()` was deliberatly created to solve any problems with application linking to other runtime that the libzmq, but here it is worse.\r\nIt turns out, that `EAGAIN` in errno.h for msvc is 11, but in errno.h for Borland it is 42. They have completely different errno.h!\r\n\r\nSo, libzmq for me is built with msvc and EAGAIN = 11, but EAGAIN in Borland's crt is 42!\r\nAnd since I include headers in my app, they get included from Borlands libraries.\r\n\r\n# What's the expected result?\r\n\r\nI would hope, that zmq_errno() -> EAGAIN is equal to EAGAIN in different compiler... Can it be done? \r\n\r\nThe more serious problem is that integer values for errors from errno.,h are not truly standard. and since the 'names' are just macros, and there can be multiple implementations of errno.h ...\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3940", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3940/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3940/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3940/events", "html_url": "https://github.com/zeromq/libzmq/issues/3940", "id": 627491966, "node_id": "MDU6SXNzdWU2Mjc0OTE5NjY=", "number": 3940, "title": "zmq_poll crashes in xread_activated when using XPUB socket ", "user": {"login": "mrseanmorris", "id": 29612778, "node_id": "MDQ6VXNlcjI5NjEyNzc4", "avatar_url": "https://avatars0.githubusercontent.com/u/29612778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrseanmorris", "html_url": "https://github.com/mrseanmorris", "followers_url": "https://api.github.com/users/mrseanmorris/followers", "following_url": "https://api.github.com/users/mrseanmorris/following{/other_user}", "gists_url": "https://api.github.com/users/mrseanmorris/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrseanmorris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrseanmorris/subscriptions", "organizations_url": "https://api.github.com/users/mrseanmorris/orgs", "repos_url": "https://api.github.com/users/mrseanmorris/repos", "events_url": "https://api.github.com/users/mrseanmorris/events{/privacy}", "received_events_url": "https://api.github.com/users/mrseanmorris/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-29T19:29:12Z", "updated_at": "2020-06-01T17:28:57Z", "closed_at": "2020-06-01T17:28:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n# Issue description\r\nCrash when `XPUB` socket receives multiple consecutive newlines.  This seems to happen the second time that `xread_activated` is called. \r\n\r\n# Environment\r\nLinux\r\n\r\n* libzmq version (commit hash if unreleased): \r\n4.3.1\r\n\r\n* OS: \r\nRed Hat Enterprise Linux Server release 7.8 (Maipo)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n```cpp\r\n#include <zmq.h>\r\nint main( int argc, char * argv[] )\r\n{\r\n    void *ctx = zmq_ctx_new();\r\n    void *sock = zmq_socket( ctx, ZMQ_XPUB );\r\n    zmq_bind(sock, \"tcp://*:32001\");\r\n    while(1)\r\n    {\r\n        zmq_pollitem_t items[] = {\r\n            { sock, 0, ZMQ_POLLIN, 0 }\r\n        };\r\n        zmq_poll( items, 1, 100 );\r\n    }\r\n}\r\n```\r\n\r\n2. connect to port 32001 with netcat and send around 22 newlines.  the code above will crash.  we initially encountered this problem when doing some port scans on hosts running zeroMQ code, so i'm sure it's not just based on newlines, but this is an easy way to get it to crash.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n % ./bin/zmq_test_publisher\r\nSegmentation fault (core dumped)\r\n\r\nstack :\r\n```\r\n#0  0x000000000045b6fb in zmq::xpub_t::xread_activated (this=0x741b80, pipe_=0x7fffec009570) at src/xpub.cpp:170\r\n#1  0x000000000044c650 in zmq::socket_base_t::read_activated (this=0x741b80, pipe_=0x7fffec009570) at src/socket_base.cpp:1533\r\n#2  0x00000000004418c6 in zmq::pipe_t::process_activate_read (this=0x7fffec009570) at src/pipe.cpp:276\r\n#3  0x0000000000439e42 in zmq::object_t::process_command (this=0x7fffec009570, cmd_=...) at src/object.cpp:75\r\n#4  0x000000000044beb7 in zmq::socket_base_t::process_commands (this=0x741b80, timeout_=0, throttle_=false) at src/socket_base.cpp:1358\r\n#5  0x0000000000448756 in zmq::socket_base_t::getsockopt (this=0x741b80, option_=15, optval_=0x7fffffffd89c, optvallen_=0x7fffffffd8a0) at src/socket_base.cpp:450\r\n#6  0x000000000042009a in zmq_getsockopt (s_=0x741b80, option_=15, optval_=0x7fffffffd89c, optvallen_=0x7fffffffd8a0) at src/zmq.cpp:267\r\n#7  0x0000000000421719 in zmq_poll (items_=0x7fffffffda00, nitems_=1, timeout_=100) at src/zmq.cpp:943\r\n#8  0x000000000041f7d9 in zmq::poll (items_=0x7fffffffda00, nitems_=1, timeout_=100) at include/zmq.hpp:156\r\n#9  0x000000000041f5f3 in main (argc=1, argv=0x7fffffffdb38) at src/test_publisher.cpp:14\r\n```\r\n\r\nhere are the local variables before line 165 is executed :\r\n\r\n```\r\n165     in src/xpub.cpp\r\n(gdb) info locals\r\nnotify = true\r\nmsg_data = 0x7fffffffd578 \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\r\ndata = 0x0\r\nmetadata = 0x0\r\nsize = 0\r\nsubscribe = false\r\nsub = {_u = {base = {metadata = 0x0, unused = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\", '\\000' <repeats 24 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, vsm = {metadata = 0x0,\r\n      data = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\", '\\000' <repeats 23 times>, size = 9 '\\t', type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, lmsg = {metadata = 0x0, content = 0xa0a0a0a0a0a0a0a,\r\n      unused = \"\\n\", '\\000' <repeats 24 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, zclmsg = {metadata = 0x0, content = 0xa0a0a0a0a0a0a0a,\r\n      unused = \"\\n\", '\\000' <repeats 24 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, cmsg = {metadata = 0x0, data = 0xa0a0a0a0a0a0a0a, size = 10,\r\n      unused = '\\000' <repeats 17 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, delimiter = {metadata = 0x0, unused = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\", '\\000' <repeats 24 times>, \"\\t\",\r\n      type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}}}\r\n\r\n\r\n```\r\nand after the crash :\r\n\r\n```\r\n(gdb) info locals\r\nnotify = true\r\nmsg_data = 0x7fffffffd578 \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\r\ndata = 0xffffffffffffffff <error: Cannot access memory at address 0xffffffffffffffff>\r\nmetadata = 0x0\r\nsize = 1\r\nsubscribe = false\r\nsub = {_u = {base = {metadata = 0x0, unused = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\", '\\000' <repeats 24 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, vsm = {metadata = 0x0,\r\n      data = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\", '\\000' <repeats 23 times>, size = 9 '\\t', type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, lmsg = {metadata = 0x0, content = 0xa0a0a0a0a0a0a0a,\r\n      unused = \"\\n\", '\\000' <repeats 24 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, zclmsg = {metadata = 0x0, content = 0xa0a0a0a0a0a0a0a,\r\n      unused = \"\\n\", '\\000' <repeats 24 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, cmsg = {metadata = 0x0, data = 0xa0a0a0a0a0a0a0a, size = 10,\r\n      unused = '\\000' <repeats 17 times>, \"\\t\", type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}, delimiter = {metadata = 0x0, unused = \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\", '\\000' <repeats 24 times>, \"\\t\",\r\n      type = 101 'e', flags = 0 '\\000', group = '\\000' <repeats 15 times>, routing_id = 0}}}\r\n\r\n```\r\n\r\nThe code on line `xpub.cpp:170` is trying to dereference the data pointer and assign a value to it.  I see some suspicious comments next to identical code further up in the method :\r\n\r\n```cpp\r\n            //  ZMTP 3.1 hack: we need to support sub/cancel commands, but\r\n            //  we can't give them back to userspace as it would be an API\r\n            //  breakage since the payload of the message is completely\r\n            //  different. Manually craft an old-style message instead.\r\n```\r\n\r\n# What's the expected result?\r\n\r\nThe API should not crash on input data regardless of whether it's formatted correctly.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3939", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3939/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3939/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3939/events", "html_url": "https://github.com/zeromq/libzmq/issues/3939", "id": 625816481, "node_id": "MDU6SXNzdWU2MjU4MTY0ODE=", "number": 3939, "title": "_Buynode0", "user": {"login": "sourcedelica", "id": 4219652, "node_id": "MDQ6VXNlcjQyMTk2NTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4219652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcedelica", "html_url": "https://github.com/sourcedelica", "followers_url": "https://api.github.com/users/sourcedelica/followers", "following_url": "https://api.github.com/users/sourcedelica/following{/other_user}", "gists_url": "https://api.github.com/users/sourcedelica/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcedelica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcedelica/subscriptions", "organizations_url": "https://api.github.com/users/sourcedelica/orgs", "repos_url": "https://api.github.com/users/sourcedelica/repos", "events_url": "https://api.github.com/users/sourcedelica/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcedelica/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-27T15:50:02Z", "updated_at": "2020-05-27T16:00:50Z", "closed_at": "2020-05-27T15:50:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "public: struct std::_Tree_node<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t>,void *> * __thiscall std::_Tree_buy<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t>,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t> > >::_Buynode0(void)+0x3C(0x6c90bd08,0x72557040,0x72557040,0x6c908df4) [libzmq-v110-x86-Release.dll]\r\nprotected: class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<class zmq::own_t *> > > __thiscall std::_Tree<class std::_Tset_traits<class zmq::own_t *,struct std::less<class zmq::own_t *>,class std::allocator<class zmq::own_t *>,0> >::_Insert_at<class zmq::own_t * const &,struct std::_Nil>(bool,struct std::_Tree_node<class zmq::own_t *,void *> *,class zmq::own_t * const &,struct std::_Nil)+0xE5(0x83135e08,0x89bfab0,0x6c8c9637,0x89bfac0) [libzmq-v110-x86-Release.dll]\r\nprivate: void __thiscall zmq::ctx_t::connect_inproc_sockets(class zmq::socket_base_t *,struct zmq::options_t &,struct zmq::ctx_t::pending_connection_t const &,enum zmq::ctx_t::side)+0xCA(0x89bfac0,0x89bfb00,0x6c8d5405,0x2e) [libzmq-v110-x86-Release.dll]\r\nprotected: void __thiscall std::_Tree<class std::_Tmap_traits<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,struct zmq::ctx_t::pending_connection_t,struct std::less<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t> >,1> >::_Copy<struct std::integral_constant<bool,0> >(class std::_Tree<class std::_Tmap_traits<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,struct zmq::ctx_t::pending_connection_t,struct std::less<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t> >,1> > const &,struct std::integral_constant<bool,0>)+0x57(0x2e,0x89bfac0,0x3025b250,0x9) [libzmq-v110-x86-Release.dll]\r\npublic: static int __cdecl zmq::curve_client_tools_t::process_welcome(unsigned char const *,unsigned int,unsigned char const *,unsigned char const *,unsigned char *,unsigned char *,unsigned char *)+0x35(0x724a52fc,0x6c8d9710,0x3025b250,0x7f5cf60) [libzmq-v110-x86-Release.dll]\r\npublic: void __thiscall zmq::fq_t::activated(class zmq::pipe_t *)+0x30(0x7f5cf60,0x7f5cf60,0x7f5cad8,0x7f5cad8) [libzmq-v110-x86-Release.dll]\r\nprotected: struct std::pair<class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t> > > >,class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t> > > > > __thiscall std::_Tree<class std::_Tmap_traits<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,struct zmq::ctx_t::pending_connection_t,struct std::less<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > >,class std::allocator<struct std::pair<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const ,struct zmq::ctx_t::pending_connection_t> >,1> >::_Eqrange(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)+0x1CE(0x7f5cf60,0x89bfb60,0x3,0x7f5cad8) [libzmq-v110-x86-Release.dll]\r\nprotected: int __thiscall zmq::mechanism_t::parse_metadata(unsigned char const *,unsigned int,bool)+0xA1(0xa1b08593,0x3,0x7f5cad8,0x0) [libzmq-v110-x86-Release.dll]\r\npublic: virtual __thiscall zmq::plain_server_t::~plain_server_t(void)+0x69() [libzmq-v110-x86-Release.dll]\r\nprivate: virtual void __thiscall zmq::session_base_t::process_attach(struct zmq::i_engine *)+0x26(0x7f5cad8,0xf,0x89bfbf0,0x89bfbe8) [libzmq-v110-x86-Release.dll]\r\nprivate: void __thiscall zmq::session_base_t::start_connecting(bool)+0x7C(0x89bfe0c,0x5,0xfa,0x89bfe0c) [libzmq-v110-x86-Release.dll]\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3938", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3938/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3938/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3938/events", "html_url": "https://github.com/zeromq/libzmq/issues/3938", "id": 625481895, "node_id": "MDU6SXNzdWU2MjU0ODE4OTU=", "number": 3938, "title": "Received lots of unexpected messages.", "user": {"login": "NilChow", "id": 57666663, "node_id": "MDQ6VXNlcjU3NjY2NjYz", "avatar_url": "https://avatars2.githubusercontent.com/u/57666663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NilChow", "html_url": "https://github.com/NilChow", "followers_url": "https://api.github.com/users/NilChow/followers", "following_url": "https://api.github.com/users/NilChow/following{/other_user}", "gists_url": "https://api.github.com/users/NilChow/gists{/gist_id}", "starred_url": "https://api.github.com/users/NilChow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NilChow/subscriptions", "organizations_url": "https://api.github.com/users/NilChow/orgs", "repos_url": "https://api.github.com/users/NilChow/repos", "events_url": "https://api.github.com/users/NilChow/events{/privacy}", "received_events_url": "https://api.github.com/users/NilChow/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-27T08:17:37Z", "updated_at": "2020-05-27T09:54:48Z", "closed_at": "2020-05-27T09:54:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nI use the Pub/Sub to send and receive message. Recently, the Sub has received lots of unexpected messages just like: \r\n    _Cookie: mstshash=Administr_\r\nor \r\n    _Connection: keep-alive\r\n    Accept-Encoding: gzip, deflate_\r\n\r\nBut I never send these messages in my Pub, what cause this problem?\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.0.4\r\n* OS: windows 10/ Linux\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3936", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3936/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3936/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3936/events", "html_url": "https://github.com/zeromq/libzmq/issues/3936", "id": 624657526, "node_id": "MDU6SXNzdWU2MjQ2NTc1MjY=", "number": 3936, "title": "Mingw64 build fail", "user": {"login": "DarkGodOne", "id": 12151282, "node_id": "MDQ6VXNlcjEyMTUxMjgy", "avatar_url": "https://avatars1.githubusercontent.com/u/12151282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarkGodOne", "html_url": "https://github.com/DarkGodOne", "followers_url": "https://api.github.com/users/DarkGodOne/followers", "following_url": "https://api.github.com/users/DarkGodOne/following{/other_user}", "gists_url": "https://api.github.com/users/DarkGodOne/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarkGodOne/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarkGodOne/subscriptions", "organizations_url": "https://api.github.com/users/DarkGodOne/orgs", "repos_url": "https://api.github.com/users/DarkGodOne/repos", "events_url": "https://api.github.com/users/DarkGodOne/events{/privacy}", "received_events_url": "https://api.github.com/users/DarkGodOne/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-26T07:23:19Z", "updated_at": "2020-06-04T06:24:10Z", "closed_at": "2020-06-04T06:23:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nMingw64 build error: Doesn't support Windows SEH\r\n\r\n\r\n# Environment\r\nWindows 10\r\nQt5.12.8 with Mingw7.3.0\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: Windows 10\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  use cmake-gui generate Makefile\r\n2. make\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n```\r\nPS D:\\zeromq-4.3.2\\builds\\mingw32> make\r\nScanning dependencies of target libzmq\r\n[  0%] Building CXX object CMakeFiles/libzmq.dir/src/thread.cpp.obj\r\nD:\\zeromq-4.3.2\\src\\thread.cpp: In member function 'void zmq::thread_t::applyThreadName()':\r\nD:\\zeromq-4.3.2\\src\\thread.cpp:136:11: error: expected '(' before '__except'\r\n     catch __except (EXCEPTION_CONTINUE_EXECUTION) {\r\n           ^~~~~~~~\r\nD:\\zeromq-4.3.2\\src\\thread.cpp:136:11: error: expected type-specifier before '__except'\r\nD:\\zeromq-4.3.2\\src\\thread.cpp:136:20: error: expected ')' before '(' token\r\n     catch __except (EXCEPTION_CONTINUE_EXECUTION) {\r\n                    ^\r\nD:\\zeromq-4.3.2\\src\\thread.cpp:136:20: error: expected '{' before '(' token\r\nD:\\zeromq-4.3.2\\src\\thread.cpp:136:51: error: expected ';' before '{' token\r\n     catch __except (EXCEPTION_CONTINUE_EXECUTION) {\r\n                                                   ^\r\nAt global scope:\r\ncc1plus.exe: warning: unrecognized command line option '-Wno-tautological-constant-compare'\r\nmake[2]: *** [CMakeFiles\\libzmq.dir\\build.make:1105: CMakeFiles/libzmq.dir/src/thread.cpp.obj] Error 1\r\nmake[1]: *** [CMakeFiles\\Makefile2:143: CMakeFiles/libzmq.dir/all] Error 2\r\nmake: *** [Makefile:149: all] Error 2\r\n```\r\n\r\n\r\n# What's the expected result?\r\nI just replace this to try{}catch(...){}\r\nIs that no problem\uff1f\uff1f\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3927", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3927/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3927/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3927/events", "html_url": "https://github.com/zeromq/libzmq/issues/3927", "id": 621612872, "node_id": "MDU6SXNzdWU2MjE2MTI4NzI=", "number": 3927, "title": "Subscriptions not delivered to late publisher", "user": {"login": "gummif", "id": 7014479, "node_id": "MDQ6VXNlcjcwMTQ0Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7014479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gummif", "html_url": "https://github.com/gummif", "followers_url": "https://api.github.com/users/gummif/followers", "following_url": "https://api.github.com/users/gummif/following{/other_user}", "gists_url": "https://api.github.com/users/gummif/gists{/gist_id}", "starred_url": "https://api.github.com/users/gummif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gummif/subscriptions", "organizations_url": "https://api.github.com/users/gummif/orgs", "repos_url": "https://api.github.com/users/gummif/repos", "events_url": "https://api.github.com/users/gummif/events{/privacy}", "received_events_url": "https://api.github.com/users/gummif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-20T09:34:36Z", "updated_at": "2020-05-20T21:32:01Z", "closed_at": "2020-05-20T21:30:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n# Issue description\r\n\r\nThere is a XPUB-XSUB broker with multiple PUB and SUB clients connected on TCP localhost. When a late PUB socket is connected, some messages are not delivered to the SUB sockets. But when a new SUB socket arrives, the messages start being delivered to the correct SUB sockets. If the new SUB socket disconnects, no more messages are delivered.\r\n\r\nI'm not certain from the documentation if this expected behavior or possibly a bug. The real setup is actually a pair of SUB and PUB for each client, around 6 clients in total. Before I try to boil this down to a minimal example I just want to make sure that this is a real issue.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: Windows 10\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  Run XPUB-XSUB broker (bind)\r\n2. Connect SUB socket with multiple subscriptions\r\n3. Later connect PUB socket sending messages regularly\r\n4. Connect/disconnect another SUB socket subscribing to \"\" (which appears to turn on/off messages to the first SUB socket)\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nMessages are send only when another SUB socket is connected later\r\n\r\n# What's the expected result?\r\n\r\nLate PUB connections should send to relevant SUB sockets (if I am not mistaken)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3923", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3923/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3923/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3923/events", "html_url": "https://github.com/zeromq/libzmq/issues/3923", "id": 619774811, "node_id": "MDU6SXNzdWU2MTk3NzQ4MTE=", "number": 3923, "title": "This line doesn't seem correct", "user": {"login": "Jasper-Bekkers", "id": 49594, "node_id": "MDQ6VXNlcjQ5NTk0", "avatar_url": "https://avatars2.githubusercontent.com/u/49594?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jasper-Bekkers", "html_url": "https://github.com/Jasper-Bekkers", "followers_url": "https://api.github.com/users/Jasper-Bekkers/followers", "following_url": "https://api.github.com/users/Jasper-Bekkers/following{/other_user}", "gists_url": "https://api.github.com/users/Jasper-Bekkers/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jasper-Bekkers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jasper-Bekkers/subscriptions", "organizations_url": "https://api.github.com/users/Jasper-Bekkers/orgs", "repos_url": "https://api.github.com/users/Jasper-Bekkers/repos", "events_url": "https://api.github.com/users/Jasper-Bekkers/events{/privacy}", "received_events_url": "https://api.github.com/users/Jasper-Bekkers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-17T19:04:16Z", "updated_at": "2020-05-30T22:16:38Z", "closed_at": "2020-05-30T22:16:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm pretty sure this should be `|` instead of `||`, though I have no idea what the implications would be. I'm guessing this mostly works by accident because WSA_FLAG_OVERLAPPED is 0x1 but it means WSA_FLAG_NO_HANDLE_INHERIT never gets set.\r\n\r\nhttps://github.com/zeromq/libzmq/blob/e7f802d1ac7d61c89912ab261a19967b7d65b411/src/ip.cpp#L107", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3919", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3919/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3919/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3919/events", "html_url": "https://github.com/zeromq/libzmq/issues/3919", "id": 619223126, "node_id": "MDU6SXNzdWU2MTkyMjMxMjY=", "number": 3919, "title": "Thread Sanitizer support?", "user": {"login": "bill-torpey", "id": 11855062, "node_id": "MDQ6VXNlcjExODU1MDYy", "avatar_url": "https://avatars1.githubusercontent.com/u/11855062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bill-torpey", "html_url": "https://github.com/bill-torpey", "followers_url": "https://api.github.com/users/bill-torpey/followers", "following_url": "https://api.github.com/users/bill-torpey/following{/other_user}", "gists_url": "https://api.github.com/users/bill-torpey/gists{/gist_id}", "starred_url": "https://api.github.com/users/bill-torpey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bill-torpey/subscriptions", "organizations_url": "https://api.github.com/users/bill-torpey/orgs", "repos_url": "https://api.github.com/users/bill-torpey/repos", "events_url": "https://api.github.com/users/bill-torpey/events{/privacy}", "received_events_url": "https://api.github.com/users/bill-torpey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-05-15T20:21:08Z", "updated_at": "2020-05-20T19:01:43Z", "closed_at": "2020-05-20T19:01:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We've been using clang's \"Thread Sanitizer\" for a while now, and while it's not perfect, it has surfaced some potential problems that we are glad to have solved.  \r\n\r\nZeroMQ presents particular challenges w/TSAN, mostly because ZeroMQ uses non-standard synchronization techniques, which cause TSAN to report *lots of* false positives.\r\n\r\nSome of those false positives can be eliminated by building ZeroMQ to use compiler intrinsics for atomic operations (`-DZMQ_HAVE_ATOMIC_INTRINSICS=1`), which [TSAN understands](https://github.com/google/sanitizers/wiki/ThreadSanitizerAtomicOperations).\r\n\r\nUnfortunately, that isn't enough to reduce the numer of false positives to a  manageable level. The approach to eliminating false positives with other sanitizers (e.g., ASAN) has been to simply not instrument the problematic code.  However, that approach doesn't work w/TSAN -- it breaks TSAN's stack-unwinding code, so stack traces are incorrect.  (See <https://github.com/google/sanitizers/issues/941> for more information).\r\n\r\nThe best compromise appears to be to disable all TSAN instrumentation when building ZeroMQ *except* for function entry/exit code -- this preserves proper stack frames.  Then, at runtime a `called_from_lib:libzmq.so` is also required to prevent errors being reported from TSAN's interceptors (for functions like `memcmp`).\r\n\r\nThe relevant (undocumented) compile options are:\r\n\r\n- `-mllvm -tsan-instrument-memory-accesses=0`\r\n- `-mllvm -tsan-instrument-atomics=0`\r\n- `-mllvm -tsan-instrument-func-entry-exit=1`\r\n\r\nI've got a PR [ready to go](https://github.com/zeromq/libzmq/compare/master...nyfix:tsan-opts) to update the TSAN settings, but before I submit it I wanted to ask a couple of questions:\r\n\r\n- Does the approach above (providing minimal TSAN support for libzmq) make sense?  \r\n- Is there any interest in using TSAN to analyze libzmq itself?\r\n  - I suspect not, but wanted to ask.  A better alternative to TSAN might be [Thread Safety Analysis](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html), but that would be a fair amount of work to annotate the libzmq code.\r\n\r\nThanks.\r\n\r\nP.S.  In [TSAN's documentation](https://github.com/google/sanitizers/wiki/ThreadSanitizerSuppressions), a suppression for `libzmq.so` is used as an example -- does anyone know how/why that got there?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3917", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3917/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3917/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3917/events", "html_url": "https://github.com/zeromq/libzmq/issues/3917", "id": 618177819, "node_id": "MDU6SXNzdWU2MTgxNzc4MTk=", "number": 3917, "title": "Clang++ 10 build fails", "user": {"login": "eugeneswalker", "id": 38933153, "node_id": "MDQ6VXNlcjM4OTMzMTUz", "avatar_url": "https://avatars2.githubusercontent.com/u/38933153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eugeneswalker", "html_url": "https://github.com/eugeneswalker", "followers_url": "https://api.github.com/users/eugeneswalker/followers", "following_url": "https://api.github.com/users/eugeneswalker/following{/other_user}", "gists_url": "https://api.github.com/users/eugeneswalker/gists{/gist_id}", "starred_url": "https://api.github.com/users/eugeneswalker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eugeneswalker/subscriptions", "organizations_url": "https://api.github.com/users/eugeneswalker/orgs", "repos_url": "https://api.github.com/users/eugeneswalker/repos", "events_url": "https://api.github.com/users/eugeneswalker/events{/privacy}", "received_events_url": "https://api.github.com/users/eugeneswalker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-05-14T12:10:10Z", "updated_at": "2020-05-17T15:02:34Z", "closed_at": "2020-05-17T15:02:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nBuilding `libzmq 4.3.2` fails using `clang++ 10.0` on `Ubuntu 18.04` for `x86_64`\r\n\r\n```\r\n$> ./configure --with-libsodium CFLAGS=-Wno-gnu CXXFLAGS=-Wno-gnu\r\n$> make\r\n...\r\nIn file included from src/mtrie.cpp:32:\r\n./src/generic_mtrie_impl.hpp:52:46: error: ISO C++ requires the name after '::~' to be found in the same scope as the name before '::~' [-Werror,-Wdtor-name]\r\ntemplate <typename T> zmq::generic_mtrie_t<T>::~generic_mtrie_t ()\r\n                      ~~~~~~~~~~~~~~~~~~~~~~~^~\r\n                                             ::generic_mtrie_t\r\n1 error generated.\r\nMakefile:4468: recipe for target 'src/src_libzmq_la-mtrie.lo' faile\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3916", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3916/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3916/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3916/events", "html_url": "https://github.com/zeromq/libzmq/issues/3916", "id": 618005305, "node_id": "MDU6SXNzdWU2MTgwMDUzMDU=", "number": 3916, "title": "Assertion failed in signaller.cpp:190", "user": {"login": "steffenb7333", "id": 51918817, "node_id": "MDQ6VXNlcjUxOTE4ODE3", "avatar_url": "https://avatars2.githubusercontent.com/u/51918817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffenb7333", "html_url": "https://github.com/steffenb7333", "followers_url": "https://api.github.com/users/steffenb7333/followers", "following_url": "https://api.github.com/users/steffenb7333/following{/other_user}", "gists_url": "https://api.github.com/users/steffenb7333/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffenb7333/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffenb7333/subscriptions", "organizations_url": "https://api.github.com/users/steffenb7333/orgs", "repos_url": "https://api.github.com/users/steffenb7333/repos", "events_url": "https://api.github.com/users/steffenb7333/events{/privacy}", "received_events_url": "https://api.github.com/users/steffenb7333/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T07:49:49Z", "updated_at": "2020-05-14T09:17:55Z", "closed_at": "2020-05-14T09:17:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "The assertion `zmq_assert (nbytes == sizeof (dummy));` defined in signaller.cpp:190 has triggered in a long running process under Windows.\r\nIs there a known cause why this may have happend?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3915", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3915/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3915/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3915/events", "html_url": "https://github.com/zeromq/libzmq/issues/3915", "id": 617864379, "node_id": "MDU6SXNzdWU2MTc4NjQzNzk=", "number": 3915, "title": "zmq_ctx_term is hang when process exit and i set zmq linger to 2", "user": {"login": "lymlhhj123", "id": 16513473, "node_id": "MDQ6VXNlcjE2NTEzNDcz", "avatar_url": "https://avatars3.githubusercontent.com/u/16513473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lymlhhj123", "html_url": "https://github.com/lymlhhj123", "followers_url": "https://api.github.com/users/lymlhhj123/followers", "following_url": "https://api.github.com/users/lymlhhj123/following{/other_user}", "gists_url": "https://api.github.com/users/lymlhhj123/gists{/gist_id}", "starred_url": "https://api.github.com/users/lymlhhj123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lymlhhj123/subscriptions", "organizations_url": "https://api.github.com/users/lymlhhj123/orgs", "repos_url": "https://api.github.com/users/lymlhhj123/repos", "events_url": "https://api.github.com/users/lymlhhj123/events{/privacy}", "received_events_url": "https://api.github.com/users/lymlhhj123/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-14T01:52:26Z", "updated_at": "2020-05-14T09:15:40Z", "closed_at": "2020-05-14T09:15:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nproblem: code was written in 2018-07-04, until 2020-05-13, eveny thing is fine. 2020-05-13, process stopped by systemd, but was hang in zmq_ctx_term\r\n\r\nzmq socket create source code:\r\n    void* s = NULL;\r\n    int r = 0;\r\n    int linger = 2;\r\n    int ipv6_support = 0;\r\n    char end_point[END_POINT];\r\n\r\n    if (strrchr(address, ':') != NULL) {\r\n        ipv6_support = 1;  // enable ipv6\r\n    }\r\n\r\n    if (ipv6_support == 0) {\r\n        snprintf(end_point, END_POINT, ZMQ_IPV4_ENDPOINT, address, port);\r\n    } else {\r\n        snprintf(end_point, END_POINT, ZMQ_IPV6_ENDPOINT, address, port);\r\n    }\r\n\r\n    s = zmq_socket(z_ctx, ZMQ_REQ);\r\n    if (s == NULL) {\r\n        errno = ECREATEZSOCK;\r\n        return NULL;\r\n    }\r\n\r\n    if (ipv6_support == 1) {\r\n        zmq_setsockopt(s, ZMQ_IPV6, &ipv6_support, sizeof(ipv6_support));\r\n    }\r\n\r\n    zmq_setsockopt(s, ZMQ_LINGER, &linger, sizeof(linger));\r\n\r\nI set zmq linger to 2, not 0\r\n\r\nGDB bt: \r\n(gdb) info thread\r\n  Id   Target Id         Frame\r\n  18   Thread 0x7f16f13d3700 (LWP 2153208) \"log\" 0x00007f16f3b25995 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\r\n  17   Thread 0x7f16ef3ff700 (LWP 2153225) \"io-worker-0\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  16   Thread 0x7f16eebfe700 (LWP 2153226) \"io-worker-1\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  15   Thread 0x7f16edbff700 (LWP 2153229) \"io-worker-2\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  14   Thread 0x7f16ec7ff700 (LWP 2153232) \"hb-worker-0\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  13   Thread 0x7f16eaffe700 (LWP 2153266) \"service\" 0x00007f16f3b25d42 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0\r\n  12   Thread 0x7f16ea7fd700 (LWP 2153267) \"admin_socket\" 0x00007f16f2c06f0d in poll () from /lib64/libc.so.6\r\n  11   Thread 0x7f16e91f4700 (LWP 2154163) \"ceph-osd\" 0x00007f16f5a11644 in __io_getevents_0_4 () from /opt/h3c/lib/libaio.so.1\r\n  10   Thread 0x7f16e89f3700 (LWP 2154164) \"ceph-osd\" 0x00007f16f3b27afb in do_futex_wait.constprop.1 () from /lib64/libpthread.so.0\r\n  9    Thread 0x7f16da3fe700 (LWP 2154259) \"ceph-osd\" 0x00007f16f3b27afb in do_futex_wait.constprop.1 () from /lib64/libpthread.so.0\r\n  8    Thread 0x7f16f6d14e80 (LWP 2155828) \"ceph-osd\" 0x00007f16f4f6fe67 in timer_helper_thread () from /lib64/librt.so.1\r\n  7    Thread 0x7f16857ff700 (LWP 2191105) \"safe_timer\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  6    Thread 0x7f168b7ff700 (LWP 2191106) \"safe_timer\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  5    Thread 0x7f1684ffe700 (LWP 2191110) \"safe_timer\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  4    Thread 0x7f16833fe700 (LWP 2191113) \"safe_timer\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  3    Thread 0x7f1683bff700 (LWP 2350307) \"safe_timer\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n  2    Thread 0x7f167fffe700 (LWP 2350308) \"safe_timer\" 0x00007f16f2c12183 in epoll_wait () from /lib64/libc.so.6\r\n 1    Thread 0x7f16f6d38e80 (LWP 2151812) \"ceph-osd\" 0x00007f16f2c06f0d in poll () from /lib64/libc.so.6\r\n(gdb) list\r\n1       req_adapter.c: No such file or directory.\r\n(gdb) bt\r\n#0  0x00007f16f2c06f0d in poll () from /lib64/libc.so.6\r\n#1  0x00007f16f66fa8ba in zmq::signaler_t::wait (this=this@entry=0x7f16f1dfaef8, timeout_=timeout_@entry=-1) at signaler.cpp:173\r\n#2  0x00007f16f66ec81f in zmq::mailbox_t::recv (this=this@entry=0x7f16f1dfae98, cmd_=cmd_@entry=0x7ffd937625a0, timeout_=timeout_@entry=-1) at mailbox.cpp:72\r\n#3  0x00007f16f66e3e2c in zmq::ctx_t::terminate (this=0x7f16f1dfae00) at ctx.cpp:142\r\n#4  0x00007f16f6927ef1 in destroy_zmq_ctx () from /opt/h3c/lib/libalarm.so\r\n#5  0x00005575f9271367 in main ()\r\n(gdb) down\r\nBottom (innermost) frame selected; you cannot go down.\r\n(gdb) up\r\n#1  0x00007f16f66fa8ba in zmq::signaler_t::wait (this=this@entry=0x7f16f1dfaef8, timeout_=timeout_@entry=-1) at signaler.cpp:173\r\n173     signaler.cpp: No such file or directory.\r\n(gdb) up\r\n#2  0x00007f16f66ec81f in zmq::mailbox_t::recv (this=this@entry=0x7f16f1dfae98, cmd_=cmd_@entry=0x7ffd937625a0, timeout_=timeout_@entry=-1) at mailbox.cpp:72\r\n72      mailbox.cpp: No such file or directory.\r\n(gdb) up\r\n#3  0x00007f16f66e3e2c in zmq::ctx_t::terminate (this=0x7f16f1dfae00) at ctx.cpp:142\r\n142     ctx.cpp: No such file or directory.\r\n(gdb) p *this\r\n$1 = {tag = 2880293630, sockets = {items = {<std::_Vector_base<zmq::socket_base_t*, std::allocator<zmq::socket_base_t*> >> = {\r\n        _M_impl = {<std::allocator<zmq::socket_base_t*>> = {<__gnu_cxx::new_allocator<zmq::socket_base_t*>> = {<No data fields>}, <No data fields>},\r\n          _M_start = 0x7f168683e0b0, _M_finish = 0x7f168683e0b8, _M_end_of_storage = 0x7f168683e0b8}}, <No data fields>}},\r\n  empty_slots = {<std::_Vector_base<unsigned int, std::allocator<unsigned int> >> = {\r\n      _M_impl = {<std::allocator<unsigned int>> = {<__gnu_cxx::new_allocator<unsigned int>> = {<No data fields>}, <No data fields>}, _M_start = 0x7f1686886000,\r\n        _M_finish = 0x7f1686886ff8, _M_end_of_storage = 0x7f1686887000}}, <No data fields>}, starting = false, terminating = true, slot_sync = {mutex = {__data = {\r\n        __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __elision = 0, __list = {__prev = 0x0, __next = 0x0}},\r\n      __size = '\\000' <repeats 39 times>, __align = 0}}, reaper = 0x7f1686831720,\r\n  io_threads = {<std::_Vector_base<zmq::io_thread_t*, std::allocator<zmq::io_thread_t*> >> = {\r\n      _M_impl = {<std::allocator<zmq::io_thread_t*>> = {<__gnu_cxx::new_allocator<zmq::io_thread_t*>> = {<No data fields>}, <No data fields>},\r\n        _M_start = 0x7f168683e0a0, _M_finish = 0x7f168683e0a8, _M_end_of_storage = 0x7f168683e0a8}}, <No data fields>}, slot_count = 1026, slots = 0x7f168683f000,\r\n  term_mailbox = {cpipe = {<zmq::ypipe_base_t<zmq::command_t, 16>> = {_vptr.ypipe_base_t = 0x7f16f691fe10 <vtable for zmq::ypipe_t<zmq::command_t, 16>+16>}, queue = {\r\n        begin_chunk = 0x7f16f1c65e00, begin_pos = 0, back_chunk = 0x7f16f1c65e00, back_pos = 0, end_chunk = 0x7f16f1c65e00, end_pos = 1, spare_chunk = {ptr = 0x0}},\r\n      w = 0x7f16f1c65e00, r = 0x7f16f1c65e00, f = 0x7f16f1c65e00, c = {ptr = 0x0}}, signaler = {w = 27, r = 27, pid = 2151812}, sync = {mutex = {__data = {\r\n          __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __elision = 0, __list = {__prev = 0x0, __next = 0x0}},\r\n        __size = '\\000' <repeats 39 times>, __align = 0}}, active = false}, endpoints = {_M_t = {\r\n      _M_impl = {<std::allocator<std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, zmq::endpoint_t> > >> = {<__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, zmq::endpoint_t> > >> = {<No data fields>}, <No data fields>},\r\n        _M_key_compare = {<std::binary_function<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, _M_header = {_M_color = std::_S_red, _M_parent = 0x0, _M_left = 0x7f16f1dfaf40,\r\n          _M_right = 0x7f16f1dfaf40}, _M_node_count = 0}}}, pending_connections = {_M_t = {\r\n      _M_impl = {<std::allocator<std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, zmq::pending_connection_t> > >> = {<__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> > const, zmq::pending_connection_t> > >> = {<No data fields>}, <No data fields>},\r\n        _M_key_compare = {<std::binary_function<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool>> = {<No data fields>}, <No data fields>}, _M_header = {_M_color = std::_S_red, _M_parent = 0x0, _M_left = 0x7f16f1dfaf70,\r\n          _M_right = 0x7f16f1dfaf70}, _M_node_count = 0}}}, endpoints_sync = {mutex = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0,\r\n        __spins = 0, __elision = 0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\\000' <repeats 39 times>, __align = 0}}, static max_socket_id = {value = 5},\r\n  max_sockets = 1023, io_thread_count = 1, ipv6 = false, opt_sync = {mutex = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0,\r\n        __elision = 0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\\000' <repeats 39 times>, __align = 0}}, pid = 2151812}\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased):  libzmq.3.1.0\r\n* OS: linux 4.14.0-49.9\r\n\r\n\r\ni don't know why zmq_ctx_term is blocked, i set zmq linger to 2, plsease help me! thank you\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3912", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3912/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3912/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3912/events", "html_url": "https://github.com/zeromq/libzmq/issues/3912", "id": 617315020, "node_id": "MDU6SXNzdWU2MTczMTUwMjA=", "number": 3912, "title": "More characters received than send in pub-sub pattern", "user": {"login": "yuzifu", "id": 853731, "node_id": "MDQ6VXNlcjg1MzczMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/853731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuzifu", "html_url": "https://github.com/yuzifu", "followers_url": "https://api.github.com/users/yuzifu/followers", "following_url": "https://api.github.com/users/yuzifu/following{/other_user}", "gists_url": "https://api.github.com/users/yuzifu/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuzifu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuzifu/subscriptions", "organizations_url": "https://api.github.com/users/yuzifu/orgs", "repos_url": "https://api.github.com/users/yuzifu/repos", "events_url": "https://api.github.com/users/yuzifu/events{/privacy}", "received_events_url": "https://api.github.com/users/yuzifu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-13T10:00:50Z", "updated_at": "2020-05-14T00:57:25Z", "closed_at": "2020-05-13T10:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nMore characters received than send in pub-sub pattern\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: win 10 1909 64bit\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\nsubscriber\r\n```\r\nint main(int argc, char* argv[])\r\n{\r\n    int64_t max_msg_size = 5 * 1024 * 1024;\r\n    zmq::context_t context(1);\r\n\r\n    zmq::socket_t subscriber(context, ZMQ_SUB);\r\n    \r\n    subscriber.connect(\"tcp://127.0.0.1:5661\");\r\n    subscriber.setsockopt(ZMQ_SUBSCRIBE, \"\", 0);\r\n    subscriber.setsockopt(ZMQ_MAXMSGSIZE, &max_msg_size, sizeof(int64_t));\r\n\r\n    zmq::message_t update(max_msg_size);\r\n    size_t len;\r\n    while (true) \r\n    {\r\n        subscriber.recv(update, zmq::recv_flags::dontwait);\r\n\r\n        if (!update.empty())\r\n        {\r\n            len = update.size();\r\n            std::istringstream iss(static_cast<char*>(update.data()));\r\n            std::string msg = iss.str();\r\n            std::cout << \"recv \" << msg.length() << \" bytes\" << std::endl;\r\n\r\n            std::cout << msg << std::endl;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n2.\r\npublisher\r\n```\r\nint main(int argc, const char* argv[])\r\n{\r\n    time_t _start, _end;\r\n    double cost = 0;\r\n    int64_t max_msg_size = 5 * 1024 * 1024;\r\n    char* buf = nullptr;\r\n\r\n    zmq::context_t o_zmq_context_ = zmq::context_t(1);\r\n    zmq::socket_t o_push_socket_ = zmq::socket_t(o_zmq_context_, ZMQ_PUB);\r\n\r\n    o_push_socket_.bind(\"tcp://*:5661\");\r\n    o_push_socket_.setsockopt(ZMQ_MAXMSGSIZE, &max_msg_size, sizeof(int64_t));\r\n\r\n    time(&_start);\r\n\r\n    while (true)\r\n    {\r\n        time(&_end);\r\n        cost = difftime(_end, _start);\r\n        if (cost >= 30)\r\n        {\r\n            _start = _end;\r\n            buf = generate_msg_();\r\n\r\n            size_t len = strlen(buf );\r\n            zmq::message_t msg{ buf , len };\r\n            zmq::send_result_t rtn = o_push_socket_.send(msg, zmq::send_flags::none);\r\n            cout << \"send bytes(\" << len << \":\" << rtn.value() << \")\" << endl;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n//send bytes(15552:15552)\r\n//send bytes(16023:16023)\r\n//send bytes(15949:15949)\r\n//send bytes(15997:15997)\r\n\r\n//recv 15552 bytes\r\n//recv 16023 bytes\r\n//recv 15963 bytes\r\n//recv 16011 bytes\r\n\r\n\r\n# What's the expected result?\r\nThe received size is the same as the send size\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3884", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3884/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3884/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3884/events", "html_url": "https://github.com/zeromq/libzmq/issues/3884", "id": 606677106, "node_id": "MDU6SXNzdWU2MDY2NzcxMDY=", "number": 3884, "title": "What does Static Link Exception really mean?", "user": {"login": "guanbs", "id": 11540490, "node_id": "MDQ6VXNlcjExNTQwNDkw", "avatar_url": "https://avatars0.githubusercontent.com/u/11540490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guanbs", "html_url": "https://github.com/guanbs", "followers_url": "https://api.github.com/users/guanbs/followers", "following_url": "https://api.github.com/users/guanbs/following{/other_user}", "gists_url": "https://api.github.com/users/guanbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/guanbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guanbs/subscriptions", "organizations_url": "https://api.github.com/users/guanbs/orgs", "repos_url": "https://api.github.com/users/guanbs/repos", "events_url": "https://api.github.com/users/guanbs/events{/privacy}", "received_events_url": "https://api.github.com/users/guanbs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-25T03:20:13Z", "updated_at": "2020-04-25T09:18:56Z", "closed_at": "2020-04-25T09:18:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\nI would like to know what does Static Link Exception (SLE) really mean in the license. \r\n\r\n1. Can I static link libzmq into my application/library if it is used for commercial purpose?\r\n2. For commercial application/library, if static link is performed, should I open my application/library source code, provided that the code of libzmq is not modified.\r\n3. If static link is performed, can I license for my application/library under other licenses?\r\n\r\n[#3787](https://github.com/zeromq/libzmq/issues/3787) is a similar question but it is not for commercial purpose.\r\n[#2376](https://github.com/zeromq/libzmq/issues/2376) is great but it may last for a while.\r\n\r\nI am not doing static link right now and I do prefer dynamic link. The reason I ask this question is to clearify the static link concern I may face in future. It is not for finding some way to hide libzmq's work behind my software, but as mentioned in #3787, static link is sometimes more suitable that dynamic link.\r\n\r\nThanks,\r\nBoshen", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3883", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3883/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3883/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3883/events", "html_url": "https://github.com/zeromq/libzmq/issues/3883", "id": 605777501, "node_id": "MDU6SXNzdWU2MDU3Nzc1MDE=", "number": 3883, "title": "What to do if your logic needs the connecting client's IP address?", "user": {"login": "jerkstorecaller", "id": 58572326, "node_id": "MDQ6VXNlcjU4NTcyMzI2", "avatar_url": "https://avatars3.githubusercontent.com/u/58572326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jerkstorecaller", "html_url": "https://github.com/jerkstorecaller", "followers_url": "https://api.github.com/users/jerkstorecaller/followers", "following_url": "https://api.github.com/users/jerkstorecaller/following{/other_user}", "gists_url": "https://api.github.com/users/jerkstorecaller/gists{/gist_id}", "starred_url": "https://api.github.com/users/jerkstorecaller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jerkstorecaller/subscriptions", "organizations_url": "https://api.github.com/users/jerkstorecaller/orgs", "repos_url": "https://api.github.com/users/jerkstorecaller/repos", "events_url": "https://api.github.com/users/jerkstorecaller/events{/privacy}", "received_events_url": "https://api.github.com/users/jerkstorecaller/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-23T18:52:33Z", "updated_at": "2020-04-23T20:01:53Z", "closed_at": "2020-04-23T19:08:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm considering ZMQ to replace raw TCP sockets. From what I could read, ZMQ hides client address information from you.\r\n\r\nCan you then please explain how ZeroMQ would work for servers where the client IP is used in logic?\r\n\r\nExamples:\r\n\r\na) I want to allow special privileges to clients connecting from a specific IP, part of a configured whitelist on the server. For example, client attempts a REQ/REP command, the server must check client IP against the whitelist before executing. \r\nb) I want to restrict number of connected clients per IP to 2. If this is the 3rd active connection from that IP, my login function must reject them.\r\nc) I want to track failed login attempts by IP, so I can block misbehaving hosts\r\n\r\nI get that ZMQ doesn't just support TCP, but 99% of apps installed on your computer right now are designed to use TCP. It would be weird if ZMQ is letting a lowest common denominator transport drive the API decisions of the 99%.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3867", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3867/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3867/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3867/events", "html_url": "https://github.com/zeromq/libzmq/issues/3867", "id": 599140368, "node_id": "MDU6SXNzdWU1OTkxNDAzNjg=", "number": 3867, "title": "Integrating with OSS-Fuzz", "user": {"login": "Google-Autofuzz", "id": 27442508, "node_id": "MDQ6VXNlcjI3NDQyNTA4", "avatar_url": "https://avatars1.githubusercontent.com/u/27442508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Google-Autofuzz", "html_url": "https://github.com/Google-Autofuzz", "followers_url": "https://api.github.com/users/Google-Autofuzz/followers", "following_url": "https://api.github.com/users/Google-Autofuzz/following{/other_user}", "gists_url": "https://api.github.com/users/Google-Autofuzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Google-Autofuzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Google-Autofuzz/subscriptions", "organizations_url": "https://api.github.com/users/Google-Autofuzz/orgs", "repos_url": "https://api.github.com/users/Google-Autofuzz/repos", "events_url": "https://api.github.com/users/Google-Autofuzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Google-Autofuzz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 359027879, "node_id": "MDU6TGFiZWwzNTkwMjc4Nzk=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Testing)", "name": "Area (Testing)", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "bluca", "id": 782193, "node_id": "MDQ6VXNlcjc4MjE5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/782193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluca", "html_url": "https://github.com/bluca", "followers_url": "https://api.github.com/users/bluca/followers", "following_url": "https://api.github.com/users/bluca/following{/other_user}", "gists_url": "https://api.github.com/users/bluca/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluca/subscriptions", "organizations_url": "https://api.github.com/users/bluca/orgs", "repos_url": "https://api.github.com/users/bluca/repos", "events_url": "https://api.github.com/users/bluca/events{/privacy}", "received_events_url": "https://api.github.com/users/bluca/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "bluca", "id": 782193, "node_id": "MDQ6VXNlcjc4MjE5Mw==", "avatar_url": "https://avatars3.githubusercontent.com/u/782193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluca", "html_url": "https://github.com/bluca", "followers_url": "https://api.github.com/users/bluca/followers", "following_url": "https://api.github.com/users/bluca/following{/other_user}", "gists_url": "https://api.github.com/users/bluca/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluca/subscriptions", "organizations_url": "https://api.github.com/users/bluca/orgs", "repos_url": "https://api.github.com/users/bluca/repos", "events_url": "https://api.github.com/users/bluca/events{/privacy}", "received_events_url": "https://api.github.com/users/bluca/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 8, "created_at": "2020-04-13T21:14:15Z", "updated_at": "2020-04-27T22:21:51Z", "closed_at": "2020-04-27T22:21:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Greetings libzmq developers and contributors,\r\n\r\nWe\u2019re reaching out because your project is an important part of the open source ecosystem, and we\u2019d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz]( https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html ). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project. OSS-Fuzz will:\r\n\r\n- Continuously run at scale all the fuzzers you write.\r\n- Alert you when it finds issues.\r\n- Automatically close issues after they\u2019ve been fixed by a commit.\r\n\r\nMany widely used [open source projects]( https://github.com/google/oss-fuzz/tree/master/projects ) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues]( https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+ ). \r\n\r\nEven though typical integrations can be done in < 100 LoC, we have a [reward program]( https://www.google.com/about/appsecurity/patch-rewards/ ) in place which aims to recognize folks who are not just contributing to open source, but are also working hard to make it more secure.\r\n\r\nWe want to stress that anyone who meets the eligibility criteria and integrates a project with OSS-Fuzz is eligible for a reward.\r\n\r\nIf you're not interested in integrating with OSS-Fuzz, it would be helpful for us to understand why\u2014lack of interest, lack of time, or something else\u2014so we can better support projects like yours in the future.\r\n\r\nIf we\u2019ve missed your question in our [FAQ]( https://google.github.io/oss-fuzz/faq/ ), feel free to reply or reach out to us at oss-fuzz-outreach@googlegroups.com.\r\n\r\n\r\nThanks!\r\n\r\nTommy\r\nOSS-Fuzz Team\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3864", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3864/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3864/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3864/events", "html_url": "https://github.com/zeromq/libzmq/issues/3864", "id": 598658005, "node_id": "MDU6SXNzdWU1OTg2NTgwMDU=", "number": 3864, "title": "Wait until the message been transmitted to the network", "user": {"login": "yejw5", "id": 9035475, "node_id": "MDQ6VXNlcjkwMzU0NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/9035475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yejw5", "html_url": "https://github.com/yejw5", "followers_url": "https://api.github.com/users/yejw5/followers", "following_url": "https://api.github.com/users/yejw5/following{/other_user}", "gists_url": "https://api.github.com/users/yejw5/gists{/gist_id}", "starred_url": "https://api.github.com/users/yejw5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yejw5/subscriptions", "organizations_url": "https://api.github.com/users/yejw5/orgs", "repos_url": "https://api.github.com/users/yejw5/repos", "events_url": "https://api.github.com/users/yejw5/events{/privacy}", "received_events_url": "https://api.github.com/users/yejw5/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-13T03:59:45Z", "updated_at": "2020-04-13T10:44:22Z", "closed_at": "2020-04-13T10:44:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "\r\n As the [zmq_send docs](http://api.zeromq.org/2-1:zmq-send) says:\r\n\r\n`A successful invocation of zmq_send() does not indicate that the message has been transmitted to the network, only that it has been queued on the socket and \u00d8MQ has assumed responsibility for the message.`\r\n\r\nIs there any way that we can wait until the message been transmitted to the network?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3858", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3858/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3858/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3858/events", "html_url": "https://github.com/zeromq/libzmq/issues/3858", "id": 595426519, "node_id": "MDU6SXNzdWU1OTU0MjY1MTk=", "number": 3858, "title": "Support zmq_msg_init_copy for convenience", "user": {"login": "gummif", "id": 7014479, "node_id": "MDQ6VXNlcjcwMTQ0Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7014479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gummif", "html_url": "https://github.com/gummif", "followers_url": "https://api.github.com/users/gummif/followers", "following_url": "https://api.github.com/users/gummif/following{/other_user}", "gists_url": "https://api.github.com/users/gummif/gists{/gist_id}", "starred_url": "https://api.github.com/users/gummif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gummif/subscriptions", "organizations_url": "https://api.github.com/users/gummif/orgs", "repos_url": "https://api.github.com/users/gummif/repos", "events_url": "https://api.github.com/users/gummif/events{/privacy}", "received_events_url": "https://api.github.com/users/gummif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-04-06T21:04:06Z", "updated_at": "2020-04-09T23:00:16Z", "closed_at": "2020-04-09T23:00:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are 3 ways to initialize `zmq_msg_t`:\r\n1. Empty message\r\n2. With initial size of uninitialized memory\r\n3. Taking ownership/pointer to existing memory\r\n\r\nOne of the most common things done with ZeroMQ is constructing messages. A very common operation (textbook [example](https://www.oreilly.com/library/view/zeromq/9781449334437/ch01s04.html)) is to construct a message by copying data (especially for other language bindings). Without error checks it looks like so:\r\n```c\r\nzmq_msg_t m;\r\nzmq_msg_init_size(&m, size);\r\nmemcpy(zmq_msg_data(&m), data, size);\r\n```\r\nif data can be null, then it becomes\r\n```c\r\nzmq_msg_t m;\r\nzmq_msg_init_size(&m, size);\r\nif (size)\r\n    memcpy(zmq_msg_data(&m), data, size);\r\n```\r\nwhich are 3 function calls and 1 branch, excluding checks for errors.\r\n\r\nMay I suggest a 4th option to copy existing data `int zmq_msg_init_copy(zmq_msg_t *msg, const void *data, size_t size);`, used like so\r\n```c\r\nzmq_msg_t m;\r\nzmq_msg_init_copy(&m, data, size);\r\n```\r\n\r\nIf this is is well received I am willing to see how far I can go implementing it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3856", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3856/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3856/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3856/events", "html_url": "https://github.com/zeromq/libzmq/issues/3856", "id": 592385889, "node_id": "MDU6SXNzdWU1OTIzODU4ODk=", "number": 3856, "title": "websockets not built by default in latest master", "user": {"login": "grmt", "id": 5453386, "node_id": "MDQ6VXNlcjU0NTMzODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5453386?v=4", "gravatar_id": "", "url": "https://api.github.com/users/grmt", "html_url": "https://github.com/grmt", "followers_url": "https://api.github.com/users/grmt/followers", "following_url": "https://api.github.com/users/grmt/following{/other_user}", "gists_url": "https://api.github.com/users/grmt/gists{/gist_id}", "starred_url": "https://api.github.com/users/grmt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/grmt/subscriptions", "organizations_url": "https://api.github.com/users/grmt/orgs", "repos_url": "https://api.github.com/users/grmt/repos", "events_url": "https://api.github.com/users/grmt/events{/privacy}", "received_events_url": "https://api.github.com/users/grmt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-02T06:18:50Z", "updated_at": "2020-04-14T05:37:23Z", "closed_at": "2020-04-14T05:36:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nTrying to build libzmq with websocket support from latest master\r\n\r\nwssockets binding is not built because\r\n(1) In my environment $SOURCE_DIR is not assigned a value, I guess one should use CMAKE_SOURCE_DIR\r\n(2) ENABLE_DRAFTS is not assigned a value yet when the condition for building with wssockets support is reached\r\n\r\nA possible patch:\r\n[ws.zip](https://github.com/zeromq/libzmq/files/4419158/ws.zip)\r\n\r\n# Environment\r\nLinux VIVALDI 4.4.0-18362-Microsoft #476-Microsoft Fri Nov 01 16:53:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n* libzmq version (commit hash if unreleased): 3c13e9222d0c5d0b16fed955a20fc7cf7d6de37a\r\n* OS:  Ubuntu 19.10\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\ngit clone https://github.com/zeromq/libzmq.git\r\nmkdir build\r\ncd build\r\ncmake ..\r\n\r\nsudo make -j8 install\r\n\r\nNote that \r\n- the test samples are not built (see added a patch for that).\r\n- Still trying to figure out why wss test is not working\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n# What's the expected result?\r\ngarmt@VIVALDI:/mnt/c/03-src/GL/libzmq/build/bin$ ls -ltr *ws*\r\n-rwxrwxrwx 1 garmt garmt 64824 Apr  2 01:06 test_wss_transport\r\n-rwxrwxrwx 1 garmt garmt 65184 Apr  2 01:07 test_ws_transport\r\ngarmt@VIVALDI:/mnt/c/03-src/GL/libzmq/build/bin$ ./test_ws_transport\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:271:test_roundtrip:PASS\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:272:test_roundtrip_without_path:PASS\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:273:test_short_message:PASS\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:274:test_large_message:PASS\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:275:test_heartbeat:PASS\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:276:test_mask_shared_msg:PASS\r\n/mnt/c/03-src/GL/libzmq/tests/test_ws_transport.cpp:279:test_curve:PASS\r\n\r\n-----------------------\r\n7 Tests 0 Failures 0 Ignored\r\nOK\r\ngarmt@VIVALDI:/mnt/c/03-src/GL/libzmq/build/bin$ ./test_wss_transport\r\nWARNING: Forced closure of 1 sockets, this is an implementation error unless the test case failed\r\n/mnt/c/03-src/GL/libzmq/tests/test_wss_transport.cpp:132:test_roundtrip:FAIL: zmq_bind (sb, \"wss://*:*/roundtrip\") faile\r\nd, errno = 93 (Protocol not supported)\r\n\r\n-----------------------\r\n1 Tests 1 Failures 0 Ignored\r\nFAIL\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3854", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3854/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3854/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3854/events", "html_url": "https://github.com/zeromq/libzmq/issues/3854", "id": 590674257, "node_id": "MDU6SXNzdWU1OTA2NzQyNTc=", "number": 3854, "title": "Installation error following website installation instructions", "user": {"login": "auburus", "id": 7505454, "node_id": "MDQ6VXNlcjc1MDU0NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/7505454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auburus", "html_url": "https://github.com/auburus", "followers_url": "https://api.github.com/users/auburus/followers", "following_url": "https://api.github.com/users/auburus/following{/other_user}", "gists_url": "https://api.github.com/users/auburus/gists{/gist_id}", "starred_url": "https://api.github.com/users/auburus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auburus/subscriptions", "organizations_url": "https://api.github.com/users/auburus/orgs", "repos_url": "https://api.github.com/users/auburus/repos", "events_url": "https://api.github.com/users/auburus/events{/privacy}", "received_events_url": "https://api.github.com/users/auburus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-30T23:43:51Z", "updated_at": "2020-04-03T22:57:28Z", "closed_at": "2020-04-02T07:59:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry if this is not the proper repository to report this packaging issue, I wasn't sure about which one would is the appropiate one.\r\n\r\n# Issue description\r\n\r\nBy following the instructions provided [here](https://zeromq.org/download/#packages-for-debian-ubuntu-fedora-centos-rhel-suse) (under Packages for Debian, Ubuntu, Fedora, CentOS, RHEL, SUSE), an `apt-get` update command after installing the key reports the following error:\r\n\r\n```\r\nW: GPG error: http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ InRelease: The following signatures were invalid: EXPKEYSIG 62EB1A0917280DDF network OBS Project <network@build.opensuse.org>\r\nW: The repository 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ InRelease' is not signed.\r\n```\r\n\r\n# Environment\r\nFresh debian 9.0 install.\r\n\r\n\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nDockerfile to reproduce the issue:\r\n```\r\nFROM debian:stretch\r\n\r\nRUN apt-get update && apt-get install -y wget gnupg\r\n\r\nRUN echo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./\" >> /etc/apt/sources.list && \\\r\n    wget https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key -O- | apt-key add && \\\r\n    apt-get update && apt-get install -y libzmq3-dev\r\n```\r\n\r\nActual steps:\r\n1.  `echo \"deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./\" >> /etc/apt/sources.list `\r\n2. `wget https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key -O- | apt-key add`\r\n3. `apt-get update`\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n```\r\n-2020-03-30 23:12:22--  https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key\r\nResolving download.opensuse.org (download.opensuse.org)... Warning: apt-key output should not be parsed (stdout is not a terminal)\r\n195.135.221.134, 2620:113:80c0:8::13\r\nConnecting to download.opensuse.org (download.opensuse.org)|195.135.221.134|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 1080 (1.1K)\r\nSaving to: 'STDOUT'\r\n\r\n     0K .                                                     100% 12.8M=0s\r\n\r\n2020-03-30 23:12:49 (12.8 MB/s) - written to stdout [1080/1080]\r\n\r\nOK\r\nHit:1 http://security.debian.org/debian-security stretch/updates InRelease\r\nIgn:2 http://deb.debian.org/debian stretch InRelease\r\nGet:3 http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ InRelease [1607 B]\r\nHit:4 http://deb.debian.org/debian stretch-updates InRelease\r\nHit:5 http://deb.debian.org/debian stretch Release\r\nIgn:3 http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ InRelease\r\nGet:6 http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ Packages [11.1 kB]\r\nFetched 12.7 kB in 6s (1904 B/s)\r\nReading package lists...\r\nW: GPG error: http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ InRelease: The following signatures were invalid: EXPKEYSIG 62EB1A0917280DDF network OBS Project <network@build.opensuse.org\r\n>\r\nW: The repository 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0 ./ InRelease' is not signed.\r\nReading package lists...\r\nBuilding dependency tree...\r\nReading state information...\r\nThe following additional packages will be installed:\r\n  comerr-dev krb5-locales krb5-multidev libc-dev-bin libc6-dev\r\n  libgssapi-krb5-2 libgssrpc4 libk5crypto3 libkadm5clnt-mit11\r\n  libkadm5srv-mit11 libkdb5-8 libkeyutils1 libkrb5-3 libkrb5-dev\r\n  libkrb5support0 libnorm-dev libnorm1 libpgm-5.2-0 libpgm-dev libsodium-dev\r\n  libsodium18 libunwind-dev libunwind8 libzmq5 linux-libc-dev manpages\r\n  manpages-dev\r\nSuggested packages:\r\n  doc-base krb5-doc glibc-doc krb5-user libnorm-doc man-browser\r\nThe following NEW packages will be installed:\r\n  comerr-dev krb5-locales krb5-multidev libc-dev-bin libc6-dev\r\n  libgssapi-krb5-2 libgssrpc4 libk5crypto3 libkadm5clnt-mit11\r\n  libkadm5srv-mit11 libkdb5-8 libkeyutils1 libkrb5-3 libkrb5-dev\r\n  libkrb5support0 libnorm-dev libnorm1 libpgm-5.2-0 libpgm-dev libsodium-dev\r\n  libsodium18 libunwind-dev libunwind8 libzmq3-dev libzmq5 linux-libc-dev\r\n  manpages manpages-dev\r\n0 upgraded, 28 newly installed, 0 to remove and 0 not upgraded.\r\nNeed to get 11.1 MB of archives.\r\nAfter this operation, 41.2 MB of additional disk space will be used.\r\nWARNING: The following packages cannot be authenticated!\r\n  libnorm1 libnorm-dev libpgm-5.2-0 libpgm-dev libzmq5 libzmq3-dev\r\nE: There were unauthenticated packages and -y was used without --allow-unauthenticated\r\n```\r\n\r\n\r\n# What's the expected result?\r\napt-get update without problems\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3853", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3853/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3853/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3853/events", "html_url": "https://github.com/zeromq/libzmq/issues/3853", "id": 588969134, "node_id": "MDU6SXNzdWU1ODg5NjkxMzQ=", "number": 3853, "title": "Shared memory map transport", "user": {"login": "KOLANICH", "id": 240344, "node_id": "MDQ6VXNlcjI0MDM0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/240344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KOLANICH", "html_url": "https://github.com/KOLANICH", "followers_url": "https://api.github.com/users/KOLANICH/followers", "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}", "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}", "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions", "organizations_url": "https://api.github.com/users/KOLANICH/orgs", "repos_url": "https://api.github.com/users/KOLANICH/repos", "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}", "received_events_url": "https://api.github.com/users/KOLANICH/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-27T08:27:22Z", "updated_at": "2020-03-27T09:54:26Z", "closed_at": "2020-03-27T09:54:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does it make sense to have a memory map + ring buffer transport?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3845", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3845/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3845/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3845/events", "html_url": "https://github.com/zeromq/libzmq/issues/3845", "id": 577469305, "node_id": "MDU6SXNzdWU1Nzc0NjkzMDU=", "number": 3845, "title": "why zmq compile failed on macosx \uff1f", "user": {"login": "linuxsky", "id": 5879820, "node_id": "MDQ6VXNlcjU4Nzk4MjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5879820?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linuxsky", "html_url": "https://github.com/linuxsky", "followers_url": "https://api.github.com/users/linuxsky/followers", "following_url": "https://api.github.com/users/linuxsky/following{/other_user}", "gists_url": "https://api.github.com/users/linuxsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/linuxsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linuxsky/subscriptions", "organizations_url": "https://api.github.com/users/linuxsky/orgs", "repos_url": "https://api.github.com/users/linuxsky/repos", "events_url": "https://api.github.com/users/linuxsky/events{/privacy}", "received_events_url": "https://api.github.com/users/linuxsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-03-08T09:07:00Z", "updated_at": "2020-03-08T10:03:53Z", "closed_at": "2020-03-08T10:03:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "\u21d2  g++ -v\r\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\r\nApple clang version 11.0.0 (clang-1100.0.33.17)\r\nTarget: x86_64-apple-darwin19.3.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n\r\nConfigured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\r\nApple clang version 11.0.0 (clang-1100.0.33.17)\r\nTarget: x86_64-apple-darwin19.3.0\r\nThread model: posix\r\nInstalledDir: /Library/Developer/CommandLineTools/usr/bin\r\n\r\n\r\ninfo\uff1a\r\n  CXX      src/libzmq_la-ws_decoder.lo\r\n  CXX      src/libzmq_la-ws_encoder.lo\r\n  CXX      src/libzmq_la-ws_engine.lo\r\n  CXX      src/libzmq_la-ws_listener.lo\r\n  AR       external/unity/libunity.a\r\nar: `u' modifier ignored since `D' is the default (see `U')\r\n  AR       tests/libtestutil.a\r\nar: `u' modifier ignored since `D' is the default (see `U')\r\n  CXXLD    src/libzmq.la\r\nar: `u' modifier ignored since `D' is the default (see `U')\r\n  CXXLD    tools/curve_keygen\r\n  CXXLD    perf/remote_lat\r\n  CXXLD    perf/local_lat\r\n  CXXLD    perf/local_thr\r\nld: warning: ignoring file src/.libs/libzmq.a, building for macOS-x86_64 but attempting to link with file built for unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )\r\nld: warning: ignoring file src/.libs/libzmq.a, building for macOS-x86_64 but attempting to link with file built for unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )\r\nld: warning: ld: warning: ignoring file src/.libs/libzmq.a, building for macOS-x86_64 but attempting to link with file built for unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )ignoring file src/.libs/libzmq.a, building for macOS-x86_64 but attempting to link with file built for unknown-unsupported file format ( 0x21 0x3C 0x61 0x72 0x63 0x68 0x3E 0x0A 0x2F 0x20 0x20 0x20 0x20 0x20 0x20 0x20 )\r\n\r\nUndefined symbols for architecture x86_64:\r\n  \"_zmq_curve_keypair\", referenced from:\r\n      _main in curve_keygen.o\r\n  \"_zmq_errno\", referenced from:\r\n      _main in curve_keygen.o\r\nld: symbol(s) not found for architecture x86_64\r\nUndefined symbols for architecture x86_64:\r\n  \"_zmq_close\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_connect\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_ctx_term\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_init\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_msg_close\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_msg_data\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_msg_init_size\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_msg_size\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_recvmsg\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_sendmsg\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_socket\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_stopwatch_start\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_stopwatch_stop\", referenced from:\r\n      _main in remote_lat.o\r\n  \"_zmq_strerror\", referenced from:\r\n      _main in remote_lat.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nUndefined symbols for architecture x86_64:\r\n  \"_zmq_bind\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_close\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_ctx_term\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_init\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_msg_close\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_msg_init\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_msg_size\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_recvmsg\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_setsockopt\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_socket\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_stopwatch_start\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_stopwatch_stop\", referenced from:\r\n      _main in local_thr.o\r\n  \"_zmq_strerror\", referenced from:\r\n      _main in local_thr.o\r\nld: symbol(s) not found for architecture x86_64\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[1]: *** [Makefile:4263: tools/curve_keygen] Error 1\r\nmake[1]: *** Waiting for unfinished jobs....\r\nUndefined symbols for architecture x86_64:\r\n  \"_zmq_bind\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_close\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_ctx_term\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_init\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_msg_close\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_msg_init\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_msg_size\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_recvmsg\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_sendmsg\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_sleep\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_socket\", referenced from:\r\n      _main in local_lat.o\r\n  \"_zmq_strerror\", referenced from:\r\n      _main in local_lat.o\r\nld: symbol(s) not found for architecture x86_64\r\nmake[1]: *** [Makefile:3565: perf/remote_lat] Error 1\r\nmake[1]: *** [Makefile:3553: perf/local_thr] Error 1\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake[1]: *** [Makefile:3547: perf/local_lat] Error 1\r\nmake[1]: Leaving directory '/Users/shiyang/.xmake/cache/packages/2003/z/zmq/master/source/zmq'\r\nmake: *** [Makefile:7347: all-recursive] Error 1\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3842", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3842/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3842/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3842/events", "html_url": "https://github.com/zeromq/libzmq/issues/3842", "id": 576902133, "node_id": "MDU6SXNzdWU1NzY5MDIxMzM=", "number": 3842, "title": "Build latest_release branch on FreeBSD fails at linkage", "user": {"login": "MikHulk", "id": 10364941, "node_id": "MDQ6VXNlcjEwMzY0OTQx", "avatar_url": "https://avatars1.githubusercontent.com/u/10364941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikHulk", "html_url": "https://github.com/MikHulk", "followers_url": "https://api.github.com/users/MikHulk/followers", "following_url": "https://api.github.com/users/MikHulk/following{/other_user}", "gists_url": "https://api.github.com/users/MikHulk/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikHulk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikHulk/subscriptions", "organizations_url": "https://api.github.com/users/MikHulk/orgs", "repos_url": "https://api.github.com/users/MikHulk/repos", "events_url": "https://api.github.com/users/MikHulk/events{/privacy}", "received_events_url": "https://api.github.com/users/MikHulk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2020-03-06T12:30:41Z", "updated_at": "2020-03-06T18:35:49Z", "closed_at": "2020-03-06T15:54:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nI am trying to build libzmq from source on the latest_release branch.\r\n\r\nI am using autotools binutils and gmake. all of these are present in `/usr/local/bin`. \r\nSo that the construction process uses the right version of ld I declare the path in the environment variables during the auto-configuration:\r\n```\r\n% env LD=/usr/local/bin/ld NM=/usr/local/bin/nm AS=/usr/local/bin/as ./autogen.sh\r\n```\r\nand later:\r\n```\r\n% env LD=/usr/local/bin/ld NM=/usr/local/bin/nm AS=/usr/local/bin/as ./configure --disable-dependency-tracking\r\n```\r\n\r\nDespite this (I tried the \"normal\" way to build before with the same result), I get this error during the build process:\r\n\r\n```\r\n% env LD=/usr/local/bin/ld NM=/usr/local/bin/nm AS=/usr/local/bin/as LANG=C gmake\r\nMaking all in doc\r\ngmake[1]: Entering directory '/usr/home/user/libzmq/doc'\r\ngmake[1]: Nothing to be done for 'all'.\r\ngmake[1]: Leaving directory '/usr/home/user/libzmq/doc'\r\ngmake[1]: Entering directory '/usr/home/user/libzmq'\r\n  CXXLD    perf/benchmark_radix_tree\r\n/usr/bin/ld: error: cannot preempt symbol: _ULx86_64_init_local\r\n>>> defined in /usr/local/lib/libunwind.so\r\n>>> referenced by err.cpp:409 (src/err.cpp:409)\r\n>>>               libzmq_la-err.o:(zmq::print_backtrace()) in archive ./src/.libs/libzmq.a\r\n\r\n/usr/bin/ld: error: cannot preempt symbol: _ULx86_64_step\r\n>>> defined in /usr/local/lib/libunwind.so\r\n>>> referenced by err.cpp:411 (src/err.cpp:411)\r\n>>>               libzmq_la-err.o:(zmq::print_backtrace()) in archive ./src/.libs/libzmq.a\r\n\r\n/usr/bin/ld: error: cannot preempt symbol: _ULx86_64_get_proc_info\r\n>>> defined in /usr/local/lib/libunwind.so\r\n>>> referenced by err.cpp:420 (src/err.cpp:420)\r\n>>>               libzmq_la-err.o:(zmq::print_backtrace()) in archive ./src/.libs/libzmq.a\r\n\r\n/usr/bin/ld: error: cannot preempt symbol: _ULx86_64_get_proc_name\r\n>>> defined in /usr/local/lib/libunwind.so\r\n>>> referenced by err.cpp:423 (src/err.cpp:423)\r\n>>>               libzmq_la-err.o:(zmq::print_backtrace()) in archive ./src/.libs/libzmq.a\r\n\r\n/usr/bin/ld: error: cannot preempt symbol: _ULx86_64_step\r\n>>> defined in /usr/local/lib/libunwind.so\r\n>>> referenced by err.cpp:411 (src/err.cpp:411)\r\n>>>               libzmq_la-err.o:(zmq::print_backtrace()) in archive ./src/.libs/libzmq.a\r\nc++: error: linker command failed with exit code 1 (use -v to see invocation)\r\ngmake[1]: *** [Makefile:3319: perf/benchmark_radix_tree] Error 1\r\ngmake[1]: Leaving directory '/usr/home/user/libzmq'\r\ngmake: *** [Makefile:6925: all-recursive] Error 1\r\n```\r\n\r\n# Environment\r\n\r\n* libzmq latest_release branch\r\n* OS: Free BSD 12.0-RELEASE-p12\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3839", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3839/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3839/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3839/events", "html_url": "https://github.com/zeromq/libzmq/issues/3839", "id": 574437080, "node_id": "MDU6SXNzdWU1NzQ0MzcwODA=", "number": 3839, "title": "not providing \"Findlibzmq.cmake\" by cmake install", "user": {"login": "DinoStray", "id": 6963679, "node_id": "MDQ6VXNlcjY5NjM2Nzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/6963679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DinoStray", "html_url": "https://github.com/DinoStray", "followers_url": "https://api.github.com/users/DinoStray/followers", "following_url": "https://api.github.com/users/DinoStray/following{/other_user}", "gists_url": "https://api.github.com/users/DinoStray/gists{/gist_id}", "starred_url": "https://api.github.com/users/DinoStray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DinoStray/subscriptions", "organizations_url": "https://api.github.com/users/DinoStray/orgs", "repos_url": "https://api.github.com/users/DinoStray/repos", "events_url": "https://api.github.com/users/DinoStray/events{/privacy}", "received_events_url": "https://api.github.com/users/DinoStray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-03-03T06:03:09Z", "updated_at": "2020-04-09T16:48:47Z", "closed_at": "2020-04-09T16:48:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I use\r\n```\r\nfind_package(libzmq REQUIRED)\r\n```\r\nthen report error:\r\n```\r\nCMake Error at CMakeLists.txt:32 (find_package):\r\n  By not providing \"Findlibzmq.cmake\" in CMAKE_MODULE_PATH this project has\r\n  asked CMake to find a package configuration file provided by \"libzmq\", but\r\n  CMake did not find one.\r\n\r\n  Could not find a package configuration file provided by \"libzmq\" with any\r\n  of the following names:\r\n\r\n    libzmqConfig.cmake\r\n    libzmq-config.cmake\r\n\r\n  Add the installation prefix of \"libzmq\" to CMAKE_PREFIX_PATH or set\r\n  \"libzmq_DIR\" to a directory containing one of the above files.  If \"libzmq\"\r\n  provides a separate development package or SDK, be sure it has been\r\n  installed.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3836", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3836/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3836/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3836/events", "html_url": "https://github.com/zeromq/libzmq/issues/3836", "id": 572277612, "node_id": "MDU6SXNzdWU1NzIyNzc2MTI=", "number": 3836, "title": "Install fails on MacOS with \"Could not autodetect polling method\"", "user": {"login": "massenz", "id": 1153951, "node_id": "MDQ6VXNlcjExNTM5NTE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1153951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/massenz", "html_url": "https://github.com/massenz", "followers_url": "https://api.github.com/users/massenz/followers", "following_url": "https://api.github.com/users/massenz/following{/other_user}", "gists_url": "https://api.github.com/users/massenz/gists{/gist_id}", "starred_url": "https://api.github.com/users/massenz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/massenz/subscriptions", "organizations_url": "https://api.github.com/users/massenz/orgs", "repos_url": "https://api.github.com/users/massenz/repos", "events_url": "https://api.github.com/users/massenz/events{/privacy}", "received_events_url": "https://api.github.com/users/massenz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-27T18:40:22Z", "updated_at": "2020-02-27T18:45:54Z", "closed_at": "2020-02-27T18:45:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nWhen installing on MacOS the installation fails with the following error\r\n```\r\nCMake Error at sources_subfolder/CMakeLists.txt:206 (message):\r\n  Could not autodetect polling method\r\n```\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): zmq/4.3.2@bincrafters/stable\r\n* OS: macOS Catalina (10.15.3)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n```\r\nconan install .. -if=. -pr=default --update --build=missing -s compiler=clang \r\n    -s compiler.version=11.0 -s compiler.libcxx=libc++\r\n```\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n```\r\nCMake Error at sources_subfolder/CMakeLists.txt:206 (message):\r\n  Could not autodetect polling method\r\n```\r\n\r\n# What's the expected result?\r\n\r\nlibzmq should be successfully built and installed.\r\n\r\nSee this [StackOverflow post](https://stackoverflow.com/questions/60438930/install-libzmq-on-macos-with-conan-fails-with-could-not-autodetect-polling-meth) for more details.\r\n\r\nI believe there should be an option, such as:\r\n\r\n```\r\n[options]\r\nzmq:poller=select\r\n```\r\nwhich allows the recipe to pass something like `--with-poller=select` to the `cmake` invocation (or something similar).\r\n\r\nAround line 151 in the CMakeFiles, there is this:\r\n\r\n```\r\nset(POLLER \"\" CACHE STRING \"Choose polling system for I/O threads. valid values are\r\n  kqueue, epoll, devpoll, pollset, poll or select [default=autodetect]\")\r\n```\r\n\r\nso there clearly is a way to configure `POLLER` but this is not possible via the Conan recipe, so it defaults to `autodetect` and this fails on MacOS.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3809", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3809/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3809/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3809/events", "html_url": "https://github.com/zeromq/libzmq/issues/3809", "id": 559380442, "node_id": "MDU6SXNzdWU1NTkzODA0NDI=", "number": 3809, "title": "Fallback to localhost in ws_address has no effect", "user": {"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-03T22:46:05Z", "updated_at": "2020-02-06T16:39:44Z", "closed_at": "2020-02-06T16:39:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The fallback in case of an error of `getnameinfo` in https://github.com/zeromq/libzmq/blob/1b8a35248071e5fbccc9650c34d22933a56c505e/src/ws_address.cpp#L76 has no effect, since `_host` is always reassigned afterwards. I am not sure what the intended behaviour should be. Return from the `if` block?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3800", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3800/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3800/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3800/events", "html_url": "https://github.com/zeromq/libzmq/issues/3800", "id": 558473958, "node_id": "MDU6SXNzdWU1NTg0NzM5NTg=", "number": 3800, "title": "autogen.sh fails: could not find autoreconf", "user": {"login": "JiaRu2016", "id": 17561508, "node_id": "MDQ6VXNlcjE3NTYxNTA4", "avatar_url": "https://avatars2.githubusercontent.com/u/17561508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JiaRu2016", "html_url": "https://github.com/JiaRu2016", "followers_url": "https://api.github.com/users/JiaRu2016/followers", "following_url": "https://api.github.com/users/JiaRu2016/following{/other_user}", "gists_url": "https://api.github.com/users/JiaRu2016/gists{/gist_id}", "starred_url": "https://api.github.com/users/JiaRu2016/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JiaRu2016/subscriptions", "organizations_url": "https://api.github.com/users/JiaRu2016/orgs", "repos_url": "https://api.github.com/users/JiaRu2016/repos", "events_url": "https://api.github.com/users/JiaRu2016/events{/privacy}", "received_events_url": "https://api.github.com/users/JiaRu2016/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-01T03:53:47Z", "updated_at": "2020-02-02T17:01:22Z", "closed_at": "2020-02-02T17:01:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nwhen I git clone the repo and run `autogen.sh`, it raises error:\r\n```\r\n$ git clone https://github.com/zeromq/libzmq.git\r\n$ cd libzmq\r\n$ ./autogen.sh\r\nautogen.sh: error: could not find autoreconf.  autoconf and automake are required to run autogen.sh.\r\n```\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased):  75dfbae0d1dc65312d2aaad6902911a3214f4819\r\n* OS: centos-release-7-7.1908.0.el7.centos.x86_64\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3796", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3796/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3796/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3796/events", "html_url": "https://github.com/zeromq/libzmq/issues/3796", "id": 556205638, "node_id": "MDU6SXNzdWU1NTYyMDU2Mzg=", "number": 3796, "title": "Memory leak in mailbox_t::mailbox_t() and mailbox_t::send(zmq::command_t const&)", "user": {"login": "jacek-bulatek", "id": 25027022, "node_id": "MDQ6VXNlcjI1MDI3MDIy", "avatar_url": "https://avatars1.githubusercontent.com/u/25027022?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jacek-bulatek", "html_url": "https://github.com/jacek-bulatek", "followers_url": "https://api.github.com/users/jacek-bulatek/followers", "following_url": "https://api.github.com/users/jacek-bulatek/following{/other_user}", "gists_url": "https://api.github.com/users/jacek-bulatek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jacek-bulatek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jacek-bulatek/subscriptions", "organizations_url": "https://api.github.com/users/jacek-bulatek/orgs", "repos_url": "https://api.github.com/users/jacek-bulatek/repos", "events_url": "https://api.github.com/users/jacek-bulatek/events{/privacy}", "received_events_url": "https://api.github.com/users/jacek-bulatek/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361117360, "node_id": "MDU6TGFiZWwzNjExMTczNjA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Need%20More%20Information", "name": "Need More Information", "color": "e99695", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-01-28T13:21:23Z", "updated_at": "2020-03-17T10:19:51Z", "closed_at": "2020-03-11T09:24:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nValgrind shows as follows:\r\n\r\n==15645== 1,088 bytes in 1 blocks are definitely lost in loss record 392 of 559\r\n==15645==    at 0x402D202: memalign (vg_replace_malloc.c:857)\r\n==15645==    by 0x402D2E1: posix_memalign (vg_replace_malloc.c:1020)\r\n==15645==    by 0x872601A: allocate_chunk (yqueue.hpp:186)\r\n==15645==    by 0x872601A: yqueue_t (yqueue.hpp:69)\r\n==15645==    by 0x872601A: ypipe_t (ypipe.hpp:51)\r\n==15645==    by 0x872601A: zmq::mailbox_t::mailbox_t() (mailbox.cpp:34)\r\n==15645==    by 0x8724FC9: zmq::io_thread_t::io_thread_t(zmq::ctx_t*, unsigned int) (io_thread.cpp:41)\r\n(...)\r\n==15645== \r\n==15645== 1,088 bytes in 1 blocks are definitely lost in loss record 393 of 559\r\n==15645==    at 0x402D202: memalign (vg_replace_malloc.c:857)\r\n==15645==    by 0x402D2E1: posix_memalign (vg_replace_malloc.c:1020)\r\n==15645==    by 0x8725EC2: allocate_chunk (yqueue.hpp:186)\r\n==15645==    by 0x8725EC2: push (yqueue.hpp:117)\r\n==15645==    by 0x8725EC2: write (ypipe.hpp:82)\r\n==15645==    by 0x8725EC2: zmq::mailbox_t::send(zmq::command_t const&) (mailbox.cpp:62)\r\n==15645==    by 0x8728423: zmq::object_t::send_command(zmq::command_t&) (object.cpp:533)\r\n==15645==    by 0x87291B3: zmq::object_t::send_attach(zmq::session_base_t*, zmq::i_engine*, bool) (object.cpp:257)\r\n(...)\r\n==15645== \r\n==15645== 3,264 (1,088 direct, 2,176 indirect) bytes in 1 blocks are definitely lost in loss record 430 of 559\r\n==15645==    at 0x402D202: memalign (vg_replace_malloc.c:857)\r\n==15645==    by 0x402D2E1: posix_memalign (vg_replace_malloc.c:1020)\r\n==15645==    by 0x8725EC2: allocate_chunk (yqueue.hpp:186)\r\n==15645==    by 0x8725EC2: push (yqueue.hpp:117)\r\n==15645==    by 0x8725EC2: write (ypipe.hpp:82)\r\n==15645==    by 0x8725EC2: zmq::mailbox_t::send(zmq::command_t const&) (mailbox.cpp:62)\r\n==15645==    by 0x8728423: zmq::object_t::send_command(zmq::command_t&) (object.cpp:533)\r\n==15645==    by 0x872924C: zmq::object_t::send_plug(zmq::own_t*, bool) (object.cpp:233)\r\n==15645==    by 0x872BD81: zmq::own_t::launch_child(zmq::own_t*) (own.cpp:87)\r\n==15645==    by 0x87341AA: zmq::socket_base_t::add_endpoint(zmq::endpoint_uri_pair_t const&, zmq::own_t*, zmq::pipe_t*) (socket_base.cpp:1020)\r\n==15645==    by 0x87364D4: zmq::socket_base_t::connect(char const*) (socket_base.cpp:984)\r\n...\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: RHEL7 on OpenStack VM with SR-IOV (details in comments)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  Hard to tell, appearently issue do not occur on different cloud environments. (details in comments)\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nMemory leak.\r\n\r\n# What's the expected result?\r\n\r\nLack of memory leak", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3792", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3792/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3792/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3792/events", "html_url": "https://github.com/zeromq/libzmq/issues/3792", "id": 555223884, "node_id": "MDU6SXNzdWU1NTUyMjM4ODQ=", "number": 3792, "title": "zmq_ctx_shutdown has not effect before any socket is created", "user": {"login": "gummif", "id": 7014479, "node_id": "MDQ6VXNlcjcwMTQ0Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7014479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gummif", "html_url": "https://github.com/gummif", "followers_url": "https://api.github.com/users/gummif/followers", "following_url": "https://api.github.com/users/gummif/following{/other_user}", "gists_url": "https://api.github.com/users/gummif/gists{/gist_id}", "starred_url": "https://api.github.com/users/gummif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gummif/subscriptions", "organizations_url": "https://api.github.com/users/gummif/orgs", "repos_url": "https://api.github.com/users/gummif/repos", "events_url": "https://api.github.com/users/gummif/events{/privacy}", "received_events_url": "https://api.github.com/users/gummif/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 675077105, "node_id": "MDU6TGFiZWw2NzUwNzcxMDU=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Documentation)", "name": "Area (Documentation)", "color": "c5def5", "default": false, "description": null}, {"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 675589386, "node_id": "MDU6TGFiZWw2NzU1ODkzODY=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Problem%20reproduced", "name": "Problem reproduced", "color": "d93f0b", "default": false, "description": null}, {"id": 675554812, "node_id": "MDU6TGFiZWw2NzU1NTQ4MTI=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Symptom%20(Unexpected%20behavior)", "name": "Symptom (Unexpected behavior)", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-26T12:49:29Z", "updated_at": "2020-01-26T18:09:48Z", "closed_at": "2020-01-26T18:09:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue description\r\nCalling `zmq_ctx_shutdown` does not affect the sockets created after that call unless at least 1 socket has been created before the `zmq_ctx_shutdown` call.\r\n\r\nThis can cause threads to block forever if shutdown is called before any socket is created, but the thread creates a socket after the shutdown.\r\n\r\nRelated to https://github.com/zeromq/cppzmq/pull/377\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: Linux\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n```c++\r\n#include <zmq.h>\r\n#include <cassert>\r\n\r\nint main()\r\n{\r\n    void* ctx = zmq_ctx_new();\r\n    assert(ctx);\r\n    //void* s0 = zmq_socket(ctx, ZMQ_REP); // uncomment these for ETERM in zmq_socket below\r\n    //zmq_close(s0);\r\n    zmq_ctx_shutdown(ctx);\r\n\r\n    void* s = zmq_socket(ctx, ZMQ_REP);\r\n    if (!s)\r\n    {\r\n        printf(\"zmq_socket failed: %s\\n\", zmq_strerror(zmq_errno()));\r\n        return 1;\r\n    }\r\n    //zmq_ctx_shutdown(ctx); // uncomment this for ETERM in zmq_bind\r\n    int rc = zmq_bind(s, \"inproc://test\");\r\n    if (rc == -1)\r\n    {\r\n        printf(\"zmq_bind failed: %s\\n\", zmq_strerror(zmq_errno()));\r\n        return 1;\r\n    }\r\n    puts(\"going to block\");\r\n    char b[1];\r\n    rc = zmq_recv(s, b, 1, 0);\r\n}\r\n```\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n`going to block`\r\n\r\n# What's the expected result?\r\n`zmq_socket failed: Context was terminated`\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3791", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3791/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3791/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3791/events", "html_url": "https://github.com/zeromq/libzmq/issues/3791", "id": 555199953, "node_id": "MDU6SXNzdWU1NTUxOTk5NTM=", "number": 3791, "title": "[clarification] Baseline C/C++-standard for code contributions", "user": {"login": "std-any-emplace", "id": 59844327, "node_id": "MDQ6VXNlcjU5ODQ0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/59844327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/std-any-emplace", "html_url": "https://github.com/std-any-emplace", "followers_url": "https://api.github.com/users/std-any-emplace/followers", "following_url": "https://api.github.com/users/std-any-emplace/following{/other_user}", "gists_url": "https://api.github.com/users/std-any-emplace/gists{/gist_id}", "starred_url": "https://api.github.com/users/std-any-emplace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/std-any-emplace/subscriptions", "organizations_url": "https://api.github.com/users/std-any-emplace/orgs", "repos_url": "https://api.github.com/users/std-any-emplace/repos", "events_url": "https://api.github.com/users/std-any-emplace/events{/privacy}", "received_events_url": "https://api.github.com/users/std-any-emplace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2020-01-26T08:59:11Z", "updated_at": "2020-05-12T08:21:39Z", "closed_at": "2020-05-12T08:21:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If one were to make code-contributions, what is the accepted C or C++-standard? Are there any other compiler-/platform-specifics someone should be aware of? This information seems to be missing in https://github.com/zeromq/libzmq/blob/master/.github/CONTRIBUTING.md and http://wiki.zeromq.org/docs:contributing.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3787", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3787/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3787/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3787/events", "html_url": "https://github.com/zeromq/libzmq/issues/3787", "id": 552584228, "node_id": "MDU6SXNzdWU1NTI1ODQyMjg=", "number": 3787, "title": "Static linking exception clarification", "user": {"login": "nightlark", "id": 3969255, "node_id": "MDQ6VXNlcjM5NjkyNTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3969255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nightlark", "html_url": "https://github.com/nightlark", "followers_url": "https://api.github.com/users/nightlark/followers", "following_url": "https://api.github.com/users/nightlark/following{/other_user}", "gists_url": "https://api.github.com/users/nightlark/gists{/gist_id}", "starred_url": "https://api.github.com/users/nightlark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nightlark/subscriptions", "organizations_url": "https://api.github.com/users/nightlark/orgs", "repos_url": "https://api.github.com/users/nightlark/repos", "events_url": "https://api.github.com/users/nightlark/events{/privacy}", "received_events_url": "https://api.github.com/users/nightlark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-21T02:03:29Z", "updated_at": "2020-01-21T13:38:35Z", "closed_at": "2020-01-21T09:32:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "## Context\r\nWe've been building release binaries for BSD-3 licensed libraries+applications and bundling a copy of the ZeroMQ shared library. On some systems like Windows where there are no rpaths and it's not typical to have ZeroMQ somewhere on the PATH, this is inconvenient, particularly when it comes to packaging for things like pip where in theory bundled shared libraries should be given unique names to avoid conflicts if another module that uses a different version of the ZeroMQ shared library get used together (mainly a problem on Windows).\r\n\r\n## The question\r\nOur binary (and source tar) releases don't make any changes to ZeroMQ itself, just use it as a library. Does the static linking exception mean that we are 100% okay to static link ZeroMQ (unmodified) into our own shared libraries and applications so that we can have a standalone binary/library that doesn't require copying a separate ZeroMQ library along with it?\r\n\r\nFrom the [FAQ](http://wiki.zeromq.org/area:faq) it seems like the answer is yes, but we want to be completely sure before making a change to static linking in our release builds.\r\n\r\n(#2376 would be ideal, but it seems like that could become an indefinite wait for responses.)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3778", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3778/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3778/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3778/events", "html_url": "https://github.com/zeromq/libzmq/issues/3778", "id": 549125272, "node_id": "MDU6SXNzdWU1NDkxMjUyNzI=", "number": 3778, "title": "[doc][clarification] Single socket used in multiple poller instances", "user": {"login": "std-any-emplace", "id": 59844327, "node_id": "MDQ6VXNlcjU5ODQ0MzI3", "avatar_url": "https://avatars1.githubusercontent.com/u/59844327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/std-any-emplace", "html_url": "https://github.com/std-any-emplace", "followers_url": "https://api.github.com/users/std-any-emplace/followers", "following_url": "https://api.github.com/users/std-any-emplace/following{/other_user}", "gists_url": "https://api.github.com/users/std-any-emplace/gists{/gist_id}", "starred_url": "https://api.github.com/users/std-any-emplace/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/std-any-emplace/subscriptions", "organizations_url": "https://api.github.com/users/std-any-emplace/orgs", "repos_url": "https://api.github.com/users/std-any-emplace/repos", "events_url": "https://api.github.com/users/std-any-emplace/events{/privacy}", "received_events_url": "https://api.github.com/users/std-any-emplace/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-01-13T19:10:19Z", "updated_at": "2020-01-19T09:58:26Z", "closed_at": "2020-01-19T09:58:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The documentation states:\r\n\r\n> \"... zmq_poller_add may not be called multiple times for the same socket (unless zmq_poller_remove has been called for that socket). ...\"\r\n\r\nDoes this statement still hold, when two or more poller instances are created with _zmq_poller_new_ and a single socket is added with _zmq_poller_add_ to each of the poller instances once?\r\nOr rephrased: Can a socket safely be associated with multiple poller instances?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3776", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3776/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3776/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3776/events", "html_url": "https://github.com/zeromq/libzmq/issues/3776", "id": 548777698, "node_id": "MDU6SXNzdWU1NDg3Nzc2OTg=", "number": 3776, "title": "How to build for Windows with vs2019?", "user": {"login": "sun0929", "id": 59302112, "node_id": "MDQ6VXNlcjU5MzAyMTEy", "avatar_url": "https://avatars2.githubusercontent.com/u/59302112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sun0929", "html_url": "https://github.com/sun0929", "followers_url": "https://api.github.com/users/sun0929/followers", "following_url": "https://api.github.com/users/sun0929/following{/other_user}", "gists_url": "https://api.github.com/users/sun0929/gists{/gist_id}", "starred_url": "https://api.github.com/users/sun0929/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sun0929/subscriptions", "organizations_url": "https://api.github.com/users/sun0929/orgs", "repos_url": "https://api.github.com/users/sun0929/repos", "events_url": "https://api.github.com/users/sun0929/events{/privacy}", "received_events_url": "https://api.github.com/users/sun0929/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 164697224, "node_id": "MDU6TGFiZWwxNjQ2OTcyMjQ=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Build/Compilation)", "name": "Area (Build/Compilation)", "color": "fbca04", "default": false, "description": null}, {"id": 359697670, "node_id": "MDU6TGFiZWwzNTk2OTc2NzA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(windows/msvc)", "name": "Platform (windows/msvc)", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-13T08:31:01Z", "updated_at": "2020-01-28T21:15:58Z", "closed_at": "2020-01-28T21:14:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "# I used \"open in Visual Studio\"  to clone the code to local, but I can't build the project.\r\n# Environment\r\n* libzmq version 4.3.2: \r\n* OS: win 10\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3770", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3770/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3770/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3770/events", "html_url": "https://github.com/zeromq/libzmq/issues/3770", "id": 544157450, "node_id": "MDU6SXNzdWU1NDQxNTc0NTA=", "number": 3770, "title": "failed to build on macbook pro --with-libsodium", "user": {"login": "sherifomran", "id": 30180559, "node_id": "MDQ6VXNlcjMwMTgwNTU5", "avatar_url": "https://avatars3.githubusercontent.com/u/30180559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sherifomran", "html_url": "https://github.com/sherifomran", "followers_url": "https://api.github.com/users/sherifomran/followers", "following_url": "https://api.github.com/users/sherifomran/following{/other_user}", "gists_url": "https://api.github.com/users/sherifomran/gists{/gist_id}", "starred_url": "https://api.github.com/users/sherifomran/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sherifomran/subscriptions", "organizations_url": "https://api.github.com/users/sherifomran/orgs", "repos_url": "https://api.github.com/users/sherifomran/repos", "events_url": "https://api.github.com/users/sherifomran/events{/privacy}", "received_events_url": "https://api.github.com/users/sherifomran/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-31T10:47:54Z", "updated_at": "2019-12-31T10:50:16Z", "closed_at": "2019-12-31T10:50:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nfailed to build libzq with sodium under mac 10.13.6 High Sierrra\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: \r\nMAC OS\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n ```\r\nclone --depth 1 -b stable https://github.com/jedisct1/libsodium.git\r\n    cd libsodium\r\n    ./autogen.sh && ./configure && make check\r\n    sudo make install\r\n    cd ..\r\n\r\n    git clone git://github.com/zeromq/libzmq.git\r\n    cd libzmq\r\n    ./autogen.sh\r\n    # do not specify \"--with-libsodium\" if you prefer to use internal tweetnacl\r\n    # security implementation (recommended for development)\r\n    ./configure --with-libsodium\r\n    make check\r\n```\r\n\r\n\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n```\r\n\r\nSherif:zyre sherifomran$ git clone --depth 1 -b stable https://github.com/jedisct1/libsodium.git\r\nCloning into 'libsodium'...\r\nremote: Enumerating objects: 655, done.\r\nremote: Counting objects: 100% (655/655), done.\r\nremote: Compressing objects: 100% (589/589), done.\r\nremote: Total 655 (delta 150), reused 200 (delta 26), pack-reused 0\r\nReceiving objects: 100% (655/655), 1.96 MiB | 516.00 KiB/s, done.\r\nResolving deltas: 100% (150/150), done.\r\nSherif:zyre sherifomran$ cd libsodium/\r\nSherif:libsodium sherifomran$ ./autogen.sh && ./configure && make check\r\nautoreconf: Entering directory `.'\r\nautoreconf: configure.ac: not using Gettext\r\nautoreconf: running: aclocal --force -I m4\r\nautoreconf: configure.ac: tracing\r\nautoreconf: running: glibtoolize --copy --force\r\nglibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.\r\nglibtoolize: copying file 'build-aux/ltmain.sh'\r\nglibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'm4'.\r\nglibtoolize: copying file 'm4/libtool.m4'\r\nglibtoolize: copying file 'm4/ltoptions.m4'\r\nglibtoolize: copying file 'm4/ltsugar.m4'\r\nglibtoolize: copying file 'm4/ltversion.m4'\r\nglibtoolize: copying file 'm4/lt~obsolete.m4'\r\nautoreconf: running: /usr/local/Cellar/autoconf/2.69/bin/autoconf --force\r\nautoreconf: configure.ac: not using Autoheader\r\nautoreconf: running: automake --add-missing --copy --force-missing\r\nconfigure.ac:84: installing 'build-aux/compile'\r\nconfigure.ac:10: installing 'build-aux/missing'\r\nsrc/libsodium/Makefile.am: installing 'build-aux/depcomp'\r\nautoreconf: Leaving directory `.'\r\nDownloading config.guess and config.sub...\r\nDone.\r\nchecking build system type... x86_64-apple-darwin17.7.0\r\nchecking host system type... x86_64-apple-darwin17.7.0\r\nchecking for a BSD-compatible install... /usr/bin/install -c\r\nchecking whether build environment is sane... yes\r\nchecking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p\r\nchecking for gawk... no\r\nchecking for mawk... no\r\nchecking for nawk... no\r\nchecking for awk... awk\r\nchecking whether make sets $(MAKE)... yes\r\nchecking whether make supports nested variables... yes\r\nchecking whether UID '501' is supported by ustar format... yes\r\nchecking whether GID '20' is supported by ustar format... yes\r\nchecking how to create a ustar tar archive... gnutar\r\nchecking whether make supports nested variables... (cached) yes\r\nchecking whether to enable maintainer-specific portions of Makefiles... no\r\nchecking whether make supports the include directive... yes (GNU style)\r\nchecking for gcc... gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables... \r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking whether gcc understands -c and -o together... yes\r\nchecking dependency style of gcc... gcc3\r\nchecking for a sed that does not truncate output... /usr/local/bin/gsed\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\nchecking for egrep... /usr/bin/grep -E\r\nchecking whether gcc is Clang... yes\r\nchecking whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread... no\r\nchecking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE\r\nchecking whether more special flags are required for pthreads... no\r\nchecking for PTHREAD_PRIO_INHERIT... yes\r\nchecking for gcc option to accept ISO C99... none needed\r\nchecking dependency style of gcc... gcc3\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking minix/config.h usability... no\r\nchecking minix/config.h presence... no\r\nchecking for minix/config.h... no\r\nchecking whether it is safe to define __EXTENSIONS__... yes\r\nchecking for variable-length arrays... yes\r\nchecking for __wasi__ defined... no\r\nchecking whether C compiler accepts -fvisibility=hidden... yes\r\nchecking whether C compiler accepts -fPIC... yes\r\nchecking whether C compiler accepts -fPIE... yes\r\nchecking whether the linker accepts -pie... yes\r\nchecking whether C compiler accepts -fno-strict-aliasing... yes\r\nchecking whether C compiler accepts -fno-strict-overflow... yes\r\nchecking for a broken Xcode version... no\r\nchecking whether C compiler accepts -fstack-protector... yes\r\nchecking whether the linker accepts -fstack-protector... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wall... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra... yes\r\nchecking for clang... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict -Wshorten-64-to-32... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict -Wshorten-64-to-32 -Wsometimes-uninitialized... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict -Wshorten-64-to-32 -Wsometimes-uninitialized -Wstrict-prototypes... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict -Wshorten-64-to-32 -Wsometimes-uninitialized -Wstrict-prototypes -Wswitch-enum... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict -Wshorten-64-to-32 -Wsometimes-uninitialized -Wstrict-prototypes -Wswitch-enum -Wvariable-decl... yes\r\nchecking whether C compiler accepts -g -O2 -pthread -fvisibility=hidden -fPIC -fPIE -fno-strict-aliasing -fno-strict-overflow -fstack-protector -Wextra -Wno-unknown-warning-option -Wbad-function-cast -Wcast-qual -Wdiv-by-zero -Wduplicated-branches -Wduplicated-cond -Wfloat-equal -Wformat=2 -Wlogical-op -Wmaybe-uninitialized -Wmisleading-indentation -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wno-type-limits -Wno-unknown-pragmas -Wnormalized=id -Wnull-dereference -Wold-style-declaration -Wpointer-arith -Wredundant-decls -Wrestrict -Wshorten-64-to-32 -Wsometimes-uninitialized -Wstrict-prototypes -Wswitch-enum -Wvariable-decl -Wwrite-strings... yes\r\nchecking whether the linker accepts -Wl,-z,relro... no\r\nchecking whether the linker accepts -Wl,-z,now... no\r\nchecking whether the linker accepts -Wl,-z,noexecstack... no\r\nchecking whether segmentation violations can be caught when using the C compiler... yes\r\nchecking whether SIGABRT can be caught when using the C compiler... yes\r\nchecking for thread local storage (TLS) class... _Thread_local\r\nthread local storage is supported\r\nchecking whether C compiler accepts -ftls-model=local-dynamic... yes\r\nchecking how to print strings... printf\r\nchecking for a sed that does not truncate output... (cached) /usr/local/bin/gsed\r\nchecking for fgrep... /usr/bin/grep -F\r\nchecking for ld used by gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\r\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\r\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\r\nchecking whether ln -s works... yes\r\nchecking the maximum length of command line arguments... 196608\r\nchecking how to convert x86_64-apple-darwin17.7.0 file names to x86_64-apple-darwin17.7.0 format... func_convert_file_noop\r\nchecking how to convert x86_64-apple-darwin17.7.0 file names to toolchain format... func_convert_file_noop\r\nchecking for /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld option to reload object files... -r\r\nchecking for objdump... objdump\r\nchecking how to recognize dependent libraries... pass_all\r\nchecking for dlltool... dlltool\r\nchecking how to associate runtime and link libraries... printf %s\\n\r\nchecking for ar... ar\r\nchecking for archiver @FILE support... no\r\nchecking for strip... strip\r\nchecking for ranlib... ranlib\r\nchecking command to parse /usr/bin/nm -B output from gcc object... ok\r\nchecking for sysroot... no\r\nchecking for a working dd... /bin/dd\r\nchecking how to truncate binary pipes... /bin/dd bs=4096 count=1\r\nchecking for mt... no\r\nchecking if : is a manifest tool... no\r\nchecking for dsymutil... dsymutil\r\nchecking for nmedit... nmedit\r\nchecking for lipo... lipo\r\nchecking for otool... otool\r\nchecking for otool64... no\r\nchecking for -single_module linker flag... yes\r\nchecking for -exported_symbols_list linker flag... yes\r\nchecking for -force_load linker flag... yes\r\nchecking for dlfcn.h... yes\r\nchecking for objdir... .libs\r\nchecking if gcc supports -fno-rtti -fno-exceptions... yes\r\nchecking for gcc option to produce PIC... -fno-common -DPIC\r\nchecking if gcc PIC flag -fno-common -DPIC works... yes\r\nchecking if gcc static flag -static works... no\r\nchecking if gcc supports -c -o file.o... yes\r\nchecking if gcc supports -c -o file.o... (cached) yes\r\nchecking whether the gcc linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\r\nchecking dynamic linker characteristics... darwin17.7.0 dyld\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether stripping libraries is possible... yes\r\nchecking if libtool supports shared libraries... yes\r\nchecking whether to build shared libraries... yes\r\nchecking whether to build static libraries... yes\r\nchecking for ar... (cached) ar\r\nchecking whether C compiler accepts -mmmx... yes\r\nchecking for MMX instructions set... yes\r\nchecking whether C compiler accepts -mmmx... (cached) yes\r\nchecking whether C compiler accepts -msse2... yes\r\nchecking for SSE2 instructions set... yes\r\nchecking whether C compiler accepts -msse2... (cached) yes\r\nchecking whether C compiler accepts -msse3... yes\r\nchecking for SSE3 instructions set... yes\r\nchecking whether C compiler accepts -msse3... (cached) yes\r\nchecking whether C compiler accepts -mssse3... yes\r\nchecking for SSSE3 instructions set... yes\r\nchecking whether C compiler accepts -mssse3... (cached) yes\r\nchecking whether C compiler accepts -msse4.1... yes\r\nchecking for SSE4.1 instructions set... yes\r\nchecking whether C compiler accepts -msse4.1... (cached) yes\r\nchecking whether C compiler accepts -mavx... yes\r\nchecking for AVX instructions set... yes\r\nchecking whether C compiler accepts -mavx... (cached) yes\r\nchecking whether C compiler accepts -mavx2... yes\r\nchecking for AVX2 instructions set... yes\r\nchecking whether C compiler accepts -mavx2... (cached) yes\r\nchecking if _mm256_broadcastsi128_si256 is correctly defined... yes\r\nchecking whether C compiler accepts -mavx512f... yes\r\nchecking for AVX512F instructions set... yes\r\nchecking whether C compiler accepts -mavx512f... (cached) yes\r\nchecking whether C compiler accepts -maes... yes\r\nchecking whether C compiler accepts -mpclmul... yes\r\nchecking for AESNI instructions set and PCLMULQDQ... yes\r\nchecking whether C compiler accepts -maes... (cached) yes\r\nchecking whether C compiler accepts -mpclmul... (cached) yes\r\nchecking whether C compiler accepts -mrdrnd... yes\r\nchecking for RDRAND... yes\r\nchecking whether C compiler accepts -mrdrnd... (cached) yes\r\nchecking sys/mman.h usability... yes\r\nchecking sys/mman.h presence... yes\r\nchecking for sys/mman.h... yes\r\nchecking sys/random.h usability... yes\r\nchecking sys/random.h presence... yes\r\nchecking for sys/random.h... yes\r\nchecking intrin.h usability... no\r\nchecking intrin.h presence... no\r\nchecking for intrin.h... no\r\nchecking if _xgetbv() is available... no\r\nchecking for inline... inline\r\nchecking whether byte ordering is bigendian... (cached) no\r\nchecking whether __STDC_LIMIT_MACROS is required... no\r\nchecking whether we can use inline asm code... yes\r\nno\r\nchecking whether we can use x86_64 asm code... yes\r\nchecking whether we can assemble AVX opcodes... yes\r\nchecking for 128-bit arithmetic... yes\r\nchecking for cpuid instruction... yes\r\nchecking if the .private_extern asm directive is supported... yes\r\nchecking if the .hidden asm directive is supported... no\r\nchecking if weak symbols are supported... yes\r\nchecking if data alignment is required... no\r\nchecking if atomic operations are supported... yes\r\nchecking for size_t... yes\r\nchecking for working alloca.h... yes\r\nchecking for alloca... yes\r\nchecking for arc4random... yes\r\nchecking for arc4random_buf... yes\r\nchecking for mmap... yes\r\nchecking for mlock... yes\r\nchecking for madvise... yes\r\nchecking for mprotect... yes\r\nchecking for getrandom with a standard API... no\r\nchecking for getentropy with a standard API... yes\r\nchecking for getentropy... yes\r\nchecking for posix_memalign... yes\r\nchecking for getpid... yes\r\nchecking for nanosleep... yes\r\nchecking for memset_s... yes\r\nchecking for explicit_bzero... no\r\nchecking for explicit_memset... no\r\nchecking if gcc/ld supports -Wl,--output-def... no\r\nchecking that generated files are newer than configure... done\r\nconfigure: creating ./config.status\r\nconfig.status: creating Makefile\r\nconfig.status: creating builds/Makefile\r\nconfig.status: creating contrib/Makefile\r\nconfig.status: creating dist-build/Makefile\r\nconfig.status: creating libsodium.pc\r\nconfig.status: creating libsodium-uninstalled.pc\r\nconfig.status: creating msvc-scripts/Makefile\r\nconfig.status: creating src/Makefile\r\nconfig.status: creating src/libsodium/Makefile\r\nconfig.status: creating src/libsodium/include/Makefile\r\nconfig.status: creating src/libsodium/include/sodium/version.h\r\nconfig.status: creating test/default/Makefile\r\nconfig.status: creating test/Makefile\r\nconfig.status: executing depfiles commands\r\nconfig.status: executing libtool commands\r\nMaking check in builds\r\nmake[1]: Nothing to be done for `check'.\r\nMaking check in contrib\r\nmake[1]: Nothing to be done for `check'.\r\nMaking check in dist-build\r\nmake[1]: Nothing to be done for `check'.\r\nMaking check in msvc-scripts\r\nmake[1]: Nothing to be done for `check'.\r\nMaking check in src\r\nMaking check in libsodium\r\nMaking check in include\r\nmake[3]: Nothing to be done for `check'.\r\n  CC       crypto_aead/chacha20poly1305/sodium/libsodium_la-aead_chacha20poly1305.lo\r\n  CC       crypto_aead/xchacha20poly1305/sodium/libsodium_la-aead_xchacha20poly1305.lo\r\n  CC       crypto_auth/libsodium_la-crypto_auth.lo\r\n  CC       crypto_auth/hmacsha256/libsodium_la-auth_hmacsha256.lo\r\n  CC       crypto_auth/hmacsha512/libsodium_la-auth_hmacsha512.lo\r\n  CC       crypto_auth/hmacsha512256/libsodium_la-auth_hmacsha512256.lo\r\n  CC       crypto_box/libsodium_la-crypto_box.lo\r\n  CC       crypto_box/libsodium_la-crypto_box_easy.lo\r\n  CC       crypto_box/libsodium_la-crypto_box_seal.lo\r\n  CC       crypto_box/curve25519xsalsa20poly1305/libsodium_la-box_curve25519xsalsa20poly1305.lo\r\n  CC       crypto_core/ed25519/ref10/libsodium_la-ed25519_ref10.lo\r\n  CC       crypto_core/hchacha20/libsodium_la-core_hchacha20.lo\r\n  CC       crypto_core/hsalsa20/ref2/libsodium_la-core_hsalsa20_ref2.lo\r\n  CC       crypto_core/hsalsa20/libsodium_la-core_hsalsa20.lo\r\n  CC       crypto_core/salsa/ref/libsodium_la-core_salsa_ref.lo\r\n  CC       crypto_generichash/libsodium_la-crypto_generichash.lo\r\n  CC       crypto_generichash/blake2b/libsodium_la-generichash_blake2.lo\r\n  CC       crypto_generichash/blake2b/ref/libsodium_la-blake2b-compress-ref.lo\r\n  CC       crypto_generichash/blake2b/ref/libsodium_la-blake2b-ref.lo\r\n  CC       crypto_generichash/blake2b/ref/libsodium_la-generichash_blake2b.lo\r\n  CC       crypto_hash/libsodium_la-crypto_hash.lo\r\n  CC       crypto_hash/sha256/libsodium_la-hash_sha256.lo\r\n  CC       crypto_hash/sha256/cp/libsodium_la-hash_sha256_cp.lo\r\n  CC       crypto_hash/sha512/libsodium_la-hash_sha512.lo\r\n  CC       crypto_hash/sha512/cp/libsodium_la-hash_sha512_cp.lo\r\n  CC       crypto_kdf/blake2b/libsodium_la-kdf_blake2b.lo\r\n  CC       crypto_kdf/libsodium_la-crypto_kdf.lo\r\n  CC       crypto_kx/libsodium_la-crypto_kx.lo\r\n  CC       crypto_onetimeauth/libsodium_la-crypto_onetimeauth.lo\r\n  CC       crypto_onetimeauth/poly1305/libsodium_la-onetimeauth_poly1305.lo\r\n  CC       crypto_onetimeauth/poly1305/donna/libsodium_la-poly1305_donna.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-argon2-core.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-argon2-encoding.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-argon2-fill-block-ref.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-argon2.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-blake2b-long.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-pwhash_argon2i.lo\r\n  CC       crypto_pwhash/argon2/libsodium_la-pwhash_argon2id.lo\r\n  CC       crypto_pwhash/libsodium_la-crypto_pwhash.lo\r\n  CC       crypto_scalarmult/libsodium_la-crypto_scalarmult.lo\r\n  CC       crypto_scalarmult/curve25519/ref10/libsodium_la-x25519_ref10.lo\r\n  CC       crypto_scalarmult/curve25519/libsodium_la-scalarmult_curve25519.lo\r\n  CC       crypto_secretbox/libsodium_la-crypto_secretbox.lo\r\n  CC       crypto_secretbox/libsodium_la-crypto_secretbox_easy.lo\r\n  CC       crypto_secretbox/xsalsa20poly1305/libsodium_la-secretbox_xsalsa20poly1305.lo\r\n  CC       crypto_secretstream/xchacha20poly1305/libsodium_la-secretstream_xchacha20poly1305.lo\r\n  CC       crypto_shorthash/libsodium_la-crypto_shorthash.lo\r\n  CC       crypto_shorthash/siphash24/libsodium_la-shorthash_siphash24.lo\r\n  CC       crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphash24_ref.lo\r\n  CC       crypto_sign/libsodium_la-crypto_sign.lo\r\n  CC       crypto_sign/ed25519/libsodium_la-sign_ed25519.lo\r\n  CC       crypto_sign/ed25519/ref10/libsodium_la-keypair.lo\r\n  CC       crypto_sign/ed25519/ref10/libsodium_la-open.lo\r\n  CC       crypto_sign/ed25519/ref10/libsodium_la-sign.lo\r\n  CC       crypto_stream/chacha20/libsodium_la-stream_chacha20.lo\r\n  CC       crypto_stream/chacha20/ref/libsodium_la-chacha20_ref.lo\r\n  CC       crypto_stream/libsodium_la-crypto_stream.lo\r\n  CC       crypto_stream/salsa20/libsodium_la-stream_salsa20.lo\r\n  CC       crypto_stream/xsalsa20/libsodium_la-stream_xsalsa20.lo\r\n  CC       crypto_verify/sodium/libsodium_la-verify.lo\r\n  CC       randombytes/libsodium_la-randombytes.lo\r\n  CC       sodium/libsodium_la-codecs.lo\r\n  CC       sodium/libsodium_la-core.lo\r\n  CC       sodium/libsodium_la-runtime.lo\r\n  CC       sodium/libsodium_la-utils.lo\r\n  CC       sodium/libsodium_la-version.lo\r\n  CPPAS    crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6-asm.lo\r\n  CC       crypto_stream/salsa20/xmm6/libsodium_la-salsa20_xmm6.lo\r\n  CC       crypto_scalarmult/curve25519/sandy2x/libsodium_la-curve25519_sandy2x.lo\r\n  CC       crypto_scalarmult/curve25519/sandy2x/libsodium_la-fe51_invert.lo\r\n  CC       crypto_scalarmult/curve25519/sandy2x/libsodium_la-fe_frombytes_sandy2x.lo\r\n  CPPAS    crypto_scalarmult/curve25519/sandy2x/libsodium_la-sandy2x.lo\r\n  CC       crypto_box/curve25519xchacha20poly1305/libsodium_la-box_curve25519xchacha20poly1305.lo\r\n  CC       crypto_box/curve25519xchacha20poly1305/libsodium_la-box_seal_curve25519xchacha20poly1305.lo\r\n  CC       crypto_core/ed25519/libsodium_la-core_ed25519.lo\r\ncrypto_core/ed25519/core_ed25519.c:87:12: warning: 'crypto_core_ed25519_from_hash' is deprecated\r\n      [-Wdeprecated-declarations]\r\n    (void) crypto_core_ed25519_from_hash(p, h);\r\n           ^\r\n./include/sodium/crypto_core_ed25519.h:51:55: note: 'crypto_core_ed25519_from_hash' has been explicitly\r\n      marked deprecated here\r\n            __attribute__ ((nonnull)) __attribute__ ((deprecated));\r\n                                                      ^\r\n1 warning generated.\r\n  CC       crypto_core/ed25519/libsodium_la-core_ristretto255.lo\r\n  CC       crypto_pwhash/scryptsalsa208sha256/libsodium_la-crypto_scrypt-common.lo\r\n  CC       crypto_pwhash/scryptsalsa208sha256/libsodium_la-scrypt_platform.lo\r\n  CC       crypto_pwhash/scryptsalsa208sha256/libsodium_la-pbkdf2-sha256.lo\r\n  CC       crypto_pwhash/scryptsalsa208sha256/libsodium_la-pwhash_scryptsalsa208sha256.lo\r\n  CC       crypto_pwhash/scryptsalsa208sha256/nosse/libsodium_la-pwhash_scryptsalsa208sha256_nosse.lo\r\n  CC       crypto_scalarmult/ed25519/ref10/libsodium_la-scalarmult_ed25519_ref10.lo\r\n  CC       crypto_scalarmult/ristretto255/ref10/libsodium_la-scalarmult_ristretto255_ref10.lo\r\n  CC       crypto_secretbox/xchacha20poly1305/libsodium_la-secretbox_xchacha20poly1305.lo\r\n  CC       crypto_shorthash/siphash24/libsodium_la-shorthash_siphashx24.lo\r\n  CC       crypto_shorthash/siphash24/ref/libsodium_la-shorthash_siphashx24_ref.lo\r\n  CC       crypto_sign/ed25519/ref10/libsodium_la-obsolete.lo\r\n  CC       crypto_stream/salsa2012/ref/libsodium_la-stream_salsa2012_ref.lo\r\n  CC       crypto_stream/salsa2012/libsodium_la-stream_salsa2012.lo\r\n  CC       crypto_stream/salsa208/ref/libsodium_la-stream_salsa208_ref.lo\r\n  CC       crypto_stream/salsa208/libsodium_la-stream_salsa208.lo\r\n  CC       crypto_stream/xchacha20/libsodium_la-stream_xchacha20.lo\r\n  CC       randombytes/sysrandom/libsodium_la-randombytes_sysrandom.lo\r\n  CC       crypto_aead/aes256gcm/aesni/libaesni_la-aead_aes256gcm_aesni.lo\r\n  CCLD     libaesni.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CC       crypto_onetimeauth/poly1305/sse2/libsse2_la-poly1305_sse2.lo\r\n  CC       crypto_pwhash/scryptsalsa208sha256/sse/libsse2_la-pwhash_scryptsalsa208sha256_sse.lo\r\n  CCLD     libsse2.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CC       crypto_generichash/blake2b/ref/libssse3_la-blake2b-compress-ssse3.lo\r\n  CC       crypto_pwhash/argon2/libssse3_la-argon2-fill-block-ssse3.lo\r\n  CC       crypto_stream/chacha20/dolbeau/libssse3_la-chacha20_dolbeau-ssse3.lo\r\n  CCLD     libssse3.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CC       crypto_generichash/blake2b/ref/libsse41_la-blake2b-compress-sse41.lo\r\n  CCLD     libsse41.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CC       crypto_generichash/blake2b/ref/libavx2_la-blake2b-compress-avx2.lo\r\n  CC       crypto_pwhash/argon2/libavx2_la-argon2-fill-block-avx2.lo\r\n  CC       crypto_stream/chacha20/dolbeau/libavx2_la-chacha20_dolbeau-avx2.lo\r\n  CC       crypto_stream/salsa20/xmm6int/libavx2_la-salsa20_xmm6int-avx2.lo\r\n  CCLD     libavx2.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CC       crypto_pwhash/argon2/libavx512f_la-argon2-fill-block-avx512f.lo\r\n  CCLD     libavx512f.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CC       randombytes/internal/librdrand_la-randombytes_internal_random.lo\r\n  CCLD     librdrand.la\r\nlibtool: warning: '-version-info/-version-number' is ignored for convenience libraries\r\n  CCLD     libsodium.la\r\nmake[2]: Nothing to be done for `check-am'.\r\nMaking check in test\r\nMaking check in default\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  aead_aes256gcm aead_aes256gcm2 aead_chacha20poly1305 aead_chacha20poly13052 aead_xchacha20poly1305 auth auth2 auth3 auth5 auth6 auth7 box box2 box7 box8 box_easy box_easy2 box_seal box_seed chacha20 codecs core1 core2 core3 core4 core5 core6 ed25519_convert generichash generichash2 generichash3 hash hash3 kdf keygen kx metamorphic misuse onetimeauth onetimeauth2 onetimeauth7 pwhash_argon2i pwhash_argon2id randombytes scalarmult scalarmult2 scalarmult5 scalarmult6 scalarmult7 scalarmult8 secretbox secretbox2 secretbox7 secretbox8 secretbox_easy secretbox_easy2 secretstream shorthash sign sodium_core sodium_utils sodium_version stream stream2 stream3 stream4 verify1 sodium_utils2 sodium_utils3 core_ed25519 core_ristretto255 pwhash_scrypt pwhash_scrypt_ll scalarmult_ed25519 scalarmult_ristretto255 siphashx24 xchacha20\r\n  CC       aead_aes256gcm.o\r\n  CCLD     aead_aes256gcm\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       aead_aes256gcm2.o\r\n  CCLD     aead_aes256gcm2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       aead_chacha20poly1305.o\r\n  CCLD     aead_chacha20poly1305\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       aead_chacha20poly13052.o\r\n  CCLD     aead_chacha20poly13052\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       aead_xchacha20poly1305.o\r\n  CCLD     aead_xchacha20poly1305\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       auth.o\r\n  CCLD     auth\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       auth2.o\r\n  CCLD     auth2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       auth3.o\r\n  CCLD     auth3\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       auth5.o\r\n  CCLD     auth5\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       auth6.o\r\n  CCLD     auth6\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       auth7.o\r\n  CCLD     auth7\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box.o\r\n  CCLD     box\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box2.o\r\n  CCLD     box2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box7.o\r\n  CCLD     box7\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box8.o\r\n  CCLD     box8\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box_easy.o\r\n  CCLD     box_easy\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box_easy2.o\r\n  CCLD     box_easy2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box_seal.o\r\n  CCLD     box_seal\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       box_seed.o\r\n  CCLD     box_seed\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       chacha20.o\r\n  CCLD     chacha20\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       codecs.o\r\n  CCLD     codecs\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core1.o\r\n  CCLD     core1\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core2.o\r\n  CCLD     core2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core3.o\r\n  CCLD     core3\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core4.o\r\n  CCLD     core4\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core5.o\r\n  CCLD     core5\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core6.o\r\n  CCLD     core6\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       ed25519_convert.o\r\n  CCLD     ed25519_convert\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       generichash.o\r\n  CCLD     generichash\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       generichash2.o\r\n  CCLD     generichash2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       generichash3.o\r\n  CCLD     generichash3\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       hash.o\r\n  CCLD     hash\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       hash3.o\r\n  CCLD     hash3\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       kdf.o\r\n  CCLD     kdf\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       keygen.o\r\n  CCLD     keygen\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       kx.o\r\n  CCLD     kx\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       metamorphic.o\r\n  CCLD     metamorphic\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       misuse.o\r\n  CCLD     misuse\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       onetimeauth.o\r\n  CCLD     onetimeauth\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       onetimeauth2.o\r\n  CCLD     onetimeauth2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       onetimeauth7.o\r\n  CCLD     onetimeauth7\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       pwhash_argon2i.o\r\n  CCLD     pwhash_argon2i\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       pwhash_argon2id.o\r\n  CCLD     pwhash_argon2id\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       randombytes.o\r\n  CCLD     randombytes\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult.o\r\n  CCLD     scalarmult\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult2.o\r\n  CCLD     scalarmult2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult5.o\r\n  CCLD     scalarmult5\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult6.o\r\n  CCLD     scalarmult6\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult7.o\r\n  CCLD     scalarmult7\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult8.o\r\n  CCLD     scalarmult8\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretbox.o\r\n  CCLD     secretbox\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretbox2.o\r\n  CCLD     secretbox2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretbox7.o\r\n  CCLD     secretbox7\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretbox8.o\r\n  CCLD     secretbox8\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretbox_easy.o\r\n  CCLD     secretbox_easy\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretbox_easy2.o\r\n  CCLD     secretbox_easy2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       secretstream.o\r\n  CCLD     secretstream\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       shorthash.o\r\n  CCLD     shorthash\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       sign.o\r\n  CCLD     sign\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       sodium_core.o\r\n  CCLD     sodium_core\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       sodium_utils.o\r\n  CCLD     sodium_utils\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       sodium_version.o\r\n  CCLD     sodium_version\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       stream.o\r\n  CCLD     stream\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       stream2.o\r\n  CCLD     stream2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       stream3.o\r\n  CCLD     stream3\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       stream4.o\r\n  CCLD     stream4\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       verify1.o\r\n  CCLD     verify1\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       sodium_utils2.o\r\n  CCLD     sodium_utils2\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       sodium_utils3.o\r\n  CCLD     sodium_utils3\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core_ed25519.o\r\n  CCLD     core_ed25519\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       core_ristretto255.o\r\n  CCLD     core_ristretto255\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       pwhash_scrypt.o\r\n  CCLD     pwhash_scrypt\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       pwhash_scrypt_ll.o\r\n  CCLD     pwhash_scrypt_ll\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult_ed25519.o\r\n  CCLD     scalarmult_ed25519\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       scalarmult_ristretto255.o\r\n  CCLD     scalarmult_ristretto255\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       siphashx24.o\r\n  CCLD     siphashx24\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n  CC       xchacha20.o\r\n  CCLD     xchacha20\r\nclang: warning: argument unused during compilation: '-pie' [-Wunused-command-line-argument]\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  check-TESTS\r\nPASS: aead_aes256gcm\r\nPASS: aead_aes256gcm2\r\nPASS: aead_chacha20poly1305\r\nPASS: aead_chacha20poly13052\r\nPASS: aead_xchacha20poly1305\r\nPASS: auth\r\nPASS: auth2\r\nPASS: auth3\r\nPASS: auth5\r\nPASS: auth6\r\nPASS: auth7\r\nPASS: box\r\nPASS: box2\r\nPASS: box7\r\nPASS: box8\r\nPASS: box_easy\r\nPASS: box_easy2\r\nPASS: box_seal\r\nPASS: box_seed\r\nPASS: chacha20\r\nPASS: codecs\r\nPASS: core1\r\nPASS: core2\r\nPASS: core3\r\nPASS: core4\r\nPASS: core5\r\nPASS: core6\r\nPASS: ed25519_convert\r\nPASS: generichash\r\nPASS: generichash2\r\nPASS: generichash3\r\nPASS: hash\r\nPASS: hash3\r\nPASS: kdf\r\nPASS: keygen\r\nPASS: kx\r\nPASS: metamorphic\r\nPASS: misuse\r\nPASS: onetimeauth\r\nPASS: onetimeauth2\r\nPASS: onetimeauth7\r\nPASS: pwhash_argon2i\r\nPASS: pwhash_argon2id\r\nPASS: randombytes\r\nPASS: scalarmult\r\nPASS: scalarmult2\r\nPASS: scalarmult5\r\nPASS: scalarmult6\r\nPASS: scalarmult7\r\nPASS: scalarmult8\r\nPASS: secretbox\r\nPASS: secretbox2\r\nPASS: secretbox7\r\nPASS: secretbox8\r\nPASS: secretbox_easy\r\nPASS: secretbox_easy2\r\nPASS: secretstream\r\nPASS: shorthash\r\nPASS: sign\r\nPASS: sodium_core\r\nPASS: sodium_utils\r\nPASS: sodium_version\r\nPASS: stream\r\nPASS: stream2\r\nPASS: stream3\r\nPASS: stream4\r\nPASS: verify1\r\nPASS: sodium_utils2\r\nPASS: sodium_utils3\r\nPASS: core_ed25519\r\nPASS: core_ristretto255\r\nPASS: pwhash_scrypt\r\nPASS: pwhash_scrypt_ll\r\nPASS: scalarmult_ed25519\r\nPASS: scalarmult_ristretto255\r\nPASS: siphashx24\r\nPASS: xchacha20\r\n============================================================================\r\nTestsuite summary for libsodium 1.0.18\r\n============================================================================\r\n# TOTAL: 77\r\n# PASS:  77\r\n# SKIP:  0\r\n# XFAIL: 0\r\n# FAIL:  0\r\n# XPASS: 0\r\n# ERROR: 0\r\n============================================================================\r\nmake[2]: Nothing to be done for `check-am'.\r\nmake[1]: Nothing to be done for `check-am'.\r\nSherif:libsodium sherifomran$ sudo make install\r\nPassword:\r\nMaking install in builds\r\nmake[2]: Nothing to be done for `install-exec-am'.\r\nmake[2]: Nothing to be done for `install-data-am'.\r\nMaking install in contrib\r\nmake[2]: Nothing to be done for `install-exec-am'.\r\nmake[2]: Nothing to be done for `install-data-am'.\r\nMaking install in dist-build\r\nmake[2]: Nothing to be done for `install-exec-am'.\r\nmake[2]: Nothing to be done for `install-data-am'.\r\nMaking install in msvc-scripts\r\nmake[2]: Nothing to be done for `install-exec-am'.\r\nmake[2]: Nothing to be done for `install-data-am'.\r\nMaking install in src\r\nMaking install in libsodium\r\nMaking install in include\r\nmake[4]: Nothing to be done for `install-exec-am'.\r\n /usr/local/bin/gmkdir -p '/usr/local/include'\r\n /usr/local/bin/gmkdir -p '/usr/local/include/sodium'\r\n /usr/bin/install -c -m 644  sodium/core.h sodium/crypto_aead_aes256gcm.h sodium/crypto_aead_chacha20poly1305.h sodium/crypto_aead_xchacha20poly1305.h sodium/crypto_auth.h sodium/crypto_auth_hmacsha256.h sodium/crypto_auth_hmacsha512.h sodium/crypto_auth_hmacsha512256.h sodium/crypto_box.h sodium/crypto_box_curve25519xchacha20poly1305.h sodium/crypto_box_curve25519xsalsa20poly1305.h sodium/crypto_core_ed25519.h sodium/crypto_core_ristretto255.h sodium/crypto_core_hchacha20.h sodium/crypto_core_hsalsa20.h sodium/crypto_core_salsa20.h sodium/crypto_core_salsa2012.h sodium/crypto_core_salsa208.h sodium/crypto_generichash.h sodium/crypto_generichash_blake2b.h sodium/crypto_hash.h sodium/crypto_hash_sha256.h sodium/crypto_hash_sha512.h sodium/crypto_kdf.h sodium/crypto_kdf_blake2b.h sodium/crypto_kx.h sodium/crypto_onetimeauth.h sodium/crypto_onetimeauth_poly1305.h sodium/crypto_pwhash.h sodium/crypto_pwhash_argon2i.h sodium/crypto_pwhash_argon2id.h sodium/crypto_pwhash_scryptsalsa208sha256.h sodium/crypto_scalarmult.h sodium/crypto_scalarmult_curve25519.h sodium/crypto_scalarmult_ed25519.h sodium/crypto_scalarmult_ristretto255.h sodium/crypto_secretbox.h sodium/crypto_secretbox_xchacha20poly1305.h sodium/crypto_secretbox_xsalsa20poly1305.h sodium/crypto_secretstream_xchacha20poly1305.h '/usr/local/include/sodium'\r\n /usr/local/bin/gmkdir -p '/usr/local/include/sodium'\r\n /usr/bin/install -c -m 644  sodium/crypto_shorthash.h sodium/crypto_shorthash_siphash24.h sodium/crypto_sign.h sodium/crypto_sign_ed25519.h sodium/crypto_sign_edwards25519sha512batch.h sodium/crypto_stream.h sodium/crypto_stream_chacha20.h sodium/crypto_stream_salsa20.h sodium/crypto_stream_salsa2012.h sodium/crypto_stream_salsa208.h sodium/crypto_stream_xchacha20.h sodium/crypto_stream_xsalsa20.h sodium/crypto_verify_16.h sodium/crypto_verify_32.h sodium/crypto_verify_64.h sodium/export.h sodium/randombytes.h sodium/randombytes_internal_random.h sodium/randombytes_sysrandom.h sodium/runtime.h sodium/utils.h '/usr/local/include/sodium'\r\n /usr/bin/install -c -m 644  sodium.h '/usr/local/include/.'\r\n /usr/local/bin/gmkdir -p '/usr/local/include'\r\n /usr/local/bin/gmkdir -p '/usr/local/include/sodium'\r\n /usr/bin/install -c -m 644  sodium/version.h '/usr/local/include/sodium'\r\n /usr/local/bin/gmkdir -p '/usr/local/lib'\r\n /bin/sh ../../libtool   --mode=install /usr/bin/install -c   libsodium.la '/usr/local/lib'\r\nlibtool: install: /usr/bin/install -c .libs/libsodium.23.dylib /usr/local/lib/libsodium.23.dylib\r\nlibtool: install: (cd /usr/local/lib && { ln -s -f libsodium.23.dylib libsodium.dylib || { rm -f libsodium.dylib && ln -s libsodium.23.dylib libsodium.dylib; }; })\r\nlibtool: install: /usr/bin/install -c .libs/libsodium.lai /usr/local/lib/libsodium.la\r\nlibtool: install: /usr/bin/install -c .libs/libsodium.a /usr/local/lib/libsodium.a\r\nlibtool: install: chmod 644 /usr/local/lib/libsodium.a\r\nlibtool: install: ranlib /usr/local/lib/libsodium.a\r\nmake[4]: Nothing to be done for `install-data-am'.\r\nmake[3]: Nothing to be done for `install-exec-am'.\r\nmake[3]: Nothing to be done for `install-data-am'.\r\nMaking install in test\r\nMaking install in default\r\nmake[3]: Nothing to be done for `install-exec-am'.\r\nmake[3]: Nothing to be done for `install-data-am'.\r\nmake[3]: Nothing to be done for `install-exec-am'.\r\nmake[3]: Nothing to be done for `install-data-am'.\r\nmake[2]: Nothing to be done for `install-exec-am'.\r\n /usr/local/bin/gmkdir -p '/usr/local/lib/pkgconfig'\r\n /usr/bin/install -c -m 644 libsodium.pc '/usr/local/lib/pkgconfig'\r\nSherif:libsodium sherifomran$ pwd\r\n/Users/sherifomran/zyre/libsodium\r\nSherif:libsodium sherifomran$ ls\r\nAUTHORS\t\t\t\tbuild-aux\t\t\tlibsodium.sln\r\nChangeLog\t\t\tbuilds\t\t\t\tlibsodium.vcxproj\r\nLICENSE\t\t\t\tconfig.log\t\t\tlibsodium.vcxproj.filters\r\nMakefile\t\t\tconfig.status\t\t\tlibtool\r\nMakefile.am\t\t\tconfigure\t\t\tlogo.png\r\nMakefile.in\t\t\tconfigure.ac\t\t\tm4\r\nREADME.markdown\t\t\tcontrib\t\t\t\tmsvc-scripts\r\nTHANKS\t\t\t\tdist-build\t\t\tpackaging\r\naclocal.m4\t\t\tlgtm.yml\t\t\tregen-msvc\r\nappveyor.yml\t\t\tlibsodium-uninstalled.pc\tsrc\r\nautogen.sh\t\t\tlibsodium-uninstalled.pc.in\ttest\r\nautom4te.cache\t\t\tlibsodium.pc\r\nazure-pipelines.yml\t\tlibsodium.pc.in\r\nSherif:libsodium sherifomran$ cd ..\r\nSherif:zyre sherifomran$ ls\r\nlibsodium\r\nSherif:zyre sherifomran$ git clone git://github.com/zeromq/libzmq.git\r\nCloning into 'libzmq'...\r\nremote: Enumerating objects: 40795, done.\r\nremote: Total 40795 (delta 0), reused 0 (delta 0), pack-reused 40795\r\nReceiving objects: 100% (40795/40795), 20.35 MiB | 293.00 KiB/s, done.\r\nResolving deltas: 100% (29759/29759), done.\r\nSherif:zyre sherifomran$ cd libzmq/\r\nSherif:libzmq sherifomran$ ./autogen.sh\r\nautoreconf: Entering directory `.'\r\nautoreconf: configure.ac: not using Gettext\r\nautoreconf: running: aclocal -I config --force -I config\r\nautoreconf: configure.ac: tracing\r\nautoreconf: running: glibtoolize --copy --force\r\nglibtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'config'.\r\nglibtoolize: copying file 'config/ltmain.sh'\r\nglibtoolize: putting macros in AC_CONFIG_MACRO_DIRS, 'config'.\r\nglibtoolize: copying file 'config/libtool.m4'\r\nglibtoolize: copying file 'config/ltoptions.m4'\r\nglibtoolize: copying file 'config/ltsugar.m4'\r\nglibtoolize: copying file 'config/ltversion.m4'\r\nglibtoolize: copying file 'config/lt~obsolete.m4'\r\nautoreconf: running: /usr/local/Cellar/autoconf/2.69/bin/autoconf --include=config --force\r\nautoreconf: running: /usr/local/Cellar/autoconf/2.69/bin/autoheader --include=config --force\r\nautoreconf: running: automake --add-missing --copy --force-missing\r\nconfigure.ac:65: installing 'config/compile'\r\nconfigure.ac:80: installing 'config/config.guess'\r\nconfigure.ac:80: installing 'config/config.sub'\r\nconfigure.ac:14: installing 'config/install-sh'\r\nconfigure.ac:14: installing 'config/missing'\r\nMakefile.am: installing 'config/depcomp'\r\nparallel-tests: installing 'config/test-driver'\r\nautoreconf: Leaving directory `.'\r\nSherif:libzmq sherifomran$ ./configure --with-libsodium\r\nchecking for a BSD-compatible install... /usr/bin/install -c\r\nchecking whether build environment is sane... yes\r\nchecking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p\r\nchecking for gawk... no\r\nchecking for mawk... no\r\nchecking for nawk... no\r\nchecking for awk... awk\r\nchecking whether make sets $(MAKE)... yes\r\nchecking whether make supports nested variables... yes\r\nchecking whether UID '501' is supported by ustar format... yes\r\nchecking whether GID '20' is supported by ustar format... yes\r\nchecking how to create a ustar tar archive... gnutar\r\nchecking whether to enable maintainer-specific portions of Makefiles... yes\r\nchecking whether make supports nested variables... (cached) yes\r\nchecking for gcc... gcc\r\nchecking whether the C compiler works... yes\r\nchecking for C compiler default output file name... a.out\r\nchecking for suffix of executables... \r\nchecking whether we are cross compiling... no\r\nchecking for suffix of object files... o\r\nchecking whether we are using the GNU C compiler... yes\r\nchecking whether gcc accepts -g... yes\r\nchecking for gcc option to accept ISO C89... none needed\r\nchecking whether gcc understands -c and -o together... yes\r\nchecking whether make supports the include directive... yes (GNU style)\r\nchecking dependency style of gcc... gcc3\r\nchecking whether C compiler accepts -std=gnu11... yes\r\nchecking for g++... g++\r\nchecking whether we are using the GNU C++ compiler... yes\r\nchecking whether g++ accepts -g... yes\r\nchecking dependency style of g++... gcc3\r\nchecking for a sed that does not truncate output... /usr/local/bin/gsed\r\nchecking whether to build with code coverage support... no\r\nchecking for a sed that does not truncate output... (cached) /usr/local/bin/gsed\r\nchecking for gawk... (cached) awk\r\nchecking for pkg-config... /usr/local/bin/pkg-config\r\nchecking pkg-config is at least version 0.9.0... yes\r\nchecking for xmlto... no\r\nchecking for asciidoc... no\r\nchecking build system type... x86_64-apple-darwin17.7.0\r\nchecking host system type... x86_64-apple-darwin17.7.0\r\nchecking how to print strings... printf\r\nchecking for a sed that does not truncate output... (cached) /usr/local/bin/gsed\r\nchecking for grep that handles long lines and -e... /usr/bin/grep\r\nchecking for egrep... /usr/bin/grep -E\r\nchecking for fgrep... /usr/bin/grep -F\r\nchecking for ld used by gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\r\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\r\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\r\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\r\nchecking whether ln -s works... yes\r\nchecking the maximum length of command line arguments... 196608\r\nchecking how to convert x86_64-apple-darwin17.7.0 file names to x86_64-apple-darwin17.7.0 format... func_convert_file_noop\r\nchecking how to convert x86_64-apple-darwin17.7.0 file names to toolchain format... func_convert_file_noop\r\nchecking for /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld option to reload object files... -r\r\nchecking for objdump... objdump\r\nchecking how to recognize dependent libraries... pass_all\r\nchecking for dlltool... dlltool\r\nchecking how to associate runtime and link libraries... printf %s\\n\r\nchecking for ar... ar\r\nchecking for archiver @FILE support... no\r\nchecking for strip... strip\r\nchecking for ranlib... ranlib\r\nchecking command to parse /usr/bin/nm -B output from gcc object... ok\r\nchecking for sysroot... no\r\nchecking for a working dd... /bin/dd\r\nchecking how to truncate binary pipes... /bin/dd bs=4096 count=1\r\nchecking for mt... no\r\nchecking if : is a manifest tool... no\r\nchecking for dsymutil... dsymutil\r\nchecking for nmedit... nmedit\r\nchecking for lipo... lipo\r\nchecking for otool... otool\r\nchecking for otool64... no\r\nchecking for -single_module linker flag... yes\r\nchecking for -exported_symbols_list linker flag... yes\r\nchecking for -force_load linker flag... yes\r\nchecking how to run the C preprocessor... gcc -E\r\nchecking for ANSI C header files... yes\r\nchecking for sys/types.h... yes\r\nchecking for sys/stat.h... yes\r\nchecking for stdlib.h... yes\r\nchecking for string.h... yes\r\nchecking for memory.h... yes\r\nchecking for strings.h... yes\r\nchecking for inttypes.h... yes\r\nchecking for stdint.h... yes\r\nchecking for unistd.h... yes\r\nchecking for dlfcn.h... yes\r\nchecking for objdir... .libs\r\nchecking if gcc supports -fno-rtti -fno-exceptions... yes\r\nchecking for gcc option to produce PIC... -fno-common -DPIC\r\nchecking if gcc PIC flag -fno-common -DPIC works... yes\r\nchecking if gcc static flag -static works... no\r\nchecking if gcc supports -c -o file.o... yes\r\nchecking if gcc supports -c -o file.o... (cached) yes\r\nchecking whether the gcc linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\r\nchecking dynamic linker characteristics... darwin17.7.0 dyld\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking whether stripping libraries is possible... yes\r\nchecking if libtool supports shared libraries... yes\r\nchecking whether to build shared libraries... yes\r\nchecking whether to build static libraries... yes\r\nchecking how to run the C++ preprocessor... g++ -E\r\nchecking for ld used by g++... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\r\nchecking if the linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) is GNU ld... no\r\nchecking whether the g++ linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\r\nchecking for g++ option to produce PIC... -fno-common -DPIC\r\nchecking if g++ PIC flag -fno-common -DPIC works... yes\r\nchecking if g++ static flag -static works... no\r\nchecking if g++ supports -c -o file.o... yes\r\nchecking if g++ supports -c -o file.o... (cached) yes\r\nchecking whether the g++ linker (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld) supports shared libraries... yes\r\nchecking dynamic linker characteristics... darwin17.7.0 dyld\r\nchecking how to hardcode library paths into programs... immediate\r\nchecking for valgrind... valgrind\r\nchecking for Valgrind tool memcheck... memcheck\r\nchecking for Valgrind tool helgrind... helgrind\r\nchecking for Valgrind tool drd... drd\r\nchecking for Valgrind tool exp-sgcheck... \r\nchecking linker version script flag... unsupported\r\nchecking for working posix_memalign... yes\r\nchecking whether g++ supports C++11 features by default... no\r\nchecking whether g++ supports C++11 features with -std=gnu++11... yes\r\nchecking whether the C compiler works... yes\r\nchecking whether we are using Intel C compiler... no\r\nchecking whether we are using Sun Studio C compiler... no\r\nchecking whether we are using clang C compiler... yes\r\nchecking whether we are using gcc >= 4 C compiler... yes\r\nchecking whether the C++ compiler works... yes\r\nchecking whether we are using Intel C++ compiler... no\r\nchecking whether we are using Sun Studio C++ compiler... no\r\nchecking whether we are using clang C++ compiler... yes\r\nchecking whether we are using gcc >= 4 C++ compiler... yes\r\nchecking whether to enable debugging information... no\r\nchecking whether to enable code coverage... no\r\nchecking if TIPC is available and supports nonblocking connect... no\r\nchecking whether to enable ASan... no\r\nchecking whether C++ compiler supports -Wno-uninitialized... yes\r\nchecking for pthread_create in -lpthread... yes\r\nchecking for clock_gettime in -lrt... no\r\nchecking whether C++ compiler supports -fvisibility=hidden... yes\r\nchecking whether C++ compiler supports dso visibility... yes\r\nchecking for asciidoc... no\r\nchecking for xmlto... no\r\nconfigure: WARNING: You are building an unreleased version of 0MQ and asciidoc or xmlto are not installed.\r\nconfigure: WARNING: Documentation will not be built and manual pages will not be installed.\r\nchecking whether to build documentation... no\r\nchecking whether to install manpages... no\r\nconfigure: Choosing I/O thread polling system from 'kqueue epoll devpoll pollset poll select'...\r\nconfigure: Using 'kqueue' I/O thread polling system\r\nconfigure: Using 'poll' zmq_poll(er)_* API polling system\r\nchecking for getconf... getconf\r\nconfigure: Using \"64\" bytes alignment for lock-free data structures\r\nchecking condition_variable usability... yes\r\nchecking condition_variable presence... yes\r\nchecking for condition_variable... yes\r\nconfigure: Using \"auto\" condition variable implementation.\r\nchecking for ANSI C header files... (cached) yes\r\nchecking errno.h usability... yes\r\nchecking errno.h presence... yes\r\nchecking for errno.h... yes\r\nchecking time.h usability... yes\r\nchecking time.h presence... yes\r\nchecking for time.h... yes\r\nchecking for unistd.h... (cached) yes\r\nchecking limits.h usability... yes\r\nchecking limits.h presence... yes\r\nchecking for limits.h... yes\r\nchecking stddef.h usability... yes\r\nchecking stddef.h presence... yes\r\nchecking for stddef.h... yes\r\nchecking for stdlib.h... (cached) yes\r\nchecking for string.h... (cached) yes\r\nchecking arpa/inet.h usability... yes\r\nchecking arpa/inet.h presence... yes\r\nchecking for arpa/inet.h... yes\r\nchecking netinet/tcp.h usability... yes\r\nchecking netinet/tcp.h presence... yes\r\nchecking for netinet/tcp.h... yes\r\nchecking netinet/in.h usability... yes\r\nchecking netinet/in.h presence... yes\r\nchecking for netinet/in.h... yes\r\nchecking sys/socket.h usability... yes\r\nchecking sys/socket.h presence... yes\r\nchecking for sys/socket.h... yes\r\nchecking sys/time.h usability... yes\r\nchecking sys/time.h presence... yes\r\nchecking for sys/time.h... yes\r\nchecking ifaddrs.h usability... yes\r\nchecking ifaddrs.h presence... yes\r\nchecking for ifaddrs.h... yes\r\nchecking sys/uio.h usability... yes\r\nchecking sys/uio.h presence... yes\r\nchecking for sys/uio.h... yes\r\nchecking sys/eventfd.h usability... no\r\nchecking sys/eventfd.h presence... no\r\nchecking for sys/eventfd.h... no\r\nchecking whether SO_PEERCRED is declared... no\r\nchecking whether LOCAL_PEERCRED is declared... no\r\nchecking for stdbool.h that conforms to C99... no\r\nchecking for _Bool... no\r\nchecking for an ANSI C-conforming const... yes\r\nchecking for inline... inline\r\nchecking for size_t... yes\r\nchecking for ssize_t... yes\r\nchecking whether time.h and sys/time.h may both be included... yes\r\nchecking for uint32_t... yes\r\nchecking for working volatile... yes\r\nchecking for libsodium... yes\r\nconfigure: Using libsodium for CURVE security\r\nconfigure: Using builting SHA1\r\nchecking \"with_norm_ext = no\"... no\r\nchecking how to enable additional warnings for C++ compiler... -Wall\r\nchecking whether C++ compiler accepts -Wno-atomic-alignment... no\r\nchecking whether compiler supports __atomic_Xxx intrinsics... yes\r\nchecking return type of signal handlers... void\r\nchecking for perror... yes\r\nchecking for gettimeofday... yes\r\nchecking for clock_gettime... yes\r\nchecking for memset... yes\r\nchecking for socket... yes\r\nchecking for getifaddrs... yes\r\nchecking for freeifaddrs... yes\r\nchecking for fork... yes\r\nchecking for mkdtemp... yes\r\nchecking for accept4... no\r\nchecking alloca.h usability... yes\r\nchecking alloca.h presence... yes\r\nchecking for alloca.h... yes\r\nchecking whether strnlen is available... yes\r\nchecking whether strlcpy is available... yes\r\nchecking whether signature of pthread_setname_np() has 1 argument... yes\r\nchecking whether signature of pthread_setname_np() has 2 arguments... no\r\nchecking whether signature of pthread_setname_np() has 3 arguments... no\r\nchecking whether pthread_set_name_np() exists... no\r\nchecking whether pthread_setaffinity_np() exists... no\r\nchecking whether SOCK_CLOEXEC is supported... no\r\nchecking whether O_CLOEXEC is supported... yes\r\nchecking whether SO_BINDTODEVICE is supported... no\r\nchecking whether SO_KEEPALIVE is supported... yes\r\nchecking whether TCP_KEEPCNT is supported... yes\r\nchecking whether TCP_KEEPIDLE is supported... no\r\nchecking whether TCP_KEEPINTVL is supported... yes\r\nchecking whether TCP_KEEPALIVE is supported... yes\r\nchecking whether getrandom is supported... no\r\nchecking for ./.git... yes\r\nconfigure: Building stable and legacy API + draft API\r\nchecking for libunwind... no\r\nconfigure: WARNING: Cannot find libunwind\r\nconfigure: Using radix tree implementation to manage subscriptions\r\nchecking for clang-format... no\r\nchecking whether C compiler accepts -Wno-tautological-constant-compare... yes\r\nchecking whether C++ compiler accepts -Wno-tautological-constant-compare... yes\r\nchecking whether C compiler accepts -ffat-lto-objects... no\r\nchecking whether C++ compiler accepts -ffat-lto-objects... no\r\nchecking that generated files are newer than configure... done\r\nconfigure: creating ./config.status\r\nconfig.status: creating Makefile\r\nconfig.status: creating src/libzmq.pc\r\nconfig.status: creating doc/Makefile\r\nconfig.status: creating builds/Makefile\r\nconfig.status: creating builds/deprecated-msvc/Makefile\r\nconfig.status: creating src/platform.hpp\r\nconfig.status: executing depfiles commands\r\nconfig.status: executing libtool commands\r\nSherif:libzmq sherifomran$ make check\r\nMaking check in doc\r\nmake[1]: Nothing to be done for `check'.\r\n  CXX      tools/curve_keygen.o\r\n  CXX      src/libzmq_la-address.lo\r\n  CXX      src/libzmq_la-client.lo\r\n  CXX      src/libzmq_la-clock.lo\r\n  CXX      src/libzmq_la-ctx.lo\r\n  CXX      src/libzmq_la-curve_client.lo\r\n  CXX      src/libzmq_la-curve_mechanism_base.lo\r\n  CXX      src/libzmq_la-curve_server.lo\r\n  CXX      src/libzmq_la-dealer.lo\r\n  CXX      src/libzmq_la-devpoll.lo\r\n  CXX      src/libzmq_la-dgram.lo\r\n  CXX      src/libzmq_la-dish.lo\r\n  CXX      src/libzmq_la-dist.lo\r\n  CXX      src/libzmq_la-endpoint.lo\r\n  CXX      src/libzmq_la-epoll.lo\r\n  CXX      src/libzmq_la-err.lo\r\n  CXX      src/libzmq_la-fq.lo\r\n  CXX      src/libzmq_la-gather.lo\r\n  CXX      src/libzmq_la-gssapi_mechanism_base.lo\r\n  CXX      src/libzmq_la-gssapi_client.lo\r\n  CXX      src/libzmq_la-gssapi_server.lo\r\n  CXX      src/libzmq_la-io_object.lo\r\n  CXX      src/libzmq_la-io_thread.lo\r\n  CXX      src/libzmq_la-ip.lo\r\n  CXX      src/libzmq_la-ip_resolver.lo\r\n  CXX      src/libzmq_la-ipc_address.lo\r\n  CXX      src/libzmq_la-ipc_connecter.lo\r\n  CXX      src/libzmq_la-ipc_listener.lo\r\n  CXX      src/libzmq_la-kqueue.lo\r\n  CXX      src/libzmq_la-lb.lo\r\n  CXX      src/libzmq_la-mailbox.lo\r\n  CXX      src/libzmq_la-mailbox_safe.lo\r\n  CXX      src/libzmq_la-mechanism.lo\r\n  CXX      src/libzmq_la-mechanism_base.lo\r\n  CXX      src/libzmq_la-metadata.lo\r\n  CXX      src/libzmq_la-msg.lo\r\n  CXX      src/libzmq_la-mtrie.lo\r\n  CXX      src/libzmq_la-norm_engine.lo\r\n  CXX      src/libzmq_la-null_mechanism.lo\r\n  CXX      src/libzmq_la-object.lo\r\n  CXX      src/libzmq_la-options.lo\r\n  CXX      src/libzmq_la-own.lo\r\n  CXX      src/libzmq_la-pair.lo\r\n  CXX      src/libzmq_la-pgm_receiver.lo\r\n  CXX      src/libzmq_la-pgm_sender.lo\r\n  CXX      src/libzmq_la-pgm_socket.lo\r\n  CXX      src/libzmq_la-pipe.lo\r\n  CXX      src/libzmq_la-plain_client.lo\r\n  CXX      src/libzmq_la-plain_server.lo\r\n  CXX      src/libzmq_la-poll.lo\r\n  CXX      src/libzmq_la-poller_base.lo\r\n  CXX      src/libzmq_la-polling_util.lo\r\n  CXX      src/libzmq_la-pollset.lo\r\n  CXX      src/libzmq_la-precompiled.lo\r\n  CXX      src/libzmq_la-proxy.lo\r\n  CXX      src/libzmq_la-pub.lo\r\n  CXX      src/libzmq_la-pull.lo\r\n  CXX      src/libzmq_la-push.lo\r\n  CXX      src/libzmq_la-radio.lo\r\n  CXX      src/libzmq_la-radix_tree.lo\r\n  CXX      src/libzmq_la-random.lo\r\n  CXX      src/libzmq_la-raw_decoder.lo\r\n  CXX      src/libzmq_la-raw_encoder.lo\r\n  CXX      src/libzmq_la-raw_engine.lo\r\n  CXX      src/libzmq_la-reaper.lo\r\n  CXX      src/libzmq_la-rep.lo\r\n  CXX      src/libzmq_la-req.lo\r\n  CXX      src/libzmq_la-router.lo\r\n  CXX      src/libzmq_la-scatter.lo\r\n  CXX      src/libzmq_la-select.lo\r\n  CXX      src/libzmq_la-server.lo\r\n  CXX      src/libzmq_la-session_base.lo\r\n  CXX      src/libzmq_la-signaler.lo\r\n  CXX      src/libzmq_la-socket_base.lo\r\n  CXX      src/libzmq_la-socks.lo\r\n  CXX      src/libzmq_la-socks_connecter.lo\r\n  CXX      src/libzmq_la-stream.lo\r\n  CXX      src/libzmq_la-stream_connecter_base.lo\r\n  CXX      src/libzmq_la-stream_listener_base.lo\r\n  CXX      src/libzmq_la-stream_engine_base.lo\r\n  CXX      src/libzmq_la-sub.lo\r\n  CXX      src/libzmq_la-tcp.lo\r\n  CXX      src/libzmq_la-tcp_address.lo\r\n  CXX      src/libzmq_la-tcp_connecter.lo\r\n  CXX      src/libzmq_la-tcp_listener.lo\r\n  CXX      src/libzmq_la-thread.lo\r\n  CXX      src/libzmq_la-timers.lo\r\n  CXX      src/libzmq_la-tipc_address.lo\r\n  CXX      src/libzmq_la-tipc_connecter.lo\r\n  CXX      src/libzmq_la-tipc_listener.lo\r\n  CXX      src/libzmq_la-trie.lo\r\n  CXX      src/libzmq_la-udp_address.lo\r\n  CXX      src/libzmq_la-udp_engine.lo\r\n  CXX      src/libzmq_la-v1_decoder.lo\r\n  CXX      src/libzmq_la-v2_decoder.lo\r\n  CXX      src/libzmq_la-v1_encoder.lo\r\n  CXX      src/libzmq_la-v2_encoder.lo\r\n  CXX      src/libzmq_la-vmci.lo\r\n  CXX      src/libzmq_la-vmci_address.lo\r\n  CXX      src/libzmq_la-vmci_connecter.lo\r\n  CXX      src/libzmq_la-vmci_listener.lo\r\n  CXX      src/libzmq_la-xpub.lo\r\n  CXX      src/libzmq_la-xsub.lo\r\n  CXX      src/libzmq_la-zmq.lo\r\n  CXX      src/libzmq_la-zmq_utils.lo\r\n  CXX      src/libzmq_la-decoder_allocators.lo\r\n  CXX      src/libzmq_la-socket_poller.lo\r\n  CXX      src/libzmq_la-zap_client.lo\r\n  CXX      src/libzmq_la-zmtp_engine.lo\r\n  CXX      src/libzmq_la-ws_address.lo\r\n  CXX      src/libzmq_la-wss_address.lo\r\n  CXX      src/libzmq_la-ws_connecter.lo\r\n  CXX      src/libzmq_la-ws_decoder.lo\r\n  CXX      src/libzmq_la-ws_encoder.lo\r\n  CXX      src/libzmq_la-ws_engine.lo\r\n  CXX      src/libzmq_la-ws_listener.lo\r\n  CC       external/sha1/src_libzmq_la-sha1.lo\r\n  CXXLD    src/libzmq.la\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-devpoll.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-epoll.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-gssapi_mechanism_base.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-gssapi_client.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-gssapi_server.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-norm_engine.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pgm_receiver.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pgm_sender.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pgm_socket.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-poll.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pollset.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-precompiled.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-select.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-tipc_address.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-tipc_connecter.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-tipc_listener.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci_address.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci_connecter.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci_listener.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-devpoll.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-epoll.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-gssapi_mechanism_base.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-gssapi_client.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-gssapi_server.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-norm_engine.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pgm_receiver.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pgm_sender.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pgm_socket.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-poll.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-pollset.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-precompiled.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-select.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-tipc_address.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-tipc_connecter.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-tipc_listener.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci_address.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci_connecter.o) has no symbols\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib: file: src/.libs/libzmq.a(libzmq_la-vmci_listener.o) has no symbols\r\n  CXXLD    tools/curve_keygen\r\n  CXX      perf/local_lat.o\r\n  CXXLD    perf/local_lat\r\n  CXX      perf/remote_lat.o\r\n  CXXLD    perf/remote_lat\r\n  CXX      perf/local_thr.o\r\n  CXXLD    perf/local_thr\r\n  CXX      perf/remote_thr.o\r\n  CXXLD    perf/remote_thr\r\n  CXX      perf/inproc_lat.o\r\n  CXXLD    perf/inproc_lat\r\n  CXX      perf/inproc_thr.o\r\n  CXXLD    perf/inproc_thr\r\n  CXX      perf/proxy_thr.o\r\n  CXXLD    perf/proxy_thr\r\n  CXX      perf/benchmark_radix_tree-benchmark_radix_tree.o\r\n  CXXLD    perf/benchmark_radix_tree\r\n  CC       external/unity/unity.o\r\n  AR       external/unity/libunity.a\r\n  CXX      tests/libtestutil_a-testutil.o\r\n  CXX      tests/libtestutil_a-testutil_monitoring.o\r\n  CXX      tests/libtestutil_a-testutil_security.o\r\n  CXX      tests/libtestutil_a-testutil_unity.o\r\n  AR       tests/libtestutil.a\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  tests/test_ancillaries tests/test_system tests/test_pair_inproc tests/test_pair_tcp tests/test_reqrep_inproc tests/test_reqrep_tcp tests/test_hwm tests/test_hwm_pubsub tests/test_reqrep_device tests/test_sub_forward tests/test_invalid_rep tests/test_msg_flags tests/test_msg_ffn tests/test_connect_resolve tests/test_immediate tests/test_last_endpoint tests/test_term_endpoint tests/test_srcfd tests/test_monitor tests/test_router_mandatory tests/test_router_mandatory_hwm tests/test_router_handover tests/test_probe_router tests/test_stream tests/test_stream_empty tests/test_stream_disconnect tests/test_stream_timeout tests/test_disconnect_inproc tests/test_unbind_wildcard tests/test_ctx_options tests/test_ctx_destroy tests/test_security_no_zap_handler tests/test_security_null tests/test_security_plain tests/test_security_zap tests/test_iov tests/test_spec_req tests/test_spec_rep tests/test_spec_dealer tests/test_spec_router tests/test_spec_pushpull tests/test_req_correlate tests/test_req_relaxed tests/test_conflate tests/test_inproc_connect tests/test_issue_566 tests/test_proxy tests/test_proxy_hwm tests/test_proxy_single_socket tests/test_proxy_terminate tests/test_getsockopt_memset tests/test_setsockopt tests/test_diffserv tests/test_connect_rid tests/test_bind_src_address tests/test_metadata tests/test_capabilities tests/test_xpub_nodrop tests/test_xpub_manual tests/test_xpub_welcome_msg tests/test_xpub_verbose tests/test_atomics tests/test_sockopt_hwm tests/test_heartbeats tests/test_stream_exceeds_buffer tests/test_pub_invert_matching tests/test_base85 tests/test_bind_after_connect_tcp tests/test_sodium tests/test_reconnect_ivl tests/test_mock_pub_sub tests/test_socket_null tests/test_security_curve tests/test_ws_transport  tests/test_shutdown_stress tests/test_ipc_wildcard tests/test_pair_ipc tests/test_rebind_ipc tests/test_reqrep_ipc tests/test_use_fd tests/test_zmq_poll_fd tests/test_timeo tests/test_filter_ipc      tests/test_poller tests/test_client_server tests/test_thread_safe tests/test_timers tests/test_radio_dish tests/test_scatter_gather tests/test_dgram tests/test_app_meta tests/test_xpub_manual_last_value tests/test_router_notify unittests/unittest_poller unittests/unittest_ypipe unittests/unittest_mtrie unittests/unittest_ip_resolver unittests/unittest_udp_address unittests/unittest_radix_tree\r\n  CXX      tests/test_ancillaries-test_ancillaries.o\r\n  CXXLD    tests/test_ancillaries\r\n  CXX      tests/test_system-test_system.o\r\n  CXXLD    tests/test_system\r\n  CXX      tests/test_pair_inproc-test_pair_inproc.o\r\n  CXXLD    tests/test_pair_inproc\r\n  CXX      tests/test_pair_tcp-test_pair_tcp.o\r\n  CXXLD    tests/test_pair_tcp\r\n  CXX      tests/test_reqrep_inproc-test_reqrep_inproc.o\r\n  CXXLD    tests/test_reqrep_inproc\r\n  CXX      tests/test_reqrep_tcp-test_reqrep_tcp.o\r\n  CXXLD    tests/test_reqrep_tcp\r\n  CXX      tests/test_hwm-test_hwm.o\r\n  CXXLD    tests/test_hwm\r\n  CXX      tests/test_hwm_pubsub-test_hwm_pubsub.o\r\n  CXXLD    tests/test_hwm_pubsub\r\n  CXX      tests/test_reqrep_device-test_reqrep_device.o\r\n  CXXLD    tests/test_reqrep_device\r\n  CXX      tests/test_sub_forward-test_sub_forward.o\r\n  CXXLD    tests/test_sub_forward\r\n  CXX      tests/test_invalid_rep-test_invalid_rep.o\r\n  CXXLD    tests/test_invalid_rep\r\n  CXX      tests/test_msg_flags-test_msg_flags.o\r\n  CXXLD    tests/test_msg_flags\r\n  CXX      tests/test_msg_ffn-test_msg_ffn.o\r\n  CXXLD    tests/test_msg_ffn\r\n  CXX      tests/test_connect_resolve-test_connect_resolve.o\r\n  CXXLD    tests/test_connect_resolve\r\n  CXX      tests/test_immediate-test_immediate.o\r\n  CXXLD    tests/test_immediate\r\n  CXX      tests/test_last_endpoint-test_last_endpoint.o\r\n  CXXLD    tests/test_last_endpoint\r\n  CXX      tests/test_term_endpoint-test_term_endpoint.o\r\n  CXXLD    tests/test_term_endpoint\r\n  CXX      tests/test_srcfd-test_srcfd.o\r\n  CXXLD    tests/test_srcfd\r\n  CXX      tests/test_monitor-test_monitor.o\r\n  CXXLD    tests/test_monitor\r\n  CXX      tests/test_router_mandatory-test_router_mandatory.o\r\n  CXXLD    tests/test_router_mandatory\r\n  CXX      tests/test_router_mandatory_hwm-test_router_mandatory_hwm.o\r\n  CXXLD    tests/test_router_mandatory_hwm\r\n  CXX      tests/test_router_handover-test_router_handover.o\r\n  CXXLD    tests/test_router_handover\r\n  CXX      tests/test_probe_router-test_probe_router.o\r\n  CXXLD    tests/test_probe_router\r\n  CXX      tests/test_stream-test_stream.o\r\n  CXXLD    tests/test_stream\r\n  CXX      tests/test_stream_empty-test_stream_empty.o\r\n  CXXLD    tests/test_stream_empty\r\n  CXX      tests/test_stream_disconnect-test_stream_disconnect.o\r\n  CXXLD    tests/test_stream_disconnect\r\n  CXX      tests/test_stream_timeout-test_stream_timeout.o\r\n  CXXLD    tests/test_stream_timeout\r\n  CXX      tests/test_disconnect_inproc-test_disconnect_inproc.o\r\n  CXXLD    tests/test_disconnect_inproc\r\n  CXX      tests/test_unbind_wildcard-test_unbind_wildcard.o\r\n  CXXLD    tests/test_unbind_wildcard\r\n  CXX      tests/test_ctx_options-test_ctx_options.o\r\n  CXXLD    tests/test_ctx_options\r\n  CXX      tests/test_ctx_destroy-test_ctx_destroy.o\r\n  CXXLD    tests/test_ctx_destroy\r\n  CXX      tests/test_security_no_zap_handler-test_security_no_zap_handler.o\r\n  CXXLD    tests/test_security_no_zap_handler\r\n  CXX      tests/test_security_null-test_security_null.o\r\n  CXXLD    tests/test_security_null\r\n  CXX      tests/test_security_plain-test_security_plain.o\r\n  CXXLD    tests/test_security_plain\r\n  CXX      tests/test_security_zap-test_security_zap.o\r\n  CXXLD    tests/test_security_zap\r\n  CXX      tests/test_iov-test_iov.o\r\n  CXXLD    tests/test_iov\r\n  CXX      tests/test_spec_req-test_spec_req.o\r\n  CXXLD    tests/test_spec_req\r\n  CXX      tests/test_spec_rep-test_spec_rep.o\r\n  CXXLD    tests/test_spec_rep\r\n  CXX      tests/test_spec_dealer-test_spec_dealer.o\r\n  CXXLD    tests/test_spec_dealer\r\n  CXX      tests/test_spec_router-test_spec_router.o\r\n  CXXLD    tests/test_spec_router\r\n  CXX      tests/test_spec_pushpull-test_spec_pushpull.o\r\n  CXXLD    tests/test_spec_pushpull\r\n  CXX      tests/test_req_correlate-test_req_correlate.o\r\n  CXXLD    tests/test_req_correlate\r\n  CXX      tests/test_req_relaxed-test_req_relaxed.o\r\n  CXXLD    tests/test_req_relaxed\r\n  CXX      tests/test_conflate-test_conflate.o\r\n  CXXLD    tests/test_conflate\r\n  CXX      tests/test_inproc_connect-test_inproc_connect.o\r\n  CXXLD    tests/test_inproc_connect\r\n  CXX      tests/test_issue_566-test_issue_566.o\r\n  CXXLD    tests/test_issue_566\r\n  CXX      tests/test_proxy-test_proxy.o\r\n  CXXLD    tests/test_proxy\r\n  CXX      tests/test_proxy_hwm-test_proxy_hwm.o\r\n  CXXLD    tests/test_proxy_hwm\r\n  CXX      tests/test_proxy_single_socket-test_proxy_single_socket.o\r\n  CXXLD    tests/test_proxy_single_socket\r\n  CXX      tests/test_proxy_terminate-test_proxy_terminate.o\r\n  CXXLD    tests/test_proxy_terminate\r\n  CXX      tests/test_getsockopt_memset-test_getsockopt_memset.o\r\n  CXXLD    tests/test_getsockopt_memset\r\n  CXX      tests/test_setsockopt-test_setsockopt.o\r\n  CXXLD    tests/test_setsockopt\r\n  CXX      tests/test_diffserv-test_diffserv.o\r\n  CXXLD    tests/test_diffserv\r\n  CXX      tests/test_connect_rid-test_connect_rid.o\r\n  CXXLD    tests/test_connect_rid\r\n  CXX      tests/test_bind_src_address-test_bind_src_address.o\r\n  CXXLD    tests/test_bind_src_address\r\n  CXX      tests/test_metadata-test_metadata.o\r\n  CXXLD    tests/test_metadata\r\n  CXX      tests/test_capabilities-test_capabilities.o\r\n  CXXLD    tests/test_capabilities\r\n  CXX      tests/test_xpub_nodrop-test_xpub_nodrop.o\r\n  CXXLD    tests/test_xpub_nodrop\r\n  CXX      tests/test_xpub_manual-test_xpub_manual.o\r\n  CXXLD    tests/test_xpub_manual\r\n  CXX      tests/test_xpub_welcome_msg-test_xpub_welcome_msg.o\r\n  CXXLD    tests/test_xpub_welcome_msg\r\n  CXX      tests/test_xpub_verbose-test_xpub_verbose.o\r\n  CXXLD    tests/test_xpub_verbose\r\n  CXX      tests/test_atomics-test_atomics.o\r\n  CXXLD    tests/test_atomics\r\n  CXX      tests/test_sockopt_hwm-test_sockopt_hwm.o\r\n  CXXLD    tests/test_sockopt_hwm\r\n  CXX      tests/test_heartbeats-test_heartbeats.o\r\n  CXXLD    tests/test_heartbeats\r\n  CXX      tests/test_stream_exceeds_buffer-test_stream_exceeds_buffer.o\r\n  CXXLD    tests/test_stream_exceeds_buffer\r\n  CXX      tests/test_pub_invert_matching-test_pub_invert_matching.o\r\n  CXXLD    tests/test_pub_invert_matching\r\n  CXX      tests/test_base85-test_base85.o\r\n  CXXLD    tests/test_base85\r\n  CXX      tests/test_bind_after_connect_tcp-test_bind_after_connect_tcp.o\r\n  CXXLD    tests/test_bind_after_connect_tcp\r\n  CXX      tests/test_sodium-test_sodium.o\r\n  CXXLD    tests/test_sodium\r\n  CXX      tests/test_reconnect_ivl-test_reconnect_ivl.o\r\n  CXXLD    tests/test_reconnect_ivl\r\n  CXX      tests/test_mock_pub_sub-test_mock_pub_sub.o\r\n  CXXLD    tests/test_mock_pub_sub\r\n  CXX      tests/test_socket_null-test_socket_null.o\r\n  CXXLD    tests/test_socket_null\r\n  CXX      tests/test_security_curve-test_security_curve.o\r\n  CXX      src/tests_test_security_curve-clock.o\r\n  CXX      src/tests_test_security_curve-random.o\r\n  CXX      src/tests_test_security_curve-err.o\r\n  CXXLD    tests/test_security_curve\r\n  CXX      tests/test_ws_transport-test_ws_transport.o\r\n  CXXLD    tests/test_ws_transport\r\n  CXX      tests/test_shutdown_stress-test_shutdown_stress.o\r\n  CXXLD    tests/test_shutdown_stress\r\n  CXX      tests/test_ipc_wildcard-test_ipc_wildcard.o\r\n  CXXLD    tests/test_ipc_wildcard\r\n  CXX      tests/test_pair_ipc-test_pair_ipc.o\r\n  CXXLD    tests/test_pair_ipc\r\n  CXX      tests/test_rebind_ipc-test_rebind_ipc.o\r\n  CXXLD    tests/test_rebind_ipc\r\n  CXX      tests/test_reqrep_ipc-test_reqrep_ipc.o\r\n  CXXLD    tests/test_reqrep_ipc\r\n  CXX      tests/test_use_fd-test_use_fd.o\r\n  CXXLD    tests/test_use_fd\r\n  CXX      tests/test_zmq_poll_fd-test_zmq_poll_fd.o\r\n  CXXLD    tests/test_zmq_poll_fd\r\n  CXX      tests/test_timeo-test_timeo.o\r\n  CXXLD    tests/test_timeo\r\n  CXX      tests/test_filter_ipc-test_filter_ipc.o\r\n  CXXLD    tests/test_filter_ipc\r\n  CXX      tests/test_poller-test_poller.o\r\n  CXXLD    tests/test_poller\r\n  CXX      tests/test_client_server-test_client_server.o\r\n  CXXLD    tests/test_client_server\r\n  CXX      tests/test_thread_safe-test_thread_safe.o\r\n  CXXLD    tests/test_thread_safe\r\n  CXX      tests/test_timers-test_timers.o\r\n  CXXLD    tests/test_timers\r\n  CXX      tests/test_radio_dish-test_radio_dish.o\r\n  CXXLD    tests/test_radio_dish\r\n  CXX      tests/test_scatter_gather-test_scatter_gather.o\r\n  CXXLD    tests/test_scatter_gather\r\n  CXX      tests/test_dgram-test_dgram.o\r\n  CXXLD    tests/test_dgram\r\n  CXX      tests/test_app_meta-test_app_meta.o\r\n  CXXLD    tests/test_app_meta\r\n  CXX      tests/test_xpub_manual_last_value-test_xpub_manual_last_value.o\r\n  CXXLD    tests/test_xpub_manual_last_value\r\n  CXX      tests/test_router_notify-test_router_notify.o\r\n  CXXLD    tests/test_router_notify\r\n  CXX      unittests/unittest_poller-unittest_poller.o\r\n  CXXLD    unittests/unittest_poller\r\n  CXX      unittests/unittest_ypipe-unittest_ypipe.o\r\n  CXXLD    unittests/unittest_ypipe\r\n  CXX      unittests/unittest_mtrie-unittest_mtrie.o\r\n  CXXLD    unittests/unittest_mtrie\r\n  CXX      unittests/unittest_ip_resolver-unittest_ip_resolver.o\r\n  CXXLD    unittests/unittest_ip_resolver\r\n  CXX      unittests/unittest_udp_address-unittest_udp_address.o\r\n  CXXLD    unittests/unittest_udp_address\r\n  CXX      unittests/unittest_radix_tree-unittest_radix_tree.o\r\n  CXXLD    unittests/unittest_radix_tree\r\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  check-TESTS\r\nPASS: tests/test_ancillaries\r\nFAIL: tests/test_system\r\nPASS: tests/test_pair_inproc\r\nPASS: tests/test_pair_tcp\r\nPASS: tests/test_reqrep_inproc\r\nPASS: tests/test_reqrep_tcp\r\nPASS: tests/test_hwm\r\nPASS: tests/test_hwm_pubsub\r\nPASS: tests/test_reqrep_device\r\nPASS: tests/test_sub_forward\r\nPASS: tests/test_invalid_rep\r\nPASS: tests/test_msg_flags\r\nPASS: tests/test_msg_ffn\r\nPASS: tests/test_connect_resolve\r\nPASS: tests/test_immediate\r\nPASS: tests/test_last_endpoint\r\nPASS: tests/test_term_endpoint\r\nPASS: tests/test_srcfd\r\nPASS: tests/test_monitor\r\nPASS: tests/test_router_mandatory\r\nPASS: tests/test_router_mandatory_hwm\r\nPASS: tests/test_router_handover\r\nPASS: tests/test_probe_router\r\nPASS: tests/test_stream\r\nPASS: tests/test_stream_empty\r\nPASS: tests/test_stream_disconnect\r\nPASS: tests/test_stream_timeout\r\nPASS: tests/test_disconnect_inproc\r\nPASS: tests/test_unbind_wildcard\r\nPASS: tests/test_ctx_options\r\nPASS: tests/test_ctx_destroy\r\nPASS: tests/test_security_no_zap_handler\r\nPASS: tests/test_security_null\r\nPASS: tests/test_security_plain\r\nPASS: tests/test_security_zap\r\nPASS: tests/test_iov\r\nPASS: tests/test_spec_req\r\nPASS: tests/test_spec_rep\r\nPASS: tests/test_spec_dealer\r\nPASS: tests/test_spec_router\r\nPASS: tests/test_spec_pushpull\r\nPASS: tests/test_req_correlate\r\nPASS: tests/test_req_relaxed\r\nPASS: tests/test_conflate\r\nPASS: tests/test_inproc_connect\r\nPASS: tests/test_issue_566\r\nPASS: tests/test_proxy\r\nPASS: tests/test_proxy_hwm\r\nPASS: tests/test_proxy_single_socket\r\nPASS: tests/test_proxy_terminate\r\nPASS: tests/test_getsockopt_memset\r\nPASS: tests/test_setsockopt\r\nPASS: tests/test_diffserv\r\nPASS: tests/test_connect_rid\r\nPASS: tests/test_bind_src_address\r\nPASS: tests/test_metadata\r\nPASS: tests/test_capabilities\r\nPASS: tests/test_xpub_nodrop\r\nPASS: tests/test_xpub_manual\r\nPASS: tests/test_xpub_welcome_msg\r\nPASS: tests/test_xpub_verbose\r\nPASS: tests/test_atomics\r\nPASS: tests/test_sockopt_hwm\r\nPASS: tests/test_heartbeats\r\nPASS: tests/test_stream_exceeds_buffer\r\nPASS: tests/test_pub_invert_matching\r\nPASS: tests/test_base85\r\nPASS: tests/test_bind_after_connect_tcp\r\nPASS: tests/test_sodium\r\nPASS: tests/test_reconnect_ivl\r\nPASS: tests/test_mock_pub_sub\r\nPASS: tests/test_socket_null\r\nPASS: tests/test_security_curve\r\nPASS: tests/test_ws_transport\r\nFAIL: tests/test_shutdown_stress\r\nPASS: tests/test_ipc_wildcard\r\nPASS: tests/test_pair_ipc\r\nPASS: tests/test_rebind_ipc\r\nPASS: tests/test_reqrep_ipc\r\nPASS: tests/test_use_fd\r\nPASS: tests/test_zmq_poll_fd\r\nPASS: tests/test_timeo\r\nPASS: tests/test_filter_ipc\r\nPASS: tests/test_poller\r\nPASS: tests/test_client_server\r\nPASS: tests/test_thread_safe\r\nPASS: tests/test_timers\r\nPASS: tests/test_radio_dish\r\nPASS: tests/test_scatter_gather\r\nPASS: tests/test_dgram\r\nPASS: tests/test_app_meta\r\nPASS: tests/test_xpub_manual_last_value\r\nPASS: tests/test_router_notify\r\nPASS: unittests/unittest_poller\r\nPASS: unittests/unittest_ypipe\r\nPASS: unittests/unittest_mtrie\r\nPASS: unittests/unittest_ip_resolver\r\nPASS: unittests/unittest_udp_address\r\nPASS: unittests/unittest_radix_tree\r\n============================================================================\r\nTestsuite summary for zeromq 4.3.3\r\n============================================================================\r\n# TOTAL: 99\r\n# PASS:  97\r\n# SKIP:  0\r\n# XFAIL: 0\r\n# FAIL:  2\r\n# XPASS: 0\r\n# ERROR: 0\r\n============================================================================\r\nSee ./test-suite.log\r\nPlease report to zeromq-dev@lists.zeromq.org\r\n============================================================================\r\n\r\n```\r\n\r\n# What's the expected result?\r\n\r\nno error but there is an error", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3766", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3766/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3766/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3766/events", "html_url": "https://github.com/zeromq/libzmq/issues/3766", "id": 542358336, "node_id": "MDU6SXNzdWU1NDIzNTgzMzY=", "number": 3766, "title": "Replace uses of strtok by strtok_r", "user": {"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 58140780, "node_id": "MDU6TGFiZWw1ODE0MDc4MA==", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Critical", "name": "Critical", "color": "e11d21", "default": false, "description": null}, {"id": 675580220, "node_id": "MDU6TGFiZWw2NzU1ODAyMjA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Symptom%20(Crash/Race/Undefined%20behavior)", "name": "Symptom (Crash/Race/Undefined behavior)", "color": "5319e7", "default": false, "description": null}, {"id": 1451717702, "node_id": "MDU6TGFiZWwxNDUxNzE3NzAy", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Transport%20(WS)", "name": "Transport (WS)", "color": "4aaf24", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-25T15:40:31Z", "updated_at": "2020-01-23T11:37:32Z", "closed_at": "2020-01-23T11:37:32Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`strtok` is not thread-safe. The uses of `strtok` in `src/ws_engine.cpp` must be replaced by `strtok_r`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3762", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3762/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3762/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3762/events", "html_url": "https://github.com/zeromq/libzmq/issues/3762", "id": 541360261, "node_id": "MDU6SXNzdWU1NDEzNjAyNjE=", "number": 3762, "title": "Cannot link msvc libzmq to g++ xeno project inside Eclipse", "user": {"login": "flok", "id": 37000563, "node_id": "MDQ6VXNlcjM3MDAwNTYz", "avatar_url": "https://avatars1.githubusercontent.com/u/37000563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flok", "html_url": "https://github.com/flok", "followers_url": "https://api.github.com/users/flok/followers", "following_url": "https://api.github.com/users/flok/following{/other_user}", "gists_url": "https://api.github.com/users/flok/gists{/gist_id}", "starred_url": "https://api.github.com/users/flok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flok/subscriptions", "organizations_url": "https://api.github.com/users/flok/orgs", "repos_url": "https://api.github.com/users/flok/repos", "events_url": "https://api.github.com/users/flok/events{/privacy}", "received_events_url": "https://api.github.com/users/flok/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 164697224, "node_id": "MDU6TGFiZWwxNjQ2OTcyMjQ=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Build/Compilation)", "name": "Area (Build/Compilation)", "color": "fbca04", "default": false, "description": null}, {"id": 359697670, "node_id": "MDU6TGFiZWwzNTk2OTc2NzA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(windows/msvc)", "name": "Platform (windows/msvc)", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-12-21T19:12:07Z", "updated_at": "2019-12-24T10:16:06Z", "closed_at": "2019-12-24T10:16:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nCannot link the msvc library to the g++ xenomai project\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 3e7995f7f73fed6bb1ed6ecfd3a440d5772e5457\r\n* OS: Windows 10 x64\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  create libzmq VS 2019 Solution with \"cmake ..\" inside build folder\r\n2. compile libzmq with VS 2019 \r\n3. include header inside Eclipse and add the libzmq.lib directory\r\n4. compiling xenomai gcc project fails with \"undefined reference to ..\" on all functions of libzmq\r\n\r\n\r\n# What's the expected result?\r\nlinking the library dynamically or static inside Eclipse \r\n\r\n\r\nI'm a beginner with this stuff, if other things are needed i will provide them as needed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3756", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3756/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3756/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3756/events", "html_url": "https://github.com/zeromq/libzmq/issues/3756", "id": 535093166, "node_id": "MDU6SXNzdWU1MzUwOTMxNjY=", "number": 3756, "title": "Assertion failed in signaler again", "user": {"login": "vojtech-frodl", "id": 58701312, "node_id": "MDQ6VXNlcjU4NzAxMzEy", "avatar_url": "https://avatars2.githubusercontent.com/u/58701312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vojtech-frodl", "html_url": "https://github.com/vojtech-frodl", "followers_url": "https://api.github.com/users/vojtech-frodl/followers", "following_url": "https://api.github.com/users/vojtech-frodl/following{/other_user}", "gists_url": "https://api.github.com/users/vojtech-frodl/gists{/gist_id}", "starred_url": "https://api.github.com/users/vojtech-frodl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vojtech-frodl/subscriptions", "organizations_url": "https://api.github.com/users/vojtech-frodl/orgs", "repos_url": "https://api.github.com/users/vojtech-frodl/repos", "events_url": "https://api.github.com/users/vojtech-frodl/events{/privacy}", "received_events_url": "https://api.github.com/users/vojtech-frodl/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 359697670, "node_id": "MDU6TGFiZWwzNTk2OTc2NzA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(windows/msvc)", "name": "Platform (windows/msvc)", "color": "bfd4f2", "default": false, "description": null}, {"id": 933443603, "node_id": "MDU6TGFiZWw5MzM0NDM2MDM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Regression", "name": "Regression", "color": "efb1ed", "default": false, "description": ""}, {"id": 675552804, "node_id": "MDU6TGFiZWw2NzU1NTI4MDQ=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Symptom%20(Assertion%20failure)", "name": "Symptom (Assertion failure)", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": {"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2019-12-09T18:03:32Z", "updated_at": "2020-05-08T12:05:21Z", "closed_at": "2019-12-10T18:41:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nI encountered the same issue as described in #2360 which was solved some time ago by commit bcf7577. This solution was reverted by commit 4f77cfa with a commit message \"Removed unreachable code paths\". Out of curiosity, I added the while loop again and observed that the issue disappeared. Can you please confirm that commit 4f77cfa does what was intended and doesn't cause regression?\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version: v4.3.2\r\n* OS: Windows 10 64-bit\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nThe assertion fails in proxy() with sockets A (router) and B (dealer). Socket B connects to a remote location. Socket A is bound to an inproc address and multiple threads connect to it and disconnect from it dynamically. All sockets are created in the thread which uses them.\r\nI noticed that you increase chances of the crash significantly if you first run a loop in a separate thread in which you create a new req socket, connect it to A, destroy the req socket and repeat. Let the thread run for a few seconds and then request some data from the remote location by some other req socket connected to A and the crash is virtually guaranteed.\r\n\r\n\r\n# What's the actual result?\r\n::send() returns SOCKET_ERROR causing the following assertion to fail: `zmq_assert (nbytes == sizeof (dummy));`\r\nCallstack:\r\n```\r\n[...]\r\nRaiseException()\tUnknown\r\nzmq::zmq_abort(const char * errmsg_) Line 90\tC++\r\nzmq::signaler_t::send() Line 224\tC++\r\nzmq::mailbox_t::send(const zmq::command_t & cmd_={...}) Line 67\tC++\r\nzmq::object_t::send_pipe_term_ack(zmq::pipe_t * destination_) Line 344\tC++\r\nzmq::pipe_t::process_delimiter() Line 499\tC++\r\nzmq::pipe_t::read(zmq::msg_t * msg_=0x00000214049f9980) Line 218\tC++\r\nzmq::fq_t::recvpipe(zmq::msg_t * msg_=0x00000214049f9980, zmq::pipe_t * * pipe_=0x0000004d41aff310) Line 98\tC++\r\nzmq::router_t::xhas_in() Line 383\tC++\r\nzmq::socket_base_t::getsockopt(int option_, void * optval_=0x0000004d41aff3b0, unsigned __int64 * optvallen_=0x0000004d41aff3d0) Line 457\tC++\r\nzmq_poll(zmq_pollitem_t * items_=0x0000004d41aff890, int nitems_, long timeout_=-1) Line 1033\tC++\r\nzmq::proxy(zmq::socket_base_t * frontend_=0x00000214049f93e0, zmq::socket_base_t * backend_=0x0000021379010d20, zmq::socket_base_t * capture_=0x0000000000000000, zmq::socket_base_t * control_=0x0000000000000000) Line 575\tC++\r\nzmq::proxy(zmq::socket_ref frontend={...}, zmq::socket_ref backend={...}, zmq::socket_ref capture={...}) Line 1541\tC++\r\n[...]\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3750", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3750/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3750/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3750/events", "html_url": "https://github.com/zeromq/libzmq/issues/3750", "id": 534099073, "node_id": "MDU6SXNzdWU1MzQwOTkwNzM=", "number": 3750, "title": "Router not receiving message from Dealer", "user": {"login": "Cjen1", "id": 11444677, "node_id": "MDQ6VXNlcjExNDQ0Njc3", "avatar_url": "https://avatars1.githubusercontent.com/u/11444677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cjen1", "html_url": "https://github.com/Cjen1", "followers_url": "https://api.github.com/users/Cjen1/followers", "following_url": "https://api.github.com/users/Cjen1/following{/other_user}", "gists_url": "https://api.github.com/users/Cjen1/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cjen1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cjen1/subscriptions", "organizations_url": "https://api.github.com/users/Cjen1/orgs", "repos_url": "https://api.github.com/users/Cjen1/repos", "events_url": "https://api.github.com/users/Cjen1/events{/privacy}", "received_events_url": "https://api.github.com/users/Cjen1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-06T15:58:26Z", "updated_at": "2019-12-09T19:56:47Z", "closed_at": "2019-12-09T19:56:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nThis is specifically in the implementation of `ocaml-zmq` that I've found this.\r\n\r\nI have a router bound to a port on loopback, and a dealer which connects to it.\r\n\r\nThe dealer sends the packet (I have a tcpdump which appears to show it correctly being sent), however the router never receives it.\r\n\r\nThe library uses the events library and when something should have arrived, `socket.getsocketopt(socket, ZMQ_EVENTS, &event, &event_size)` returns just ZMQ_POLLOUT.\r\n\r\n```\r\n CAMLprim value caml_zmq_get_events(value socket) {\r\n      CAMLparam1 (socket);\r\n      uint32_t event = 0;\r\n      size_t event_size = sizeof (event);\r\n      int result = zmq_getsockopt (CAML_ZMQ_Socket_val(socket),\r\n                                   ZMQ_EVENTS,\r\n                                   &event,\r\n                                   &event_size);\r\n      caml_zmq_raise_if(result == -1, \"zmq_getsockopt\");\r\n      printf(\"C: %x\", event);\r\n      int event_type = 0; /* No_event */\r\n      if (event & ZMQ_POLLIN) {\r\n          event_type = 1; /* Poll_in */\r\n          if (event & ZMQ_POLLOUT) {\r\n              event_type = 3; /* Poll_in_out */\r\n          }\r\n      } else if (event & ZMQ_POLLOUT) {\r\n          event_type = 2; /* Poll_out */\r\n      } else if (event & ZMQ_POLLERR) {\r\n          event_type = 4; /* Poll_error */\r\n      }\r\n      CAMLreturn (Val_int(event_type));\r\n  }\r\n```\r\n\r\nIn the above code, the function only has `event_type = 2`.\r\n\r\nAn additional point is that the fd for the router does not become readable during this, I understand that the fd should be edge detected, i.e. on becoming readable or becoming unreadable.\r\n\r\nIf a tcpdump of the communication would be beneficial let me know, mainly I'm looking for how to debug this.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: Ubuntu\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  Have a router socket established for a while ~10s.\r\n2. Connect to it via a dealer socket and send a message.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nSocket event doesn't update, and fd doesn't become readable.\r\n\r\n# What's the expected result?\r\nSocket event updates, and fd becomes readable.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3740", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3740/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3740/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3740/events", "html_url": "https://github.com/zeromq/libzmq/issues/3740", "id": 523524831, "node_id": "MDU6SXNzdWU1MjM1MjQ4MzE=", "number": 3740, "title": "libunity - No such file", "user": {"login": "DuMaM", "id": 9051964, "node_id": "MDQ6VXNlcjkwNTE5NjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9051964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DuMaM", "html_url": "https://github.com/DuMaM", "followers_url": "https://api.github.com/users/DuMaM/followers", "following_url": "https://api.github.com/users/DuMaM/following{/other_user}", "gists_url": "https://api.github.com/users/DuMaM/gists{/gist_id}", "starred_url": "https://api.github.com/users/DuMaM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DuMaM/subscriptions", "organizations_url": "https://api.github.com/users/DuMaM/orgs", "repos_url": "https://api.github.com/users/DuMaM/repos", "events_url": "https://api.github.com/users/DuMaM/events{/privacy}", "received_events_url": "https://api.github.com/users/DuMaM/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-15T15:12:07Z", "updated_at": "2019-11-15T16:38:44Z", "closed_at": "2019-11-15T16:38:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nEvery version of zeromq higher than 4.2.5 is unable to build, becuse of missing libunity.a. \r\n\r\nI investigated this problem a bit and found that this command in created makefile do nothing.\r\n```make\r\nexternal/unity/libunity.a: $(external_unity_libunity_a_OBJECTS) $(external_unity_libunity_a_DEPENDENCIES) $(EXTRA_external_unity_libunity_a_DEPENDENCIES) external/unity/$(am__dirstamp)\r\n\t$(AM_V_at)-rm -f external/unity/libunity.a\r\n\t$(AM_V_AR)$(external_unity_libunity_a_AR) external/unity/libunity.a $(external_unity_libunity_a_OBJECTS) $(external_unity_libunity_a_LIBADD)\r\n\t$(AM_V_at)$(RANLIB) external/unity/libunity.a\r\n```\r\nDry run\r\n``` make\r\nrm -f external/unity/libunity.a\r\necho \"  AR      \" external/unity/libunity.a;ar cru external/unity/libunity.a external/unity/unity.o \r\nranlib external/unity/libunity.a\r\n```\r\nI don't know why ar do not make output archive.\r\n\r\n# Environment\r\n* libzmq version (commit hash if unreleased): >= 4.2.5\r\n* OS: Ubuntu 18.04.3 LTS\r\n* gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0\r\n* g++ (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0\r\n\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n./autogen.sh  \r\n./configure\r\nmake VERBOSE=1\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n``` bash\r\nmake[1]: Leaving directory '/home/b.nowak2/test/mdm-remote-tests/external/zeromq/doc'\r\nmake[1]: Entering directory '/home/b.nowak2/test/mdm-remote-tests/external/zeromq'\r\n  CC       external/unity/unity.o\r\n  AR       external/unity/libunity.a\r\nChecking .\r\nranlib: 'external/unity/libunity.a': No such file\r\n```\r\n\r\n# What's the expected result?\r\nSuccessful build\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3733", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3733/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3733/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3733/events", "html_url": "https://github.com/zeromq/libzmq/issues/3733", "id": 520055399, "node_id": "MDU6SXNzdWU1MjAwNTUzOTk=", "number": 3733, "title": "Sending multipart messages from XSUB to XPUB", "user": {"login": "drolevar", "id": 14980349, "node_id": "MDQ6VXNlcjE0OTgwMzQ5", "avatar_url": "https://avatars1.githubusercontent.com/u/14980349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drolevar", "html_url": "https://github.com/drolevar", "followers_url": "https://api.github.com/users/drolevar/followers", "following_url": "https://api.github.com/users/drolevar/following{/other_user}", "gists_url": "https://api.github.com/users/drolevar/gists{/gist_id}", "starred_url": "https://api.github.com/users/drolevar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drolevar/subscriptions", "organizations_url": "https://api.github.com/users/drolevar/orgs", "repos_url": "https://api.github.com/users/drolevar/repos", "events_url": "https://api.github.com/users/drolevar/events{/privacy}", "received_events_url": "https://api.github.com/users/drolevar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-11-08T14:48:35Z", "updated_at": "2019-11-28T07:21:55Z", "closed_at": "2019-11-20T09:02:19Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue description\r\nConsider the following scenario: XSUB socket sends a multipart message to the XPUB socket.\r\nWhat should be the correct behavior:\r\n1. Any of the parts can be considered as a subscribe message (current behavior).\r\n2. No parts should be considered as a subscribe message.\r\n3. First part should be considered as a subscribe message.\r\n\r\nCurrent implementation is considering the first byte of each part as a potential subscribe/unsubscribe, which IMO makes use of multipart messages very cumbersome in this scenario.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): af86d93d5f9634c5f28664c667510b044f2a149c\r\n* OS: Ubuntu 19.10\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3732", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3732/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3732/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3732/events", "html_url": "https://github.com/zeromq/libzmq/issues/3732", "id": 519070849, "node_id": "MDU6SXNzdWU1MTkwNzA4NDk=", "number": 3732, "title": "How to build with DRAFT API with Homebrew on macOS?", "user": {"login": "kakyoism", "id": 485051, "node_id": "MDQ6VXNlcjQ4NTA1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/485051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kakyoism", "html_url": "https://github.com/kakyoism", "followers_url": "https://api.github.com/users/kakyoism/followers", "following_url": "https://api.github.com/users/kakyoism/following{/other_user}", "gists_url": "https://api.github.com/users/kakyoism/gists{/gist_id}", "starred_url": "https://api.github.com/users/kakyoism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kakyoism/subscriptions", "organizations_url": "https://api.github.com/users/kakyoism/orgs", "repos_url": "https://api.github.com/users/kakyoism/repos", "events_url": "https://api.github.com/users/kakyoism/events{/privacy}", "received_events_url": "https://api.github.com/users/kakyoism/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-07T06:34:57Z", "updated_at": "2019-11-07T10:36:15Z", "closed_at": "2019-11-07T10:36:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "With community help, I now can enable DRAFT API cppzmq/libzmq with vcpkg on Windows. But how do we enable this on macOS with Homebrew? Do we have special build switches like \r\n\r\n```\r\n--with-draft-api\r\n```\r\n\r\nor something like that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3730", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3730/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3730/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3730/events", "html_url": "https://github.com/zeromq/libzmq/issues/3730", "id": 517512489, "node_id": "MDU6SXNzdWU1MTc1MTI0ODk=", "number": 3730, "title": "router-dealer\uff0cserver No message received,", "user": {"login": "chengqian1521", "id": 19233012, "node_id": "MDQ6VXNlcjE5MjMzMDEy", "avatar_url": "https://avatars0.githubusercontent.com/u/19233012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chengqian1521", "html_url": "https://github.com/chengqian1521", "followers_url": "https://api.github.com/users/chengqian1521/followers", "following_url": "https://api.github.com/users/chengqian1521/following{/other_user}", "gists_url": "https://api.github.com/users/chengqian1521/gists{/gist_id}", "starred_url": "https://api.github.com/users/chengqian1521/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chengqian1521/subscriptions", "organizations_url": "https://api.github.com/users/chengqian1521/orgs", "repos_url": "https://api.github.com/users/chengqian1521/repos", "events_url": "https://api.github.com/users/chengqian1521/events{/privacy}", "received_events_url": "https://api.github.com/users/chengqian1521/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 361117360, "node_id": "MDU6TGFiZWwzNjExMTczNjA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Need%20More%20Information", "name": "Need More Information", "color": "e99695", "default": false, "description": null}, {"id": 675554812, "node_id": "MDU6TGFiZWw2NzU1NTQ4MTI=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Symptom%20(Unexpected%20behavior)", "name": "Symptom (Unexpected behavior)", "color": "d4c5f9", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-05T02:28:32Z", "updated_at": "2019-12-23T11:45:36Z", "closed_at": "2019-12-23T11:45:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nIn router-dealer pattern,client is dealer, server is router.\r\nclient send tick message to server.At first it was normal\r\nAn hour later server no message received.\r\nRestarting the client has no effect.\r\nBut I changed client router_id,server can recv message.\r\nuse old router id.  server no message  received.\r\nEventually, the server restarted and returned to normal\r\nwhat's the reason.\r\nThe problem recurred only once,Never to be seen again after restart sever\r\n\r\n\r\n# Environment\r\nserver: centos7.6/go\r\nclient: windows server 2016/c++\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: \r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3725", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3725/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3725/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3725/events", "html_url": "https://github.com/zeromq/libzmq/issues/3725", "id": 514691921, "node_id": "MDU6SXNzdWU1MTQ2OTE5MjE=", "number": 3725, "title": "running test_pair_tcp_cap_net_admin without sudo access breaks terminal session", "user": {"login": "bill-torpey", "id": 11855062, "node_id": "MDQ6VXNlcjExODU1MDYy", "avatar_url": "https://avatars1.githubusercontent.com/u/11855062?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bill-torpey", "html_url": "https://github.com/bill-torpey", "followers_url": "https://api.github.com/users/bill-torpey/followers", "following_url": "https://api.github.com/users/bill-torpey/following{/other_user}", "gists_url": "https://api.github.com/users/bill-torpey/gists{/gist_id}", "starred_url": "https://api.github.com/users/bill-torpey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bill-torpey/subscriptions", "organizations_url": "https://api.github.com/users/bill-torpey/orgs", "repos_url": "https://api.github.com/users/bill-torpey/repos", "events_url": "https://api.github.com/users/bill-torpey/events{/privacy}", "received_events_url": "https://api.github.com/users/bill-torpey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-30T13:59:05Z", "updated_at": "2019-11-02T08:24:35Z", "closed_at": "2019-11-02T08:24:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue description\r\n\r\nrunning test_pair_tcp_cap_net_admin without sudo access breaks terminal session\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): e5a7f2eb568b5655699a16ae9867fe656b42b533\r\n* OS: CentOS 7\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  run \"make test\" from a user w/o sudo access\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\ntest_pair_tcp_cap_net_admin times out, and terminal session is unusable\r\n\r\n\r\n# What's the expected result?\r\nDon't run test if user doesn't have sudo \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3719", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3719/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3719/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3719/events", "html_url": "https://github.com/zeromq/libzmq/issues/3719", "id": 511908868, "node_id": "MDU6SXNzdWU1MTE5MDg4Njg=", "number": 3719, "title": "Can't build libzmq with msys2", "user": {"login": "Dahaka934", "id": 13214645, "node_id": "MDQ6VXNlcjEzMjE0NjQ1", "avatar_url": "https://avatars2.githubusercontent.com/u/13214645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dahaka934", "html_url": "https://github.com/Dahaka934", "followers_url": "https://api.github.com/users/Dahaka934/followers", "following_url": "https://api.github.com/users/Dahaka934/following{/other_user}", "gists_url": "https://api.github.com/users/Dahaka934/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dahaka934/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dahaka934/subscriptions", "organizations_url": "https://api.github.com/users/Dahaka934/orgs", "repos_url": "https://api.github.com/users/Dahaka934/repos", "events_url": "https://api.github.com/users/Dahaka934/events{/privacy}", "received_events_url": "https://api.github.com/users/Dahaka934/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-24T12:22:49Z", "updated_at": "2019-10-25T08:29:10Z", "closed_at": "2019-10-25T08:29:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nI'm trying to build libzmq with draft api in msys2 environment (mingw64).\r\nI use cmake, but I get an error: \"Could not autodetect polling method\". Whats maybe wrong?\r\n\r\nAlso, I tried using autogen.sh and configure. But make install is also crashes.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): last\r\n* OS: windows 7\r\n\r\n# Steps to reproduce the issue\r\n```\r\ncd build\r\ncmake ..\r\nmake -j4 install\r\n```\r\n\r\n# Result of cmake -> make install\r\n```\r\n-- Looking for poll\r\nSystem is unknown to cmake, create:\r\nPlatform/MINGW64_NT-6.1-7601 to use this system, please send your config file to cmake@www.cmake.org so it can be added to cmake\r\n-- Looking for poll - not found\r\n-- Looking for select\r\nSystem is unknown to cmake, create:\r\nPlatform/MINGW64_NT-6.1-7601 to use this system, please send your config file to cmake@www.cmake.org so it can be added to cmake\r\n-- Looking for select - not found\r\nCMake Error at CMakeLists.txt:249 (message):\r\n  Could not autodetect polling method\r\n```\r\n\r\n# Result of autogen.sh -> configure -> make install\r\n```\r\n  CXX      tests/libtestutil_a-testutil_monitoring.o\r\ntests/testutil_monitoring.cpp: In function 'void expect_monitor_event_v2(void*, int64_t, const char*, const char*)':\r\ntests/testutil_monitoring.cpp:330:52: error: unknown conversion type character 'l' in format [-Werror=format=]\r\n  330 |                          \"Expected monitor event %llx, but received %llx\\n\",\r\n      |                                                    ^\r\ntests/testutil_monitoring.cpp:330:71: error: unknown conversion type character 'l' in format [-Werror=format=]\r\n  330 |                          \"Expected monitor event %llx, but received %llx\\n\",\r\n      |                                                                       ^\r\ntests/testutil_monitoring.cpp:330:26: error: too many arguments for format [-Werror=format-extra-args]\r\n  330 |                          \"Expected monitor event %llx, but received %llx\\n\",\r\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ntests/testutil_monitoring.cpp:330:52: error: unknown conversion type character 'l' in format [-Werror=format=]\r\n  330 |                          \"Expected monitor event %llx, but received %llx\\n\",\r\n      |                                                    ^\r\ntests/testutil_monitoring.cpp:330:71: error: unknown conversion type character 'l' in format [-Werror=format=]\r\n  330 |                          \"Expected monitor event %llx, but received %llx\\n\",\r\n      |                                                                       ^\r\ntests/testutil_monitoring.cpp:330:26: error: too many arguments for format [-Werror=format-extra-args]\r\n  330 |                          \"Expected monitor event %llx, but received %llx\\n\",\r\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3718", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3718/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3718/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3718/events", "html_url": "https://github.com/zeromq/libzmq/issues/3718", "id": 509573772, "node_id": "MDU6SXNzdWU1MDk1NzM3NzI=", "number": 3718, "title": "Deb package for Ubuntu 19.10 doesn't exist in the repository.", "user": {"login": "mortymacs", "id": 1261448, "node_id": "MDQ6VXNlcjEyNjE0NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1261448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mortymacs", "html_url": "https://github.com/mortymacs", "followers_url": "https://api.github.com/users/mortymacs/followers", "following_url": "https://api.github.com/users/mortymacs/following{/other_user}", "gists_url": "https://api.github.com/users/mortymacs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mortymacs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mortymacs/subscriptions", "organizations_url": "https://api.github.com/users/mortymacs/orgs", "repos_url": "https://api.github.com/users/mortymacs/repos", "events_url": "https://api.github.com/users/mortymacs/events{/privacy}", "received_events_url": "https://api.github.com/users/mortymacs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-20T10:12:59Z", "updated_at": "2019-10-20T10:23:35Z", "closed_at": "2019-10-20T10:23:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nDeb package for Ubuntu 19.10 doesn't exist in the repository:\r\nhttp://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/xUbuntu_19.10/\r\n\r\nAlso the key: https://download.opensuse.org/repositories/network:messaging:zeromq:release-stable/xUbuntu_19.10/Release.key\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: Linux/Ubuntu\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nResource is no longer available!\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3712", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3712/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3712/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3712/events", "html_url": "https://github.com/zeromq/libzmq/issues/3712", "id": 506568300, "node_id": "MDU6SXNzdWU1MDY1NjgzMDA=", "number": 3712, "title": "_retired vector in epoll.cpp is not thread-safe", "user": {"login": "louishust", "id": 3975139, "node_id": "MDQ6VXNlcjM5NzUxMzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3975139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/louishust", "html_url": "https://github.com/louishust", "followers_url": "https://api.github.com/users/louishust/followers", "following_url": "https://api.github.com/users/louishust/following{/other_user}", "gists_url": "https://api.github.com/users/louishust/gists{/gist_id}", "starred_url": "https://api.github.com/users/louishust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/louishust/subscriptions", "organizations_url": "https://api.github.com/users/louishust/orgs", "repos_url": "https://api.github.com/users/louishust/repos", "events_url": "https://api.github.com/users/louishust/events{/privacy}", "received_events_url": "https://api.github.com/users/louishust/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-14T10:28:01Z", "updated_at": "2019-10-15T00:59:10Z", "closed_at": "2019-10-15T00:59:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\n`_retired` variable in `src/epoll.cpp` is removed in `loop`, and user thread can call `rm_fd` to modify the `_retired` vector, so the `_retired` vector is not thread-safe.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: \r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3710", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3710/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3710/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3710/events", "html_url": "https://github.com/zeromq/libzmq/issues/3710", "id": 506187179, "node_id": "MDU6SXNzdWU1MDYxODcxNzk=", "number": 3710, "title": "Fails to link to libzmq.a statically on CentOS 7 (undefined reference to `ceil')", "user": {"login": "yan12125", "id": 1937689, "node_id": "MDQ6VXNlcjE5Mzc2ODk=", "avatar_url": "https://avatars3.githubusercontent.com/u/1937689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yan12125", "html_url": "https://github.com/yan12125", "followers_url": "https://api.github.com/users/yan12125/followers", "following_url": "https://api.github.com/users/yan12125/following{/other_user}", "gists_url": "https://api.github.com/users/yan12125/gists{/gist_id}", "starred_url": "https://api.github.com/users/yan12125/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yan12125/subscriptions", "organizations_url": "https://api.github.com/users/yan12125/orgs", "repos_url": "https://api.github.com/users/yan12125/repos", "events_url": "https://api.github.com/users/yan12125/events{/privacy}", "received_events_url": "https://api.github.com/users/yan12125/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-10-12T13:29:00Z", "updated_at": "2019-10-12T14:47:33Z", "closed_at": "2019-10-12T14:47:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nOn CentOS 7, I cannot link my application statically to `libzmq.a`. There is an error ```undefined reference to `ceil'```. Looks like the `libzmq.pc` file is missing a `-lm` entry.\r\n\r\nAs a side note, I can't reproduce the issue on another Arch Linux machine. Maybe it's an issue in older GCC. Anyway adding `-lm` should bring no harm.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): both 4.3.2 and the current git master (96bc59a6ceb4434a982f6274ad5e5039642258dc)\r\n* OS: CentOS 7\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\nHere I use a Docker-based approach in hope that developers can easily reproduce the issue. That is also how my application deploys.\r\n\r\n1.  Create an empty folder and place two files `Dockerfile` and `zmq-test.c`\r\n```\r\n# Dockerfile\r\nFROM centos:7\r\n\r\nCOPY zmq-test.c /\r\nRUN yum -y update && yum -y install gcc-c++ make git libtool glibc-static libstdc++-static\r\nRUN git clone https://github.com/zeromq/libzmq/\r\nRUN cd libzmq && ./autogen.sh && \\\r\n    ./configure --disable-shared --enable-static --without-libsodium --disable-libunwind &&make && make install\r\nRUN gcc -static /zmq-test.c `PKG_CONFIG_LIBDIR=/usr/local/lib/pkgconfig pkg-config --cflags --libs --static libzmq`\r\n```\r\n\r\n```\r\n/* zmq-test.c */\r\n#include <stdio.h>\r\n#include <zmq.h>\r\n\r\nint main() {\r\n    int major, minor, patch;\r\n    zmq_version(&major, &minor, &patch);\r\n    printf (\"Current \u00d8MQ version is %d.%d.%d\\n\", major, minor, patch);\r\n    return 0;\r\n}\r\n```\r\n\r\n2. Run `docker build -t zmq-test .`\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nThe last step fails:\r\n```\r\nStep 6/6 : RUN gcc -static /zmq-test.c `PKG_CONFIG_LIBDIR=/usr/local/lib/pkgconfig pkg-config --cflags --libs --static libzmq`   \r\n ---> Running in df08a79732d1                                                                                                    \r\n/usr/local/lib/libzmq.a(src_libzmq_la-ipc_listener.o): In function `zmq::ipc_listener_t::filter(int)':                           \r\n/libzmq/src/ipc_listener.cpp:307: warning: Using 'getgrgid' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking                                                                                    \r\n/libzmq/src/ipc_listener.cpp:302: warning: Using 'getpwuid' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking                                                                                    \r\n/usr/local/lib/libzmq.a(src_libzmq_la-ip_resolver.o): In function `zmq::ip_resolver_t::do_getaddrinfo(char const*, char const*, addrinfo const*, addrinfo**)':                                                                                                    \r\n/libzmq/src/ip_resolver.cpp:717: warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking                                                                                  \r\n/usr/local/lib/libzmq.a(src_libzmq_la-decoder_allocators.o): In function `zmq::shared_message_memory_allocator::shared_message_memory_allocator(unsigned long)':\r\n/libzmq/src/decoder_allocators.cpp:45: undefined reference to `ceil'\r\ncollect2: error: ld returned 1 exit status\r\nThe command '/bin/sh -c gcc -static /zmq-test.c `PKG_CONFIG_LIBDIR=/usr/local/lib/pkgconfig pkg-config --cflags --libs --static libzmq`' returned a non-zero code: 1\r\n```\r\n\r\n# What's the expected result?\r\n\r\nAll steps run fine.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3709", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3709/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3709/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3709/events", "html_url": "https://github.com/zeromq/libzmq/issues/3709", "id": 505364043, "node_id": "MDU6SXNzdWU1MDUzNjQwNDM=", "number": 3709, "title": "Error importing library in cmake", "user": {"login": "gummif", "id": 7014479, "node_id": "MDQ6VXNlcjcwMTQ0Nzk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7014479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gummif", "html_url": "https://github.com/gummif", "followers_url": "https://api.github.com/users/gummif/followers", "following_url": "https://api.github.com/users/gummif/following{/other_user}", "gists_url": "https://api.github.com/users/gummif/gists{/gist_id}", "starred_url": "https://api.github.com/users/gummif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gummif/subscriptions", "organizations_url": "https://api.github.com/users/gummif/orgs", "repos_url": "https://api.github.com/users/gummif/repos", "events_url": "https://api.github.com/users/gummif/events{/privacy}", "received_events_url": "https://api.github.com/users/gummif/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-10-10T15:57:12Z", "updated_at": "2020-04-17T08:36:39Z", "closed_at": "2019-10-12T20:02:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "\r\n# Issue description\r\nWith shared (excplitly ON via conan) target enabled there is an error about `libzmq-static` missing from `ZeroMQConfig.cmake` when using `find_package(ZeroMQ REQUIRED)`.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.1\r\n* OS: Linux\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1. Install, with shared enabled, \r\n2. call `find_package(ZeroMQ REQUIRED)` from another cmake project.\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n```\r\nCMake Error at /usr/local/share/cmake/ZeroMQ/ZeroMQConfig.cmake:48 (get_target_property):\r\n  get_target_property() called with non-existent target \"libzmq-static\".\r\n```\r\n\r\n# What's the expected result?\r\n\r\nThe config file should not contain a reference to the static lib.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3699", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3699/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3699/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3699/events", "html_url": "https://github.com/zeromq/libzmq/issues/3699", "id": 501944616, "node_id": "MDU6SXNzdWU1MDE5NDQ2MTY=", "number": 3699, "title": "Socket option: conflate on XPUB socket", "user": {"login": "TsurHerman", "id": 3405405, "node_id": "MDQ6VXNlcjM0MDU0MDU=", "avatar_url": "https://avatars3.githubusercontent.com/u/3405405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TsurHerman", "html_url": "https://github.com/TsurHerman", "followers_url": "https://api.github.com/users/TsurHerman/followers", "following_url": "https://api.github.com/users/TsurHerman/following{/other_user}", "gists_url": "https://api.github.com/users/TsurHerman/gists{/gist_id}", "starred_url": "https://api.github.com/users/TsurHerman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TsurHerman/subscriptions", "organizations_url": "https://api.github.com/users/TsurHerman/orgs", "repos_url": "https://api.github.com/users/TsurHerman/repos", "events_url": "https://api.github.com/users/TsurHerman/events{/privacy}", "received_events_url": "https://api.github.com/users/TsurHerman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-03T09:11:19Z", "updated_at": "2019-10-03T09:20:15Z", "closed_at": "2019-10-03T09:20:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "It is unclear from the documentation if XPUB socket supports the conflate option.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3697", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3697/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3697/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3697/events", "html_url": "https://github.com/zeromq/libzmq/issues/3697", "id": 501555605, "node_id": "MDU6SXNzdWU1MDE1NTU2MDU=", "number": 3697, "title": "ZMQ 4.1.4: ZMQ_ROUTER doesn't talk to ZMQ_REP", "user": {"login": "jarni-ua", "id": 11760494, "node_id": "MDQ6VXNlcjExNzYwNDk0", "avatar_url": "https://avatars3.githubusercontent.com/u/11760494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jarni-ua", "html_url": "https://github.com/jarni-ua", "followers_url": "https://api.github.com/users/jarni-ua/followers", "following_url": "https://api.github.com/users/jarni-ua/following{/other_user}", "gists_url": "https://api.github.com/users/jarni-ua/gists{/gist_id}", "starred_url": "https://api.github.com/users/jarni-ua/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jarni-ua/subscriptions", "organizations_url": "https://api.github.com/users/jarni-ua/orgs", "repos_url": "https://api.github.com/users/jarni-ua/repos", "events_url": "https://api.github.com/users/jarni-ua/events{/privacy}", "received_events_url": "https://api.github.com/users/jarni-ua/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-02T15:15:23Z", "updated_at": "2019-10-18T10:13:50Z", "closed_at": "2019-10-18T10:13:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nAfter upgrade from ZMQ 2.1.10 to ZMQ 4.1.4 zmq related unit tests failed. The reason is somehow related to broken communication (handshake?) between ZMQ_ROUTER socket (client) and ZMQ_REP socket (server). The sockets, at least according to monitor, disconnect right after connection. But there are no errors reported.\r\n\r\nSame code (with adaptation to old interface) works as intended on CentOS 6 machine with ZMQ 2.1.10.\r\n\r\n# Environment\r\n* libzmq version 4.1.4\r\n* OS: CentOS 7\r\n* g++: 4.8.5\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nServer test code:\r\n `//\r\n//  Hello World server in C++\r\n//  Binds REP socket to tcp://*:5555\r\n//  Expects \"Hello\" from client, replies with \"World\"\r\n//\r\n#include <zmq.hpp>\r\n#include <string>\r\n#include <iostream>\r\n#include <unistd.h>\r\n#include <thread>\r\n#include <mutex>\r\n#include <condition_variable>\r\n\r\nclass monitor_t : public zmq::monitor_t\r\n{\r\npublic:\r\n    monitor_t() {}\r\n    virtual void on_monitor_started()                                                   { std::cout << \"Monitor: monitor started\" << std::endl; }\r\n    virtual void on_event_connected(const zmq_event_t &event_, const char* addr_)       { std::cout << \"Monitor: connected\" << std::endl; }\r\n    virtual void on_event_connect_delayed(const zmq_event_t &event_, const char* addr_) { std::cout << \"Monitor: connect_delayed\" << std::endl; }\r\n    virtual void on_event_connect_retried(const zmq_event_t &event_, const char* addr_) { std::cout << \"Monitor: connect_retried\" << std::endl; }\r\n    virtual void on_event_listening(const zmq_event_t &event_, const char* addr_)       { std::cout << \"Monitor: listening\" << std::endl; }\r\n    virtual void on_event_bind_failed(const zmq_event_t &event_, const char* addr_)     { std::cout << \"Monitor: bind_failed\" << std::endl; }\r\n    virtual void on_event_accepted(const zmq_event_t &event_, const char* addr_)        { std::cout << \"Monitor: accepted\" << std::endl; }\r\n    virtual void on_event_accept_failed(const zmq_event_t &event_, const char* addr_)   { std::cout << \"Monitor: accept_failed\" << std::endl; }\r\n    virtual void on_event_closed(const zmq_event_t &event_, const char* addr_)          { std::cout << \"Monitor: closed\" << std::endl; }\r\n    virtual void on_event_close_failed(const zmq_event_t &event_, const char* addr_)    { std::cout << \"Monitor: close_failed\" << std::endl; }\r\n    virtual void on_event_disconnected(const zmq_event_t &event_, const char* addr_)    { std::cout << \"Monitor: disconnected\" << std::endl; }\r\n    virtual void on_event_unknown(const zmq_event_t &event_, const char* addr_)         { std::cout << \"Monitor: unknown\" << std::endl; }\r\n};\r\n\r\nint main () {\r\n    int major, minor, patch;\r\n    zmq_version(&major, &minor, &patch);\r\n    std::cout << \"ZMQ ver. \" << major << '.' << minor << '.' << patch << std::endl;\r\n\r\n    //  Prepare our context and socket\r\n    zmq::context_t context (1);\r\n    zmq::socket_t socket (context, ZMQ_REP);\r\n    monitor_t m;\r\n    std::mutex mtx;\r\n    std::condition_variable cv;\r\n\r\n    std::thread mt([&m, &socket, &mtx, &cv]()\r\n            {\r\n                cv.notify_one();\r\n                m.monitor(socket, \"inproc://monitor.rep\");\r\n            });\r\n\r\n    std::unique_lock<std::mutex> lk(mtx);\r\n    cv.wait(lk);\r\n\r\n    socket.setsockopt(ZMQ_IDENTITY, \"zmqsrv\", 6);\r\n    socket.bind (\"tcp://*:5555\");\r\n\r\n    while (true) {\r\n        zmq::message_t request;\r\n\r\n        //  Wait for next request from client\r\n        std::cout << \"Receiving...\" << std::endl;\r\n        socket.recv(&request);\r\n        std::string req((const char*)request.data(), request.size());\r\n        std::cout << \"Received \" << req << std::endl;\r\n\r\n        //  Do some 'work'\r\n        sleep(1);\r\n\r\n        //  Send reply back to client\r\n        zmq::message_t reply (\"World\", 5);\r\n        socket.send(reply);\r\n    }`\r\n\r\nClient test code:\r\n`//\r\n//  Hello World client in C++\r\n//  Connects REQ socket to tcp://localhost:5555\r\n//  Sends \"Hello\" to server, expects \"World\" back\r\n//\r\n#include <zmq.hpp>\r\n#include <string>\r\n#include <iostream>\r\n#include <thread>\r\n#include <mutex>\r\n#include <condition_variable>\r\n\r\nclass monitor_t : public zmq::monitor_t\r\n{\r\npublic:\r\n    monitor_t() {}\r\n    virtual void on_monitor_started()                                                   { std::cout << \"Monitor: monitor started\" << std::endl; }\r\n    virtual void on_event_connected(const zmq_event_t &event_, const char* addr_)       { std::cout << \"Monitor: connected\" << std::endl; }\r\n    virtual void on_event_connect_delayed(const zmq_event_t &event_, const char* addr_) { std::cout << \"Monitor: connect_delayed\" << std::endl; }\r\n    virtual void on_event_connect_retried(const zmq_event_t &event_, const char* addr_) { std::cout << \"Monitor: connect_retried\" << std::endl; }\r\n    virtual void on_event_listening(const zmq_event_t &event_, const char* addr_)       { std::cout << \"Monitor: listening\" << std::endl; }\r\n    virtual void on_event_bind_failed(const zmq_event_t &event_, const char* addr_)     { std::cout << \"Monitor: bind_failed\" << std::endl; }\r\n    virtual void on_event_accepted(const zmq_event_t &event_, const char* addr_)        { std::cout << \"Monitor: accepted\" << std::endl; }\r\n    virtual void on_event_accept_failed(const zmq_event_t &event_, const char* addr_)   { std::cout << \"Monitor: accept_failed\" << std::endl; }\r\n    virtual void on_event_closed(const zmq_event_t &event_, const char* addr_)          { std::cout << \"Monitor: closed\" << std::endl; }\r\n    virtual void on_event_close_failed(const zmq_event_t &event_, const char* addr_)    { std::cout << \"Monitor: close_failed\" << std::endl; }\r\n    virtual void on_event_disconnected(const zmq_event_t &event_, const char* addr_)    { std::cout << \"Monitor: disconnected\" << std::endl; }\r\n    virtual void on_event_unknown(const zmq_event_t &event_, const char* addr_)         { std::cout << \"Monitor: unknown\" << std::endl; }\r\n};\r\n\r\nint main ()\r\n{\r\n    int major, minor, patch;\r\n    zmq_version(&major, &minor, &patch);\r\n    std::cout << \"ZMQ ver. \" << major << '.' << minor << '.' << patch << std::endl;\r\n\r\n     //  Prepare our context and socket\r\n    zmq::context_t context (1);\r\n    zmq::socket_t socket (context, ZMQ_ROUTER);\r\n\r\n    monitor_t m;\r\n    std::mutex mtx;\r\n    std::condition_variable cv;\r\n\r\n    std::thread mt([&m, &socket, &mtx, &cv]()\r\n            {\r\n                cv.notify_one();\r\n                m.monitor(socket, \"inproc://monitor.rep\");\r\n            });\r\n\r\n    std::unique_lock<std::mutex> lk(mtx);\r\n    cv.wait(lk);\r\n    std::this_thread::sleep_for(std::chrono::seconds(1));\r\n\r\n    std::cout << \"Connecting to hello world server\" << std::endl;\r\n    int optval = 1000;\r\n    socket.setsockopt(ZMQ_RECONNECT_IVL, optval);\r\n    optval = 0;\r\n    socket.setsockopt(ZMQ_LINGER, optval);\r\n    optval = 1;\r\n    socket.setsockopt(ZMQ_PROBE_ROUTER, optval);\r\n    optval = 1;\r\n    socket.setsockopt(ZMQ_IMMEDIATE, optval);\r\n    socket.connect (\"tcp://localhost:5555\");\r\n\r\n    std::this_thread::sleep_for(std::chrono::seconds(10));\r\n\r\n    //  Do 10 requests, waiting each time for a response\r\n    for (int request_nbr = 0; request_nbr != 10; request_nbr++) {\r\n        zmq::message_t dst(\"zmqsrv\", 6);\r\n        zmq::message_t empty;\r\n        zmq::message_t request (\"Hello\", 5);\r\n        std::cout << \"Sending identity frame\" << std::endl;\r\n        socket.send(dst, ZMQ_SNDMORE);\r\n        std::cout << \"Sending empty frame\" << std::endl;\r\n        socket.send(empty, ZMQ_SNDMORE);\r\n        std::cout << \"Sending data frame\" << std::endl;\r\n        socket.send(request);\r\n        std::cout << \"Sent Hello, \" << request_nbr << \" time\" << std::endl;\r\n\r\n        //  Get the reply.\r\n        dst.rebuild();\r\n        empty.rebuild();\r\n        zmq::message_t reply;\r\n        socket.recv(&dst);\r\n        socket.recv(&empty);\r\n        socket.recv(&reply);\r\n        std::string src((const char*)dst.data(), dst.size());\r\n        std::string replyData((const char*)reply.data(), reply.size());\r\n        std::cout << \"Received \" << replyData << \" from \"<< src << \", \" << request_nbr << std::endl;\r\n    }\r\n    return 0;`\r\n\r\nCompiled as:\r\n`\r\ng++ hwserver.cpp -std=c++11 -lzmq -o hws\r\n\r\ng++ hwclient.cpp -std=c++11 -lzmq -o hwc\r\n`\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nServer output:\r\n`devusr1@devenv7 /tmp/zmq $ ./hws\r\n\r\nZMQ ver. 4.1.4\r\n\r\nMonitor: monitor started\r\n\r\nMonitor: listening\r\n\r\nReceiving...\r\n\r\nMonitor: accepted\r\n\r\nMonitor: disconnected\r\n\r\n^C`\r\n\r\nClient output:\r\n`devusr1@devenv7 /tmp/zmq $ ./hwc\r\n\r\nZMQ ver. 4.1.4\r\n\r\nMonitor: monitor started\r\n\r\nConnecting to hello world server\r\n\r\nMonitor: connect_delayed\r\n\r\nMonitor: connected\r\n\r\nMonitor: disconnected\r\n\r\nSending identity frame\r\n\r\nSending empty frame\r\n\r\nSending data frame\r\n\r\nSent Hello, 0 time\r\n\r\n^C`\r\n\r\n# What's the expected result?\r\n10 Hello World messages exchanged between clients.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3694", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3694/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3694/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3694/events", "html_url": "https://github.com/zeromq/libzmq/issues/3694", "id": 499843652, "node_id": "MDU6SXNzdWU0OTk4NDM2NTI=", "number": 3694, "title": "zmq cannot work on windows xp", "user": {"login": "myhevenisqing", "id": 31245934, "node_id": "MDQ6VXNlcjMxMjQ1OTM0", "avatar_url": "https://avatars0.githubusercontent.com/u/31245934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myhevenisqing", "html_url": "https://github.com/myhevenisqing", "followers_url": "https://api.github.com/users/myhevenisqing/followers", "following_url": "https://api.github.com/users/myhevenisqing/following{/other_user}", "gists_url": "https://api.github.com/users/myhevenisqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/myhevenisqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myhevenisqing/subscriptions", "organizations_url": "https://api.github.com/users/myhevenisqing/orgs", "repos_url": "https://api.github.com/users/myhevenisqing/repos", "events_url": "https://api.github.com/users/myhevenisqing/events{/privacy}", "received_events_url": "https://api.github.com/users/myhevenisqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-09-29T02:06:48Z", "updated_at": "2019-10-19T13:31:48Z", "closed_at": "2019-10-19T13:31:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "It was already fixed a while ago:\r\n\r\nhttps://github.com/zeromq/libzmq/blob/master/src/ip_resolver.cpp#L584\r\n\r\n_Originally posted by @bluca in https://github.com/zeromq/libzmq/issues/3693#issuecomment-536190131_\r\n\r\nsorry,i tryed the newest code, is still not fix zmq work on window xp. due to windows xp is not support the if_indextoname.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3693", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3693/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3693/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3693/events", "html_url": "https://github.com/zeromq/libzmq/issues/3693", "id": 499770394, "node_id": "MDU6SXNzdWU0OTk3NzAzOTQ=", "number": 3693, "title": "zmq cannot work on windows xp (if_indextoname IPHILPAPI.DLL)", "user": {"login": "myhevenisqing", "id": 31245934, "node_id": "MDQ6VXNlcjMxMjQ1OTM0", "avatar_url": "https://avatars0.githubusercontent.com/u/31245934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myhevenisqing", "html_url": "https://github.com/myhevenisqing", "followers_url": "https://api.github.com/users/myhevenisqing/followers", "following_url": "https://api.github.com/users/myhevenisqing/following{/other_user}", "gists_url": "https://api.github.com/users/myhevenisqing/gists{/gist_id}", "starred_url": "https://api.github.com/users/myhevenisqing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myhevenisqing/subscriptions", "organizations_url": "https://api.github.com/users/myhevenisqing/orgs", "repos_url": "https://api.github.com/users/myhevenisqing/repos", "events_url": "https://api.github.com/users/myhevenisqing/events{/privacy}", "received_events_url": "https://api.github.com/users/myhevenisqing/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-28T13:06:15Z", "updated_at": "2019-09-29T01:50:09Z", "closed_at": "2019-09-28T13:28:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: \r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3691", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3691/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3691/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3691/events", "html_url": "https://github.com/zeromq/libzmq/issues/3691", "id": 498093805, "node_id": "MDU6SXNzdWU0OTgwOTM4MDU=", "number": 3691, "title": "Support unix domain sockets under Win10", "user": {"login": "casabre", "id": 25963696, "node_id": "MDQ6VXNlcjI1OTYzNjk2", "avatar_url": "https://avatars0.githubusercontent.com/u/25963696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/casabre", "html_url": "https://github.com/casabre", "followers_url": "https://api.github.com/users/casabre/followers", "following_url": "https://api.github.com/users/casabre/following{/other_user}", "gists_url": "https://api.github.com/users/casabre/gists{/gist_id}", "starred_url": "https://api.github.com/users/casabre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/casabre/subscriptions", "organizations_url": "https://api.github.com/users/casabre/orgs", "repos_url": "https://api.github.com/users/casabre/repos", "events_url": "https://api.github.com/users/casabre/events{/privacy}", "received_events_url": "https://api.github.com/users/casabre/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361091830, "node_id": "MDU6TGFiZWwzNjEwOTE4MzA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Feature%20Request", "name": "Feature Request", "color": "bfdadc", "default": false, "description": null}, {"id": 361113745, "node_id": "MDU6TGFiZWwzNjExMTM3NDU=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Help%20Request", "name": "Help Request", "color": "1d76db", "default": false, "description": null}, {"id": 359697670, "node_id": "MDU6TGFiZWwzNTk2OTc2NzA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(windows/msvc)", "name": "Platform (windows/msvc)", "color": "bfd4f2", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-25T07:11:41Z", "updated_at": "2019-10-29T23:02:43Z", "closed_at": "2019-10-29T23:02:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nHi there,\r\nthanks for the great work but I have a feature request regarding unix domain sockets on Windows 10. According to the following [blog article](https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/), Win10 supports now AF_UNIX domain sockets. If I use `ipc://`, a not supported socket type will be reported. Thus, could please extend the compatible Win10 sockets to AF_UNIX as well. The support of the utilized Win10 version can be checked by `sc query afunix`\r\n\r\nPlease see also [#1327@pyzmq](https://github.com/zeromq/pyzmq/issues/1327)\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 18.1\r\n* OS: Windows 10\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nuse pyzmq\r\n\r\nimport zmq\r\ncontext = zmq.Context()\r\nsocket = context.socket(zmq.PUB)\r\nsocket.bind('ipc:///tmp/stream')\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"zmq\\backend\\cython\\socket.pyx\", line 550, in zmq.backend.cython.socket.Socket.bind\r\n  File \"zmq\\backend\\cython\\checkrc.pxd\", line 25, in zmq.backend.cython.checkrc._check_rc\r\nzmq.error.ZMQError: Protocol not supported\r\n\r\n\r\n# What's the expected result?\r\nBound or connected socket\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3689", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3689/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3689/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3689/events", "html_url": "https://github.com/zeromq/libzmq/issues/3689", "id": 497662885, "node_id": "MDU6SXNzdWU0OTc2NjI4ODU=", "number": 3689, "title": "Lost publications", "user": {"login": "mloy", "id": 4638442, "node_id": "MDQ6VXNlcjQ2Mzg0NDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/4638442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mloy", "html_url": "https://github.com/mloy", "followers_url": "https://api.github.com/users/mloy/followers", "following_url": "https://api.github.com/users/mloy/following{/other_user}", "gists_url": "https://api.github.com/users/mloy/gists{/gist_id}", "starred_url": "https://api.github.com/users/mloy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mloy/subscriptions", "organizations_url": "https://api.github.com/users/mloy/orgs", "repos_url": "https://api.github.com/users/mloy/repos", "events_url": "https://api.github.com/users/mloy/events{/privacy}", "received_events_url": "https://api.github.com/users/mloy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-24T12:40:40Z", "updated_at": "2019-09-24T20:46:03Z", "closed_at": "2019-09-24T20:46:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nFor measuring performance on an embedded device, I wrote a program that publishes the message \"hello<index>!\", where index is incremented. This is being published in a loop.\r\n\r\nWhen doing this without pause, a bunch messages get published followed by a gap of many lost messages. The we again receive a bunch of messages and the next gap. This repeats again and again.\r\n\r\nIt happens using ws, tcp, ipc and inproc. \r\n\r\nSeveral subscribers detect the same gaps. So the problem seams to be on the publisher side.\r\n\r\nIf I wait 1\u00b5s after each publish, everything works fine\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): v4.3.2 and master (d76664017c7ccfa8170f50aab9e4f01d2b0ddfd4)\r\n* OS: Ubuntu 19.04 (kernel 5.0.0-29-generic)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1. The publisher loop:\r\n```\r\n int publisherExecute(void *socket, useconds_t cycleTime)\r\n{\r\n\tchar topicBuffer[1024];\r\n\tunsigned int topicIndex = 0;\r\n\tsize_t stringLength;\r\n\tfor (;;) {\r\n\t\tstringLength = (size_t)sprintf(topicBuffer, \"hello%u!\", topicIndex);\r\n\t\tif (zmq_send(socket, topicBuffer, stringLength, 0) < 0) {\r\n\t\t\tprintf(\"Could not send topic '%s'\\n\", strerror(errno));\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\ttopicIndex += topicStepSize;\r\n\t\tif (cycleTime) {\r\n\t\t\tusleep(cycleTime);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nPart of the console output of 3 subscribers running in parallel (1st column is socket id of subscriber):\r\n\r\n```\r\n15 ipc:///tmp/test.ipc: 85000: Unexpected index (2867481 instead of 2860797). 2228 messages were lost!\r\n20 ipc:///tmp/test.ipc: 90500: Unexpected index (2867481 instead of 2862297). 1728 messages were lost!\r\n16 ipc:///tmp/test.ipc: 78500: Unexpected index (2867481 instead of 2862297). 1728 messages were lost!\r\n15 ipc:///tmp/test.ipc: 85500: Unexpected index (2875506 instead of 2868981). 2175 messages were lost!\r\n20 ipc:///tmp/test.ipc: 91000: Unexpected index (2875506 instead of 2868981). 2175 messages were lost!\r\n16 ipc:///tmp/test.ipc: 79000: Unexpected index (2875506 instead of 2868981). 2175 messages were lost!\r\n15 ipc:///tmp/test.ipc: 86500: Unexpected index (2882559 instead of 2878506). 1351 messages were lost!\r\n20 ipc:///tmp/test.ipc: 92000: Unexpected index (2882559 instead of 2878506). 1351 messages were lost!\r\n16 ipc:///tmp/test.ipc: 80000: Unexpected index (2882559 instead of 2878506). 1351 messages were lost!\r\n15 ipc:///tmp/test.ipc: 87500: Unexpected index (2890251 instead of 2885559). 1564 messages were lost!\r\n20 ipc:///tmp/test.ipc: 93000: Unexpected index (2890251 instead of 2885559). 1564 messages were lost!\r\n16 ipc:///tmp/test.ipc: 81000: Unexpected index (2890251 instead of 2885559). 1564 messages were lost!\r\n15 ipc:///tmp/test.ipc: 88000: Unexpected index (2898870 instead of 2891751). 2373 messages were lost!\r\n20 ipc:///tmp/test.ipc: 93500: Unexpected index (2898870 instead of 2891751). 2373 messages were lost!\r\n16 ipc:///tmp/test.ipc: 81500: Unexpected index (2898870 instead of 2891751). 2373 messages were lost!\r\n15 ipc:///tmp/test.ipc: 88500: Unexpected index (2905635 instead of 2900370). 1755 messages were lost!\r\n20 ipc:///tmp/test.ipc: 94000: Unexpected index (2905635 instead of 2900370). 1755 messages were lost!\r\n16 ipc:///tmp/test.ipc: 82000: Unexpected index (2905635 instead of 2900370). 1755 messages were lost!\r\n15 ipc:///tmp/test.ipc: 89000: Unexpected index (2911632 instead of 2907135). 1499 messages were lost!\r\n20 ipc:///tmp/test.ipc: 94500: Unexpected index (2911632 instead of 2907135). 1499 messages were lost!\r\n16 ipc:///tmp/test.ipc: 82500: Unexpected index (2911632 instead of 2907135). 1499 messages were lost!\r\n15 ipc:///tmp/test.ipc: 90000: Unexpected index (2916549 instead of 2914632). 639 messages were lost!\r\n20 ipc:///tmp/test.ipc: 95500: Unexpected index (2916549 instead of 2914632). 639 messages were lost!\r\n16 ipc:///tmp/test.ipc: 83500: Unexpected index (2916549 instead of 2914632). 639 messages were lost!\r\n15 ipc:///tmp/test.ipc: 91000: Unexpected index (2922282 instead of 2919549). 911 messages were lost!\r\n20 ipc:///tmp/test.ipc: 96500: Unexpected index (2922282 instead of 2919549). 911 messages were lost!\r\n16 ipc:///tmp/test.ipc: 84500: Unexpected index (2922282 instead of 2919549). 911 messages were lost!\r\n15 ipc:///tmp/test.ipc: 91500: Unexpected index (2928861 instead of 2923782). 1693 messages were lost!\r\n20 ipc:///tmp/test.ipc: 97000: Unexpected index (2928861 instead of 2923782). 1693 messages were lost!\r\n16 ipc:///tmp/test.ipc: 85000: Unexpected index (2928861 instead of 2923782). 1693 messages were lost!\r\n15 ipc:///tmp/test.ipc: 92000: Unexpected index (2934807 instead of 2930361). 1482 messages were lost!\r\n20 ipc:///tmp/test.ipc: 97500: Unexpected index (2934807 instead of 2930361). 1482 messages were lost!\r\n16 ipc:///tmp/test.ipc: 85500: Unexpected index (2934807 instead of 2930361). 1482 messages were lost!\r\n```\r\n\r\n# What's the expected result?\r\nNo output. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3682", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3682/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3682/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3682/events", "html_url": "https://github.com/zeromq/libzmq/issues/3682", "id": 493231366, "node_id": "MDU6SXNzdWU0OTMyMzEzNjY=", "number": 3682, "title": "Crash in official multithreaded server example", "user": {"login": "kakyoism", "id": 485051, "node_id": "MDQ6VXNlcjQ4NTA1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/485051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kakyoism", "html_url": "https://github.com/kakyoism", "followers_url": "https://api.github.com/users/kakyoism/followers", "following_url": "https://api.github.com/users/kakyoism/following{/other_user}", "gists_url": "https://api.github.com/users/kakyoism/gists{/gist_id}", "starred_url": "https://api.github.com/users/kakyoism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kakyoism/subscriptions", "organizations_url": "https://api.github.com/users/kakyoism/orgs", "repos_url": "https://api.github.com/users/kakyoism/repos", "events_url": "https://api.github.com/users/kakyoism/events{/privacy}", "received_events_url": "https://api.github.com/users/kakyoism/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-13T09:41:45Z", "updated_at": "2019-09-13T13:42:16Z", "closed_at": "2019-09-13T13:42:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nI experienced I'm new to zmq and cppzmq. While trying to run the multithreaded example in the official guide: http://zguide.zeromq.org/cpp:mtserver the code crashes and further exception handling shows error EFSM.\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased):  4.3.2\r\n* OS: macOS Mojave, Xcode 10.3\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n```cpp\r\n/*\r\n Multithreaded Hello World server in C\r\n */\r\n\r\n#include <pthread.h>\r\n#include <unistd.h>\r\n#include <cassert>\r\n#include <string>\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <zmq.hpp>\r\n\r\nvoid *worker_routine (void *arg)\r\n{\r\n    zmq::context_t *context = (zmq::context_t *) arg;\r\n    \r\n    zmq::socket_t socket (*context, ZMQ_REP);\r\n    socket.connect (\"inproc://workers\");\r\n    \r\n    while (true) {\r\n        //  Wait for next request from client\r\n        std::array<char, 1024> buf{'\\0'};\r\n        zmq::mutable_buffer request(buf.data(), buf.size());\r\n        socket.recv(request, zmq::recv_flags::dontwait);\r\n        std::cout << \"Received request: [\" << (char*) request.data() << \"]\" << std::endl;\r\n        \r\n        //  Do some 'work'\r\n        sleep (1);\r\n        \r\n        //  Send reply back to client\r\n        zmq::message_t reply (6);\r\n        memcpy ((void *) reply.data (), \"World\", 6);\r\n        try {\r\n            socket.send (reply, zmq::send_flags::dontwait);\r\n        }\r\n        catch (zmq::error_t& e) {\r\n            printf(\"ERROR: %X\\n\", e.num());\r\n        }\r\n    }\r\n    return (NULL);\r\n}\r\n\r\nint main ()\r\n{\r\n    //  Prepare our context and sockets\r\n    zmq::context_t context (1);\r\n    zmq::socket_t clients (context, ZMQ_ROUTER);\r\n    clients.bind (\"tcp://*:5555\");  // who i talk to.\r\n    zmq::socket_t workers (context, ZMQ_DEALER);\r\n    workers.bind (\"inproc://workers\");\r\n    \r\n    //  Launch pool of worker threads\r\n    for (int thread_nbr = 0; thread_nbr != 5; thread_nbr++) {\r\n        pthread_t worker;\r\n        pthread_create (&worker, NULL, worker_routine, (void *) &context);\r\n    }\r\n    //  Connect work threads to client threads via a queue\r\n    zmq::proxy (clients, workers);\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nError goes on like this.\r\n```\r\nReceived request: []\r\nReceived request: [Received request: []\r\nReceived request: []]\r\n\r\nReceived request: []\r\nERROR: 9523DFB\r\nERROR: 9523DFB\r\nERROR: 9523DFB\r\nReceived request: [ERROR: 9523DFB\r\nReceived request: [Received request: []]\r\n\r\nERROR: 9523DFB\r\n]\r\nReceived request: []\r\nReceived request: []\r\nERROR: 9523DFB\r\nERROR: 9523DFB\r\nReceived request: [Received request: []ERROR: 9523DFB\r\nERROR: 9523DFB\r\n]\r\n\r\nReceived request: [ERROR: 9523DFB\r\nReceived request: []\r\nReceived request: []\r\n]\r\nERROR: 9523DFB\r\nERROR: 9523DFB\r\nReceived request: [ERROR: 9523DFB\r\nERROR: 9523DFB\r\n]\r\nERROR: 9523DFB\r\nReceived request: [Received request: []Received request: [\r\n]Received request: [\r\n]\r\n]\r\nProgram ended with exit code: 9\r\n```\r\n\r\n# What's the expected result?\r\n\r\n I expect to see the print out\r\n\r\n```\r\nReceived request: World\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3676", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3676/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3676/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3676/events", "html_url": "https://github.com/zeromq/libzmq/issues/3676", "id": 491620137, "node_id": "MDU6SXNzdWU0OTE2MjAxMzc=", "number": 3676, "title": "Problem: The addition of sha1 sources breaks static linking", "user": {"login": "myd7349", "id": 5435649, "node_id": "MDQ6VXNlcjU0MzU2NDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5435649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/myd7349", "html_url": "https://github.com/myd7349", "followers_url": "https://api.github.com/users/myd7349/followers", "following_url": "https://api.github.com/users/myd7349/following{/other_user}", "gists_url": "https://api.github.com/users/myd7349/gists{/gist_id}", "starred_url": "https://api.github.com/users/myd7349/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/myd7349/subscriptions", "organizations_url": "https://api.github.com/users/myd7349/orgs", "repos_url": "https://api.github.com/users/myd7349/repos", "events_url": "https://api.github.com/users/myd7349/events{/privacy}", "received_events_url": "https://api.github.com/users/myd7349/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2019-09-10T11:42:50Z", "updated_at": "2019-10-23T17:02:21Z", "closed_at": "2019-09-11T15:41:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nI encountered a `zyre` REGRESSION error when I was trying to update `vcpkg`'s zeromq to lastest: https://github.com/microsoft/vcpkg/pull/8119\r\nIn https://github.com/zeromq/libzmq/pull/3579, `external/sha1/sha1.h` and `external/sha1/sha1.c` are added. However, `czmq` also has its own copy of these two files: https://github.com/zeromq/czmq/tree/master/src/foreign/sha1\r\n\r\nIf both `libzmq` and `czmq` are built as static libraries, then the compiler will be unhappy:\r\n```\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libzmq.a(sha1.c.o):/ci/myagent/_work/1/s/buildtrees/zeromq/src/407c1e69ad-6a0d86f40e/external/sha1/sha1.c:225: first defined here\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libczmq.a(zdigest.c.o): In function `sha1_pad':\r\n/ci/myagent/_work/1/s/buildtrees/czmq/src/ff5f9b6893-f1fd59e8c7/src/foreign/sha1/sha1.inc_c:235: multiple definition of `sha1_pad'\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libzmq.a(sha1.c.o):/ci/myagent/_work/1/s/buildtrees/zeromq/src/407c1e69ad-6a0d86f40e/external/sha1/sha1.c:236: first defined here\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libczmq.a(zdigest.c.o): In function `sha1_loop':\r\n/ci/myagent/_work/1/s/buildtrees/czmq/src/ff5f9b6893-f1fd59e8c7/src/foreign/sha1/sha1.inc_c:278: multiple definition of `sha1_loop'\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libzmq.a(sha1.c.o):/ci/myagent/_work/1/s/buildtrees/zeromq/src/407c1e69ad-6a0d86f40e/external/sha1/sha1.c:279: first defined here\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libczmq.a(zdigest.c.o): In function `sha1_result':\r\n/ci/myagent/_work/1/s/buildtrees/czmq/src/ff5f9b6893-f1fd59e8c7/src/foreign/sha1/sha1.inc_c:306: multiple definition of `sha1_result'\r\n/ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libzmq.a(sha1.c.o):/ci/myagent/_work/1/s/buildtrees/zeromq/src/407c1e69ad-6a0d86f40e/external/sha1/sha1.c:307: first defined here\r\ncollect2: error: ld returned 1 exit status\r\n[19/25] : && /usr/bin/c++  -fPIC -g  -rdynamic CMakeFiles/ztester_gossip.dir/src/ztester_gossip.c.o  -o ztester_gossip  libzyre.a /ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libzmq.a /ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libczmq.a /ci/myagent/_work/1/s/installed/x64-linux/debug/lib/libzmq.a -lrt -lpthread && :\r\nFAILED: ztester_gossip \r\n```\r\n\r\n# Environment\r\n\r\n* libzmq version (e756743a12468fabe0141f979aa2da407c1e69ad): \r\n* OS: Ubuntu 19.04\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3675", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3675/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3675/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3675/events", "html_url": "https://github.com/zeromq/libzmq/issues/3675", "id": 491564499, "node_id": "MDU6SXNzdWU0OTE1NjQ0OTk=", "number": 3675, "title": " future plan for zmq_proxy_steerable method", "user": {"login": "mortymacs", "id": 1261448, "node_id": "MDQ6VXNlcjEyNjE0NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1261448?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mortymacs", "html_url": "https://github.com/mortymacs", "followers_url": "https://api.github.com/users/mortymacs/followers", "following_url": "https://api.github.com/users/mortymacs/following{/other_user}", "gists_url": "https://api.github.com/users/mortymacs/gists{/gist_id}", "starred_url": "https://api.github.com/users/mortymacs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mortymacs/subscriptions", "organizations_url": "https://api.github.com/users/mortymacs/orgs", "repos_url": "https://api.github.com/users/mortymacs/repos", "events_url": "https://api.github.com/users/mortymacs/events{/privacy}", "received_events_url": "https://api.github.com/users/mortymacs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-10T09:43:51Z", "updated_at": "2019-09-10T09:45:56Z", "closed_at": "2019-09-10T09:45:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nIs there any plan exists for the future of `zmq_proxy_steerable` method? Because want I've understood, we can have the `zmq_proxy` method with 4 arguments instead of calling `zmq_proxy_steerable`.\r\n\r\n# Environment\r\nAny\r\n\r\n* libzmq version (commit hash if unreleased): e756743a12468fabe0141f979aa2da407c1e69ad\r\n* OS: GNU/Linux\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3669", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3669/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3669/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3669/events", "html_url": "https://github.com/zeromq/libzmq/issues/3669", "id": 489388598, "node_id": "MDU6SXNzdWU0ODkzODg1OTg=", "number": 3669, "title": "Your FAQ page is out of date", "user": {"login": "bootrino", "id": 22624099, "node_id": "MDQ6VXNlcjIyNjI0MDk5", "avatar_url": "https://avatars0.githubusercontent.com/u/22624099?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootrino", "html_url": "https://github.com/bootrino", "followers_url": "https://api.github.com/users/bootrino/followers", "following_url": "https://api.github.com/users/bootrino/following{/other_user}", "gists_url": "https://api.github.com/users/bootrino/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootrino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootrino/subscriptions", "organizations_url": "https://api.github.com/users/bootrino/orgs", "repos_url": "https://api.github.com/users/bootrino/repos", "events_url": "https://api.github.com/users/bootrino/events{/privacy}", "received_events_url": "https://api.github.com/users/bootrino/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-04T20:42:40Z", "updated_at": "2019-09-04T20:57:54Z", "closed_at": "2019-09-04T20:57:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "It suggests emailing the project founder who I understand has passed away.\r\n\r\nhttp://wiki.zeromq.org/area:faq", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3657", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3657/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3657/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3657/events", "html_url": "https://github.com/zeromq/libzmq/issues/3657", "id": 488040011, "node_id": "MDU6SXNzdWU0ODgwNDAwMTE=", "number": 3657, "title": "JupyterLab: \"Assertion failed: Connection reset by peer [10054]\": what could I do about it?", "user": {"login": "maajdl", "id": 7543475, "node_id": "MDQ6VXNlcjc1NDM0NzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7543475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maajdl", "html_url": "https://github.com/maajdl", "followers_url": "https://api.github.com/users/maajdl/followers", "following_url": "https://api.github.com/users/maajdl/following{/other_user}", "gists_url": "https://api.github.com/users/maajdl/gists{/gist_id}", "starred_url": "https://api.github.com/users/maajdl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maajdl/subscriptions", "organizations_url": "https://api.github.com/users/maajdl/orgs", "repos_url": "https://api.github.com/users/maajdl/repos", "events_url": "https://api.github.com/users/maajdl/events{/privacy}", "received_events_url": "https://api.github.com/users/maajdl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-09-02T07:25:52Z", "updated_at": "2020-04-24T08:06:54Z", "closed_at": "2019-09-02T08:36:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am unable to use JupyterLab for more that a few hours. The same for JupyterNotebook.\r\nBelow is a copy of the console screen when the crash occurs as well as the Windows logs.\r\nI have this problem since a long time, and I have re-installed Anaconda3 at least 4 times without resolving the issue.\r\nI have seen that I am not alone wih this problem, but I know many people who do not have this problem.\r\n\r\nWould you have a suggestion about how to look for the cause and find a practical solution?\r\nWhat should I check for? \r\nWhat could I try? \r\nHow could I get mor information about what happens?\r\n\r\nThanks for your help,\r\n\r\nMichel\r\n\r\n==============================================================\r\n[I 23:26:08.445 LabApp] JupyterLab extension loaded from C:\\Users\\myasus\\Anaconda3\\lib\\site-packages\\jupyterlab\r\n[I 23:26:08.445 LabApp] JupyterLab application directory is C:\\Users\\myasus\\Anaconda3\\share\\jupyter\\lab\r\n[I 23:26:08.445 LabApp] Serving notebooks from local directory: C:\\Users\\myasus\\Documents\\_Work\\Jupyter notebooks\r\n[I 23:26:08.445 LabApp] The Jupyter Notebook is running at:\r\n[I 23:26:08.445 LabApp] http://localhost:8888/?token=080bc3d02831103d726de11e1d1ada48197df38b4e55e25c\r\n[I 23:26:08.445 LabApp]  or http://127.0.0.1:8888/?token=080bc3d02831103d726de11e1d1ada48197df38b4e55e25c\r\n[I 23:26:08.445 LabApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\r\n[C 23:26:08.507 LabApp]\r\n    To access the notebook, open this file in a browser:\r\n        file:///C:/Users/myasus/AppData/Roaming/jupyter/runtime/nbserver-6468-open.html\r\n    Or copy and paste one of these URLs:\r\n        http://localhost:8888/?token=080bc3d02831103d726de11e1d1ada48197df38b4e55e25c\r\n     or http://127.0.0.1:8888/?token=080bc3d02831103d726de11e1d1ada48197df38b4e55e25c\r\n[I 23:26:11.255 LabApp] Build is up to date\r\n[I 23:26:11.588 LabApp] New terminal with automatic name: 1\r\nTermSocket.open: 1\r\nTermSocket.open: Opened 1\r\n[I 23:26:14.235 LabApp] Kernel started: 5e0d118d-6f3d-40c1-8b3e-40d58b4071d0\r\n[I 23:26:17.504 LabApp] Adapting from protocol version 5.1 (kernel 5e0d118d-6f3d-40c1-8b3e-40d58b4071d0) to 5.3 (client).\r\n[I 23:26:17.504 LabApp] Adapting from protocol version 5.1 (kernel 5e0d118d-6f3d-40c1-8b3e-40d58b4071d0) to 5.3 (client).\r\n[W 23:26:20.123 LabApp] Got events for closed stream None\r\n2019-09-01 23:26:40.726003: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow\r\n binary was not compiled to use: AVX2\r\n2019-09-01 23:26:40.735857: I tensorflow/stream_executor/platform/default/dso_loader.cc:42] Successfully opened dynamic library nvcu\r\nda.dll\r\n2019-09-01 23:26:40.967865: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1640] Found device 0 with properties:\r\nname: GeForce GTX 980M major: 5 minor: 2 memoryClockRate(GHz): 1.1265\r\npciBusID: 0000:01:00.0\r\n2019-09-01 23:26:40.974296: I tensorflow/stream_executor/platform/default/dlopen_checker_stub.cc:25] GPU libraries are statically li\r\nnked, skip dlopen check.\r\n2019-09-01 23:26:40.981406: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1763] Adding visible gpu devices: 0\r\n2019-09-01 23:26:44.220150: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1181] Device interconnect StreamExecutor with strengt\r\nh 1 edge matrix:\r\n2019-09-01 23:26:44.228235: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1187]      0\r\n2019-09-01 23:26:44.232446: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1200] 0:   N\r\n2019-09-01 23:26:44.245595: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1326] Created TensorFlow device (/job:localhost/repli\r\nca:0/task:0/device:GPU:0 with 3236 MB memory) -> physical GPU (device: 0, name: GeForce GTX 980M, pci bus id: 0000:01:00.0, compute\r\ncapability: 5.2)\r\nAssertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:371)\r\nAssertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:371)\r\nAssertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:371)\r\nAssertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:371)\r\nAssertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:192)\r\nAssertion failed: Assertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:Connection re\r\nset by peer [371)\r\n10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:371)\r\nException in callback BaseAsyncIOLoop._handle_events(1656, 1)\r\nhandle: <Handle BaseAsyncIOLoop._handle_events(1656, 1)>\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\myasus\\Anaconda3\\lib\\asyncio\\events.py\", line 88, in _run\r\n    self._context.run(self._callback, *self._args)\r\n  File \"C:\\Users\\myasus\\Anaconda3\\lib\\site-packages\\tornado\\platform\\asyncio.py\", line 138, in _handle_events\r\n    handler_func(fileobj, events)\r\n  File \"C:\\Users\\myasus\\Anaconda3\\lib\\site-packages\\terminado\\management.py\", line 196, in pty_read\r\n    s = ptywclients.ptyproc.read(65536)\r\n  File \"C:\\Users\\myasus\\Anaconda3\\lib\\site-packages\\winpty\\ptyprocess.py\", line 189, in read\r\n    data = self.fileobj.recv(size)\r\nConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\nAssertion failed: Connection reset by peer [10054] (C:\\ci\\zeromq_1549025594292\\work\\src\\signaler.cpp:371)\r\n\r\n\r\n==============================================================\r\nWindows log,  Logged: 2019-09-02 02:11:23\r\n\r\nFaulting application name: python.exe, version: 3.7.3150.1013, time stamp: 0x5cc0c771\r\nFaulting module name: KERNELBASE.dll, version: 6.3.9600.19425, time stamp: 0x5d26b6e9\r\nException code: 0x40000015\r\nFault offset: 0x000000000000908c\r\nFaulting process ID: 0x1944\r\nFaulting application start time: 0x01d5610bdda68fe4\r\nFaulting application path: C:\\Users\\myasus\\Anaconda3\\python.exe\r\nFaulting module path: C:\\WINDOWS\\system32\\KERNELBASE.dll\r\nReport ID: 31cb60c2-cd16-11e9-828b-5cc5d446f6c1\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n\r\n==============================================================\r\nWindows log,  Logged: 2019-09-02 02:11:23\r\n\r\nFaulting application name: python.exe, version: 3.7.3150.1013, time stamp: 0x5cc0c771\r\nFaulting module name: KERNELBASE.dll, version: 6.3.9600.19425, time stamp: 0x5d26b6e9\r\nException code: 0x40000015\r\nFault offset: 0x000000000000908c\r\nFaulting process ID: 0xca0\r\nFaulting application start time: 0x01d5610be11811c9\r\nFaulting application path: C:\\Users\\myasus\\Anaconda3\\python.exe\r\nFaulting module path: C:\\WINDOWS\\system32\\KERNELBASE.dll\r\nReport ID: 326286f1-cd16-11e9-828b-5cc5d446f6c1\r\nFaulting package full name: \r\nFaulting package-relative application ID: ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3656", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3656/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3656/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3656/events", "html_url": "https://github.com/zeromq/libzmq/issues/3656", "id": 487932123, "node_id": "MDU6SXNzdWU0ODc5MzIxMjM=", "number": 3656, "title": "4.3.x : segfault on sending data from XSUB to XPUB", "user": {"login": "freemanix", "id": 46109266, "node_id": "MDQ6VXNlcjQ2MTA5MjY2", "avatar_url": "https://avatars1.githubusercontent.com/u/46109266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/freemanix", "html_url": "https://github.com/freemanix", "followers_url": "https://api.github.com/users/freemanix/followers", "following_url": "https://api.github.com/users/freemanix/following{/other_user}", "gists_url": "https://api.github.com/users/freemanix/gists{/gist_id}", "starred_url": "https://api.github.com/users/freemanix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/freemanix/subscriptions", "organizations_url": "https://api.github.com/users/freemanix/orgs", "repos_url": "https://api.github.com/users/freemanix/repos", "events_url": "https://api.github.com/users/freemanix/events{/privacy}", "received_events_url": "https://api.github.com/users/freemanix/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 933443603, "node_id": "MDU6TGFiZWw5MzM0NDM2MDM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Regression", "name": "Regression", "color": "efb1ed", "default": false, "description": ""}, {"id": 675580220, "node_id": "MDU6TGFiZWw2NzU1ODAyMjA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Symptom%20(Crash/Race/Undefined%20behavior)", "name": "Symptom (Crash/Race/Undefined behavior)", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-01T21:19:51Z", "updated_at": "2019-09-02T10:36:31Z", "closed_at": "2019-09-02T10:36:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Starting with libzmq 4.3.0, this code crashes:\r\n\r\n```\r\nint main()\r\n{\r\n    zmq::context_t ctx;\r\n\r\n    zmq::socket_t publisher(ctx, ZMQ_XPUB);\r\n    publisher.bind(\"inproc://test\");\r\n\r\n    zmq::socket_t receiver(ctx, ZMQ_XSUB);\r\n    receiver.connect(\"inproc://test\");\r\n\r\n    zmq::message_t subscribe(1);\r\n    *static_cast<unsigned char *>(subscribe.data()) = 2;\r\n    receiver.send(subscribe);\r\n\r\n    zmq::message_t receive;\r\n    publisher.recv(&receive);\r\n\r\n    return 0;\r\n}\r\n```\r\nNote that instead of activating subscription (1) or cancelling it (0), I simply send user data (2). The problem is that this code for handling user messages comming upstream ***never*** executes:\r\n\r\nhttps://github.com/zeromq/libzmq/blob/c737e5720fc50c206c588c9766377ed975d266fe/src/xpub.cpp#L114-L123\r\n\r\nInstead, the above `else` is activated, but it just skip the data processing if first byte is not 0 or 1. Also, this `else` kind of duplicates above `if`. \r\n\r\nAs a result, my code which needs to send upstream data from XSUB to XPUB does not work with libzmq 4.3.0 or higher. Any way how to resolve this?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3655", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3655/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3655/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3655/events", "html_url": "https://github.com/zeromq/libzmq/issues/3655", "id": 487915588, "node_id": "MDU6SXNzdWU0ODc5MTU1ODg=", "number": 3655, "title": "Socket Design for Asynchronous Callback Theading Model", "user": {"login": "smalls12", "id": 37202992, "node_id": "MDQ6VXNlcjM3MjAyOTky", "avatar_url": "https://avatars0.githubusercontent.com/u/37202992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smalls12", "html_url": "https://github.com/smalls12", "followers_url": "https://api.github.com/users/smalls12/followers", "following_url": "https://api.github.com/users/smalls12/following{/other_user}", "gists_url": "https://api.github.com/users/smalls12/gists{/gist_id}", "starred_url": "https://api.github.com/users/smalls12/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smalls12/subscriptions", "organizations_url": "https://api.github.com/users/smalls12/orgs", "repos_url": "https://api.github.com/users/smalls12/repos", "events_url": "https://api.github.com/users/smalls12/events{/privacy}", "received_events_url": "https://api.github.com/users/smalls12/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-01T18:15:53Z", "updated_at": "2019-09-02T16:21:59Z", "closed_at": "2019-09-02T08:39:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI'm looking for some guidance on how to incorporate zeromq into a system that utilizes an asynchronous callback threading model.\r\n\r\n# Issue description\r\nThe underlying system provides a callback in a new thread; said thread than must communicate to another part of the system that has been bound and listening on a zeromq TCP socket.\r\n\r\nIt is well documented that zeromq sockets are not thread safe.\r\n\r\n`\r\nDon't share ZeroMQ sockets between threads. ZeroMQ sockets are not threadsafe. Technically it's possible to migrate a socket from one thread to another but it demands skill. The only place where it's remotely sane to share sockets between threads are in language bindings that need to do magic like garbage collection on sockets.\r\n`\r\n\r\nIs this still correct with the introduction of Client/Server sockets?\r\n\r\nThis type of question has been asked before:\r\nhttps://stackoverflow.com/questions/41941702/one-zeromq-socket-per-thread-or-per-call\r\nhttps://stackoverflow.com/questions/18139918/using-zmq-socket-in-a-callback-function\r\n\r\nI was hoping that some clarification could be provided on the answers to these questions and using `thread_local`.\r\n\r\nAlso reading from the provided documentation http://api.zeromq.org/4-1:zmq (might not be the latest)\r\n\r\n`\r\nIndividual \u00d8MQ sockets are not thread safe except in the case where full memory barriers are issued when migrating a socket from one thread to another. In practice this means applications can create a socket in one thread with zmq_socket() and then pass it to a newly created thread as part of thread initialization, for example via a structure passed as an argument to pthread_create().\r\n`\r\n\r\nCan this be expanded upon in regards to `memory barrier`.\r\n\r\nI appreciate any clarification that can be provided.\r\n\r\nNote: I have been playing around with multiple different solutions including open/closing sockets repeatedly as well as opening a socket on one thread for use by other threads that is protected by a mutex.\r\n\r\nMy concern is that any success I might be seeing won't work at scale", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3646", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3646/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3646/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3646/events", "html_url": "https://github.com/zeromq/libzmq/issues/3646", "id": 487598117, "node_id": "MDU6SXNzdWU0ODc1OTgxMTc=", "number": 3646, "title": "Make check failed(undefined reference) with configure --enable-static --disable-shared", "user": {"login": "forif", "id": 13927627, "node_id": "MDQ6VXNlcjEzOTI3NjI3", "avatar_url": "https://avatars2.githubusercontent.com/u/13927627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/forif", "html_url": "https://github.com/forif", "followers_url": "https://api.github.com/users/forif/followers", "following_url": "https://api.github.com/users/forif/following{/other_user}", "gists_url": "https://api.github.com/users/forif/gists{/gist_id}", "starred_url": "https://api.github.com/users/forif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/forif/subscriptions", "organizations_url": "https://api.github.com/users/forif/orgs", "repos_url": "https://api.github.com/users/forif/repos", "events_url": "https://api.github.com/users/forif/events{/privacy}", "received_events_url": "https://api.github.com/users/forif/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 164697224, "node_id": "MDU6TGFiZWwxNjQ2OTcyMjQ=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Build/Compilation)", "name": "Area (Build/Compilation)", "color": "fbca04", "default": false, "description": null}, {"id": 365581053, "node_id": "MDU6TGFiZWwzNjU1ODEwNTM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Linking%20(Static%20Library)", "name": "Linking (Static Library)", "color": "c5def5", "default": false, "description": null}, {"id": 933443603, "node_id": "MDU6TGFiZWw5MzM0NDM2MDM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Regression", "name": "Regression", "color": "efb1ed", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-30T17:40:14Z", "updated_at": "2019-09-03T07:43:27Z", "closed_at": "2019-09-03T07:43:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nafter configure with --enable-static and --disable-shared option, make command succeed but \r\nmake check compilation failed with bunch of \"undefined reference\" in tests/testutil.cpp\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: Ubuntu-16.04\r\n* gcc/g++ version: (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n```bash\r\n./configure --enable-static --disable-shared\r\nmake\r\nmake check\r\n```\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n```bash\r\nMaking check in doc\r\nmake[1]: Entering directory '/home/nemo/workspace/git_codes/zeromq-4.3.2/doc'\r\nmake[1]: Nothing to be done for 'check'.\r\nmake[1]: Leaving directory '/home/nemo/workspace/git_codes/zeromq-4.3.2/doc'\r\nmake[1]: Entering directory '/home/nemo/workspace/git_codes/zeromq-4.3.2'\r\nmake  tests/test_ancillaries tests/test_system tests/test_pair_inproc tests/test_pair_tcp tests/test_reqrep_inproc tests/test_reqrep_tcp tests/test_hwm tests/test_hwm_pubsub tests/test_reqrep_device tests/test_sub_forward tests/test_invalid_rep tests/test_msg_flags tests/test_msg_ffn tests/test_connect_resolve tests/test_immediate tests/test_last_endpoint tests/test_term_endpoint tests/test_srcfd tests/test_monitor tests/test_router_mandatory tests/test_router_mandatory_hwm tests/test_router_handover tests/test_probe_router tests/test_stream tests/test_stream_empty tests/test_stream_disconnect tests/test_stream_timeout tests/test_disconnect_inproc tests/test_unbind_wildcard tests/test_ctx_options tests/test_ctx_destroy tests/test_security_no_zap_handler tests/test_security_null tests/test_security_plain tests/test_security_zap tests/test_iov tests/test_spec_req tests/test_spec_rep tests/test_spec_dealer tests/test_spec_router tests/test_spec_pushpull tests/test_req_correlate tests/test_req_relaxed tests/test_conflate tests/test_inproc_connect tests/test_issue_566 tests/test_proxy tests/test_proxy_hwm tests/test_proxy_single_socket tests/test_proxy_terminate tests/test_getsockopt_memset tests/test_setsockopt tests/test_diffserv tests/test_connect_rid tests/test_bind_src_address tests/test_metadata tests/test_capabilities tests/test_xpub_nodrop tests/test_xpub_manual tests/test_xpub_welcome_msg tests/test_xpub_verbose tests/test_atomics tests/test_sockopt_hwm tests/test_heartbeats tests/test_stream_exceeds_buffer tests/test_pub_invert_matching tests/test_base85 tests/test_bind_after_connect_tcp tests/test_sodium tests/test_reconnect_ivl tests/test_mock_pub_sub tests/test_socket_null tests/test_security_curve tests/test_shutdown_stress tests/test_ipc_wildcard tests/test_pair_ipc tests/test_rebind_ipc tests/test_reqrep_ipc tests/test_use_fd tests/test_zmq_poll_fd tests/test_timeo tests/test_filter_ipc tests/test_fork tests/test_connect_delay_tipc tests/test_pair_tipc tests/test_reqrep_device_tipc tests/test_reqrep_tipc tests/test_router_mandatory_tipc tests/test_shutdown_stress_tipc tests/test_sub_forward_tipc tests/test_term_endpoint_tipc tests/test_address_tipc  tests/test_abstract_ipc tests/test_many_sockets tests/test_socks   unittests/unittest_poller unittests/unittest_ypipe unittests/unittest_mtrie unittests/unittest_ip_resolver unittests/unittest_udp_address unittests/unittest_radix_tree\r\nmake[2]: Entering directory '/home/nemo/workspace/git_codes/zeromq-4.3.2'\r\n  CXX      tests/tests_test_ancillaries-test_ancillaries.o\r\n  CXXLD    tests/test_ancillaries\r\n  CXX      tests/tests_test_system-test_system.o\r\n  CXXLD    tests/test_system\r\n  CXX      tests/tests_test_pair_inproc-test_pair_inproc.o\r\n  CXXLD    tests/test_pair_inproc\r\n  CXX      tests/tests_test_pair_tcp-test_pair_tcp.o\r\n  CXXLD    tests/test_pair_tcp\r\n  CXX      tests/tests_test_reqrep_inproc-test_reqrep_inproc.o\r\n  CXXLD    tests/test_reqrep_inproc\r\n  CXX      tests/tests_test_reqrep_tcp-test_reqrep_tcp.o\r\n  CXXLD    tests/test_reqrep_tcp\r\n  CXX      tests/tests_test_hwm-test_hwm.o\r\n  CXXLD    tests/test_hwm\r\n  CXX      tests/tests_test_hwm_pubsub-test_hwm_pubsub.o\r\n  CXXLD    tests/test_hwm_pubsub\r\n  CXX      tests/tests_test_reqrep_device-test_reqrep_device.o\r\n  CXXLD    tests/test_reqrep_device\r\n  CXX      tests/tests_test_sub_forward-test_sub_forward.o\r\n  CXXLD    tests/test_sub_forward\r\n  CXX      tests/tests_test_invalid_rep-test_invalid_rep.o\r\n  CXXLD    tests/test_invalid_rep\r\n  CXX      tests/tests_test_msg_flags-test_msg_flags.o\r\n  CXXLD    tests/test_msg_flags\r\n  CXX      tests/tests_test_msg_ffn-test_msg_ffn.o\r\n  CXXLD    tests/test_msg_ffn\r\n  CXX      tests/tests_test_connect_resolve-test_connect_resolve.o\r\n  CXXLD    tests/test_connect_resolve\r\n  CXX      tests/tests_test_immediate-test_immediate.o\r\n  CXXLD    tests/test_immediate\r\n  CXX      tests/tests_test_last_endpoint-test_last_endpoint.o\r\n  CXXLD    tests/test_last_endpoint\r\n  CXX      tests/tests_test_term_endpoint-test_term_endpoint.o\r\n  CXXLD    tests/test_term_endpoint\r\n  CXX      tests/tests_test_srcfd-test_srcfd.o\r\n  CXXLD    tests/test_srcfd\r\n  CXX      tests/tests_test_monitor-test_monitor.o\r\n  CXXLD    tests/test_monitor\r\n  CXX      tests/tests_test_router_mandatory-test_router_mandatory.o\r\n  CXXLD    tests/test_router_mandatory\r\n  CXX      tests/tests_test_router_mandatory_hwm-test_router_mandatory_hwm.o\r\n  CXXLD    tests/test_router_mandatory_hwm\r\n  CXX      tests/tests_test_router_handover-test_router_handover.o\r\n  CXXLD    tests/test_router_handover\r\n  CXX      tests/tests_test_probe_router-test_probe_router.o\r\n  CXXLD    tests/test_probe_router\r\n  CXX      tests/tests_test_stream-test_stream.o\r\n  CXXLD    tests/test_stream\r\n  CXX      tests/tests_test_stream_empty-test_stream_empty.o\r\n  CXXLD    tests/test_stream_empty\r\n  CXX      tests/tests_test_stream_disconnect-test_stream_disconnect.o\r\n  CXXLD    tests/test_stream_disconnect\r\n  CXX      tests/tests_test_stream_timeout-test_stream_timeout.o\r\n  CXXLD    tests/test_stream_timeout\r\n  CXX      tests/tests_test_disconnect_inproc-test_disconnect_inproc.o\r\n  CXXLD    tests/test_disconnect_inproc\r\n  CXX      tests/tests_test_unbind_wildcard-test_unbind_wildcard.o\r\n  CXXLD    tests/test_unbind_wildcard\r\n  CXX      tests/tests_test_ctx_options-test_ctx_options.o\r\n  CXXLD    tests/test_ctx_options\r\n  CXX      tests/tests_test_ctx_destroy-test_ctx_destroy.o\r\n  CXXLD    tests/test_ctx_destroy\r\n  CXX      tests/tests_test_security_no_zap_handler-test_security_no_zap_handler.o\r\n  CXXLD    tests/test_security_no_zap_handler\r\n  CXX      tests/tests_test_security_null-test_security_null.o\r\n  CXXLD    tests/test_security_null\r\n  CXX      tests/tests_test_security_plain-test_security_plain.o\r\n  CXXLD    tests/test_security_plain\r\n  CXX      tests/tests_test_security_zap-test_security_zap.o\r\n  CXXLD    tests/test_security_zap\r\n  CXX      tests/tests_test_iov-test_iov.o\r\n  CXXLD    tests/test_iov\r\n  CXX      tests/tests_test_spec_req-test_spec_req.o\r\n  CXXLD    tests/test_spec_req\r\n  CXX      tests/tests_test_spec_rep-test_spec_rep.o\r\n  CXXLD    tests/test_spec_rep\r\n  CXX      tests/tests_test_spec_dealer-test_spec_dealer.o\r\n  CXXLD    tests/test_spec_dealer\r\n  CXX      tests/tests_test_spec_router-test_spec_router.o\r\n  CXXLD    tests/test_spec_router\r\n  CXX      tests/tests_test_spec_pushpull-test_spec_pushpull.o\r\n  CXXLD    tests/test_spec_pushpull\r\n  CXX      tests/tests_test_req_correlate-test_req_correlate.o\r\n  CXXLD    tests/test_req_correlate\r\n  CXX      tests/tests_test_req_relaxed-test_req_relaxed.o\r\n  CXXLD    tests/test_req_relaxed\r\n  CXX      tests/tests_test_conflate-test_conflate.o\r\n  CXXLD    tests/test_conflate\r\n  CXX      tests/tests_test_inproc_connect-test_inproc_connect.o\r\n  CXXLD    tests/test_inproc_connect\r\n  CXX      tests/tests_test_issue_566-test_issue_566.o\r\n  CXXLD    tests/test_issue_566\r\n  CXX      tests/tests_test_proxy-test_proxy.o\r\n  CXXLD    tests/test_proxy\r\n  CXX      tests/tests_test_proxy_hwm-test_proxy_hwm.o\r\n  CXXLD    tests/test_proxy_hwm\r\n  CXX      tests/tests_test_proxy_single_socket-test_proxy_single_socket.o\r\n  CXXLD    tests/test_proxy_single_socket\r\n  CXX      tests/tests_test_proxy_terminate-test_proxy_terminate.o\r\n  CXXLD    tests/test_proxy_terminate\r\n  CXX      tests/tests_test_getsockopt_memset-test_getsockopt_memset.o\r\n  CXXLD    tests/test_getsockopt_memset\r\n  CXX      tests/tests_test_setsockopt-test_setsockopt.o\r\n  CXXLD    tests/test_setsockopt\r\n  CXX      tests/tests_test_diffserv-test_diffserv.o\r\n  CXXLD    tests/test_diffserv\r\n  CXX      tests/tests_test_connect_rid-test_connect_rid.o\r\n  CXXLD    tests/test_connect_rid\r\n  CXX      tests/tests_test_bind_src_address-test_bind_src_address.o\r\n  CXXLD    tests/test_bind_src_address\r\n  CXX      tests/tests_test_metadata-test_metadata.o\r\n  CXXLD    tests/test_metadata\r\n  CXX      tests/tests_test_capabilities-test_capabilities.o\r\n  CXXLD    tests/test_capabilities\r\n  CXX      tests/tests_test_xpub_nodrop-test_xpub_nodrop.o\r\n  CXXLD    tests/test_xpub_nodrop\r\n  CXX      tests/tests_test_xpub_manual-test_xpub_manual.o\r\n  CXXLD    tests/test_xpub_manual\r\n  CXX      tests/tests_test_xpub_welcome_msg-test_xpub_welcome_msg.o\r\n  CXXLD    tests/test_xpub_welcome_msg\r\n  CXX      tests/tests_test_xpub_verbose-test_xpub_verbose.o\r\n  CXXLD    tests/test_xpub_verbose\r\n  CXX      tests/tests_test_atomics-test_atomics.o\r\n  CXXLD    tests/test_atomics\r\n  CXX      tests/tests_test_sockopt_hwm-test_sockopt_hwm.o\r\n  CXXLD    tests/test_sockopt_hwm\r\n  CXX      tests/tests_test_heartbeats-test_heartbeats.o\r\n  CXXLD    tests/test_heartbeats\r\n  CXX      tests/tests_test_stream_exceeds_buffer-test_stream_exceeds_buffer.o\r\n  CXXLD    tests/test_stream_exceeds_buffer\r\n  CXX      tests/tests_test_pub_invert_matching-test_pub_invert_matching.o\r\n  CXXLD    tests/test_pub_invert_matching\r\n  CXX      tests/tests_test_base85-test_base85.o\r\n  CXXLD    tests/test_base85\r\n  CXX      tests/tests_test_bind_after_connect_tcp-test_bind_after_connect_tcp.o\r\n  CXXLD    tests/test_bind_after_connect_tcp\r\n  CXX      tests/tests_test_sodium-test_sodium.o\r\n  CXXLD    tests/test_sodium\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `test_assert_success_message_errno_helper(int, char const*, char const*, int)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:47: undefined reference to `zmq_errno'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:47: undefined reference to `zmq_strerror'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:47: undefined reference to `zmq_errno'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `internal_manage_test_context(bool, bool)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:139: undefined reference to `zmq_ctx_term'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:144: undefined reference to `zmq_ctx_new'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `send_string_expect_success(void*, char const*, int)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:114: undefined reference to `zmq_send'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `recv_string_expect_success(void*, char const*, int)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:127: undefined reference to `zmq_recv'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:127: undefined reference to `zmq_recv'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `test_context_socket(int)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:219: undefined reference to `zmq_socket'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `test_context_socket_close(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:227: undefined reference to `zmq_close'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `test_context_socket_close_zero_linger(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:235: undefined reference to `zmq_setsockopt'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:236: undefined reference to `zmq_errno'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `test_bind(void*, char const*, char*, unsigned long)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:245: undefined reference to `zmq_bind'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:246: undefined reference to `zmq_getsockopt'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `bind_loopback(void*, int, char*, unsigned long)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:256: undefined reference to `zmq_setsockopt'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil_unity.o): In function `bind_loopback_ipc(void*, char*, unsigned long)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil_unity.cpp:275: undefined reference to `zmq_has'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `recv_bounce_msg(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:79: undefined reference to `zmq_getsockopt'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:83: undefined reference to `zmq_getsockopt'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `send_bounce_msg_may_fail(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:107: undefined reference to `zmq_setsockopt'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:109: undefined reference to `zmq_send'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:111: undefined reference to `zmq_send'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `recv_bounce_msg_fail(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:119: undefined reference to `zmq_setsockopt'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:121: undefined reference to `zmq_recv'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `s_recv(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:143: undefined reference to `zmq_recv'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `s_send_seq(void*, ...)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:166: undefined reference to `zmq_send'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:163: undefined reference to `zmq_send'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `s_recv_seq(void*, ...)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:178: undefined reference to `zmq_msg_init'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:198: undefined reference to `zmq_getsockopt'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:188: undefined reference to `zmq_msg_recv'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:193: undefined reference to `zmq_msg_data'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:191: undefined reference to `zmq_msg_size'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:207: undefined reference to `zmq_msg_close'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `close_zero_linger(void*)':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:213: undefined reference to `zmq_setsockopt'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:215: undefined reference to `zmq_close'\r\n./tests/libtestutil.a(tests_libtestutil_a-testutil.o): In function `is_tipc_available()':\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:306: undefined reference to `zmq_init'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:308: undefined reference to `zmq_socket'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:310: undefined reference to `zmq_bind'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:312: undefined reference to `zmq_close'\r\n/home/nemo/workspace/git_codes/zeromq-4.3.2/tests/testutil.cpp:313: undefined reference to `zmq_ctx_term'\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:3615: recipe for target 'tests/test_sodium' failed\r\nmake[2]: *** [tests/test_sodium] Error 1\r\nmake[2]: Leaving directory '/home/nemo/workspace/git_codes/zeromq-4.3.2'\r\nMakefile:7924: recipe for target 'check-am' failed\r\nmake[1]: *** [check-am] Error 2\r\nmake[1]: Leaving directory '/home/nemo/workspace/git_codes/zeromq-4.3.2'\r\nMakefile:6680: recipe for target 'check-recursive' failed\r\nmake: *** [check-recursive] Error 1\r\n```\r\n\r\n\r\n# What's the expected result?\r\nmake check compilation succeed and all tests passed.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3645", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3645/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3645/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3645/events", "html_url": "https://github.com/zeromq/libzmq/issues/3645", "id": 486853780, "node_id": "MDU6SXNzdWU0ODY4NTM3ODA=", "number": 3645, "title": "4.3.2: Crashing use-after-free in poller_base_t::execute_timers", "user": {"login": "SteveReadSNS", "id": 54665515, "node_id": "MDQ6VXNlcjU0NjY1NTE1", "avatar_url": "https://avatars1.githubusercontent.com/u/54665515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SteveReadSNS", "html_url": "https://github.com/SteveReadSNS", "followers_url": "https://api.github.com/users/SteveReadSNS/followers", "following_url": "https://api.github.com/users/SteveReadSNS/following{/other_user}", "gists_url": "https://api.github.com/users/SteveReadSNS/gists{/gist_id}", "starred_url": "https://api.github.com/users/SteveReadSNS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SteveReadSNS/subscriptions", "organizations_url": "https://api.github.com/users/SteveReadSNS/orgs", "repos_url": "https://api.github.com/users/SteveReadSNS/repos", "events_url": "https://api.github.com/users/SteveReadSNS/events{/privacy}", "received_events_url": "https://api.github.com/users/SteveReadSNS/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 370904642, "node_id": "MDU6TGFiZWwzNzA5MDQ2NDI=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(freebsd)", "name": "Platform (freebsd)", "color": "bfd4f2", "default": false, "description": null}, {"id": 933443603, "node_id": "MDU6TGFiZWw5MzM0NDM2MDM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Regression", "name": "Regression", "color": "efb1ed", "default": false, "description": ""}, {"id": 675580220, "node_id": "MDU6TGFiZWw2NzU1ODAyMjA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Symptom%20(Crash/Race/Undefined%20behavior)", "name": "Symptom (Crash/Race/Undefined behavior)", "color": "5319e7", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 17, "created_at": "2019-08-29T09:47:48Z", "updated_at": "2020-05-20T14:57:25Z", "closed_at": "2020-05-20T14:57:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nWhile `poller_base_t::execute_timers` is walking the collection of timers that are expiring / have already expired, a different thread cancels the specific timer whose timer_event method is about to be called.  In my environment, the heap functions including new/delete will fill blocks with 0x5A when they are freed.\r\n\r\nThe crash happens at line 103 of poller_base.cpp:\r\n\r\n```\r\n   it->second.sink->timer_event (it->second.id);\r\n```\r\n\r\nwhen the code attempts to dereference `it->second.sink`.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* ***The issue did not occur with 4.2.3.***\r\n* OS: FreeBSD 11.2 / amd64\r\n* Multicore CPU\r\n\r\nCalling language is C++ via cppzmq.  I only have one thread, so there are no issues surrounding my code using libzmq objects from more than one thread.  At the moment of the crash, there are three threads:\r\n* A libzmq I/O thread\r\n* My main worker thread, executing my code via boost::asio\r\n* A third thread, also in libzmq, that I'd guess is the reaper.\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\nI don't have a clear picture of what exactly causes this.  I can't tell what kind of object was just removed from the timer multimap because the iterator points to deleted memory (see note above about deleted blocks being filled with 0x5A).  My best guess is a PUB or SUB socket that's being disconnected or unbound from my code at the same moment as the TCP connection to its peer is about to be reconnected, and the poller_base_t is about to dispatch to the timer_event handler.\r\n\r\nAt certain times, my program will find that its ZeroMQ sockets are disconnected by network events at about the same time that those network events cause a notification to my program to change which endpoints it uses (unbind-then-bind on one socket, disconnect-then-connect on another).\r\n\r\nThere are also zmq IPC sockets, but they are only rarely changed while the program is running, whereas the network events mentioned above are expected to happen (even if we hope they don't), and they *will* cause the disconnect/connect and unbind/bind sequences.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n```\r\nThread 3 (process 100288):  ***Reaper?***\r\n#0  _kevent () at _kevent.S:3\r\n#1  0x000000080427ccc2 in __thr_kevent (kq=13, changelist=0x0, nchanges=0, eventlist=0x7fffdfffbf30, nevents=256, timeout=0x0)\r\n    at /home/build/snsbsd/lib/libthr/thread/thr_syscalls.c:398\r\n#2  0x00000008025fabc3 in zmq::kqueue_t::loop (this=0x805e18500) at kqueue.cpp:190\r\n#3  0x00000008026283df in thread_routine (arg_=0x805e18540) at thread.cpp:225\r\n#4  0x0000000804279c06 in thread_start (curthread=0x805e10200) at /home/build/snsbsd/lib/libthr/thread/thr_create.c:289\r\n#5  0x0000000000000000 in ?? ()\r\nCurrent language:  auto; currently asm\r\n\r\nThread 2 (process 100282):  ***My worker thread***\r\n#0  _kevent () at _kevent.S:3\r\n#1  0x000000080427ccc2 in __thr_kevent (kq=3, changelist=0x0, nchanges=0, eventlist=0x7fffffffd370, nevents=128, timeout=0x7fffffffe780)\r\n    at /home/build/snsbsd/lib/libthr/thread/thr_syscalls.c:398\r\n#2  0x0000000800ac0b27 in boost::asio::detail::kqueue_reactor::run () from /usr/Firewall/lib/libnfw++.so\r\n#3  0x0000000800ac056d in boost::asio::detail::scheduler::do_run_one () from /usr/Firewall/lib/libnfw++.so\r\n#4  0x0000000800ac01b2 in boost::asio::detail::scheduler::run () from /usr/Firewall/lib/libnfw++.so\r\n#5  0x0000000800abb913 in sns::DaemonBase::run () from /usr/Firewall/lib/libnfw++.so\r\n#6  0x00000000004097e8 in main ()\r\n\r\nThread 1 (process 100289):  *** Crashed thread***\r\n#0  zmq::poller_base_t::execute_timers (this=0x805e18700) at poller_base.cpp:103\r\n#1  0x00000008025fab58 in zmq::kqueue_t::loop (this=0x805e18700) at kqueue.cpp:177\r\n#2  0x00000008026283df in thread_routine (arg_=0x805e18740) at thread.cpp:225\r\n#3  0x0000000804279c06 in thread_start (curthread=0x805e10e00) at /home/build/snsbsd/lib/libthr/thread/thr_create.c:289\r\n#4  0x0000000000000000 in ?? ()\r\n```\r\n\r\n# What's the expected result?\r\n\r\nDoes not crash.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3641", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3641/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3641/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3641/events", "html_url": "https://github.com/zeromq/libzmq/issues/3641", "id": 484907047, "node_id": "MDU6SXNzdWU0ODQ5MDcwNDc=", "number": 3641, "title": "Semantics of ZeroMQ sockets when used with epoll", "user": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-08-25T08:51:06Z", "updated_at": "2019-08-26T13:01:06Z", "closed_at": "2019-08-25T20:11:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nHi! I would like to ask for a clarification of the semantics of using (the old, non thread-safe) ZMQ sockets with `ZMQ_FD` and `epoll`. When I use `epoll` in edge triggered mode with a `PUSH` socket and I hit the high watermark, the socket blocks (as it should). However, the problem is that once some other socket starts reading the messages, the `PUSH` socket will never unblock, i.e. there will be no more events coming from `epoll`. But if I read `ZMQ_EVENTS` after polling the socket, it will actually start to work, which is very unobvious, since this should be a simple \"getter\".\r\n\r\n`ZMQ_EVENTS` is queried by the `zmq_poll` function and when you query the events, it will actually have a side effect and process some mailbox events on the sockets, which I suppose is what solves the issue with epoll. I didn't find any mention of this anywhere though, so I would like to ask for a clarification. How should `ZMQ_EVENTS` usage be combined with `epoll`? Is querying it after an `epoll` enough? What's the situation in terms of receiving messages? There it seems to work even without `ZMQ_EVENTS`, even if I hit the high watermark. \r\n\r\nI have attached a small (omits error checking, I don't check for epoll flags, since I only expect `EPOLLOUT`, it doesn't change anything anyway) code sample that reproduces this situation. The PUSH socket tries to send as much messages as it could, in a nonblocking way, using `epoll` to wait for the socket to become writable. After hitting the HWM (I set it to 1 to trigger the situation sooner, but it does the same thing even with the default 1000), the socket blocks. It should unblock after a PULL socket starts receiving on the given TCP address, but it doesn't. Actually even if a PULL socket was receiving before I start this program, the PUSH socket will still block and `epoll` will hang indefinitely (if the PULL socket is not fast enough and PUSH still hits its HWM).\r\n\r\nThe code will only work correctly if `EPOLLIN` is specified in the epoll event descriptor and if I call `getsockopts(ZMQ_EVENTS)` after polling. If I made any error in ZMQ/epoll usage, please let me know.\r\n\r\n# Environment\r\n* libzmq version: 4.2.5\r\n* OS: Linux Mint 19.2, kernel 4.15.0-58\r\n\r\n# Minimal test code\r\n```cpp\r\n#include <zmq.hpp>\r\n#include <sys/epoll.h>\r\n#include <iostream>\r\n\r\nint main()\r\n{\r\n    void* ctx = zmq_ctx_new();\r\n    void* socket = zmq_socket(ctx, ZMQ_PUSH);\r\n    zmq_connect(socket, \"tcp://127.0.0.1:5555\");\r\n\r\n    // set HWM to one to hit the error sooner\r\n    uint32_t hwm = 1;\r\n    zmq_setsockopt(socket, ZMQ_SNDHWM, &hwm, sizeof(hwm));\r\n\r\n    int fd;\r\n    size_t size = sizeof(fd);\r\n    zmq_getsockopt(socket, ZMQ_FD, &fd, &size);\r\n\r\n    struct epoll_event event;\r\n    event.events = EPOLLIN | EPOLLOUT | EPOLLET | EPOLLHUP;\r\n    event.data.fd = fd;\r\n\r\n    int epoll = epoll_create(1);\r\n    epoll_ctl(epoll, EPOLL_CTL_ADD, fd, &event);\r\n\r\n    struct epoll_event events[10];\r\n    while (true)\r\n    {\r\n        int event_count = epoll_wait(epoll, events, 10, -1);\r\n\r\n        // if you uncomment the zmq_getsockopt call, it will work\r\n        /*int zmq_events;\r\n        zmq_getsockopt(socket, ZMQ_EVENTS, &zmq_events, &size);*/\r\n\r\n        auto send = 1;\r\n        while (send > 0)\r\n        {\r\n            zmq_msg_t msg;\r\n            zmq_msg_init_size(&msg, 5);\r\n            std::memcpy(zmq_msg_data(&msg), \"Hello\", 5);\r\n            send = zmq_msg_send(&msg, socket, ZMQ_DONTWAIT);\r\n            std::cerr << \"Sending: \" << send << std::endl;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nThe PUSH socket blocks indefinitely, no new epoll events are received if `ZMQ_EVENTS` are not queried.\r\n\r\n# What's the expected result?\r\nThe PUSH socket should unblock after some other socket starts reading the messages.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3635", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3635/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3635/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3635/events", "html_url": "https://github.com/zeromq/libzmq/issues/3635", "id": 482981708, "node_id": "MDU6SXNzdWU0ODI5ODE3MDg=", "number": 3635, "title": "Missing .lib files in Windows .Zip downloads", "user": {"login": "DhavalNiphade", "id": 21151584, "node_id": "MDQ6VXNlcjIxMTUxNTg0", "avatar_url": "https://avatars2.githubusercontent.com/u/21151584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DhavalNiphade", "html_url": "https://github.com/DhavalNiphade", "followers_url": "https://api.github.com/users/DhavalNiphade/followers", "following_url": "https://api.github.com/users/DhavalNiphade/following{/other_user}", "gists_url": "https://api.github.com/users/DhavalNiphade/gists{/gist_id}", "starred_url": "https://api.github.com/users/DhavalNiphade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DhavalNiphade/subscriptions", "organizations_url": "https://api.github.com/users/DhavalNiphade/orgs", "repos_url": "https://api.github.com/users/DhavalNiphade/repos", "events_url": "https://api.github.com/users/DhavalNiphade/events{/privacy}", "received_events_url": "https://api.github.com/users/DhavalNiphade/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-20T17:12:37Z", "updated_at": "2019-08-27T11:30:09Z", "closed_at": "2019-08-23T09:57:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nIt appears that no .lib files have been provided as part of the downloadable (.zip) binaries for Windows. This precludes users from statically linking the provided .dlls in their projects. The only work around I've found is to use LoadLibrary() or build the library from scratch. Perhaps more seasoned C++ developers could offer better advice.\r\nHistorically, .lib files were provided and made for easier integration.\r\n\r\n# Environment\r\nVisual Studio 14 (2015) x64\r\nVisual Studio 15 (2017) x64\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: Windows 10 Enterprise (17134.950)\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  None. Could not find .lib to pass to the linker\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nNULL result. No .lib\r\n\r\n# What's the expected result?\r\n---\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3629", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3629/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3629/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3629/events", "html_url": "https://github.com/zeromq/libzmq/issues/3629", "id": 479866583, "node_id": "MDU6SXNzdWU0Nzk4NjY1ODM=", "number": 3629, "title": "Is it possible to use ZMQ_ROUTER_NOTIFY with zmq::proxy()?", "user": {"login": "rzvncj", "id": 36885180, "node_id": "MDQ6VXNlcjM2ODg1MTgw", "avatar_url": "https://avatars2.githubusercontent.com/u/36885180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rzvncj", "html_url": "https://github.com/rzvncj", "followers_url": "https://api.github.com/users/rzvncj/followers", "following_url": "https://api.github.com/users/rzvncj/following{/other_user}", "gists_url": "https://api.github.com/users/rzvncj/gists{/gist_id}", "starred_url": "https://api.github.com/users/rzvncj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rzvncj/subscriptions", "organizations_url": "https://api.github.com/users/rzvncj/orgs", "repos_url": "https://api.github.com/users/rzvncj/repos", "events_url": "https://api.github.com/users/rzvncj/events{/privacy}", "received_events_url": "https://api.github.com/users/rzvncj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-12T21:50:12Z", "updated_at": "2019-08-23T12:15:16Z", "closed_at": "2019-08-23T12:14:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nThe following code works fine with the `ZMQ_ROUTER_NOTIFY` part commented out, but hangs after inputting the first line with it active:\r\n\r\n```\r\n#include <zmq.hpp>\r\n#include <errno.h>\r\n#include <exception>\r\n#include <iostream>\r\n#include <future>\r\n#include <unistd.h> // for sleep\r\n\r\nconstexpr char FRONTEND_SERVER_ADDR[] = \"tcp://*:5570\";\r\nconstexpr char FRONTEND_CLIENT_ADDR[] = \"tcp://localhost:5570\";\r\nconstexpr char BACKEND_ADDR[] = \"inproc://backend\";\r\n\r\nauto server_ctx = std::make_unique<zmq::context_t>(1);\r\n\r\n// From zhelpers.hpp (copy/pasted & slighyly modified)\r\nvoid s_dump(zmq::socket_t& socket)\r\n{\r\n    while (true) {\r\n        zmq::message_t message;\r\n        socket.recv(&message);\r\n\r\n        int size = message.size();\r\n        std::string data(static_cast<char*>(message.data()), size);\r\n\r\n        std::cout << \"echoed back> \" << data << std::endl;\r\n        int more = 0;           //  Multipart detection\r\n        size_t more_size = sizeof(more);\r\n        \r\n        socket.getsockopt (ZMQ_RCVMORE, &more, &more_size);\r\n\r\n        if (!more)\r\n            break;              //  Last message part\r\n    }\r\n}\r\n\r\nvoid wait_for_data()\r\n{\r\n    zmq::socket_t worker(*server_ctx, ZMQ_DEALER);\r\n\r\n    worker.connect(BACKEND_ADDR);\r\n\r\n    try {\r\n        for (;;) {\r\n\r\n            // std::cout << \"0\" << std::endl;\r\n            zmq::message_t identity;\r\n            zmq::message_t msg;\r\n\r\n            worker.recv(&identity);\r\n            worker.recv(&msg);\r\n\r\n            zmq::message_t copied_id;\r\n            zmq::message_t copied_msg;\r\n\r\n            copied_id.copy(&identity);\r\n            copied_msg.copy(&msg);\r\n\r\n            worker.send(copied_id, ZMQ_SNDMORE);\r\n            worker.send(copied_msg);\r\n        }        \r\n    } catch (const zmq::error_t &ze) {\r\n        if (ze.num() == ETERM)\r\n            std::cout << \"Worker quitting.\" << std::endl;\r\n        else\r\n            std::cerr << \"0MQ data error: \" << ze.what() <<\"\\n\";        \r\n    } catch (const std::exception &e) {\r\n        std::cerr << \"Data error: \" << e.what() << \"\\n\";        \r\n    } catch (...) {\r\n        std::cerr << \"Data error\\n\";\r\n    }\r\n}\r\n\r\nvoid start_server()\r\n{\r\n    zmq::socket_t frontend(*server_ctx, ZMQ_ROUTER);\r\n    zmq::socket_t backend(*server_ctx, ZMQ_DEALER);\r\n\r\n    frontend.bind(FRONTEND_SERVER_ADDR);\r\n    backend.bind(BACKEND_ADDR);\r\n\r\n    // int opt = ZMQ_NOTIFY_CONNECT;\r\n    \r\n    auto data = std::async(std::launch::async, wait_for_data);\r\n\r\n    // frontend.setsockopt(ZMQ_ROUTER_NOTIFY, &opt, sizeof(opt));\r\n\r\n    try {\r\n        zmq::proxy(frontend, backend, nullptr);\r\n    } catch (const zmq::error_t &ze) {\r\n        if (ze.num() == ETERM)\r\n            std::cout << \"Server quitting.\" << std::endl;\r\n        else\r\n            std::cerr << \"0MQ server error: \" << ze.what() <<\"\\n\";        \r\n    } catch (const std::exception& e) {\r\n        std::cerr << \"Server error: \" << e.what() << \"\\n\";\r\n    } catch (...) {\r\n        std::cerr << \"Server error\\n\";\r\n    }\r\n}\r\n\r\nvoid start_client()\r\n{\r\n    zmq::context_t client_ctx(1);\r\n    zmq::socket_t client_socket(client_ctx, ZMQ_DEALER);\r\n\r\n    constexpr auto APPID {42}; // The HHG answer to everything.\r\n\r\n    std::string id = std::to_string(APPID);\r\n    \r\n    client_socket.setsockopt(ZMQ_IDENTITY, id.c_str(), id.length());\r\n    client_socket.connect(FRONTEND_CLIENT_ADDR);\r\n    \r\n    std::string line;\r\n    std::cout << \"input> \";\r\n    std::getline(std::cin, line);\r\n\r\n    while (std::cin && line != \"quit\") {\r\n        client_socket.send(line.c_str(), line.length());\r\n        s_dump(client_socket);\r\n        \r\n        std::cout << \"input> \";\r\n        std::getline(std::cin, line);\r\n    }\r\n\r\n    server_ctx.reset();\r\n}\r\n\r\nint main (void)\r\n{\r\n    auto server = std::async(std::launch::async, start_server);\r\n    auto client = std::async(std::launch::async, start_client);\r\n    \r\n    return 0;\r\n}\r\n```\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.1 (community/zeromq 4.3.1-2 package)\r\n* OS: Arch Linux\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  Run the code in the description. \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nThe application hangs after inputting the first line.\r\n\r\n# What's the expected result?\r\n\r\nWith enough presses of the Enter key, I'd expect the code to move on.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3611", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3611/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3611/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3611/events", "html_url": "https://github.com/zeromq/libzmq/issues/3611", "id": 477961666, "node_id": "MDU6SXNzdWU0Nzc5NjE2NjY=", "number": 3611, "title": "PUB/SUB filtering on publisher side", "user": {"login": "vsmelov", "id": 9407507, "node_id": "MDQ6VXNlcjk0MDc1MDc=", "avatar_url": "https://avatars2.githubusercontent.com/u/9407507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsmelov", "html_url": "https://github.com/vsmelov", "followers_url": "https://api.github.com/users/vsmelov/followers", "following_url": "https://api.github.com/users/vsmelov/following{/other_user}", "gists_url": "https://api.github.com/users/vsmelov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsmelov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsmelov/subscriptions", "organizations_url": "https://api.github.com/users/vsmelov/orgs", "repos_url": "https://api.github.com/users/vsmelov/repos", "events_url": "https://api.github.com/users/vsmelov/events{/privacy}", "received_events_url": "https://api.github.com/users/vsmelov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-07T14:24:18Z", "updated_at": "2019-09-02T11:21:09Z", "closed_at": "2019-09-02T11:21:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "# How does per-topic filtering works?\r\n\r\nWhen I use PUB/SUB and subscribe for some specific topics, does filtering happen on PUB side or on SUB side?\r\nI cannot find any definite answer in ZMQ docs.\r\n\r\nHere they say that it's done on SUB (what is inefficient)\r\n\r\nhttps://learning-0mq-with-pyzmq.readthedocs.io/en/latest/pyzmq/patterns/pubsub.html\r\n> The current version of zmq supports filtering of messages based on topics at subscriber side. This is usually set via socketoption.\r\n\r\n> In the current versions of \u00d8MQ, filtering happens at the subscriber side, not the publisher side.\r\n\r\nBut here they say that it's done on PUB side.\r\n\r\nhttps://stackoverflow.com/questions/26533016/pyzmq-how-do-you-filter-at-publisher-side\r\n\r\nhttps://github.com/zeromq/libzmq/issues/2068\r\n\r\nHow does it really work?\r\nCan you add more explanations to ZMQ Guide?\r\n\r\nThank you :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3606", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3606/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3606/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3606/events", "html_url": "https://github.com/zeromq/libzmq/issues/3606", "id": 475872294, "node_id": "MDU6SXNzdWU0NzU4NzIyOTQ=", "number": 3606, "title": "electron-rebuild errors on Mac", "user": {"login": "axfelix", "id": 252047, "node_id": "MDQ6VXNlcjI1MjA0Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/252047?v=4", "gravatar_id": "", "url": "https://api.github.com/users/axfelix", "html_url": "https://github.com/axfelix", "followers_url": "https://api.github.com/users/axfelix/followers", "following_url": "https://api.github.com/users/axfelix/following{/other_user}", "gists_url": "https://api.github.com/users/axfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/axfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/axfelix/subscriptions", "organizations_url": "https://api.github.com/users/axfelix/orgs", "repos_url": "https://api.github.com/users/axfelix/repos", "events_url": "https://api.github.com/users/axfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/axfelix/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-01T20:23:35Z", "updated_at": "2019-08-01T20:24:26Z", "closed_at": "2019-08-01T20:24:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nI can't seem to rebuild this module properly. Running `npm rebuild libzmq` finishes immediately and doesn't appear to do anything (as I still get the `NODE_VERSION` mismatches afterward), and trying to do `electron-rebuild -v 5.0.8` throws\r\n\r\n```\r\nclang: error: no such file or directory: './Release/../../zmq/lib/libzmq.a'\r\n```\r\n\r\n# Environment\r\n\r\nmacOS 10.14.5\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3603", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3603/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3603/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3603/events", "html_url": "https://github.com/zeromq/libzmq/issues/3603", "id": 474943237, "node_id": "MDU6SXNzdWU0NzQ5NDMyMzc=", "number": 3603, "title": "Fails to build on SL6.9 because of old unity version C99 incompatibility", "user": {"login": "bl0x", "id": 13535914, "node_id": "MDQ6VXNlcjEzNTM1OTE0", "avatar_url": "https://avatars1.githubusercontent.com/u/13535914?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bl0x", "html_url": "https://github.com/bl0x", "followers_url": "https://api.github.com/users/bl0x/followers", "following_url": "https://api.github.com/users/bl0x/following{/other_user}", "gists_url": "https://api.github.com/users/bl0x/gists{/gist_id}", "starred_url": "https://api.github.com/users/bl0x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bl0x/subscriptions", "organizations_url": "https://api.github.com/users/bl0x/orgs", "repos_url": "https://api.github.com/users/bl0x/repos", "events_url": "https://api.github.com/users/bl0x/events{/privacy}", "received_events_url": "https://api.github.com/users/bl0x/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 164697224, "node_id": "MDU6TGFiZWwxNjQ2OTcyMjQ=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Build/Compilation)", "name": "Area (Build/Compilation)", "color": "fbca04", "default": false, "description": null}, {"id": 361105095, "node_id": "MDU6TGFiZWwzNjExMDUwOTU=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(linux/generic)", "name": "Platform (linux/generic)", "color": "bfd4f2", "default": false, "description": null}, {"id": 933443603, "node_id": "MDU6TGFiZWw5MzM0NDM2MDM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Regression", "name": "Regression", "color": "efb1ed", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-31T05:27:04Z", "updated_at": "2019-08-01T09:45:40Z", "closed_at": "2019-08-01T06:46:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nBuild fails with error message because of C99 style variable initialisation in bundled unity framework.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased):\r\ncommit a8d19057b109ce637aa19cda1a3c6d3402143a3a\r\n* OS: \r\nScientific Linux 6.9\r\n* Compiler:\r\ngcc 4.4.7\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1. Compilation fails \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n[ 49%] Building C object tests/CMakeFiles/unity.dir/__/external/unity/unity.c.o\r\n/home/AMS/drasiams/libzmq/external/unity/unity.c: In function \u2018UnityParseOptions\u2019:\r\n/home/AMS/drasiams/libzmq/external/unity/unity.c:1408: error: \u2018for\u2019 loop initial declarations are only allowed in C99 mode\r\n/home/AMS/drasiams/libzmq/external/unity/unity.c:1408: note: use option -std=c99 or -std=gnu99 to compile your code\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\nCompilation should succeed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3599", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3599/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3599/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3599/events", "html_url": "https://github.com/zeromq/libzmq/issues/3599", "id": 473535942, "node_id": "MDU6SXNzdWU0NzM1MzU5NDI=", "number": 3599, "title": "Assertion failed on zmq_close(): (pfd.revents & POLLIN)", "user": {"login": "ironMann", "id": 276684, "node_id": "MDQ6VXNlcjI3NjY4NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/276684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ironMann", "html_url": "https://github.com/ironMann", "followers_url": "https://api.github.com/users/ironMann/followers", "following_url": "https://api.github.com/users/ironMann/following{/other_user}", "gists_url": "https://api.github.com/users/ironMann/gists{/gist_id}", "starred_url": "https://api.github.com/users/ironMann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ironMann/subscriptions", "organizations_url": "https://api.github.com/users/ironMann/orgs", "repos_url": "https://api.github.com/users/ironMann/repos", "events_url": "https://api.github.com/users/ironMann/events{/privacy}", "received_events_url": "https://api.github.com/users/ironMann/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-26T21:06:16Z", "updated_at": "2019-07-26T21:46:25Z", "closed_at": "2019-07-26T21:46:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nClosing a socket while in `zmq_recv()` (from a different thread) results in violation of zeromq assertion in `poll()`-based `zmq::signaler_t::wait()` method: `zmq_assert (pfd.revents & POLLIN);` In this case, `poll()` will set `POLLNVAL` in the `revents`, which is not checked.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): master a56d36b8e55d8ade117d1cec13b31543642686d8\r\n* OS: Centos 7.6\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n1.  call `zmq_close()` on a socket, while blocked in `zmq_recv()` in another thread\r\n\r\n\r\n# What's the actual result? \r\n`Assertion failed: pfd.revents & POLLIN (src/signaler.cpp:261)`\r\nCall stack:\r\n```\r\n(gdb) bt\r\n#0  0x00007fb1719712c7 in raise () from /lib64/libc.so.6\r\n#1  0x00007fb1719729b8 in abort () from /lib64/libc.so.6\r\n#2  0x00007fb16ddfecf9 in zmq::zmq_abort(char const*) () ZeroMQ/v4.3.2-2/lib/libzmq.so.5\r\n#3  0x00007fb16de213e2 in zmq::signaler_t::wait(int) () ZeroMQ/v4.3.2-2/lib/libzmq.so.5\r\n#4  0x00007fb16de0406c in zmq::mailbox_t::recv(zmq::command_t*, int) () ZeroMQ/v4.3.2-2/lib/libzmq.so.5\r\n#5  0x00007fb16de22d62 in zmq::socket_base_t::process_commands(int, bool) () ZeroMQ/v4.3.2-2/lib/libzmq.so.5\r\n#6  0x00007fb16de23b61 in zmq::socket_base_t::recv(zmq::msg_t*, int) () ZeroMQ/v4.3.2-2/lib/libzmq.so.5\r\n#7  0x00007fb16de47dc9 in s_recvmsg(zmq::socket_base_t*, zmq_msg_t*, int) () ZeroMQ/v4.3.2-2/lib/libzmq.so.5\r\n```\r\n\r\n# What's the expected result?\r\nReturn to user code with an appropriate `errno`, like `ENOTSOCK`.\r\n\r\n# Proposed fix\r\nCheck `poll()` output flags for error condition and avoid aborting the application.\r\n```diff\r\ndiff --git a/src/mailbox.cpp b/src/mailbox.cpp\r\nindex 2fb0fe0..e656ef5 100644\r\n--- a/src/mailbox.cpp\r\n+++ b/src/mailbox.cpp\r\n@@ -80,7 +80,7 @@ int zmq::mailbox_t::recv (command_t *cmd_, int timeout_)\r\n     //  Wait for signal from the command sender.\r\n     int rc = _signaler.wait (timeout_);\r\n     if (rc == -1) {\r\n-        errno_assert (errno == EAGAIN || errno == EINTR);\r\n+        errno_assert (errno == EAGAIN || errno == EINTR || errno == ENOTSOCK);\r\n         return -1;\r\n     }\r\n\r\ndiff --git a/src/signaler.cpp b/src/signaler.cpp\r\nindex 3f22fc9..393a81d 100644\r\n--- a/src/signaler.cpp\r\n+++ b/src/signaler.cpp\r\n@@ -248,6 +248,10 @@ int zmq::signaler_t::wait (int timeout_)\r\n         errno = EAGAIN;\r\n         return -1;\r\n     }\r\n+    if (unlikely (pfd.revents & (POLLERR | POLLNVAL))) {\r\n+        errno = ENOTSOCK;\r\n+        return -1;\r\n+    }\r\n #ifdef HAVE_FORK\r\n     if (unlikely (pid != getpid ())) {\r\n         // we have forked and the file descriptor is closed. Emulate an interrupt\r\ndiff --git a/src/socket_base.cpp b/src/socket_base.cpp\r\nindex 993a2e2..a0567bd 100644\r\n--- a/src/socket_base.cpp\r\n+++ b/src/socket_base.cpp\r\n@@ -1434,7 +1434,7 @@ int zmq::socket_base_t::process_commands (int timeout_, bool throttle_)\r\n         rc = _mailbox->recv (&cmd, 0);\r\n     }\r\n\r\n-    if (errno == EINTR)\r\n+    if (errno == EINTR || errno == ENOTSOCK)\r\n         return -1;\r\n\r\n     zmq_assert (errno == EAGAIN);\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3596", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3596/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3596/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3596/events", "html_url": "https://github.com/zeromq/libzmq/issues/3596", "id": 473122869, "node_id": "MDU6SXNzdWU0NzMxMjI4Njk=", "number": 3596, "title": "Assertion failed: _input_stopped", "user": {"login": "jean-airoldie", "id": 25088801, "node_id": "MDQ6VXNlcjI1MDg4ODAx", "avatar_url": "https://avatars3.githubusercontent.com/u/25088801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jean-airoldie", "html_url": "https://github.com/jean-airoldie", "followers_url": "https://api.github.com/users/jean-airoldie/followers", "following_url": "https://api.github.com/users/jean-airoldie/following{/other_user}", "gists_url": "https://api.github.com/users/jean-airoldie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jean-airoldie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jean-airoldie/subscriptions", "organizations_url": "https://api.github.com/users/jean-airoldie/orgs", "repos_url": "https://api.github.com/users/jean-airoldie/repos", "events_url": "https://api.github.com/users/jean-airoldie/events{/privacy}", "received_events_url": "https://api.github.com/users/jean-airoldie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 361093800, "node_id": "MDU6TGFiZWwzNjEwOTM4MDA=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Runtime%20/%20Usage)", "name": "Area (Runtime / Usage)", "color": "d4c5f9", "default": false, "description": null}, {"id": 835469096, "node_id": "MDU6TGFiZWw4MzU0NjkwOTY=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Socket%20(CLIENT/SERVER)", "name": "Socket (CLIENT/SERVER)", "color": "1d76db", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-26T00:23:08Z", "updated_at": "2020-05-21T09:00:59Z", "closed_at": "2020-01-18T10:44:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue description\r\nI get an assertion failure caused by: https://github.com/zeromq/libzmq/blob/latest_release/src/stream_engine.cpp#L467 while using `CLIENT` and `SERVER` socket. Specifically the assertion occurs when the `Server` socket is streaming to a slow `CLIENT` that also has a very low recv high water mark and heartbeating turned on.\r\n\r\n# Environment\r\n\r\n* libzmq version 4.3.2\r\n* OS: centos7\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n* Create a `CLIENT` and `SERVER` socket and connect them to each other via TCP.\r\n* Set the `CLIENT`'s heartbeat interval to 1 second and its recv high water mark to 1.\r\n* Send an empty message from the `CLIENT` to the `SERVER` and retrieve the routing\r\n  id of the `CLIENT`.\r\n* Move the `SERVER` to a new thread and send empty messages to the `CLIENT` using the routing id in a loop.\r\n* Now create a loop for the `CLIENT` where it receives a message then waits 3 seconds after receiving each message to simulate a slow client.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nNote that I vendor the libzmq source in a rust package, which explains the naming.\r\n\r\n## Assertion\r\n`Assertion failed: _input_stopped (/home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/stream_engine.cpp:467)`\r\n\r\n## Backtrace\r\n```\r\n#0  zmq::stream_engine_t::restart_input (this=0x7fffe8000e30) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/stream_engine.cpp:467\r\n#1  0x000055555579d009 in zmq::session_base_t::write_activated (this=0x555555b07000, pipe_=0x555555b0f660)\r\n    at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/session_base.cpp:313\r\n#2  0x00005555557686d2 in zmq::pipe_t::process_activate_write (this=0x555555b0f660, msgs_read_=5) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/pipe.cpp:287\r\n#3  0x0000555555760233 in zmq::object_t::process_command (this=0x555555b0f660, cmd_=...) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/object.cpp:79\r\n#4  0x000055555575c81c in zmq::io_thread_t::in_event (this=0x555555b03350) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/io_thread.cpp:91\r\n#5  0x000055555575b6d5 in zmq::epoll_t::loop (this=0x555555b03890) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/epoll.cpp:206\r\n#6  0x000055555576ac49 in zmq::worker_poller_base_t::worker_routine (arg_=0x555555b03890) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/poller_base.cpp:139\r\n#7  0x000055555577c1f9 in thread_routine (arg_=0x555555b038e8) at /home/maxence/.cargo/registry/src/github.com-1ecc6299db9ec823/zeromq-src-0.1.7+4.3.2/vendor/src/thread.cpp:225\r\n#8  0x00007ffff74b3dd5 in start_thread (arg=0x7ffff63c5700) at pthread_create.c:307\r\n#9  0x00007ffff6fc702d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\r\n```\r\n\r\n# What's the expected result?\r\nThe code should run forever without an assertion error.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3592", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3592/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3592/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3592/events", "html_url": "https://github.com/zeromq/libzmq/issues/3592", "id": 472178695, "node_id": "MDU6SXNzdWU0NzIxNzg2OTU=", "number": 3592, "title": "Problem: zmq_poller_wait doesn't error when polling a closed socket", "user": {"login": "jean-airoldie", "id": 25088801, "node_id": "MDQ6VXNlcjI1MDg4ODAx", "avatar_url": "https://avatars3.githubusercontent.com/u/25088801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jean-airoldie", "html_url": "https://github.com/jean-airoldie", "followers_url": "https://api.github.com/users/jean-airoldie/followers", "following_url": "https://api.github.com/users/jean-airoldie/following{/other_user}", "gists_url": "https://api.github.com/users/jean-airoldie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jean-airoldie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jean-airoldie/subscriptions", "organizations_url": "https://api.github.com/users/jean-airoldie/orgs", "repos_url": "https://api.github.com/users/jean-airoldie/repos", "events_url": "https://api.github.com/users/jean-airoldie/events{/privacy}", "received_events_url": "https://api.github.com/users/jean-airoldie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-24T09:34:01Z", "updated_at": "2019-07-24T09:50:07Z", "closed_at": "2019-07-24T09:50:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "* libzmq version: 4.3.2\r\n* OS: fedora 29\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n*  Create a poller.\r\n* Create a socket.\r\n* Add the socket to the poller.\r\n* Close the socket.\r\n* Call zmq_poller_wait on the poller with infinite timeout\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nThe poller blocks forever.\r\n\r\n# What's the expected result?\r\nThe poller errors out with `ENOTSOCK`.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3589", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3589/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3589/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3589/events", "html_url": "https://github.com/zeromq/libzmq/issues/3589", "id": 470713743, "node_id": "MDU6SXNzdWU0NzA3MTM3NDM=", "number": 3589, "title": "No simple way (aka no ZAP) to check client public key for authn", "user": {"login": "rixed", "id": 449990, "node_id": "MDQ6VXNlcjQ0OTk5MA==", "avatar_url": "https://avatars1.githubusercontent.com/u/449990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rixed", "html_url": "https://github.com/rixed", "followers_url": "https://api.github.com/users/rixed/followers", "following_url": "https://api.github.com/users/rixed/following{/other_user}", "gists_url": "https://api.github.com/users/rixed/gists{/gist_id}", "starred_url": "https://api.github.com/users/rixed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rixed/subscriptions", "organizations_url": "https://api.github.com/users/rixed/orgs", "repos_url": "https://api.github.com/users/rixed/repos", "events_url": "https://api.github.com/users/rixed/events{/privacy}", "received_events_url": "https://api.github.com/users/rixed/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-20T20:55:47Z", "updated_at": "2019-07-21T09:58:32Z", "closed_at": "2019-07-21T08:43:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nMy server knows of all client public keys and I'd like to use this client registry to authenticate the clients. I initially though that calling getPublicKey on the server would return the client public key, but apparently, that's just usable from the client to retrieve the key that's just been set.\r\nWouldn't that be more useful if getsockopt would return the client public key seen on that socket after the INITIATE?\r\nImplementation seems trivial: after the INITIATE, once the client key is extracted from the box, save it in the socket (like, for instance, last_endpoints are saved), for a later getsockopt to retrieve it?\r\nWould such a patch be welcomed or is this design flawed?\r\n\r\nSee also the exact same question on stack-overflow:\r\nhttps://stackoverflow.com/questions/53839829/zeromq-how-to-get-the-public-key-of-a-client-when-using-a-router-socket-with-zm#\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: Linux and MacOK\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  call getsockopt on ZMQ_CURVE_PUBLICKEY from a curve server after a client has been authenticated by the curve server\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nReceive a zeroed buffer\r\n\r\n# What's the expected result?\r\n\r\nReceive the actual public key set by the client", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3586", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3586/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3586/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3586/events", "html_url": "https://github.com/zeromq/libzmq/issues/3586", "id": 469502986, "node_id": "MDU6SXNzdWU0Njk1MDI5ODY=", "number": 3586, "title": "Error when compiling with MinGW due to usage of MS-specific __except keyword", "user": {"login": "Rush", "id": 115926, "node_id": "MDQ6VXNlcjExNTkyNg==", "avatar_url": "https://avatars2.githubusercontent.com/u/115926?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rush", "html_url": "https://github.com/Rush", "followers_url": "https://api.github.com/users/Rush/followers", "following_url": "https://api.github.com/users/Rush/following{/other_user}", "gists_url": "https://api.github.com/users/Rush/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rush/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rush/subscriptions", "organizations_url": "https://api.github.com/users/Rush/orgs", "repos_url": "https://api.github.com/users/Rush/repos", "events_url": "https://api.github.com/users/Rush/events{/privacy}", "received_events_url": "https://api.github.com/users/Rush/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 164697224, "node_id": "MDU6TGFiZWwxNjQ2OTcyMjQ=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Area%20(Build/Compilation)", "name": "Area (Build/Compilation)", "color": "fbca04", "default": false, "description": null}, {"id": 361102983, "node_id": "MDU6TGFiZWwzNjExMDI5ODM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Platform%20(windows/mingw)", "name": "Platform (windows/mingw)", "color": "bfd4f2", "default": false, "description": null}, {"id": 933443603, "node_id": "MDU6TGFiZWw5MzM0NDM2MDM=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Regression", "name": "Regression", "color": "efb1ed", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-17T23:52:20Z", "updated_at": "2019-08-10T10:04:44Z", "closed_at": "2019-07-30T12:42:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nTrying to compile libzmq with MinGW - the issue is fairly obvious. `__except` should not have gone through a code review as it's a Microsoft specific extension.\r\n\r\nhttps://github.com/zeromq/libzmq/blame/aac3cd4d93d288b29b71806c2478a947d66238b6/src/thread.cpp#L136\r\n\r\n```\r\nsrc/thread.cpp:128: warning: ignoring #pragma warning  [-Wunknown-pragmas]\r\n #pragma warning(push)                                                                                                                                                                                                                                       \r\n                                                                                                                                                                                                                                                             \r\nsrc/thread.cpp:129: warning: ignoring #pragma warning  [-Wunknown-pragmas]                                                                                                                                                                                   \r\n #pragma warning(disable : 6320 6322)                                                                                                                                                                                                                        \r\n                                                                                                                                                                                                                                                             \r\nsrc/thread.cpp:138: warning: ignoring #pragma warning  [-Wunknown-pragmas]                                                                                                                                                                                   \r\n #pragma warning(pop)                                                                                                                                                                                                                                        \r\n                                                                                                                                                                                                                                                             \r\nsrc/thread.cpp: In member function 'void zmq::thread_t::applyThreadName()':                                                                                                                                                                                  \r\nsrc/thread.cpp:136:5: error: expected 'catch' before '__except'                                                                                                                                                                                              \r\n     __except (EXCEPTION_CONTINUE_EXECUTION) {                                                                                                                                                                                                               \r\n     ^~~~~~~~                                                                                                                                                                                                                                                \r\nsrc/thread.cpp:136:5: error: expected '(' before '__except'                                                                                                                                                                                                  \r\n     __except (EXCEPTION_CONTINUE_EXECUTION) {                                                                                                                                                                                                               \r\n     ^~~~~~~~                                                                                                                                                                                                                                                \r\n     (                                                                                                                                                                                                                                                       \r\nsrc/thread.cpp:136:5: error: expected type-specifier before '__except'                                                                                                                                                                                       \r\n     __except (EXCEPTION_CONTINUE_EXECUTION) {                                                                                                                                                                                                               \r\n     ^~~~~~~~                                                                                                                                                                                                                                                \r\nsrc/thread.cpp:136:13: error: expected ')' before '(' token                                                                                                                                                                                                  \r\n     __except (EXCEPTION_CONTINUE_EXECUTION) {                                                                                                                                                                                                               \r\n     ~~~~~~~~^~                                                                                                                                                                                                                                              \r\n             )                                                                                                                                                                                                                                               \r\nsrc/thread.cpp:136:14: error: expected '{' before '(' token                                                                                                                                                                                                  \r\n     __except (EXCEPTION_CONTINUE_EXECUTION) {                                                                                                                                                                                                               \r\n              ^                                                                                                                                                                                                                                              \r\nsrc/thread.cpp:136:44: error: expected ';' before '{' token                                                                                                                                                                                                  \r\n     __except (EXCEPTION_CONTINUE_EXECUTION) {                                                                                                                                                                                                               \r\n                                            ^~                                                                                                                                                                                                               \r\n                                            ;                          \r\n```\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): \r\n* OS: Docker / openSUSE Leap 15.1\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\nCan provide a `Dockerfile` upon request.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3583", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3583/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3583/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3583/events", "html_url": "https://github.com/zeromq/libzmq/issues/3583", "id": 468192602, "node_id": "MDU6SXNzdWU0NjgxOTI2MDI=", "number": 3583, "title": "How can we transform **cleanly** a communication based on HTTP API --> to a message communication   using ZMQ library ?", "user": {"login": "smaillns", "id": 25650563, "node_id": "MDQ6VXNlcjI1NjUwNTYz", "avatar_url": "https://avatars3.githubusercontent.com/u/25650563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaillns", "html_url": "https://github.com/smaillns", "followers_url": "https://api.github.com/users/smaillns/followers", "following_url": "https://api.github.com/users/smaillns/following{/other_user}", "gists_url": "https://api.github.com/users/smaillns/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaillns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaillns/subscriptions", "organizations_url": "https://api.github.com/users/smaillns/orgs", "repos_url": "https://api.github.com/users/smaillns/repos", "events_url": "https://api.github.com/users/smaillns/events{/privacy}", "received_events_url": "https://api.github.com/users/smaillns/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-15T15:28:04Z", "updated_at": "2019-07-17T09:28:18Z", "closed_at": "2019-07-15T20:44:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3582", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3582/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3582/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3582/events", "html_url": "https://github.com/zeromq/libzmq/issues/3582", "id": 468167081, "node_id": "MDU6SXNzdWU0NjgxNjcwODE=", "number": 3582, "title": "Assertion failed: false (src/object.cpp:166)", "user": {"login": "lukaszsamson", "id": 1078186, "node_id": "MDQ6VXNlcjEwNzgxODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1078186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszsamson", "html_url": "https://github.com/lukaszsamson", "followers_url": "https://api.github.com/users/lukaszsamson/followers", "following_url": "https://api.github.com/users/lukaszsamson/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszsamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszsamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszsamson/subscriptions", "organizations_url": "https://api.github.com/users/lukaszsamson/orgs", "repos_url": "https://api.github.com/users/lukaszsamson/repos", "events_url": "https://api.github.com/users/lukaszsamson/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszsamson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-07-15T14:39:59Z", "updated_at": "2019-07-30T12:51:22Z", "closed_at": "2019-07-30T12:51:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nAssertion failed: false (src/object.cpp:166)\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2\r\n* OS: macOS 10.14.5\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\nThe bug is nondeterministic. My app is using erlang wrapper on libzmq but the stack trace does not tell where it fails. The app sends and receives messages over dealer socket and receives messages from sub socket.\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n```\r\nAssertion failed: false (src/object.cpp:166)\r\nAbort trap: 6\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3576", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3576/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3576/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3576/events", "html_url": "https://github.com/zeromq/libzmq/issues/3576", "id": 467053879, "node_id": "MDU6SXNzdWU0NjcwNTM4Nzk=", "number": 3576, "title": "CURVE plaintext should be placed in secure memory", "user": {"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "sigiesec", "id": 16757805, "node_id": "MDQ6VXNlcjE2NzU3ODA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16757805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sigiesec", "html_url": "https://github.com/sigiesec", "followers_url": "https://api.github.com/users/sigiesec/followers", "following_url": "https://api.github.com/users/sigiesec/following{/other_user}", "gists_url": "https://api.github.com/users/sigiesec/gists{/gist_id}", "starred_url": "https://api.github.com/users/sigiesec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sigiesec/subscriptions", "organizations_url": "https://api.github.com/users/sigiesec/orgs", "repos_url": "https://api.github.com/users/sigiesec/repos", "events_url": "https://api.github.com/users/sigiesec/events{/privacy}", "received_events_url": "https://api.github.com/users/sigiesec/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2019-07-11T18:56:16Z", "updated_at": "2019-07-16T12:10:34Z", "closed_at": "2019-07-16T12:10:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "For additional security, unencrypted plaintext should be placed in secure memory when using CURVE security.\n\nPoints to consider:\n- Is this effective for the message payload? Can we ensure this is for all copies that are under control of libzmq, and enable the user to ensure this as well?\n- We should care to reduce the number of secure memory allocations to a minimum since this is a very costly operation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3574", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3574/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3574/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3574/events", "html_url": "https://github.com/zeromq/libzmq/issues/3574", "id": 466635121, "node_id": "MDU6SXNzdWU0NjY2MzUxMjE=", "number": 3574, "title": "Zmq Questions about Block Rollback", "user": {"login": "Rui2guo", "id": 42934194, "node_id": "MDQ6VXNlcjQyOTM0MTk0", "avatar_url": "https://avatars3.githubusercontent.com/u/42934194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rui2guo", "html_url": "https://github.com/Rui2guo", "followers_url": "https://api.github.com/users/Rui2guo/followers", "following_url": "https://api.github.com/users/Rui2guo/following{/other_user}", "gists_url": "https://api.github.com/users/Rui2guo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rui2guo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rui2guo/subscriptions", "organizations_url": "https://api.github.com/users/Rui2guo/orgs", "repos_url": "https://api.github.com/users/Rui2guo/repos", "events_url": "https://api.github.com/users/Rui2guo/events{/privacy}", "received_events_url": "https://api.github.com/users/Rui2guo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-11T03:08:06Z", "updated_at": "2019-07-11T08:46:49Z", "closed_at": "2019-07-11T08:46:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\n\r\nhello,\r\nI'd like to ask ZMQ whether block monitoring for bitcoin will process rollback blocks into queues\r\nIn Jul-10-2019 11:24:15 Block rollback occurred in BSV network\r\n\r\nBut I found that ZMQ hashblock listener did not listen for the correct hash of the rollback block.\r\nOriginal Chain\uff1a 590482 -->590483 --->590484\r\n \r\nNormal occurrence block rollback chain:590482 -->590483(r) --->590484(r)-->590485--->(......)\r\nZMQ is not acquired the 590483(r) 590484(r) blockhash ,but the blockhash of 590485 is acquired. the old 590483 590484 is acquired\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3572", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3572/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3572/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3572/events", "html_url": "https://github.com/zeromq/libzmq/issues/3572", "id": 466126572, "node_id": "MDU6SXNzdWU0NjYxMjY1NzI=", "number": 3572, "title": "BUS error during zmq_poll", "user": {"login": "lukaszsamson", "id": 1078186, "node_id": "MDQ6VXNlcjEwNzgxODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1078186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszsamson", "html_url": "https://github.com/lukaszsamson", "followers_url": "https://api.github.com/users/lukaszsamson/followers", "following_url": "https://api.github.com/users/lukaszsamson/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszsamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszsamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszsamson/subscriptions", "organizations_url": "https://api.github.com/users/lukaszsamson/orgs", "repos_url": "https://api.github.com/users/lukaszsamson/repos", "events_url": "https://api.github.com/users/lukaszsamson/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszsamson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-10T06:35:16Z", "updated_at": "2020-05-18T15:41:52Z", "closed_at": "2020-05-18T15:04:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nBUS error detected by Address sanitizer in zmq_poll\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.2.5\r\n* OS: macOS 10.14.5\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\nThe bug is nondeterministic, it usually happens after a few hours. My app uses erlang wrapper on libzmq and the crash happens when a background thread tries to poll messages https://github.com/esl/erlzmq/blob/master/c_src/erlzmq_nif.c#L912\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==28339==ERROR: AddressSanitizer: BUS on unknown address 0x611014800004 (pc 0x00005f166809 bp 0x700001eb8bb0 sp 0x700001eb8ba0 T34)\r\n    #0 0x5f166808 in zmq::object_t::process_command(zmq::command_t&) (libzmq.5.dylib:x86_64+0x26808)\r\n    #1 0x5f17d4bb in zmq::socket_base_t::process_commands(int, bool) (libzmq.5.dylib:x86_64+0x3d4bb)\r\n    #2 0x5f17d126 in zmq::socket_base_t::getsockopt(int, void*, unsigned long*) (libzmq.5.dylib:x86_64+0x3d126)\r\n    #3 0x5f19b9a2 in zmq::socket_poller_t::check_events(zmq::socket_poller_t::event_t*, int) (libzmq.5.dylib:x86_64+0x5b9a2)\r\n    #4 0x5f19bc15 in zmq::socket_poller_t::wait(zmq::socket_poller_t::event_t*, int, long) (libzmq.5.dylib:x86_64+0x5bc15)\r\n    #5 0x5f199513 in zmq_poller_poll(zmq_pollitem_t*, int, long) (libzmq.5.dylib:x86_64+0x59513)\r\n    #6 0x5da444fd in polling_thread erlzmq_nif.c:912\r\n    #7 0x143f662f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #8 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #9 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #10 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\n==28339==Register values:\r\nrax = 0x000000005f166809  rbx = 0x0000611014800004  rcx = 0x000000005f1668cc  rdx = 0x0000000000000000  \r\nrdi = 0x0000611014800004  rsi = 0x0000700001eb8bc0  rbp = 0x0000700001eb8bb0  rsp = 0x0000700001eb8ba0  \r\n r8 = 0x0000000000000440   r9 = 0x00000fffffffffff  r10 = 0x0000000000000000  r11 = 0xffffffffffffffff  \r\nr12 = 0x0000700001eb8da0  r13 = 0x000000000000000f  r14 = 0x000061a000000680  r15 = 0x000061a000000680  \r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: BUS (libzmq.5.dylib:x86_64+0x26808) in zmq::object_t::process_command(zmq::command_t&)\r\nThread T34 created by T4 here:\r\n    #0 0x148de02d in wrap_pthread_create (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x143f5ecf in ethr_thr_create (beam.smp:x86_64+0x106c7ecf)\r\n    #2 0x14171837 in erl_drv_thread_create (beam.smp:x86_64+0x10443837)\r\n    #3 0x5da41c08 in erlzmq_nif_context erlzmq_nif.c:165\r\n    #4 0x13d5225b in process_main (beam.smp:x86_64+0x1002425b)\r\n    #5 0x13d80cb3 in sched_thread_func (beam.smp:x86_64+0x10052cb3)\r\n    #6 0x143f662f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #7 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #8 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #9 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\nThread T4 created by T0 here:\r\n    #0 0x148de02d in wrap_pthread_create (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x143f5ecf in ethr_thr_create (beam.smp:x86_64+0x106c7ecf)\r\n    #2 0x13d7fca0 in erts_start_schedulers (beam.smp:x86_64+0x10051ca0)\r\n    #3 0x13e89670 in erl_start (beam.smp:x86_64+0x1015b670)\r\n    #4 0x13d2f538 in main (beam.smp:x86_64+0x10001538)\r\n    #5 0x7fff5dce03d4 in start (libdyld.dylib:x86_64+0x163d4)\r\n\r\n==28339==ABORTING\r\nAbort trap: 6\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3571", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3571/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3571/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3571/events", "html_url": "https://github.com/zeromq/libzmq/issues/3571", "id": 466124193, "node_id": "MDU6SXNzdWU0NjYxMjQxOTM=", "number": 3571, "title": "Use after free in poller thread", "user": {"login": "lukaszsamson", "id": 1078186, "node_id": "MDQ6VXNlcjEwNzgxODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1078186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaszsamson", "html_url": "https://github.com/lukaszsamson", "followers_url": "https://api.github.com/users/lukaszsamson/followers", "following_url": "https://api.github.com/users/lukaszsamson/following{/other_user}", "gists_url": "https://api.github.com/users/lukaszsamson/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaszsamson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaszsamson/subscriptions", "organizations_url": "https://api.github.com/users/lukaszsamson/orgs", "repos_url": "https://api.github.com/users/lukaszsamson/repos", "events_url": "https://api.github.com/users/lukaszsamson/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaszsamson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-10T06:27:54Z", "updated_at": "2020-05-26T10:54:53Z", "closed_at": "2020-05-26T10:54:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nUse after free detected after send on dealer socket\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.2 and 4.3.1\r\n* OS: macOS 10.14.5\r\n\r\n# Reproduction\r\nThe bug is nondeterministic. It usually happens when I leave m y app working for a few hours. My app is using erlang wrapper on libzmq and the call that results in the error is in https://github.com/esl/erlzmq/blob/master/c_src/erlzmq_nif.c#L585. The app sends and receives messages over dealer socket.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nOn 4.3.1\r\n```\r\n==59733==ERROR: AddressSanitizer: heap-use-after-free on address 0x619000040a40 at pc 0x00001f033821 bp 0x7000104f4af0 sp 0x7000104f42a0\r\nWRITE of size 64 at 0x619000040a40 thread T33\r\n    #0 0x1f033820 in __asan_memcpy (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x59820)\r\n    #1 0x79f5f5a2 in zmq::ypipe_t<zmq::command_t, 16>::write(zmq::command_t const&, bool) ypipe.hpp:81\r\n    #2 0x79f5f25f in zmq::mailbox_t::send(zmq::command_t const&) mailbox.cpp:62\r\n    #3 0x79f72cc5 in zmq::object_t::send_activate_read(zmq::pipe_t*) object.cpp:477\r\n    #4 0x79fd8f72 in zmq::stream_engine_t::in_event() stream_engine.cpp:361\r\n    #5 0x79f5c232 in zmq::kqueue_t::loop() kqueue.cpp:218\r\n    #6 0x79fed5e2 in thread_routine(void*) thread.cpp:182\r\n    #7 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #8 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #9 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\n0x619000040a40 is located 960 bytes inside of 1088-byte region [0x619000040680,0x619000040ac0)\r\nfreed by thread T5 here:\r\n    #0 0x1f03620d in wrap_free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c20d)\r\n    #1 0x79f5fe95 in zmq::mailbox_t::recv(zmq::command_t*, int) yqueue.hpp:168\r\n    #2 0x79fbb3a1 in zmq::socket_base_t::process_commands(int, bool) socket_base.cpp:1359\r\n    #3 0x79fc2347 in zmq::socket_base_t::send(zmq::msg_t*, int) socket_base.cpp:1097\r\n    #4 0x7a01354a in zmq_sendmsg zmq.cpp:332\r\n    #5 0x75cd9e43 in erlzmq_nif_send erlzmq_nif.c:585\r\n    #6 0x1e4a125b in process_main (beam.smp:x86_64+0x1002425b)\r\n    #7 0x1e4cfcb3 in sched_thread_func (beam.smp:x86_64+0x10052cb3)\r\n    #8 0x1eb4562f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #9 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #10 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #11 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\npreviously allocated by thread T33 here:\r\n    #0 0x1f0369c4 in wrap_posix_memalign (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c9c4)\r\n    #1 0x79f5f787 in zmq::ypipe_t<zmq::command_t, 16>::write(zmq::command_t const&, bool) yqueue.hpp:185\r\n    #2 0x79f5f25f in zmq::mailbox_t::send(zmq::command_t const&) mailbox.cpp:62\r\n    #3 0x79f72cc5 in zmq::object_t::send_activate_read(zmq::pipe_t*) object.cpp:477\r\n    #4 0x79fd8f72 in zmq::stream_engine_t::in_event() stream_engine.cpp:361\r\n    #5 0x79f5c232 in zmq::kqueue_t::loop() kqueue.cpp:218\r\n    #6 0x79fed5e2 in thread_routine(void*) thread.cpp:182\r\n    #7 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #8 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #9 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\nThread T33 created by T4 here:\r\nlang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x79fed400 in zmq::thread_t::start(void (*)(void*), void*) thread.cpp:191\r\n    #2 0x79f452af in zmq::thread_ctx_t::start_thread(zmq::thread_t&, void (*)(void*), void*) const ctx.cpp:428\r\n    #3 0x79f44ea5 in zmq::ctx_t::start() ctx.cpp:329\r\n    #4 0x79f43d08 in zmq::ctx_t::create_socket(int) ctx.cpp:356\r\n    #5 0x7a013005 in zmq_socket zmq.cpp:238\r\n    #6 0x75ccb944 in erlzmq_nif_context erlzmq_nif.c:150\r\n    #7 0x1e4a125b in process_main (beam.smp:x86_64+0x1002425b)\r\n    #8 0x1e4cfcb3 in sched_thread_func (beam.smp:x86_64+0x10052cb3)\r\n    #9 0x1eb4562f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #10 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #11 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #12 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\nThread T4 created by T0 here:\r\n    #0 0x1f02e02d in wrap_pthread_create (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x1eb44ecf in ethr_thr_create (beam.smp:x86_64+0x106c7ecf)\r\n    #2 0x1e4ceca0 in erts_start_schedulers (beam.smp:x86_64+0x10051ca0)\r\n    #3 0x1e5d8670 in erl_start (beam.smp:x86_64+0x1015b670)\r\n    #4 0x1e47e538 in main (beam.smp:x86_64+0x10001538)\r\n    #5 0x7fff5dce03d4 in start (libdyld.dylib:x86_64+0x163d4)\r\n\r\nThread T5 created by T0 here:\r\n    #0 0x1f02e02d in wrap_pthread_create (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x1eb44ecf in ethr_thr_create (beam.smp:x86_64+0x106c7ecf)\r\n    #2 0x1e4ceca0 in erts_start_schedulers (beam.smp:x86_64+0x10051ca0)\r\n    #3 0x1e5d8670 in erl_start (beam.smp:x86_64+0x1015b670)\r\n    #4 0x1e47e538 in main (beam.smp:x86_64+0x10001538)\r\n    #5 0x7fff5dce03d4 in start (libdyld.dylib:x86_64+0x163d4)\r\n\r\nSUMMARY: AddressSanitizer: heap-use-after-free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x59820) in __asan_memcpy\r\nShadow bytes around the buggy address:\r\n  0x1c32000080f0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x1c3200008100: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x1c3200008110: fd fd fd fd fd fd fd fd fd fd fd fd fd fd \r\n```\r\nOn 4.3.2\r\n```\r\n==71225==ERROR: AddressSanitizer: heap-use-after-free on address 0x619000021600 at pc 0x000012709821 bp 0x70000177caf0 sp 0x70000177c2a0\r\nWRITE of size 64 at 0x619000021600 thread T33\r\n    #0 0x12709820 in __asan_memcpy (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x59820)\r\n    #1 0x6e941922 in zmq::ypipe_t<zmq::command_t, 16>::write(zmq::command_t const&, bool) ypipe.hpp:81\r\n    #2 0x6e9415cf in zmq::mailbox_t::send(zmq::command_t const&) mailbox.cpp:62\r\n    #3 0x6e954b05 in zmq::object_t::send_activate_read(zmq::pipe_t*) object.cpp:533\r\n    #4 0x6e9c2437 in zmq::stream_engine_t::in_event_internal() stream_engine.cpp:381\r\n    #5 0x6e93e9b2 in zmq::kqueue_t::loop() kqueue.cpp:218\r\n    #6 0x6e9d398e in thread_routine(void*) thread.cpp:225\r\n    #7 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #8 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #9 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\n0x619000021600 is located 896 bytes inside of 1088-byte region [0x619000021280,0x6190000216c0)\r\nfreed by thread T4 here:\r\n    #0 0x1270c20d in wrap_free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c20d)\r\n    #1 0x6e942225 in zmq::mailbox_t::recv(zmq::command_t*, int) yqueue.hpp:169\r\n    #2 0x6e99c701 in zmq::socket_base_t::process_commands(int, bool) socket_base.cpp:1370\r\n    #3 0x6e9a4e57 in zmq::socket_base_t::send(zmq::msg_t*, int) socket_base.cpp:1108\r\n    #4 0x6e9f9cba in zmq_sendmsg zmq.cpp:338\r\n    #5 0x68f21e43 in erlzmq_nif_send erlzmq_nif.c:585\r\n    #6 0x11b7b25b in process_main (beam.smp:x86_64+0x1002425b)\r\n    #7 0x11ba9cb3 in sched_thread_func (beam.smp:x86_64+0x10052cb3)\r\n    #8 0x1221f62f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #9 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #10 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #11 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\npreviously allocated by thread T7 here:\r\n    #0 0x1270c9c4 in wrap_posix_memalign (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5c9c4)\r\n    #1 0x6e9429dc in zmq::ypipe_t<zmq::command_t, 16>::ypipe_t() yqueue.hpp:186\r\n    #2 0x6e940c66 in zmq::mailbox_t::mailbox_t() ypipe.hpp:51\r\n    #3 0x6e998f69 in zmq::socket_base_t::socket_base_t(zmq::ctx_t*, unsigned int, int, bool) socket_base.cpp:252\r\n    #4 0x6e925eae in zmq::dealer_t::dealer_t(zmq::ctx_t*, unsigned int, int) dealer.cpp:37\r\n    #5 0x6e9988b3 in zmq::socket_base_t::create(int, zmq::ctx_t*, unsigned int, int) socket_base.cpp:166\r\n    #6 0x6e90a772 in zmq::ctx_t::create_socket(int) ctx.cpp:380\r\n    #7 0x6e9f96d5 in zmq_socket zmq.cpp:238\r\n    #8 0x68f1c563 in erlzmq_nif_socket erlzmq_nif.c:210\r\n    #9 0x11b7b25b in process_main (beam.smp:x86_64+0x1002425b)\r\n    #10 0x11ba9cb3 in sched_thread_func (beam.smp:x86_64+0x10052cb3)\r\n    #11 0x1221f62f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #12 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #13 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #14 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\nThread T33 created by T7 here:\r\n    #0 0x1270402d in wrap_pthread_create (libclang_rt.asan_obort trap: 6ylib:x86_64h+0x5402d)\r\n  (*)(void*), void*, char const*) thread.cpp:236\r\n    #2 0x6e90f48c in zmq::thread_ctx_t::start_thread(zmq::thread_t&, void (*)(void*), void*, char const*) const ctx.cpp:433\r\n    #3 0x6e932475 in zmq::io_thread_t::start() io_thread.cpp:63\r\n    #4 0x6e90dcb2 in zmq::ctx_t::start() ctx.cpp:329\r\n    #5 0x6e90ab65 in zmq::ctx_t::create_socket(int) ctx.cpp:356\r\n    #6 0x6e9f96d5 in zmq_socket zmq.cpp:238\r\n    #7 0x68f13944 in erlzmq_nif_context erlzmq_nif.c:150\r\n    #8 0x11b7b25b in process_main (beam.smp:x86_64+0x1002425b)\r\n    #9 0x11ba9cb3 in sched_thread_func (beam.smp:x86_64+0x10052cb3)\r\n    #10 0x1221f62f in thr_wrapper (beam.smp:x86_64+0x106c862f)\r\n    #11 0x7fff5ded42ea in _pthread_body (libsystem_pthread.dylib:x86_64+0x32ea)\r\n    #12 0x7fff5ded7248 in _pthread_start (libsystem_pthread.dylib:x86_64+0x6248)\r\n    #13 0x7fff5ded340c in thread_start (libsystem_pthread.dylib:x86_64+0x240c)\r\n\r\nThread T7 created by T0 here:\r\n    #0 0x1270402d in wrap_pthread_create (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x1221eecf in ethr_thr_create (beam.smp:x86_64+0x106c7ecf)\r\n    #2 0x11ba8ca0 in erts_start_schedulers (beam.smp:x86_64+0x10051ca0)\r\n    #3 0x11cb2670 in erl_start (beam.smp:x86_64+0x1015b670)\r\n    #4 0x11b58538 in main (beam.smp:x86_64+0x10001538)\r\n    #5 0x7fff5dce03d4 in start (libdyld.dylib:x86_64+0x163d4)\r\n\r\nThread T4 created by T0 here:\r\n    #0 0x1270402d in wrap_pthread_create (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5402d)\r\n    #1 0x1221eecf in ethr_thr_create (beam.smp:x86_64+0x106c7ecf)\r\n    #2 0x11ba8ca0 in erts_start_schedulers (beam.smp:x86_64+0x10051ca0)\r\n    #3 0x11cb2670 in erl_start (beam.smp:x86_64+0x1015b670)\r\n    #4 0x11b58538 in main (beam.smp:x86_64+0x10001538)\r\n    #5 0x7fff5dce03d4 in start (libdyld.dylib:x86_64+0x163d4)\r\n\r\nSUMMARY: AddressSanitizer: heap-use-after-free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x59820) in __asan_memcpy\r\nShadow bytes around the buggy address:\r\n  0x1c3200004270: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x1c3200004280: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x1c3200004290: fd fd fd fd fd fd fd fd fd fd fd fd fd fd \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3563", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3563/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3563/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3563/events", "html_url": "https://github.com/zeromq/libzmq/issues/3563", "id": 464430520, "node_id": "MDU6SXNzdWU0NjQ0MzA1MjA=", "number": 3563, "title": "Libzmq compliation options list", "user": {"login": "nagarajsherigar", "id": 25977889, "node_id": "MDQ6VXNlcjI1OTc3ODg5", "avatar_url": "https://avatars0.githubusercontent.com/u/25977889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagarajsherigar", "html_url": "https://github.com/nagarajsherigar", "followers_url": "https://api.github.com/users/nagarajsherigar/followers", "following_url": "https://api.github.com/users/nagarajsherigar/following{/other_user}", "gists_url": "https://api.github.com/users/nagarajsherigar/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagarajsherigar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagarajsherigar/subscriptions", "organizations_url": "https://api.github.com/users/nagarajsherigar/orgs", "repos_url": "https://api.github.com/users/nagarajsherigar/repos", "events_url": "https://api.github.com/users/nagarajsherigar/events{/privacy}", "received_events_url": "https://api.github.com/users/nagarajsherigar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-07-05T01:56:13Z", "updated_at": "2019-07-05T06:04:40Z", "closed_at": "2019-07-05T06:04:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I read that during build i can specify which poller method to use and also can message max message size. What are the options for this? And also where can i get list of various options available? \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3558", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3558/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3558/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3558/events", "html_url": "https://github.com/zeromq/libzmq/issues/3558", "id": 461796328, "node_id": "MDU6SXNzdWU0NjE3OTYzMjg=", "number": 3558, "title": "CVE-2019-13132: denial of service via stack overflow", "user": {"login": "fangpenlin", "id": 201615, "node_id": "MDQ6VXNlcjIwMTYxNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/201615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fangpenlin", "html_url": "https://github.com/fangpenlin", "followers_url": "https://api.github.com/users/fangpenlin/followers", "following_url": "https://api.github.com/users/fangpenlin/following{/other_user}", "gists_url": "https://api.github.com/users/fangpenlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/fangpenlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fangpenlin/subscriptions", "organizations_url": "https://api.github.com/users/fangpenlin/orgs", "repos_url": "https://api.github.com/users/fangpenlin/repos", "events_url": "https://api.github.com/users/fangpenlin/events{/privacy}", "received_events_url": "https://api.github.com/users/fangpenlin/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 58140780, "node_id": "MDU6TGFiZWw1ODE0MDc4MA==", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Critical", "name": "Critical", "color": "e11d21", "default": false, "description": null}, {"id": 379723467, "node_id": "MDU6TGFiZWwzNzk3MjM0Njc=", "url": "https://api.github.com/repos/zeromq/libzmq/labels/Security", "name": "Security", "color": "b60205", "default": false, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2019-06-27T23:54:02Z", "updated_at": "2019-07-15T17:20:54Z", "closed_at": "2019-07-08T16:46:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I found a critical security bug of libzmq and would like to report it confidentially, so that hopefully the bug can be fixed before we disclose it. It appears the only information I can find about reporting security bug is here in FAQ\r\n\r\nhttp://zeromq.org/area:faq#toc9\r\n\r\nBesides opening an issue here, do you folks have an email address and corresponding GPG key I can send the details of this bug over? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3553", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3553/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3553/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3553/events", "html_url": "https://github.com/zeromq/libzmq/issues/3553", "id": 459680236, "node_id": "MDU6SXNzdWU0NTk2ODAyMzY=", "number": 3553, "title": "zmq4.3.1 error on armv7l ", "user": {"login": "jaein-ETRI", "id": 35990024, "node_id": "MDQ6VXNlcjM1OTkwMDI0", "avatar_url": "https://avatars0.githubusercontent.com/u/35990024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaein-ETRI", "html_url": "https://github.com/jaein-ETRI", "followers_url": "https://api.github.com/users/jaein-ETRI/followers", "following_url": "https://api.github.com/users/jaein-ETRI/following{/other_user}", "gists_url": "https://api.github.com/users/jaein-ETRI/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaein-ETRI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaein-ETRI/subscriptions", "organizations_url": "https://api.github.com/users/jaein-ETRI/orgs", "repos_url": "https://api.github.com/users/jaein-ETRI/repos", "events_url": "https://api.github.com/users/jaein-ETRI/events{/privacy}", "received_events_url": "https://api.github.com/users/jaein-ETRI/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-24T04:22:06Z", "updated_at": "2019-06-25T04:27:06Z", "closed_at": "2019-06-25T04:27:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "*Please use this template for reporting suspected bugs or requests for help.*\r\n\r\n# Issue description\r\nWhen I run the go lang application with pebbe/zmq library on the armv7l (32bit) and zmq4.3.1, \r\nerror codes are coming. \r\n\r\nzmq 4.3.1 version is not working on armv7l(32bit) yet??\r\nIt was working well on the zmq 4.2.5 version. \r\n\r\nerror codes:\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n        panic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x8 pc=0x2210e4]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/pebbe/zmq4.(*Socket).Close(0x0, 0x866688, 0x1)\r\n        /root/go/src/github.com/pebbe/zmq4/zmq4.go:852 +0x14\r\npanic(0x28b208, 0x4b2708)\r\n        /usr/local/go/src/runtime/panic.go:513 +0x194\r\ngithub.com/pebbe/zmq4.(*Socket).Connect(0x0, 0x8844c0, 0x1a, 0x0, 0x0)\r\n        /root/go/src/github.com/pebbe/zmq4/zmq4.go:911 +0x24\r\n\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.1\r\n* OS: linux\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1.  \r\n\r\nss, _ := zmq4.NewSocket(zmq4.SUB)\r\nss.Connect(\"tcp://localhost:5555\")              <-- error point \r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n\r\n\r\n# What's the expected result?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3549", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3549/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3549/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3549/events", "html_url": "https://github.com/zeromq/libzmq/issues/3549", "id": 458817282, "node_id": "MDU6SXNzdWU0NTg4MTcyODI=", "number": 3549, "title": "Unable to use Streamer with inproc", "user": {"login": "jayrbolton", "id": 8740476, "node_id": "MDQ6VXNlcjg3NDA0NzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8740476?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayrbolton", "html_url": "https://github.com/jayrbolton", "followers_url": "https://api.github.com/users/jayrbolton/followers", "following_url": "https://api.github.com/users/jayrbolton/following{/other_user}", "gists_url": "https://api.github.com/users/jayrbolton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayrbolton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayrbolton/subscriptions", "organizations_url": "https://api.github.com/users/jayrbolton/orgs", "repos_url": "https://api.github.com/users/jayrbolton/repos", "events_url": "https://api.github.com/users/jayrbolton/events{/privacy}", "received_events_url": "https://api.github.com/users/jayrbolton/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-20T18:54:10Z", "updated_at": "2019-06-21T17:53:42Z", "closed_at": "2019-06-21T11:43:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nI haven't been able to successfully use the `inproc` protocol in combination with a Streamer device. Apologies if I'm using zmq incorrectly, but I can't find documentation about this anywhere.\r\n\r\nSee my code example here:\r\nhttps://github.com/jayrbolton/zmq_stream_inproc/blob/master/main.py\r\n\r\nI start two \"pusher\" workers and two \"puller\" workers with a streamer device in between. Runs in py3\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.1 \r\n* OS: Debian\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1. Clone the above repo\r\n2. Using python 3: `python -m venv env`\r\n3. `source env/bin/activate`\r\n4. `pip install -r requirements.txt`\r\n5. `python main.py`\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\nMessages are pushed to the streamer's frontend socket, but never pulled by the backend.\r\nIf you switch from `inproc` to the `ipc` protocol, then it works as expected.\r\n\r\n# What's the expected result?\r\n\r\nMessages should flow from the `pusher` workers to the `puller` workers across the Streamer and be shown in stdout.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3533", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3533/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3533/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3533/events", "html_url": "https://github.com/zeromq/libzmq/issues/3533", "id": 454155372, "node_id": "MDU6SXNzdWU0NTQxNTUzNzI=", "number": 3533, "title": "Connection through SOCKS5 proxy does not work", "user": {"login": "guillon", "id": 272289, "node_id": "MDQ6VXNlcjI3MjI4OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/272289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guillon", "html_url": "https://github.com/guillon", "followers_url": "https://api.github.com/users/guillon/followers", "following_url": "https://api.github.com/users/guillon/following{/other_user}", "gists_url": "https://api.github.com/users/guillon/gists{/gist_id}", "starred_url": "https://api.github.com/users/guillon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guillon/subscriptions", "organizations_url": "https://api.github.com/users/guillon/orgs", "repos_url": "https://api.github.com/users/guillon/repos", "events_url": "https://api.github.com/users/guillon/events{/privacy}", "received_events_url": "https://api.github.com/users/guillon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-10T12:52:27Z", "updated_at": "2019-06-10T13:11:59Z", "closed_at": "2019-06-10T13:11:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nConnection through SOCKS5 proxy does not work since commit 12c4b55a\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): commit 12c4b55a (version > 4.3.1)\r\n* OS: all OSes\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\nInitiate a connection through a SOCKS5 proxy with:\r\n#include <zmq.hpp>\r\nint main(int argc, char *argv[])\r\n{\r\n  const std::string socks_server(\"localhost:1080\");\r\n  const std::string server(\"localhost:5556\");\r\n  zmq::context_t context(1);\r\n  zmq::socket_t sock(context, ZMQ_SUB);\r\n  sock.setsockopt(ZMQ_SOCKS_PROXY, socks_server.c_str(), socks_server.length());\r\n  sock.connect(std::string(\"tcp://\") + server);\r\n  sock.setsockopt(ZMQ_SUBSCRIBE, \"\", 0filter.c_str(), filter.length());\r\n\r\n  zmq::message_t message; \r\n  sock.recv(&message);   \r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nActually, zmq connects directly to the target host (localhost:5556), ignoring the proxy server configuration (localhost:1080).\r\nFrom the proxy server side logs (localhost:1080), not any connection attempt is visible.\r\n\r\n\r\n# What's the expected result?\r\nConnection through the proxy first, and let the proxy relay the connection to the target address.\r\nThis is the behavior of the last published release (4.3.1) which does not have this issue.\r\n\r\nActually the issue was introduced with commit  12c4b55a.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3531", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3531/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3531/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3531/events", "html_url": "https://github.com/zeromq/libzmq/issues/3531", "id": 453962457, "node_id": "MDU6SXNzdWU0NTM5NjI0NTc=", "number": 3531, "title": "Is libzmq safe with posix_spawn?", "user": {"login": "skicc", "id": 51252615, "node_id": "MDQ6VXNlcjUxMjUyNjE1", "avatar_url": "https://avatars0.githubusercontent.com/u/51252615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skicc", "html_url": "https://github.com/skicc", "followers_url": "https://api.github.com/users/skicc/followers", "following_url": "https://api.github.com/users/skicc/following{/other_user}", "gists_url": "https://api.github.com/users/skicc/gists{/gist_id}", "starred_url": "https://api.github.com/users/skicc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skicc/subscriptions", "organizations_url": "https://api.github.com/users/skicc/orgs", "repos_url": "https://api.github.com/users/skicc/repos", "events_url": "https://api.github.com/users/skicc/events{/privacy}", "received_events_url": "https://api.github.com/users/skicc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T01:21:34Z", "updated_at": "2019-06-10T09:48:13Z", "closed_at": "2019-06-10T09:48:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue description\r\nSorry but this issue is a bit broad and seems even not a issue...\r\n\r\nI know zmq may have some issues with fork() and using zmq in both parent and child process. I wonder whether it is safe to use posix_spawn() with zmq? Or, if I call exec right after fork/vfork, will zmq have any chances to be somewhat corrupted?\r\n\r\nI did some naive tests and it seems to work.\r\n\r\nThanks!\r\n\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.1\r\n* OS: Windows, Linux\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3530", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3530/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3530/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3530/events", "html_url": "https://github.com/zeromq/libzmq/issues/3530", "id": 452732546, "node_id": "MDU6SXNzdWU0NTI3MzI1NDY=", "number": 3530, "title": "my_get_tick_count64 uninitialized when zmq is used as a static library within a static library on Windows.", "user": {"login": "PhilBax", "id": 7528863, "node_id": "MDQ6VXNlcjc1Mjg4NjM=", "avatar_url": "https://avatars1.githubusercontent.com/u/7528863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PhilBax", "html_url": "https://github.com/PhilBax", "followers_url": "https://api.github.com/users/PhilBax/followers", "following_url": "https://api.github.com/users/PhilBax/following{/other_user}", "gists_url": "https://api.github.com/users/PhilBax/gists{/gist_id}", "starred_url": "https://api.github.com/users/PhilBax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PhilBax/subscriptions", "organizations_url": "https://api.github.com/users/PhilBax/orgs", "repos_url": "https://api.github.com/users/PhilBax/repos", "events_url": "https://api.github.com/users/PhilBax/events{/privacy}", "received_events_url": "https://api.github.com/users/PhilBax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-05T21:48:06Z", "updated_at": "2019-06-05T23:27:55Z", "closed_at": "2019-06-05T23:27:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\n\r\nI'm working on building a library that will communicate with our software over a zmq socket. I build zmq as a static library, and I build a test application that links against my library and the zmq library. \r\n\r\nOn Linux, this seems to work fine.\r\n\r\nOn Windows (Visual Studio 2017), when I launch the app, it crashes when creating the socket. The crash is due to clock_t dereferencing my_get_tick_count64, which is, for some reason, a null pointer. It is a static variable, so it _should_ be getting initialized at load time. I'm not entirely sure what's going on. It appears that, perhaps, MSVC's linker has decided that my_get_tick_count64 is unnecessary, and optimized its initialization out of the binary? It doesn't affect Linux because that variable is only declared for Windows builds.\r\n\r\nAnd if I create a socket directly in source of example.exe, the static variable is initialized correctly. And if I use zmq as a dynamic library, everything is fine as well.\r\n\r\nSo, I don't know if this is a linker bug, or a weird specific issue with the language and my use-case (which, I presume, is a valid, supported use-case). I wanted to report it in case there was an easy fix that could be made zmq-side.\r\n\r\n# Environment\r\n\r\n* libzmq version (commit hash if unreleased): 4.3.1\r\n* OS: Windows\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n\r\n1. Build zmq as a static library on Windows.\r\n2. Create another static library with a function that uses zmq to create a context and a socket.\r\n3. Create an application that links against the two static libraries (and w2_32/iphlpapi.lib; also add a \"/D ZMQ_STATIC\" to the compile options), and calls the function.\r\n4. Crash!\r\n\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\n\r\n> Exception thrown at 0x0000000000000000 in example.exe: 0xC0000005: Access violation executing location 0x0000000000000000.\r\n\r\n```\r\n\texample.exe!zmq::clock_t::clock_t() Line 136\tC++\r\n \texample.exe!zmq::poller_base_t::poller_base_t() Line 36\tC++\r\n \texample.exe!zmq::worker_poller_base_t::worker_poller_base_t(const zmq::thread_ctx_t & ctx_) Line 116\tC++\r\n \texample.exe!zmq::select_t::select_t(const zmq::thread_ctx_t & ctx_) Line 59\tC++\r\n \texample.exe!zmq::reaper_t::reaper_t(zmq::ctx_t * ctx_, unsigned int tid_) Line 46\tC++\r\n \texample.exe!zmq::ctx_t::start() Line 303\tC++\r\n \texample.exe!zmq::ctx_t::create_socket(int type_) Line 356\tC++\r\n \texample.exe!zmq_socket(void * ctx_, int type_) Line 238\tC++\r\n \texample.exe!zmq::socket_t::init(zmq::context_t & context_, int type_) Line 752\tC++\r\n \texample.exe!zmq::socket_t::socket_t(zmq::context_t & context_, int type_) Line 579\tC++\r\n```\r\n\r\n# What's the expected result?\r\n\r\nIt should run normally, as it does in Linux, or when the executable creates sockets itself.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3529", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3529/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3529/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3529/events", "html_url": "https://github.com/zeromq/libzmq/issues/3529", "id": 451504112, "node_id": "MDU6SXNzdWU0NTE1MDQxMTI=", "number": 3529, "title": "Problem: disconnect & unbind doc is misleading", "user": {"login": "jean-airoldie", "id": 25088801, "node_id": "MDQ6VXNlcjI1MDg4ODAx", "avatar_url": "https://avatars3.githubusercontent.com/u/25088801?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jean-airoldie", "html_url": "https://github.com/jean-airoldie", "followers_url": "https://api.github.com/users/jean-airoldie/followers", "following_url": "https://api.github.com/users/jean-airoldie/following{/other_user}", "gists_url": "https://api.github.com/users/jean-airoldie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jean-airoldie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jean-airoldie/subscriptions", "organizations_url": "https://api.github.com/users/jean-airoldie/orgs", "repos_url": "https://api.github.com/users/jean-airoldie/repos", "events_url": "https://api.github.com/users/jean-airoldie/events{/privacy}", "received_events_url": "https://api.github.com/users/jean-airoldie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-03T14:06:48Z", "updated_at": "2019-06-28T20:59:39Z", "closed_at": "2019-06-21T10:31:20Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "First of all I did not expect [unbind](https://github.com/zeromq/libzmq/blob/master/src/zmq.cpp#L316) and [disconnect](https://github.com/zeromq/libzmq/blob/master/src/zmq.cpp#L324) to be the same identical function based on their documentation. Moreover, it seems that the behaviour of `term_endpoint` differ depending on the context.\r\n\r\nFor instance, If is set `linger=0` before disconnecting a `Client` socket from a connected endpoint, then the incoming queue is discarted, which is what I expect based on the disconnect documentation. However, if I set `linger=0` before unbinding a `Server` socket from a bound endpoint, then the incoming queue is not discarded and I can still `recv` messages from it.\r\n\r\nSo my question is, what is the actual behavior of disconnect / unbind?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3528", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3528/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3528/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3528/events", "html_url": "https://github.com/zeromq/libzmq/issues/3528", "id": 450898440, "node_id": "MDU6SXNzdWU0NTA4OTg0NDA=", "number": 3528, "title": "ZMQ Dealer recevies messages it sent", "user": {"login": "tgaldes", "id": 8033296, "node_id": "MDQ6VXNlcjgwMzMyOTY=", "avatar_url": "https://avatars1.githubusercontent.com/u/8033296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgaldes", "html_url": "https://github.com/tgaldes", "followers_url": "https://api.github.com/users/tgaldes/followers", "following_url": "https://api.github.com/users/tgaldes/following{/other_user}", "gists_url": "https://api.github.com/users/tgaldes/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgaldes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgaldes/subscriptions", "organizations_url": "https://api.github.com/users/tgaldes/orgs", "repos_url": "https://api.github.com/users/tgaldes/repos", "events_url": "https://api.github.com/users/tgaldes/events{/privacy}", "received_events_url": "https://api.github.com/users/tgaldes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-31T17:13:58Z", "updated_at": "2019-06-12T23:10:53Z", "closed_at": "2019-06-12T23:10:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "# Issue description\r\nI have a dealer socket connecting to a port on my machine that nothing else is using. After enough attempts to send and receive a message, the socket is able to send the message and get it back with a call to recv.\r\n\r\n# Environment\r\nCentOS Linux release 7.6.1810 (Core) \r\nzeromq-4.1.4-6\r\ncppzmq-devel-4.1.4-6\r\ng++ -std=c++11 github_minimal.cpp -o github -lzmq -lpthread\\\r\nGCC 6.3.0\r\n\r\n# Minimal test code / Steps to reproduce the issue\r\n#include <unistd.h>\r\n#include <iostream>\r\n#include <zmq.hpp>\r\n#include <thread>\r\n#include <sstream>\r\nint main() {\r\n    //pthread_t thread ;\r\n    std::string connect = \"tcp://localhost:49150\";\r\n    zmq::context_t context(1);\r\n    zmq::socket_t client (context, ZMQ_DEALER);\r\n    int m_linger = 0;\r\n    int m_timeoutMs = 1000;\r\n    int imm = 1;\r\n    // release the socket / port asa it disconnects\r\n    client.setsockopt(ZMQ_LINGER, &m_linger, sizeof(m_linger));\r\n    client.setsockopt(ZMQ_RCVTIMEO, &m_timeoutMs, sizeof(m_timeoutMs));\r\n    client.setsockopt(ZMQ_SNDTIMEO, &m_timeoutMs, sizeof(m_timeoutMs));\r\n    client.setsockopt(ZMQ_IMMEDIATE, &imm, sizeof(imm));\r\n                                                                                                                                             \r\n    client.connect(connect.c_str());\r\n    std::cout << \"Connecting client to \" << connect << std::endl;\r\n                                                                                                                                             \r\n    int more = 0;\r\n    while(true)\r\n    {   \r\n        zmq::message_t blank{};\r\n        zmq::message_t message(4);\r\n        memcpy(message.data(), \"asdf\", 4); \r\n        zmq::message_t response;\r\n        int more; //  Multipart detection\r\n        std::cout << \"Client no linger sending message more enabled\" << std::endl;\r\n        auto ret = client.send(blank, ZMQ_SNDMORE);\r\n        if (!ret)\r\n        {   \r\n            std::cout << \"timeout on send, trying again\" << std::endl;\r\n            continue;\r\n        }   \r\n        std::cout << \"Client no linger sending message more disabled\" << std::endl;\r\n        ret = client.send(message);\r\n        if (!ret)\r\n        {   \r\n            std::cout << \"timeout on send second, trying again\";\r\n            continue;\r\n        }   \r\n        ret = client.recv(&response);\r\n        size_t more_size = sizeof (more);\r\n        client.getsockopt(ZMQ_RCVMORE, &more, &more_size);\r\n        while (more)\r\n        {   \r\n            std::cout << \"Client received message with more coming. Size of message \" << response.size() << std::endl;\r\n            client.recv(&response);\r\n            client.getsockopt(ZMQ_RCVMORE, &more, &more_size);\r\n        }   \r\n        std::cout << \"Client received final part of message. Size of message \" << response.size() << \" message \" << *(reinterpret_cast<int*>(message.data())) << std::endl;\r\n    }   \r\n}   \r\nIt can take up to an hour to reproduce the issue.\r\n\r\n# What's the actual result? (include assertion message & call stack if applicable)\r\nAfter enough attempts sending an empty message with ZMQ_SNDMORE then a message of size four, recv on the same socket will return me a message \r\n\r\n\r\n# What's the expected result?\r\nI would expect that using the ZMQ_IMMEDIATE option would never send the message successfully, and that there wouldn't be anything to receive on the socket since no process on my machine is binding to the port I'm trying to connect to\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/zeromq/libzmq/issues/3526", "repository_url": "https://api.github.com/repos/zeromq/libzmq", "labels_url": "https://api.github.com/repos/zeromq/libzmq/issues/3526/labels{/name}", "comments_url": "https://api.github.com/repos/zeromq/libzmq/issues/3526/comments", "events_url": "https://api.github.com/repos/zeromq/libzmq/issues/3526/events", "html_url": "https://github.com/zeromq/libzmq/issues/3526", "id": 450574376, "node_id": "MDU6SXNzdWU0NTA1NzQzNzY=", "number": 3526, "title": "Failure case behavior unclear in `zmq_msg_send` documentation", "user": {"login": "rotty", "id": 3920, "node_id": "MDQ6VXNlcjM5MjA=", "avatar_url": "https://avatars2.githubusercontent.com/u/3920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rotty", "html_url": "https://github.com/rotty", "followers_url": "https://api.github.com/users/rotty/followers", "following_url": "https://api.github.com/users/rotty/following{/other_user}", "gists_url": "https://api.github.com/users/rotty/gists{/gist_id}", "starred_url": "https://api.github.com/users/rotty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rotty/subscriptions", "organizations_url": "https://api.github.com/users/rotty/orgs", "repos_url": "https://api.github.com/users/rotty/repos", "events_url": "https://api.github.com/users/rotty/events{/privacy}", "received_events_url": "https://api.github.com/users/rotty/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-31T01:29:51Z", "updated_at": "2019-05-31T15:49:43Z", "closed_at": "2019-05-31T15:49:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "# Issue description\r\n\r\nThe documentation on `zmq_msg_send` is unclear about what happens to the provided message in the failure case. The manpage states:\r\n\r\n> The zmq_msg_t structure passed to zmq_msg_send() is nullified during the call. If you want to  send the same message to multiple sockets you have to copy it (e.g. using zmq_msg_copy()).\r\n\r\nThis seems to contradict the following snippet, which indicates that the message stays the responsibility of the caller in the failure case:\r\n\r\n> A successful invocation of zmq_msg_send() does not indicate that the message has been transmitted to the network, only that it has been queued on the socket and 0MQ has assumed responsibility for the message. You do not need to call zmq_msg_close() after a successful zmq_msg_send().\r\n\r\nThe question here is whether it is safe to assume that the message content stays available to the caller in the failure case. A particularly important case is EAGAIN -- it would be quite unfortunate if the caller had to reconstruct the message if it could not be sent simply to a timeout, although it would be unfortunate if that happened for any error, IMO.\r\n\r\nI have not really attempted to dig into the code to verify this one way or the other, as it's not easy to follow given the inheritance hierarchy for sockets and other things going on.\r\n\r\nIt would be awesome if someone could confirm that my suspicion is right, and the message is preserved in all failure cases. I'd be willing to come up with a PR to clarify the wording in the documentation in that case.\r\n\r\nThis question originally came up in an issue in the Rust `zmq` crate, which provides bindings to libzmq:\r\n\r\nhttps://github.com/erickt/rust-zmq/issues/211\r\n\r\n# Environment\r\n\r\n* libzmq version: 4.3.1 (or current master, text is unchanged)\r\n", "performed_via_github_app": null, "score": 1.0}]}