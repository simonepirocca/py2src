{"total_count": 34, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/56", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/56/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/56/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/56", "id": 672875551, "node_id": "MDU6SXNzdWU2NzI4NzU1NTE=", "number": 56, "title": "Send control request with invalid bmRequestType", "user": {"login": "FFY00", "id": 11718923, "node_id": "MDQ6VXNlcjExNzE4OTIz", "avatar_url": "https://avatars0.githubusercontent.com/u/11718923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FFY00", "html_url": "https://github.com/FFY00", "followers_url": "https://api.github.com/users/FFY00/followers", "following_url": "https://api.github.com/users/FFY00/following{/other_user}", "gists_url": "https://api.github.com/users/FFY00/gists{/gist_id}", "starred_url": "https://api.github.com/users/FFY00/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FFY00/subscriptions", "organizations_url": "https://api.github.com/users/FFY00/orgs", "repos_url": "https://api.github.com/users/FFY00/repos", "events_url": "https://api.github.com/users/FFY00/events{/privacy}", "received_events_url": "https://api.github.com/users/FFY00/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-04T15:20:06Z", "updated_at": "2020-08-12T00:35:01Z", "closed_at": "2020-08-12T00:35:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I need to send a control request with a invalid direction in bmRequestType.\r\n\r\nThe device I want to talk to is awful and requires me to send some requests with the device to host direction, how can I do this?\r\n\r\nSince `controlWrite` sets the direction bit, I tried to use `_controlTransfer` directly, but I run into the following error.\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"./MD800E.py\", line 140, in <module>\r\n    main()\r\n  File \"./MD800E.py\", line 95, in main\r\n    dev.request(_Request.REG_READ, 0x0000, 0x0000)\r\n  File \"./MD800E.py\", line 65, in request\r\n    self._dev._controlTransfer(\r\n  File \"/usr/lib/python3.8/site-packages/usb1/__init__.py\", line 1466, in _controlTransfer\r\n    mayRaiseUSBError(result)\r\n  File \"/usr/lib/python3.8/site-packages/usb1/__init__.py\", line 133, in mayRaiseUSBError\r\n    __raiseUSBError(value)\r\n  File \"/usr/lib/python3.8/site-packages/usb1/__init__.py\", line 125, in raiseUSBError\r\n    raise __STATUS_TO_EXCEPTION_DICT.get(value, __USBError)(value)\r\nusb1.USBErrorIO: LIBUSB_ERROR_IO [-1]\r\n```\r\n\r\nPlease find attached a capture of what my packets need to look like. Sorry for the zip, Github won't let me upload the capture directly.\r\n\r\n[md800e-512-384.zip](https://github.com/vpelletier/python-libusb1/files/5022921/md800e-512-384.zip)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/53", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/53/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/53/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/53", "id": 614425264, "node_id": "MDU6SXNzdWU2MTQ0MjUyNjQ=", "number": 53, "title": "Does not install properly on macOS Catalina", "user": {"login": "phr0gger", "id": 47429373, "node_id": "MDQ6VXNlcjQ3NDI5Mzcz", "avatar_url": "https://avatars2.githubusercontent.com/u/47429373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phr0gger", "html_url": "https://github.com/phr0gger", "followers_url": "https://api.github.com/users/phr0gger/followers", "following_url": "https://api.github.com/users/phr0gger/following{/other_user}", "gists_url": "https://api.github.com/users/phr0gger/gists{/gist_id}", "starred_url": "https://api.github.com/users/phr0gger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phr0gger/subscriptions", "organizations_url": "https://api.github.com/users/phr0gger/orgs", "repos_url": "https://api.github.com/users/phr0gger/repos", "events_url": "https://api.github.com/users/phr0gger/events{/privacy}", "received_events_url": "https://api.github.com/users/phr0gger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-08T00:31:40Z", "updated_at": "2020-05-08T19:23:57Z", "closed_at": "2020-05-08T19:23:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "pip install finishes claiming success\r\nbut import fails\r\nDo I really have to use some package manager?\r\n```\r\n\u279c  ~ python3 -m pip install libusb1 \r\nDefaulting to user installation because normal site-packages is not writeable\r\nCollecting libusb1\r\n  Downloading libusb1-1.8.tar.gz (78 kB)\r\n     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 78 kB 1.7 MB/s \r\nBuilding wheels for collected packages: libusb1\r\n  Building wheel for libusb1 (setup.py) ... done\r\n  Created wheel for libusb1: filename=libusb1-1.8-py3-none-any.whl size=59991 sha256=8cd2f4578571cbc04d273ed0d4218e1298a50494f579a146b0f20f00983b7ee6\r\n  Stored in directory: /Users/Martin/Library/Caches/pip/wheels/e0/c8/71/5aad28fb4e963a6ff65d532fc58c1a2f018559bbe9e2655e07\r\nSuccessfully built libusb1\r\nInstalling collected packages: libusb1\r\nSuccessfully installed libusb1-1.8\r\n\u279c  ~ python3                         \r\nPython 3.7.3 (default, Mar  6 2020, 22:34:30) \r\n[Clang 11.0.3 (clang-1103.0.32.29)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import usb1\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/Martin/Library/Python/3.7/lib/python/site-packages/usb1/__init__.py\", line 61, in <module>\r\n    from . import libusb1\r\n  File \"/Users/Martin/Library/Python/3.7/lib/python/site-packages/usb1/libusb1.py\", line 192, in <module>\r\n    libusb = _loadLibrary()\r\n  File \"/Users/Martin/Library/Python/3.7/lib/python/site-packages/usb1/libusb1.py\", line 166, in _loadLibrary\r\n    return dll_loader('libusb-1.0' + suffix, **loader_kw)\r\n  File \"/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/ctypes/__init__.py\", line 348, in __init__\r\n    self._handle = _dlopen(self._name, mode)\r\nOSError: dlopen(libusb-1.0.dylib, 6): image not found\r\n>>> \r\n```\r\n\r\nInside Thonny the error message has the additional line:\r\n`Did find: file system relative paths not allowed in hardened programs`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/52", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/52/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/52/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/52/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/52", "id": 531081283, "node_id": "MDU6SXNzdWU1MzEwODEyODM=", "number": 52, "title": "How to get data from a USB device", "user": {"login": "serj053", "id": 10112259, "node_id": "MDQ6VXNlcjEwMTEyMjU5", "avatar_url": "https://avatars0.githubusercontent.com/u/10112259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/serj053", "html_url": "https://github.com/serj053", "followers_url": "https://api.github.com/users/serj053/followers", "following_url": "https://api.github.com/users/serj053/following{/other_user}", "gists_url": "https://api.github.com/users/serj053/gists{/gist_id}", "starred_url": "https://api.github.com/users/serj053/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/serj053/subscriptions", "organizations_url": "https://api.github.com/users/serj053/orgs", "repos_url": "https://api.github.com/users/serj053/repos", "events_url": "https://api.github.com/users/serj053/events{/privacy}", "received_events_url": "https://api.github.com/users/serj053/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-12-02T11:57:56Z", "updated_at": "2019-12-04T15:03:09Z", "closed_at": "2019-12-03T12:56:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The method getDeviceList (usb1) shows the presence of the device and it really is (bladeRF), but the method openByVendorIDAndProductID (usb1, 0x2cf0, 0x5246) returns None and the device remains not available. No errors.  What is the reason for this behavior and how to access the USB device.\r\n OS Windows 7\r\n\r\n    ```\r\nimport usb1\r\n    con = usb1.USBContext()\r\n    con.getDeviceList(usb1)\r\n[<usb1.USBDevice object at 0x02A084D0>, <usb1.USBDevice object at 0x02A08670>, \r\n<usb1.USBDevice object at 0x02A08690>, <usb1.USBDevice object at 0x02A08830>, \r\n<usb1.USBDevice object at 0x02A08A50>, <usb1.USBDevice object at 0x02A08B70>,\r\n <usb1.USBDevice object at 0x02A08C50>]\r\nhandl = con.openByVendorIDAndProductID(usb1, 0x2cf0, 0x5246)\r\nprint(handl)\r\nNone\r\n```    \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/47", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/47/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/47/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/47", "id": 430014370, "node_id": "MDU6SXNzdWU0MzAwMTQzNzA=", "number": 47, "title": "Occasional segfault if `USBTransfer.close` is called in callback", "user": {"login": "forrestv", "id": 59872, "node_id": "MDQ6VXNlcjU5ODcy", "avatar_url": "https://avatars1.githubusercontent.com/u/59872?v=4", "gravatar_id": "", "url": "https://api.github.com/users/forrestv", "html_url": "https://github.com/forrestv", "followers_url": "https://api.github.com/users/forrestv/followers", "following_url": "https://api.github.com/users/forrestv/following{/other_user}", "gists_url": "https://api.github.com/users/forrestv/gists{/gist_id}", "starred_url": "https://api.github.com/users/forrestv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/forrestv/subscriptions", "organizations_url": "https://api.github.com/users/forrestv/orgs", "repos_url": "https://api.github.com/users/forrestv/repos", "events_url": "https://api.github.com/users/forrestv/events{/privacy}", "received_events_url": "https://api.github.com/users/forrestv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-06T09:06:45Z", "updated_at": "2019-05-09T22:54:39Z", "closed_at": "2019-05-09T22:54:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "During the entirety of the time that libusb is calling the callback that python-libusb1 provides, the thunk (stored in `USBTransfer.__ctypesCallbackWrapper`) needs to be kept alive. Calling `USBTransfer.close` within the callback destroys the (still-running) thunk, causing occasional segfaults in libffi when returning back to libusb.\r\n\r\nCurrently, the `__submitted` flag and `before_submit`/`after_completion` callbacks are used to keep the `USBTransfer` alive, and that's almost sufficient. The `__ctypesCallbackWrapper` is special, though; it needs to be guaranteed to live a *little* bit longer - until after `__callbackWrapper` has returned.\r\n\r\nI think that the easiest fix here is to:\r\n1. Make `__callbackWrapper` a `@staticmethod`\r\n2. Create `__ctypesCallbackWrapper` in the class body rather than in `__init__` so it's shared between all `USBTransfer`s\r\n3. Use a dict of currently submitted transfers to get the `USBTransfer` object corresponding to the libusb transfer pointer that is provided to the callback", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/46", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/46/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/46/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/46/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/46", "id": 422101895, "node_id": "MDU6SXNzdWU0MjIxMDE4OTU=", "number": 46, "title": "Make package version available as usb1.__version__", "user": {"login": "jrast", "id": 146369, "node_id": "MDQ6VXNlcjE0NjM2OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/146369?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrast", "html_url": "https://github.com/jrast", "followers_url": "https://api.github.com/users/jrast/followers", "following_url": "https://api.github.com/users/jrast/following{/other_user}", "gists_url": "https://api.github.com/users/jrast/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrast/subscriptions", "organizations_url": "https://api.github.com/users/jrast/orgs", "repos_url": "https://api.github.com/users/jrast/repos", "events_url": "https://api.github.com/users/jrast/events{/privacy}", "received_events_url": "https://api.github.com/users/jrast/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-18T08:57:57Z", "updated_at": "2019-05-09T22:54:49Z", "closed_at": "2019-05-09T22:54:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently the package version is not available from the code. It would be nice to have the version available in the same way as most python packages provide it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/43", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/43/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/43/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/43", "id": 397796366, "node_id": "MDU6SXNzdWUzOTc3OTYzNjY=", "number": 43, "title": "libusb has no hotplug support", "user": {"login": "Nic2012", "id": 1799767, "node_id": "MDQ6VXNlcjE3OTk3Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1799767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nic2012", "html_url": "https://github.com/Nic2012", "followers_url": "https://api.github.com/users/Nic2012/followers", "following_url": "https://api.github.com/users/Nic2012/following{/other_user}", "gists_url": "https://api.github.com/users/Nic2012/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nic2012/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nic2012/subscriptions", "organizations_url": "https://api.github.com/users/Nic2012/orgs", "repos_url": "https://api.github.com/users/Nic2012/repos", "events_url": "https://api.github.com/users/Nic2012/events{/privacy}", "received_events_url": "https://api.github.com/users/Nic2012/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-01-10T11:53:24Z", "updated_at": "2019-01-14T23:27:05Z", "closed_at": "2019-01-14T23:27:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "On a fresh Win10 Build 1809 x64 I have installed Python2.7 and put the latest version libusb-1.0.22 dll into the example directory, run the example hotplug.py and got the result:\r\n`Hotplug support is missing. Please update your libusb version.`\r\n\r\nI am bit confused because y mentioned libusb as the dependencies, but this does not include hotplugging?\r\nIf there is any other workaround existing?\r\n\r\nRegards,\r\nNic", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/42", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/42/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/42/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/42", "id": 389904443, "node_id": "MDU6SXNzdWUzODk5MDQ0NDM=", "number": 42, "title": "No partial data when timeout occured in bulk reads", "user": {"login": "gotzl", "id": 12870237, "node_id": "MDQ6VXNlcjEyODcwMjM3", "avatar_url": "https://avatars0.githubusercontent.com/u/12870237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gotzl", "html_url": "https://github.com/gotzl", "followers_url": "https://api.github.com/users/gotzl/followers", "following_url": "https://api.github.com/users/gotzl/following{/other_user}", "gists_url": "https://api.github.com/users/gotzl/gists{/gist_id}", "starred_url": "https://api.github.com/users/gotzl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gotzl/subscriptions", "organizations_url": "https://api.github.com/users/gotzl/orgs", "repos_url": "https://api.github.com/users/gotzl/repos", "events_url": "https://api.github.com/users/gotzl/events{/privacy}", "received_events_url": "https://api.github.com/users/gotzl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-12-11T18:52:32Z", "updated_at": "2018-12-13T23:46:00Z", "closed_at": "2018-12-13T23:46:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "When performing bulk reads from the device by using e.g. USBDeviceHandle.bulkRead(0x86, 0x1000, timeout=1000) and the timeout is hit, a 'libusb1.USBError' is raised and the partially transferred data is lost.\r\nI would've expected that bulkRead (or _bulkTransfer which actually calls the underlying libusb1) ignores the timeout error and yields the partial data.\r\n\r\nMy (hacky) workaround looks like this:\r\n```\r\n    def _bulkTransfer(self, endpoint, data, length, timeout):\r\n        transferred = c_int()\r\n        try: mayRaiseUSBError(libusb1.libusb_bulk_transfer(\r\n            self.__handle, endpoint, data, length, byref(transferred), timeout,\r\n        ))\r\n        except USBError as e:\r\n            if e.value != libusb1.LIBUSB_ERROR_TIMEOUT: raise e\r\n        return transferred.value\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/39", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/39/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/39/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/39/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/39", "id": 350769686, "node_id": "MDU6SXNzdWUzNTA3Njk2ODY=", "number": 39, "title": "getDevice() is mostly unusable with WinUSB", "user": {"login": "whitequark", "id": 54771, "node_id": "MDQ6VXNlcjU0Nzcx", "avatar_url": "https://avatars1.githubusercontent.com/u/54771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whitequark", "html_url": "https://github.com/whitequark", "followers_url": "https://api.github.com/users/whitequark/followers", "following_url": "https://api.github.com/users/whitequark/following{/other_user}", "gists_url": "https://api.github.com/users/whitequark/gists{/gist_id}", "starred_url": "https://api.github.com/users/whitequark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whitequark/subscriptions", "organizations_url": "https://api.github.com/users/whitequark/orgs", "repos_url": "https://api.github.com/users/whitequark/repos", "events_url": "https://api.github.com/users/whitequark/events{/privacy}", "received_events_url": "https://api.github.com/users/whitequark/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-15T11:03:30Z", "updated_at": "2018-09-04T03:30:55Z", "closed_at": "2018-09-04T03:30:55Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "WinUSB always opens an USB device in exclusive mode. This means that you can't do something like...\r\n```\r\nhandle = self.usb_context.openByVendorIDAndProductID(vendor_id, product_id)\r\nserial = handle.getDevice().getSerialNumber()\r\n```\r\nbecause `USBDevice.getSerialNumber()` opens the device a second time internally and that fails with `LIBUSB_ERROR_ACCESS`.\r\n\r\nI think `getDevice()` should return a \"pre-opened\" `USBDevice` object to avoid this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/38", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/38/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/38/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/38", "id": 348528202, "node_id": "MDU6SXNzdWUzNDg1MjgyMDI=", "number": 38, "title": "usb1.USBErrorAccess: LIBUSB_ERROR_ACCESS [-3]", "user": {"login": "ewittinger", "id": 16073616, "node_id": "MDQ6VXNlcjE2MDczNjE2", "avatar_url": "https://avatars1.githubusercontent.com/u/16073616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ewittinger", "html_url": "https://github.com/ewittinger", "followers_url": "https://api.github.com/users/ewittinger/followers", "following_url": "https://api.github.com/users/ewittinger/following{/other_user}", "gists_url": "https://api.github.com/users/ewittinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ewittinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ewittinger/subscriptions", "organizations_url": "https://api.github.com/users/ewittinger/orgs", "repos_url": "https://api.github.com/users/ewittinger/repos", "events_url": "https://api.github.com/users/ewittinger/events{/privacy}", "received_events_url": "https://api.github.com/users/ewittinger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-08T00:02:23Z", "updated_at": "2018-09-04T00:47:23Z", "closed_at": "2018-09-04T00:47:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "**OS:** macOS high Sierra version 10.13.6 \r\n**Question:** Any thoughts on what is not allowing permissions? (Using sudo makes no difference.)\r\n\r\n**Source:**\r\n`import usb1\r\n\r\nVENDOR_ID = 0x1915\r\nPRODUCT_ID = 0x520A\r\ndef main():\r\n  context = usb1.USBContext()\r\n  handle = context.openByVendorIDAndProductID(VENDOR_ID, PRODUCT_ID, skip_on_error=True,)\r\n  if handle is None:\r\n    # Device not present, or user is not allowed to access device\r\n    print(\"Device not present\")\r\n  else:\r\n    print(handle)\r\n\r\n  if handle.kernelDriverActive(0):\r\n    print(\"usb taken, detach from kernel\")\r\n    handle.detachKernelDriver(0)\r\n  handle.claimInterface(0)\r\n  \r\n  device = context.getByVendorIDAndProductID(VENDOR_ID, PRODUCT_ID,skip_on_error=True)\r\n  print(handle.getDevice())`\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n**Error:**\r\n[Tue Aug 07 15:13] ew@Dev-iOS-MacBook-Pro: ~/Projects/Usb $ python scale_02.py\r\n<usb1.USBDeviceHandle object at 0x105555690>\r\nTraceback (most recent call last):\r\n  File \"scale_02.py\", line 32, in <module>\r\n    main()\r\n  File \"scale_02.py\", line 26, in main\r\n    handle.claimInterface(0)\r\n  File \"/usr/local/lib/python2.7/site-packages/usb1/__init__.py\", line 1276, in claimInterface\r\n    libusb1.libusb_claim_interface(self.__handle, interface),\r\n  File \"/usr/local/lib/python2.7/site-packages/usb1/__init__.py\", line 133, in mayRaiseUSBError\r\n    __raiseUSBError(value)\r\n  File \"/usr/local/lib/python2.7/site-packages/usb1/__init__.py\", line 125, in raiseUSBError\r\n    raise __STATUS_TO_EXCEPTION_DICT.get(value, __USBError)(value)\r\nusb1.USBErrorAccess: LIBUSB_ERROR_ACCESS [-3]\r\n\r\n**Additional info on my USB device:**\r\nDEVICE ID 1915:520a on Bus 064 Address 006 =================\r\n bLength                :   0x12 (18 bytes)\r\n bDescriptorType        :    0x1 Device\r\n bcdUSB                 :  0x200 USB 2.0\r\n bDeviceClass           :    0x0 Specified at interface\r\n bDeviceSubClass        :    0x0\r\n bDeviceProtocol        :    0x0\r\n bMaxPacketSize0        :   0x40 (64 bytes)\r\n idVendor               : 0x1915\r\n idProduct              : 0x520a\r\n bcdDevice              :  0x101 Device 1.01\r\n iManufacturer          :    0x1 Perfect Company\r\n iProduct               :    0x2 USB HID scale\r\n iSerialNumber          :    0x0\r\n bNumConfigurations     :    0x1\r\n  CONFIGURATION 1: 98 mA ===================================\r\n   bLength              :    0x9 (9 bytes)\r\n   bDescriptorType      :    0x2 Configuration\r\n   wTotalLength         :   0x22 (34 bytes)\r\n   bNumInterfaces       :    0x1\r\n   bConfigurationValue  :    0x1\r\n   iConfiguration       :    0x0\r\n   bmAttributes         :   0xe0 Self Powered, Remote Wakeup\r\n   bMaxPower            :   0x31 (98 mA)\r\n    INTERFACE 0: Human Interface Device ====================\r\n     bLength            :    0x9 (9 bytes)\r\n     bDescriptorType    :    0x4 Interface\r\n     bInterfaceNumber   :    0x0\r\n     bAlternateSetting  :    0x0\r\n     bNumEndpoints      :    0x1\r\n     bInterfaceClass    :    0x3 Human Interface Device\r\n     bInterfaceSubClass :    0x0\r\n     bInterfaceProtocol :    0x0\r\n     iInterface         :    0x0\r\n      ENDPOINT 0x81: Interrupt IN ==========================\r\n       bLength          :    0x7 (7 bytes)\r\n       bDescriptorType  :    0x5 Endpoint\r\n       bEndpointAddress :   0x81 IN\r\n       bmAttributes     :    0x3 Interrupt\r\n       wMaxPacketSize   :    0x8 (8 bytes)\r\n       bInterval        :    0x8\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/36", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/36/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/36/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/36", "id": 347053201, "node_id": "MDU6SXNzdWUzNDcwNTMyMDE=", "number": 36, "title": "libusb.org was moved to libusb.info", "user": {"login": "marco-waven", "id": 19884559, "node_id": "MDQ6VXNlcjE5ODg0NTU5", "avatar_url": "https://avatars1.githubusercontent.com/u/19884559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marco-waven", "html_url": "https://github.com/marco-waven", "followers_url": "https://api.github.com/users/marco-waven/followers", "following_url": "https://api.github.com/users/marco-waven/following{/other_user}", "gists_url": "https://api.github.com/users/marco-waven/gists{/gist_id}", "starred_url": "https://api.github.com/users/marco-waven/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marco-waven/subscriptions", "organizations_url": "https://api.github.com/users/marco-waven/orgs", "repos_url": "https://api.github.com/users/marco-waven/repos", "events_url": "https://api.github.com/users/marco-waven/events{/privacy}", "received_events_url": "https://api.github.com/users/marco-waven/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-02T15:05:08Z", "updated_at": "2018-09-04T00:43:32Z", "closed_at": "2018-09-04T00:43:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/34", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/34/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/34/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/34", "id": 301108734, "node_id": "MDU6SXNzdWUzMDExMDg3MzQ=", "number": 34, "title": "usb1.USBErrorAccess: LIBUSB_ERROR_ACCESS [-3]", "user": {"login": "bernardoaraujor", "id": 9698228, "node_id": "MDQ6VXNlcjk2OTgyMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/9698228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernardoaraujor", "html_url": "https://github.com/bernardoaraujor", "followers_url": "https://api.github.com/users/bernardoaraujor/followers", "following_url": "https://api.github.com/users/bernardoaraujor/following{/other_user}", "gists_url": "https://api.github.com/users/bernardoaraujor/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernardoaraujor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernardoaraujor/subscriptions", "organizations_url": "https://api.github.com/users/bernardoaraujor/orgs", "repos_url": "https://api.github.com/users/bernardoaraujor/repos", "events_url": "https://api.github.com/users/bernardoaraujor/events{/privacy}", "received_events_url": "https://api.github.com/users/bernardoaraujor/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-02-28T17:14:37Z", "updated_at": "2018-03-18T04:10:18Z", "closed_at": "2018-03-18T04:10:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Source:\r\n```\r\nimport usb1\r\n\r\n# Bus 003 Device 012: ID 1d57:fa20 Xenta\r\nVENDOR_ID = 0x1D57\r\nPRODUCT_ID = 0xFA20\r\n\r\nwith usb1.USBContext() as context:\r\n    handle = context.openByVendorIDAndProductID(\r\n        VENDOR_ID,\r\n        PRODUCT_ID,\r\n        skip_on_error=True,\r\n    )\r\n    if handle is None:\r\n        print('Device not present, or user is not allowed to access device.')\r\n    else:\r\n        print(handle)\r\n```\r\n\r\nError:\r\n```\r\n/usr/bin/python2.7 /home/bernardo/dev/psumon/psumon/tmp.py\r\nTraceback (most recent call last):\r\n  File \"/home/bernardo/dev/psumon/psumon/tmp.py\", line 12, in <module>\r\n    skip_on_error=True,\r\n  File \"/usr/lib/python2.7/site-packages/usb1/__init__.py\", line 2298, in openByVendorIDAndProductID\r\n    return result.open()\r\n  File \"/usr/lib/python2.7/site-packages/usb1/__init__.py\", line 2067, in open\r\n    mayRaiseUSBError(libusb1.libusb_open(self.device_p, byref(handle)))\r\n  File \"/usr/lib/python2.7/site-packages/usb1/__init__.py\", line 133, in mayRaiseUSBError\r\n    __raiseUSBError(value)\r\n  File \"/usr/lib/python2.7/site-packages/usb1/__init__.py\", line 125, in raiseUSBError\r\n    raise __STATUS_TO_EXCEPTION_DICT.get(value, __USBError)(value)\r\nusb1.USBErrorAccess: LIBUSB_ERROR_ACCESS [-3]\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nWorks fine when I invoke it with sudo:\r\n```\r\n$ sudo python tmp.py \r\n<usb1.USBDeviceHandle object at 0x7f3d2e170fd0>\r\n```\r\n\r\nI reckon from looking at `python-libusb1/usb1/libusb1.py` that `LIBUSB_ERROR_ACCESS [-3]` means Access denied (insufficient permissions).\r\nDo I need to set any kinds of permission in my system before I can use this package?\r\n\r\nAlso, which value should `INTERFACE` hold in the following code?\r\n```\r\n    with handle.claimInterface(INTERFACE):\r\n        # Do stuff with endpoints on claimed interface.\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/32", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/32/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/32/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/32", "id": 288082540, "node_id": "MDU6SXNzdWUyODgwODI1NDA=", "number": 32, "title": "Example on how to use python asyncio event loop with hotplug API", "user": {"login": "hetsch", "id": 439359, "node_id": "MDQ6VXNlcjQzOTM1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/439359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hetsch", "html_url": "https://github.com/hetsch", "followers_url": "https://api.github.com/users/hetsch/followers", "following_url": "https://api.github.com/users/hetsch/following{/other_user}", "gists_url": "https://api.github.com/users/hetsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hetsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hetsch/subscriptions", "organizations_url": "https://api.github.com/users/hetsch/orgs", "repos_url": "https://api.github.com/users/hetsch/repos", "events_url": "https://api.github.com/users/hetsch/events{/privacy}", "received_events_url": "https://api.github.com/users/hetsch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-12T10:59:57Z", "updated_at": "2018-01-17T20:36:57Z", "closed_at": "2018-01-17T20:36:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Vincent,\r\n\r\nyou have an `hotplug_advanced.py` file in your examples directory which shows how to use libusb1 with a custom event loop and custom pollers. What I don't understand right now is how to use libusb1 in conjunction with python's `asyncio` library (to use/reuse `asyncio`'s event loop). If it is not too much work, it might help if these advanced examples would integrate such  an example.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/31", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/31/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/31/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/31", "id": 286530501, "node_id": "MDU6SXNzdWUyODY1MzA1MDE=", "number": 31, "title": "RuntimeError when exiting the hotplug.py example", "user": {"login": "hetsch", "id": 439359, "node_id": "MDQ6VXNlcjQzOTM1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/439359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hetsch", "html_url": "https://github.com/hetsch", "followers_url": "https://api.github.com/users/hetsch/followers", "following_url": "https://api.github.com/users/hetsch/following{/other_user}", "gists_url": "https://api.github.com/users/hetsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hetsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hetsch/subscriptions", "organizations_url": "https://api.github.com/users/hetsch/orgs", "repos_url": "https://api.github.com/users/hetsch/repos", "events_url": "https://api.github.com/users/hetsch/events{/privacy}", "received_events_url": "https://api.github.com/users/hetsch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-06T23:57:51Z", "updated_at": "2018-01-17T13:58:47Z", "closed_at": "2018-01-12T00:37:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nfirst thank you for this library and your hard work! I tried to execute the `hotplug.py` from the examples directory. Works fine so far until I exit the program with `^C`. This is the error that I get:\r\n\r\n\tbash-3.2$ python libusb.py \r\n\tRegistering hotplug callback...\r\n\tDevice arrived: Bus 250 Device 009: ID 05ac:821a\r\n\tDevice arrived: Bus 250 Device 006: ID 046d:c526\r\n\tDevice arrived: Bus 253 Device 004: ID 05ac:020c\r\n\tDevice arrived: Bus 250 Device 005: ID 05ac:0253\r\n\tDevice arrived: Bus 250 Device 004: ID 0a5c:4500\r\n\tDevice arrived: Bus 250 Device 003: ID 1a40:0101\r\n\tDevice arrived: Bus 253 Device 003: ID 05ac:1003\r\n\tDevice arrived: Bus 253 Device 002: ID 05ac:8242\r\n\tDevice arrived: Bus 250 Device 002: ID 0424:2513\r\n\tDevice arrived: Bus 250 Device 001: ID 05ac:8509\r\n\tDevice arrived: Bus 253 Device 001: ID 0424:2513\r\n\tCallback registered. Monitoring events, ^C to exit\r\n\t^CExiting\r\n\tTraceback (most recent call last):\r\n\t  File \"libusb.py\", line 126, in <module>\r\n\t    main()\r\n\t  File \"libusb.py\", line 123, in main\r\n\t    print('Exiting')\r\n\t  File \"/Volumes/Data/Users/xxx/.local/share/virtualenvs/python-u35SbPCX/lib/python3.6/site-packages/usb1/__init__.py\", line 2156, in __exit__\r\n\t    self.close()\r\n\t  File \"/Volumes/Data/Users/xxx/.local/share/virtualenvs/python-u35SbPCX/lib/python3.6/site-packages/usb1/__init__.py\", line 2189, in close\r\n\t    self._exit()\r\n\t  File \"/Volumes/Data/Users/hetsch/.local/share/virtualenvs/python-u35SbPCX/lib/python3.6/site-packages/usb1/__init__.py\", line 2197, in _exit\r\n\t    for handle in self.__hotplug_callback_dict.keys():\r\n\tRuntimeError: dictionary changed size during iteration\r\n\r\nI haven't attached any devices, just started and and then imediately exited the program without any other interaction.\r\n\r\nMy environment:\r\n\r\n    Python 3.6.3 (default, Oct  4 2017, 06:09:05) \r\n    [GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)] on darwin\r\n\r\n    libusb1 1.6.4 (latest pypi version)\r\n\r\n    brew info libusb\r\n    libusb: stable 1.0.21 (bottled), HEAD\r\n    Library for USB device access\r\n    http://libusb.info\r\n    /usr/local/Cellar/libusb/1.0.21 (29 files, 510.5KB) *\r\n    Poured from bottle on 2017-09-13 at 17:18:48\r\n    From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/libusb.rb", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/30", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/30/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/30/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/30", "id": 281778932, "node_id": "MDU6SXNzdWUyODE3Nzg5MzI=", "number": 30, "title": "Not Working on MacOS Sierra 10.12.6 | dlopen(libusb-1.0.dylib, 6): image not found", "user": {"login": "chelinho139", "id": 7676795, "node_id": "MDQ6VXNlcjc2NzY3OTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/7676795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chelinho139", "html_url": "https://github.com/chelinho139", "followers_url": "https://api.github.com/users/chelinho139/followers", "following_url": "https://api.github.com/users/chelinho139/following{/other_user}", "gists_url": "https://api.github.com/users/chelinho139/gists{/gist_id}", "starred_url": "https://api.github.com/users/chelinho139/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chelinho139/subscriptions", "organizations_url": "https://api.github.com/users/chelinho139/orgs", "repos_url": "https://api.github.com/users/chelinho139/repos", "events_url": "https://api.github.com/users/chelinho139/events{/privacy}", "received_events_url": "https://api.github.com/users/chelinho139/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-13T14:58:37Z", "updated_at": "2017-12-13T22:48:29Z", "closed_at": "2017-12-13T22:48:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello I am running MacOS Sierra 10.12.6\r\ninstalled both ways using pip and also downloading source, neither way works.\r\n\r\nError:\r\n`>>> import usb1\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"usb1/__init__.py\", line 61, in <module>\r\n    from . import libusb1\r\n  File \"usb1/libusb1.py\", line 199, in <module>\r\n    libusb = _loadLibrary()\r\n  File \"usb1/libusb1.py\", line 173, in _loadLibrary\r\n    return dll_loader('libusb-1.0' + suffix, **loader_kw)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ctypes/__init__.py\", line 365, in __init__\r\n    self._handle = _dlopen(self._name, mode)\r\nOSError: dlopen(libusb-1.0.dylib, 6): image not found`\r\n\r\n\r\nAny suggestions? Thanks in advance", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/29", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/29/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/29/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/29/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/29", "id": 251304873, "node_id": "MDU6SXNzdWUyNTEzMDQ4NzM=", "number": 29, "title": "USBErrorBusy with devices in hot-plug events notifications", "user": {"login": "lifely", "id": 442276, "node_id": "MDQ6VXNlcjQ0MjI3Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/442276?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifely", "html_url": "https://github.com/lifely", "followers_url": "https://api.github.com/users/lifely/followers", "following_url": "https://api.github.com/users/lifely/following{/other_user}", "gists_url": "https://api.github.com/users/lifely/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifely/subscriptions", "organizations_url": "https://api.github.com/users/lifely/orgs", "repos_url": "https://api.github.com/users/lifely/repos", "events_url": "https://api.github.com/users/lifely/events{/privacy}", "received_events_url": "https://api.github.com/users/lifely/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-18T17:05:43Z", "updated_at": "2017-08-21T13:15:18Z", "closed_at": "2017-08-21T13:15:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello guys,\r\n\r\nI've been playing and implementing some backend with `usb1` and `libusb1` for the past week,\r\ntrying to use the event to detect some devices and manage them once registered.\r\n\r\nI've stumbled across a weird behaviour for me and would like to know if this is supposed to be a bug (in libusb or python-usb1) or this is expected behaviour that i'm supposed to handle.\r\n\r\nThe issues appears during hot plug events, when a device is plug-in while listening, trying to get the `device.getSerialNumber()` raise `USBErrorBusy`.\r\n\r\nI've tried a multiple of solution including `detachKernelDriver`, `claimInterface`, `releaseInterface` and `resetDevice` but nothing seems to affect the issue.\r\n\r\nStrangely if the devices are already plugging in before registering for hot-plugs event, the serialNumber can be retrieve and no `USBErrorBusy` is raised.\r\n\r\nI've found an ugly work-around which is to fetch the device and serialNumber through a second `USBContext` instance instanciated on the fly, which make me feel like it's a bug somewhere.\r\n\r\nI'm joining this issue with an sample script that reproduce the issue, you can easily test it with plugin a android phone in and out, and also having the phone already plug-in before launching the script.\r\n\r\n\r\n\r\nHere the Work-around in details and next is a sample text output:\r\n```python\r\ntry:\r\n    print \"Device SerialNumber: %s\" % device.getSerialNumber()\r\nexcept Exception as e:\r\n    with usb1.USBContext() as context:\r\n        device_ = context.getByVendorIDAndProductID(device.getVendorID(), device.getProductID())\r\n        serialNumber_ = device_.getSerialNumber()\r\n        print \"Fetching device with new usbContext fix usb_busy error: %s\" % serialNumber_\r\n```\r\n\r\n```\r\nRegistering hotplug callback...\r\nDevice arrived: Bus 020 Device 024: ID 18d1:4ee2 - 1\r\nDevice SerialNumber: ENU7N15B14005190\r\nDevice arrived: Bus 026 Device 003: ID 05ac:8510 - 1\r\nDevice SerialNumber: CC2D820AKCDN9KB0\r\nDevice arrived: Bus 029 Device 007: ID 05ac:8286 - 1\r\nDevice SerialNumber: None\r\nDevice arrived: Bus 029 Device 004: ID 05ac:0262 - 1\r\nDevice SerialNumber: None\r\nDevice arrived: Bus 029 Device 003: ID 0a5c:4500 - 1\r\nDevice SerialNumber: None\r\nDevice arrived: Bus 029 Device 002: ID 0424:2512 - 1\r\nDevice SerialNumber: None\r\nDevice arrived: Bus 026 Device 001: ID 8087:0024 - 1\r\nDevice SerialNumber: None\r\nDevice arrived: Bus 029 Device 001: ID 8087:0024 - 1\r\nDevice SerialNumber: None\r\nCallback registered. Monitoring events, ^C to exit\r\n\r\nDevice left: Bus 020 Device 024: ID 18d1:4ee2 - 1\r\n\r\nDevice arrived: Bus 020 Device 025: ID 18d1:4ee2 - 1\r\ndevice.getSerialNumber failed with: LIBUSB_ERROR_BUSY [-6] (USBErrorBusy)\r\nFetching device with new usbContext fix usb_busy error: ENU7N15B14005190\r\n\r\nDevice left: Bus 020 Device 025: ID 18d1:4ee2 - 1\r\n\r\nDevice arrived: Bus 020 Device 023: ID 18d1:4ee2 - 1\r\ndevice.getSerialNumber failed with: LIBUSB_ERROR_BUSY [-6] (USBErrorBusy)\r\nFetching device with new usbContext fix usb_busy error: ENU7N15B14005190\r\n```\r\n\r\nCould i fix the issue in the first place without needing my work-around ?\r\nShould this be reported to `libusb1` or handle directly in `python-usb1` ?\r\n\r\nIs there any device release business logic that should happen during hot-plug disconnect or connect event to make the usb \"un-busy\"\r\n\r\nThanks for the help guys. \r\n\r\n`hotplug.py`\r\n```python\r\n#!/usr/bin/env python\r\n# Copyright (C) 2013-2016  Vincent Pelletier <plr.vincent@gmail.com>\r\n#\r\n# This library is free software; you can redistribute it and/or\r\n# modify it under the terms of the GNU Lesser General Public\r\n# License as published by the Free Software Foundation; either\r\n# version 2.1 of the License, or (at your option) any later version.\r\n#\r\n# This library is distributed in the hope that it will be useful,\r\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n# Lesser General Public License for more details.\r\n#\r\n# You should have received a copy of the GNU Lesser General Public\r\n# License along with this library; if not, write to the Free Software\r\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\nimport usb1\r\n\r\neventType = {   usb1.HOTPLUG_EVENT_DEVICE_ARRIVED: 'arrived',\r\n                usb1.HOTPLUG_EVENT_DEVICE_LEFT: 'left', }\r\n\r\ndef hotplug_callback(context, device, event):\r\n    print \"Device %s: %s - %s\" % (eventType[event], device, device.getNumConfigurations())\r\n\r\n    try:\r\n        print \"Device SerialNumber: %s\" % device.getSerialNumber()\r\n    except Exception as e:\r\n        if type(e) is usb1.USBErrorNoDevice:\r\n            return \r\n\r\n        print \"device.getSerialNumber failed with: %s (%s)\" % (e, type(e).__name__)        \r\n        with usb1.USBContext() as context:\r\n            device_ = context.getByVendorIDAndProductID(device.getVendorID(), device.getProductID())\r\n            serialNumber_ = device_.getSerialNumber()\r\n            print \"Fetching device with new usbContext fix usb_busy error: %s\" % serialNumber_\r\n    pass\r\n\r\ndef main():\r\n    with usb1.USBContext() as context:\r\n        if not context.hasCapability(usb1.CAP_HAS_HOTPLUG):\r\n            print 'Hotplug support is missing. Please update your libusb version.'\r\n            return\r\n        print 'Registering hotplug callback...'\r\n        opaque = context.hotplugRegisterCallback(hotplug_callback)\r\n        print 'Callback registered. Monitoring events, ^C to exit'\r\n        try:\r\n            while True:\r\n                context.handleEvents()\r\n        except (KeyboardInterrupt, SystemExit):\r\n            print 'Exiting'\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/28", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/28/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/28/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/28", "id": 225432968, "node_id": "MDU6SXNzdWUyMjU0MzI5Njg=", "number": 28, "title": "Cant' get macos to list devices", "user": {"login": "BrendanSimon", "id": 472245, "node_id": "MDQ6VXNlcjQ3MjI0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/472245?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BrendanSimon", "html_url": "https://github.com/BrendanSimon", "followers_url": "https://api.github.com/users/BrendanSimon/followers", "following_url": "https://api.github.com/users/BrendanSimon/following{/other_user}", "gists_url": "https://api.github.com/users/BrendanSimon/gists{/gist_id}", "starred_url": "https://api.github.com/users/BrendanSimon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BrendanSimon/subscriptions", "organizations_url": "https://api.github.com/users/BrendanSimon/orgs", "repos_url": "https://api.github.com/users/BrendanSimon/repos", "events_url": "https://api.github.com/users/BrendanSimon/events{/privacy}", "received_events_url": "https://api.github.com/users/BrendanSimon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-05-01T13:16:53Z", "updated_at": "2018-01-08T23:33:08Z", "closed_at": "2018-01-08T23:33:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI'm using Python3.6 with `libusb1` from PyPI and `libusb1` installed via HomeBrew, but I can't get my USB devices listed.\r\n\r\nIt lists standard apple devices, but not my serial ports, etc.  However `lsusb` does list the devices (it's a bash script that parses the outupt of Sytem Profiler or System Information app).\r\n\r\nI've read about libusb inf files for Windows (not sure why they're needed).  Is there something similar required for Mac?\r\n\r\nIs there a mailing list for python-libusb1 or should I use the libsub mailing list?\r\n\r\nThanks, Brendan.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/27", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/27/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/27/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/27", "id": 204120424, "node_id": "MDU6SXNzdWUyMDQxMjA0MjQ=", "number": 27, "title": "Libusb1 Async Control Buffer Null", "user": {"login": "jdkeenan", "id": 6148827, "node_id": "MDQ6VXNlcjYxNDg4Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/6148827?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdkeenan", "html_url": "https://github.com/jdkeenan", "followers_url": "https://api.github.com/users/jdkeenan/followers", "following_url": "https://api.github.com/users/jdkeenan/following{/other_user}", "gists_url": "https://api.github.com/users/jdkeenan/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdkeenan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdkeenan/subscriptions", "organizations_url": "https://api.github.com/users/jdkeenan/orgs", "repos_url": "https://api.github.com/users/jdkeenan/repos", "events_url": "https://api.github.com/users/jdkeenan/events{/privacy}", "received_events_url": "https://api.github.com/users/jdkeenan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-01-30T20:27:48Z", "updated_at": "2017-02-03T14:21:15Z", "closed_at": "2017-02-03T14:21:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been using libusb1 for around 9 months for multiple usb devices and found out ew 1.6.0 versions and later cause problems with my devices. I'm pretty sure it's tied to this issue (https://github.com/vpelletier/python-libusb1/issues/21) and using the getBuffer() command to get the most recent data sent when preforming a setControl call.\r\nAfter some further inspection I couldn't find where the buffer is actually updated during a 0xC1 request. Any help would be much appreciated.\r\n\r\nHere is some example code. I'm awaiting asyncControlTransfer which is calling setControl. This works perfectly fine with 1.5.3\r\n```\r\ntransfer = await asyncusb.asyncControlTransfer(\r\n            self.handle, 0xC1,\r\n            0x20,\r\n            0, 0, 8, timeout = self.CT_TIMEOUT)\r\nresult = transfer.getUserData()\r\n\r\ndef asyncControlTransfer(handle, *args, **kwargs):\r\n    ct = handle.getTransfer()\r\n    ct.setControl(*args, **kwargs)\r\n    return asyncTransfer(ct)\r\n\r\ndef asyncTransfer(transfer):\r\n    fut = asyncio.Future()\r\n    def callback(t):\r\n        try:\r\n            result = t.getStatus()\r\n            if result != TRANSFER_COMPLETED:\r\n                raise USBTransferError(result)\r\n            if not fut.cancelled():\r\n                fut.set_result(t)\r\n        except Exception as e:\r\n            fut.set_exception(e)\r\n    transfer.setCallback(callback)\r\n    result = transfer.submit()\r\n    return fut\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/25", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/25/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/25/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/25", "id": 198462427, "node_id": "MDU6SXNzdWUxOTg0NjI0Mjc=", "number": 25, "title": "ValueError: Invalid string descriptor", "user": {"login": "mangodan2003", "id": 2872937, "node_id": "MDQ6VXNlcjI4NzI5Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/2872937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mangodan2003", "html_url": "https://github.com/mangodan2003", "followers_url": "https://api.github.com/users/mangodan2003/followers", "following_url": "https://api.github.com/users/mangodan2003/following{/other_user}", "gists_url": "https://api.github.com/users/mangodan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/mangodan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mangodan2003/subscriptions", "organizations_url": "https://api.github.com/users/mangodan2003/orgs", "repos_url": "https://api.github.com/users/mangodan2003/repos", "events_url": "https://api.github.com/users/mangodan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/mangodan2003/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-03T12:13:18Z", "updated_at": "2017-01-03T13:10:45Z", "closed_at": "2017-01-03T13:10:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems usb1 is expecting the full string descriptor whereas libusb seems to returning only the string part.\r\n\r\nIf I hack the code at or around line 1350 to not check for the DT_STRING type and return the full result instead of just a subset it works as expected.\r\n\r\n```\r\n    manufacturer_string = device.getManufacturer()\r\n  File \"/usr/local/lib/python3.4/dist-packages/usb1/__init__.py\", line 1961, in getManufacturer\r\n    self.device_descriptor.iManufacturer)\r\n  File \"/usr/local/lib/python3.4/dist-packages/usb1/__init__.py\", line 1953, in _getASCIIStringDescriptor\r\n    return self.open().getASCIIStringDescriptor(descriptor)\r\n  File \"/usr/local/lib/python3.4/dist-packages/usb1/__init__.py\", line 1351, in getASCIIStringDescriptor\r\n    raise ValueError('Invalid string descriptor')\r\nValueError: Invalid string descriptor\r\n```\r\n\r\n```\r\n        #if received < 2:# or descriptor_string[1] != DT_STRING:\r\n        #    print('received : {}, descriptor_string[1] : {}'.format(received,descriptor_string[1]))\r\n        #    raise ValueError('Invalid string descriptor')\r\n        #return descriptor_string[2:min(\r\n        #    received,\r\n        #    descriptor_string[0],\r\n        #)].decode('ASCII', errors=errors)\r\n        return descriptor_string.decode('ASCII', errors=errors)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/24", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/24/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/24/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/24", "id": 198274277, "node_id": "MDU6SXNzdWUxOTgyNzQyNzc=", "number": 24, "title": "AttributeError: 'int' object has no attribute 'value' in function iterISO", "user": {"login": "LemarinelNet", "id": 10656218, "node_id": "MDQ6VXNlcjEwNjU2MjE4", "avatar_url": "https://avatars1.githubusercontent.com/u/10656218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LemarinelNet", "html_url": "https://github.com/LemarinelNet", "followers_url": "https://api.github.com/users/LemarinelNet/followers", "following_url": "https://api.github.com/users/LemarinelNet/following{/other_user}", "gists_url": "https://api.github.com/users/LemarinelNet/gists{/gist_id}", "starred_url": "https://api.github.com/users/LemarinelNet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LemarinelNet/subscriptions", "organizations_url": "https://api.github.com/users/LemarinelNet/orgs", "repos_url": "https://api.github.com/users/LemarinelNet/repos", "events_url": "https://api.github.com/users/LemarinelNet/events{/privacy}", "received_events_url": "https://api.github.com/users/LemarinelNet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-01-01T17:11:11Z", "updated_at": "2017-01-02T15:21:57Z", "closed_at": "2017-01-02T08:00:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a problem while trying to make an ISOCHRONOUS transfert.\r\nI have two computers (work and home), and it did worked at work.\r\nI've just reinstalled my home computer with ubuntu 16.04, and python-libusb1 is installed from last source.\r\n\r\nI've got the following error, which refers to this part of code : \r\nAttributeError: 'int' object has no attribute 'value'\r\n\r\nCode : (line 694 of usb.py ) : \r\n`\r\n        buffer_position = transfer.buffer.value\r\n`\r\nI can't figure out what I've done bad ! ;)\r\n\r\nThanks for you help !", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/22", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/22/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/22/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/22", "id": 189421116, "node_id": "MDU6SXNzdWUxODk0MjExMTY=", "number": 22, "title": "LIBUSB_ERROR_NOT_SUPPORTED when trying to perform isochronous transfer", "user": {"login": "l0ud", "id": 778851, "node_id": "MDQ6VXNlcjc3ODg1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/778851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l0ud", "html_url": "https://github.com/l0ud", "followers_url": "https://api.github.com/users/l0ud/followers", "following_url": "https://api.github.com/users/l0ud/following{/other_user}", "gists_url": "https://api.github.com/users/l0ud/gists{/gist_id}", "starred_url": "https://api.github.com/users/l0ud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l0ud/subscriptions", "organizations_url": "https://api.github.com/users/l0ud/orgs", "repos_url": "https://api.github.com/users/l0ud/repos", "events_url": "https://api.github.com/users/l0ud/events{/privacy}", "received_events_url": "https://api.github.com/users/l0ud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-11-15T15:24:23Z", "updated_at": "2018-01-08T23:33:53Z", "closed_at": "2018-01-08T23:33:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I'm trying to perform simple isochronous IN transfer on existing sound card device.\r\nIN endpoint is located on interface 2, alternate setting 1.\r\n\r\nI'm using Windows, libusbk backend. I've already tried WinUsb driver with the same result (driver is installed on root composite device using Zadig).\r\n\r\nThis is what I'm doing so far:\r\n1. Get libusb context (context = usb1.USBContext())\r\n2. Get device handle (using context.openByVendorIDAndProductID)\r\n3. handle.claimInterface(2)\r\n4. handle.setInterfaceAltSetting(2, 1)\r\n5. Create new transfer (handle.getTransfer(100))\r\n6. transfer.setIsochronous() - endpoint ID 0x81, transfer length: 17600, iso_transfer_length_list is empty.\r\n7. transfer.submit()\r\n\r\nUnfortunately, call to submit throws LIBUSB_ERROR_NOT_SUPPORTED [-12] exception. I'm not sure why, as isochronous transfers should be supported in libusbk backend?\r\nDo you have any examples how to perform isochronous transfer on non-zero interface and alternate setting? It would be very helpful to solve that issue.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/21", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/21/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/21/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/21/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/21", "id": 183197680, "node_id": "MDU6SXNzdWUxODMxOTc2ODA=", "number": 21, "title": "libusb1 slightly slower than pyusb for large data.", "user": {"login": "diamondman", "id": 1037510, "node_id": "MDQ6VXNlcjEwMzc1MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1037510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diamondman", "html_url": "https://github.com/diamondman", "followers_url": "https://api.github.com/users/diamondman/followers", "following_url": "https://api.github.com/users/diamondman/following{/other_user}", "gists_url": "https://api.github.com/users/diamondman/gists{/gist_id}", "starred_url": "https://api.github.com/users/diamondman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diamondman/subscriptions", "organizations_url": "https://api.github.com/users/diamondman/orgs", "repos_url": "https://api.github.com/users/diamondman/repos", "events_url": "https://api.github.com/users/diamondman/events{/privacy}", "received_events_url": "https://api.github.com/users/diamondman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 16, "created_at": "2016-10-15T08:40:45Z", "updated_at": "2016-11-30T00:40:10Z", "closed_at": "2016-11-30T00:18:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using libusb1 to communicate to a device and am looking for ways to make the transfer faster.\nThe bulk transfer is 5959114 bytes to the USB Bulk endpoint 2. Currently, the bulkWrite call of usb1 is taking the longest amount of time of my project. I tested sending the same data with pyusb and found pyusb usually faster than libusb1. I hope my statistics and use case can help increase performance of this great repository. Following are the statistics I came up with, and how to reproduce them.\n\nI hooked kernprof to my project and profiled usb1's bulkWrite function. Here are the results. I noticed the ctype conversion takes almost as much time as the transfer. Maybe there is a way to do this with zero copy in C?\n\n```\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n  1378                                               @profile\n  1379                                               def bulkWrite(self, endpoint, data, timeout=0):\n  1380                                                   \"\"\"\n  1381                                                   Synchronous bulk write.\n  1382                                                   endpoint: endpoint to send data to.\n  1383                                                   data: data to send.\n  1384                                                   timeout: in milliseconds, how long to wait for device acknowledgement.\n  1385                                                     Set to 0 to disable.\n  1386                                           \n  1387                                                   Returns the number of bytes actually sent.\n  1388                                                   \"\"\"\n  1389                                                   # pylint: disable=undefined-variable\n  1390         4           20      5.0      0.0          endpoint = (endpoint & ~ENDPOINT_DIR_MASK) | ENDPOINT_OUT\n  1391                                                   # pylint: enable=undefined-variable\n  1392         4      1381478 345369.5     41.5          data = (c_char * len(data))(*data)\n  1393         4      1945835 486458.8     58.5          return self._bulkTransfer(endpoint, data, sizeof(data), timeout)\n\n```\n# Example Code\n### Code with usb1\n\n```\nfrom usb1 import USBContext\nimport math\nc = USBContext()\nh = c.openByVendorIDAndProductID(0x03fd, 0x000d)\nh.claimInterface(0)\nh.setInterfaceAltSetting(0,1)\ndata = bytearray(b\"\\\\xf0\\\\x0f\"* (int(math.ceil(0xb5db91/4.0))))\nh.controlWrite(0x40, 0xb0, 0xb5A6, 0xdb91, b\"\")\nh.bulkWrite(2,data,timeout=5000)\n```\n\ntimeit line:\n\n```\ntimeit.timeit('h.controlWrite(0x40, 0xb0, 0xb5A6, 0xdb91, b\"\");h.bulkWrite(2,data,timeout=5000)', setup='from usb1 import USBContext;c = USBContext();h = c.openByVendorIDAndProductID(0x03fd, 0x000d);h.claimInterface(0);h.setInterfaceAltSetting(0,1);import math;data = bytearray(b\"\\\\xf0\\\\x0f\"* (int(math.ceil(0xb5db91/4.0))));',number=20)\n\n89.61355720099527 (Average 4.480677860049764s)\n```\n### Code with pyusb\n\n```\nimport usb.core\nfrom time import time\ndev = usb.core.find(idVendor=0x03fd, idProduct=0x000d)\ndev.set_configuration()\ncfg = dev.get_active_configuration()\nintf=cfg[0,1]\nintf.set_altsetting()\nep = intf.endpoints()[2]\ndata = bytearray(b\"\\\\xf0\\\\x0f\"*(int(math.ceil(0xb5db91/4.0))))\nh.controlWrite(0x40, 0xb0, 0xb5A6, 0xdb91, b\"\")\nh.bulkWrite(2,data,timeout=5000)\n```\n\nHere is the timeit line\n\n```\nimport timeit\ntimeit.timeit('h.controlWrite(0x40, 0xb0, 0xb5A6, 0xdb91, b\"\");h.bulkWrite(2,data,timeout=5000)', setup='from usb1 import USBContext;c = USBContext();h = c.openByVendorIDAndProductID(0x03fd, 0x000d);h.claimInterface(0);h.setInterfaceAltSetting(0,1);import math;data = bytearray(b\"\\\\xf0\\\\x0f\"*(int(math.ceil(0xb5db91/4.0))))',number=20)\n\n63.37948983995011 (Averate 3.1689744919975054s)\n```\n\nI can do a comparison with code in C directly calling libusb 1.0 if the benchmarks are useful.\n\nHere is my code that I ran during the profiling: https://github.com/diamondman/proteusisc/blob/059d94e3625331c2786bd5a592388bd9f4caa893/proteusisc/drivers/xilinxPC1driver.py#L327-L333 (Please forgive the messyness. It is still alpha)\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/20", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/20/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/20/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/20", "id": 176900870, "node_id": "MDU6SXNzdWUxNzY5MDA4NzA=", "number": 20, "title": "unorderable types in USBTransfer.cancel", "user": {"login": "kalvdans", "id": 1099712, "node_id": "MDQ6VXNlcjEwOTk3MTI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1099712?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kalvdans", "html_url": "https://github.com/kalvdans", "followers_url": "https://api.github.com/users/kalvdans/followers", "following_url": "https://api.github.com/users/kalvdans/following{/other_user}", "gists_url": "https://api.github.com/users/kalvdans/gists{/gist_id}", "starred_url": "https://api.github.com/users/kalvdans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kalvdans/subscriptions", "organizations_url": "https://api.github.com/users/kalvdans/orgs", "repos_url": "https://api.github.com/users/kalvdans/repos", "events_url": "https://api.github.com/users/kalvdans/events{/privacy}", "received_events_url": "https://api.github.com/users/kalvdans/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-09-14T13:00:28Z", "updated_at": "2016-09-15T13:18:22Z", "closed_at": "2016-09-15T13:18:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I got an error when calling cancel on a transfer. Test code:\n\n<pre>\nimport usb1\n\ndef on_read_finished(transfer):\n    pass\n\ncontext = usb1.USBContext()\nhandle = context.openByVendorIDAndProductID(\n    0x10c4, 0x842a, skip_on_error=True,\n)\ntransfer = handle.getTransfer()\ntransfer.setBulk(0x81, 65536, callback=lambda:0)\ntransfer.submit()\ntransfer.cancel()\n</pre>\n\n\nError:\n\n<pre>\nTraceback (most recent call last):\n  File \"scripts/repro.py\", line 13, in <module>\n    transfer.cancel()\n  File \"/usr/local/lib/python3.5/dist-packages/usb1.py\", line 748, in cancel\n    self.__mayRaiseUSBError(self.__libusb_cancel_transfer(self.__transfer))\n  File \"/usr/local/lib/python3.5/dist-packages/usb1.py\", line 132, in mayRaiseUSBError\n    if value < 0:\nTypeError: unorderable types: USBTransfer() < int()\n</pre>\n\nPython 3.5.2, libusb1 (1.5.2) installed via pip, libusb-1.0-0:amd64 version 2:1.0.20-1 installed via apt.``\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/18", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/18/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/18/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/18", "id": 171423699, "node_id": "MDU6SXNzdWUxNzE0MjM2OTk=", "number": 18, "title": "getSupportedLanguageList does not work on Python 3.5", "user": {"login": "l0ud", "id": 778851, "node_id": "MDQ6VXNlcjc3ODg1MQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/778851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/l0ud", "html_url": "https://github.com/l0ud", "followers_url": "https://api.github.com/users/l0ud/followers", "following_url": "https://api.github.com/users/l0ud/following{/other_user}", "gists_url": "https://api.github.com/users/l0ud/gists{/gist_id}", "starred_url": "https://api.github.com/users/l0ud/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/l0ud/subscriptions", "organizations_url": "https://api.github.com/users/l0ud/orgs", "repos_url": "https://api.github.com/users/l0ud/repos", "events_url": "https://api.github.com/users/l0ud/events{/privacy}", "received_events_url": "https://api.github.com/users/l0ud/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-08-16T14:16:51Z", "updated_at": "2016-08-17T13:28:03Z", "closed_at": "2016-08-17T12:59:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I just encountered a small issue in your library.\nIn getSupportedLanguageList, this line gives error about incompatible types (int and float):\n`for offset in xrange(1, length / 2):`\n\nUsing binary shift instead, should solve this problem:\n`for offset in xrange(1, length >> 1):`\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/17", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/17/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/17/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/17/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/17", "id": 167249952, "node_id": "MDU6SXNzdWUxNjcyNDk5NTI=", "number": 17, "title": "Debian/Ubuntu package", "user": {"login": "diamondman", "id": 1037510, "node_id": "MDQ6VXNlcjEwMzc1MTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/1037510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diamondman", "html_url": "https://github.com/diamondman", "followers_url": "https://api.github.com/users/diamondman/followers", "following_url": "https://api.github.com/users/diamondman/following{/other_user}", "gists_url": "https://api.github.com/users/diamondman/gists{/gist_id}", "starred_url": "https://api.github.com/users/diamondman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diamondman/subscriptions", "organizations_url": "https://api.github.com/users/diamondman/orgs", "repos_url": "https://api.github.com/users/diamondman/repos", "events_url": "https://api.github.com/users/diamondman/events{/privacy}", "received_events_url": "https://api.github.com/users/diamondman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-07-24T19:35:10Z", "updated_at": "2016-11-30T00:19:46Z", "closed_at": "2016-11-30T00:19:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am a big fan of your work on this library, and believe the interface you present should be the standard way usb is interacted with in python. Unfortunately I can not rely on it when I am making debian/ubuntu packages because pip integration has always been problematic. \n\nI would like to request a python-usb1 and python3-usb1 packages (or whatever you want to call them) be maintained in the debian package repository. I am aware that this process is a lot more complicated than publishing a project onto pypi, but I think it will be worth it to get people access to this great library. \n\nI am willing to help get the packaging process started. I have never tried to get a package approved by the debian team for inclusion in the core repositories, but I have just built a package for a small python project I built, so I should be able to help at least getting it in a PPA or a private server.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/15", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/15/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/15/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/15", "id": 156955505, "node_id": "MDU6SXNzdWUxNTY5NTU1MDU=", "number": 15, "title": "unable to find devices", "user": {"login": "railsfactory-prabhu", "id": 17897498, "node_id": "MDQ6VXNlcjE3ODk3NDk4", "avatar_url": "https://avatars0.githubusercontent.com/u/17897498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/railsfactory-prabhu", "html_url": "https://github.com/railsfactory-prabhu", "followers_url": "https://api.github.com/users/railsfactory-prabhu/followers", "following_url": "https://api.github.com/users/railsfactory-prabhu/following{/other_user}", "gists_url": "https://api.github.com/users/railsfactory-prabhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/railsfactory-prabhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/railsfactory-prabhu/subscriptions", "organizations_url": "https://api.github.com/users/railsfactory-prabhu/orgs", "repos_url": "https://api.github.com/users/railsfactory-prabhu/repos", "events_url": "https://api.github.com/users/railsfactory-prabhu/events{/privacy}", "received_events_url": "https://api.github.com/users/railsfactory-prabhu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-05-26T10:44:31Z", "updated_at": "2016-05-30T05:51:16Z", "closed_at": "2016-05-28T08:19:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n   I am trying to list of usb devices in windows machine. I am using python 3.4 and following is my code:\n\nimport usb1\n\nwith usb1.USBContext() as context:\n    # handle = context.openByVendorIDAndProductID(\n    #     skip_on_error=True,\n    # )\n    handle=context.open()\n    if handle is None:\n        #Device not present, or user is not allowed to access device.\n        print(\"No device found\")\n    else:\n        print(\"device found\")\n    # with handle.claimInterface(INTERFACE):\n        # Do stuff with endpoints on claimed interface.\n\nAnd i am getting following error:\nC:\\Python34\\python.exe C:/Users/Prabhu/PycharmProjects/USBTRACER/testsamples/usbtest1.py\nTraceback (most recent call last):\n  File \"C:/Users/Prabhu/PycharmProjects/USBTRACER/testsamples/usbtest1.py\", line 1, in <module>\n    import usb1\n  File \"<frozen importlib._bootstrap>\", line 2237, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 2226, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1191, in _load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1161, in _load_backward_compatible\n  File \"C:\\Python34\\lib\\site-packages\\libusb1-1.5.0-py3.4.egg\\usb1.py\", line 60, in <module>\n    import libusb1\n  File \"<frozen importlib._bootstrap>\", line 2237, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 2226, in _find_and_load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1191, in _load_unlocked\n  File \"<frozen importlib._bootstrap>\", line 1161, in _load_backward_compatible\n  File \"C:\\Python34\\lib\\site-packages\\libusb1-1.5.0-py3.4.egg\\libusb1.py\", line 193, in <module>\n    libusb = _loadLibrary()\n  File \"C:\\Python34\\lib\\site-packages\\libusb1-1.5.0-py3.4.egg\\libusb1.py\", line 167, in _loadLibrary\n    return dll_loader('libusb-1.0' + suffix, **loader_kw)\n  File \"C:\\Python34\\Lib\\ctypes__init__.py\", line 351, in **init**\n    self._handle = _dlopen(self._name, mode)\nOSError: [WinError 126] The specified module could not be found\n\nProcess finished with exit code 1\n\nThanks in advance.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/14", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/14/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/14/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/14", "id": 145953493, "node_id": "MDU6SXNzdWUxNDU5NTM0OTM=", "number": 14, "title": "Hang on cleanup", "user": {"login": "astronouth7303", "id": 401438, "node_id": "MDQ6VXNlcjQwMTQzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/401438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astronouth7303", "html_url": "https://github.com/astronouth7303", "followers_url": "https://api.github.com/users/astronouth7303/followers", "following_url": "https://api.github.com/users/astronouth7303/following{/other_user}", "gists_url": "https://api.github.com/users/astronouth7303/gists{/gist_id}", "starred_url": "https://api.github.com/users/astronouth7303/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astronouth7303/subscriptions", "organizations_url": "https://api.github.com/users/astronouth7303/orgs", "repos_url": "https://api.github.com/users/astronouth7303/repos", "events_url": "https://api.github.com/users/astronouth7303/events{/privacy}", "received_events_url": "https://api.github.com/users/astronouth7303/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2016-04-05T10:50:37Z", "updated_at": "2016-04-10T08:52:48Z", "closed_at": "2016-04-10T08:35:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "While tracking down an [issue in another project](https://github.com/fidian/bonkers/issues/4), I wrote [this script](https://gist.github.com/astronouth7303/d5cea052a0b33e423b312ddbd1c00441) and found that it hangs in `libusb_unlock_events()` (called from `libusb_close()`).\n\nI'm running Arch Linux current.\n- Python: 3.5.1\n- libusb: 1.0.20-1\n- python-libusb1 (from pip): 1.4.1\n- Kernel: 4.4.5-1 x64\n\nThe C program I based this script on does not hang, but probably does things slightly different.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/11", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/11/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/11/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/11", "id": 109581628, "node_id": "MDU6SXNzdWUxMDk1ODE2Mjg=", "number": 11, "title": "Document accepted types for `data` argument to *write methods", "user": {"login": "wesQ3", "id": 438799, "node_id": "MDQ6VXNlcjQzODc5OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/438799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesQ3", "html_url": "https://github.com/wesQ3", "followers_url": "https://api.github.com/users/wesQ3/followers", "following_url": "https://api.github.com/users/wesQ3/following{/other_user}", "gists_url": "https://api.github.com/users/wesQ3/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesQ3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesQ3/subscriptions", "organizations_url": "https://api.github.com/users/wesQ3/orgs", "repos_url": "https://api.github.com/users/wesQ3/repos", "events_url": "https://api.github.com/users/wesQ3/events{/privacy}", "received_events_url": "https://api.github.com/users/wesQ3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-02T22:19:20Z", "updated_at": "2015-10-06T19:23:18Z", "closed_at": "2015-10-06T05:32:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The Pydoc for USBDeviceHandle.interruptWrite (and the other handle write methods) lists the `data` parameter but makes no mention that integers are not allowed (intentionally or not). Each write method calls `create_binary_buffer` with their write data. If an int is passed in, `create_binary_buffer` returns an empty buffer of length `data`.  \n\n```\nbytesWrote = handle.interruptWrite(ENDPOINT, 0xf) # writes 15 bytes of \\0\nbytesWrote = handle.interruptWrite(ENDPOINT, '\\x0f') # writes 0xf, 1 byte\n```\n\nIs this a bug? Or expected behavior? Either way I find surprising.\n\nI can submit a pull request with doc changes if you like.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/9", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/9/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/9/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/9", "id": 92583591, "node_id": "MDU6SXNzdWU5MjU4MzU5MQ==", "number": 9, "title": " I/O Problem", "user": {"login": "mellymello", "id": 6839089, "node_id": "MDQ6VXNlcjY4MzkwODk=", "avatar_url": "https://avatars2.githubusercontent.com/u/6839089?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mellymello", "html_url": "https://github.com/mellymello", "followers_url": "https://api.github.com/users/mellymello/followers", "following_url": "https://api.github.com/users/mellymello/following{/other_user}", "gists_url": "https://api.github.com/users/mellymello/gists{/gist_id}", "starred_url": "https://api.github.com/users/mellymello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mellymello/subscriptions", "organizations_url": "https://api.github.com/users/mellymello/orgs", "repos_url": "https://api.github.com/users/mellymello/repos", "events_url": "https://api.github.com/users/mellymello/events{/privacy}", "received_events_url": "https://api.github.com/users/mellymello/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-07-02T08:42:46Z", "updated_at": "2015-07-17T11:28:31Z", "closed_at": "2015-07-15T08:51:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\n\nI'm sorry if it's not the good place to post this but i'm new in github and i don't know where I should ask.\n\nI'm using your tool to build a fuzzer over USB.  I succeed to write data with the synchronous fonctions (bulkWrite) but I failed to read with the \"bulkRead\" fontion (Nothing is received). I want to try to use the asynchronous fonctions to see if it solves the problem but  I have some problems to understand  how I can use the snippet code you gave.\n\nDo you have a full example of an asynchronous communication or a link to another project which use the asynchronous fonctions ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/8", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/8/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/8/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/8", "id": 74953441, "node_id": "MDU6SXNzdWU3NDk1MzQ0MQ==", "number": 8, "title": "usb1.USBErrorNotSupported: LIBUSB_ERROR_NOT_SUPPORTED [-12]", "user": {"login": "RiceeeChang", "id": 7368881, "node_id": "MDQ6VXNlcjczNjg4ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7368881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RiceeeChang", "html_url": "https://github.com/RiceeeChang", "followers_url": "https://api.github.com/users/RiceeeChang/followers", "following_url": "https://api.github.com/users/RiceeeChang/following{/other_user}", "gists_url": "https://api.github.com/users/RiceeeChang/gists{/gist_id}", "starred_url": "https://api.github.com/users/RiceeeChang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RiceeeChang/subscriptions", "organizations_url": "https://api.github.com/users/RiceeeChang/orgs", "repos_url": "https://api.github.com/users/RiceeeChang/repos", "events_url": "https://api.github.com/users/RiceeeChang/events{/privacy}", "received_events_url": "https://api.github.com/users/RiceeeChang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-05-10T16:34:45Z", "updated_at": "2015-07-16T17:13:43Z", "closed_at": "2015-07-16T17:13:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, \n\nI got some new problems.\nI try this package with  android device(Samsung S5)\nwhen I try to get the usb serial number, \n\n  File \"C:\\Python27\\lib\\site-packages\\usb1.py\", line 1870, in getSerialNumber\n    self.device_descriptor.iSerialNumber)\n  File \"C:\\Python27\\lib\\site-packages\\usb1.py\", line 1845, in _getASCIIStringDescriptor\n    temp_handle = self.open()\n  File \"C:\\Python27\\lib\\site-packages\\usb1.py\", line 1898, in open\n    mayRaiseUSBError(result)\n  File \"C:\\Python27\\lib\\site-packages\\usb1.py\", line 106, in mayRaiseUSBError\n    raiseUSBError(value)\n  File \"C:\\Python27\\lib\\site-packages\\usb1.py\", line 102, in raiseUSBError\n    raise STATUS_TO_EXCEPTION_DICT.get(value, USBError)(value)\nusb1.USBErrorNotSupported: LIBUSB_ERROR_NOT_SUPPORTED [-12]\n\nI guess that the problem is caused by driver or the libusb1 library\nI use libusb-1.0.19 and ADB Interface's is libusb0 v1.2.6.0\nMay the library is not support this driver or not ?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/7", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/7/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/7/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/7", "id": 74410842, "node_id": "MDU6SXNzdWU3NDQxMDg0Mg==", "number": 7, "title": "How to install libusb-1.0 dll for libusb1 on win64", "user": {"login": "RiceeeChang", "id": 7368881, "node_id": "MDQ6VXNlcjczNjg4ODE=", "avatar_url": "https://avatars2.githubusercontent.com/u/7368881?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RiceeeChang", "html_url": "https://github.com/RiceeeChang", "followers_url": "https://api.github.com/users/RiceeeChang/followers", "following_url": "https://api.github.com/users/RiceeeChang/following{/other_user}", "gists_url": "https://api.github.com/users/RiceeeChang/gists{/gist_id}", "starred_url": "https://api.github.com/users/RiceeeChang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RiceeeChang/subscriptions", "organizations_url": "https://api.github.com/users/RiceeeChang/orgs", "repos_url": "https://api.github.com/users/RiceeeChang/repos", "events_url": "https://api.github.com/users/RiceeeChang/events{/privacy}", "received_events_url": "https://api.github.com/users/RiceeeChang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2015-05-08T16:03:43Z", "updated_at": "2018-09-26T02:53:48Z", "closed_at": "2015-05-09T12:00:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have some problem when I test this package on win64.\n\n  File \"C:\\Python27\\lib\\site-packages\\libusb1.py\", line 195, in <module>\n    libusb = _loadLibrary()\n  File \"C:\\Python27\\lib\\site-packages\\libusb1.py\", line 166, in _loadLibrary\n    return dll_loader('libusb-1.0' + suffix, **loader_kw)\n  File \"C:\\Python27\\lib\\ctypes__init__.py\", line 365, in **init**\n    self._handle = _dlopen(self._name, mode)\nWindowsError: [Error 126] The specified module could not be found\n\nthen I download the binary for windows from http://libusb.info/\nbut I have no idea which file I should use and where I could put the dll file.\nCould anyone help me, please\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/6", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/6/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/6/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/6", "id": 71139887, "node_id": "MDU6SXNzdWU3MTEzOTg4Nw==", "number": 6, "title": "Would you consider LGPL licensing?", "user": {"login": "projectgus", "id": 205573, "node_id": "MDQ6VXNlcjIwNTU3Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/205573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projectgus", "html_url": "https://github.com/projectgus", "followers_url": "https://api.github.com/users/projectgus/followers", "following_url": "https://api.github.com/users/projectgus/following{/other_user}", "gists_url": "https://api.github.com/users/projectgus/gists{/gist_id}", "starred_url": "https://api.github.com/users/projectgus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projectgus/subscriptions", "organizations_url": "https://api.github.com/users/projectgus/orgs", "repos_url": "https://api.github.com/users/projectgus/repos", "events_url": "https://api.github.com/users/projectgus/events{/privacy}", "received_events_url": "https://api.github.com/users/projectgus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-04-27T00:22:02Z", "updated_at": "2015-05-02T14:53:29Z", "closed_at": "2015-05-02T14:53:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\n\nSorry if this is out of line, I just thought I'd ask if you'd be interested in licensing python-libusb1 as LGPL?\n\nI started using your library in a non-GPL-compatible application and I somehow thought until now it was LGPL (I think probably because libusb is LGPL).\n\nI noticed that the only significant contributions so far are yours, so it should be possible to relicense without any other contributor agreements.\n\nMy situation is of course entirely my fault for choosing an inappropriate GPL-licensed package. And licensing is entirely your personal choice so I don't mean to put any pressure on you. If you want to keep the current licensing then I'd understand entirely. I just thought I'd ask on the offchance.\n\nThanks again for all your work on python-libusb1 btw, it's really nice to work with!\n\nAngus\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/3", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/3/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/3/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/3", "id": 70868656, "node_id": "MDU6SXNzdWU3MDg2ODY1Ng==", "number": 3, "title": "USBContext waitForEvent may not work correctly.", "user": {"login": "rpcope1", "id": 5043922, "node_id": "MDQ6VXNlcjUwNDM5MjI=", "avatar_url": "https://avatars2.githubusercontent.com/u/5043922?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rpcope1", "html_url": "https://github.com/rpcope1", "followers_url": "https://api.github.com/users/rpcope1/followers", "following_url": "https://api.github.com/users/rpcope1/following{/other_user}", "gists_url": "https://api.github.com/users/rpcope1/gists{/gist_id}", "starred_url": "https://api.github.com/users/rpcope1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rpcope1/subscriptions", "organizations_url": "https://api.github.com/users/rpcope1/orgs", "repos_url": "https://api.github.com/users/rpcope1/repos", "events_url": "https://api.github.com/users/rpcope1/events{/privacy}", "received_events_url": "https://api.github.com/users/rpcope1/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-25T07:18:09Z", "updated_at": "2015-04-25T10:51:45Z", "closed_at": "2015-04-25T09:52:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hey, I am trying to use the USBPollerThread class, and my Python script seems to fall apart on the waitForEvent() method in USBContext, which is:\n\n```\n@_validContext\ndef waitForEvent(self):\n    \"\"\"\n    See libusb_wait_for_event doc.\n    \"\"\"\n    libusb1.libusb_wait_for_event(self.__context_p)\n```\n\nHowever the wrapper for libusb_wait_for_event() is:\n\n```\n  #int libusb_wait_for_event(libusb_context *ctx, struct timeval *tv);\n  libusb_wait_for_event = libusb.libusb_wait_for_event\n  libusb_wait_for_event.argtypes = [libusb_context_p, timeval_p]\n```\n\nIt looks like the context waitForEvent call is missing a timeval argument. Any ideas here? Maybe I'm missing something...\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/2", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/2/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/2/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/2", "id": 68212443, "node_id": "MDU6SXNzdWU2ODIxMjQ0Mw==", "number": 2, "title": "LIBUSB_ERROR_TIMEOUT [-7] during \"getManufacturer()\"", "user": {"login": "dwu-zingbox", "id": 11761739, "node_id": "MDQ6VXNlcjExNzYxNzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/11761739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwu-zingbox", "html_url": "https://github.com/dwu-zingbox", "followers_url": "https://api.github.com/users/dwu-zingbox/followers", "following_url": "https://api.github.com/users/dwu-zingbox/following{/other_user}", "gists_url": "https://api.github.com/users/dwu-zingbox/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwu-zingbox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwu-zingbox/subscriptions", "organizations_url": "https://api.github.com/users/dwu-zingbox/orgs", "repos_url": "https://api.github.com/users/dwu-zingbox/repos", "events_url": "https://api.github.com/users/dwu-zingbox/events{/privacy}", "received_events_url": "https://api.github.com/users/dwu-zingbox/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2015-04-13T22:53:00Z", "updated_at": "2015-07-16T17:13:17Z", "closed_at": "2015-07-16T17:13:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running on ubuntu 14.10 x64. getManufacturer() returned with error. Trace the error back as LIBUSB_ERROR_TIMEOUT [-7].\n\n-Dennis\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/1", "repository_url": "https://api.github.com/repos/vpelletier/python-libusb1", "labels_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/1/comments", "events_url": "https://api.github.com/repos/vpelletier/python-libusb1/issues/1/events", "html_url": "https://github.com/vpelletier/python-libusb1/issues/1", "id": 50522498, "node_id": "MDU6SXNzdWU1MDUyMjQ5OA==", "number": 1, "title": "USBTransfer memory leak.", "user": {"login": "bryancole", "id": 230838, "node_id": "MDQ6VXNlcjIzMDgzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/230838?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryancole", "html_url": "https://github.com/bryancole", "followers_url": "https://api.github.com/users/bryancole/followers", "following_url": "https://api.github.com/users/bryancole/following{/other_user}", "gists_url": "https://api.github.com/users/bryancole/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryancole/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryancole/subscriptions", "organizations_url": "https://api.github.com/users/bryancole/orgs", "repos_url": "https://api.github.com/users/bryancole/repos", "events_url": "https://api.github.com/users/bryancole/events{/privacy}", "received_events_url": "https://api.github.com/users/bryancole/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-12-01T13:14:36Z", "updated_at": "2014-12-01T19:19:08Z", "closed_at": "2014-12-01T18:09:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nThe usb1.USBTransfer.close() method needs a couple of extra lines to prevent a memory leak. You need to set the __user_data and __transfer_buffer both to None, to allow the object to be garbage collected. Without these, the user_data prevents garbage collection when I pass the transfer object itself as the argument to the callback (hence creating a reference cycle). \n\nSorry, I can't submit a patch, as git drives me f**king insane with its stupid command line.\n\nCheers,\nBryan\n", "performed_via_github_app": null, "score": 1.0}]}