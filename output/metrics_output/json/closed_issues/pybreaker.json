{"total_count": 14, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/danielfm/pybreaker/issues/51", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/51/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/51/events", "html_url": "https://github.com/danielfm/pybreaker/issues/51", "id": 549717688, "node_id": "MDU6SXNzdWU1NDk3MTc2ODg=", "number": 51, "title": "Python 3 support", "user": {"login": "AvnerCohen", "id": 1297254, "node_id": "MDQ6VXNlcjEyOTcyNTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1297254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AvnerCohen", "html_url": "https://github.com/AvnerCohen", "followers_url": "https://api.github.com/users/AvnerCohen/followers", "following_url": "https://api.github.com/users/AvnerCohen/following{/other_user}", "gists_url": "https://api.github.com/users/AvnerCohen/gists{/gist_id}", "starred_url": "https://api.github.com/users/AvnerCohen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AvnerCohen/subscriptions", "organizations_url": "https://api.github.com/users/AvnerCohen/orgs", "repos_url": "https://api.github.com/users/AvnerCohen/repos", "events_url": "https://api.github.com/users/AvnerCohen/events{/privacy}", "received_events_url": "https://api.github.com/users/AvnerCohen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-01-14T17:38:16Z", "updated_at": "2020-01-14T18:21:25Z", "closed_at": "2020-01-14T18:18:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "In: https://github.com/danielfm/pybreaker/blob/945b3ff79dab76a4e820144e77cfe0bde6e0ad4f/src/pybreaker.py#L512\r\n```py\r\nstate = state_bytes.decode('utf-8')\r\n```\r\nThis fails in python 3 with:\r\n```\r\nAttributeError: 'str' object has no attribute 'decode'\r\n```\r\n\r\nAny plans to fix this, will a PR help on this one?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/47", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/47/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/47/events", "html_url": "https://github.com/danielfm/pybreaker/issues/47", "id": 501060712, "node_id": "MDU6SXNzdWU1MDEwNjA3MTI=", "number": 47, "title": "Exceptions in generators have wrong location", "user": {"login": "phillbaker", "id": 94505, "node_id": "MDQ6VXNlcjk0NTA1", "avatar_url": "https://avatars0.githubusercontent.com/u/94505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phillbaker", "html_url": "https://github.com/phillbaker", "followers_url": "https://api.github.com/users/phillbaker/followers", "following_url": "https://api.github.com/users/phillbaker/following{/other_user}", "gists_url": "https://api.github.com/users/phillbaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/phillbaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phillbaker/subscriptions", "organizations_url": "https://api.github.com/users/phillbaker/orgs", "repos_url": "https://api.github.com/users/phillbaker/repos", "events_url": "https://api.github.com/users/phillbaker/events{/privacy}", "received_events_url": "https://api.github.com/users/phillbaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-10-01T18:11:53Z", "updated_at": "2019-10-10T16:29:34Z", "closed_at": "2019-10-10T16:29:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We're seeing unusual behavior when wrapping a generator (a contextmanager specifically) that has a `try`/`except` in a circuit breaker. Specifically, the `try`/`except` in the wrapped function isn't being executed.\r\n\r\nA simplified example is:\r\n```\r\nfrom contextlib import contextmanager\r\nfrom pybreaker import CircuitBreaker\r\n\r\nclass ExceptionA(Exception): pass\r\n\r\nclass ExceptionB(Exception): pass\r\n\r\n\r\nbreaker = CircuitBreaker()\r\n\r\nclass Foo:\r\n  @contextmanager\r\n  @breaker\r\n  def wrapper(self):\r\n    try:\r\n      yield\r\n    except ExceptionA as e:\r\n      raise ExceptionB()\r\n\r\n  def foo(self):\r\n    with self.wrapper():\r\n      raise ExceptionA()\r\n\r\n\r\ntry:\r\n  Foo().foo()\r\nexcept ExceptionB as e:\r\n  print('caught ExceptionB', e)\r\n```\r\n\r\nThis example should print \"caught ExceptionB\", however, it raises:\r\n```\r\nTraceback (most recent call last):\r\n  File \"context.py\", line 67, in <module>\r\n    Foo().foo()\r\n  File \"context.py\", line 63, in foo\r\n    raise ExceptionA()\r\n__main__.ExceptionA\r\n```\r\n\r\nAt the root, I believe that these lines:\r\n\r\nhttps://github.com/danielfm/pybreaker/blob/42b05c7531dff69ded65f9651b2d3f244f104acc/src/pybreaker.py#L744-L745\r\n\r\nshould not have `_handle_error` invoke `raise` but call `wrapped_generator.throw(e)`.\r\n\r\nWould it make sense to submit a PR for this? Perhaps a new argument to _handle_error can make raising optional?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/43", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/43/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/43/events", "html_url": "https://github.com/danielfm/pybreaker/issues/43", "id": 422783023, "node_id": "MDU6SXNzdWU0MjI3ODMwMjM=", "number": 43, "title": "New release", "user": {"login": "sebastiandev", "id": 1094887, "node_id": "MDQ6VXNlcjEwOTQ4ODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/1094887?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebastiandev", "html_url": "https://github.com/sebastiandev", "followers_url": "https://api.github.com/users/sebastiandev/followers", "following_url": "https://api.github.com/users/sebastiandev/following{/other_user}", "gists_url": "https://api.github.com/users/sebastiandev/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebastiandev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebastiandev/subscriptions", "organizations_url": "https://api.github.com/users/sebastiandev/orgs", "repos_url": "https://api.github.com/users/sebastiandev/repos", "events_url": "https://api.github.com/users/sebastiandev/events{/privacy}", "received_events_url": "https://api.github.com/users/sebastiandev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "danielfm", "id": 29534, "node_id": "MDQ6VXNlcjI5NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/29534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielfm", "html_url": "https://github.com/danielfm", "followers_url": "https://api.github.com/users/danielfm/followers", "following_url": "https://api.github.com/users/danielfm/following{/other_user}", "gists_url": "https://api.github.com/users/danielfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielfm/subscriptions", "organizations_url": "https://api.github.com/users/danielfm/orgs", "repos_url": "https://api.github.com/users/danielfm/repos", "events_url": "https://api.github.com/users/danielfm/events{/privacy}", "received_events_url": "https://api.github.com/users/danielfm/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "danielfm", "id": 29534, "node_id": "MDQ6VXNlcjI5NTM0", "avatar_url": "https://avatars2.githubusercontent.com/u/29534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielfm", "html_url": "https://github.com/danielfm", "followers_url": "https://api.github.com/users/danielfm/followers", "following_url": "https://api.github.com/users/danielfm/following{/other_user}", "gists_url": "https://api.github.com/users/danielfm/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielfm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielfm/subscriptions", "organizations_url": "https://api.github.com/users/danielfm/orgs", "repos_url": "https://api.github.com/users/danielfm/repos", "events_url": "https://api.github.com/users/danielfm/events{/privacy}", "received_events_url": "https://api.github.com/users/danielfm/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2019-03-19T15:01:47Z", "updated_at": "2019-03-19T15:27:57Z", "closed_at": "2019-03-19T15:27:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Are there plans to make a new release including the functionality to define the excluded errors as a callable?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/34", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/34/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/34/events", "html_url": "https://github.com/danielfm/pybreaker/issues/34", "id": 319999040, "node_id": "MDU6SXNzdWUzMTk5OTkwNDA=", "number": 34, "title": "Chaining exception into the CircuitBreakerError", "user": {"login": "tczhaodachuan", "id": 4966469, "node_id": "MDQ6VXNlcjQ5NjY0Njk=", "avatar_url": "https://avatars1.githubusercontent.com/u/4966469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tczhaodachuan", "html_url": "https://github.com/tczhaodachuan", "followers_url": "https://api.github.com/users/tczhaodachuan/followers", "following_url": "https://api.github.com/users/tczhaodachuan/following{/other_user}", "gists_url": "https://api.github.com/users/tczhaodachuan/gists{/gist_id}", "starred_url": "https://api.github.com/users/tczhaodachuan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tczhaodachuan/subscriptions", "organizations_url": "https://api.github.com/users/tczhaodachuan/orgs", "repos_url": "https://api.github.com/users/tczhaodachuan/repos", "events_url": "https://api.github.com/users/tczhaodachuan/events{/privacy}", "received_events_url": "https://api.github.com/users/tczhaodachuan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-05-03T16:48:36Z", "updated_at": "2018-05-21T13:37:37Z", "closed_at": "2018-05-21T13:37:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This chaining exception feature is added into Python 3.6 https://www.python.org/dev/peps/pep-3134/, however, if we used this library in Python2, the CircuitBreakerError doesn't carry the trigger exception and the trace. This maybe an issue we actually lost the trace when the threshold is breached.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/30", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/30/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/30/events", "html_url": "https://github.com/danielfm/pybreaker/issues/30", "id": 271470268, "node_id": "MDU6SXNzdWUyNzE0NzAyNjg=", "number": 30, "title": "proposal: adding a name property to CircuitBreaker", "user": {"login": "chrisvaughn", "id": 147524, "node_id": "MDQ6VXNlcjE0NzUyNA==", "avatar_url": "https://avatars0.githubusercontent.com/u/147524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisvaughn", "html_url": "https://github.com/chrisvaughn", "followers_url": "https://api.github.com/users/chrisvaughn/followers", "following_url": "https://api.github.com/users/chrisvaughn/following{/other_user}", "gists_url": "https://api.github.com/users/chrisvaughn/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisvaughn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisvaughn/subscriptions", "organizations_url": "https://api.github.com/users/chrisvaughn/orgs", "repos_url": "https://api.github.com/users/chrisvaughn/repos", "events_url": "https://api.github.com/users/chrisvaughn/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisvaughn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-06T13:11:32Z", "updated_at": "2017-11-09T16:19:39Z", "closed_at": "2017-11-09T16:19:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Thanks for the great library.  I'm adding logging to our use of circuit breakers so that we can see just how often states are changing.  To make our logs more informative I've subclassed `CircuitBreaker` to add a \"name\" property that I can use in logs, statsd counters, etc.  Is there any interest in adding this to `CircuitBreaker`? If so, I'll create a PR.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/28", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/28/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/28/events", "html_url": "https://github.com/danielfm/pybreaker/issues/28", "id": 262250406, "node_id": "MDU6SXNzdWUyNjIyNTA0MDY=", "number": 28, "title": "Error thrown when state is missing on Redis", "user": {"login": "scascketta", "id": 2561302, "node_id": "MDQ6VXNlcjI1NjEzMDI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2561302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scascketta", "html_url": "https://github.com/scascketta", "followers_url": "https://api.github.com/users/scascketta/followers", "following_url": "https://api.github.com/users/scascketta/following{/other_user}", "gists_url": "https://api.github.com/users/scascketta/gists{/gist_id}", "starred_url": "https://api.github.com/users/scascketta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scascketta/subscriptions", "organizations_url": "https://api.github.com/users/scascketta/orgs", "repos_url": "https://api.github.com/users/scascketta/repos", "events_url": "https://api.github.com/users/scascketta/events{/privacy}", "received_events_url": "https://api.github.com/users/scascketta/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-10-02T22:37:21Z", "updated_at": "2018-05-21T13:38:49Z", "closed_at": "2018-05-21T13:38:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! I was testing how pybreaker would behave in various scenarios where state is being stored on Redis and the Redis server misbehaves.\r\n\r\nCircuitRedisStorage will handle intermittent and complete connection loss with the Redis server in an acceptable manner. But it doesn't handle data loss on the Redis server gracefully. When no value has been set for a key, the Redis library returns None. This results in an AttributeError being thrown on this line:\r\nhttps://github.com/danielfm/pybreaker/blob/c5cb8fa93749657d6d59342b7145aaee2607b28d/src/pybreaker.py#L476\r\n\r\nI opened a PR (#25) which aims to resolve this by doing the following when it finds missing data on Redis:\r\n* Resetting the state on Redis to the fallback circuit state\r\n* Reset the fail counter\r\n\r\nAlso, perhaps the circuit breaker's listeners should be notified with a custom exception when this occurs? I'm open to suggestions.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/26", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/26/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/26/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/26/events", "html_url": "https://github.com/danielfm/pybreaker/issues/26", "id": 260054607, "node_id": "MDU6SXNzdWUyNjAwNTQ2MDc=", "number": 26, "title": "Circuit erroneously closed when using a shared storage", "user": {"login": "jcwilson", "id": 629874, "node_id": "MDQ6VXNlcjYyOTg3NA==", "avatar_url": "https://avatars2.githubusercontent.com/u/629874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcwilson", "html_url": "https://github.com/jcwilson", "followers_url": "https://api.github.com/users/jcwilson/followers", "following_url": "https://api.github.com/users/jcwilson/following{/other_user}", "gists_url": "https://api.github.com/users/jcwilson/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcwilson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcwilson/subscriptions", "organizations_url": "https://api.github.com/users/jcwilson/orgs", "repos_url": "https://api.github.com/users/jcwilson/repos", "events_url": "https://api.github.com/users/jcwilson/events{/privacy}", "received_events_url": "https://api.github.com/users/jcwilson/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-09-24T03:23:22Z", "updated_at": "2017-10-02T17:11:17Z", "closed_at": "2017-10-02T17:11:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Due to these lines:\r\nhttps://github.com/danielfm/pybreaker/blob/c84055a61ea846baae786e85bc3ed191a55ba326/src/pybreaker.py#L62\r\nhttps://github.com/danielfm/pybreaker/blob/c84055a61ea846baae786e85bc3ed191a55ba326/src/pybreaker.py#L728\r\n\r\nAlso, this will cause the fail counter to be reset anytime a new CircuitBreaker is instantiated using the same shared storage (like the provided `CircuitRedisStorage`).\r\n\r\nThis is major problem for usage within web app servers, where you may have many processes coming in and out of existence at any time due to scaling behavior or processes sporadically dying and being resurrected.\r\n\r\nIt seems like a possible solution might involve rethinking what the `notify` argument is being used for. It appears to be set to `True` in all cases except for this initial default value being set on line 62. Perhaps move the state change effect into the `if notify:` block as well?\r\n\r\nA better solution might be to not assume that a `CircuitBreaker` should start in the Closed state, but instead ask the `self._state_storage` object for the current state and initialize the `CircuitBreaker` without affecting the state storage.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/24", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/24/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/24/events", "html_url": "https://github.com/danielfm/pybreaker/issues/24", "id": 252499929, "node_id": "MDU6SXNzdWUyNTI0OTk5Mjk=", "number": 24, "title": "redis storage open state initialization?", "user": {"login": "yu-le", "id": 23015123, "node_id": "MDQ6VXNlcjIzMDE1MTIz", "avatar_url": "https://avatars2.githubusercontent.com/u/23015123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yu-le", "html_url": "https://github.com/yu-le", "followers_url": "https://api.github.com/users/yu-le/followers", "following_url": "https://api.github.com/users/yu-le/following{/other_user}", "gists_url": "https://api.github.com/users/yu-le/gists{/gist_id}", "starred_url": "https://api.github.com/users/yu-le/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yu-le/subscriptions", "organizations_url": "https://api.github.com/users/yu-le/orgs", "repos_url": "https://api.github.com/users/yu-le/repos", "events_url": "https://api.github.com/users/yu-le/events{/privacy}", "received_events_url": "https://api.github.com/users/yu-le/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-24T06:28:43Z", "updated_at": "2018-08-01T03:51:43Z", "closed_at": "2017-10-02T17:13:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi danielfm,\r\n\r\nDoes the redis storage is intended as the shared breaker state storage for different workers? it seems like the current implementation would be stayed in open state.\r\nFor example:\r\nstart 32 workers, each worker with state as closed, if one worker enter state open, it will store the state in the redis. when another worker receive the request, it will compare its state name with redis storage, and enter open state, but in the CircuitOpenState:\r\n\r\n```\r\n def __init__(self, cb, prev_state=None, notify=False):\r\n        \"\"\"\r\n        Moves the given circuit breaker `cb` to the \"open\" state.\r\n        \"\"\"\r\n        super(CircuitOpenState, self).__init__(cb, STATE_OPEN)\r\n        self._breaker._state_storage.opened_at = datetime.utcnow()\r\n        if notify:\r\n            for listener in self._breaker.listeners:\r\n                listener.state_change(self._breaker, prev_state, self)\r\n```\r\n\r\nIt did not read redis storage opened_at, but set it as current time, it cause the closed worker has no way to enter half-open state? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/23", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/23/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/23/events", "html_url": "https://github.com/danielfm/pybreaker/issues/23", "id": 238158166, "node_id": "MDU6SXNzdWUyMzgxNTgxNjY=", "number": 23, "title": "0.3.4 release", "user": {"login": "jeffrand", "id": 2565265, "node_id": "MDQ6VXNlcjI1NjUyNjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2565265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffrand", "html_url": "https://github.com/jeffrand", "followers_url": "https://api.github.com/users/jeffrand/followers", "following_url": "https://api.github.com/users/jeffrand/following{/other_user}", "gists_url": "https://api.github.com/users/jeffrand/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffrand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffrand/subscriptions", "organizations_url": "https://api.github.com/users/jeffrand/orgs", "repos_url": "https://api.github.com/users/jeffrand/repos", "events_url": "https://api.github.com/users/jeffrand/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffrand/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-06-23T14:25:44Z", "updated_at": "2017-06-23T14:47:27Z", "closed_at": "2017-06-23T14:34:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Can you make a new release version and add it to PyPI? Thanks! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/19", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/19/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/19/events", "html_url": "https://github.com/danielfm/pybreaker/issues/19", "id": 236478763, "node_id": "MDU6SXNzdWUyMzY0Nzg3NjM=", "number": 19, "title": "Typo - False => False", "user": {"login": "pythons1980", "id": 13813630, "node_id": "MDQ6VXNlcjEzODEzNjMw", "avatar_url": "https://avatars2.githubusercontent.com/u/13813630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pythons1980", "html_url": "https://github.com/pythons1980", "followers_url": "https://api.github.com/users/pythons1980/followers", "following_url": "https://api.github.com/users/pythons1980/following{/other_user}", "gists_url": "https://api.github.com/users/pythons1980/gists{/gist_id}", "starred_url": "https://api.github.com/users/pythons1980/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pythons1980/subscriptions", "organizations_url": "https://api.github.com/users/pythons1980/orgs", "repos_url": "https://api.github.com/users/pythons1980/repos", "events_url": "https://api.github.com/users/pythons1980/events{/privacy}", "received_events_url": "https://api.github.com/users/pythons1980/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-06-16T13:11:26Z", "updated_at": "2017-06-21T21:48:53Z", "closed_at": "2017-06-21T21:48:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nif redis package is not installed then this code raise error:\r\n```\r\ntry:\r\n    from redis.exceptions import RedisError\r\n    HAS_REDIS_SUPPORT = True\r\nexcept ImportError:\r\nHAS_REDIS_SUPPORT = FALSE\r\n```\r\nplease, rewrite `FALSE` to `False`.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/16", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/16/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/16/events", "html_url": "https://github.com/danielfm/pybreaker/issues/16", "id": 232885817, "node_id": "MDU6SXNzdWUyMzI4ODU4MTc=", "number": 16, "title": "Should listener.failure be called when the circuit is closed and a call fails?", "user": {"login": "sj175", "id": 4758284, "node_id": "MDQ6VXNlcjQ3NTgyODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/4758284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sj175", "html_url": "https://github.com/sj175", "followers_url": "https://api.github.com/users/sj175/followers", "following_url": "https://api.github.com/users/sj175/following{/other_user}", "gists_url": "https://api.github.com/users/sj175/gists{/gist_id}", "starred_url": "https://api.github.com/users/sj175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sj175/subscriptions", "organizations_url": "https://api.github.com/users/sj175/orgs", "repos_url": "https://api.github.com/users/sj175/repos", "events_url": "https://api.github.com/users/sj175/events{/privacy}", "received_events_url": "https://api.github.com/users/sj175/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2017-06-01T13:50:21Z", "updated_at": "2017-06-03T16:26:30Z", "closed_at": "2017-06-02T13:16:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "When the circuit breaker's state is closed and the call to the wrapped function fails the listener.failure function is not called because an exception is thrown in CircuitClosedState.on_failure. Is this behaviour intentional?\r\n\r\nThe block below is from the CircuitBreakerState class:\r\n```python\r\n    def _handle_error(self, exc):\r\n        \"\"\"\r\n        Handles a failed call to the guarded operation.\r\n        \"\"\"\r\n        if self._breaker.is_system_error(exc):\r\n            self._breaker._inc_counter()\r\n            self.on_failure(exc)\r\n            for listener in self._breaker.listeners:\r\n                listener.failure(self._breaker, exc)\r\n        else:\r\n            self._handle_success()\r\n        raise exc\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/10", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/10/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/10/events", "html_url": "https://github.com/danielfm/pybreaker/issues/10", "id": 215612276, "node_id": "MDU6SXNzdWUyMTU2MTIyNzY=", "number": 10, "title": "External state support?", "user": {"login": "phillbaker", "id": 94505, "node_id": "MDQ6VXNlcjk0NTA1", "avatar_url": "https://avatars0.githubusercontent.com/u/94505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phillbaker", "html_url": "https://github.com/phillbaker", "followers_url": "https://api.github.com/users/phillbaker/followers", "following_url": "https://api.github.com/users/phillbaker/following{/other_user}", "gists_url": "https://api.github.com/users/phillbaker/gists{/gist_id}", "starred_url": "https://api.github.com/users/phillbaker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phillbaker/subscriptions", "organizations_url": "https://api.github.com/users/phillbaker/orgs", "repos_url": "https://api.github.com/users/phillbaker/repos", "events_url": "https://api.github.com/users/phillbaker/events{/privacy}", "received_events_url": "https://api.github.com/users/phillbaker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-03-21T02:38:29Z", "updated_at": "2017-03-21T14:24:40Z", "closed_at": "2017-03-21T14:24:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would a PR to add external state be accepted? \r\n\r\nWe're looking at using pybreaker to manage the healthiness of an external API and we'd like to aggregate exceptions/failures across multiple processes/machines. For a first pass we'll probably throw data in redis, but I'd understand not wanting to add that as a dependency to this library.  We were thinking of something similar to the pattern described here: https://github.com/sittercity/breaker_box#persistence-factories, which abstracts the storage a bit. What do you think would be a good approach that fits?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/9", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/9/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/9/events", "html_url": "https://github.com/danielfm/pybreaker/issues/9", "id": 203216793, "node_id": "MDU6SXNzdWUyMDMyMTY3OTM=", "number": 9, "title": "Wrapped function is called twice during successful call in open state", "user": {"login": "jstordeur", "id": 20197458, "node_id": "MDQ6VXNlcjIwMTk3NDU4", "avatar_url": "https://avatars2.githubusercontent.com/u/20197458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jstordeur", "html_url": "https://github.com/jstordeur", "followers_url": "https://api.github.com/users/jstordeur/followers", "following_url": "https://api.github.com/users/jstordeur/following{/other_user}", "gists_url": "https://api.github.com/users/jstordeur/gists{/gist_id}", "starred_url": "https://api.github.com/users/jstordeur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jstordeur/subscriptions", "organizations_url": "https://api.github.com/users/jstordeur/orgs", "repos_url": "https://api.github.com/users/jstordeur/repos", "events_url": "https://api.github.com/users/jstordeur/events{/privacy}", "received_events_url": "https://api.github.com/users/jstordeur/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-01-25T20:43:30Z", "updated_at": "2017-01-25T21:13:30Z", "closed_at": "2017-01-25T21:13:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "See PR:\r\nhttps://github.com/danielfm/pybreaker/pull/8", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/danielfm/pybreaker/issues/3", "repository_url": "https://api.github.com/repos/danielfm/pybreaker", "labels_url": "https://api.github.com/repos/danielfm/pybreaker/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/danielfm/pybreaker/issues/3/comments", "events_url": "https://api.github.com/repos/danielfm/pybreaker/issues/3/events", "html_url": "https://github.com/danielfm/pybreaker/issues/3", "id": 90457990, "node_id": "MDU6SXNzdWU5MDQ1Nzk5MA==", "number": 3, "title": "thread safety ?", "user": {"login": "gst", "id": 38055, "node_id": "MDQ6VXNlcjM4MDU1", "avatar_url": "https://avatars1.githubusercontent.com/u/38055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gst", "html_url": "https://github.com/gst", "followers_url": "https://api.github.com/users/gst/followers", "following_url": "https://api.github.com/users/gst/following{/other_user}", "gists_url": "https://api.github.com/users/gst/gists{/gist_id}", "starred_url": "https://api.github.com/users/gst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gst/subscriptions", "organizations_url": "https://api.github.com/users/gst/orgs", "repos_url": "https://api.github.com/users/gst/repos", "events_url": "https://api.github.com/users/gst/events{/privacy}", "received_events_url": "https://api.github.com/users/gst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2015-06-23T18:29:32Z", "updated_at": "2019-04-18T16:21:07Z", "closed_at": "2019-04-18T16:21:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nnot an issue but a question:\n\nis it safe to use the same breaker instance (CircuitBreaker) by multiple threads, possibly concurrently (modulo GIL ofcourse) ?\n\nthx for the lib :)\n", "performed_via_github_app": null, "score": 1.0}]}