{"total_count": 1068, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/google/jax/issues/4124", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4124/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4124/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4124/events", "html_url": "https://github.com/google/jax/issues/4124", "id": 683912072, "node_id": "MDU6SXNzdWU2ODM5MTIwNzI=", "number": 4124, "title": "`replace` argument changes how `jax.random.choice` treats `shape`", "user": {"login": "gehring", "id": 1869903, "node_id": "MDQ6VXNlcjE4Njk5MDM=", "avatar_url": "https://avatars1.githubusercontent.com/u/1869903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gehring", "html_url": "https://github.com/gehring", "followers_url": "https://api.github.com/users/gehring/followers", "following_url": "https://api.github.com/users/gehring/following{/other_user}", "gists_url": "https://api.github.com/users/gehring/gists{/gist_id}", "starred_url": "https://api.github.com/users/gehring/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gehring/subscriptions", "organizations_url": "https://api.github.com/users/gehring/orgs", "repos_url": "https://api.github.com/users/gehring/repos", "events_url": "https://api.github.com/users/gehring/events{/privacy}", "received_events_url": "https://api.github.com/users/gehring/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-08-22T02:47:06Z", "updated_at": "2020-08-22T03:36:03Z", "closed_at": "2020-08-22T03:36:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using jax version 0.1.75 on a colab cpu runtime.\r\n```python\r\nimport jax\r\n\r\nkey = jax.random.PRNGKey(0)\r\njax.random.choice(key, 5, 2, replace=False)\r\njax.random.choice(key, 5, 2, replace=True)\r\n```\r\nError:\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-19-56696338bc13> in <module>()\r\n      1 key = jax.random.PRNGKey(0)\r\n      2 jax.random.choice(key, 5, 2, replace=False)\r\n----> 3 jax.random.choice(key, 5, 2, replace=True)\r\n\r\n2 frames\r\n/usr/local/lib/python3.6/dist-packages/jax/random.py in choice(key, a, shape, replace, p)\r\n    566   if p is None:\r\n    567     if replace:\r\n--> 568       ind = randint(key, shape, 0, n_inputs)\r\n    569       result = ind if a.ndim == 0 else a[ind]\r\n    570     else:\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/random.py in randint(key, shape, minval, maxval, dtype)\r\n    417   \"\"\"\r\n    418   dtype = dtypes.canonicalize_dtype(dtype)\r\n--> 419   shape = abstract_arrays.canonicalize_shape(shape)\r\n    420   return _randint(key, shape, minval, maxval, dtype)\r\n    421 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/core.py in canonicalize_shape(shape)\r\n   1078          \"got {}.\")\r\n   1079   if any(isinstance(x, Tracer) and isinstance(get_aval(x), ShapedArray)\r\n-> 1080          and not isinstance(get_aval(x), ConcreteArray) for x in shape):\r\n   1081     msg += (\"\\nIf using `jit`, try using `static_argnums` or applying `jit` to \"\r\n   1082             \"smaller subfunctions.\")\r\n\r\nTypeError: 'int' object is not iterable\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4122", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4122/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4122/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4122/events", "html_url": "https://github.com/google/jax/issues/4122", "id": 683889485, "node_id": "MDU6SXNzdWU2ODM4ODk0ODU=", "number": 4122, "title": "Getting gradients with respect to each output from Jacobian", "user": {"login": "frechette-alex", "id": 34282885, "node_id": "MDQ6VXNlcjM0MjgyODg1", "avatar_url": "https://avatars0.githubusercontent.com/u/34282885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frechette-alex", "html_url": "https://github.com/frechette-alex", "followers_url": "https://api.github.com/users/frechette-alex/followers", "following_url": "https://api.github.com/users/frechette-alex/following{/other_user}", "gists_url": "https://api.github.com/users/frechette-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/frechette-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frechette-alex/subscriptions", "organizations_url": "https://api.github.com/users/frechette-alex/orgs", "repos_url": "https://api.github.com/users/frechette-alex/repos", "events_url": "https://api.github.com/users/frechette-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/frechette-alex/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-08-22T00:31:21Z", "updated_at": "2020-08-22T06:07:11Z", "closed_at": "2020-08-22T06:07:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a neural network with a loss function that outputs four different losses. I'd like to calculate the gradient of the neural network with respect to each of the four separate losses to do four different gradient-based parameter updates. One way I think works to do that efficiently is calculating the Jacobian of the loss, and use it to get each gradient separately:\r\n```\r\njac = jax.jacobian(loss)(params, x)\r\nfor index in range(4):\r\n  grad = jax.tree_map(lambda leaf: leaf[index], jac)\r\n  ... use grad ...\r\n```\r\nIs there a better way of getting each gradient separately? Is `jax.tree_map` the way to go?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4116", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4116/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4116/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4116/events", "html_url": "https://github.com/google/jax/issues/4116", "id": 683147448, "node_id": "MDU6SXNzdWU2ODMxNDc0NDg=", "number": 4116, "title": "Is there a way to differentiate with respect to an induced subtree of a pytree?", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-20T23:07:28Z", "updated_at": "2020-08-20T23:07:33Z", "closed_at": "2020-08-20T23:07:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm going to open and close this issue since I don't expect there to be a solution, but it might come in handy later.\r\n\r\nI'm starting to work with [optax](https://github.com/deepmind/optax/), and I'm running up against some design problems.  There might be an elegant design that I'm not seeing, or there might be an opportunity for a tool to be added to JAX.\r\n\r\nUsing optax has revealed that models have essentially four kinds of member variables:\r\n\r\n- variables related to the structure of the model,\r\n- parameters of the model,\r\n- meta-parameters of the model, and\r\n- \"gradient transformation state\" ([for example](https://github.com/deepmind/optax/blob/master/optax/_src/transform.py#L238)).\r\n\r\nLearning is the process whereby\r\n- you calculate _g_ the derivative of the loss (a function of the parameters) with respect to model parameters given the structure and meta-parameters.\r\n- you apply _g_ to the parameters and update the \"gradient transformation state\"\r\n\r\nMeta-learning is the process whereby\r\n- you calculate _h_ the derivative of the loss (now a function of the meta-parameters, since we will train within the batch) with respect to the meta-parameters given the structure.\r\n- you apply _h_ to the meta-parameters and update the \"gradient transformation state\" of the meta-parameters.\r\n\r\nThe problem is representing such a model is cumbersome.  I'm using a dataclasses to represent the structure of the model.  I end up having parallel tree structures to represent parameters, meta parameters, and gradient transformation states.\r\n\r\nI don't have a solution, but I'd like to do something like:\r\n```python\r\n@dataclass\r\nclass C:\r\n  x: Array = field(marked='parameter')\r\n  y: Array = field(marked='meta_parameter')\r\n  c: Optional[C]\r\n\r\nc = C(1.0, 2.0, C(3.0, 4.0, None))\r\n\r\nparameters = tree_util.extract('parameter')  # {x: 1.0, c={x: 3.0}}\r\n\r\n# Now, training is something like\r\ndef loss(c: C):\r\n  ...\r\n\r\ngrad(loss, wrt='parameter')(parameters)  # Only takes the derivative with respect to parameters, and fills in the parameters from the dicts\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4106", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4106/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4106/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4106/events", "html_url": "https://github.com/google/jax/issues/4106", "id": 682170592, "node_id": "MDU6SXNzdWU2ODIxNzA1OTI=", "number": 4106, "title": "Can't differentiate scipy.linalg.expm for M Layer paper", "user": {"login": "bionicles", "id": 24532336, "node_id": "MDQ6VXNlcjI0NTMyMzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/24532336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bionicles", "html_url": "https://github.com/bionicles", "followers_url": "https://api.github.com/users/bionicles/followers", "following_url": "https://api.github.com/users/bionicles/following{/other_user}", "gists_url": "https://api.github.com/users/bionicles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bionicles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bionicles/subscriptions", "organizations_url": "https://api.github.com/users/bionicles/orgs", "repos_url": "https://api.github.com/users/bionicles/repos", "events_url": "https://api.github.com/users/bionicles/events{/privacy}", "received_events_url": "https://api.github.com/users/bionicles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-19T20:49:05Z", "updated_at": "2020-08-20T21:23:43Z", "closed_at": "2020-08-20T21:23:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Would it be possible to implement this interesting paper idea with jax / flax? \r\n\r\nIntelligent Matrix Exponentiation\r\npaper: https://arxiv.org/pdf/2008.03936.pdf\r\ncode: https://github.com/google-research/google-research/tree/master/m_layer\r\nwiki: https://en.wikipedia.org/wiki/Matrix_exponential\r\n\r\nexpm docs: https://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.linalg.expm.html#jax.scipy.linalg.expm\r\n\r\nexpm frechet looks like the right thing to make the gradient:\r\nhttps://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.linalg.expm_frechet.html#jax.scipy.linalg.expm_frechet\r\n\r\nI tried a few options, here's a simple one:\r\n```\r\nimport jax\r\nfrom flax import nn\r\njnp = jax.numpy\r\nvec_expm = jnp.vectorize(jax.scipy.linalg.expm, signature='(k)->(k)')\r\n\r\n@nn.module\r\ndef MLayer(x, D=D_CODE):\r\n    x = nn.Dense(x, D ** 2)\r\n    x = x.reshape(x.shape[:-1] + (D, D))\r\n    x = vec_expm(x\r\n    x = x.reshape(x.shape[:-2] + (D ** 2,))\r\n    x = nn.Dense(x, D)\r\n    return x\r\n```\r\nhowever this crashes because of this:\r\n```\r\nValueError: Reverse-mode differentiation does not work for lax.while_loop or lax.fori_loop. Try using lax.scan instead.\r\n```\r\nWould it work if we wire up expm_frechet primitive?\r\n\r\na simpler reproduction without other nn stuff:\r\n```\r\nimport jax.numpy as jnp\r\nimport jax\r\n\r\nrng = jax.random.PRNGKey(0)\r\nx = jax.random.uniform(rng, (2, 2))\r\n\r\ndef f(x):\r\n    y = jax.scipy.linalg.expm(x)\r\n    credit = jnp.sum(jnp.abs(y))\r\n    return credit, y\r\n\r\nf = jax.value_and_grad(f)\r\n\r\nc, y = f(x)\r\nprint(c, y)\r\n```\r\n\r\nfull trace:\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-14-f2d123ee1505> in <module>\r\n----> 1 f(x)\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/api.py in value_and_grad_f(*args, **kwargs)\r\n    485     tree_map(partial(_check_input_dtype_grad, holomorphic), dyn_args)\r\n    486     if not has_aux:\r\n--> 487       ans, vjp_py = _vjp(f_partial, *dyn_args)\r\n    488     else:\r\n    489       ans, vjp_py, aux = _vjp(f_partial, *dyn_args, has_aux=True)\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/api.py in _vjp(fun, *primals, **kwargs)\r\n   1514   if not has_aux:\r\n   1515     flat_fun, out_tree = flatten_fun_nokwargs(fun, in_tree)\r\n-> 1516     out_primal, out_vjp = ad.vjp(flat_fun, primals_flat)\r\n   1517     out_tree = out_tree()\r\n   1518   else:\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in vjp(traceable, primals, has_aux)\r\n    108 def vjp(traceable, primals, has_aux=False):\r\n    109   if not has_aux:\r\n--> 110     out_primals, pvals, jaxpr, consts = linearize(traceable, *primals)\r\n    111   else:\r\n    112     out_primals, pvals, jaxpr, consts, aux = linearize(traceable, *primals, has_aux=True)\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in linearize(traceable, *primals, **kwargs)\r\n     95   _, in_tree = tree_flatten(((primals, primals), {}))\r\n     96   jvpfun_flat, out_tree = flatten_fun(jvpfun, in_tree)\r\n---> 97   jaxpr, out_pvals, consts = pe.trace_to_jaxpr(jvpfun_flat, in_pvals)\r\n     98   out_primals_pvals, out_tangents_pvals = tree_unflatten(out_tree(), out_pvals)\r\n     99   assert all(out_primal_pval.is_known() for out_primal_pval in out_primals_pvals)\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/partial_eval.py in trace_to_jaxpr(fun, pvals, instantiate, stage_out, bottom, trace_type)\r\n    421   with core.new_master(trace_type, bottom=bottom) as master:\r\n    422     fun = trace_to_subjaxpr(fun, master, instantiate)\r\n--> 423     jaxpr, (out_pvals, consts, env) = fun.call_wrapped(pvals)\r\n    424     assert not env\r\n    425     del master\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/linear_util.py in call_wrapped(self, *args, **kwargs)\r\n    148     gen = None\r\n    149 \r\n--> 150     ans = self.f(*args, **dict(self.params, **kwargs))\r\n    151     del args\r\n    152     while stack:\r\n\r\n<ipython-input-10-995182967638> in wrapped(*args, **kwargs)\r\n      1 def value_and_jacobian(fun):\r\n      2     def wrapped(*args, **kwargs):\r\n----> 3         return fun(*args, **kwargs), jax.jacfwd(fun)(*args, **kwargs)\r\n      4     return wrapped\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/api.py in value_and_grad_f(*args, **kwargs)\r\n    491     dtype = dtypes.result_type(ans)\r\n    492     tree_map(partial(_check_output_dtype_grad, holomorphic), ans)\r\n--> 493     g = vjp_py(np.ones((), dtype=dtype))\r\n    494     g = g[0] if isinstance(argnums, int) else g\r\n    495     if not has_aux:\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/api.py in _vjp_pullback_wrapper(cotangent_dtypes, io_tree, fun, py_args)\r\n   1458              \"match type of corresponding primal output ({})\")\r\n   1459       raise TypeError(msg.format(_dtype(a), dtype))\r\n-> 1460   ans = fun(*args)\r\n   1461   return tree_unflatten(out_tree, ans)\r\n   1462 \r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in unbound_vjp(pvals, jaxpr, consts, *cts)\r\n    115     cts = tuple(map(ignore_consts, cts, pvals))\r\n    116     dummy_args = [UndefinedPrimal(v.aval) for v in jaxpr.invars]\r\n--> 117     arg_cts = backward_pass(jaxpr, consts, dummy_args, cts)\r\n    118     return map(instantiate_zeros, arg_cts)\r\n    119 \r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in backward_pass(jaxpr, consts, primals_in, cotangents_in)\r\n    200         cts_in_avals = [v.aval for v in eqn.outvars]\r\n    201         call_jaxpr, params = core.extract_call_jaxpr(eqn.primitive, eqn.params)\r\n--> 202         cts_out = get_primitive_transpose(eqn.primitive)(\r\n    203             params, call_jaxpr, invals, cts_in, cts_in_avals)\r\n    204       else:\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in call_transpose(primitive, params, call_jaxpr, args, ct, _)\r\n    486     new_params = update_params(new_params, map(is_undefined_primal, args),\r\n    487                                [type(x) is not Zero for x in ct])\r\n--> 488   out_flat = primitive.bind(fun, *all_args, **new_params)\r\n    489   return tree_unflatten(out_tree(), out_flat)\r\n    490 primitive_transposes[core.call_p] = partial(call_transpose, call_p)\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in bind(self, fun, *args, **params)\r\n   1132 \r\n   1133   def bind(self, fun, *args, **params):\r\n-> 1134     return call_bind(self, fun, *args, **params)\r\n   1135 \r\n   1136   def process(self, trace, fun, tracers, params):\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in call_bind(primitive, fun, *args, **params)\r\n   1124   else:\r\n   1125     tracers = map(top_trace.full_raise, args)\r\n-> 1126     outs = primitive.process(top_trace, fun, tracers, params)\r\n   1127   return apply_todos(env_trace_todo(), map(full_lower, outs))\r\n   1128 \r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in process(self, trace, fun, tracers, params)\r\n   1135 \r\n   1136   def process(self, trace, fun, tracers, params):\r\n-> 1137     return trace.process_call(self, fun, tracers, params)\r\n   1138 \r\n   1139   def post_process(self, trace, out_tracers, params):\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in process_call(self, call_primitive, f, tracers, params)\r\n    273     update_params = call_param_updaters.get(call_primitive)\r\n    274     new_params = update_params(params, nz_tangents) if update_params else params\r\n--> 275     result = call_primitive.bind(f_jvp, *primals, *nonzero_tangents, **new_params)\r\n    276     primal_out, tangent_out = tree_unflatten(out_tree_def(), result)\r\n    277     return [JVPTracer(self, p, t) for p, t in zip(primal_out, tangent_out)]\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in bind(self, fun, *args, **params)\r\n   1132 \r\n   1133   def bind(self, fun, *args, **params):\r\n-> 1134     return call_bind(self, fun, *args, **params)\r\n   1135 \r\n   1136   def process(self, trace, fun, tracers, params):\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in call_bind(primitive, fun, *args, **params)\r\n   1124   else:\r\n   1125     tracers = map(top_trace.full_raise, args)\r\n-> 1126     outs = primitive.process(top_trace, fun, tracers, params)\r\n   1127   return apply_todos(env_trace_todo(), map(full_lower, outs))\r\n   1128 \r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in process(self, trace, fun, tracers, params)\r\n   1135 \r\n   1136   def process(self, trace, fun, tracers, params):\r\n-> 1137     return trace.process_call(self, fun, tracers, params)\r\n   1138 \r\n   1139   def post_process(self, trace, out_tracers, params):\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/partial_eval.py in process_call(self, primitive, f, tracers, params)\r\n    179                   else PartialVal.unknown(mapped_aval(pval[0]))\r\n    180                   for pval, is_mapped in zip(in_pvals, params['mapped_invars'])]\r\n--> 181     jaxpr, out_pvals, consts, env_tracers = self.partial_eval(\r\n    182         f, in_pvals, partial(primitive.bind, **params))\r\n    183     if primitive.map_primitive:\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/partial_eval.py in partial_eval(self, f, pvals, app)\r\n    279     f = trace_to_subjaxpr(f, self.master, False)\r\n    280     f, aux = partial_eval_wrapper(f, tuple(in_avals))\r\n--> 281     out_flat, (out_avals, jaxpr, env) = app(f, *in_consts), aux()\r\n    282     out_consts, consts = split_list(out_flat, [len(out_flat)-len(jaxpr.constvars)])\r\n    283     out_pvs = map(PartialVal, zip(out_avals, out_consts))\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in bind(self, fun, *args, **params)\r\n   1132 \r\n   1133   def bind(self, fun, *args, **params):\r\n-> 1134     return call_bind(self, fun, *args, **params)\r\n   1135 \r\n   1136   def process(self, trace, fun, tracers, params):\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/core.py in call_bind(primitive, fun, *args, **params)\r\n   1121   if top_trace is None:\r\n   1122     with new_sublevel():\r\n-> 1123       outs = primitive.impl(fun, *args, **params)\r\n   1124   else:\r\n   1125     tracers = map(top_trace.full_raise, args)\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/xla.py in _xla_call_impl(fun, device, backend, name, donated_invars, *args)\r\n    524 \r\n    525 def _xla_call_impl(fun: lu.WrappedFun, *args, device, backend, name, donated_invars):\r\n--> 526   compiled_fun = _xla_callable(fun, device, backend, name, donated_invars,\r\n    527                                *unsafe_map(arg_spec, args))\r\n    528   try:\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/linear_util.py in memoized_fun(fun, *args)\r\n    222       fun.populate_stores(stores)\r\n    223     else:\r\n--> 224       ans = call(fun, *args)\r\n    225       cache[key] = (ans, fun.stores)\r\n    226     return ans\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/xla.py in _xla_callable(fun, device, backend, name, donated_invars, *arg_specs)\r\n    595   else:\r\n    596     pvals: Sequence[pe.PartialVal] = [pe.PartialVal.unknown(aval) for aval in abstract_args]\r\n--> 597     jaxpr, pvals, consts = pe.trace_to_jaxpr(\r\n    598         fun, pvals, instantiate=False, stage_out=True, bottom=True)\r\n    599   map(prefetch, it.chain(consts, jaxpr_literals(jaxpr)))\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/partial_eval.py in trace_to_jaxpr(fun, pvals, instantiate, stage_out, bottom, trace_type)\r\n    421   with core.new_master(trace_type, bottom=bottom) as master:\r\n    422     fun = trace_to_subjaxpr(fun, master, instantiate)\r\n--> 423     jaxpr, (out_pvals, consts, env) = fun.call_wrapped(pvals)\r\n    424     assert not env\r\n    425     del master\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/linear_util.py in call_wrapped(self, *args, **kwargs)\r\n    148     gen = None\r\n    149 \r\n--> 150     ans = self.f(*args, **dict(self.params, **kwargs))\r\n    151     del args\r\n    152     while stack:\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/interpreters/ad.py in backward_pass(jaxpr, consts, primals_in, cotangents_in)\r\n    203             params, call_jaxpr, invals, cts_in, cts_in_avals)\r\n    204       else:\r\n--> 205         cts_out = get_primitive_transpose(eqn.primitive)(cts_in, *invals,\r\n    206                                                          **eqn.params)\r\n    207     cts_out = [Zero(v.aval) for v in eqn.invars] if cts_out is Zero else cts_out\r\n\r\n~/miniconda3/lib/python3.8/site-packages/jax/lax/lax_control_flow.py in _while_transpose_error(*_, **kwargs)\r\n    536 \r\n    537 def _while_transpose_error(*_, **kwargs):\r\n--> 538   raise ValueError(\"Reverse-mode differentiation does not work for \"\r\n    539                    \"lax.while_loop or lax.fori_loop. \"\r\n    540                    \"Try using lax.scan instead.\")\r\n\r\nValueError: Reverse-mode differentiation does not work for lax.while_loop or lax.fori_loop. Try using lax.scan instead.\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4105", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4105/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4105/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4105/events", "html_url": "https://github.com/google/jax/issues/4105", "id": 682167050, "node_id": "MDU6SXNzdWU2ODIxNjcwNTA=", "number": 4105, "title": "non-terminating jit compilation", "user": {"login": "Joshuaalbert", "id": 14807032, "node_id": "MDQ6VXNlcjE0ODA3MDMy", "avatar_url": "https://avatars2.githubusercontent.com/u/14807032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Joshuaalbert", "html_url": "https://github.com/Joshuaalbert", "followers_url": "https://api.github.com/users/Joshuaalbert/followers", "following_url": "https://api.github.com/users/Joshuaalbert/following{/other_user}", "gists_url": "https://api.github.com/users/Joshuaalbert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Joshuaalbert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Joshuaalbert/subscriptions", "organizations_url": "https://api.github.com/users/Joshuaalbert/orgs", "repos_url": "https://api.github.com/users/Joshuaalbert/repos", "events_url": "https://api.github.com/users/Joshuaalbert/events{/privacy}", "received_events_url": "https://api.github.com/users/Joshuaalbert/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2285250167, "node_id": "MDU6TGFiZWwyMjg1MjUwMTY3", "url": "https://api.github.com/repos/google/jax/labels/available", "name": "available", "color": "77edef", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-19T20:43:06Z", "updated_at": "2020-08-20T14:22:09Z", "closed_at": "2020-08-20T14:22:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I find that using jax-0.1.75 and jaxlib-0.1.52 some things compile forever, or at least more than 8 hours. However with jax-0.1.68 and jaxlib-0.1.47 it compiles in a second. I have not tested intermediate versions but that should be trivial to do in order to bisect when this change started. It is very difficult to make small example that showcases it, however I can point the way to a complete example if that is desired.\r\n\r\n```bash\r\nconda create -n compilation_issue python=3.8\r\nconda activate compilation_issue\r\npip install numpy matplotlib scipy\r\n# pip install jax==0.1.67 jaxlib==0.1.47 -> works\r\npip install jax==0.1.75 jaxlib==0.1.52\r\npip install git+https://github.com/Joshuaalbert/jaxns.git@53e797a2d8de2a175c973ed1d81c7e1db6c444f1\r\npython -c \"from jaxns.examples.mvn_data_mvn_prior import main; main()\"\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4099", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4099/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4099/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4099/events", "html_url": "https://github.com/google/jax/issues/4099", "id": 681538432, "node_id": "MDU6SXNzdWU2ODE1Mzg0MzI=", "number": 4099, "title": "`jnp.repeat` doesn't lower to `jnp.full` without an explicit axis", "user": {"login": "jlebar", "id": 150663, "node_id": "MDQ6VXNlcjE1MDY2Mw==", "avatar_url": "https://avatars1.githubusercontent.com/u/150663?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlebar", "html_url": "https://github.com/jlebar", "followers_url": "https://api.github.com/users/jlebar/followers", "following_url": "https://api.github.com/users/jlebar/following{/other_user}", "gists_url": "https://api.github.com/users/jlebar/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlebar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlebar/subscriptions", "organizations_url": "https://api.github.com/users/jlebar/orgs", "repos_url": "https://api.github.com/users/jlebar/repos", "events_url": "https://api.github.com/users/jlebar/events{/privacy}", "received_events_url": "https://api.github.com/users/jlebar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782288, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg4", "url": "https://api.github.com/repos/google/jax/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}, {"id": 1291000112, "node_id": "MDU6TGFiZWwxMjkxMDAwMTEy", "url": "https://api.github.com/repos/google/jax/labels/performance", "name": "performance", "color": "1d64e0", "default": false, "description": "make things lean and fast"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-19T04:33:24Z", "updated_at": "2020-08-21T04:14:01Z", "closed_at": "2020-08-21T04:14:01Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "STR:\r\n\r\nStart a JAX interpreter with envvars `CUDA_VISIBLE_DEVICES=0 XLA_FLAGS='--xla_dump_to=- --xla_dump_hlo_as_text'` and enable omnistaging (probably not necessary, but makes the logs a little less noisy): `import jax; jax.config.enable_omnistaging()`\r\n\r\nIf we `jnp.repeat` with an explicit `axis=0`, the HLO is `broadcast(-1)`, as desired:\r\n\r\n```\r\n> jax.jit(lambda a, repeats: jnp.repeat(a, repeats, axis=0), static_argnums=[0,1])(-1, jnp.asarray([10]))\r\n*** Begin 1597811412237518.module_0002.before_optimizations.txt ***\r\nHloModule jit__lambda___2.5\r\n\r\nENTRY %jit__lambda___2.5 () -> (s32[10]) {\r\n  %constant.1 = pred[] constant(false)\r\n  %constant.2 = s32[] constant(-1), metadata={op_type=\"broadcast_in_dim\" op_name=\"jit(<lambda>)/broadcast_in_dim[ broadcast_dimensions=(  )\\n                                shape=(10,) ]\" source_file=\"<ipython-input-8-a49d7d47013d>\" source_line=1}\r\n  %broadcast.3 = s32[10]{0} broadcast(s32[] %constant.2), dimensions={}, metadata={op_type=\"broadcast_in_dim\" op_name=\"jit(<lambda>)/broadcast_in_dim[ broadcast_dimensions=(  )\\n                                shape=(10,) ]\" source_file=\"<ipython-input-8-a49d7d47013d>\" source_line=1}\r\n  ROOT %tuple.4 = (s32[10]{0}) tuple(s32[10]{0} %broadcast.3)\r\n}\r\n*** End 1597811412237518.module_0002.before_optimizations.txt ***\r\n```\r\n\r\nBut if we leave off the `axis=0` param, the generated HLO is a much more complicated way of expressing \"all -1s\".  I'm only going to post the after-optimization HLO, because before-optimization is quite large.\r\n\r\n```\r\n> jax.jit(lambda a, repeats: jnp.repeat(a, repeats), static_argnums=[0,1])(-1, jnp.asarray([10]))\r\n\r\n*** Begin 1597811497850648.module_0003.after_optimizations.txt ***\r\nHloModule jit__lambda___3.164\r\n\r\n%fused_computation () -> s32[10] {\r\n  %constant_223 = s32[1]{0} constant({-1}), metadata={op_type=\"reshape\" op_name=\"jit(<lambda>)/reshape[ dimensions=None\\n                       new_sizes=(1,) ]\" source_file=\"<ipython-input-9-3872efff285b>\" source_line=1}\r\n  %constant_222 = s32[] constant(0), metadata={op_type=\"sub\" op_name=\"jit(<lambda>)/sub\" source_file=\"<ipython-input-9-3872efff285b>\" source_line=1}\r\n  %broadcast.32 = s32[10,1]{1,0} broadcast(s32[] %constant_222), dimensions={}, metadata={op_type=\"broadcast_in_dim\" op_name=\"jit(<lambda>)/broadcast_in_dim[ broadcast_dimensions=(0,)\\n                                shape=(10, 1) ]\" source_file=\"<ipython-input-9-3872efff285b>\" source_line=1}\r\n  ROOT %gather.0 = s32[10]{0} gather(s32[1]{0} %constant_223, s32[10,1]{1,0} %broadcast.32), offset_dims={}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=1, slice_sizes={1}, metadata={op_type=\"gather\" op_name=\"jit(<lambda>)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))\\n                      slice_sizes=(1,) ]\" source_file=\"<ipython-input-9-3872efff285b>\" source_line=1}\r\n}\r\n\r\nENTRY %jit__lambda___3.164 () -> (s32[10]) {\r\n  %fusion = s32[10]{0} fusion(), kind=kLoop, calls=%fused_computation, metadata={op_type=\"gather\" op_name=\"jit(<lambda>)/gather[ dimension_numbers=GatherDimensionNumbers(offset_dims=(), collapsed_slice_dims=(0,), start_index_map=(0,))\\n                      slice_sizes=(1,) ]\" source_file=\"<ipython-input-9-3872efff285b>\" source_line=1}\r\n  ROOT %tuple.163 = (s32[10]{0}) tuple(s32[10]{0} %fusion)\r\n}\r\n*** End 1597811497850648.module_0003.after_optimizations.txt ***\r\n```\r\n\r\nIt looks like the implementation of `jnp.repeat` in lax_numpy actually tries to lower to `jnp.full`, but the code only works when axis is explicit.\r\n\r\nThis is not an important issue for me because it's easy to work around (supply the axis param, or just use jnp.full).  Maybe it's a good first bug for someone new to the project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4083", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4083/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4083/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4083/events", "html_url": "https://github.com/google/jax/issues/4083", "id": 680224835, "node_id": "MDU6SXNzdWU2ODAyMjQ4MzU=", "number": 4083, "title": "Performance problem", "user": {"login": "XDongiang", "id": 43576361, "node_id": "MDQ6VXNlcjQzNTc2MzYx", "avatar_url": "https://avatars0.githubusercontent.com/u/43576361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XDongiang", "html_url": "https://github.com/XDongiang", "followers_url": "https://api.github.com/users/XDongiang/followers", "following_url": "https://api.github.com/users/XDongiang/following{/other_user}", "gists_url": "https://api.github.com/users/XDongiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/XDongiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XDongiang/subscriptions", "organizations_url": "https://api.github.com/users/XDongiang/orgs", "repos_url": "https://api.github.com/users/XDongiang/repos", "events_url": "https://api.github.com/users/XDongiang/events{/privacy}", "received_events_url": "https://api.github.com/users/XDongiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-08-17T13:11:42Z", "updated_at": "2020-08-21T14:09:52Z", "closed_at": "2020-08-21T14:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use JAX auto-gradient to iminuit fit my likelihood. When I test the speed in different GPU, I found the different in GTX2080Ti and Tesla P100 is very small , even the GTX2080Ti is faster.(I use float64)  \r\nBut , the FP64 TFLOPs , GTX2080Ti is 420.2GFLOPS , P100 is 4.763TFLOPS. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4079", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4079/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4079/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4079/events", "html_url": "https://github.com/google/jax/issues/4079", "id": 679700717, "node_id": "MDU6SXNzdWU2Nzk3MDA3MTc=", "number": 4079, "title": "How to accurately measure GPU computing time", "user": {"login": "XDongiang", "id": 43576361, "node_id": "MDQ6VXNlcjQzNTc2MzYx", "avatar_url": "https://avatars0.githubusercontent.com/u/43576361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XDongiang", "html_url": "https://github.com/XDongiang", "followers_url": "https://api.github.com/users/XDongiang/followers", "following_url": "https://api.github.com/users/XDongiang/following{/other_user}", "gists_url": "https://api.github.com/users/XDongiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/XDongiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XDongiang/subscriptions", "organizations_url": "https://api.github.com/users/XDongiang/orgs", "repos_url": "https://api.github.com/users/XDongiang/repos", "events_url": "https://api.github.com/users/XDongiang/events{/privacy}", "received_events_url": "https://api.github.com/users/XDongiang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-08-16T06:41:23Z", "updated_at": "2020-08-22T02:25:51Z", "closed_at": "2020-08-22T00:59:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use JAX to write a program to do the fitting, and now I want to test the speed on different graphics cards. \r\n\r\nIs there any way to flexibly test the speed of the GPU part in the program?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4059", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4059/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4059/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4059/events", "html_url": "https://github.com/google/jax/issues/4059", "id": 679045469, "node_id": "MDU6SXNzdWU2NzkwNDU0Njk=", "number": 4059, "title": "GPU not detected by JAX. Warning: No GPU/TPU found, falling back to CPU.", "user": {"login": "8sukanya8", "id": 4613326, "node_id": "MDQ6VXNlcjQ2MTMzMjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/4613326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/8sukanya8", "html_url": "https://github.com/8sukanya8", "followers_url": "https://api.github.com/users/8sukanya8/followers", "following_url": "https://api.github.com/users/8sukanya8/following{/other_user}", "gists_url": "https://api.github.com/users/8sukanya8/gists{/gist_id}", "starred_url": "https://api.github.com/users/8sukanya8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/8sukanya8/subscriptions", "organizations_url": "https://api.github.com/users/8sukanya8/orgs", "repos_url": "https://api.github.com/users/8sukanya8/repos", "events_url": "https://api.github.com/users/8sukanya8/events{/privacy}", "received_events_url": "https://api.github.com/users/8sukanya8/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-14T09:56:32Z", "updated_at": "2020-08-15T10:17:56Z", "closed_at": "2020-08-15T10:17:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "JAX library does not use the GPU and shows warning\r\n```\r\npath/venv/lib/python3.6/site-packages/jax/lib/xla_bridge.py:130: UserWarning: No GPU/TPU found, falling back to CPU.\r\n  warnings.warn('No GPU/TPU found, falling back to CPU.')\r\n```\r\nMy code looks somewhat like this. I am not able to post the exact code I was using, as it is a part of an exercise.\r\n\r\n```\r\nfrom trax.fastmath import numpy as fastnp\r\nv1 = np.array([[0.1172474, 0.6472824, 0.8061181],[0.6172836 , 0.5123475, 0.9017283]])\r\nv2 = np.array([[ 0.5933123,  0.1162829,  0.9063872],[-0.6481012 , -0.57543534, -0.7162344]])\r\nmargin=0.25\r\nscores = fastnp.dot(v1, v2.T)\r\n```\r\n\r\nAlso, on checking the backend devices with the following code, I get to see only the CPU.\r\n```\r\nfrom jax.lib import xla_bridge\r\nprint(xla_bridge.get_backend().platform)\r\n```\r\n```\r\ncpu\r\n```\r\n\r\nHowever, if I check devices using tensorflow, I can see the GPU.\r\n```\r\nimport tensorflow as tf\r\ntf.config.list_physical_devices('GPU')\r\n```\r\n\r\n```\r\n[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\r\n```\r\n\r\nHere are the outputs of nvcc and nvidia-smi.\r\n```\r\nnvcc --version\r\nnvcc: NVIDIA (R) Cuda compiler driver\r\nCopyright (c) 2005-2019 NVIDIA Corporation\r\nBuilt on Sun_Jul_28_19:07:16_PDT_2019\r\nCuda compilation tools, release 10.1, V10.1.243\r\n```\r\n\r\n```\r\nFri Aug 14 11:19:05 2020       \r\n+-----------------------------------------------------------------------------+\r\n| NVIDIA-SMI 450.57       Driver Version: 450.57       CUDA Version: 11.0     |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|                               |                      |               MIG M. |\r\n|===============================+======================+======================|\r\n|   0  GeForce RTX 2070    Off  | 00000000:31:00.0  On |                  N/A |\r\n|  0%   49C    P8    17W / 175W |    894MiB /  7979MiB |      3%      Default |\r\n|                               |                      |                  N/A |\r\n+-------------------------------+----------------------+----------------------+\r\n                                                                               \r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                                  |\r\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\r\n|        ID   ID                                                   Usage      |\r\n|=============================================================================|\r\n|    0   N/A  N/A      1562      G   /usr/lib/xorg/Xorg                 24MiB |\r\n|    0   N/A  N/A      1696      G   /usr/bin/gnome-shell               50MiB |\r\n|    0   N/A  N/A      1939      G   /usr/lib/xorg/Xorg                493MiB |\r\n|    0   N/A  N/A      2071      G   /usr/bin/gnome-shell              188MiB |\r\n|    0   N/A  N/A      2984      G   .../debug.log --shared-files       17MiB |\r\n|    0   N/A  N/A      3386      G   /usr/lib/firefox/firefox            2MiB |\r\n|    0   N/A  N/A      4283      G   /usr/lib/firefox/firefox            2MiB |\r\n|    0   N/A  N/A      5579      C   ...ffice/program/soffice.bin       97MiB |\r\n|    0   N/A  N/A      5665      G   /usr/lib/firefox/firefox            2MiB |\r\n|    0   N/A  N/A      5813      G   /usr/lib/firefox/firefox            2MiB |\r\n|    0   N/A  N/A      8409      G   /usr/lib/firefox/firefox            2MiB |\r\n+-----------------------------------------------------------------------------+\r\n```\r\n\r\nCan I make JAX use the GPU?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4053", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4053/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4053/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4053/events", "html_url": "https://github.com/google/jax/issues/4053", "id": 678753639, "node_id": "MDU6SXNzdWU2Nzg3NTM2Mzk=", "number": 4053, "title": "jax.numpy.ldexp output does not match np.ldexp", "user": {"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1104782288, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg4", "url": "https://api.github.com/repos/google/jax/labels/good%20first%20issue", "name": "good first issue", "color": "7057ff", "default": true, "description": "Good for newcomers"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T21:48:01Z", "updated_at": "2020-08-15T15:47:43Z", "closed_at": "2020-08-15T15:47:43Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "For example:\r\n```python\r\n>>> import numpy as np; np.ldexp(1, 1)                                                                        \r\n2.0\r\n>>> import jax.numpy as jnp; jnp.ldexp(1, 1)                                                                  \r\nDeviceArray(1., dtype=float32)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4047", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4047/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4047/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4047/events", "html_url": "https://github.com/google/jax/issues/4047", "id": 678429018, "node_id": "MDU6SXNzdWU2Nzg0MjkwMTg=", "number": 4047, "title": "vmap unexpected behavior: NaNs in gradients", "user": {"login": "cagrikymk", "id": 15324155, "node_id": "MDQ6VXNlcjE1MzI0MTU1", "avatar_url": "https://avatars1.githubusercontent.com/u/15324155?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cagrikymk", "html_url": "https://github.com/cagrikymk", "followers_url": "https://api.github.com/users/cagrikymk/followers", "following_url": "https://api.github.com/users/cagrikymk/following{/other_user}", "gists_url": "https://api.github.com/users/cagrikymk/gists{/gist_id}", "starred_url": "https://api.github.com/users/cagrikymk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cagrikymk/subscriptions", "organizations_url": "https://api.github.com/users/cagrikymk/orgs", "repos_url": "https://api.github.com/users/cagrikymk/repos", "events_url": "https://api.github.com/users/cagrikymk/events{/privacy}", "received_events_url": "https://api.github.com/users/cagrikymk/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-08-13T13:16:32Z", "updated_at": "2020-08-15T02:52:54Z", "closed_at": "2020-08-15T02:45:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI am observing an unexpected behavior from jax.vmap.\r\nI isolated the issue in the following code snippet. If \"distance_matrices\" are calculated without vmap, it works fine but when I use jax.vmap, the gradients become NaN. \r\n\r\nI am using Jax version 0.1.75.\r\n\r\nI appreciate any help that you can provide.\r\n\r\n```\r\nimport jax\r\nimport jax.numpy as np\r\nprint(jax.__version__)\r\n@jax.custom_transforms\r\ndef safe_sqrt(x):\r\n  return np.sqrt(x)\r\njax.defjvp(safe_sqrt, lambda g, ans, x: 0.5 * g / np.where(x > 0, ans, np.inf) )\r\n\r\ndef create_distance_matrices_single(tiled_positions, shift):\r\n\t\r\n\ttiled_positions_trans = tiled_positions.swapaxes(0,1)\r\n\tshifted_tiled_positions_trans = tiled_positions_trans + shift\r\n\tdiff = tiled_positions - shifted_tiled_positions_trans\r\n\tdistance_matrix = safe_sqrt(np.square(diff).sum(axis=2))\r\n\treturn distance_matrix\r\n\r\n\r\ndef create_distance_matrices(positions, shifts):\r\n\tcount = len(positions)\r\n\tatom_pos = positions.reshape((count,1,3))\r\n\ttiled_positions = np.tile(atom_pos,(1,count,1))\r\n\t\r\n\t# if jax.vmap is used, gradients become NaNs\r\n\tdistance_matrices = jax.vmap(create_distance_matrices_single, in_axes=(None,0))(tiled_positions, shifts)\r\n\t#distance_matrices = create_distance_matrices_single(tiled_positions, shifts)\r\n\treturn np.sum(distance_matrices.flatten())\r\n\r\ngrad_func = jax.value_and_grad(create_distance_matrices)\r\n\r\nposition = np.ones((2,3))\r\nshift = np.zeros((1,3))\r\n\r\nval, grads = grad_func(position,shift)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4042", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4042/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4042/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4042/events", "html_url": "https://github.com/google/jax/issues/4042", "id": 678344255, "node_id": "MDU6SXNzdWU2NzgzNDQyNTU=", "number": 4042, "title": "Inconsistent results for epsilon * inf on CPU", "user": {"login": "mathisgerdes", "id": 14827110, "node_id": "MDQ6VXNlcjE0ODI3MTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/14827110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathisgerdes", "html_url": "https://github.com/mathisgerdes", "followers_url": "https://api.github.com/users/mathisgerdes/followers", "following_url": "https://api.github.com/users/mathisgerdes/following{/other_user}", "gists_url": "https://api.github.com/users/mathisgerdes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathisgerdes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathisgerdes/subscriptions", "organizations_url": "https://api.github.com/users/mathisgerdes/orgs", "repos_url": "https://api.github.com/users/mathisgerdes/repos", "events_url": "https://api.github.com/users/mathisgerdes/events{/privacy}", "received_events_url": "https://api.github.com/users/mathisgerdes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-13T10:53:11Z", "updated_at": "2020-08-15T07:05:36Z", "closed_at": "2020-08-15T07:05:36Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "To be consistent with numpy, infinity multiplied by small positive values should return infinity.\r\nFor small enough values, jax returns `nan` instead.\r\n\r\n```python\r\n>>> import jax.numpy as jnp\r\n>>> import numpy as onp\r\n\r\n>>> onp.nextafter(0, 1) * onp.inf\r\ninf\r\n\r\n>>> jnp.finfo(jnp.float_).eps * jnp.inf  # correct for some small values\r\ninf\r\n\r\n>>> jnp.nextafter(0, 1)  # smaller than eps above, but != 0\r\nDeviceArray(1.e-45, dtype=float32)\r\n\r\n>>> jnp.nextafter(0, 1) * jnp.inf  # should also return inf\r\nDeviceArray(nan, dtype=float32)\r\n```\r\n\r\nI've tried this on my local machine and on Colab running on the CPU with 32 and 64 bit versions, jax version `0.1.75`. Running on GPU it correctly returns `inf`.\r\n\r\nCuriously, on the CPU in 32-bit mode (but not on the GPU on Colab) the following returns true\r\n```python\r\njnp.nextafter(0, 1) == onp.nextafter(0, 1)\r\n```\r\ndespite ostensibly being `1e-45` and `5e-324`, respectively.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4033", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4033/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4033/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4033/events", "html_url": "https://github.com/google/jax/issues/4033", "id": 677776298, "node_id": "MDU6SXNzdWU2Nzc3NzYyOTg=", "number": 4033, "title": "Broadcasting minval and maxval in jax.random.uniform", "user": {"login": "ethanluoyc", "id": 6040760, "node_id": "MDQ6VXNlcjYwNDA3NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/6040760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ethanluoyc", "html_url": "https://github.com/ethanluoyc", "followers_url": "https://api.github.com/users/ethanluoyc/followers", "following_url": "https://api.github.com/users/ethanluoyc/following{/other_user}", "gists_url": "https://api.github.com/users/ethanluoyc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ethanluoyc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ethanluoyc/subscriptions", "organizations_url": "https://api.github.com/users/ethanluoyc/orgs", "repos_url": "https://api.github.com/users/ethanluoyc/repos", "events_url": "https://api.github.com/users/ethanluoyc/events{/privacy}", "received_events_url": "https://api.github.com/users/ethanluoyc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-12T15:16:42Z", "updated_at": "2020-08-12T20:22:12Z", "closed_at": "2020-08-12T20:22:12Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi JAX team!\r\n\r\nCurrently, it seems that broadcasting of minval and maxval in `jax.random.uniform` is not supported.\r\nhttps://github.com/google/jax/blob/a169743f64e9ddf826cdad5c225e3e18a980a1db/jax/random.py#L343\r\n\r\nIn numpy, this is supported\r\n```python\r\nnp.random.uniform(low=jnp.zeros(2), high=jnp.ones(2), size=(10,2))\r\n```\r\n\r\nIn JAX, this will result in a TypeError `TypeError: max got arrays of different rank: (2,), (10, 2).`.\r\n\r\n```python\r\njax.random.uniform(\r\n    key=jax.random.PRNGKey(42),\r\n    shape=(10,2), \r\n    minval=jnp.zeros(2), \r\n    maxval=jnp.ones(2))\r\n```\r\n\r\nA manual broadcasting will fix this issue\r\n```\r\njax.random.uniform(\r\n    key=jax.random.PRNGKey(42),\r\n    shape=(1,2), \r\n    minval=jnp.broadcast_to(jnp.zeros(2), (1,2)), \r\n    maxval=jnp.broadcast_to(jnp.ones(2), (1,2)))\r\n```\r\n\r\nIs JAX's behaviour intended? If not, I am happy to send a PR fixing this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4026", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4026/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4026/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4026/events", "html_url": "https://github.com/google/jax/issues/4026", "id": 677189766, "node_id": "MDU6SXNzdWU2NzcxODk3NjY=", "number": 4026, "title": "Parallel mapping a function involving jax over multiple cores of a single CPU", "user": {"login": "DanPuzzuoli", "id": 1839672, "node_id": "MDQ6VXNlcjE4Mzk2NzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1839672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanPuzzuoli", "html_url": "https://github.com/DanPuzzuoli", "followers_url": "https://api.github.com/users/DanPuzzuoli/followers", "following_url": "https://api.github.com/users/DanPuzzuoli/following{/other_user}", "gists_url": "https://api.github.com/users/DanPuzzuoli/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanPuzzuoli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanPuzzuoli/subscriptions", "organizations_url": "https://api.github.com/users/DanPuzzuoli/orgs", "repos_url": "https://api.github.com/users/DanPuzzuoli/repos", "events_url": "https://api.github.com/users/DanPuzzuoli/events{/privacy}", "received_events_url": "https://api.github.com/users/DanPuzzuoli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-11T20:52:54Z", "updated_at": "2020-08-12T01:10:51Z", "closed_at": "2020-08-12T01:10:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using `jax` to compute an objective function that I'm optimizing using `scipy.optimize.minimize` (after transforming the objective with `value_and_grad` and `jit`). This is working great, but I'd like to run this optimization many times on my laptop in parallel, parallelizing over CPU cores (i.e. run an instance of the optimization on each core). I tried using `joblib` (a package for doing parallelization in python), and it actually ran and it seemed to \"work\", but some weird stuff is going on: the objective function under normal circumstances returns a python `float`, but in the parallelized results I'm occasionally getting jax device arrays containing a 32 bit float (even though I set jax to be 64 bit).\r\n\r\nI wasn't really expecting this to work so easily, but don't know enough about either XLA or parallelization to trouble shoot this (or come up with a reasonable solution). Any suggestions on how to do this? Is there someway to restrict the compilation to a single core?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4024", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4024/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4024/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4024/events", "html_url": "https://github.com/google/jax/issues/4024", "id": 677060470, "node_id": "MDU6SXNzdWU2NzcwNjA0NzA=", "number": 4024, "title": "Fastest implementation of an elementwise gradient?", "user": {"login": "tawe141", "id": 13124532, "node_id": "MDQ6VXNlcjEzMTI0NTMy", "avatar_url": "https://avatars1.githubusercontent.com/u/13124532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tawe141", "html_url": "https://github.com/tawe141", "followers_url": "https://api.github.com/users/tawe141/followers", "following_url": "https://api.github.com/users/tawe141/following{/other_user}", "gists_url": "https://api.github.com/users/tawe141/gists{/gist_id}", "starred_url": "https://api.github.com/users/tawe141/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tawe141/subscriptions", "organizations_url": "https://api.github.com/users/tawe141/orgs", "repos_url": "https://api.github.com/users/tawe141/repos", "events_url": "https://api.github.com/users/tawe141/events{/privacy}", "received_events_url": "https://api.github.com/users/tawe141/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1181451924, "node_id": "MDU6TGFiZWwxMTgxNDUxOTI0", "url": "https://api.github.com/repos/google/jax/labels/application", "name": "application", "color": "44c0d6", "default": false, "description": ""}, {"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-08-11T17:31:23Z", "updated_at": "2020-08-13T05:24:11Z", "closed_at": "2020-08-13T05:24:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Not sure if this is the place to post this, so let me know if I should be putting this elsewhere. \r\n\r\nI'm trying to implement [gradient-enhanced kriging](https://arxiv.org/pdf/1704.00060.pdf) with JAX. Ideally, the user should be able to define a kernel and JAX will be able to automatically find its gradient/hessian and generate the appropriate covariance matrix. Here's what I've tried so far:\r\n\r\n**Kernel Implementation**\r\n```\r\nimport jax.numpy as np\r\nfrom jax import jit, jacrev, jacfwd, vmap\r\nfrom abc import ABC, abstractmethod\r\n\r\n\r\nclass Kernel(ABC):\r\n    def __init__(self, name: str, debug=True):\r\n        self.name = name\r\n\r\n    def __call__(self, x1: np.ndarray, x2: np.ndarray):\r\n        raise NotImplementedError()\r\n\r\n    @abstractmethod\r\n    def forward(self, x1: np.ndarray, x2: np.ndarray, thetas: np.ndarray):\r\n        raise NotImplementedError()\r\n\r\n\r\nclass RBF(Kernel):\r\n    def __init__(self, length_scale=1.0):\r\n        self.length_scale = length_scale\r\n        super(RBF, self).__init__('RBF')\r\n\r\n    def __call__(self, x1: np.ndarray, x2: np.ndarray):\r\n        return self.forward(x1, x2, np.array([self.length_scale]))\r\n\r\n    def forward(self, x1: np.ndarray, x2: np.ndarray, thetas: np.ndarray):\r\n        assert thetas.shape == (1,)\r\n        length_scale = thetas[0]\r\n\r\n        # d = np.linalg.norm(\r\n        #     np.expand_dims(x1, 0) - np.expand_dims(x2, 1),\r\n        #     axis=-1\r\n        # ) / length_scale\r\n        # return np.exp(-0.5 * (d * d))\r\n        d = (np.expand_dims(x1, 0) - np.expand_dims(x2, 1)) / length_scale\r\n        d = d * d\r\n        d = np.sum(d, axis=-1)\r\n        return np.exp(-0.5 * d)\r\n\r\n\r\nclass RBFGrad(RBF):\r\n    def __init__(self, length_scale=1.0):\r\n        super(RBFGrad, self).__init__(length_scale)\r\n        self.dkdx1 = jit(jacfwd(super(RBFGrad, self).forward, argnums=0))\r\n        self.dkdx2 = jit(jacfwd(super(RBFGrad, self).forward, argnums=1))\r\n        self.dk2dx1dx2 = jit(jacfwd(jacrev(super(RBFGrad, self).forward, argnums=0), argnums=1))\r\n\r\n    def forward(self, x1: np.ndarray, x2: np.ndarray, thetas: np.ndarray):\r\n        K = super().forward(x1, x2, thetas)\r\n        dx2 = self.dkdx2(x1, x2, thetas).sum(-2)\r\n        upper = np.concatenate([dx2[:, :, i] for i in range(dx2.shape[-1])], axis=1)\r\n        dx1 = self.dkdx1(x1, x2, thetas).sum(-2)\r\n        left = np.concatenate([dx1[:, :, i] for i in range(dx1.shape[-1])], axis=0)\r\n        dx1dx2 = self.dk2dx1dx2(x1, x2, thetas).sum(2).sum(-2)\r\n        dx2_concatenated = np.concatenate([\r\n            dx1dx2[:, :, :, i]\r\n            for i in range(dx1dx2.shape[-1])\r\n        ], axis=1)\r\n        hess = np.concatenate([\r\n            dx2_concatenated[:, :, i]\r\n            for i in range(dx2_concatenated.shape[-1])\r\n        ], axis=0)\r\n\r\n        # form the overall covariance matrix\r\n        # [\r\n        #     [K,       dK/dx2      ],\r\n        #     [dK/dx1,  dK^2/dx1dx2 ]\r\n        # ]\r\n        return np.concatenate([\r\n            np.concatenate([K, upper], axis=1),\r\n            np.concatenate([left, hess], axis=1)],\r\n            axis=0\r\n        )\r\n```\r\n\r\n**Test**\r\n```\r\nimport pytest\r\nfrom gpgrad.kernels import *\r\nimport jax.numpy as np\r\nimport numpy as onp\r\nimport jax\r\n\r\n\r\ndef test_rbf():\r\n    a = np.linspace(0, 10).reshape(-1, 1)\r\n    k = RBF(1.0)\r\n    result = k(a, a)\r\n    assert result.shape == (len(a), len(a))\r\n    assert np.allclose(np.diag(result), 1.0)\r\n    assert np.allclose(k(a, a), k(a.reshape(-1, 1), a.reshape(-1, 1)))\r\n\r\n\r\ndef test_rbfgrad():\r\n    a = np.linspace(0, 10).reshape(-1, 1)\r\n    b = np.linspace(0, 10).reshape(-1, 1)\r\n\r\n    k = RBFGrad(1.0)\r\n    result = k(a, b)\r\n    assert result.shape == (2*len(a), 2*len(a))\r\n    # diagonals of kernel matrix should be 1.0\r\n    assert np.allclose(np.diag(result[:len(a), :len(a)]), 1.0)\r\n    # diagonals of derivative matrices wrt. x1 or x2 should be 0.0\r\n    assert np.allclose(np.diag(result[:len(a), len(a):]), 0.0)\r\n    assert np.allclose(np.diag(result[len(a):, :len(a)]), 0.0)\r\n    # diagonals of hessian wrt x1 and x2 should be 1.0\r\n    assert np.allclose(np.diag(result[len(a):, len(a):]), 1.0)\r\n```\r\n\r\nI _think_ this gets me what I want, though I'm admittedly a little confused by the resulting shapes of the derivatives (`dx1` and `dx2` in `RBFGrad`). For inputs of shape `(N, d)`, `dx1` and `dx2` shapes are `(N, N, N, d)`. I think this is because JAX is trying to take the derivative of each row of `x1`/`x2` wrt each element of the `NxN` matrix of `RBF.forward()`. This results in lots of `0.0`'s in the derivatives (see `dx1` or `dx2` in `RBFGrad.forward()` before `.sum(-2)`). This suggests `O(N)` operations that simply evaluate to `0.0`. This is exacerbated when I evaluate the second derivative matrix, making the code quite slow to run for a modest number of rows for `x`. \r\n\r\nOn my laptop, `test_rbf()` runs in about 600ms without JIT compiling. `test_rbfgrad()` runs in about 15s even with JIT compiling on the derivative functions. The main bottleneck there is the second derivative function. \r\n\r\nIs there a faster way to implement this in JAX, perhaps by eliminating the numerous operations that result in `0`'s in the derivatives? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4022", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4022/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4022/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4022/events", "html_url": "https://github.com/google/jax/issues/4022", "id": 676725409, "node_id": "MDU6SXNzdWU2NzY3MjU0MDk=", "number": 4022, "title": "jax.numpy.clip has unexpected behavior which diverges from numpy.clip ", "user": {"login": "DanGraur", "id": 16325205, "node_id": "MDQ6VXNlcjE2MzI1MjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/16325205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DanGraur", "html_url": "https://github.com/DanGraur", "followers_url": "https://api.github.com/users/DanGraur/followers", "following_url": "https://api.github.com/users/DanGraur/following{/other_user}", "gists_url": "https://api.github.com/users/DanGraur/gists{/gist_id}", "starred_url": "https://api.github.com/users/DanGraur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DanGraur/subscriptions", "organizations_url": "https://api.github.com/users/DanGraur/orgs", "repos_url": "https://api.github.com/users/DanGraur/repos", "events_url": "https://api.github.com/users/DanGraur/events{/privacy}", "received_events_url": "https://api.github.com/users/DanGraur/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-11T09:30:35Z", "updated_at": "2020-08-11T18:12:27Z", "closed_at": "2020-08-11T18:12:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all!\r\n\r\nI've recently encountered an issue with `jax.numpy.clip` which produces variable outputs based on the `dtype` of the input (I have jax version `0.2.0`). For example, if we define our `a_min` and `a_max` as floats, but pass an integer type for the `a` parameter, then the limits get cast to the same integer type as the input (see [here](https://github.com/google/jax/blob/ebc5e8bfd6d091bf1fbf67de1565705f30159aaf/jax/numpy/lax_numpy.py#L1514) and [here](https://github.com/google/jax/blob/ebc5e8bfd6d091bf1fbf67de1565705f30159aaf/jax/numpy/lax_numpy.py#L1518)). This can have some undesired results, especially since users might be accustomed to the `numpy.clip` behavior which does the exact opposite. Moreover, this divergence between the two implementations is [not explicitly documented](https://jax.readthedocs.io/en/latest/_autosummary/jax.numpy.clip.html), as the jax documentation just copies [the numpy doc](https://numpy.org/doc/stable/reference/generated/numpy.clip.html). To detail the issue, I've attached two code snippets:\r\n\r\n```python\r\n>>> import jax.numpy as jnp\r\n>>> import numpy as np\r\n>>>\r\n>>> eps = .0001\r\n>>> f = lambda x: jnp.clip(x, eps - 1, 1 - eps)  # x \\in [-0.9999, 0.9999] \r\n>>> g = lambda x: np.clip(x, eps - 1, 1 - eps)   # x \\in [-0.9999, 0.9999]\r\n>>>\r\n>>> x = jnp.arange(-3, 3)\r\n>>> f(x)\r\nDeviceArray([0, 0, 0, 0, 0, 0], dtype=int32)\r\n>>> g(x)\r\narray([-0.9999, -0.9999, -0.9999,  0.    ,  0.9999,  0.9999])\r\n```\r\n\r\nConsidering the implementation, the behavior is as expected only when `jax` can infer the type or the type is explicitly specified:\r\n\r\n```python\r\n>>> x = jnp.arange(-3, 3, dtype=jnp.float32)  # Something like jnp.arange(-3.0, 3.0) will also work\r\n>>> f(x)\r\nDeviceArray([-0.9999, -0.9999, -0.9999,  0.    ,  0.9999,  0.9999], dtype=float32)\r\n>>> g(x)\r\narray([-0.9999, -0.9999, -0.9999,  0.    ,  0.9999,  0.9999],\r\n      dtype=float32)\r\n```\r\n\r\nMy two (mutually exclusive) suggestions would be the following:\r\n\r\n* Explicitly document the difference between the two implementations\r\n* Change the jax implementation such that it aligns with the numpy one\r\n\r\nI would personally prefer the latter, since not everyone will read the docs, especially if they're already acquainted with the numpy method in the first place, however, I'm not sure what implications this will have on the jax codebase.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4020", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4020/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4020/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4020/events", "html_url": "https://github.com/google/jax/issues/4020", "id": 676685426, "node_id": "MDU6SXNzdWU2NzY2ODU0MjY=", "number": 4020, "title": "RuntimeError on GCP TPU", "user": {"login": "JaySunnn", "id": 69504811, "node_id": "MDQ6VXNlcjY5NTA0ODEx", "avatar_url": "https://avatars1.githubusercontent.com/u/69504811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JaySunnn", "html_url": "https://github.com/JaySunnn", "followers_url": "https://api.github.com/users/JaySunnn/followers", "following_url": "https://api.github.com/users/JaySunnn/following{/other_user}", "gists_url": "https://api.github.com/users/JaySunnn/gists{/gist_id}", "starred_url": "https://api.github.com/users/JaySunnn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JaySunnn/subscriptions", "organizations_url": "https://api.github.com/users/JaySunnn/orgs", "repos_url": "https://api.github.com/users/JaySunnn/repos", "events_url": "https://api.github.com/users/JaySunnn/events{/privacy}", "received_events_url": "https://api.github.com/users/JaySunnn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-08-11T08:29:08Z", "updated_at": "2020-08-12T03:38:47Z", "closed_at": "2020-08-12T03:38:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to run the example code in [README](https://github.com/google/jax/blob/master/cloud_tpu_colabs/README.md#running-jax-on-a-cloud-tpu-from-a-gce-vm) to use jax on TPU from a GCE VM, but I got RuntimeError.\r\n\r\n```\r\n2020-08-11 08:26:26.301652: E external/org_tensorflow/tensorflow/compiler/xla/python/tpu_driver/grpc_tpu_driver.cc:1068] Failed to open the gRPC driver: 12: :\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/random.py\", line 85, in PRNGKey\r\n    k1 = convert(np.bitwise_and(np.right_shift(seed, 32), 0xFFFFFFFF))\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/random.py\", line 81, in <lambda>\r\n    convert = lambda k: lax.reshape(lax.convert_element_type(k, np.uint32), [1])\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/lax/lax.py\", line 397, in convert_element_type\r\n    operand, new_dtype=new_dtype, old_dtype=old_dtype)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/core.py\", line 276, in bind\r\n    return self.impl(*args, **kwargs)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/interpreters/xla.py\", line 224, in apply_primitive\r\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args), **params)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/interpreters/xla.py\", line 236, in xla_primitive_callable\r\n    backend = xb.get_device_backend(device)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/lib/xla_bridge.py\", line 176, in get_device_backend\r\n    return get_backend(platform)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/lib/xla_bridge.py\", line 170, in get_backend\r\n    return backend(platform)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jax/lib/xla_bridge.py\", line 148, in _get_tpu_driver_backend\r\n    _tpu_backend = tpu_client.TpuBackend.create(worker=backend_target)\r\n  File \"/home/sj2660089/.local/lib/python3.7/site-packages/jaxlib/tpu_client.py\", line 59, in create\r\n    return _tpu_client.TpuClient.Get(worker)\r\nRuntimeError: Unimplemented: Failed to connect to remote server at address: grpc://10.240.1.2:8470. Error from gRPC: . Details:\r\n```\r\n\r\nAny idea why this happens?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4015", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4015/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4015/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4015/events", "html_url": "https://github.com/google/jax/issues/4015", "id": 676510275, "node_id": "MDU6SXNzdWU2NzY1MTAyNzU=", "number": 4015, "title": "host_callback doesn't work inside grad(odeint)", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-08-11T01:19:30Z", "updated_at": "2020-08-13T10:06:05Z", "closed_at": "2020-08-13T10:02:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It reports \"NotImplementedError: outfeed rewrite custom_vjp_call_jaxpr\"\r\n\r\nThis would be quite useful to support because it would give us a way to get information about nature of the backward pass out of odeint, e.g., to facilitate debugging https://github.com/google/jax/issues/3993.\r\n\r\nTo reproduce:\r\n```python\r\nfrom jax.experimental.ode import odeint\r\nfrom jax.experimental import host_callback\r\nimport jax.numpy as jnp\r\nimport jax\r\n\r\ndef f(x, t, k):\r\n  x = host_callback.id_print(x)\r\n  return -k * x\r\n\r\ndef loss(k=1.0):\r\n  t = jnp.linspace(0, 0.001, num=2)\r\n  xs = odeint(f, 1.0, t, k)\r\n  return xs[-1]\r\n\r\nloss(1.0)  # works\r\njax.grad(loss)(1.0)  # fails\r\n```\r\n\r\nThe error message is:\r\n```\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-1-aea888293dfa> in <module>()\r\n     14 \r\n     15 loss(1.0)  # works\r\n---> 16 jax.grad(loss)(1.0)  # fails\r\n\r\n19 frames\r\n/usr/local/lib/python3.6/dist-packages/jax/api.py in grad_f(*args, **kwargs)\r\n    427   @wraps(fun, docstr=docstr, argnums=argnums)\r\n    428   def grad_f(*args, **kwargs):\r\n--> 429     _, g = value_and_grad_f(*args, **kwargs)\r\n    430     return g\r\n    431 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/api.py in value_and_grad_f(*args, **kwargs)\r\n    491     dtype = dtypes.result_type(ans)\r\n    492     tree_map(partial(_check_output_dtype_grad, holomorphic), ans)\r\n--> 493     g = vjp_py(np.ones((), dtype=dtype))\r\n    494     g = g[0] if isinstance(argnums, int) else g\r\n    495     if not has_aux:\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/api.py in _vjp_pullback_wrapper(cotangent_dtypes, io_tree, fun, py_args)\r\n   1458              \"match type of corresponding primal output ({})\")\r\n   1459       raise TypeError(msg.format(_dtype(a), dtype))\r\n-> 1460   ans = fun(*args)\r\n   1461   return tree_unflatten(out_tree, ans)\r\n   1462 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/interpreters/ad.py in unbound_vjp(pvals, jaxpr, consts, *cts)\r\n    115     cts = tuple(map(ignore_consts, cts, pvals))\r\n    116     dummy_args = [UndefinedPrimal(v.aval) for v in jaxpr.invars]\r\n--> 117     arg_cts = backward_pass(jaxpr, consts, dummy_args, cts)\r\n    118     return map(instantiate_zeros, arg_cts)\r\n    119 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/interpreters/ad.py in backward_pass(jaxpr, consts, primals_in, cotangents_in)\r\n    201         call_jaxpr, params = core.extract_call_jaxpr(eqn.primitive, eqn.params)\r\n    202         cts_out = get_primitive_transpose(eqn.primitive)(\r\n--> 203             params, call_jaxpr, invals, cts_in, cts_in_avals)\r\n    204       else:\r\n    205         cts_out = get_primitive_transpose(eqn.primitive)(cts_in, *invals,\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/interpreters/ad.py in call_transpose(primitive, params, call_jaxpr, args, ct, _)\r\n    486     new_params = update_params(new_params, map(is_undefined_primal, args),\r\n    487                                [type(x) is not Zero for x in ct])\r\n--> 488   out_flat = primitive.bind(fun, *all_args, **new_params)\r\n    489   return tree_unflatten(out_tree(), out_flat)\r\n    490 primitive_transposes[core.call_p] = partial(call_transpose, call_p)\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/core.py in bind(self, fun, *args, **params)\r\n   1132 \r\n   1133   def bind(self, fun, *args, **params):\r\n-> 1134     return call_bind(self, fun, *args, **params)\r\n   1135 \r\n   1136   def process(self, trace, fun, tracers, params):\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/core.py in call_bind(primitive, fun, *args, **params)\r\n   1121   if top_trace is None:\r\n   1122     with new_sublevel():\r\n-> 1123       outs = primitive.impl(fun, *args, **params)\r\n   1124   else:\r\n   1125     tracers = map(top_trace.full_raise, args)\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/interpreters/xla.py in _xla_call_impl(fun, device, backend, name, donated_invars, *args)\r\n    525 def _xla_call_impl(fun: lu.WrappedFun, *args, device, backend, name, donated_invars):\r\n    526   compiled_fun = _xla_callable(fun, device, backend, name, donated_invars,\r\n--> 527                                *unsafe_map(arg_spec, args))\r\n    528   try:\r\n    529     return compiled_fun(*args)\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/linear_util.py in memoized_fun(fun, *args)\r\n    222       fun.populate_stores(stores)\r\n    223     else:\r\n--> 224       ans = call(fun, *args)\r\n    225       cache[key] = (ans, fun.stores)\r\n    226     return ans\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/interpreters/xla.py in _xla_callable(fun, device, backend, name, donated_invars, *arg_specs)\r\n    598         fun, pvals, instantiate=False, stage_out=True, bottom=True)\r\n    599   map(prefetch, it.chain(consts, jaxpr_literals(jaxpr)))\r\n--> 600   jaxpr = apply_outfeed_rewriter(jaxpr)\r\n    601 \r\n    602   nreps = jaxpr_replicas(jaxpr)\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/interpreters/xla.py in apply_outfeed_rewriter(jaxpr)\r\n    181 def apply_outfeed_rewriter(jaxpr: core.Jaxpr) -> core.Jaxpr:\r\n    182   if outfeed_rewriter is not None:\r\n--> 183     return outfeed_rewriter(jaxpr)\r\n    184   else:\r\n    185     return jaxpr\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in <lambda>(j)\r\n    752 \r\n    753 \r\n--> 754 xla.outfeed_rewriter = lambda j: _rewrite_jaxpr(j, False, False)\r\n    755 \r\n    756 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_jaxpr(jaxpr, has_input_token, has_output_token)\r\n    553     else:\r\n    554       output_token_var = mk_new_var(core.abstract_token)\r\n--> 555       _rewrite_eqn(eqn, eqns, last_token_var, output_token_var, mk_new_var)\r\n    556       last_token_var = output_token_var\r\n    557 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_eqn(eqn, eqns, input_token_var, output_token_var, mk_new_var)\r\n    617         input_token_var\r\n    618     ] + eqn.invars[nr_const_and_carry:]\r\n--> 619     new_jaxpr = _rewrite_typed_jaxpr(carry_jaxpr, True, True)\r\n    620     # The rewrite has put the token at end, it has to be at end of carry\r\n    621     new_jaxpr_invars = new_jaxpr.jaxpr.invars\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_typed_jaxpr(tjaxpr, has_input_token, has_output_token)\r\n    524     has_output_token: bool) -> core.TypedJaxpr:\r\n    525   \"\"\"Rewrites a TypedJaxpr to thread the token, if needed.\"\"\"\r\n--> 526   new_jaxpr = _rewrite_jaxpr(tjaxpr.jaxpr, has_input_token, has_output_token)\r\n    527   return _mk_typed_jaxpr(new_jaxpr, tjaxpr.literals)\r\n    528 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_jaxpr(jaxpr, has_input_token, has_output_token)\r\n    553     else:\r\n    554       output_token_var = mk_new_var(core.abstract_token)\r\n--> 555       _rewrite_eqn(eqn, eqns, last_token_var, output_token_var, mk_new_var)\r\n    556       last_token_var = output_token_var\r\n    557 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_eqn(eqn, eqns, input_token_var, output_token_var, mk_new_var)\r\n    654                 eqn.params,\r\n    655                 call_jaxpr=_rewrite_jaxpr(call_jaxpr, True,\r\n--> 656                                           True)), eqn.source_info))\r\n    657   else:\r\n    658     raise NotImplementedError(f\"outfeed rewrite {eqn.primitive}\")\r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_jaxpr(jaxpr, has_input_token, has_output_token)\r\n    553     else:\r\n    554       output_token_var = mk_new_var(core.abstract_token)\r\n--> 555       _rewrite_eqn(eqn, eqns, last_token_var, output_token_var, mk_new_var)\r\n    556       last_token_var = output_token_var\r\n    557 \r\n\r\n/usr/local/lib/python3.6/dist-packages/jax/experimental/host_callback.py in _rewrite_eqn(eqn, eqns, input_token_var, output_token_var, mk_new_var)\r\n    656                                           True)), eqn.source_info))\r\n    657   else:\r\n--> 658     raise NotImplementedError(f\"outfeed rewrite {eqn.primitive}\")\r\n    659 \r\n    660 \r\n\r\nNotImplementedError: outfeed rewrite custom_vjp_call_jaxpr\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/4001", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/4001/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/4001/comments", "events_url": "https://api.github.com/repos/google/jax/issues/4001/events", "html_url": "https://github.com/google/jax/issues/4001", "id": 675694189, "node_id": "MDU6SXNzdWU2NzU2OTQxODk=", "number": 4001, "title": "clarify \"custom jaxpr interpreters\" notebook uses internal APIs that may break", "user": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1209040225, "node_id": "MDU6TGFiZWwxMjA5MDQwMjI1", "url": "https://api.github.com/repos/google/jax/labels/documentation", "name": "documentation", "color": "4ee00b", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-08-09T12:47:04Z", "updated_at": "2020-08-11T03:48:04Z", "closed_at": "2020-08-11T03:48:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3999", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3999/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3999/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3999/events", "html_url": "https://github.com/google/jax/issues/3999", "id": 675602286, "node_id": "MDU6SXNzdWU2NzU2MDIyODY=", "number": 3999, "title": "LayerError: Exception passing through layer Parallel (in pure_fn)", "user": {"login": "kotsonis", "id": 61590063, "node_id": "MDQ6VXNlcjYxNTkwMDYz", "avatar_url": "https://avatars2.githubusercontent.com/u/61590063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kotsonis", "html_url": "https://github.com/kotsonis", "followers_url": "https://api.github.com/users/kotsonis/followers", "following_url": "https://api.github.com/users/kotsonis/following{/other_user}", "gists_url": "https://api.github.com/users/kotsonis/gists{/gist_id}", "starred_url": "https://api.github.com/users/kotsonis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kotsonis/subscriptions", "organizations_url": "https://api.github.com/users/kotsonis/orgs", "repos_url": "https://api.github.com/users/kotsonis/repos", "events_url": "https://api.github.com/users/kotsonis/events{/privacy}", "received_events_url": "https://api.github.com/users/kotsonis/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-08T23:10:27Z", "updated_at": "2020-08-10T08:47:44Z", "closed_at": "2020-08-09T04:23:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "LayerError                                Traceback (most recent call last)\r\n<ipython-input-44-1258661bbd72> in <module>\r\n      1 # this takes around 1 minute\r\n      2 # print(next(data_generator(Q1_test,Q2_test,512,pad=vocab['<PAD>'],shuffle=False)))\r\n----> 3 accuracy = classify(Q1_test,Q2_test, y_test, 0.7, model, vocab, batch_size = 512)\r\n      4 print(\"Accuracy\", accuracy)\r\n\r\n<ipython-input-43-a19c8a85869c> in classify(test_Q1, test_Q2, y, threshold, model, vocab, data_generator, batch_size)\r\n     27 #        print(f'shape of y_test = {y_test.shape}\\n')\r\n     28         # Call the model\r\n---> 29         v1, v2 = model((q1,q2))\r\n     30 \r\n     31         for j in range(batch_size):\r\n\r\n~/anaconda3/lib/python3.8/site-packages/trax/layers/base.py in __call__(self, x, weights, state, rng)\r\n    171       self.state = state  # Needed if the model wasn't fully initialized.\r\n    172     state = self.state\r\n--> 173     outputs, new_state = self.pure_fn(x, weights, state, rng)\r\n    174     self.state = new_state\r\n    175     self.weights = weights\r\n\r\n~/anaconda3/lib/python3.8/site-packages/trax/layers/base.py in pure_fn(self, x, weights, state, rng, use_cache)\r\n    520       # Skipping 3 lines as it's always the uninteresting internal call.\r\n    521       name, trace = self._name, _short_traceback(skip=3)\r\n--> 522       raise LayerError(name, 'pure_fn',\r\n    523                        self._caller, signature(x), trace) from None\r\n    524 \r\n\r\nLayerError: Exception passing through layer Parallel (in pure_fn):\r\n  layer created in file [...]/<ipython-input-22-3a8394ef6dd3>, line 27\r\n  layer input shapes: (ShapeDtype{shape:(512, 64), dtype:int64}, ShapeDtype{shape:(512, 64), dtype:int64})\r\n\r\n  File [...]/trax/layers/combinators.py, line 209, in forward\r\n    sub_outputs, sub_state = layer.pure_fn(x, w, s, r, use_cache=True)\r\n\r\nLayerError: Exception passing through layer Serial (in pure_fn):\r\n  layer created in file [...]/<ipython-input-22-3a8394ef6dd3>, line 17\r\n  layer input shapes: ShapeDtype{shape:(512, 64), dtype:int64}\r\n\r\n  File [...]/trax/layers/combinators.py, line 88, in forward\r\n    outputs, s = layer.pure_fn(inputs, w, s, rng, use_cache=True)\r\n\r\nLayerError: Exception passing through layer Embedding_41699_128 (in pure_fn):\r\n  layer created in file [...]/<ipython-input-22-3a8394ef6dd3>, line 18\r\n  layer input shapes: ShapeDtype{shape:(512, 64), dtype:int64}\r\n\r\n  File [...]/trax/layers/core.py, line 150, in forward\r\n    return jnp.take(self.weights, x, axis=0)\r\n\r\n  File [...]/jax/numpy/lax_numpy.py, line 3422, in take\r\n    return lax.gather(a, indices[..., None], dimension_numbers=dnums,\r\n\r\n  File [...]/jax/lax/lax.py, line 807, in gather\r\n    return gather_p.bind(\r\n\r\n  File [...]/site-packages/jax/core.py, line 276, in bind\r\n    return self.impl(*args, **kwargs)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 224, in apply_primitive\r\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args), **params)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 257, in xla_primitive_callable\r\n    built_c = primitive_computation(prim, AxisEnv(nreps, (), (), None), backend,\r\n\r\n  File [...]/jax/interpreters/xla.py, line 316, in primitive_computation\r\n    raise RuntimeError(msg) from e\r\n\r\nRuntimeError: Invalid argument: Slice size at index 0 in gather op is out of range, must be within [0, 1), got 1.: \r\nThis is a bug in JAX's shape-checking rules; please report it!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3997", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3997/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3997/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3997/events", "html_url": "https://github.com/google/jax/issues/3997", "id": 675436627, "node_id": "MDU6SXNzdWU2NzU0MzY2Mjc=", "number": 3997, "title": "jax.random.multivariate_normal produces incorrect output with batches of covariance matrices", "user": {"login": "slinderman", "id": 5632040, "node_id": "MDQ6VXNlcjU2MzIwNDA=", "avatar_url": "https://avatars0.githubusercontent.com/u/5632040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slinderman", "html_url": "https://github.com/slinderman", "followers_url": "https://api.github.com/users/slinderman/followers", "following_url": "https://api.github.com/users/slinderman/following{/other_user}", "gists_url": "https://api.github.com/users/slinderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/slinderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slinderman/subscriptions", "organizations_url": "https://api.github.com/users/slinderman/orgs", "repos_url": "https://api.github.com/users/slinderman/repos", "events_url": "https://api.github.com/users/slinderman/events{/privacy}", "received_events_url": "https://api.github.com/users/slinderman/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-08-08T05:44:14Z", "updated_at": "2020-08-09T18:33:05Z", "closed_at": "2020-08-09T18:33:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The tensordot on [this line](https://github.com/google/jax/blob/fb02cc80f747bce8e01c4c80ca80f066945a8d3c/jax/random.py#L674) does not perform the intended broadcast matrix-vector multiply. I think you need this (or equivalent),\r\n```\r\nreturn mean + np.einsum('...ij,...j->...i', chol_factor, normal_samples)\r\n```\r\nHere's an example:\r\n```\r\nimport jax.numpy as np\r\nimport jax.random\r\n\r\nmean = np.zeros((10, 4))\r\ncov = np.eye(4)[None,...].repeat(10, axis=0)\r\nrng = jax.random.PRNGKey(0)\r\nsample = jax.random.multivariate_normal(rng, mean, cov)\r\nprint(sample.shape) # is (10, 10, 4); should be (10, 4).\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3995", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3995/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3995/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3995/events", "html_url": "https://github.com/google/jax/issues/3995", "id": 675390334, "node_id": "MDU6SXNzdWU2NzUzOTAzMzQ=", "number": 3995, "title": "Error in matrix operation", "user": {"login": "Keshav15", "id": 46819436, "node_id": "MDQ6VXNlcjQ2ODE5NDM2", "avatar_url": "https://avatars1.githubusercontent.com/u/46819436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keshav15", "html_url": "https://github.com/Keshav15", "followers_url": "https://api.github.com/users/Keshav15/followers", "following_url": "https://api.github.com/users/Keshav15/following{/other_user}", "gists_url": "https://api.github.com/users/Keshav15/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keshav15/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keshav15/subscriptions", "organizations_url": "https://api.github.com/users/Keshav15/orgs", "repos_url": "https://api.github.com/users/Keshav15/repos", "events_url": "https://api.github.com/users/Keshav15/events{/privacy}", "received_events_url": "https://api.github.com/users/Keshav15/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-08T01:23:21Z", "updated_at": "2020-08-09T18:34:13Z", "closed_at": "2020-08-09T18:34:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "code:\r\n```python3\r\n\r\n\r\ndef gumbel_sample(log_probs, temperature=1.0):\r\n    \"\"\"Gumbel sampling from a categorical distribution.\"\"\"\r\n    u = numpy.random.uniform(low=1e-6, high=1.0 - 1e-6, size=log_probs.shape)\r\n    g = -np.log(-np.log(u))\r\n    return np.argmax(log_probs + g * temperature, axis=-1)\r\n\r\ndef predict(num_chars, prefix):\r\n    inp = [ord(c) for c in prefix]\r\n    result = [c for c in prefix]\r\n    max_len = len(prefix) + num_chars\r\n    for _ in range(num_chars):\r\n        cur_inp = np.array(inp + [0] * (max_len - len(inp)))\r\n        outp = model(cur_inp[None, :])  # Add batch dim.\r\n        next_char = gumbel_sample(outp[0, len(inp)])\r\n        inp += [int(next_char)]\r\n       \r\n        if inp[-1] == 1:\r\n            break  # EOS\r\n        result.append(chr(int(next_char)))\r\n    \r\n    return \"\".join(result)\r\n\r\nprint(predict(32, \"\"))\r\n```\r\nError:\r\n```python3\r\nLayerError                                Traceback (most recent call last)\r\n<ipython-input-27-6f9f9afc30e6> in <module>\r\n     22     return \"\".join(result)\r\n     23 \r\n---> 24 print(predict(32, \"\"))\r\n\r\n<ipython-input-27-6f9f9afc30e6> in predict(num_chars, prefix)\r\n     12     for _ in range(num_chars):\r\n     13         cur_inp = np.array(inp + [0] * (max_len - len(inp)))\r\n---> 14         outp = model(cur_inp[None, :])  # Add batch dim.\r\n     15         next_char = gumbel_sample(outp[0, len(inp)])\r\n     16         inp += [int(next_char)]\r\n\r\n/opt/conda/lib/python3.7/site-packages/trax/layers/base.py in __call__(self, x, weights, state, rng)\r\n    165       self.state = state  # Needed if the model wasn't fully initialized.\r\n    166     state = self.state\r\n--> 167     outputs, new_state = self.pure_fn(x, weights, state, rng)\r\n    168     self.state = new_state\r\n    169     self.weights = weights\r\n\r\n/opt/conda/lib/python3.7/site-packages/trax/layers/base.py in pure_fn(self, x, weights, state, rng, use_cache)\r\n    448       name, trace = self._name, _short_traceback(skip=3)\r\n    449       raise LayerError(name, 'pure_fn',\r\n--> 450                        self._caller, signature(x), trace) from None\r\n    451 \r\n    452   def output_signature(self, input_signature):\r\n\r\nLayerError: Exception passing through layer Serial (in pure_fn):\r\n  layer created in file [...]/<ipython-input-13-6f7ffe0c061e>, line 21\r\n  layer input shapes: ShapeDtype{shape:(1, 32), dtype:int32}\r\n\r\n  File [...]/trax/layers/combinators.py, line 88, in forward\r\n    outputs, s = layer.pure_fn(inputs, w, s, rng, use_cache=True)\r\n\r\nLayerError: Exception passing through layer Embedding_256_512 (in pure_fn):\r\n  layer created in file [...]/<ipython-input-13-6f7ffe0c061e>, line 18\r\n  layer input shapes: ShapeDtype{shape:(1, 32), dtype:int32}\r\n\r\n  File [...]/trax/layers/core.py, line 150, in forward\r\n    return jnp.take(self.weights, x, axis=0)\r\n\r\n  File [...]/jax/numpy/lax_numpy.py, line 3298, in take\r\n    slice_sizes=tuple(slice_sizes))\r\n\r\n  File [...]/jax/lax/lax.py, line 835, in gather\r\n    slice_sizes=canonicalize_shape(slice_sizes))\r\n\r\n  File [...]/site-packages/jax/core.py, line 273, in bind\r\n    return self.impl(*args, **kwargs)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 228, in apply_primitive\r\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args), **params)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 262, in xla_primitive_callable\r\n    *avals, **params)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 320, in primitive_computation\r\n    raise RuntimeError(msg) from e\r\n\r\nRuntimeError: Invalid argument: Slice size at index 0 in gather op is out of range, must be within [0, 1), got 1.: \r\nThis is a bug in JAX's shape-checking rules; please report it!\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3994", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3994/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3994/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3994/events", "html_url": "https://github.com/google/jax/issues/3994", "id": 675380727, "node_id": "MDU6SXNzdWU2NzUzODA3Mjc=", "number": 3994, "title": "Suggestion: expose `_jit_is_disabled` utility", "user": {"login": "KristianHolsheimer", "id": 8200332, "node_id": "MDQ6VXNlcjgyMDAzMzI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8200332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KristianHolsheimer", "html_url": "https://github.com/KristianHolsheimer", "followers_url": "https://api.github.com/users/KristianHolsheimer/followers", "following_url": "https://api.github.com/users/KristianHolsheimer/following{/other_user}", "gists_url": "https://api.github.com/users/KristianHolsheimer/gists{/gist_id}", "starred_url": "https://api.github.com/users/KristianHolsheimer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KristianHolsheimer/subscriptions", "organizations_url": "https://api.github.com/users/KristianHolsheimer/orgs", "repos_url": "https://api.github.com/users/KristianHolsheimer/repos", "events_url": "https://api.github.com/users/KristianHolsheimer/events{/privacy}", "received_events_url": "https://api.github.com/users/KristianHolsheimer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782286, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg2", "url": "https://api.github.com/repos/google/jax/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-08T00:42:47Z", "updated_at": "2020-08-21T04:53:57Z", "closed_at": "2020-08-21T03:18:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nThis is just a small comment / suggestion. I just found the [`_jit_is_disabled()`](https://github.com/google/jax/blob/master/jax/api.py#L226) utility and I'm finding it very useful to do some asserts that aren't possible in jit context. \r\n\r\nThe general structure:\r\n\r\n```python\r\n@jax.jit\r\ndef func(arr):\r\n    if jax.api._jit_is_disabled():\r\n        assert arr.min() > 0, \"data-dependent check failed\"\r\n    # implement the rest of the function\r\n    ...\r\n\r\n```\r\n\r\nAre you planning on making `_jit_is_disabled` a first-class citizen in the jax api, e.g. ``jax.jit_is_disabled()``?\r\n\r\nCheers!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3992", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3992/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3992/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3992/events", "html_url": "https://github.com/google/jax/issues/3992", "id": 675174955, "node_id": "MDU6SXNzdWU2NzUxNzQ5NTU=", "number": 3992, "title": "Question about install GPU version JAX", "user": {"login": "ruoxia-c", "id": 56998567, "node_id": "MDQ6VXNlcjU2OTk4NTY3", "avatar_url": "https://avatars1.githubusercontent.com/u/56998567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruoxia-c", "html_url": "https://github.com/ruoxia-c", "followers_url": "https://api.github.com/users/ruoxia-c/followers", "following_url": "https://api.github.com/users/ruoxia-c/following{/other_user}", "gists_url": "https://api.github.com/users/ruoxia-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruoxia-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruoxia-c/subscriptions", "organizations_url": "https://api.github.com/users/ruoxia-c/orgs", "repos_url": "https://api.github.com/users/ruoxia-c/repos", "events_url": "https://api.github.com/users/ruoxia-c/events{/privacy}", "received_events_url": "https://api.github.com/users/ruoxia-c/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-07T17:51:19Z", "updated_at": "2020-08-10T17:39:47Z", "closed_at": "2020-08-10T17:39:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to install GPU version JAX inside a Ubuntu virtual machine contains cuda. However, when I trying to build from source and run `python build/build.py --enable_cuda`, I got this error: \r\n\r\n```\r\n# There is insufficient memory for the Java Runtime Environment to continue.\r\n# Native memory allocation (malloc) failed to allocate 56 bytes for AllocateHeap\r\n# An error report file with more information is saved as:\r\n# /home/ruoxia/try/jax/hs_err_pid17816.log\r\nTraceback (most recent call last):\r\n  File \"build/build.py\", line 382, in <module>\r\n    main()\r\n  File \"build/build.py\", line 335, in main\r\n    check_bazel_version(bazel_path, min_version=\"2.0.0\", max_version=None)\r\n  File \"build/build.py\", line 157, in check_bazel_version\r\n    version_output = shell([bazel_path, \"--bazelrc=/dev/null\", \"version\"])\r\n  File \"build/build.py\", line 47, in shell\r\n    output = subprocess.check_output(cmd)\r\n  File \"/opt/miniconda3/lib/python3.7/subprocess.py\", line 411, in check_output\r\n    **kwargs).stdout\r\n  File \"/opt/miniconda3/lib/python3.7/subprocess.py\", line 512, in run\r\n    output=stdout, stderr=stderr)\r\nsubprocess.CalledProcessError: Command '['./bazel-2.0.0-linux-x86_64', '--bazelrc=/dev/null', 'version']' returned non-zero exit status 37.\r\n```\r\n\r\nThen I tried to use pip to directly install Cuda version JAX. But when I trying to test the JAX package using `python tests/lax_numpy_test.py --num_generated_cases=5`, I got error messages as below: \r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/ruoxia/.local/lib/python3.7/site-packages/absl/testing/parameterized.py\", line 263, in bound_param_test\r\n    test_method(self, **testcase_params)\r\n  File \"tests/lax_numpy_test.py\", line 1184, in testPiecewise\r\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, check_dtypes=True)\r\n  File \"/home/ruoxia/.local/lib/python3.7/site-packages/jax/test_util.py\", line 878, in _CheckAgainstNumpy\r\n    lax_ans = lax_op(*args)\r\n  File \"/home/ruoxia/.local/lib/python3.7/site-packages/jax/numpy/lax_numpy.py\", line 4367, in wrapped\r\n    raise NotImplementedError(msg.format(fun))\r\nNotImplementedError: Numpy function <function piecewise at 0x2ad4da5b9cb0> not yet implemented\r\n\r\n----------------------------------------------------------------------\r\nRan 1367 tests in 73.511s\r\n\r\nFAILED (errors=15, skipped=9)\r\n```\r\nI'm not sure if how to solve this problem, any suggestion will be very great. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3989", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3989/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3989/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3989/events", "html_url": "https://github.com/google/jax/issues/3989", "id": 675101427, "node_id": "MDU6SXNzdWU2NzUxMDE0Mjc=", "number": 3989, "title": "Jax jitted function doesn't raise \"Out of bound error\" and returns incorrect output", "user": {"login": "fischcheng", "id": 7747527, "node_id": "MDQ6VXNlcjc3NDc1Mjc=", "avatar_url": "https://avatars0.githubusercontent.com/u/7747527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fischcheng", "html_url": "https://github.com/fischcheng", "followers_url": "https://api.github.com/users/fischcheng/followers", "following_url": "https://api.github.com/users/fischcheng/following{/other_user}", "gists_url": "https://api.github.com/users/fischcheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/fischcheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fischcheng/subscriptions", "organizations_url": "https://api.github.com/users/fischcheng/orgs", "repos_url": "https://api.github.com/users/fischcheng/repos", "events_url": "https://api.github.com/users/fischcheng/events{/privacy}", "received_events_url": "https://api.github.com/users/fischcheng/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-07T15:46:57Z", "updated_at": "2020-08-10T15:54:32Z", "closed_at": "2020-08-10T15:54:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I tried benchmarking the code using `scipy.ndimage.map_coordinates` vs `jax.scipy.ndimage.map_coordinates`, I found an \"out of bound\" error that's not raised when using jax. \r\n\r\nI found a similar issue https://github.com/google/jax/issues/1451, but here is a much simpler code snippet to reproduce. Switching off the `@jit`, the code fails, and switching `np` to `jax.numpy` the code will run through. \r\n\r\n\r\n```python\r\ndata = np.ones((100,100))\r\nu = np.random.randn(50, 30)\r\n\r\n@jit\r\ndef test_should_fail(data, u):\r\n    # Wrap the actual field advection step\r\n    nx, ny = data.shape\r\n    ii, jj = np.mgrid[:nx, :ny]\r\n    coords_x = ii - u[ii, jj]\r\n    return coords_x\r\n\r\ntest_should_fail(data, u)\r\n```\r\n\r\nThe code should fail because `u[ii, jj]` is out of bound since its shape is much smaller than `data`. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3985", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3985/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3985/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3985/events", "html_url": "https://github.com/google/jax/issues/3985", "id": 674745123, "node_id": "MDU6SXNzdWU2NzQ3NDUxMjM=", "number": 3985, "title": "JAX arrays should implement nbytes", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-07T04:19:05Z", "updated_at": "2020-08-07T17:31:48Z", "closed_at": "2020-08-07T17:31:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "`nbytes` is a convenient shortcut for calculating the size of a NumPy arrays. The implement is simply `array.size * array.dtype.itemsize`.\r\n\r\nBut currently, we see:\r\n```\r\n>>> import jax.numpy as jnp\r\n>>> jnp.zeros((1000, 1000)).nbytes\r\nAttributeError: 'DeviceArray' object has no attribute 'nbytes'\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3984", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3984/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3984/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3984/events", "html_url": "https://github.com/google/jax/issues/3984", "id": 674688104, "node_id": "MDU6SXNzdWU2NzQ2ODgxMDQ=", "number": 3984, "title": "automatic detection for GPU pip install doesn't quite work on ubuntu 20.04", "user": {"login": "kratsg", "id": 761483, "node_id": "MDQ6VXNlcjc2MTQ4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/761483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kratsg", "html_url": "https://github.com/kratsg", "followers_url": "https://api.github.com/users/kratsg/followers", "following_url": "https://api.github.com/users/kratsg/following{/other_user}", "gists_url": "https://api.github.com/users/kratsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kratsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kratsg/subscriptions", "organizations_url": "https://api.github.com/users/kratsg/orgs", "repos_url": "https://api.github.com/users/kratsg/repos", "events_url": "https://api.github.com/users/kratsg/events{/privacy}", "received_events_url": "https://api.github.com/users/kratsg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-08-07T01:09:39Z", "updated_at": "2020-08-13T19:10:48Z", "closed_at": "2020-08-13T19:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "As stated on the README,\r\n\r\n> Please let us know on the issue tracker if you run into any errors or problems with the prebuilt wheels.\r\n\r\nI tried to pip install via\r\n\r\n```\r\npip install --upgrade https://storage.googleapis.com/jax-releases/`nvidia-smi | sed -En \"s/.* CUDA Version: ([0-9]*)\\.([0-9]*).*/cuda\\1\\2/p\"`/jaxlib-0.1.52-`python3 -V | sed -En \"s/Python ([0-9]*)\\.([0-9]*).*/cp\\1\\2/p\"`-none-manylinux2010_x86_64.whl jax\r\n```\r\n\r\nbut I've noted that `nvidia-smi` and `nvidia-cuda-toolkit` are using (slightly) different versions which seems to be \"ok\" as one is a runtime driver and the other is a gpu driver (probably?).\r\n\r\nThis generally causes jax to complain about looking for 10.2 when it can't find it (because it grabs the version number from nvidia-smi instead of from nvcc for the automated install). See below:\r\n\r\n- `nvcc --version` has the version from the `nvidia-cuda-toolkit` (10.1.243)\r\n- `nvidia-smi` has the version from the GPU driver `sudo ubuntu-drivers autoinstall` (10.2)\r\n\r\n```\r\n$ sudo apt show  nvidia-cuda-toolkit\r\nPackage: nvidia-cuda-toolkit\r\nVersion: 10.1.243-3\r\nPriority: extra\r\nSection: multiverse/devel\r\nOrigin: Ubuntu\r\n```\r\n\r\n```\r\n$ nvidia-smi\r\nThu Aug  6 18:06:16 2020       \r\n+-----------------------------------------------------------------------------+\r\n| NVIDIA-SMI 440.100      Driver Version: 440.100      CUDA Version: 10.2     |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|===============================+======================+======================|\r\n|   0  GeForce RTX 208...  Off  | 00000000:26:00.0 Off |                  N/A |\r\n| 41%   29C    P8     1W / 260W |     74MiB / 11016MiB |      0%      Default |\r\n+-------------------------------+----------------------+----------------------+\r\n                                                                               \r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                       GPU Memory |\r\n|  GPU       PID   Type   Process name                             Usage      |\r\n|=============================================================================|\r\n|    0      1296      G   /usr/lib/xorg/Xorg                            56MiB |\r\n|    0      1467      G   /usr/bin/gnome-shell                          16MiB |\r\n+-----------------------------------------------------------------------------+\r\n```\r\n\r\n```\r\n$ nvcc --version\r\nnvcc: NVIDIA (R) Cuda compiler driver\r\nCopyright (c) 2005-2019 NVIDIA Corporation\r\nBuilt on Sun_Jul_28_19:07:16_PDT_2019\r\nCuda compilation tools, release 10.1, V10.1.243\r\n```\r\n\r\n```\r\n$ ubuntu-drivers devices\r\n== /sys/devices/pci0000:00/0000:00:03.1/0000:26:00.0 ==\r\nmodalias : pci:v000010DEd00001E07sv000010DEsd000012A4bc03sc00i00\r\nvendor   : NVIDIA Corporation\r\nmodel    : TU102 [GeForce RTX 2080 Ti Rev. A]\r\ndriver   : nvidia-driver-418-server - distro non-free\r\ndriver   : nvidia-driver-440-server - distro non-free\r\ndriver   : nvidia-driver-435 - distro non-free\r\ndriver   : nvidia-driver-440 - distro non-free recommended\r\ndriver   : xserver-xorg-video-nouveau - distro free builtin\r\n```\r\n\r\n```\r\n$ ls -lavh /usr/lib/x86_64-linux-gnu/libcuda*\r\nlrwxrwxrwx 1 root root   12 May 29 03:14 /usr/lib/x86_64-linux-gnu/libcuda.so -> libcuda.so.1\r\n-rw-r--r-- 1 root root 703K Aug  9  2019 /usr/lib/x86_64-linux-gnu/libcudadevrt.a\r\nlrwxrwxrwx 1 root root   17 Apr 11 05:56 /usr/lib/x86_64-linux-gnu/libcudart.so -> libcudart.so.10.1\r\nlrwxrwxrwx 1 root root   21 Apr 11 05:56 /usr/lib/x86_64-linux-gnu/libcudart.so.10.1 -> libcudart.so.10.1.243\r\n-rw-r--r-- 1 root root 493K Aug  9  2019 /usr/lib/x86_64-linux-gnu/libcudart.so.10.1.243\r\n-rw-r--r-- 1 root root 868K Aug  9  2019 /usr/lib/x86_64-linux-gnu/libcudart_static.a\r\nlrwxrwxrwx 1 root root   18 May 29 03:14 /usr/lib/x86_64-linux-gnu/libcuda.so.1 -> libcuda.so.440.100\r\n-rw-r--r-- 1 root root  17M May 29 01:32 /usr/lib/x86_64-linux-gnu/libcuda.so.440.100\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3982", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3982/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3982/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3982/events", "html_url": "https://github.com/google/jax/issues/3982", "id": 674565780, "node_id": "MDU6SXNzdWU2NzQ1NjU3ODA=", "number": 3982, "title": "Jaxlib 0.1.52 binary crashes on Mac OS 10.13.16", "user": {"login": "C-J-Cundy", "id": 12766304, "node_id": "MDQ6VXNlcjEyNzY2MzA0", "avatar_url": "https://avatars3.githubusercontent.com/u/12766304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/C-J-Cundy", "html_url": "https://github.com/C-J-Cundy", "followers_url": "https://api.github.com/users/C-J-Cundy/followers", "following_url": "https://api.github.com/users/C-J-Cundy/following{/other_user}", "gists_url": "https://api.github.com/users/C-J-Cundy/gists{/gist_id}", "starred_url": "https://api.github.com/users/C-J-Cundy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/C-J-Cundy/subscriptions", "organizations_url": "https://api.github.com/users/C-J-Cundy/orgs", "repos_url": "https://api.github.com/users/C-J-Cundy/repos", "events_url": "https://api.github.com/users/C-J-Cundy/events{/privacy}", "received_events_url": "https://api.github.com/users/C-J-Cundy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-06T19:59:09Z", "updated_at": "2020-08-06T20:00:32Z", "closed_at": "2020-08-06T20:00:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running `import jax` with jaxlib 0.1.52 and jax 0.1.75 on mac osx 13.16 crashes and gives this error:\r\n```\r\npython\r\nPython 3.8.2 | packaged by conda-forge | (default, Mar 23 2020, 17:55:48)\r\n[Clang 9.0.1 ] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import jax\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jax/__init__.py\", line 22, in <module>\r\n    from .api import (\r\n  File \"/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jax/api.py\", line 38, in <module>\r\n    from . import core\r\n  File \"/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jax/core.py\", line 31, in <module>\r\n    from . import dtypes\r\n  File \"/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jax/dtypes.py\", line 31, in <module>\r\n    from .lib import xla_client\r\n  File \"/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jax/lib/__init__.py\", line 52, in <module>\r\n    from jaxlib import xla_client\r\n  File \"/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jaxlib/xla_client.py\", line 39, in <module>\r\n    from . import xla_extension as _xla\r\nImportError: dlopen(/Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jaxlib/xla_extension.so, 2): Symbol not found: ____chkstk_darwin\r\n  Referenced from: /Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jaxlib/xla_extension.so (which was built for Mac OS X 10.15)\r\n  Expected in: /usr/lib/libSystem.B.dylib\r\n in /Users/Chris/miniconda3/envs/python3/lib/python3.8/site-packages/jaxlib/xla_extension.so\r\n>>>\r\n```\r\nJax 0.1.75 and jaxlib 0.1.51 together work fine, so this bug seems like it's been introduced in jaxlib 0.1.51. \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3973", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3973/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3973/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3973/events", "html_url": "https://github.com/google/jax/issues/3973", "id": 674030343, "node_id": "MDU6SXNzdWU2NzQwMzAzNDM=", "number": 3973, "title": "`lax.reduce_window` with window dilation can produce negative shapes", "user": {"login": "romanngg", "id": 44512421, "node_id": "MDQ6VXNlcjQ0NTEyNDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/44512421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romanngg", "html_url": "https://github.com/romanngg", "followers_url": "https://api.github.com/users/romanngg/followers", "following_url": "https://api.github.com/users/romanngg/following{/other_user}", "gists_url": "https://api.github.com/users/romanngg/gists{/gist_id}", "starred_url": "https://api.github.com/users/romanngg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romanngg/subscriptions", "organizations_url": "https://api.github.com/users/romanngg/orgs", "repos_url": "https://api.github.com/users/romanngg/repos", "events_url": "https://api.github.com/users/romanngg/events{/privacy}", "received_events_url": "https://api.github.com/users/romanngg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "SIben", "id": 3920784, "node_id": "MDQ6VXNlcjM5MjA3ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3920784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SIben", "html_url": "https://github.com/SIben", "followers_url": "https://api.github.com/users/SIben/followers", "following_url": "https://api.github.com/users/SIben/following{/other_user}", "gists_url": "https://api.github.com/users/SIben/gists{/gist_id}", "starred_url": "https://api.github.com/users/SIben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SIben/subscriptions", "organizations_url": "https://api.github.com/users/SIben/orgs", "repos_url": "https://api.github.com/users/SIben/repos", "events_url": "https://api.github.com/users/SIben/events{/privacy}", "received_events_url": "https://api.github.com/users/SIben/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "SIben", "id": 3920784, "node_id": "MDQ6VXNlcjM5MjA3ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3920784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SIben", "html_url": "https://github.com/SIben", "followers_url": "https://api.github.com/users/SIben/followers", "following_url": "https://api.github.com/users/SIben/following{/other_user}", "gists_url": "https://api.github.com/users/SIben/gists{/gist_id}", "starred_url": "https://api.github.com/users/SIben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SIben/subscriptions", "organizations_url": "https://api.github.com/users/SIben/orgs", "repos_url": "https://api.github.com/users/SIben/repos", "events_url": "https://api.github.com/users/SIben/events{/privacy}", "received_events_url": "https://api.github.com/users/SIben/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-08-06T05:33:51Z", "updated_at": "2020-08-20T18:45:16Z", "closed_at": "2020-08-20T18:45:16Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```\r\nx = lax.reduce_window(\r\n    np.ones((1,)),\r\n    0.,\r\n    lax.add,\r\n    window_dimensions=(3,),\r\n    window_strides=(1,),\r\n    padding='SAME',\r\n    window_dilation=(3,)\r\n)\r\n\r\nx, x.shape\r\n```\r\n```\r\n(DeviceArray([], dtype=float32), (-3,))\r\n```\r\nwhile I would expect\r\n```\r\n(DeviceArray([1.], dtype=float32), (1,))\r\n```\r\n\r\n\r\nAlso\r\n```\r\nx = lax.reduce_window(\r\n    np.ones((1,)),\r\n    0.,\r\n    lax.add,\r\n    window_dimensions=(3,),\r\n    window_strides=(1,),\r\n    padding='VALID',\r\n    window_dilation=(3,)\r\n)\r\n\r\nx, x.shape\r\n```\r\n```\r\n(DeviceArray([], dtype=float32), (-5,))\r\n```\r\nwhile I would expect\r\n```\r\n(DeviceArray([], dtype=float32), (0,))\r\n```\r\nalthough not super sure here", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3954", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3954/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3954/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3954/events", "html_url": "https://github.com/google/jax/issues/3954", "id": 672702427, "node_id": "MDU6SXNzdWU2NzI3MDI0Mjc=", "number": 3954, "title": "Wrong jnp.transpose behaviour for wrong axis length", "user": {"login": "GeorgOstrovski", "id": 6409187, "node_id": "MDQ6VXNlcjY0MDkxODc=", "avatar_url": "https://avatars0.githubusercontent.com/u/6409187?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeorgOstrovski", "html_url": "https://github.com/GeorgOstrovski", "followers_url": "https://api.github.com/users/GeorgOstrovski/followers", "following_url": "https://api.github.com/users/GeorgOstrovski/following{/other_user}", "gists_url": "https://api.github.com/users/GeorgOstrovski/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeorgOstrovski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeorgOstrovski/subscriptions", "organizations_url": "https://api.github.com/users/GeorgOstrovski/orgs", "repos_url": "https://api.github.com/users/GeorgOstrovski/repos", "events_url": "https://api.github.com/users/GeorgOstrovski/events{/privacy}", "received_events_url": "https://api.github.com/users/GeorgOstrovski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-04T10:58:42Z", "updated_at": "2020-08-04T13:30:41Z", "closed_at": "2020-08-04T13:30:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Like the numpy counterpart, `jnp.transpose` correctly throws an error when the axis length is different from the input's number of dimensions and the input is a **numpy** array: \r\n```python\r\njnp.transpose(np.zeros((2,3,4)), (1, 0))\r\n>  TypeError: transpose permutation isn't a permutation of operand dimensions, got permutation (1, 0) for operand shape (2, 3, 4).\r\n```\r\nIt however fails to do so when the input is a **`jax.numpy`** array: \r\n```python\r\njnp.transpose(jnp.zeros((2,3,4)), (1, 0))\r\n> DeviceArray([[0., 0.], [0., 0.], [0., 0.]], dtype=float32)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3952", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3952/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3952/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3952/events", "html_url": "https://github.com/google/jax/issues/3952", "id": 672650389, "node_id": "MDU6SXNzdWU2NzI2NTAzODk=", "number": 3952, "title": "jnp.right_shift incorrect on unsigned ints", "user": {"login": "JuliusKunze", "id": 1497342, "node_id": "MDQ6VXNlcjE0OTczNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1497342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JuliusKunze", "html_url": "https://github.com/JuliusKunze", "followers_url": "https://api.github.com/users/JuliusKunze/followers", "following_url": "https://api.github.com/users/JuliusKunze/following{/other_user}", "gists_url": "https://api.github.com/users/JuliusKunze/gists{/gist_id}", "starred_url": "https://api.github.com/users/JuliusKunze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JuliusKunze/subscriptions", "organizations_url": "https://api.github.com/users/JuliusKunze/orgs", "repos_url": "https://api.github.com/users/JuliusKunze/repos", "events_url": "https://api.github.com/users/JuliusKunze/events{/privacy}", "received_events_url": "https://api.github.com/users/JuliusKunze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-04T09:32:24Z", "updated_at": "2020-08-06T01:36:47Z", "closed_at": "2020-08-06T01:36:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It looks like ~~`lax.shift_right_arithmetic`~~ `jnp.right_shift` incorrectly treats unsigned ints as signed:\r\n\r\n```python\r\nimport numpy as np\r\nfrom jax import lax, numpy as jnp\r\nargs = np.uint8(0b10000000), np.uint8(2)\r\nprint(f\"{np.right_shift(*args):#010b} (expected)\")\r\nprint(f\"{jnp.right_shift(*args):#010b}\")\r\nprint(f\"{lax.shift_right_arithmetic(*args):#010b}\")\r\n```\r\n\r\nresults in\r\n\r\n```\r\n0b00100000 (expected)\r\n0b11100000\r\n0b11100000\r\n```\r\n\r\nOther unsigned int types produce the same issue. Tests for `lax.shift_right_arithmetic` were missing, they will be added with https://github.com/google/jax/pull/3923.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3951", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3951/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3951/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3951/events", "html_url": "https://github.com/google/jax/issues/3951", "id": 672472134, "node_id": "MDU6SXNzdWU2NzI0NzIxMzQ=", "number": 3951, "title": "cudaGetErrorString symbol not found", "user": {"login": "BoyuanJackChen", "id": 43197439, "node_id": "MDQ6VXNlcjQzMTk3NDM5", "avatar_url": "https://avatars2.githubusercontent.com/u/43197439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoyuanJackChen", "html_url": "https://github.com/BoyuanJackChen", "followers_url": "https://api.github.com/users/BoyuanJackChen/followers", "following_url": "https://api.github.com/users/BoyuanJackChen/following{/other_user}", "gists_url": "https://api.github.com/users/BoyuanJackChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoyuanJackChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoyuanJackChen/subscriptions", "organizations_url": "https://api.github.com/users/BoyuanJackChen/orgs", "repos_url": "https://api.github.com/users/BoyuanJackChen/repos", "events_url": "https://api.github.com/users/BoyuanJackChen/events{/privacy}", "received_events_url": "https://api.github.com/users/BoyuanJackChen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-08-04T03:12:49Z", "updated_at": "2020-08-04T22:18:30Z", "closed_at": "2020-08-04T22:18:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just trying to create an rng with \r\n```\r\nrng, key = jax.random.split(rng)\r\n```\r\n\r\nThe error is unprecedented. I recently killed all python procedures in nvidia-smi, and reinstalled jaxlib with GPU. I have confirmed that \r\n```\r\nfrom jax.lib import xla_bridge\r\nprint(xla_bridge.get_backend().platform)\r\n```\r\nDoes return \"gpu\". Nonetheless it doesn't work here. Is there a way to fix? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3942", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3942/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3942/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3942/events", "html_url": "https://github.com/google/jax/issues/3942", "id": 672146021, "node_id": "MDU6SXNzdWU2NzIxNDYwMjE=", "number": 3942, "title": "[jax2tf] - TypeError when attempting to perform operations on a bfloat16 typed array. ", "user": {"login": "russbates", "id": 68746142, "node_id": "MDQ6VXNlcjY4NzQ2MTQy", "avatar_url": "https://avatars1.githubusercontent.com/u/68746142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/russbates", "html_url": "https://github.com/russbates", "followers_url": "https://api.github.com/users/russbates/followers", "following_url": "https://api.github.com/users/russbates/following{/other_user}", "gists_url": "https://api.github.com/users/russbates/gists{/gist_id}", "starred_url": "https://api.github.com/users/russbates/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/russbates/subscriptions", "organizations_url": "https://api.github.com/users/russbates/orgs", "repos_url": "https://api.github.com/users/russbates/repos", "events_url": "https://api.github.com/users/russbates/events{/privacy}", "received_events_url": "https://api.github.com/users/russbates/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}, {"login": "SIben", "id": 3920784, "node_id": "MDQ6VXNlcjM5MjA3ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3920784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SIben", "html_url": "https://github.com/SIben", "followers_url": "https://api.github.com/users/SIben/followers", "following_url": "https://api.github.com/users/SIben/following{/other_user}", "gists_url": "https://api.github.com/users/SIben/gists{/gist_id}", "starred_url": "https://api.github.com/users/SIben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SIben/subscriptions", "organizations_url": "https://api.github.com/users/SIben/orgs", "repos_url": "https://api.github.com/users/SIben/repos", "events_url": "https://api.github.com/users/SIben/events{/privacy}", "received_events_url": "https://api.github.com/users/SIben/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-08-03T15:10:41Z", "updated_at": "2020-08-13T10:27:17Z", "closed_at": "2020-08-13T10:27:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\ndef jax_fn(x):\r\n  y = x.astype(jnp.bfloat16)\r\n  y *= 2.0\r\n  return y\r\ntf_fn = jax2tf.convert(jax_fn)\r\ntf_fn(tf.convert_to_tensor(1.0)) # TypeError: Cannot convert value dtype(bfloat16) to a TensorFlow DType.\r\n```\r\n\r\nRepro should hopefully be fairly self-explanatory: I get a TypeError when attempting to use bf16 typed jnp.arrays in jax2tf. The same function works fine if you remove the `y *= 2.0` line and just return the bf16 casted `y`. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3939", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3939/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3939/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3939/events", "html_url": "https://github.com/google/jax/issues/3939", "id": 671691187, "node_id": "MDU6SXNzdWU2NzE2OTExODc=", "number": 3939, "title": "Error at preds = model(batch[0])", "user": {"login": "JonathanSum", "id": 21982975, "node_id": "MDQ6VXNlcjIxOTgyOTc1", "avatar_url": "https://avatars3.githubusercontent.com/u/21982975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonathanSum", "html_url": "https://github.com/JonathanSum", "followers_url": "https://api.github.com/users/JonathanSum/followers", "following_url": "https://api.github.com/users/JonathanSum/following{/other_user}", "gists_url": "https://api.github.com/users/JonathanSum/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonathanSum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonathanSum/subscriptions", "organizations_url": "https://api.github.com/users/JonathanSum/orgs", "repos_url": "https://api.github.com/users/JonathanSum/repos", "events_url": "https://api.github.com/users/JonathanSum/events{/privacy}", "received_events_url": "https://api.github.com/users/JonathanSum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-08-02T21:15:30Z", "updated_at": "2020-08-02T21:24:08Z", "closed_at": "2020-08-02T21:24:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I passed the first three courses from Coursera, and I want to use the course 3 week 2 to do some text generation based on a piece of text.\r\nBut it throws this error when I do \r\n\r\npreds = model(batch[0])\r\n\r\n\r\nShould I share my code?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nLayerError                                Traceback (most recent call last)\r\n<ipython-input-36-0017651d223b> in <module>()\r\n      5 \r\n      6 batch = next(data_generator(batch_size, max_length, lines, shuffle=False))\r\n----> 7 preds = model(batch[0])\r\n      8 log_ppx = test_model(preds, batch[1])\r\n      9 print('The log perplexity and perplexity of your model are respectively', log_ppx, np.exp(log_ppx))\r\n\r\n1 frames\r\n/usr/local/lib/python3.6/dist-packages/trax/layers/base.py in pure_fn(self, x, weights, state, rng, use_cache)\r\n    448       name, trace = self._name, _short_traceback(skip=3)\r\n    449       raise LayerError(name, 'pure_fn',\r\n--> 450                        self._caller, signature(x), trace) from None\r\n    451 \r\n    452   def output_signature(self, input_signature):\r\n\r\nLayerError: Exception passing through layer Serial (in pure_fn):\r\n  layer created in file [...]/<ipython-input-22-89cf9a3e457b>, line 22\r\n  layer input shapes: ShapeDtype{shape:(32, 64), dtype:int32}\r\n\r\n  File [...]/trax/layers/combinators.py, line 88, in forward\r\n    outputs, s = layer.pure_fn(inputs, w, s, rng, use_cache=True)\r\n\r\nLayerError: Exception passing through layer Embedding_256_512 (in pure_fn):\r\n  layer created in file [...]/<ipython-input-22-89cf9a3e457b>, line 18\r\n  layer input shapes: ShapeDtype{shape:(32, 64), dtype:int32}\r\n\r\n  File [...]/trax/layers/core.py, line 150, in forward\r\n    return jnp.take(self.weights, x, axis=0)\r\n\r\n  File [...]/jax/numpy/lax_numpy.py, line 3395, in take\r\n    slice_sizes=tuple(slice_sizes))\r\n\r\n  File [...]/jax/lax/lax.py, line 809, in gather\r\n    slice_sizes=canonicalize_shape(slice_sizes))\r\n\r\n  File [...]/dist-packages/jax/core.py, line 273, in bind\r\n    return self.impl(*args, **kwargs)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 224, in apply_primitive\r\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args), **params)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 258, in xla_primitive_callable\r\n    *avals, **params)\r\n\r\n  File [...]/jax/interpreters/xla.py, line 316, in primitive_computation\r\n    raise RuntimeError(msg) from e\r\n\r\nRuntimeError: Invalid argument: Slice size at index 0 in gather op is out of range, must be within [0, 1), got 1.: \r\nThis is a bug in JAX's shape-checking rules; please report it!\r\n\r\nhttps://github.com/google/jax/issues", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3937", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3937/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3937/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3937/events", "html_url": "https://github.com/google/jax/issues/3937", "id": 671585831, "node_id": "MDU6SXNzdWU2NzE1ODU4MzE=", "number": 3937, "title": "How to save the params of a jax.experimental.optimizers? ", "user": {"login": "BoyuanJackChen", "id": 43197439, "node_id": "MDQ6VXNlcjQzMTk3NDM5", "avatar_url": "https://avatars2.githubusercontent.com/u/43197439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoyuanJackChen", "html_url": "https://github.com/BoyuanJackChen", "followers_url": "https://api.github.com/users/BoyuanJackChen/followers", "following_url": "https://api.github.com/users/BoyuanJackChen/following{/other_user}", "gists_url": "https://api.github.com/users/BoyuanJackChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoyuanJackChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoyuanJackChen/subscriptions", "organizations_url": "https://api.github.com/users/BoyuanJackChen/orgs", "repos_url": "https://api.github.com/users/BoyuanJackChen/repos", "events_url": "https://api.github.com/users/BoyuanJackChen/events{/privacy}", "received_events_url": "https://api.github.com/users/BoyuanJackChen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-08-02T09:44:32Z", "updated_at": "2020-08-04T00:23:15Z", "closed_at": "2020-08-04T00:23:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I built a model and created an adam optimizer from jax.experimental. I wonder how should I save the params so I can keep the training progress for the next time. Thanks for your time in advance! \r\n```\r\nfrom jax.experimental import optimizers, stax\r\nfrom jax.experimental.stax import Dense, FanInConcat, FanOut, Identity, Relu\r\nfrom jax.nn import relu, sigmoid\r\n\r\ndef build_model(D: int = 8, W: int = 256) -> Any:\r\n    dense_block = lambda block_brep=1, W=W: [Dense(W), Relu] * 1    # * block_rep\r\n    sub_net = stax.serial(*dense_block(5))\r\n    model = stax.serial(\r\n        FanOut(2),\r\n        stax.parallel(sub_net, Identity),\r\n        FanInConcat(-1),\r\n        *dense_block(3),\r\n        Dense(4))\r\n    return model\r\n\r\nkey = random.PRNGKey(0)\r\ninit_fn, model = build_model()\r\n_, model_params = init_fn(key, input_shape=(3 + 3 * 2 * L_embed,))\r\nopt_init, opt_update, get_params = optimizers.adam(step_size=5e-4, b1=0.9, b2=0.999, eps=1e-08)\r\nopt_state = opt_init(maml_params)\r\n```\r\nMy attempt was dumping the opt_state variable with picke: \r\n```\r\nwith open(\"opt_state.txt\", \"wb\") as fp:\r\n    pickle.dump(opt_state, fp)\r\n```\r\nBut it says \"TypeError: can't pickle jaxlib.pytree.PyTreeDef objects\". So I guess there should be some jax-intrinsic ways to save the values of its types. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3931", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3931/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3931/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3931/events", "html_url": "https://github.com/google/jax/issues/3931", "id": 670297073, "node_id": "MDU6SXNzdWU2NzAyOTcwNzM=", "number": 3931, "title": "triangular_solve transposition is flipped", "user": {"login": "Joshuaalbert", "id": 14807032, "node_id": "MDQ6VXNlcjE0ODA3MDMy", "avatar_url": "https://avatars2.githubusercontent.com/u/14807032?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Joshuaalbert", "html_url": "https://github.com/Joshuaalbert", "followers_url": "https://api.github.com/users/Joshuaalbert/followers", "following_url": "https://api.github.com/users/Joshuaalbert/following{/other_user}", "gists_url": "https://api.github.com/users/Joshuaalbert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Joshuaalbert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Joshuaalbert/subscriptions", "organizations_url": "https://api.github.com/users/Joshuaalbert/orgs", "repos_url": "https://api.github.com/users/Joshuaalbert/repos", "events_url": "https://api.github.com/users/Joshuaalbert/events{/privacy}", "received_events_url": "https://api.github.com/users/Joshuaalbert/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-31T22:30:09Z", "updated_at": "2020-08-01T16:02:57Z", "closed_at": "2020-08-01T15:43:26Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`triangular_solve` is solving `L^T.x=b` when it says it's solving `L.x=b` and vice versa.\r\n\r\n``` python\r\ndef test_triangular_solve():\r\n    from jax.lax_linalg import triangular_solve\r\n    from scipy.linalg import solve_triangular\r\n    import jax.numpy as jnp\r\n    ndims = 2\r\n    A = jnp.diag(jnp.ones(ndims))\r\n    A = jnp.where(A == 0., 0.95, A)\r\n    b = jnp.ones(ndims)\r\n    L = jnp.linalg.cholesky(A)\r\n    assert jnp.all(L @ L.T == A)\r\n\r\n    x = jnp.linalg.solve(L, b)\r\n    print(\"Solving L.x  = b with scipy\")\r\n    print(\"x should be {}\".format(x))\r\n    scipy_x = solve_triangular(L, b, lower=True)\r\n    assert jnp.all(scipy_x == x)\r\n    print(\"Works as expected!\")\r\n\r\n    print(\"Now note JAX's solution to L^T.x = b corresponds to scipy's L.x = b\")\r\n    jax_x = triangular_solve(L, b, lower=True, transpose_a=True)\r\n    assert jnp.all(jax_x==scipy_x)\r\n    print(\"Likewise, JAX's solution to L.x = b corresponds to scipy's L^T.x = b\")\r\n    assert jnp.all(triangular_solve(L, b, lower=True) == solve_triangular(L, b, lower=True, trans=1))\r\n    \r\n    print(\"Note, I have not tested for the L^H.x=b case.\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3927", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3927/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3927/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3927/events", "html_url": "https://github.com/google/jax/issues/3927", "id": 670018927, "node_id": "MDU6SXNzdWU2NzAwMTg5Mjc=", "number": 3927, "title": "[FR] jnp.interp & jnp.piecewise", "user": {"login": "cgarciae", "id": 5862228, "node_id": "MDQ6VXNlcjU4NjIyMjg=", "avatar_url": "https://avatars1.githubusercontent.com/u/5862228?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgarciae", "html_url": "https://github.com/cgarciae", "followers_url": "https://api.github.com/users/cgarciae/followers", "following_url": "https://api.github.com/users/cgarciae/following{/other_user}", "gists_url": "https://api.github.com/users/cgarciae/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgarciae/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgarciae/subscriptions", "organizations_url": "https://api.github.com/users/cgarciae/orgs", "repos_url": "https://api.github.com/users/cgarciae/repos", "events_url": "https://api.github.com/users/cgarciae/events{/privacy}", "received_events_url": "https://api.github.com/users/cgarciae/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782286, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg2", "url": "https://api.github.com/repos/google/jax/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-07-31T17:02:37Z", "updated_at": "2020-08-04T19:39:05Z", "closed_at": "2020-08-04T19:39:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, I am trying to create a learning reate schedule and it would be super helpful to have `interp` or `piecewise` for this task. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3919", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3919/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3919/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3919/events", "html_url": "https://github.com/google/jax/issues/3919", "id": 669367643, "node_id": "MDU6SXNzdWU2NjkzNjc2NDM=", "number": 3919, "title": "jax.numpy.tile inconsistent with np.tile (when 0 in repeats)", "user": {"login": "kratsg", "id": 761483, "node_id": "MDQ6VXNlcjc2MTQ4Mw==", "avatar_url": "https://avatars0.githubusercontent.com/u/761483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kratsg", "html_url": "https://github.com/kratsg", "followers_url": "https://api.github.com/users/kratsg/followers", "following_url": "https://api.github.com/users/kratsg/following{/other_user}", "gists_url": "https://api.github.com/users/kratsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/kratsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kratsg/subscriptions", "organizations_url": "https://api.github.com/users/kratsg/orgs", "repos_url": "https://api.github.com/users/kratsg/repos", "events_url": "https://api.github.com/users/kratsg/events{/privacy}", "received_events_url": "https://api.github.com/users/kratsg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-31T03:15:09Z", "updated_at": "2020-07-31T06:11:30Z", "closed_at": "2020-07-31T06:03:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "```python\r\n>>> import numpy as np\r\n>>> import jax.numpy as jnp\r\n>>> np.tile(np.array([0, 1, 2]), (1, 1, 2))\r\narray([[[0, 1, 2, 0, 1, 2]]])\r\n>>> jnp.tile(jnp.array([0, 1, 2]), (1, 2, 2))\r\nDeviceArray([[[0, 1, 2, 0, 1, 2]]], dtype=int64)\r\n>>> np.tile(np.array([0, 1, 2]), (1, 0, 2))\r\narray([], shape(1, 0, 6), dtype=int64)\r\n>>> jnp.tile(jnp.array([0, 1, 2]), (1, 0, 2)\r\n...\r\nValueError: Need at least one array to concatenate\r\n```\r\n\r\nA fix locally is to wrap the `jax.numpy.tile` like so:\r\n\r\n```python\r\n        if 0 in repeats:\r\n            return jnp.array([]).reshape(np.array(tensor_in.shape) * np.array(repeats))\r\n        return jnp.tile(tensor_in, repeats)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3886", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3886/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3886/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3886/events", "html_url": "https://github.com/google/jax/issues/3886", "id": 667095079, "node_id": "MDU6SXNzdWU2NjcwOTUwNzk=", "number": 3886, "title": "lax.population_count does not support boolean dtype", "user": {"login": "SIben", "id": 3920784, "node_id": "MDQ6VXNlcjM5MjA3ODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3920784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SIben", "html_url": "https://github.com/SIben", "followers_url": "https://api.github.com/users/SIben/followers", "following_url": "https://api.github.com/users/SIben/following{/other_user}", "gists_url": "https://api.github.com/users/SIben/gists{/gist_id}", "starred_url": "https://api.github.com/users/SIben/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SIben/subscriptions", "organizations_url": "https://api.github.com/users/SIben/orgs", "repos_url": "https://api.github.com/users/SIben/repos", "events_url": "https://api.github.com/users/SIben/events{/privacy}", "received_events_url": "https://api.github.com/users/SIben/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-28T13:56:59Z", "updated_at": "2020-07-29T02:46:01Z", "closed_at": "2020-07-29T02:46:01Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Even though the use case is limited (`population_count(x) == x` if `x`'s dtype is `jax.numpy.bool_`), `lax.population_count_p` is defined as `population_count_p = standard_unop(_bool_or_int, 'population_count')`. However, this is what happens if `lax.population_count` is called with an argument with dtype `jax.numpy.bool_`:\r\n\r\n```python\r\n>>> lax.population_count(np.array([True, False], dtype=np.bool_))\r\nTraceback (most recent call last):\r\n  File \"/jax/jax/interpreters/xla.py\", line 311, in primitive_computation\r\n    return c.build()\r\nRuntimeError: Invalid argument: Expected an integral element type in argument to PopulationCount operation; got PRED.: \r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/jax/jax/lax/lax.py\", line 296, in population_count\r\n    return population_count_p.bind(x)\r\n  File \"/jax/jax/core.py\", line 275, in bind\r\n    return self.impl(*args, **kwargs)\r\n  File \"/jax/jax/interpreters/xla.py\", line 224, in apply_primitive\r\n    compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args), **params)\r\n  File \"/jax/jax/interpreters/xla.py\", line 257, in xla_primitive_callable\r\n    built_c = primitive_computation(prim, AxisEnv(nreps), backend, tuple_args,\r\n  File \"/jax/jax/interpreters/xla.py\", line 316, in primitive_computation\r\n    raise RuntimeError(msg) from e\r\nRuntimeError: Invalid argument: Expected an integral element type in argument to PopulationCount operation; got PRED.: \r\nThis is a bug in JAX's shape-checking rules; please report it!\r\nhttps://github.com/google/jax/issues\r\n```\r\n\r\nI think the simplest (and probably best) way to fix this is to remove booleans from the list of allowed types.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3883", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3883/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3883/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3883/events", "html_url": "https://github.com/google/jax/issues/3883", "id": 666939896, "node_id": "MDU6SXNzdWU2NjY5Mzk4OTY=", "number": 3883, "title": "vmap of dynamic_slice of a scalar fails", "user": {"login": "j-towns", "id": 15261883, "node_id": "MDQ6VXNlcjE1MjYxODgz", "avatar_url": "https://avatars2.githubusercontent.com/u/15261883?v=4", "gravatar_id": "", "url": "https://api.github.com/users/j-towns", "html_url": "https://github.com/j-towns", "followers_url": "https://api.github.com/users/j-towns/followers", "following_url": "https://api.github.com/users/j-towns/following{/other_user}", "gists_url": "https://api.github.com/users/j-towns/gists{/gist_id}", "starred_url": "https://api.github.com/users/j-towns/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/j-towns/subscriptions", "organizations_url": "https://api.github.com/users/j-towns/orgs", "repos_url": "https://api.github.com/users/j-towns/repos", "events_url": "https://api.github.com/users/j-towns/events{/privacy}", "received_events_url": "https://api.github.com/users/j-towns/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-28T09:54:33Z", "updated_at": "2020-07-29T01:39:34Z", "closed_at": "2020-07-29T01:39:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Specifically, doing\r\n```python\r\nIn [1]: import jax.numpy as np\r\n\r\nIn [2]: from jax import lax\r\n\r\nIn [3]: import jax\r\n\r\nIn [4]: jax.vmap(lambda x: lax.dynamic_slice(x, [], []))(np.array([1, 2, 3, 4]))\r\n```\r\ngives the following error\r\n```text\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-ae0083eeb242> in <module>\r\n----> 1 jax.vmap(lambda x: lax.dynamic_slice(x, [], []))(np.array([1, 2, 3, 4]))\r\n\r\n~/dev/jax/jax/api.py in batched_fun(*args)\r\n    878     _ = _mapped_axis_size(in_tree, args_flat, in_axes_flat, \"vmap\")\r\n    879     out_flat = batching.batch(flat_fun, args_flat, in_axes_flat,\r\n--> 880                               lambda: flatten_axes(\"vmap out_axes\", out_tree(),\r\n    881                                                    out_axes))\r\n    882     return tree_unflatten(out_tree(), out_flat)\r\n\r\n~/dev/jax/jax/interpreters/batching.py in batch(fun, in_vals, in_dims, out_dim_dests)\r\n     32   # executes a batched version of `fun` following out_dim_dests\r\n     33   batched_fun = batch_fun(fun, in_dims, out_dim_dests)\r\n---> 34   return batched_fun.call_wrapped(*in_vals)\r\n     35\r\n     36 @lu.transformation_with_aux\r\n\r\n~/dev/jax/jax/linear_util.py in call_wrapped(self, *args, **kwargs)\r\n    148     gen = None\r\n    149\r\n--> 150     ans = self.f(*args, **dict(self.params, **kwargs))\r\n    151     del args\r\n    152     while stack:\r\n\r\n<ipython-input-4-ae0083eeb242> in <lambda>(x)\r\n----> 1 jax.vmap(lambda x: lax.dynamic_slice(x, [], []))(np.array([1, 2, 3, 4]))\r\n\r\n~/dev/jax/jax/lax/lax.py in dynamic_slice(operand, start_indices, slice_sizes)\r\n    734   start_indices = _dynamic_slice_indices(operand, start_indices)\r\n    735   return dynamic_slice_p.bind(operand, *start_indices,\r\n--> 736                               slice_sizes=tuple(slice_sizes))\r\n    737\r\n    738 def dynamic_update_slice(operand: Array, update: Array,\r\n\r\n~/dev/jax/jax/core.py in bind(self, *args, **kwargs)\r\n    276\r\n    277     tracers = map(top_trace.full_raise, args)\r\n--> 278     out_tracer = top_trace.process_primitive(self, tracers, kwargs)\r\n    279     if self.multiple_results:\r\n    280       return map(full_lower, out_tracer)\r\n\r\n~/dev/jax/jax/interpreters/batching.py in process_primitive(self, primitive, tracers, params)\r\n    132       # TODO(mattjj,phawkins): if no rule implemented, could vmap-via-map here\r\n    133       batched_primitive = get_primitive_batcher(primitive)\r\n--> 134       val_out, dim_out = batched_primitive(vals_in, dims_in, **params)\r\n    135       if primitive.multiple_results:\r\n    136         return map(partial(BatchTracer, self), val_out, dim_out)\r\n\r\n~/dev/jax/jax/lax/lax.py in _dynamic_slice_batching_rule(batched_args, batch_dims, slice_sizes)\r\n   3696   dnums = GatherDimensionNumbers(offset_dims=dims, collapsed_slice_dims=(),\r\n   3697                                  start_index_map=dims)\r\n-> 3698   index, index_bdim = _batch_dynamic_slice_indices(start_indices, start_idx_bds)\r\n   3699   return _gather_batching_rule(\r\n   3700     [operand, index], [operand_bd, index_bdim], dimension_numbers=dnums,\r\n\r\n~/dev/jax/jax/lax/lax.py in _batch_dynamic_slice_indices(indices, bdims)\r\n   3676   size = next((x.shape[i] for x, i in zip(indices, bdims) if i is not None), -1)\r\n   3677   if size < 0:\r\n-> 3678     return concatenate([broadcast(i, (1,)) for i in indices], 0), None\r\n   3679   indices = concatenate(\r\n   3680     [broadcast_in_dim(x, (size, 1),\r\n\r\n~/dev/jax/jax/lax/lax.py in concatenate(operands, dimension)\r\n    446     An array containing the concatenation.\r\n    447   \"\"\"\r\n--> 448   return concatenate_p.bind(*operands, dimension=dimension)\r\n    449\r\n    450 Precision = xla_client.PrecisionConfig.Precision\r\n\r\n~/dev/jax/jax/core.py in bind(self, *args, **kwargs)\r\n    273     top_trace = find_top_trace(args)\r\n    274     if top_trace is None:\r\n--> 275       return self.impl(*args, **kwargs)\r\n    276\r\n    277     tracers = map(top_trace.full_raise, args)\r\n\r\n~/dev/jax/jax/interpreters/xla.py in apply_primitive(prim, *args, **params)\r\n    222 def apply_primitive(prim, *args, **params):\r\n    223   \"\"\"Impl rule that compiles and runs a single primitive 'prim' using XLA.\"\"\"\r\n--> 224   compiled_fun = xla_primitive_callable(prim, *unsafe_map(arg_spec, args), **params)\r\n    225   return compiled_fun(*args)\r\n    226\r\n\r\n~/dev/jax/jax/interpreters/xla.py in xla_primitive_callable(prim, *arg_specs, **params)\r\n    238     return _xla_callable(lu.wrap_init(prim_fun), device, None, \"prim\", donated_invars,\r\n    239                          *arg_specs)\r\n--> 240   aval_out = prim.abstract_eval(*avals, **params)\r\n    241   if not prim.multiple_results:\r\n    242     handle_result = aval_to_result_handler(device, aval_out)\r\n\r\n~/dev/jax/jax/lax/lax.py in standard_abstract_eval(prim, shape_rule, dtype_rule, *args, **kwargs)\r\n   1845   assert all(isinstance(arg, UnshapedArray) for arg in args), args\r\n   1846   least_specialized = _max(\r\n-> 1847       map(type, args), key=operator.attrgetter('array_abstraction_level'))\r\n   1848   if least_specialized is ConcreteArray:\r\n   1849     return ConcreteArray(prim.impl(*[x.val for x in args], **kwargs))\r\n\r\nValueError: max() arg is an empty sequence\r\n```\r\nI'm just writing a test for this now and will have a go at fixing it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3880", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3880/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3880/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3880/events", "html_url": "https://github.com/google/jax/issues/3880", "id": 666819413, "node_id": "MDU6SXNzdWU2NjY4MTk0MTM=", "number": 3880, "title": "Gradient(s) and Hessian(s) of functions with higher order tensors as input", "user": {"login": "bhaveshshrimali", "id": 22624037, "node_id": "MDQ6VXNlcjIyNjI0MDM3", "avatar_url": "https://avatars3.githubusercontent.com/u/22624037?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhaveshshrimali", "html_url": "https://github.com/bhaveshshrimali", "followers_url": "https://api.github.com/users/bhaveshshrimali/followers", "following_url": "https://api.github.com/users/bhaveshshrimali/following{/other_user}", "gists_url": "https://api.github.com/users/bhaveshshrimali/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhaveshshrimali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhaveshshrimali/subscriptions", "organizations_url": "https://api.github.com/users/bhaveshshrimali/orgs", "repos_url": "https://api.github.com/users/bhaveshshrimali/repos", "events_url": "https://api.github.com/users/bhaveshshrimali/events{/privacy}", "received_events_url": "https://api.github.com/users/bhaveshshrimali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-07-28T06:59:06Z", "updated_at": "2020-08-05T07:31:01Z", "closed_at": "2020-08-05T05:37:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi Jax community, \r\n\r\nI recently came across `jax` and wanted to explore AD of functions that take as input higher order (>1) tensors. Note that I refer to a vector as an order-1 tensor.  Let's start with a scalar function\r\n\r\n```python3\r\n\r\nfrom jax import jit, grad\r\nfrom jax.numpy import vectorize, sqrt, zeros\r\n\r\n# function to minimize\r\ndef psi(gw0, gw1, gw2):\r\n    return sqrt(1 + gw0** 2 + gw1** 2 + gw2**2)\r\n\r\n# gradient\r\ndef dpsi(gw0, gw1, gw2):\r\n    out = zeros((3,) + gw0.shape)\r\n    for i in range(3):\r\n        out[i] = vectorize(grad(psi, i))(gw0, gw1, gw2)\r\n    return out\r\n\r\n# hessian\r\ndef ddpsi(gw0, gw1, gw2):\r\n    out = np.zeros((3, 3) + gw0.shape)\r\n    for i in range(3):\r\n        for j in range(3):\r\n            out[i, j] = vectorize(grad(grad(psi, i), j))(gw0, gw1, gw2)\r\n    return out\r\n\r\n```\r\n\r\nI can now very well pass a vector as input to `dpsi` and `ddpsi` and get the gradient and hessian as output. \r\n\r\nNow, what if instead my function `psi` took as input not a vector but a second order tensor. How would I go about calculating `dpsi` and `ddpsi` which in that case would be (`3,3`) and (`3,3,3,3`) tensors.  \r\n\r\nThe below snippet is an idealisation of what I want to achieve. \r\n\r\n```python3\r\n\r\nfrom jax.numpy import zeros_like, einsum\r\n\r\n# gradU is a (3,3,...) tensor : \r\ndef psi(gradU):\r\n    F = zeros_like(gradU)\r\n    F[0,0] += 1.\r\n    F[1,1] += 1.\r\n    F[2,2] += 1.\r\n    \r\n    F += gradU\r\n    I1 = einsum(\"ij...,ij...\", F, F)\r\n    return I1\r\n\r\n# gradient \r\ndef dpsi(gradU):\r\n    out = zeros_like(gradU.shape)\r\n    ...\r\n\r\n# hessian\r\ndef ddpsi(gradU):\r\n    out = zeros_like((3,3,3,3) + gradU.shape[2:])\r\n    ...\r\n```\r\n\r\nI know this may be a naive question, but any pointers would be helpful. Also if this is already discussed somewhere, feel free to redirect (I'd be happy to learn :) )", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3877", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3877/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3877/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3877/events", "html_url": "https://github.com/google/jax/issues/3877", "id": 666689156, "node_id": "MDU6SXNzdWU2NjY2ODkxNTY=", "number": 3877, "title": "vmap mismatched dim exception has another exception composing the error msg", "user": {"login": "brianwa84", "id": 22173987, "node_id": "MDQ6VXNlcjIyMTczOTg3", "avatar_url": "https://avatars0.githubusercontent.com/u/22173987?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brianwa84", "html_url": "https://github.com/brianwa84", "followers_url": "https://api.github.com/users/brianwa84/followers", "following_url": "https://api.github.com/users/brianwa84/following{/other_user}", "gists_url": "https://api.github.com/users/brianwa84/gists{/gist_id}", "starred_url": "https://api.github.com/users/brianwa84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brianwa84/subscriptions", "organizations_url": "https://api.github.com/users/brianwa84/orgs", "repos_url": "https://api.github.com/users/brianwa84/repos", "events_url": "https://api.github.com/users/brianwa84/events{/privacy}", "received_events_url": "https://api.github.com/users/brianwa84/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-28T01:42:12Z", "updated_at": "2020-07-28T04:51:13Z", "closed_at": "2020-07-28T04:51:13Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nimport jax.numpy as np\r\ndef recursion(depth, seed, xt, xl):\r\n  seed, sample_seed = jax.random.split(seed)\r\n  if depth == 2:\r\n    return xl\r\n  xl = xl + tf.random.stateless_normal([], seed=sample_seed)\r\n  return recursion(depth + 1, seed, xt, xl)\r\njax.vmap(recursion, in_axes=(None, None, 0, 0))(\r\n    0, jax.random.PRNGKey(2), np.linspace(0, 1, 7), np.zeros([2]))\r\n```\r\n\r\nwant: (something like what you get with `np.array(0)` for the first arg)\r\n```\r\nValueError: vmap got inconsistent sizes for array axes to be mapped:\r\narg 0 has shape () and axis None is to be mapped\r\narg 1 has shape (2,) and axis None is to be mapped\r\narg 2 has shape (7,) and axis 0 is to be mapped\r\narg 3 has shape (2,) and axis 0 is to be mapped\r\nso\r\narg 2 has an axis to be mapped of size 7\r\narg 3 has an axis to be mapped of size 2\r\n```\r\nbut get\r\n```\r\njax/api.py in <listcomp>(.0)\r\n    908     if tree == tree_flatten((core.unit,) * tree.num_leaves)[1]:\r\n    909       lines1 = [\"arg {} has shape {} and axis {} is to be mapped\"\r\n--> 910                 .format(i, x.shape, d) for i, (x, d) in enumerate(zip(vals, dims))]\r\n    911       sizes = collections.defaultdict(list)\r\n    912       for i, (x, d) in enumerate(zip(vals, dims)):\r\n\r\nAttributeError: 'int' object has no attribute 'shape'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3866", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3866/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3866/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3866/events", "html_url": "https://github.com/google/jax/issues/3866", "id": 665818235, "node_id": "MDU6SXNzdWU2NjU4MTgyMzU=", "number": 3866, "title": "jancur121@gmail.com", "user": {"login": "sowa9599", "id": 60864909, "node_id": "MDQ6VXNlcjYwODY0OTA5", "avatar_url": "https://avatars2.githubusercontent.com/u/60864909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sowa9599", "html_url": "https://github.com/sowa9599", "followers_url": "https://api.github.com/users/sowa9599/followers", "following_url": "https://api.github.com/users/sowa9599/following{/other_user}", "gists_url": "https://api.github.com/users/sowa9599/gists{/gist_id}", "starred_url": "https://api.github.com/users/sowa9599/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sowa9599/subscriptions", "organizations_url": "https://api.github.com/users/sowa9599/orgs", "repos_url": "https://api.github.com/users/sowa9599/repos", "events_url": "https://api.github.com/users/sowa9599/events{/privacy}", "received_events_url": "https://api.github.com/users/sowa9599/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-26T16:50:15Z", "updated_at": "2020-08-08T00:52:52Z", "closed_at": "2020-07-26T17:43:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3864", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3864/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3864/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3864/events", "html_url": "https://github.com/google/jax/issues/3864", "id": 665679950, "node_id": "MDU6SXNzdWU2NjU2Nzk5NTA=", "number": 3864, "title": "AttributeError: 'ShapedArray' object has no attribute 'ndims'", "user": {"login": "bionicles", "id": 24532336, "node_id": "MDQ6VXNlcjI0NTMyMzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/24532336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bionicles", "html_url": "https://github.com/bionicles", "followers_url": "https://api.github.com/users/bionicles/followers", "following_url": "https://api.github.com/users/bionicles/following{/other_user}", "gists_url": "https://api.github.com/users/bionicles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bionicles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bionicles/subscriptions", "organizations_url": "https://api.github.com/users/bionicles/orgs", "repos_url": "https://api.github.com/users/bionicles/repos", "events_url": "https://api.github.com/users/bionicles/events{/privacy}", "received_events_url": "https://api.github.com/users/bionicles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-25T23:56:55Z", "updated_at": "2020-07-27T04:26:40Z", "closed_at": "2020-07-26T17:27:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Not a huge deal, hit an issue ( in haiku )\r\n\r\n```\r\nclass Filter(Module):\r\n    \"call a layer on a subset of inputs, then update those inputs\"\r\n\r\n    def __init__(self, genotype, name=None):\r\n        super().__init__(name=name)\r\n        self.keep_percent = choose(f\"{name}_keep_percent\", PERCENTAGES, genotype)\r\n        self.controller = Conv1D(1, 1)\r\n        self.attn = Attention(genotype, name=f\"{name}_attn\")\r\n\r\n    def __call__(self, inputs, init=False):\r\n        unbatched = inputs.ndim == 2\r\n        if unbatched:\r\n            inputs = jnp.expand_dims(inputs, 0)\r\n        outputs = vmap(self._call_one)(inputs)  # <--- this vmap\r\n        if unbatched:\r\n            outputs = jnp.squeeze(outputs, 0)\r\n        return outputs\r\n\r\n    def _call_one(self, element):\r\n        assert element.ndims == 2 # <--- AttributeError: 'ShapedArray' object has no attribute 'ndims'\r\n        width = element.shape[0]\r\n        n_keepers = round(self.keep_percent * width)\r\n        weights = self.controller(element)\r\n        _, indices = top_k(weights, n_keepers)\r\n        keepers = element[indices[1], :]\r\n        updates = self.attn(keepers)\r\n        return element.at[indices[1], :].set(updates)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3863", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3863/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3863/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3863/events", "html_url": "https://github.com/google/jax/issues/3863", "id": 665665986, "node_id": "MDU6SXNzdWU2NjU2NjU5ODY=", "number": 3863, "title": "Assertion when using id_print", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-07-25T21:47:15Z", "updated_at": "2020-08-13T16:53:52Z", "closed_at": "2020-08-13T10:02:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Sorry that I wasn't able to create a minimum working example, but here's the traceback:\r\n```\r\nTraceback (most recent call last):\r\n  File \"demos/encoding.py\", line 95, in <module>\r\n    encoding_demo()\r\n  File \"demos/encoding.py\", line 80, in encoding_demo\r\n    training_trajectory = problem.train()\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/cmm/problem/problem.py\", line 31, in train\r\n    trajectory, self.model_parameters, self.iterated_function = train_model(\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/cmm/model/inference.py\", line 76, in train_model\r\n    augmented, trajectory = method(model_meta_parameters,\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/api.py\", line 169, in f_jitted\r\n    out = xla.xla_call(flat_fun, *args_flat, device=device, backend=backend,\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/core.py\", line 1103, in call_bind\r\n    outs = primitive.impl(fun, *args, **params)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/xla.py\", line 532, in _xla_call_impl\r\n    compiled_fun = _xla_callable(fun, device, backend, name, donated_invars,\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/linear_util.py\", line 221, in memoized_fun\r\n    ans = call(fun, *args)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/xla.py\", line 641, in _xla_callable\r\n    out_nodes = jaxpr_subcomp(\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/xla.py\", line 410, in jaxpr_subcomp\r\n    ans = rule(c, axis_env, extend_name_stack(name_stack, eqn.primitive.name),\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/xla.py\", line 912, in f\r\n    jaxpr, _, consts = pe.trace_to_jaxpr(\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/partial_eval.py\", line 429, in trace_to_jaxpr\r\n    jaxpr, (out_pvals, consts, env) = fun.call_wrapped(pvals)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/linear_util.py\", line 150, in call_wrapped\r\n    ans = self.f(*args, **dict(self.params, **kwargs))\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/lax/lax_control_flow.py\", line 1319, in _scan_impl\r\n    return _scan_impl_loop(\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/lax/lax_control_flow.py\", line 1280, in _scan_impl_loop\r\n    _, *outs = while_loop(cond_fun, body_fun, init_val)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/lax/lax_control_flow.py\", line 277, in while_loop\r\n    body_jaxpr, body_consts, body_tree = _initial_style_jaxpr(body_fun, in_tree, init_avals)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/lax/lax_control_flow.py\", line 72, in _initial_style_jaxpr\r\n    jaxpr, out_pvals, consts, out_tree = _initial_style_untyped_jaxpr(\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/lax/lax_control_flow.py\", line 66, in _initial_style_untyped_jaxpr\r\n    jaxpr, out_pvals, consts = pe.trace_to_jaxpr(\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/partial_eval.py\", line 429, in trace_to_jaxpr\r\n    jaxpr, (out_pvals, consts, env) = fun.call_wrapped(pvals)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/linear_util.py\", line 150, in call_wrapped\r\n    ans = self.f(*args, **dict(self.params, **kwargs))\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/lax/lax_control_flow.py\", line 1270, in body_fun\r\n    out_flat = f_impl(*consts, *carry, *x)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/core.py\", line 142, in jaxpr_as_fun\r\n    return eval_jaxpr(typed_jaxpr.jaxpr, typed_jaxpr.literals, *args)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/core.py\", line 346, in eval_jaxpr\r\n    ans = eqn.primitive.bind(*(subfuns + in_vals), **params)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/core.py\", line 1106, in call_bind\r\n    outs = primitive.process(top_trace, fun, tracers, params)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/core.py\", line 1115, in process\r\n    return trace.process_call(self, fun, tracers, params)\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/partial_eval.py\", line 232, in process_call\r\n    new_params = update_params(new_params, [not t.pval.is_known() for t in tracers])\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/interpreters/xla.py\", line 813, in _xla_call_partial_eval_update_params\r\n    donated_invars = [d for d, uk in zip(donated_invars, in_unknowns) if uk]\r\n  File \"/home/neil/.pyenv/versions/3.8.2/lib/python3.8/site-packages/jax/util.py\", line 26, in safe_zip\r\n    assert len(arg) == n, 'length mismatch: {}'.format(list(map(len, args)))\r\nAssertionError: length mismatch: [18, 19]\r\n```\r\nIf I have time this week, I'll get a MWE.  Hope this helps in the mean time.\r\n\r\n@gnecula ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3861", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3861/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3861/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3861/events", "html_url": "https://github.com/google/jax/issues/3861", "id": 665608335, "node_id": "MDU6SXNzdWU2NjU2MDgzMzU=", "number": 3861, "title": "Hessian failing on np.clip, when clipping integers", "user": {"login": "EiffL", "id": 861591, "node_id": "MDQ6VXNlcjg2MTU5MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/861591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EiffL", "html_url": "https://github.com/EiffL", "followers_url": "https://api.github.com/users/EiffL/followers", "following_url": "https://api.github.com/users/EiffL/following{/other_user}", "gists_url": "https://api.github.com/users/EiffL/gists{/gist_id}", "starred_url": "https://api.github.com/users/EiffL/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EiffL/subscriptions", "organizations_url": "https://api.github.com/users/EiffL/orgs", "repos_url": "https://api.github.com/users/EiffL/repos", "events_url": "https://api.github.com/users/EiffL/events{/privacy}", "received_events_url": "https://api.github.com/users/EiffL/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-07-25T15:52:25Z", "updated_at": "2020-07-26T01:45:40Z", "closed_at": "2020-07-25T18:25:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm encountering a problem with `jax.hessian` of functions including np.clip of some integers. It was working fine maybe a month ago, but seems broken in version 0.1.72. Here is a small example:\r\n```python \r\nimport jax\r\nimport jax.numpy as np\r\n\r\ndef test_fn(x):\r\n    # We compute some indices that depend on x\r\n    ind = np.argmin(x.reshape((-1,1)) - x.reshape((-1,1)),axis=1)\r\n\r\n    # Ensures indices falls in some restricted range\r\n    ind = np.clip(ind, 1, len(x) - 2)\r\n\r\n    return np.sum(x[ind]**2)\r\n\r\ntest_x = np.linspace(0, 4, 5)\r\n\r\njax.hessian(test_fn)(test_x)\r\n```\r\nThis fails with:\r\n```\r\n/usr/local/lib/python3.6/dist-packages/jax/lax/lax.py in _integer_pow_dtype_rule(x, y)\r\n   2093   dtype = unop_dtype_rule(_identity, _int | _float | _complex, 'integer_pow', x)\r\n   2094   if y < 0 and dtypes.issubdtype(dtype, onp.integer):\r\n-> 2095     raise TypeError(\"Integers cannot be raised to negative powers, got \"\r\n   2096                     f\"integer_pow({x}, {y})\")\r\n   2097   return dtype\r\nTypeError: Integers cannot be raised to negative powers, got integer_pow(ShapedArray(int32[5]), -2)\r\n```\r\nI have the full error log and working example on this notebook: \r\nhttps://colab.research.google.com/drive/1JP_QDteLV0VHuzv_7DBMvpRZsHgy4JeY?usp=sharing\r\n\r\nThis is triggered as far as I can tell, by this line: \r\nhttps://github.com/google/jax/blob/5e91965723ac16dda361435d1bfcd4dc99201537/jax/lax/lax.py#L2289\r\nBut couldn't immediately work out how to fix the np.clip JVP, nor why it was working before.\r\n\r\nThe issue doesn't arise when the clipped quantities are cast to float, like so:\r\n```\r\ndef test_fn2(x):\r\n    # We compute some indices that depend on x\r\n    ind = np.argmin(x.reshape((-1,1)) - x.reshape((-1,1)),axis=1).astype('float32')\r\n\r\n    # Ensures indices falls in some restricted range\r\n    ind = np.clip(ind, 1, len(x) - 2).astype('int')\r\n\r\n    return np.sum(x[ind]**2)\r\n```\r\n\r\nI can investigate this further but thought I would raise the issue first, to see if maybe it was obvious to anyone :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3860", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3860/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3860/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3860/events", "html_url": "https://github.com/google/jax/issues/3860", "id": 665543880, "node_id": "MDU6SXNzdWU2NjU1NDM4ODA=", "number": 3860, "title": "Implementation of np.interp", "user": {"login": "AdrienCorenflos", "id": 19948263, "node_id": "MDQ6VXNlcjE5OTQ4MjYz", "avatar_url": "https://avatars1.githubusercontent.com/u/19948263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdrienCorenflos", "html_url": "https://github.com/AdrienCorenflos", "followers_url": "https://api.github.com/users/AdrienCorenflos/followers", "following_url": "https://api.github.com/users/AdrienCorenflos/following{/other_user}", "gists_url": "https://api.github.com/users/AdrienCorenflos/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdrienCorenflos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdrienCorenflos/subscriptions", "organizations_url": "https://api.github.com/users/AdrienCorenflos/orgs", "repos_url": "https://api.github.com/users/AdrienCorenflos/repos", "events_url": "https://api.github.com/users/AdrienCorenflos/events{/privacy}", "received_events_url": "https://api.github.com/users/AdrienCorenflos/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782286, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg2", "url": "https://api.github.com/repos/google/jax/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}, {"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 18, "created_at": "2020-07-25T08:29:29Z", "updated_at": "2020-08-18T06:52:34Z", "closed_at": "2020-08-18T06:52:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nAs mentioned [here](https://github.com/google/jax/issues/3850), I am happy to leverage some code I'm putting together for my own project (sorted interpolation) to provide jax with an implementation of np.interp.\r\n\r\nModulo some high level checks on dimensionality of the arrays +  the \"period\" argument which is trivial to transfer to jax, the below is my best attempt so far at it.\r\n\r\nI've tested that the results were almost equal to numpy ones, plus the gradients match the numerical ones. Do the org members/collaborators have any problem with the approach (or ideas to make it more JAX-y), or should I iron it out, put it in a PR and send it over?\r\n\r\nAdrien\r\n\r\n\r\n```python\r\n@jit\r\ndef sorted_interp(x, xp, fp):\r\n    m = x.shape[0]\r\n    n = xp.shape[0]\r\n\r\n    x = jnp.atleast_1d(x)\r\n\r\n    j = 0\r\n    xp_0 = xp[0]\r\n    fp_0 = fp[0]\r\n\r\n\r\n    def inner_fun(args):\r\n        x_i, j = args\r\n        def cond_fun(state):\r\n            is_continuing, *_ = state\r\n            return is_continuing\r\n\r\n        def body_fun(state):\r\n            _, _, curr_j, curr_xp_j, curr_fp_j = state\r\n\r\n            next_xp_j = xp[curr_j + 1]\r\n            next_fp_j = fp[curr_j + 1]\r\n\r\n            cond = x_i > next_xp_j\r\n\r\n            def cond_true(_):\r\n                inner_cond = curr_j + 1 == n - 1\r\n\r\n                def fun_true(_): return False, True, curr_j, next_xp_j, next_fp_j\r\n                def fun_false(_): return True, False, curr_j + 1, next_xp_j, next_fp_j\r\n\r\n                return lax.cond(inner_cond, fun_true, fun_false, None)\r\n\r\n            def cond_false(_):\r\n                inner_cond = curr_fp_j == next_xp_j\r\n                \r\n                def fun_true(_):  return False, True, curr_j, next_xp_j, next_fp_j\r\n                def fun_false(_):  return False, False, curr_j, next_xp_j, next_fp_j\r\n\r\n                return lax.cond(inner_cond, fun_true, fun_false, None)\r\n\r\n            return lax.cond(cond, cond_true, cond_false, None)\r\n\r\n        _, use_next_fp_j, new_j, *_ = lax.while_loop(cond_fun, body_fun, (True, False, j, xp[j], fp[j]))\r\n        # We don't compute the result inside the loop to allow for seemless backward mode differentiability\r\n        return new_j, lax.cond(use_next_fp_j, \r\n                               lambda _: fp[new_j + 1],\r\n                               lambda _: fp[new_j] + + (fp[new_j + 1] - fp[new_j]) * (x_i - xp[new_j]) / (xp[new_j + 1] - xp[new_j]),\r\n                               None)\r\n\r\n    def body_fun(j, x_i):\r\n        return lax.cond(x_i <= xp_0, lambda *_: (j, fp_0), inner_fun, (x_i, j))\r\n\r\n    _, f = lax.scan(body_fun, 0, x)\r\n    return f\r\n\r\n\r\n@jit\r\ndef _interp(x, xp, fp):\r\n    x = jnp.atleast_1d(x)\r\n    argsort = jnp.argsort(x)\r\n    sorted_res = sorted_interp(x[argsort], xp, fp)\r\n    return jnp.empty_like(sorted_res).at[argsort].set(sorted_res)\r\n\r\ndef interp(x, xp, fp):\r\n    # Do the checks like in the numpy version\r\n    return _interp(x, xp, fp)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3857", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3857/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3857/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3857/events", "html_url": "https://github.com/google/jax/issues/3857", "id": 665437671, "node_id": "MDU6SXNzdWU2NjU0Mzc2NzE=", "number": 3857, "title": "jnp.dtype is not idempotent", "user": {"login": "SiegeLordEx", "id": 43966695, "node_id": "MDQ6VXNlcjQzOTY2Njk1", "avatar_url": "https://avatars3.githubusercontent.com/u/43966695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLordEx", "html_url": "https://github.com/SiegeLordEx", "followers_url": "https://api.github.com/users/SiegeLordEx/followers", "following_url": "https://api.github.com/users/SiegeLordEx/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLordEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLordEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLordEx/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLordEx/orgs", "repos_url": "https://api.github.com/users/SiegeLordEx/repos", "events_url": "https://api.github.com/users/SiegeLordEx/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLordEx/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-07-24T21:54:03Z", "updated_at": "2020-07-24T23:34:48Z", "closed_at": "2020-07-24T23:34:13Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "```python\r\nimport jax.numpy as np\r\n\r\nprint(np.dtype(np.int32))\r\n# int32\r\nprint(np.int32)\r\n# <class 'jax.numpy.lax_numpy.int32'>\r\n```\r\n\r\nThis is a minor annoyance when writing tests and verifying that the expected dtype via the `is` operator.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3843", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3843/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3843/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3843/events", "html_url": "https://github.com/google/jax/issues/3843", "id": 664845767, "node_id": "MDU6SXNzdWU2NjQ4NDU3Njc=", "number": 3843, "title": "multi-thread jax.grad fails on jax.lax.scan", "user": {"login": "thomaskeck", "id": 6443248, "node_id": "MDQ6VXNlcjY0NDMyNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6443248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaskeck", "html_url": "https://github.com/thomaskeck", "followers_url": "https://api.github.com/users/thomaskeck/followers", "following_url": "https://api.github.com/users/thomaskeck/following{/other_user}", "gists_url": "https://api.github.com/users/thomaskeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaskeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaskeck/subscriptions", "organizations_url": "https://api.github.com/users/thomaskeck/orgs", "repos_url": "https://api.github.com/users/thomaskeck/repos", "events_url": "https://api.github.com/users/thomaskeck/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaskeck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-07-24T00:33:03Z", "updated_at": "2020-07-24T09:51:47Z", "closed_at": "2020-07-24T02:49:05Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Calculating the gradient of a function in multiple independent threads sometimes causes jax to encounter errors of the form.\r\n\r\n```\r\n[...]\r\nthird_party/py/jax/core.py in pop(self, bottom)\r\n    605   def pop(self, bottom: bool) -> None:\r\n    606     if bottom:\r\n--> 607       self.downward.pop()\r\n    608     else:\r\n    609       self.upward.pop()\r\n\r\nIndexError: pop from empty list\r\n```\r\n\r\nIn my original setup this happened only in 1% of the cases, here is a minimal example which reproduces the issue most of the time:\r\n\r\n```\r\nimport concurrent\r\nimport jax\r\nfrom jax import numpy as jnp\r\n\r\ndef unroll(param, sequence):\r\n  def scan_f(prev_state, inputs):\r\n    return prev_state, jax.nn.sigmoid(param * inputs)\r\n  return jnp.sum(jax.lax.scan(scan_f, None, sequence)[1])\r\n\r\ndef run():\r\n  return jax.grad(unroll)(jnp.array(1.0), jnp.array([1.0]))\r\n\r\n# The more workers the more likely the issue appears. Using 1 worker works as expected.\r\nn_workers = 20\r\nwith concurrent.futures.ThreadPoolExecutor(max_workers=n_workers) as e:\r\n  futures = []\r\n  for _ in range(n_workers):\r\n    futures.append(e.submit(run))\r\n  unused_results = [f.result() for f in futures]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3839", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3839/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3839/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3839/events", "html_url": "https://github.com/google/jax/issues/3839", "id": 664733205, "node_id": "MDU6SXNzdWU2NjQ3MzMyMDU=", "number": 3839, "title": "cpu warning suppresses logging", "user": {"login": "niklasschmitz", "id": 18703284, "node_id": "MDQ6VXNlcjE4NzAzMjg0", "avatar_url": "https://avatars0.githubusercontent.com/u/18703284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/niklasschmitz", "html_url": "https://github.com/niklasschmitz", "followers_url": "https://api.github.com/users/niklasschmitz/followers", "following_url": "https://api.github.com/users/niklasschmitz/following{/other_user}", "gists_url": "https://api.github.com/users/niklasschmitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/niklasschmitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/niklasschmitz/subscriptions", "organizations_url": "https://api.github.com/users/niklasschmitz/orgs", "repos_url": "https://api.github.com/users/niklasschmitz/repos", "events_url": "https://api.github.com/users/niklasschmitz/events{/privacy}", "received_events_url": "https://api.github.com/users/niklasschmitz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-23T20:05:40Z", "updated_at": "2020-07-25T10:15:04Z", "closed_at": "2020-07-25T10:15:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm using the python logging module and discovered some interaction with the cpu fallback warning, if I define array constants before setting up the logger (I want the logger to depend on further args at runtime, while the constants might be e.g. in an imported module)\r\n\r\nHere's a small `repro.py`:\r\n```python\r\nimport jax.numpy as jnp\r\nimport logging\r\n\r\nx = jnp.array([1,2,3])\r\nprint(x)\r\n\r\nlogging.basicConfig(level=10)\r\n\r\nlogging.info(\"this is some info log\")  # does not show up\r\nlogging.warning(\"this is some warning\") # shows up\r\n```\r\nleads to \r\n```\r\n$ python repro.py\r\n/site-packages/jax/lib/xla_bridge.py:130: UserWarning: No GPU/TPU found, falling back to CPU.\r\n  warnings.warn('No GPU/TPU found, falling back to CPU.')\r\n[1 2 3]\r\nWARNING:root:this is some warning\r\n```\r\n\r\nBut if I switch the order of `logging.basicConfig` and the definition of `x`, both logs get printed to console  as expected (at loglevel 10).\r\n\r\nIs this expected?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3829", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3829/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3829/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3829/events", "html_url": "https://github.com/google/jax/issues/3829", "id": 664380084, "node_id": "MDU6SXNzdWU2NjQzODAwODQ=", "number": 3829, "title": "Prevent custom calls with side effects to be optimized out", "user": {"login": "dionhaefner", "id": 11994217, "node_id": "MDQ6VXNlcjExOTk0MjE3", "avatar_url": "https://avatars0.githubusercontent.com/u/11994217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dionhaefner", "html_url": "https://github.com/dionhaefner", "followers_url": "https://api.github.com/users/dionhaefner/followers", "following_url": "https://api.github.com/users/dionhaefner/following{/other_user}", "gists_url": "https://api.github.com/users/dionhaefner/gists{/gist_id}", "starred_url": "https://api.github.com/users/dionhaefner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dionhaefner/subscriptions", "organizations_url": "https://api.github.com/users/dionhaefner/orgs", "repos_url": "https://api.github.com/users/dionhaefner/repos", "events_url": "https://api.github.com/users/dionhaefner/events{/privacy}", "received_events_url": "https://api.github.com/users/dionhaefner/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782286, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg2", "url": "https://api.github.com/repos/google/jax/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 22, "created_at": "2020-07-23T10:53:54Z", "updated_at": "2020-08-03T08:13:09Z", "closed_at": "2020-08-03T08:13:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am [currently experimenting with implementing MPI send / recv as custom XLA calls](https://github.com/PhilipVinc/mpi4jax/pull/2).\r\n\r\nIt works fine in most cases, but a function like this leads to a deadlock:\r\n\r\n```python\r\n@jax.jit\r\ndef send_recv(x):\r\n    if rank == 0:\r\n        x = Recv(x, comm=comm)\r\n    else:\r\n        Send(x, 0, comm=comm)\r\n        # works if doing x = Send(x, 0, comm=comm)\r\n    return x\r\n```\r\n\r\nI guess this is because the return value of `Send` is not used in the computational graph, so the whole call is optimized away, despite having side effects.\r\n\r\nIs there a way to prevent this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3827", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3827/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3827/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3827/events", "html_url": "https://github.com/google/jax/issues/3827", "id": 664208994, "node_id": "MDU6SXNzdWU2NjQyMDg5OTQ=", "number": 3827, "title": "Large differences between numerics of jit and op-by-op execution for simulations.", "user": {"login": "sschoenholz", "id": 7719876, "node_id": "MDQ6VXNlcjc3MTk4NzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7719876?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sschoenholz", "html_url": "https://github.com/sschoenholz", "followers_url": "https://api.github.com/users/sschoenholz/followers", "following_url": "https://api.github.com/users/sschoenholz/following{/other_user}", "gists_url": "https://api.github.com/users/sschoenholz/gists{/gist_id}", "starred_url": "https://api.github.com/users/sschoenholz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sschoenholz/subscriptions", "organizations_url": "https://api.github.com/users/sschoenholz/orgs", "repos_url": "https://api.github.com/users/sschoenholz/repos", "events_url": "https://api.github.com/users/sschoenholz/events{/privacy}", "received_events_url": "https://api.github.com/users/sschoenholz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-23T05:17:32Z", "updated_at": "2020-07-23T15:55:48Z", "closed_at": "2020-07-23T15:55:47Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Recently a jax-md user noticed that the output of simulations seemed to be very different depending on whether or not the simulation step was jit (https://github.com/google/jax-md/issues/92) even when the simulation was run at float64. I extracted all of the jax md specific code and came up with the following repro. I have confirmed that this occurs on both CPU and GPU backends with `jax.__version==0.1.72`. Let me know if I can provide any extra information.\r\n\r\n```python\r\nfrom jax.api import jit, vmap, grad\r\nfrom jax import random\r\n\r\nfrom jax.config import config ; config.update('jax_enable_x64', True)\r\n\r\nimport jax.numpy as np\r\nfrom collections import namedtuple\r\n\r\nN = 32\r\ndt = 1e-1\r\ntemperature = 0.1\r\nbox_size = 5.0\r\nkey = random.PRNGKey(0)\r\n\r\ndef displacement(R_1, R_2):\r\n  dR = R_1[:, np.newaxis, :] - R_2[np.newaxis, :, :]\r\n  dR = np.mod(dR + box_size / 2, box_size) - box_size / 2\r\n  return dR\r\ndef shift(R, dR):\r\n  return R + dR\r\n\r\ndef safe_mask(mask, fn, operand, placeholder=0):\r\n  masked = np.where(mask, operand, 0)\r\n  return np.where(mask, fn(masked), placeholder)\r\n\r\ndef energy_fn(R, **kwargs):\r\n  dr = displacement(R, R)\r\n  dr = np.sum(dr * dr, axis=-1)\r\n  mask = 1 - np.eye(dr.shape[0], dtype=dr.dtype)\r\n  dr = safe_mask(mask, np.sqrt, dr)\r\n  U = mask * np.where(dr < 1.0, 1 / 2 * (1 - dr) ** 2, 0)\r\n  U = 0.5 * np.sum(U)\r\n  return U\r\n\r\nNVEState = namedtuple('NVEState', ['position', 'velocity', 'acceleration'])\r\ndef nve(energy_fn, shift_fn, dt):\r\n  force_fn = grad(energy_fn)\r\n\r\n  dt_2 = 0.5 * dt ** 2\r\n  def init_fun(key, R):\r\n    V = random.normal(key, R.shape, dtype=R.dtype)\r\n    return NVEState(R, V, -force_fn(R))\r\n  def apply_fun(state):\r\n    R, V, A = state\r\n    R = shift_fn(R, V * dt + A * dt_2)\r\n    A_prime = -force_fn(R)\r\n    V = V + 0.5 * (A + A_prime) * dt\r\n    return NVEState(R, V, A_prime)\r\n  return init_fun, apply_fun\r\n\r\ndef simulation(key, jit_apply):\r\n    pos_key, sim_key = random.split(key)\r\n    R = random.uniform(pos_key, (N, 2), maxval=box_size)\r\n    init_fn, apply_fn = nve(energy_fn, shift, dt)\r\n    if jit_apply:\r\n      apply_fn = jit(apply_fn)\r\n    state = init_fn(sim_key, R)\r\n    for i in range(1000):\r\n        state = apply_fn(state)\r\n    return state.position\r\n\r\na_positions = simulation(key, False)\r\nb_positions = simulation(key, True)\r\n\r\ndR = a_positions - b_positions\r\ndR = np.mod(dR + box_size / 2, box_size) - box_size / 2\r\ndr = np.sqrt(np.sum(dR * dR, axis=-1))\r\nprint(dr)\r\n```\r\n\r\nWhich outputs:\r\n```\r\n[2.33171422 0.9812451  1.55086038 1.67008338 0.83624426 2.68838387\r\n 1.68693065 2.30806348 0.91745479 0.61762378 1.86090168 3.32947105\r\n 1.81900706 2.82369629 1.90045383 2.08167286 2.70602523 0.43538554\r\n 2.63444707 3.04734335 1.13659884 2.40687914 2.46497045 0.15266076\r\n 2.4147755  1.71029586 1.70824932 2.42880769 0.34217255 2.97179374\r\n 2.2841274  2.17418844]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3826", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3826/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3826/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3826/events", "html_url": "https://github.com/google/jax/issues/3826", "id": 664169711, "node_id": "MDU6SXNzdWU2NjQxNjk3MTE=", "number": 3826, "title": " jax.lax.scan doesnt work with namedtuples as input argument", "user": {"login": "isaacgerg", "id": 11971499, "node_id": "MDQ6VXNlcjExOTcxNDk5", "avatar_url": "https://avatars0.githubusercontent.com/u/11971499?v=4", "gravatar_id": "", "url": "https://api.github.com/users/isaacgerg", "html_url": "https://github.com/isaacgerg", "followers_url": "https://api.github.com/users/isaacgerg/followers", "following_url": "https://api.github.com/users/isaacgerg/following{/other_user}", "gists_url": "https://api.github.com/users/isaacgerg/gists{/gist_id}", "starred_url": "https://api.github.com/users/isaacgerg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/isaacgerg/subscriptions", "organizations_url": "https://api.github.com/users/isaacgerg/orgs", "repos_url": "https://api.github.com/users/isaacgerg/repos", "events_url": "https://api.github.com/users/isaacgerg/events{/privacy}", "received_events_url": "https://api.github.com/users/isaacgerg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-23T02:58:42Z", "updated_at": "2020-07-23T13:14:34Z", "closed_at": "2020-07-23T13:10:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n        def fun(carry, x):\r\n            y = jnp.abs(residual_function(x,param1, param2))\r\n            return carry, y\r\n        error = jax.lax.scan(fun, 0, residuals)\r\n```\r\n\r\nwhere residuals is an array of namedtuple.  This gives a \"builtins.IndexError: tuple index out of range\" error in lax_control_flow.py:1173 (lengths = [x.shape[0] for x in xs_flat]) because residuals is flattened before \"iterated\" over in the scan.  For example, given a namedtuple, Residual, which has 3 items and x which is [Residual(p1, p2), Residual(p3,4)], the flatten will give a list which is 6 elements long instead of 2.\r\n\r\nDocumentation (https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.scan.html) shows pseudocode doing \"for x in xs\" but xs is flattened before the iteration begins", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3819", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3819/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3819/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3819/events", "html_url": "https://github.com/google/jax/issues/3819", "id": 663864046, "node_id": "MDU6SXNzdWU2NjM4NjQwNDY=", "number": 3819, "title": "Differentiation through lax.scan fails when scan is inside custom JVP", "user": {"login": "dpfau", "id": 143368, "node_id": "MDQ6VXNlcjE0MzM2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/143368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpfau", "html_url": "https://github.com/dpfau", "followers_url": "https://api.github.com/users/dpfau/followers", "following_url": "https://api.github.com/users/dpfau/following{/other_user}", "gists_url": "https://api.github.com/users/dpfau/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpfau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpfau/subscriptions", "organizations_url": "https://api.github.com/users/dpfau/orgs", "repos_url": "https://api.github.com/users/dpfau/repos", "events_url": "https://api.github.com/users/dpfau/events{/privacy}", "received_events_url": "https://api.github.com/users/dpfau/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-22T15:46:22Z", "updated_at": "2020-07-31T05:17:21Z", "closed_at": "2020-07-31T05:17:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This is an issue that probably hasn't come up before because not too many people combine custom JVPs, lax.scan and second derivatives. I have a custom JVP (for the determinant) that has a lax.scan inside it. When I take the second derivative of the determinant, and therefore the first derivative of the lax.scan call, I get an error due to the `consts_lin` list to `scan_transpose` having things in the wrong order - apparently it should be some number of Falses followed by all Trues, but I have a True, then False, then all Trues. I suspect this is due to some sneaky interaction between scan_transpose and the custom JVP.\r\n\r\nTo reproduce the error, roll back the fork in github.com/dpfau/jax to [this](https://github.com/dpfau/jax/commit/deb39aad24bc8e7e8cfcad9dd0319601f06e960e) commit, then run linalg_test.py, specifically the test of second derivatives of the determinant with grad_type='safe'. That should lead to test failures with an error in scan_transpose.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3818", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3818/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3818/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3818/events", "html_url": "https://github.com/google/jax/issues/3818", "id": 663417668, "node_id": "MDU6SXNzdWU2NjM0MTc2Njg=", "number": 3818, "title": "Are there a tutorial or interesting example of how to use Jax with pytorch?", "user": {"login": "brando90", "id": 1855278, "node_id": "MDQ6VXNlcjE4NTUyNzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/1855278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brando90", "html_url": "https://github.com/brando90", "followers_url": "https://api.github.com/users/brando90/followers", "following_url": "https://api.github.com/users/brando90/following{/other_user}", "gists_url": "https://api.github.com/users/brando90/gists{/gist_id}", "starred_url": "https://api.github.com/users/brando90/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brando90/subscriptions", "organizations_url": "https://api.github.com/users/brando90/orgs", "repos_url": "https://api.github.com/users/brando90/repos", "events_url": "https://api.github.com/users/brando90/events{/privacy}", "received_events_url": "https://api.github.com/users/brando90/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-22T02:03:47Z", "updated_at": "2020-07-24T03:34:05Z", "closed_at": "2020-07-24T03:34:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "mainly as a pytorch user, I'd like to be able to use this promising project without having to learn all my stuff from scratch. Is this possible? Are there examples with jax + pytorch?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3809", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3809/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3809/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3809/events", "html_url": "https://github.com/google/jax/issues/3809", "id": 662401710, "node_id": "MDU6SXNzdWU2NjI0MDE3MTA=", "number": 3809, "title": "Can't `eval_shape` of `lax.reduce_window`", "user": {"login": "romanngg", "id": 44512421, "node_id": "MDQ6VXNlcjQ0NTEyNDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/44512421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romanngg", "html_url": "https://github.com/romanngg", "followers_url": "https://api.github.com/users/romanngg/followers", "following_url": "https://api.github.com/users/romanngg/following{/other_user}", "gists_url": "https://api.github.com/users/romanngg/gists{/gist_id}", "starred_url": "https://api.github.com/users/romanngg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romanngg/subscriptions", "organizations_url": "https://api.github.com/users/romanngg/orgs", "repos_url": "https://api.github.com/users/romanngg/repos", "events_url": "https://api.github.com/users/romanngg/events{/privacy}", "received_events_url": "https://api.github.com/users/romanngg/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-21T00:12:06Z", "updated_at": "2020-07-21T08:15:57Z", "closed_at": "2020-07-21T08:15:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Below I can evaluate a `lax.reduce_window` call:\r\n```\r\nfrom jax import eval_shape, lax, numpy as np\r\nimport operator\r\n\r\nlax.reduce_window(np.ones((1,)), 1., lax.add, (1,), (1,), 'VALID')\r\n```\r\n\r\n```\r\nDeviceArray([2.], dtype=float32)\r\n```\r\nBut not `eval_shape`:\r\n```\r\neval_shape(lax.reduce_window, np.ones((1,)), 1., lax.add, (1,), (1,), 'VALID')\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-30-5607e6dcc34d> in <module>()\r\n----> 1 eval_shape(lax.reduce_window, np.ones((1,)), 1., lax.add, (1,), (1,), 'VALID')\r\n\r\n4 frames\r\ngoogle3/third_party/py/jax/api.py in eval_shape(fun, *args, **kwargs)\r\n   1799   wrapped_fun, out_tree = flatten_fun(lu.wrap_init(fun), in_tree)\r\n   1800   out = pe.abstract_eval_fun(wrapped_fun.call_wrapped,\r\n-> 1801                              *map(abstractify, args_flat))\r\n   1802   out = [ShapeDtypeStruct(x.shape, x.dtype) for x in out]\r\n   1803   return tree_unflatten(out_tree(), out)\r\n\r\ngoogle3/third_party/py/jax/util.py in safe_map(f, *args)\r\n     32   for arg in args[1:]:\r\n     33     assert len(arg) == n, 'length mismatch: {}'.format(list(map(len, args)))\r\n---> 34   return list(map(f, *args))\r\n     35 \r\n     36 def unzip2(xys):\r\n\r\ngoogle3/third_party/py/jax/api.py in abstractify(x)\r\n   1795   \"\"\"\r\n   1796   def abstractify(x):\r\n-> 1797     return ShapedArray(np.shape(x), dtypes.result_type(x))\r\n   1798   args_flat, in_tree = tree_flatten((args, kwargs))\r\n   1799   wrapped_fun, out_tree = flatten_fun(lu.wrap_init(fun), in_tree)\r\n\r\ngoogle3/third_party/py/jax/dtypes.py in result_type(*args)\r\n    255   # TODO(dougalm,mattjj): This is a performance bottleneck. Consider memoizing.\r\n    256   if len(args) < 2:\r\n--> 257     return dtype(args[0])\r\n    258   scalars = []\r\n    259   dtypes = []\r\n\r\ngoogle3/third_party/py/jax/dtypes.py in dtype(x)\r\n    249   if type(x) in python_scalar_dtypes:\r\n    250     return python_scalar_dtypes[type(x)]\r\n--> 251   return np.result_type(x)\r\n    252 \r\n    253 def result_type(*args):\r\n\r\nTypeError: data type not understood\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3801", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3801/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3801/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3801/events", "html_url": "https://github.com/google/jax/issues/3801", "id": 661794500, "node_id": "MDU6SXNzdWU2NjE3OTQ1MDA=", "number": 3801, "title": "Computing the diagonal elements of a Hessian", "user": {"login": "Marius1311", "id": 24494650, "node_id": "MDQ6VXNlcjI0NDk0NjUw", "avatar_url": "https://avatars3.githubusercontent.com/u/24494650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marius1311", "html_url": "https://github.com/Marius1311", "followers_url": "https://api.github.com/users/Marius1311/followers", "following_url": "https://api.github.com/users/Marius1311/following{/other_user}", "gists_url": "https://api.github.com/users/Marius1311/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marius1311/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marius1311/subscriptions", "organizations_url": "https://api.github.com/users/Marius1311/orgs", "repos_url": "https://api.github.com/users/Marius1311/repos", "events_url": "https://api.github.com/users/Marius1311/events{/privacy}", "received_events_url": "https://api.github.com/users/Marius1311/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-07-20T12:59:33Z", "updated_at": "2020-07-23T07:23:16Z", "closed_at": "2020-07-21T00:53:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi all,\r\n\r\nI would like to use Jax to compute the diagonal elelments of a Hessian matrix, i.e second partial derivatives \\partial y^2 / \\partial x_j^2. What's the most efficient way to do this? I know that for columns of the Hessian, I could use Hessian-vector products, but what can I do in this case to avoid computing full Hessians?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3797", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3797/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3797/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3797/events", "html_url": "https://github.com/google/jax/issues/3797", "id": 661146089, "node_id": "MDU6SXNzdWU2NjExNDYwODk=", "number": 3797, "title": "Build Fails due to c++ compilation failure", "user": {"login": "iliailmer", "id": 21179258, "node_id": "MDQ6VXNlcjIxMTc5MjU4", "avatar_url": "https://avatars0.githubusercontent.com/u/21179258?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iliailmer", "html_url": "https://github.com/iliailmer", "followers_url": "https://api.github.com/users/iliailmer/followers", "following_url": "https://api.github.com/users/iliailmer/following{/other_user}", "gists_url": "https://api.github.com/users/iliailmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iliailmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iliailmer/subscriptions", "organizations_url": "https://api.github.com/users/iliailmer/orgs", "repos_url": "https://api.github.com/users/iliailmer/repos", "events_url": "https://api.github.com/users/iliailmer/events{/privacy}", "received_events_url": "https://api.github.com/users/iliailmer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}, {"id": 1179370783, "node_id": "MDU6TGFiZWwxMTc5MzcwNzgz", "url": "https://api.github.com/repos/google/jax/labels/build", "name": "build", "color": "fbca04", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-19T23:12:00Z", "updated_at": "2020-08-07T13:39:49Z", "closed_at": "2020-08-07T13:39:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I get the following error building from source:\r\n\r\n`C++ compilation of rule '@org_tensorflow//tensorflow/compiler/xla/python:bfloat16' failed (Exit 1)`\r\n\r\nThe whole build fails because of this and I am unsure where to look for a fix. I'm building on a macos, here are the environment packages:\r\n```\r\nabsl-py==0.9.0\r\nappdirs==1.4.4\r\nappnope==0.1.0\r\nattrs==19.3.0\r\nautopep8==1.5.3\r\nbackcall==0.2.0\r\nblack==19.10b0\r\nclick==7.1.2\r\nCython==0.29.21\r\ndecorator==4.4.2\r\nflake8==3.8.3\r\nipython==7.16.1\r\nipython-genutils==0.2.0\r\njaxlib==0.1.51\r\njedi==0.17.1\r\njoblib==0.15.1\r\nmccabe==0.6.1\r\nmypy==0.780\r\nmypy-extensions==0.4.3\r\nnumpy==1.18.5\r\nopt-einsum==3.2.1\r\nparso==0.7.0\r\npathspec==0.8.0\r\npexpect==4.8.0\r\npickleshare==0.7.5\r\nprompt-toolkit==3.0.5\r\nptyprocess==0.6.0\r\npycodestyle==2.6.0\r\npydocstyle==5.0.2\r\npyflakes==2.2.0\r\nPygments==2.6.1\r\nregex==2020.7.14\r\nscikit-learn==0.23.1\r\nscipy==1.4.1\r\nsix==1.15.0\r\nsnowballstemmer==2.0.0\r\nthreadpoolctl==2.1.0\r\ntoml==0.10.1\r\ntraitlets==4.3.3\r\ntyped-ast==1.4.1\r\ntyping-extensions==3.7.4.2\r\nwcwidth==0.2.5\r\n```\r\n\r\nNot sure what other information would be helpful. Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3794", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3794/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3794/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3794/events", "html_url": "https://github.com/google/jax/issues/3794", "id": 660447870, "node_id": "MDU6SXNzdWU2NjA0NDc4NzA=", "number": 3794, "title": "Matrix slicing inside Jax.jit function", "user": {"login": "fasghq", "id": 62699960, "node_id": "MDQ6VXNlcjYyNjk5OTYw", "avatar_url": "https://avatars0.githubusercontent.com/u/62699960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasghq", "html_url": "https://github.com/fasghq", "followers_url": "https://api.github.com/users/fasghq/followers", "following_url": "https://api.github.com/users/fasghq/following{/other_user}", "gists_url": "https://api.github.com/users/fasghq/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasghq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasghq/subscriptions", "organizations_url": "https://api.github.com/users/fasghq/orgs", "repos_url": "https://api.github.com/users/fasghq/repos", "events_url": "https://api.github.com/users/fasghq/events{/privacy}", "received_events_url": "https://api.github.com/users/fasghq/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-18T23:30:09Z", "updated_at": "2020-07-27T09:02:21Z", "closed_at": "2020-07-27T09:02:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\nI want to apply `jax.jit` to my function of rounding tensor-train ranks:\r\n```\r\ndef tt_round_model(tt, delta):  \r\n    G = tt.core\r\n    d = len(tt.core)\r\n    rn = []\r\n    time1 = time.perf_counter()    \r\n    \r\n    for k in range(d-1, 0, -1):\r\n        r1, n, r2 = G[k].shape\r\n        G[k] = np.reshape(G[k], (r1, n * r2))\r\n        G[k] = np.transpose(G[k])\r\n        G[k], R = la.qr(G[k])\r\n        G[k] = np.transpose(G[k])\r\n        G[k-1] = np.einsum('ijk,lk->ijl', G[k-1], R) \r\n    \r\n    for k in range(0, d - 1):\r\n        print(k, G[k].shape, k+1, G[k+1].shape)\r\n        \r\n        if k == 0:\r\n            r1, n1, r2 = G[k].shape\r\n            r3 = G[k+2].shape[0]\r\n            n2 = int(G[k+1].shape[1] / r3)\r\n        elif k == d - 2:\r\n            r1 = G[k].shape[0]\r\n            r2 = G[k+1].shape[0]\r\n            n1 = int(G[k].shape[1] / r2)\r\n            r3 = 1\r\n            n2 = G[k+1].shape[1]\r\n        else:\r\n            r1 = G[k].shape[0]\r\n            r2 = G[k+1].shape[0]\r\n            n1 = int(G[k].shape[1] / r2)\r\n            r3 = G[k+2].shape[0]\r\n            n2 = int(G[k+1].shape[1] / r3)\r\n\r\n        G[k] = np.reshape(G[k], (r1 * n1, r2))\r\n        G[k+1] = np.reshape(G[k+1], (r2 , n2 * r3))\r\n        u, s, v = la.svd(G[k])\r\n\r\n        rc = s.shape[0]\r\n        rc = jnp.maximum(rc, (s < delta).sum())\r\n        \r\n        s = np.diag(s)\r\n        \r\n        u = u[:, :rc]\r\n        s = s[:rc, :rc]\r\n        v = v[:, :rc]\r\n        \r\n        v = np.dot(v, s)\r\n        G[k] = np.reshape(u, (r1, n1, rc))   \r\n        G[k+1] = np.einsum('ij,ik->jk', G[k+1], v)\r\n    \r\n    \r\n    if len(G[d-1].shape) == 2:\r\n        G[d-1] = np.reshape(G[d-1], (G[d-1].shape[1], G[d-1].shape[0], 1))\r\n\r\n    for X in G:\r\n        rn.append(X.shape[0])\r\n    rn.append(G[d-1].shape[2])\r\n\r\n    time2 = time.perf_counter()\r\n    print(\"\\n time: \", time2 - time1)\r\n    \r\n    return Model(G)\r\n```\r\n\r\nAnd I have the problem with:\r\n```\r\nu = u[:, :rc]\r\ns = s[:rc, :rc]\r\nv = v[:, :rc]\r\n```\r\nas it causes the error:\r\n```\r\nIndexError: Array slice indices must have static start/stop/step to be used with Numpy indexing syntax. Try lax.dynamic_slice/dynamic_update_slice instead.\r\n```\r\n\r\nBut I also can't use `lax.dynamic_slice` here as it causes the error:\r\n```\r\nConcretizationTypeError: Abstract tracer value encountered where concrete value is expected (in `bool`).\r\nUse transformation parameters such as `static_argnums` for `jit` to avoid tracing input values.\r\nSee `https://jax.readthedocs.io/en/latest/faq.html#abstract-tracer-value-encountered-where-concrete-value-is-expected-error`.\r\nEncountered value: Traced<ShapedArray(bool[]):JaxprTrace(level=-1/1)>\r\n```\r\nHow could I replace this part?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3793", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3793/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3793/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3793/events", "html_url": "https://github.com/google/jax/issues/3793", "id": 660162463, "node_id": "MDU6SXNzdWU2NjAxNjI0NjM=", "number": 3793, "title": "Make `lax.reduce_window` support dilation", "user": {"login": "romanngg", "id": 44512421, "node_id": "MDQ6VXNlcjQ0NTEyNDIx", "avatar_url": "https://avatars3.githubusercontent.com/u/44512421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romanngg", "html_url": "https://github.com/romanngg", "followers_url": "https://api.github.com/users/romanngg/followers", "following_url": "https://api.github.com/users/romanngg/following{/other_user}", "gists_url": "https://api.github.com/users/romanngg/gists{/gist_id}", "starred_url": "https://api.github.com/users/romanngg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romanngg/subscriptions", "organizations_url": "https://api.github.com/users/romanngg/orgs", "repos_url": "https://api.github.com/users/romanngg/repos", "events_url": "https://api.github.com/users/romanngg/events{/privacy}", "received_events_url": "https://api.github.com/users/romanngg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-18T13:50:43Z", "updated_at": "2020-08-06T21:07:30Z", "closed_at": "2020-07-20T21:27:25Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "It would be very convenient to have `lax.reduce_window` (https://github.com/google/jax/blob/fa2a0275c83c03cfad9d36f5da06b0bf47eedfb9/jax/lax/lax.py#L1087) support dilation specification, like https://www.tensorflow.org/xla/operation_semantics#reducewindow\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3758", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3758/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3758/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3758/events", "html_url": "https://github.com/google/jax/issues/3758", "id": 656870210, "node_id": "MDU6SXNzdWU2NTY4NzAyMTA=", "number": 3758, "title": "jax.scipy.special zeta sometimes returns NaN", "user": {"login": "srvasude", "id": 1048839, "node_id": "MDQ6VXNlcjEwNDg4Mzk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1048839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srvasude", "html_url": "https://github.com/srvasude", "followers_url": "https://api.github.com/users/srvasude/followers", "following_url": "https://api.github.com/users/srvasude/following{/other_user}", "gists_url": "https://api.github.com/users/srvasude/gists{/gist_id}", "starred_url": "https://api.github.com/users/srvasude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srvasude/subscriptions", "organizations_url": "https://api.github.com/users/srvasude/orgs", "repos_url": "https://api.github.com/users/srvasude/repos", "events_url": "https://api.github.com/users/srvasude/events{/privacy}", "received_events_url": "https://api.github.com/users/srvasude/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-14T20:13:15Z", "updated_at": "2020-07-22T16:17:07Z", "closed_at": "2020-07-22T16:17:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "For large values of z, `jax.scipy.special.zeta` returns NaN when it should instead return 0.:\r\n\r\n`jax.scipy.special.zeta(1e5, q=1.)`  # Return NaN.\r\n\r\nNote: I suspect TF and Scipy have this same issue:\r\n\r\n`sp.zeta(1e19, 40.)`   # Returns NaN in Scipy. I have to use a large value because Scipy is using internal float64 calculations.\r\n\r\n`tf.math.zeta(1e10, q=30.)`  # Returns NaN in TF", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3757", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3757/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3757/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3757/events", "html_url": "https://github.com/google/jax/issues/3757", "id": 656840956, "node_id": "MDU6SXNzdWU2NTY4NDA5NTY=", "number": 3757, "title": "Error: could not find emitted value for: %collective-permute", "user": {"login": "Thenerdstation", "id": 8702042, "node_id": "MDQ6VXNlcjg3MDIwNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8702042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thenerdstation", "html_url": "https://github.com/Thenerdstation", "followers_url": "https://api.github.com/users/Thenerdstation/followers", "following_url": "https://api.github.com/users/Thenerdstation/following{/other_user}", "gists_url": "https://api.github.com/users/Thenerdstation/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thenerdstation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thenerdstation/subscriptions", "organizations_url": "https://api.github.com/users/Thenerdstation/orgs", "repos_url": "https://api.github.com/users/Thenerdstation/repos", "events_url": "https://api.github.com/users/Thenerdstation/events{/privacy}", "received_events_url": "https://api.github.com/users/Thenerdstation/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-14T19:18:44Z", "updated_at": "2020-07-17T21:59:29Z", "closed_at": "2020-07-17T21:59:29Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This code on my laptop\r\n\r\n```\r\nimport os\r\nos.environ['XLA_FLAGS'] = '--xla_force_host_platform_device_count=8'\r\nimport jax\r\nimport jax.numpy as jnp\r\n\r\ndef f(a):\r\n  return jax.lax.pshuffle(a, \"i\", [0, 1, 2, 3, 4, 5, 6, 7])\r\n\r\npf = jax.pmap(f, \"i\")\r\nprint(pf(jnp.ones((8, 8))))\r\n```\r\n\r\nGives me this error.\r\n\r\n```\r\n2020-07-14 12:13:46.715142: F external/org_tensorflow/tensorflow/compiler/xla/service/cpu/ir_emitter.cc:3131] could not find emitted value for: %collective-permute.3 = f32[8]{0} collective-permute(f32[8]{0} %parameter.1), source_target_pairs={{0,0},{1,1},{2,2},{3,3},{4,4},{5,5},{6,6},{7,7}}, metadata={op_type=\"ppermute\" op_name=\"pmap(f)/ppermute[ axis_name=i\\n                  perm=((0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)) ]\" source_file=\"bifrost_test.py\" source_line=7}\r\nAborted\r\n```\r\n\r\nRemoving the pshuffle and just returning `a` does not cause an error.\r\n\r\nJax version: 0.1.72\r\nJaxlib version: 0.1.51", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3755", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3755/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3755/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3755/events", "html_url": "https://github.com/google/jax/issues/3755", "id": 656822115, "node_id": "MDU6SXNzdWU2NTY4MjIxMTU=", "number": 3755, "title": "Nested VJP function always triggers recompilation ", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-14T18:45:29Z", "updated_at": "2020-07-16T18:12:49Z", "closed_at": "2020-07-16T18:12:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm sorry to report that my last contribution https://github.com/google/jax/issues/3667 was not a perfect fix for the issue.  While it does seem to ensure that the returned cotangent function is a pytree, it does not ensure that regenerating the cotangent function produces an equivalent pytree.  Consider the new test at the bottom of this snippet:\r\n```python\r\n  def test_nestable_vjp(self):\r\n    # Verify that https://github.com/google/jax/issues/3667 is resolved.\r\n    def f(x):\r\n        return x ** 2\r\n\r\n    @api.custom_vjp\r\n    def g(x):\r\n        return f(x)\r\n\r\n    def g_fwd(x):\r\n        y, f_vjp = api.vjp(f, x)\r\n        return y, f_vjp\r\n\r\n    def g_bwd(f_vjp, y_bar):\r\n        return f_vjp(y_bar)\r\n\r\n    g.defvjp(g_fwd, g_bwd)\r\n\r\n    # Check that VJP can be nested in simple situations.  For this to pass,\r\n    # vjp has to return a PyTree.\r\n    _, g_vjp = api.vjp(g, 1.0)\r\n    y, = g_vjp(1.0)\r\n    self.assertAllClose(y, jnp.array(2.0))\r\n\r\n    # Check that VJP can be nested in complex situations.  For this to pass,\r\n    # vjp can't treat the closed-over tracer x as a static argument.\r\n    @jit\r\n    def z(x):\r\n        _, g_vjp = api.vjp(g, x)\r\n        return g_vjp\r\n    y, = z(1.0)(3.0)\r\n    self.assertAllClose(y, jnp.array(6.0))\r\n\r\n    # Check that VJP functions don't induce recompilation.\r\n    compiled = 0\r\n    @jit\r\n    def w(this_g_vjp):\r\n        nonlocal compiled\r\n        compiled += 1\r\n    _, g_vjp = api.vjp(g, 1.0)\r\n    w(g_vjp)\r\n    _, g_vjp = api.vjp(g, 1.0)\r\n    w(g_vjp)\r\n    _, g_vjp = api.vjp(g, 2.0)\r\n    w(g_vjp)\r\n    assert compiled == 1\r\n```\r\nCurrently, `compiled` is 3.  This is because there are `partial` objects buried in the pytree, and upon regeneration of `g_vjp`, we get different objects, which hash differently.\r\n\r\nIn trying to fix this, I tried to replace the pattern `Partial(partial(` in the code with an improved `Partial` class from [here](https://github.com/google/jax/issues/3667#issuecomment-656240407).  The problem improves, but then `Jaxpr` is not a pytree.\r\n\r\nLong story short, there are two possible ways of moving forward:\r\n\r\n- Try to work around the problem by not regenerating cotangent functions.  Generate them exactly once.\r\n- Regfister a number of JAX's internal classes as pytrees, including `Jaxpr`, `Var`, and `Atom`.\r\n\r\nI'll probably try just working around this for now, but I was wondering what your thoughts are on ultimately doing the registration?\r\n\r\nattn: @shoyer @mattjj ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3753", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3753/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3753/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3753/events", "html_url": "https://github.com/google/jax/issues/3753", "id": 656789150, "node_id": "MDU6SXNzdWU2NTY3ODkxNTA=", "number": 3753, "title": "Cuda Error (209): cudaLaunchKernel returned cudaErrorNoKernelImageForDevice", "user": {"login": "bpw8dd", "id": 42900341, "node_id": "MDQ6VXNlcjQyOTAwMzQx", "avatar_url": "https://avatars3.githubusercontent.com/u/42900341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpw8dd", "html_url": "https://github.com/bpw8dd", "followers_url": "https://api.github.com/users/bpw8dd/followers", "following_url": "https://api.github.com/users/bpw8dd/following{/other_user}", "gists_url": "https://api.github.com/users/bpw8dd/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpw8dd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpw8dd/subscriptions", "organizations_url": "https://api.github.com/users/bpw8dd/orgs", "repos_url": "https://api.github.com/users/bpw8dd/repos", "events_url": "https://api.github.com/users/bpw8dd/events{/privacy}", "received_events_url": "https://api.github.com/users/bpw8dd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T17:48:48Z", "updated_at": "2020-07-14T17:51:02Z", "closed_at": "2020-07-14T17:51:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Operating System: CentOS 7 \r\n\r\nNvidia Driver and GPU Info:\r\n\r\nNVIDIA-SMI 450.51.05\r\nDriver Version: 450.51.05\r\nCUDA Version: 11.0\r\nGPU: Quadro M2000M\r\n\r\nI'm very new to cuda programming so any guidance is extremely appreciated. I have a very simple cuda c++ program that computes the sum of two arrays in unified memory on the GPU. However, it appears that the kernel fails to launch due to a cudaErrorNoKernelImageForDevice error. The code is below:\r\n\r\n`#include <iostream>\r\n#include <math.h>\r\n#include <cuda_runtime_api.h>\r\n\r\n\r\nusing namespace std;\r\n\r\n__global__\r\nvoid add(int n, float *x, float*y){\r\nfor (int i = 0; i < n; i++)\r\ny[i] = x[i] + y[i];\r\n}\r\n\r\nint main() {\r\ncout << \"!!!Hello World!!!\" << endl; // prints !!!Hello World!!!\r\n\r\nint N = 1<<20;\r\nfloat *x, *y;\r\n\r\ncudaMallocManaged((void**)&x, N*sizeof(float));\r\ncudaMallocManaged((void**)&y, N*sizeof(float));\r\n\r\nfor(int i = 0; i < N; i++){\r\nx[i] = 1.0f;\r\ny[i] = 2.0f;\r\n}\r\n\r\nadd<<<1, 1>>>(N, x, y);\r\ncudaGetLastError();\r\n    /**\r\n     * This indicates that there is no kernel image available that is suitable\r\n     * for the device. This can occur when a user specifies code generation\r\n     * options for a particular CUDA source file that do not include the\r\n     * corresponding device configuration.\r\n     *\r\n     *    cudaErrorNoKernelImageForDevice       =     209,\r\n     */\r\n\r\ncudaDeviceSynchronize();\r\n\r\nfloat maxError = 0.0f;\r\nfor (int i = 0; i < N; i++){\r\nmaxError = fmax(maxError, fabs(y[i]-3.0f));\r\n}\r\n\r\ncudaFree(x);\r\ncudaFree(y);\r\n\r\nreturn 0;\r\n\r\n\r\n}`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3746", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3746/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3746/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3746/events", "html_url": "https://github.com/google/jax/issues/3746", "id": 656223951, "node_id": "MDU6SXNzdWU2NTYyMjM5NTE=", "number": 3746, "title": "Could not load dynamic library 'libcudart.so.11.0'", "user": {"login": "thegregyang", "id": 53244851, "node_id": "MDQ6VXNlcjUzMjQ0ODUx", "avatar_url": "https://avatars2.githubusercontent.com/u/53244851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thegregyang", "html_url": "https://github.com/thegregyang", "followers_url": "https://api.github.com/users/thegregyang/followers", "following_url": "https://api.github.com/users/thegregyang/following{/other_user}", "gists_url": "https://api.github.com/users/thegregyang/gists{/gist_id}", "starred_url": "https://api.github.com/users/thegregyang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thegregyang/subscriptions", "organizations_url": "https://api.github.com/users/thegregyang/orgs", "repos_url": "https://api.github.com/users/thegregyang/repos", "events_url": "https://api.github.com/users/thegregyang/events{/privacy}", "received_events_url": "https://api.github.com/users/thegregyang/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-07-13T23:46:45Z", "updated_at": "2020-07-17T21:22:18Z", "closed_at": "2020-07-17T21:22:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I installed jax via the automatic command in the README\r\n\r\n```\r\npip install --upgrade https://storage.googleapis.com/jax-releases/`nvidia-smi | sed -En \"s/.* CUDA Version: ([0-9]*)\\.([0-9]*).*/cuda\\1\\2/p\"`/jaxlib-0.1.51-`python3 -V | sed -En \"s/Python ([0-9]*)\\.([0-9]*).*/cp\\1\\2/p\"`-none-manylinux2010_x86_64.whl jax\r\n```\r\n\r\nWhen I run `python -c 'import jax.numpy as np; print(np.zeros([3, 4]))'` I get\r\n\r\n```\r\n2020-07-13 23:14:21.441528: W external/org_tensorflow/tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\r\n2020-07-13 23:14:21.441564: I external/org_tensorflow/tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\r\n2020-07-13 23:14:21.496885: W external/org_tensorflow/tensorflow/stream_executor/platform/default/dso_loader.cc:59] Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory\r\n2020-07-13 23:14:21.496916: I external/org_tensorflow/tensorflow/stream_executor/cuda/cudart_stub.cc:29] Ignore above cudart dlerror if you do not have a GPU set up on your machine.\r\n2020-07-13 23:14:21.735723: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:168] XLA service 0x564f52e8b120 initialized for platform Interpreter (this does not guarantee that XLA will be used). Devices:\r\n2020-07-13 23:14:21.735762: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Interpreter, <undefined>\r\n2020-07-13 23:14:21.739108: I external/org_tensorflow/tensorflow/core/platform/profile_utils/cpu_utils.cc:104] CPU Frequency: 2593990000 Hz\r\n2020-07-13 23:14:21.740110: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:168] XLA service 0x564f52e881c0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\r\n2020-07-13 23:14:21.740202: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\r\n2020-07-13 23:14:21.744840: I external/org_tensorflow/tensorflow/stream_executor/platform/default/dso_loader.cc:48] Successfully opened dynamic library libcuda.so.1\r\n2020-07-13 23:14:21.994105: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:168] XLA service 0x564f52b71da0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\r\n2020-07-13 23:14:21.994151: I external/org_tensorflow/tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Tesla P100-PCIE-16GB, Compute Capability 6.0\r\n2020-07-13 23:14:21.994593: I external/org_tensorflow/tensorflow/compiler/xla/pjrt/nvidia_gpu_device.cc:109] XLA backend allocating 15121907712 bytes on device 0 for BFCAllocator.\r\n2020-07-13 23:14:22.273783: W external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:70] Can't find libdevice directory ${CUDA_DIR}/nvvm/libdevice. This may result in compilation or runtime failures, if the program we try to run uses routines from libdevice.\r\n2020-07-13 23:14:22.273824: W external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:71] Searched for CUDA in the following directories:\r\n2020-07-13 23:14:22.273839: W external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:74]   ./cuda_sdk_lib\r\n2020-07-13 23:14:22.273849: W external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:74]   /usr/local/cuda-11.0\r\n2020-07-13 23:14:22.273859: W external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:74]   .\r\n2020-07-13 23:14:22.273869: W external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:76] You can choose the search directory by setting xla_gpu_cuda_data_dir in HloModule's DebugOptions.  For most apps, setting the environment variable XLA_FLAGS=--xla_gpu_cuda_data_dir=/path/to/cuda will work.\r\n2020-07-13 23:14:22.303006: W external/org_tensorflow/tensorflow/stream_executor/gpu/asm_compiler.cc:81] Running ptxas --version returned 256\r\n2020-07-13 23:14:22.322283: F external/org_tensorflow/tensorflow/compiler/xla/service/gpu/nvptx_compiler.cc:419] ptxas returned an error during compilation of ptx to sass: 'Internal: ptxas exited with non-zero error code 256, output: '  If the error message indicates that a file could not be written, please verify that sufficient filesystem space is provided.\r\nAborted (core dumped)\r\n```\r\n\r\nThis is what I get when I run `nvidia-smi`\r\n\r\n![image](https://user-images.githubusercontent.com/53244851/87364334-0bcccb80-c539-11ea-891e-e51f4a33fda6.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3734", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3734/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3734/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3734/events", "html_url": "https://github.com/google/jax/issues/3734", "id": 655931774, "node_id": "MDU6SXNzdWU2NTU5MzE3NzQ=", "number": 3734, "title": "`linalg.eigh` precision is too small and backprop unstable", "user": {"login": "JonasRigo", "id": 47185182, "node_id": "MDQ6VXNlcjQ3MTg1MTgy", "avatar_url": "https://avatars3.githubusercontent.com/u/47185182?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JonasRigo", "html_url": "https://github.com/JonasRigo", "followers_url": "https://api.github.com/users/JonasRigo/followers", "following_url": "https://api.github.com/users/JonasRigo/following{/other_user}", "gists_url": "https://api.github.com/users/JonasRigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/JonasRigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JonasRigo/subscriptions", "organizations_url": "https://api.github.com/users/JonasRigo/orgs", "repos_url": "https://api.github.com/users/JonasRigo/repos", "events_url": "https://api.github.com/users/JonasRigo/events{/privacy}", "received_events_url": "https://api.github.com/users/JonasRigo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-13T15:14:39Z", "updated_at": "2020-07-14T08:44:45Z", "closed_at": "2020-07-14T08:44:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Dear `Jax` Developers,\r\n\r\nI'm enjoying a lot your library and currently I try to develop a high precision simulation with your library. Unfortunately I encountered two problems. \r\nFirst it seems, like the eigensolver routine for hermitian matrices is significantly less precise than the one provided by `Numpy`. I tried to reproduce the discrepancy in this example code\r\n\r\n```\r\nimport jax.numpy as jp\r\nfrom jax import ops as jops\r\nimport jax.numpy.linalg as la\r\n\r\nU = 0.3 \r\neps = -0.15\r\nV = 0.1\r\ndim = 4\r\naux_dim = 4\r\n\r\nLambda = 3.\r\n\r\nelemaddedsite = jp.zeros((2,4,4)) \r\nelemaddedsite = jops.index_update(elemaddedsite,jops.index[0,0,3],1.)\r\nelemaddedsite = jops.index_update(elemaddedsite,jops.index[0,1,2],-1.)\r\nelemaddedsite = jops.index_update(elemaddedsite,jops.index[1,0,1],1.)\r\nelemaddedsite = jops.index_update(elemaddedsite,jops.index[1,3,2],1.)\r\nelemaddedsite_index = [[1,3,2],[1,0,1],[0,1,2],[0,0,3]]\r\n\r\nalambda = (Lambda + 1.)/(Lambda - 1.)*jp.log(Lambda)/2. # this factor accounts for the discretation\r\neps /= Lambda\r\nU /= Lambda\r\n\r\nenergies = jp.zeros(dim)\r\nenergies = jops.index_update(energies,[0,1,2,3],[0.,eps,(2.*eps + U),eps]) \r\n\r\nwilson_t = jp.sqrt(alambda/Lambda) * V # * we account for the descrete bath\r\n\r\nelemlastsite = jp.zeros((2,aux_dim,aux_dim))\r\nelemlastsite = jops.index_update(elemlastsite,0,jp.transpose(elemaddedsite[0]))\r\nelemlastsite = jops.index_update(elemlastsite,1,jp.transpose(elemaddedsite[1]))\r\n\r\ndim_new = dim\r\n\r\ndim_new = dim_new*aux_dim\r\n\r\nH = jp.zeros((dim_new,dim_new))\r\n\r\nid = lambda x: dim*x\r\n\r\nfor i in jp.arange(4):  \r\n    H = jops.index_update(H,jops.index[id(i):id(i+1),id(i):id(i+1)], 0.5 * jp.diag(jp.sqrt(Lambda) * energies[0:dim]))\r\n\r\nfor idx in elemaddedsite_index:\r\n    sign, k, kp = idx\r\n    H = jops.index_update(H,jops.index[id(k):id(k+1),id(kp):id(kp+1)],wilson_t * elemlastsite[sign]*elemaddedsite[sign,k,kp] * (-1.)**(k))\r\n\r\nH += H.T\r\n\r\nimport numpy as np\r\nenergies_np, eigs_np = np.linalg.eigh(H,'U')\r\n\r\nenergies_jp, eigs_jp = la.eigh(H,'U')\r\n\r\nprint(energies_np - energies_jp)\r\n\r\nprint(\"\\n\")\r\n\r\nprint(eigs_np-eigs_jp)\r\n\r\nprint(\"\\n\")\r\n\r\nprint(jp.matmul(eigs_jp.T,eigs_jp))\r\n\r\nprint(\"\\n\")\r\n\r\nprint(jp.matmul(eigs_np.T,eigs_np))\r\n```\r\n\r\nIt doesn't look like much, but it causes strongly deviating results from what are known correct results I can reproduce with `Numpy`. \r\n\r\nSecond it seems like Jacobians that propagate through more than one eigensolver backwards are not stable and return `nan`.\r\n\r\nI would be very happy if I could get feedback for these two issues. I apologize if all this can be solved by using float64, but I think that is not the problem.\r\n\r\nThanks, Jonas\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3731", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3731/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3731/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3731/events", "html_url": "https://github.com/google/jax/issues/3731", "id": 655702854, "node_id": "MDU6SXNzdWU2NTU3MDI4NTQ=", "number": 3731, "title": "result of jnp.ones_like in jitted function should not be traced", "user": {"login": "martinjrobins", "id": 1148404, "node_id": "MDQ6VXNlcjExNDg0MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1148404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinjrobins", "html_url": "https://github.com/martinjrobins", "followers_url": "https://api.github.com/users/martinjrobins/followers", "following_url": "https://api.github.com/users/martinjrobins/following{/other_user}", "gists_url": "https://api.github.com/users/martinjrobins/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinjrobins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinjrobins/subscriptions", "organizations_url": "https://api.github.com/users/martinjrobins/orgs", "repos_url": "https://api.github.com/users/martinjrobins/repos", "events_url": "https://api.github.com/users/martinjrobins/events{/privacy}", "received_events_url": "https://api.github.com/users/martinjrobins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-13T09:36:01Z", "updated_at": "2020-07-14T17:12:02Z", "closed_at": "2020-07-14T17:12:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "The output value of `jax.numpy.ones`, with a shape dependent on the shape of the input argument, is a constant in a jitted function. However, the output of `jax.numpy.ones_like` is traced. This behavior is unnecessary and `ones_like` should return a constant array as well.\r\n\r\nTo reproduce:\r\n\r\n```python\r\nimport jax\r\nimport jax.numpy as jnp\r\n\r\n@jax.jit\r\ndef f_ones(arg):\r\n    res = jnp.ones(arg.shape, arg.dtype)\r\n    print(res)\r\n    return res\r\n\r\n@jax.jit\r\ndef f_ones_like(arg):\r\n    res = jnp.ones_like(arg)\r\n    print(res)\r\n    return res\r\n\r\nf_ones(1.)\r\n# 1.0 printed\r\nf_ones(jnp.array([1, 2, 3], dtype=jnp.float32))\r\n# [1. 1. 1.] printed\r\n\r\nf_ones_like(1.)\r\n# Traced<ShapedArray(float32[]):JaxprTrace(level=-1/1)> printed\r\nf_ones_like(jnp.array([1, 2, 3], dtype=jnp.float32)) \r\n# Traced<ShapedArray(float32[3]):JaxprTrace(level=-1/1)> printed\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3727", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3727/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3727/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3727/events", "html_url": "https://github.com/google/jax/issues/3727", "id": 655413338, "node_id": "MDU6SXNzdWU2NTU0MTMzMzg=", "number": 3727, "title": "\"Batching rule for 'primal_fun_lin' not implemented\" error when using `jacfwd`", "user": {"login": "DylanMuir", "id": 1415148, "node_id": "MDQ6VXNlcjE0MTUxNDg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1415148?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DylanMuir", "html_url": "https://github.com/DylanMuir", "followers_url": "https://api.github.com/users/DylanMuir/followers", "following_url": "https://api.github.com/users/DylanMuir/following{/other_user}", "gists_url": "https://api.github.com/users/DylanMuir/gists{/gist_id}", "starred_url": "https://api.github.com/users/DylanMuir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DylanMuir/subscriptions", "organizations_url": "https://api.github.com/users/DylanMuir/orgs", "repos_url": "https://api.github.com/users/DylanMuir/repos", "events_url": "https://api.github.com/users/DylanMuir/events{/privacy}", "received_events_url": "https://api.github.com/users/DylanMuir/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-12T14:42:47Z", "updated_at": "2020-07-14T14:34:01Z", "closed_at": "2020-07-14T14:34:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to compare performance between forward- and backwards-mode autodiff, comparing `jacfwd` and `jacrev`. `jacrev` and `grad` both work as expected on my scalar function; however `jacfwd` raises the following error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n/Users/Shared/anaconda3/envs/py36_tf/lib/python3.6/site-packages/jax/interpreters/batching.py in get_primitive_batcher(p)\r\n    213   try:\r\n--> 214     return primitive_batchers[p]\r\n    215   except KeyError as err:\r\n\r\nKeyError: primal_fun_lin\r\n\r\n...\r\n\r\nUsers/Shared/anaconda3/envs/py36_tf/lib/python3.6/site-packages/jax/interpreters/batching.py in process_primitive(self, primitive, tracers, params)\r\n    131     else:\r\n    132       # TODO(mattjj,phawkins): if no rule implemented, could vmap-via-map here\r\n--> 133       batched_primitive = get_primitive_batcher(primitive)\r\n    134       val_out, dim_out = batched_primitive(vals_in, dims_in, **params)\r\n    135       if primitive.multiple_results:\r\n\r\n/Users/Shared/anaconda3/envs/py36_tf/lib/python3.6/site-packages/jax/interpreters/batching.py in get_primitive_batcher(p)\r\n    215   except KeyError as err:\r\n    216     msg = \"Batching rule for '{}' not implemented\"\r\n--> 217     raise NotImplementedError(msg.format(p)) from err\r\n    218 \r\n    219 def defvectorized(prim):\r\n\r\nNotImplementedError: Batching rule for 'primal_fun_lin' not implemented\r\n```\r\n\r\nHow should I go about determining what operation is causing the issue here, and is there anyway I can provide a \"batching rule\" for the operation?\r\n\r\nThanks for any advice and suggestions!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3718", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3718/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3718/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3718/events", "html_url": "https://github.com/google/jax/issues/3718", "id": 655160709, "node_id": "MDU6SXNzdWU2NTUxNjA3MDk=", "number": 3718, "title": "Shape-checking bug", "user": {"login": "peterdsharpe", "id": 6295985, "node_id": "MDQ6VXNlcjYyOTU5ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/6295985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peterdsharpe", "html_url": "https://github.com/peterdsharpe", "followers_url": "https://api.github.com/users/peterdsharpe/followers", "following_url": "https://api.github.com/users/peterdsharpe/following{/other_user}", "gists_url": "https://api.github.com/users/peterdsharpe/gists{/gist_id}", "starred_url": "https://api.github.com/users/peterdsharpe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peterdsharpe/subscriptions", "organizations_url": "https://api.github.com/users/peterdsharpe/orgs", "repos_url": "https://api.github.com/users/peterdsharpe/repos", "events_url": "https://api.github.com/users/peterdsharpe/events{/privacy}", "received_events_url": "https://api.github.com/users/peterdsharpe/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1631222007, "node_id": "MDU6TGFiZWwxNjMxMjIyMDA3", "url": "https://api.github.com/repos/google/jax/labels/better_errors", "name": "better_errors", "color": "ca51ff", "default": false, "description": "Improve the error reporting"}, {"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-11T08:04:46Z", "updated_at": "2020-07-13T06:24:44Z", "closed_at": "2020-07-12T03:47:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI've encountered a bug with Jax's shape-checking rules that directed me to report to this forum. I've worked down to roughly the minimum self-contained bug-inducing example:\r\n\r\n```python\r\nimport jax.numpy as np\r\nfrom jax import grad, vmap\r\n\r\na = np.arange(4) # example vector\r\nA = np.arange(16).reshape((4, 4)) # example matrix\r\n\r\ndef fun(x):\r\n    x @ A # this line shouldn't do anything, but commenting it out makes this code run without errors!\r\n    return np.sum(a * x)\r\n\r\njac_diag = vmap(grad(fun)) # element-wise gradient\r\n\r\ninput = np.arange(4).astype(float) # example input\r\n\r\nprint(fun(input)) # This runs fine\r\nprint(jac_diag(input)) # This throws a \"shape-checking\" error, see trace below\r\n```\r\nWhen I run this, I get an error with a long stack trace that I've copied to [Pastebin](https://pastebin.com/5ctS14SU). I'm running on Windows 10 with Windows Subsystem for Linux running Ubuntu 18.04, set up as a remote interpreter through PyCharm.\r\n\r\nI suspect it might have something to do with the `@` operator - any ideas here? ~Rewriting that as a series of `np.dot`s might fix the issue~, but I'm curious about what's causing this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3717", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3717/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3717/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3717/events", "html_url": "https://github.com/google/jax/issues/3717", "id": 655114067, "node_id": "MDU6SXNzdWU2NTUxMTQwNjc=", "number": 3717, "title": "Performance issue with sparse dot product using jit/GPU", "user": {"login": "romanodev", "id": 29745326, "node_id": "MDQ6VXNlcjI5NzQ1MzI2", "avatar_url": "https://avatars1.githubusercontent.com/u/29745326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/romanodev", "html_url": "https://github.com/romanodev", "followers_url": "https://api.github.com/users/romanodev/followers", "following_url": "https://api.github.com/users/romanodev/following{/other_user}", "gists_url": "https://api.github.com/users/romanodev/gists{/gist_id}", "starred_url": "https://api.github.com/users/romanodev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/romanodev/subscriptions", "organizations_url": "https://api.github.com/users/romanodev/orgs", "repos_url": "https://api.github.com/users/romanodev/repos", "events_url": "https://api.github.com/users/romanodev/events{/privacy}", "received_events_url": "https://api.github.com/users/romanodev/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1291000112, "node_id": "MDU6TGFiZWwxMjkxMDAwMTEy", "url": "https://api.github.com/repos/google/jax/labels/performance", "name": "performance", "color": "1d64e0", "default": false, "description": "make things lean and fast"}, {"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jekbradbury", "id": 11729078, "node_id": "MDQ6VXNlcjExNzI5MDc4", "avatar_url": "https://avatars2.githubusercontent.com/u/11729078?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jekbradbury", "html_url": "https://github.com/jekbradbury", "followers_url": "https://api.github.com/users/jekbradbury/followers", "following_url": "https://api.github.com/users/jekbradbury/following{/other_user}", "gists_url": "https://api.github.com/users/jekbradbury/gists{/gist_id}", "starred_url": "https://api.github.com/users/jekbradbury/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jekbradbury/subscriptions", "organizations_url": "https://api.github.com/users/jekbradbury/orgs", "repos_url": "https://api.github.com/users/jekbradbury/repos", "events_url": "https://api.github.com/users/jekbradbury/events{/privacy}", "received_events_url": "https://api.github.com/users/jekbradbury/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-07-11T02:09:50Z", "updated_at": "2020-07-11T20:13:23Z", "closed_at": "2020-07-11T13:29:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to compute the dot product between a sparse matrix and a vector.\r\n\r\nThe sparse matrix is represented by its row indexes, column indexes, and associated data (COO format). While everything performs as expected when using jit/CPU, computational times become unreasonable when using GPUs. Here is the gist:\r\n\r\nhttps://gist.github.com/romanodev/c2c2fbfc1e788d3fd5eeeb44803b6761\r\n\r\nThis is my first approach to JAX, so I wouldn't be surprised if there was a working solution already.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3706", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3706/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3706/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3706/events", "html_url": "https://github.com/google/jax/issues/3706", "id": 654286725, "node_id": "MDU6SXNzdWU2NTQyODY3MjU=", "number": 3706, "title": "conv_general_dilated do not support complex number", "user": {"login": "long1216", "id": 19679343, "node_id": "MDQ6VXNlcjE5Njc5MzQz", "avatar_url": "https://avatars0.githubusercontent.com/u/19679343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/long1216", "html_url": "https://github.com/long1216", "followers_url": "https://api.github.com/users/long1216/followers", "following_url": "https://api.github.com/users/long1216/following{/other_user}", "gists_url": "https://api.github.com/users/long1216/gists{/gist_id}", "starred_url": "https://api.github.com/users/long1216/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/long1216/subscriptions", "organizations_url": "https://api.github.com/users/long1216/orgs", "repos_url": "https://api.github.com/users/long1216/repos", "events_url": "https://api.github.com/users/long1216/events{/privacy}", "received_events_url": "https://api.github.com/users/long1216/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 6, "created_at": "2020-07-09T19:11:17Z", "updated_at": "2020-07-17T05:23:31Z", "closed_at": "2020-07-13T18:44:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently shifting a project from autograd to Jax which involve the convolution for complex number. In autograd, the convolution function from autograd/autograd/scipy/signal.py/convolve do not restrict the type of input, it works pretty well. However, neither jax/jax/scipy/signal.py/convolve nor jax/jax/lax/lax.py/conv_general_dilated support the usage of data format, complex64. Would i know if there's any plan for supporting complex64 or any direction for me to make it works like HIPS/autograd library? Thank you so much. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3689", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3689/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3689/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3689/events", "html_url": "https://github.com/google/jax/issues/3689", "id": 653154535, "node_id": "MDU6SXNzdWU2NTMxNTQ1MzU=", "number": 3689, "title": "Programmatically list the \"Numpy\" definitions not implemented by \"jax.numpy\".", "user": {"login": "KelSolaar", "id": 99779, "node_id": "MDQ6VXNlcjk5Nzc5", "avatar_url": "https://avatars1.githubusercontent.com/u/99779?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KelSolaar", "html_url": "https://github.com/KelSolaar", "followers_url": "https://api.github.com/users/KelSolaar/followers", "following_url": "https://api.github.com/users/KelSolaar/following{/other_user}", "gists_url": "https://api.github.com/users/KelSolaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/KelSolaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KelSolaar/subscriptions", "organizations_url": "https://api.github.com/users/KelSolaar/orgs", "repos_url": "https://api.github.com/users/KelSolaar/repos", "events_url": "https://api.github.com/users/KelSolaar/events{/privacy}", "received_events_url": "https://api.github.com/users/KelSolaar/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782286, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg2", "url": "https://api.github.com/repos/google/jax/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": {"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jakevdp", "id": 781659, "node_id": "MDQ6VXNlcjc4MTY1OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/781659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevdp", "html_url": "https://github.com/jakevdp", "followers_url": "https://api.github.com/users/jakevdp/followers", "following_url": "https://api.github.com/users/jakevdp/following{/other_user}", "gists_url": "https://api.github.com/users/jakevdp/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevdp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevdp/subscriptions", "organizations_url": "https://api.github.com/users/jakevdp/orgs", "repos_url": "https://api.github.com/users/jakevdp/repos", "events_url": "https://api.github.com/users/jakevdp/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevdp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-07-08T09:50:00Z", "updated_at": "2020-07-10T06:23:30Z", "closed_at": "2020-07-09T23:31:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to use Jax as a computation backend for [Colour](https://github.com/colour-science/colour) and I have no easy (and fast) way to programmatically find which Numpy definitions are supported or not by `jax.numpy`. The problem is that I can only discover that when they are called.\r\n\r\nWhat I was looking at currently is a mechanism that routes the definitions depending on whether the selected backend and failsafe to Numpy if they do not exist or are not implemented.\r\n\r\nThis is  the relevant content of test `colour.ndarray.backend` module:\r\n\r\n```python\r\n_NDIMENSIONAL_ARRAY_BACKEND = os.environ.get(\r\n    'COLOUR_SCIENCE__NDIMENSIONAL_ARRAY_BACKEND', 'Numpy').lower()\r\n\r\nclass NDimensionalArrayBackend(object):\r\n    def __init__(self):\r\n        import numpy\r\n\r\n        self._failsafe = self._numpy = numpy\r\n\r\n        try:\r\n            import jax.numpy\r\n\r\n            self._jax = jax.numpy\r\n        except ImportError:\r\n            self._jax = None\r\n\r\n    def __getattr__(self, attribute):\r\n        failsafe = getattr(self._failsafe, attribute)\r\n\r\n        if _NDIMENSIONAL_ARRAY_BACKEND == 'numpy':\r\n            return getattr(self._numpy, attribute)\r\n        elif _NDIMENSIONAL_ARRAY_BACKEND == 'jax' and self._jax is not None:\r\n            try:\r\n                return getattr(self._jax, attribute)\r\n            except AttributeError:\r\n                return failsafe\r\n        else:\r\n            return failsafe\r\n```\r\n\r\nThen the `colour.ndarray.__init__` module is implemented as follows:\r\n\r\n```python\r\nfrom __future__ import absolute_import\r\n\r\nimport sys\r\n\r\nfrom .backend import NDimensionalArrayBackend\r\n\r\n\r\nclass ndarray(NDimensionalArrayBackend):\r\n    def __getattr__(self, attribute):\r\n        return super(ndarray, self).__getattr__(attribute)\r\n\r\n\r\nsys.modules['colour.ndarray'] = ndarray()\r\n\r\ndel NDimensionalArrayBackend, sys\r\n```\r\n\r\nThus now instead of `import numpy as np` I can `import colour.ndarray as np` and this route the code accordingly to the `_NDIMENSIONAL_ARRAY_BACKEND` global.\r\n\r\nThe problem is that if some of my code uses a Jax definition that is not implemented, e.g. `np.copy` it raises an exception.\r\n\r\nThe list of not implemented definitions would be trivial to set somewhere when looking at the `jax.numpy.__init__` module here: https://github.com/google/jax/blob/a44bc0c2c05aa4a079eda3995379dab4a63182dc/jax/numpy/__init__.py#L76\r\n\r\nHope that makes sense!\r\n\r\nCheers\r\n\r\nThomas", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3681", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3681/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3681/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3681/events", "html_url": "https://github.com/google/jax/issues/3681", "id": 652523419, "node_id": "MDU6SXNzdWU2NTI1MjM0MTk=", "number": 3681, "title": "`JaxprTracer` Object", "user": {"login": "DarrenZhang01", "id": 29133834, "node_id": "MDQ6VXNlcjI5MTMzODM0", "avatar_url": "https://avatars3.githubusercontent.com/u/29133834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarrenZhang01", "html_url": "https://github.com/DarrenZhang01", "followers_url": "https://api.github.com/users/DarrenZhang01/followers", "following_url": "https://api.github.com/users/DarrenZhang01/following{/other_user}", "gists_url": "https://api.github.com/users/DarrenZhang01/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarrenZhang01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarrenZhang01/subscriptions", "organizations_url": "https://api.github.com/users/DarrenZhang01/orgs", "repos_url": "https://api.github.com/users/DarrenZhang01/repos", "events_url": "https://api.github.com/users/DarrenZhang01/events{/privacy}", "received_events_url": "https://api.github.com/users/DarrenZhang01/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-07T18:17:28Z", "updated_at": "2020-07-08T01:04:26Z", "closed_at": "2020-07-08T01:04:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, could anyone explain to me about the `<class 'jax.interpreters.partial_eval.JaxprTracer'>` object defined in [https://github.com/google/jax/blob/master/jax/interpreters/partial_eval.py](https://github.com/google/jax/blob/master/jax/interpreters/partial_eval.py)? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3678", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3678/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3678/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3678/events", "html_url": "https://github.com/google/jax/issues/3678", "id": 652373748, "node_id": "MDU6SXNzdWU2NTIzNzM3NDg=", "number": 3678, "title": "testExamplesJaxprDoc in Understanding Jaxprs", "user": {"login": "8bitmp3", "id": 19637339, "node_id": "MDQ6VXNlcjE5NjM3MzM5", "avatar_url": "https://avatars3.githubusercontent.com/u/19637339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/8bitmp3", "html_url": "https://github.com/8bitmp3", "followers_url": "https://api.github.com/users/8bitmp3/followers", "following_url": "https://api.github.com/users/8bitmp3/following{/other_user}", "gists_url": "https://api.github.com/users/8bitmp3/gists{/gist_id}", "starred_url": "https://api.github.com/users/8bitmp3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/8bitmp3/subscriptions", "organizations_url": "https://api.github.com/users/8bitmp3/orgs", "repos_url": "https://api.github.com/users/8bitmp3/repos", "events_url": "https://api.github.com/users/8bitmp3/events{/privacy}", "received_events_url": "https://api.github.com/users/8bitmp3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-07T14:32:22Z", "updated_at": "2020-07-08T17:49:24Z", "closed_at": "2020-07-08T17:49:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "@mattjj @j-towns In [Understanding Jaxprs](https://jax.readthedocs.io/en/latest/jaxpr.html), there's a reference to code examples in `jax/tests/api_test::JaxprTest.testExamplesJaxprDoc` but @mattjj mentioned you may want to delete/have already deleted `testExamplesJaxprDoc` here https://github.com/google/jax/pull/2994#issuecomment-625490111. Shall we get rid of the link in the [`jaxpr.rst`](https://github.com/google/jax/blob/master/docs/jaxpr.rst)? Can't find that test in [`api_test.py`](https://github.com/google/jax/blob/master/tests/api_test.py). Cheers! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3677", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3677/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3677/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3677/events", "html_url": "https://github.com/google/jax/issues/3677", "id": 652073346, "node_id": "MDU6SXNzdWU2NTIwNzMzNDY=", "number": 3677, "title": "Convert array to DeviceArray?", "user": {"login": "SamuelMarks", "id": 807580, "node_id": "MDQ6VXNlcjgwNzU4MA==", "avatar_url": "https://avatars0.githubusercontent.com/u/807580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamuelMarks", "html_url": "https://github.com/SamuelMarks", "followers_url": "https://api.github.com/users/SamuelMarks/followers", "following_url": "https://api.github.com/users/SamuelMarks/following{/other_user}", "gists_url": "https://api.github.com/users/SamuelMarks/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamuelMarks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamuelMarks/subscriptions", "organizations_url": "https://api.github.com/users/SamuelMarks/orgs", "repos_url": "https://api.github.com/users/SamuelMarks/repos", "events_url": "https://api.github.com/users/SamuelMarks/events{/privacy}", "received_events_url": "https://api.github.com/users/SamuelMarks/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-07T07:26:08Z", "updated_at": "2020-07-10T23:36:54Z", "closed_at": "2020-07-10T23:36:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "IIRC, it's not possible to do a direct conversion/promotion/memory-mapping/move.\r\n\r\nI've tried replacing all imports from `import numpy as np` to `import jax.numpy as jnp`, but I'm still calling `as_numpy` or `numpy` on something produced by TensorFlow, which naturally doesn't use the type I want.\r\n\r\nMaybe I could monkeypatch numpy on the module hierachy?\r\n\r\nOr is there actually a direct way to turn a `tf.Tensor`\u2014or `np.ndarray`\u2014to a `DeviceArray`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3672", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3672/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3672/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3672/events", "html_url": "https://github.com/google/jax/issues/3672", "id": 651777780, "node_id": "MDU6SXNzdWU2NTE3Nzc3ODA=", "number": 3672, "title": "Rename jax.nn.swish to jax.nn.silu to give appropriate credit", "user": {"login": "TFUsers", "id": 25044281, "node_id": "MDQ6VXNlcjI1MDQ0Mjgx", "avatar_url": "https://avatars3.githubusercontent.com/u/25044281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TFUsers", "html_url": "https://github.com/TFUsers", "followers_url": "https://api.github.com/users/TFUsers/followers", "following_url": "https://api.github.com/users/TFUsers/following{/other_user}", "gists_url": "https://api.github.com/users/TFUsers/gists{/gist_id}", "starred_url": "https://api.github.com/users/TFUsers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TFUsers/subscriptions", "organizations_url": "https://api.github.com/users/TFUsers/orgs", "repos_url": "https://api.github.com/users/TFUsers/repos", "events_url": "https://api.github.com/users/TFUsers/events{/privacy}", "received_events_url": "https://api.github.com/users/TFUsers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-06T19:45:54Z", "updated_at": "2020-07-06T22:08:17Z", "closed_at": "2020-07-06T22:08:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "The swish was originally coined the \"SiLU\" in https://arxiv.org/pdf/1606.08415.pdf and https://arxiv.org/abs/1702.03118 long before the swish paper. Renaming other peoples' exact same ideas is unacceptable and tensorflow's naming convention implicitly erases the research and work of people outside of Google.\r\nThis request inspired by a [recent discussion](https://www.reddit.com/r/MachineLearning/comments/hkiyir/r_google_has_a_credit_assignment_problem_in/) and a recent [tensorflow issue](https://github.com/tensorflow/tensorflow/issues/41066), but this problem has been brought up every few months for the past few years. In light of recent efforts to make the ML community more equitable and _fair_, this is a no-brainer and long overdue.\r\n\r\n**Will this change the current api? How?**\r\njax.nn.swish will eventually be deprecated (jax is still new) and jax.nn.silu will be added and both of the aforementioned papers will be cited in the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3667", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3667/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3667/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3667/events", "html_url": "https://github.com/google/jax/issues/3667", "id": 651297301, "node_id": "MDU6SXNzdWU2NTEyOTczMDE=", "number": 3667, "title": "How do you nest implementations of VJP?", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2020-07-06T06:57:05Z", "updated_at": "2020-07-11T20:21:52Z", "closed_at": "2020-07-11T20:21:52Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "If I have a function `f` that has a VJP.  Can I somehow build a VJP on top of it for some function `g`?  My use case is that the backwards pass of `g` is quite complicated and makes multiple calls to `f_vjp`.   Here's a simplified example:\r\n```python\r\nfrom jax import vjp, custom_vjp\r\n\r\ndef f(x):\r\n    return x ** 2\r\n\r\n@custom_vjp\r\ndef g(x):\r\n    return f(x)\r\n\r\ndef g_fwd(x):\r\n    return vjp(f, x)\r\n\r\ndef g_bwd(f_vjp, y_bar):\r\n    return f_vjp(y_bar)\r\n\r\ng.defvjp(g_fwd, g_bwd)\r\ny, g_vjp = vjp(g, 1.0)\r\n```\r\nThis prints: `TypeError: <class 'functools.partial'> is not a valid JAX type` because `vjp` returns a `functool.partial` instance instead of a pytree.  It should be possible for `vjp` to return a pytree-like callable instead since internally `vjp(f, x)` produces residuals that must be pytree-like.  It's just unfortunate that when they're wrapped up into a callable, then that callable is not pytree-like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3666", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3666/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3666/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3666/events", "html_url": "https://github.com/google/jax/issues/3666", "id": 651189917, "node_id": "MDU6SXNzdWU2NTExODk5MTc=", "number": 3666, "title": "Is there a way to alter an expression so that it assumes that particular tracers are zero? ", "user": {"login": "NeilGirdhar", "id": 730137, "node_id": "MDQ6VXNlcjczMDEzNw==", "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeilGirdhar", "html_url": "https://github.com/NeilGirdhar", "followers_url": "https://api.github.com/users/NeilGirdhar/followers", "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}", "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions", "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs", "repos_url": "https://api.github.com/users/NeilGirdhar/repos", "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}", "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-06T01:29:39Z", "updated_at": "2020-07-08T06:54:58Z", "closed_at": "2020-07-06T13:32:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I have a machine learning model like\r\n```python\r\nModel = Tuple[float, float]\r\n```\r\nAnd a pair of losses\r\n```python\r\nLosses = Tuple[float, float]\r\n```\r\nDifferent parameters in the model are supposed to use different loss terms.  So my training looks something like:\r\n```python\r\ndef infer_and_train(model: Model) -> Tuple[Configuration, Model]:\r\n    (c, l), f_vjp = vjp(configuration_and_losses, model)\r\n    model_bars = [f_vjp(jnp.zeros_like(c), x) for x in [(1.0, 0.0), (0.0, 1.0)]]\r\n    new_model = tuple(model[i] - model_bars[i][i] * learning_rate\r\n                      for i in range(2))\r\n    return c, new_model\r\n```\r\nThis is necessary to prevent multiple calls to produce the configuration, which are expensive.\r\n\r\nWould it be possible to add a JAX primitive like:\r\n```python\r\ndef assume_zero(x: PyTree, y: PyTree) -> PyTree:\r\n    \"Returns a copy of x whereby all tracers in y are assumed to be zero.\"\r\n```\r\nThen, I could\r\n- avoid the multiple calls to f_vjp, and\r\n- embed the training of this model in a larger model without having to worry about the multiple vjp calls through the larger model being expensive: \r\n```python\r\n@jit  # Jitting ensures that the arguments are transformed into tracers that can be used by assume_zero.\r\ndef g(f_vjp, c_bar, losses_bar):\r\n    # Produce model_bar\r\n    model_bar = f_vjp(c_bar, losses_bar)\r\n    # Block gradients.\r\n    return (assume_zero(model_bar[0], losses_bar[1]),\r\n            assume_zero(model_bar[1], losses_bar[0]))\r\n\r\n\r\ndef infer_and_train(model: Model) -> Tuple[Configuration, Model]:\r\n    (c, l), f_vjp = vjp(configuration_and_losses, model)\r\n    model_bar = g(f_vjp, jnp.zeros_like(c), (1.0, 1.0))\r\n    new_model = [model[i] - model_bars[i] * learning_rate\r\n                 for i in range(2)]\r\n    return c, new_model\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3662", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3662/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3662/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3662/events", "html_url": "https://github.com/google/jax/issues/3662", "id": 650990059, "node_id": "MDU6SXNzdWU2NTA5OTAwNTk=", "number": 3662, "title": "broken link from pytree_util api docs to 'pytrees notebook'", "user": {"login": "bionicles", "id": 24532336, "node_id": "MDQ6VXNlcjI0NTMyMzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/24532336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bionicles", "html_url": "https://github.com/bionicles", "followers_url": "https://api.github.com/users/bionicles/followers", "following_url": "https://api.github.com/users/bionicles/following{/other_user}", "gists_url": "https://api.github.com/users/bionicles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bionicles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bionicles/subscriptions", "organizations_url": "https://api.github.com/users/bionicles/orgs", "repos_url": "https://api.github.com/users/bionicles/repos", "events_url": "https://api.github.com/users/bionicles/events{/privacy}", "received_events_url": "https://api.github.com/users/bionicles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 1, "created_at": "2020-07-05T02:57:51Z", "updated_at": "2020-07-06T06:04:03Z", "closed_at": "2020-07-06T06:04:03Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "the bottom of the top introduction on this page:\r\nhttps://jax.readthedocs.io/en/latest/jax.tree_util.html\r\n\r\nreads: \r\n\r\n> See the [JAX pytrees notebook](https://jax.readthedocs.io/en/latest/notebooks/JAX_pytrees.html) for examples.\r\n\r\n(this is written here: https://github.com/google/jax/blob/269da0ae584cfe840f34e9f871f13c28e2772de5/jax/tree_util.py#L34)\r\n\r\nis this the correct link? or are we missing a notebook?\r\nhttps://jax.readthedocs.io/en/latest/pytrees.html\r\n\r\njust curious because tree_util is my new favorite thing...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3655", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3655/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3655/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3655/events", "html_url": "https://github.com/google/jax/issues/3655", "id": 650765135, "node_id": "MDU6SXNzdWU2NTA3NjUxMzU=", "number": 3655, "title": "FAILED: Build did NOT complete successfully", "user": {"login": "ElhamSol", "id": 63062486, "node_id": "MDQ6VXNlcjYzMDYyNDg2", "avatar_url": "https://avatars0.githubusercontent.com/u/63062486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ElhamSol", "html_url": "https://github.com/ElhamSol", "followers_url": "https://api.github.com/users/ElhamSol/followers", "following_url": "https://api.github.com/users/ElhamSol/following{/other_user}", "gists_url": "https://api.github.com/users/ElhamSol/gists{/gist_id}", "starred_url": "https://api.github.com/users/ElhamSol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ElhamSol/subscriptions", "organizations_url": "https://api.github.com/users/ElhamSol/orgs", "repos_url": "https://api.github.com/users/ElhamSol/repos", "events_url": "https://api.github.com/users/ElhamSol/events{/privacy}", "received_events_url": "https://api.github.com/users/ElhamSol/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1179370783, "node_id": "MDU6TGFiZWwxMTc5MzcwNzgz", "url": "https://api.github.com/repos/google/jax/labels/build", "name": "build", "color": "fbca04", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 12, "created_at": "2020-07-03T20:59:38Z", "updated_at": "2020-07-07T16:59:06Z", "closed_at": "2020-07-06T18:35:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to build JAX from the source on ubuntu 18.04, cuda 10.1, cudnn7.6\r\n\r\nI followed the steps here https://jax.readthedocs.io/en/latest/developer.html#building-from-source\r\n\r\nBut the build fails  after `sudo python3 build/build.py --enable_cuda` or even `sudo python3 build/build.py`\r\n\r\nCould you help me resolve this issue? \r\n\r\n```\r\nTarget //build:install_xla_in_source_tree failed to build\r\nINFO: Elapsed time: 742.118s, Critical Path: 113.95s\r\nINFO: 4271 processes: 4271 local.\r\nFAILED: Build did NOT complete successfully\r\nERROR: Build failed. Not running target\r\nFAILED: Build did NOT complete successfully\r\nTraceback (most recent call last):\r\n  File \"build/build.py\", line 382, in <module>\r\n    main()\r\n  File \"build/build.py\", line 377, in main\r\n    shell(command)\r\n  File \"build/build.py\", line 47, in shell\r\n    output = subprocess.check_output(cmd)\r\n  File \"/usr/lib/python3.7/subprocess.py\", line 411, in check_output\r\n    **kwargs).stdout\r\n  File \"/usr/lib/python3.7/subprocess.py\", line 512, in run\r\n    output=stdout, stderr=stderr)\r\nsubprocess.CalledProcessError: Command '['./bazel-2.0.0-linux-x86_64', 'run', '--verbose_failures=true', '--config=short_logs', '--config=opt', '--config=mkl_open_source_only', '--config=cuda', '--define=xla_python_enable_gpu=true', ':install_xla_in_source_tree', '/home/mibcat01/jax/build']' returned non-zero exit status 1.\r\n```\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3654", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3654/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3654/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3654/events", "html_url": "https://github.com/google/jax/issues/3654", "id": 650713012, "node_id": "MDU6SXNzdWU2NTA3MTMwMTI=", "number": 3654, "title": "bad error message when `one_hot` gets a non-static parameter", "user": {"login": "psc-g", "id": 20324657, "node_id": "MDQ6VXNlcjIwMzI0NjU3", "avatar_url": "https://avatars1.githubusercontent.com/u/20324657?v=4", "gravatar_id": "", "url": "https://api.github.com/users/psc-g", "html_url": "https://github.com/psc-g", "followers_url": "https://api.github.com/users/psc-g/followers", "following_url": "https://api.github.com/users/psc-g/following{/other_user}", "gists_url": "https://api.github.com/users/psc-g/gists{/gist_id}", "starred_url": "https://api.github.com/users/psc-g/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/psc-g/subscriptions", "organizations_url": "https://api.github.com/users/psc-g/orgs", "repos_url": "https://api.github.com/users/psc-g/repos", "events_url": "https://api.github.com/users/psc-g/events{/privacy}", "received_events_url": "https://api.github.com/users/psc-g/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1631222007, "node_id": "MDU6TGFiZWwxNjMxMjIyMDA3", "url": "https://api.github.com/repos/google/jax/labels/better_errors", "name": "better_errors", "color": "ca51ff", "default": false, "description": "Improve the error reporting"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-07-03T17:50:09Z", "updated_at": "2020-07-04T03:54:26Z", "closed_at": "2020-07-04T03:54:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "the following line: `replay_action_one_hot = jax.nn.one_hot(replay_elements['action'], num_actions)`\r\ncauses the following error:\r\n\r\n```\r\nException: The numpy.ndarray conversion method __array__() was called on the JAX Tracer object Traced<ShapedArray(int32[], weak_type=True):JaxprTrace(level=-1/1)>.\r\n\r\nThis error can occur when a JAX Tracer object is passed to a raw numpy function, or a method on a numpy.ndarray object. You might want to check that you are using `jnp` together with `import jax.numpy as jnp` rather than using `np` via `import numpy as np`. If this error arises on a line that involves array indexing, like `x[idx]`, it may be that the array being indexed `x` is a raw numpy.ndarray while the indices `idx` are a JAX Tracer instance; in that case, you can instead write `jax.device_put(x)[idx]`.\r\n```\r\n\r\nthe context around the line in question:\r\n```\r\n(Pdb) type(replay_elements['action'])\r\n<class 'jax.interpreters.partial_eval.JaxprTracer'>\r\n(Pdb) replay_elements['action'].shape\r\n(128,)\r\n(Pdb) type(num_actions)\r\n<class 'jax.interpreters.partial_eval.JaxprTracer'>\r\n(Pdb) num_actions.shape\r\n()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3651", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3651/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3651/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3651/events", "html_url": "https://github.com/google/jax/issues/3651", "id": 650647243, "node_id": "MDU6SXNzdWU2NTA2NDcyNDM=", "number": 3651, "title": "Meta-Gradient causes \"TypeError: <class 'jax.ad_util.Zero'> is not a valid JAX type\"", "user": {"login": "thomaskeck", "id": 6443248, "node_id": "MDQ6VXNlcjY0NDMyNDg=", "avatar_url": "https://avatars3.githubusercontent.com/u/6443248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaskeck", "html_url": "https://github.com/thomaskeck", "followers_url": "https://api.github.com/users/thomaskeck/followers", "following_url": "https://api.github.com/users/thomaskeck/following{/other_user}", "gists_url": "https://api.github.com/users/thomaskeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaskeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaskeck/subscriptions", "organizations_url": "https://api.github.com/users/thomaskeck/orgs", "repos_url": "https://api.github.com/users/thomaskeck/repos", "events_url": "https://api.github.com/users/thomaskeck/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaskeck/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-03T14:58:44Z", "updated_at": "2020-07-06T09:25:24Z", "closed_at": "2020-07-03T17:00:25Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nI discovered the following unexpected behaviour while calculating meta-gradients (gradients through gradients) with JAX.\r\n\r\n```\r\nimport jax\r\nfrom jax import lax\r\nfrom jax import numpy as jnp\r\n\r\ndef loss(params, meta_params):\r\n  (net, mpo) = params\r\n  return meta_params * mpo * net\r\n\r\ndef inner(meta_params, params):\r\n  grads = jax.grad(loss)(params, meta_params)\r\n  grads = lax.psum(grads, axis_name=\"i\")\r\n  net_grads, mpo_grads = grads\r\n  net = params[0] + net_grads\r\n  mpo = params[1]                           # Does not work!\r\n  # mpo = params[1] + mpo_grads  # Works if I add mpo_grads\r\n  return mpo * net\r\n\r\ndef outer(params):\r\n  meta_params = jnp.array(1.0)\r\n  return jax.grad(inner)(meta_params, params)\r\n\r\nparams = (jnp.array([1.0]), jnp.array([1.0]))\r\nlearner_output = jax.pmap(outer, axis_name='i')(params)\r\n```\r\n\r\nOutputs\r\n\r\n```\r\n[....]\r\njax/core.py in concrete_aval(x)\r\n    778     handler = pytype_aval_mappings.get(typ)\r\n    779     if handler: return handler(x)\r\n--> 780   raise TypeError(f\"{type(x)} is not a valid JAX type\")\r\n    781 \r\n    782 \r\n\r\nTypeError: <class 'jax.ad_util.Zero'> is not a valid JAX type\r\n```\r\n\r\nThis only appears inside a pmap (both CPU and TPU as backend throw the same error).\r\nThe same code works without pmap, when using jit (or vmap), or if the psum is removed.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3650", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3650/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3650/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3650/events", "html_url": "https://github.com/google/jax/issues/3650", "id": 650547805, "node_id": "MDU6SXNzdWU2NTA1NDc4MDU=", "number": 3650, "title": "Broadcast batch elements in vmap", "user": {"login": "hamzamerzic", "id": 10846014, "node_id": "MDQ6VXNlcjEwODQ2MDE0", "avatar_url": "https://avatars1.githubusercontent.com/u/10846014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hamzamerzic", "html_url": "https://github.com/hamzamerzic", "followers_url": "https://api.github.com/users/hamzamerzic/followers", "following_url": "https://api.github.com/users/hamzamerzic/following{/other_user}", "gists_url": "https://api.github.com/users/hamzamerzic/gists{/gist_id}", "starred_url": "https://api.github.com/users/hamzamerzic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hamzamerzic/subscriptions", "organizations_url": "https://api.github.com/users/hamzamerzic/orgs", "repos_url": "https://api.github.com/users/hamzamerzic/repos", "events_url": "https://api.github.com/users/hamzamerzic/events{/privacy}", "received_events_url": "https://api.github.com/users/hamzamerzic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782285, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg1", "url": "https://api.github.com/repos/google/jax/labels/duplicate", "name": "duplicate", "color": "cfd3d7", "default": true, "description": "This issue or pull request already exists"}, {"id": 1104782286, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg2", "url": "https://api.github.com/repos/google/jax/labels/enhancement", "name": "enhancement", "color": "a2eeef", "default": true, "description": "New feature or request"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-07-03T11:51:56Z", "updated_at": "2020-07-03T22:49:53Z", "closed_at": "2020-07-03T22:49:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be great to have a way of obtaining elements of a mini batch from within `vmap`, i.e. an equivalent of `pmap's` [all_gather](https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.all_gather.html).\r\n\r\nAbstracting away the batch dimension seems like one of the core JAX features, but there are a lot of use cases where batch information is necessary. Some that come to mind are normalizing modules, such as BatchNorm, or contrastive estimation which often depends on positive/negative samples across the minibatch.\r\n\r\nRelated to this, are there any plans to unify `vmap` and `pmap` and potentially expose the rest of the parallel operators for use with `vmap`?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3638", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3638/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3638/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3638/events", "html_url": "https://github.com/google/jax/issues/3638", "id": 649845649, "node_id": "MDU6SXNzdWU2NDk4NDU2NDk=", "number": 3638, "title": "pmap correct usage", "user": {"login": "AdrienCorenflos", "id": 19948263, "node_id": "MDQ6VXNlcjE5OTQ4MjYz", "avatar_url": "https://avatars1.githubusercontent.com/u/19948263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdrienCorenflos", "html_url": "https://github.com/AdrienCorenflos", "followers_url": "https://api.github.com/users/AdrienCorenflos/followers", "following_url": "https://api.github.com/users/AdrienCorenflos/following{/other_user}", "gists_url": "https://api.github.com/users/AdrienCorenflos/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdrienCorenflos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdrienCorenflos/subscriptions", "organizations_url": "https://api.github.com/users/AdrienCorenflos/orgs", "repos_url": "https://api.github.com/users/AdrienCorenflos/repos", "events_url": "https://api.github.com/users/AdrienCorenflos/events{/privacy}", "received_events_url": "https://api.github.com/users/AdrienCorenflos/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-07-02T11:10:12Z", "updated_at": "2020-07-04T16:48:18Z", "closed_at": "2020-07-04T12:50:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhat is the correct way of parallelising across devices for batch data that is bigger than the number of devices you have?\r\n\r\nSo far I am doing something like the following:\r\n\r\n```python\r\nfrom jax import jit, pmap, device_count\r\nimport jax.numpy as jnp\r\n\r\n@jjit\r\ndef fun(z):\r\n    return jnp.sum(z, -1)\r\n\r\n__pfun = pmap(fun)\r\n\r\ndef _pfun(z, n):\r\n    zs = jnp.stack(jnp.split(z, n))\r\n    return __pfun(zs).flatten()\r\n\r\npfun = jjit(_pfun, static_argnums=1)\r\npfun(x, device_count())\r\n```\r\n\r\nThis feels a bit wrong to me to virtually have to split, then join then split again (implicitly in the pmap) then join again.\r\n\r\nThanks,\r\n\r\nAdrien\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3622", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3622/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3622/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3622/events", "html_url": "https://github.com/google/jax/issues/3622", "id": 649028430, "node_id": "MDU6SXNzdWU2NDkwMjg0MzA=", "number": 3622, "title": "How to select the jax  release version", "user": {"login": "XDongiang", "id": 43576361, "node_id": "MDQ6VXNlcjQzNTc2MzYx", "avatar_url": "https://avatars0.githubusercontent.com/u/43576361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XDongiang", "html_url": "https://github.com/XDongiang", "followers_url": "https://api.github.com/users/XDongiang/followers", "following_url": "https://api.github.com/users/XDongiang/following{/other_user}", "gists_url": "https://api.github.com/users/XDongiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/XDongiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XDongiang/subscriptions", "organizations_url": "https://api.github.com/users/XDongiang/orgs", "repos_url": "https://api.github.com/users/XDongiang/repos", "events_url": "https://api.github.com/users/XDongiang/events{/privacy}", "received_events_url": "https://api.github.com/users/XDongiang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-01T14:28:39Z", "updated_at": "2020-07-01T14:58:07Z", "closed_at": "2020-07-01T14:31:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Taking a look again, it looks to me like this issue is resolved at head.\r\n\r\nMy version of the benchmark looks like this:\r\n```\r\nfrom jax import device_put\r\nimport numpy as onp\r\nimport jax.numpy as np\r\nfrom jax import vmap\r\nfrom functools import partial\r\nimport time\r\nfrom jax import jit\r\nfrom jax import grad\r\n\r\ndef invm_plus(Pb,Pc):\r\n    Pbc = Pb + Pc\r\n    _Pbc = Pbc * np.array([-1,-1,-1,1])\r\n    return np.sum(Pbc * _Pbc,axis=1)\r\n\r\ndef invm(Pbc):\r\n    _Pbc = Pbc * np.array([-1,-1,-1,1])\r\n    return np.sum(Pbc * _Pbc,axis=1)\r\n\r\ndef BW(m_,w_,Sbc):\r\n    i = complex(0,1)\r\n    gamma=np.sqrt(m_*m_*(m_*m_+w_*w_))\r\n    k = np.sqrt(2*np.sqrt(2)*m_*np.abs(w_)*gamma/np.pi/np.sqrt(m_*m_+gamma))\r\n    return k/(m_*m_ - Sbc - i*m_*w_)\r\n\r\ndef phase(theta, rho):\r\n    i = complex(0,1)\r\n    return rho * np.exp(theta*i)\r\n\r\ndef _abs(bw_):\r\n    conjbw = np.conj(bw_)\r\n    return np.real(bw_*conjbw)\r\n\r\nKp = onp.random.sample(80000*4).reshape(80000,4)\r\nKm = onp.random.sample(80000*4).reshape(80000,4)\r\nPip = onp.random.sample(80000*4).reshape(80000,4)\r\nPim = onp.random.sample(80000*4).reshape(80000,4)\r\nphif001 = onp.random.sample(80000*2).reshape(80000,2)\r\nphif021 = onp.random.sample(80000*2).reshape(80000,2)\r\n\r\nphif0 = np.asarray([phif001,phif021])\r\nphi = invm_plus(Kp,Km)\r\nf0 = invm_plus(Pip,Pim)\r\n\r\nphim = np.array([2.,1.,1.,1.,2.,1.,1.,1.])\r\nphiw = np.array([1.,2.,1.,1.,2.,1.,1.,1.])\r\nf0m = np.array([1.,1.,1.,3.,1.,1.,1.,1.])\r\nf0w = np.array([1.,1.,1.,1.,1.,1.,1.,1.])\r\nconst = np.array([[2.,1.,1.,1.,1.,1.,1.,1.],[1.,1.,1.,1.,1.,1.,1.,1.]])\r\nrho = np.array([1.,1.,2.,1.,1.,1.,1.,1.])\r\ntheta = np.array([1.,1.,1.,1.,3.,1.,3.,1.])\r\n\r\n\r\ndef BW_f0(phim,phiw,f0m,f0w,phi,f0):\r\n    return vmap(partial(BW,Sbc=phi))(phim,phiw) * vmap(partial(BW,Sbc=f0))(f0m,f0w)\r\n\r\ndef phase_f0(theta_,rho_):\r\n    result = vmap(phase)(theta_,rho_)\r\n    return result\r\n\r\ndef test_pw(phim,phiw,f0m,f0w,const,rho,theta,phif0,phi,f0):\r\n    ph = phase_f0(theta,rho)\r\n    bw = BW_f0(phim,phiw,f0m,f0w,phi,f0)\r\n    const_phase = np.einsum('ij,j->ij',const,ph)\r\n    _phif0 = np.einsum('ijk,il->ljk',phif0,const_phase)\r\n    _phif0 = np.einsum('ijk,ij->jk',_phif0,bw)\r\n    _phif0 = np.real(np.sum(_abs(_phif0),axis=1))\r\n    return -np.sum(np.log(_phif0))\r\n\r\ntest_pw_jit = jit(test_pw)\r\n\r\nprint(test_pw_jit(phim,phiw,f0m,f0w,const,rho,theta,phif0,phi,f0))\r\n\r\nm = (0,1,2,3,4,5,6)\r\ngrad_test_pw = jit(grad(test_pw_jit,argnums=m))\r\n_ = grad_test_pw(phim,phiw,f0m,f0w,const,rho,theta,phif0,phi,f0)[0].block_until_ready()\r\ns = time.time()\r\nprint(grad_test_pw(phim,phiw,f0m,f0w,const,rho,theta,phif0,phi,f0))\r\ne = time.time()\r\nprint(\"time : \", e - s)\r\n\r\ndef test_pw1(phim,phiw,f0m,f0w,theta,rho,const,phif001,phif021,phi,f0):\r\n    temp = np.zeros(80000)\r\n    for i in range(8):\r\n        bw = BW(phim[i],phiw[i],phi) * BW(f0m[i],f0w[i],f0)\r\n        _phif001 = phif001.T * bw *const[0,i]\r\n        _phif021 = phif021.T * bw *const[1,i]\r\n        _phif0 = (_phif001 + _phif021) * phase(theta[i],rho[i])\r\n        temp = temp + _phif0\r\n    data = np.real(np.sum(_abs(temp),axis=0))\r\n    return -np.sum(np.log(data))\r\n\r\ngrad_test_pw1 = jit(grad(test_pw1,argnums=m))\r\n\r\n#print(test_pw1_jit(phim,phiw,f0m,f0w,theta,rho,const,phif001,phif021,phi,f0))\r\n_ = grad_test_pw1(phim,phiw,f0m,f0w,theta,rho,const,phif001,phif021,phi,f0)[0].block_until_ready()\r\ns = time.time()\r\nprint(grad_test_pw1(phim,phiw,f0m,f0w,theta,rho,const,phif001,phif021,phi,f0))\r\ne = time.time()\r\nprint(\"time : \", e - s)\r\n```\r\n\r\nBoth versions seem roughly equal in performance, around 4-5ms on a P100.\r\n\r\n_Originally posted by @hawkinsp in https://github.com/google/jax/issues/1763#issuecomment-614885455_\r\n***********************************\r\nPlease tell me the JAX version you are using.\r\nIs the version of cuda and cudnn matter?\r\nI want use complex in my function , but i do not know the faster method to use complex in jax.\r\nplease give me some help", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3621", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3621/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3621/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3621/events", "html_url": "https://github.com/google/jax/issues/3621", "id": 648977826, "node_id": "MDU6SXNzdWU2NDg5Nzc4MjY=", "number": 3621, "title": "[jax2tf] Incorrect out of bound index handling for lax.dynamic_slice", "user": {"login": "tberghammer", "id": 10619060, "node_id": "MDQ6VXNlcjEwNjE5MDYw", "avatar_url": "https://avatars1.githubusercontent.com/u/10619060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tberghammer", "html_url": "https://github.com/tberghammer", "followers_url": "https://api.github.com/users/tberghammer/followers", "following_url": "https://api.github.com/users/tberghammer/following{/other_user}", "gists_url": "https://api.github.com/users/tberghammer/gists{/gist_id}", "starred_url": "https://api.github.com/users/tberghammer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tberghammer/subscriptions", "organizations_url": "https://api.github.com/users/tberghammer/orgs", "repos_url": "https://api.github.com/users/tberghammer/repos", "events_url": "https://api.github.com/users/tberghammer/events{/privacy}", "received_events_url": "https://api.github.com/users/tberghammer/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "gnecula", "id": 3890983, "node_id": "MDQ6VXNlcjM4OTA5ODM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3890983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnecula", "html_url": "https://github.com/gnecula", "followers_url": "https://api.github.com/users/gnecula/followers", "following_url": "https://api.github.com/users/gnecula/following{/other_user}", "gists_url": "https://api.github.com/users/gnecula/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnecula/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnecula/subscriptions", "organizations_url": "https://api.github.com/users/gnecula/orgs", "repos_url": "https://api.github.com/users/gnecula/repos", "events_url": "https://api.github.com/users/gnecula/events{/privacy}", "received_events_url": "https://api.github.com/users/gnecula/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-07-01T13:22:04Z", "updated_at": "2020-07-06T06:17:26Z", "closed_at": "2020-07-04T12:53:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "To reproduce, add the following test to jax/experimental/jax2tf/tests/primitives_test.py:\r\n```\r\ndef test_dynamic_slice_oob(self):\r\n    v = np.array([1, 2])\r\n    f_jax = jax.jit(lambda a: lax.dynamic_slice(a, [5], [1]))\r\n    self.ConvertAndCompare(f_jax, v)\r\n```\r\n\r\nThe issue is that dynamic_slice have clamping behaviour for the indices but when we translate it into a tf.slice we lose this behaviour so it will assert during tf2xla translation due to the out of bound index.\r\n\r\nThe two solution I see is either to clamp the index during translation so we can use tf.slice (and hope that it won't impact performance too much) or use tfxla.dynamic_slice what has the clamping semantics.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3613", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3613/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3613/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3613/events", "html_url": "https://github.com/google/jax/issues/3613", "id": 648504170, "node_id": "MDU6SXNzdWU2NDg1MDQxNzA=", "number": 3613, "title": "Improve error message w/ incorrect out_axes argument to vmap", "user": {"login": "tgale96", "id": 11335648, "node_id": "MDQ6VXNlcjExMzM1NjQ4", "avatar_url": "https://avatars0.githubusercontent.com/u/11335648?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgale96", "html_url": "https://github.com/tgale96", "followers_url": "https://api.github.com/users/tgale96/followers", "following_url": "https://api.github.com/users/tgale96/following{/other_user}", "gists_url": "https://api.github.com/users/tgale96/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgale96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgale96/subscriptions", "organizations_url": "https://api.github.com/users/tgale96/orgs", "repos_url": "https://api.github.com/users/tgale96/repos", "events_url": "https://api.github.com/users/tgale96/events{/privacy}", "received_events_url": "https://api.github.com/users/tgale96/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1631222007, "node_id": "MDU6TGFiZWwxNjMxMjIyMDA3", "url": "https://api.github.com/repos/google/jax/labels/better_errors", "name": "better_errors", "color": "ca51ff", "default": false, "description": "Improve the error reporting"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-06-30T21:23:37Z", "updated_at": "2020-07-01T05:19:17Z", "closed_at": "2020-07-01T05:19:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "[This colab](https://colab.research.google.com/drive/1DWziQYqL-tiZHvtSiCz8QJlQtkTSqlq8?usp=sharing) shows an incorrect use of vmap where more `out_axes` arguments are passed than the number of outputs in the mapped function. The error message does not indicate that the issue is with the `out_axes` argument, as opposed to the `in_axes` argument. It would be nice to improve this so that it's clear where the issue is.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3607", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3607/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3607/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3607/events", "html_url": "https://github.com/google/jax/issues/3607", "id": 648114609, "node_id": "MDU6SXNzdWU2NDgxMTQ2MDk=", "number": 3607, "title": "Dimension is lost when indexing numpy with singleton jax.numpy", "user": {"login": "MichaelMathieu", "id": 1437845, "node_id": "MDQ6VXNlcjE0Mzc4NDU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1437845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MichaelMathieu", "html_url": "https://github.com/MichaelMathieu", "followers_url": "https://api.github.com/users/MichaelMathieu/followers", "following_url": "https://api.github.com/users/MichaelMathieu/following{/other_user}", "gists_url": "https://api.github.com/users/MichaelMathieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/MichaelMathieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MichaelMathieu/subscriptions", "organizations_url": "https://api.github.com/users/MichaelMathieu/orgs", "repos_url": "https://api.github.com/users/MichaelMathieu/repos", "events_url": "https://api.github.com/users/MichaelMathieu/events{/privacy}", "received_events_url": "https://api.github.com/users/MichaelMathieu/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-30T11:59:39Z", "updated_at": "2020-06-30T16:51:38Z", "closed_at": "2020-06-30T16:51:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWhen indexing a numpy array with a jax.numpy array, and the jax array has a singleton dimension, the dimension is lost. This behaviour is different if both are numpy arrays, or both are jax arrays.\r\n\r\n```\r\narray_jnp = jnp.zeros((50, 5))\r\narray_np = np.zeros((50, 5))\r\nidx_jnp = jnp.array([2])\r\nidx_np = np.array([2])\r\nprint(array_jnp[idx_jnp])  # prints [[0. 0. 0. 0. 0.]]\r\nprint(array_np[idx_jnp])  # prints [0. 0. 0. 0. 0.]    <--------- this is different!\r\nprint(array_jnp[idx_np])  # prints [[0. 0. 0. 0. 0.]]\r\nprint(array_np[idx_np])  # prints [[0. 0. 0. 0. 0.]]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3602", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3602/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3602/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3602/events", "html_url": "https://github.com/google/jax/issues/3602", "id": 647728798, "node_id": "MDU6SXNzdWU2NDc3Mjg3OTg=", "number": 3602, "title": "Inconsistencies and divergence depending on use of JIT", "user": {"login": "mathisgerdes", "id": 14827110, "node_id": "MDQ6VXNlcjE0ODI3MTEw", "avatar_url": "https://avatars3.githubusercontent.com/u/14827110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mathisgerdes", "html_url": "https://github.com/mathisgerdes", "followers_url": "https://api.github.com/users/mathisgerdes/followers", "following_url": "https://api.github.com/users/mathisgerdes/following{/other_user}", "gists_url": "https://api.github.com/users/mathisgerdes/gists{/gist_id}", "starred_url": "https://api.github.com/users/mathisgerdes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mathisgerdes/subscriptions", "organizations_url": "https://api.github.com/users/mathisgerdes/orgs", "repos_url": "https://api.github.com/users/mathisgerdes/repos", "events_url": "https://api.github.com/users/mathisgerdes/events{/privacy}", "received_events_url": "https://api.github.com/users/mathisgerdes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-06-29T23:13:04Z", "updated_at": "2020-07-01T15:01:23Z", "closed_at": "2020-07-01T15:01:23Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It seems that on some machines computational results differ significantly if `jit` is applied.\r\n\r\nI have come across this odd behavior in an implementation of a batched Monte Carlo integration. On some machines, when part of the code is `jit` transformed, the results are significantly off and some `inf` values occur. This result seems to depend on ostensibly irrelevant code (adding zero times a no-nan expression), and the specific sampling method. Due to this nature I could not pin down the issue to a single expression; neither am I entirely sure I haven't missed something. Below is a description of the algorithm, as minimal as I could make it with the error occurring, followed by a summary of the different behaviors. \r\n\r\n### The code\r\nThe code consists of the following steps:\r\n1. Sample complex points as the solution to a polynomial equation (`p+tq` for fixed `p`, `q` such that `sum((p+tq)^5)=0`).\r\n2. For each sample point (each point consists of 4 complex numbers) compute a weight using `jax.grad`.\r\n3. Take the mean over `batch_size` of these weights as one batch-step.\r\n4. Iterate over a given number of `batches` and add up all means obtained from the batch-steps.\r\n\r\nThe following is a script taking two true/false arguments: whether to apply `jit` and whether to use the `fori_loop` (the combination `true` `flase` takes very long to compile).\r\nIt contains parts to save the samples, so the weights that should have been obtained can be checked afterwards, and it can be excluded that the error occurs because something changes about the sampling (up to numerical error the samples are the same independent of `jit` use -- as they should be using the same keys).\r\n\r\n```python\r\nfrom jax.config import config\r\nconfig.update(\"jax_enable_x64\", True)\r\n\r\nimport jax\r\nimport jax.numpy as jnp\r\nimport numpy as onp\r\nimport functools\r\nimport sys\r\n\r\n\r\ndef pop(arr, index):\r\n    # drop and return value at index in arr\r\n    rolled = jnp.roll(arr, -index, axis=0)\r\n    return rolled[0], jnp.roll(rolled[1:], index, axis=0)\r\n\r\n\r\ndef insert_col(mat, col, index):\r\n    # insert column col at index into matrix mat\r\n    mat = jnp.roll(mat, -index, axis=1)\r\n    mat = jnp.concatenate([col.reshape(-1, 1), mat], axis=1)\r\n    return jnp.roll(mat, index, axis=1)\r\n\r\n\r\n@functools.partial(jax.grad, argnums=0, holomorphic=True)\r\ndef grad_eqn(z, p):\r\n    return jnp.sum(z ** 5) + p * jnp.prod(z)\r\n\r\n\r\n@functools.partial(jax.vmap, in_axes=(0, None))\r\ndef weight(z, p):\r\n    grads = grad_eqn(z, p)\r\n    dep = jnp.argmax(jnp.abs(grads))\r\n    \r\n    grad_max, grad_rest = pop(grads, dep)\r\n    col = (-grad_rest / grad_max)[:, None]\r\n    \r\n    mat = jnp.concatenate((jnp.eye(3, dtype=jnp.complex_), col), axis=1)\r\n    mat = mat @ mat.T.conj()\r\n    det = jnp.linalg.det(mat).real\r\n\r\n    return 1 / det \r\n\r\n\r\ndef sample_sphere(key, count, dim):\r\n    points = jax.random.normal(key, (count, dim))\r\n    return points / jnp.linalg.norm(points, axis=1, keepdims=True)\r\n\r\n\r\n@jax.vmap\r\ndef solve_poly(p, q):\r\n    # polynomial in t given by (q + t * p)**5\r\n    coeffs = jnp.array([q**5, 5 * p**1 * q**4, 10 * p**2 * q**3,\r\n                        10 * p**3 * q**2, 5 * p**4 * q, p**5])\r\n    coeffs = jnp.sum(coeffs, axis=1)\r\n\r\n    roots = jnp.roots(coeffs, strip_zeros=False)\r\n    return p.reshape(1, -1) + roots.reshape(-1, 1) * q.reshape(1, -1)\r\n\r\n\r\ndef sample_poly(key, count):\r\n    # solution has multiplicity 5, need count / 5 q's and p's\r\n    base_count = jnp.ceil(count / 5).astype(int)\r\n\r\n    # sample base_count comples p's and q's\r\n    pqs = sample_sphere(key, 2, 2 * base_count * 5)\r\n    ps, qs = (pqs[0] + 1j * pqs[1]).reshape(2, base_count, 5)\r\n\r\n    sol = solve_poly(ps, qs)\r\n    return sol.reshape(-1, 5)[:count, :]\r\n\r\n\r\n@jax.vmap\r\ndef divide_largest(z):\r\n    # divide by and drop largest absolute entry\r\n    z0, z = pop(z, jnp.argmax(jnp.abs(z)))\r\n    return z / z0\r\n\r\n\r\ndef monte_carlo(key, batches, batch_size, fori=True):\r\n    keys = jax.random.split(key, batches)\r\n\r\n    def batch_step(i, data):\r\n        mean, samples = data\r\n        key_sample = keys[i]\r\n\r\n        zs = sample_poly(key_sample, batch_size)\r\n        zs = divide_largest(zs)\r\n        # save samples\r\n        samples = jax.ops.index_update(samples, jax.ops.index[i, :, :], zs)\r\n\r\n        weights = weight(zs, jnp.array(0.))\r\n        return mean + jnp.mean(weights), samples\r\n\r\n    mean = jnp.array(0.)\r\n    samples = jnp.zeros((batches, batch_size, 4), dtype=jnp.complex_)\r\n\r\n    if fori:\r\n        mean, samples = jax.lax.fori_loop(0, batches, batch_step, (mean, samples))\r\n    else:\r\n        for i in range(batches):\r\n            mean, samples = batch_step(i, (mean, samples))\r\n\r\n    return mean, samples\r\n\r\n\r\nif __name__ == '__main__':\r\n    key = jax.random.PRNGKey(0)\r\n\r\n    apply_jit = len(sys.argv) > 1 and sys.argv[1] == 'true'\r\n    fori_loop = len(sys.argv) > 2 and sys.argv[2] == 'true'\r\n\r\n    niter = 10\r\n    batches = 51\r\n    batch_size = 1000\r\n\r\n    mc = functools.partial(monte_carlo, fori=fori_loop,\r\n            batches=batches, batch_size=batch_size)\r\n\r\n    if apply_jit:\r\n        mc = jax.jit(mc)\r\n        save_name = 'samples-jit-%i.npy' \r\n    else:\r\n        save_name = 'samples-%i.npy'\r\n\r\n    # skip some keys\r\n    for i in range(25):\r\n        _, key = jax.random.split(key)\r\n\r\n    for i in range(niter):\r\n        k0, key = jax.random.split(key)\r\n        mean, samples = mc(k0)\r\n        print(mean)\r\n        # save samples to manually check computations\r\n        # onp.save(save_name % i, samples)\r\n```\r\n\r\n### Behavior\r\nAs noted, the sample values do not differ depending on `jit` and `fori_loop` combination. Computing the weights and means of weights manually from saved sample values always gives finite numerical values which are consistent with the ones obtained by no `jit` and no `fori_loop` use (`$ python script.py false false`).\r\nDepending on the computer, both cases in which `fori_loop` is used may give wrong values containing `inf`'s.\r\nThis occurred on both local machines I have tested with. Running the same code on colab, however, gives the right (and same) results in all combinations (which is why I suspect there is an underlying issue, not one in the code).\r\n\r\nThe following are the first 10 results obtained with the above script in two different environments and various combinations of `jit` and `fori_loop`:\r\n| XPS; false, false  | XPS; true, true    | XPS; false, true   | Colab; true, true  |\r\n|--------------------|--------------------|--------------------|--------------------|\r\n| 38.87047976604907  | 35.23827002862667  | 35.167724443321404 | 38.904195431290844 |\r\n| 38.85501838205715  | inf                | 35.21379197263621  | 38.875554832009456 |\r\n| 38.87232142336747  | 35.07552733029048  | 35.16629159384102  | 38.9613642029768   |\r\n| 38.82467883296542  | 35.268796318296    | 35.18550169177784  | 38.86870896981942  |\r\n| 38.875347911324106 | 35.065090432638506 | 35.12925896136021  | 38.91082515791209  |\r\n| 38.81607498879701  | 35.045350301233476 | 35.087313851691306 | 38.84038161357294  |\r\n| 38.884758144142545 | 35.204243102525254 | 35.19112069680813  | 38.97964735892668  |\r\n| 38.884639882640634 | inf                | 35.23049623201075  | 38.907215776623836 |\r\n| 38.96790493327401  | inf                | 35.311082582397795 | 38.90340030598595  |\r\n| 38.91302814793844  | 35.26023361519001  | 35.243122471869846 | 38.87890524435126  |\r\n\r\n\r\nNone of the complexities in the code seem to be removable without making the behavior disappear.\r\n- If the sampling is replaced by just uniform or normal random numbers no more `inf`'s appear and all combinations give the same results.\r\n- Removing the wrapper function (which uses the `fori_loop`) around a batched step, and instead just returning the mean from a single batch removes the issue and all results are the same.\r\n- The gradient is taken of a function `sum(z ** 5) + p * prod(z)` where for `p` always `p=0` is passed. Given this fact, the gradient can be manually replaced with `5 * z**4` (in the real application the gradient would potentially be less simple), which again removes the erroneous behavior.\r\n- The most peculiar dependency on the specific implementation is the following: since `p=0`, the term `+ p * prod(z)` should not change the results. Removing it, however, also removes the issue (no `nan`s and values ~38 not ~35). Even if present in the modified form `+ 0 * jnp.nan_to_num(p * jnp.prod(z))` it reintroduces the error.\r\n\r\n### Summary\r\nThe erroneous values seem to be connected with the use of `fori_loop` and the gradient of `prod` multiplied such that it should vanish. The behavior seems contingent on the random sampling used, making it difficult narrow down to a specific expression that is responsible. Specifically, computing the weights after the samples are computed gives the right results and doesn't reproduce the erroneous behavior. Any thoughts about how to narrow down here would be appreciated.\r\n\r\n### Testing environment\r\nAll tests were run with the CPU version of jax and jaxlib installed via `pip`. The current jax version on colab is `0.1.69`.\r\n\r\nThe numerical results above were obtained on a Dell XPS 13 with i5-7200U CPU, jax version `0.1.70`, and python `3.8.3`.\r\nI also saw the same behavior on a desktop machine with jax `0.1.72`, Xeon Silver 4114 CPU, and python `3.6.9`.\r\nI'm not sure what other environment variables may be relevant.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3599", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3599/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3599/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3599/events", "html_url": "https://github.com/google/jax/issues/3599", "id": 647636176, "node_id": "MDU6SXNzdWU2NDc2MzYxNzY=", "number": 3599, "title": "lax.pad breaks for zero-sized inputs", "user": {"login": "JuliusKunze", "id": 1497342, "node_id": "MDQ6VXNlcjE0OTczNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/1497342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JuliusKunze", "html_url": "https://github.com/JuliusKunze", "followers_url": "https://api.github.com/users/JuliusKunze/followers", "following_url": "https://api.github.com/users/JuliusKunze/following{/other_user}", "gists_url": "https://api.github.com/users/JuliusKunze/gists{/gist_id}", "starred_url": "https://api.github.com/users/JuliusKunze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JuliusKunze/subscriptions", "organizations_url": "https://api.github.com/users/JuliusKunze/orgs", "repos_url": "https://api.github.com/users/JuliusKunze/repos", "events_url": "https://api.github.com/users/JuliusKunze/events{/privacy}", "received_events_url": "https://api.github.com/users/JuliusKunze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "hawkinsp", "id": 348932, "node_id": "MDQ6VXNlcjM0ODkzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/348932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsp", "html_url": "https://github.com/hawkinsp", "followers_url": "https://api.github.com/users/hawkinsp/followers", "following_url": "https://api.github.com/users/hawkinsp/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsp/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsp/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsp/orgs", "repos_url": "https://api.github.com/users/hawkinsp/repos", "events_url": "https://api.github.com/users/hawkinsp/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsp/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 0, "created_at": "2020-06-29T20:15:36Z", "updated_at": "2020-06-30T16:07:39Z", "closed_at": "2020-06-30T16:07:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "```python\r\nfrom jax import lax, numpy as jnp\r\nout = lax.pad(jnp.ones((0,)), 0., ((1, 1, 1),))\r\n\r\nprint(out.shape) # (1,)\r\nprint(out)       # [0. 0.]\r\nprint(out[0])    # RuntimeError: Invalid argument: Argument does not match host shape or layout of computation parameter 0: want f32[1]{0}, got f32[2]{0}\r\n```\r\n\r\nPad works as expected for zero-sized inputs for non-interior padding (i. e. padding config `((1, 1, 0),)`), so I guess this should also work (or at least give an error).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3594", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3594/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3594/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3594/events", "html_url": "https://github.com/google/jax/issues/3594", "id": 647316322, "node_id": "MDU6SXNzdWU2NDczMTYzMjI=", "number": 3594, "title": "random uniform with dtype bfloat16 crashes on TPU backend", "user": {"login": "levskaya", "id": 501805, "node_id": "MDQ6VXNlcjUwMTgwNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/501805?v=4", "gravatar_id": "", "url": "https://api.github.com/users/levskaya", "html_url": "https://github.com/levskaya", "followers_url": "https://api.github.com/users/levskaya/followers", "following_url": "https://api.github.com/users/levskaya/following{/other_user}", "gists_url": "https://api.github.com/users/levskaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/levskaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/levskaya/subscriptions", "organizations_url": "https://api.github.com/users/levskaya/orgs", "repos_url": "https://api.github.com/users/levskaya/repos", "events_url": "https://api.github.com/users/levskaya/events{/privacy}", "received_events_url": "https://api.github.com/users/levskaya/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-06-29T12:06:30Z", "updated_at": "2020-08-09T23:51:02Z", "closed_at": "2020-08-09T23:51:02Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "repro:\r\n```\r\nfrom jax import numpy as jnp\r\nfrom jax import random\r\nx = random.uniform(random.PRNGKey(0), (3,), dtype=jnp.bfloat16)\r\n```\r\nobservation:\r\n\u00a0- crashes on TPU backends (both internal and cloud TPU as far as I can tell)\r\n\u00a0- CPU and GPU backends don't seem to crash\r\n\r\nexpect:\r\neven if bfloat16 isn't supported by random.* on TPU it would be better to error-out rather than crashing\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3584", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3584/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3584/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3584/events", "html_url": "https://github.com/google/jax/issues/3584", "id": 646730940, "node_id": "MDU6SXNzdWU2NDY3MzA5NDA=", "number": 3584, "title": "ode is not working in jax 0.1.70", "user": {"login": "fehiepsi", "id": 4736342, "node_id": "MDQ6VXNlcjQ3MzYzNDI=", "avatar_url": "https://avatars1.githubusercontent.com/u/4736342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fehiepsi", "html_url": "https://github.com/fehiepsi", "followers_url": "https://api.github.com/users/fehiepsi/followers", "following_url": "https://api.github.com/users/fehiepsi/following{/other_user}", "gists_url": "https://api.github.com/users/fehiepsi/gists{/gist_id}", "starred_url": "https://api.github.com/users/fehiepsi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fehiepsi/subscriptions", "organizations_url": "https://api.github.com/users/fehiepsi/orgs", "repos_url": "https://api.github.com/users/fehiepsi/repos", "events_url": "https://api.github.com/users/fehiepsi/events{/privacy}", "received_events_url": "https://api.github.com/users/fehiepsi/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 7, "created_at": "2020-06-27T18:21:45Z", "updated_at": "2020-06-28T21:49:11Z", "closed_at": "2020-06-28T21:27:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Here is a repro code, which works for previous version\r\n\r\n```python\r\nimport jax\r\nimport jax.numpy as jnp\r\nfrom jax.experimental.ode import odeint\r\n\r\ndef dz_dt(z, t, theta):\r\n    \"\"\" Lotka\u2013Volterra equations. \"\"\"\r\n    u = z[0]\r\n    v = z[1]\r\n    alpha, beta, gamma, delta = theta[0], theta[1], theta[2], theta[3]\r\n    du_dt = (alpha - beta * v) * u\r\n    dv_dt = (-gamma + delta * u) * v\r\n    return jnp.stack([du_dt, dv_dt])\r\n\r\ndef f(z):\r\n    y = odeint(dz_dt, z, jnp.arange(10.), jnp.ones(4))\r\n    return jnp.sum(y)\r\n\r\njax.grad(f)(jnp.ones(2))\r\n```\r\n\r\nRunning the above script raises the error `TypeError: Primal inputs to reverse-mode differentiation must be of float or complex type, got type int32`. I tried to trace the error but got no hint where `int` variables are created. I think the issue happens after https://github.com/google/jax/pull/3562.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3577", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3577/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3577/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3577/events", "html_url": "https://github.com/google/jax/issues/3577", "id": 646491238, "node_id": "MDU6SXNzdWU2NDY0OTEyMzg=", "number": 3577, "title": "Question on importing pytree object", "user": {"login": "DarrenZhang01", "id": 29133834, "node_id": "MDQ6VXNlcjI5MTMzODM0", "avatar_url": "https://avatars3.githubusercontent.com/u/29133834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarrenZhang01", "html_url": "https://github.com/DarrenZhang01", "followers_url": "https://api.github.com/users/DarrenZhang01/followers", "following_url": "https://api.github.com/users/DarrenZhang01/following{/other_user}", "gists_url": "https://api.github.com/users/DarrenZhang01/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarrenZhang01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarrenZhang01/subscriptions", "organizations_url": "https://api.github.com/users/DarrenZhang01/orgs", "repos_url": "https://api.github.com/users/DarrenZhang01/repos", "events_url": "https://api.github.com/users/DarrenZhang01/events{/privacy}", "received_events_url": "https://api.github.com/users/DarrenZhang01/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T20:20:40Z", "updated_at": "2020-06-26T21:17:27Z", "closed_at": "2020-06-26T21:16:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "From my observation, the pytree object is defined under [https://github.com/google/jax/blob/master/jaxlib](https://github.com/google/jax/blob/master/jaxlib) and is initialized in [https://github.com/google/jax/blob/master/jax/lib/\\_\\_init\\_\\_.py](https://github.com/google/jax/blob/master/jax/lib/__init__.py). If I want to import pytree object independently in my python file, what helper files do I also need to include? (I assume [https://github.com/google/jax/blob/master/jaxlib/pytree.cc](https://github.com/google/jax/blob/master/jaxlib/pytree.cc)) Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3568", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3568/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3568/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3568/events", "html_url": "https://github.com/google/jax/issues/3568", "id": 646173374, "node_id": "MDU6SXNzdWU2NDYxNzMzNzQ=", "number": 3568, "title": "CUDA issues", "user": {"login": "ericmjl", "id": 2631566, "node_id": "MDQ6VXNlcjI2MzE1NjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/2631566?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ericmjl", "html_url": "https://github.com/ericmjl", "followers_url": "https://api.github.com/users/ericmjl/followers", "following_url": "https://api.github.com/users/ericmjl/following{/other_user}", "gists_url": "https://api.github.com/users/ericmjl/gists{/gist_id}", "starred_url": "https://api.github.com/users/ericmjl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ericmjl/subscriptions", "organizations_url": "https://api.github.com/users/ericmjl/orgs", "repos_url": "https://api.github.com/users/ericmjl/repos", "events_url": "https://api.github.com/users/ericmjl/events{/privacy}", "received_events_url": "https://api.github.com/users/ericmjl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-26T10:40:24Z", "updated_at": "2020-06-26T15:06:14Z", "closed_at": "2020-06-26T15:06:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "When trying to use JAX + GPU in a CentOS8 container, I have the following warning message show up:\r\n\r\n```python\r\n>>> import jax.numpy as np\r\n>>> a = np.ones(4)\r\n2020-06-26 10:14:51.996044: E external/org_tensorflow/tensorflow/stream_executor/cuda/cuda_driver.cc:314] failed call to cuInit: CUDA_ERROR_SYSTEM_DRIVER_MISMATCH: system has unsupported display driver / cuda driver combination\r\n2020-06-26 10:14:51.996405: E external/org_tensorflow/tensorflow/stream_executor/cuda/cuda_diagnostics.cc:313] kernel version 440.36.0 does not match DSO version 440.33.1 -- cannot find working devices in this configuration\r\n/home/docker/anaconda/envs/my-project/lib/python3.7/site-packages/jax/lib/xla_bridge.py:125: UserWarning: No GPU/TPU found, falling back to CPU.\r\n  warnings.warn('No GPU/TPU found, falling back to CPU.')\r\n```\r\n\r\nWhen in the container, the output of `nvidia-smi` is:\r\n\r\n```\r\n(base) [docker@4d16b48b1a22 ~]$ nvidia-smi\r\nFri Jun 26 10:14:29 2020       \r\n+-----------------------------------------------------------------------------+\r\n| NVIDIA-SMI 440.36       Driver Version: 440.36       CUDA Version: 10.2     |\r\n|-------------------------------+----------------------+----------------------+\r\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\r\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\r\n|===============================+======================+======================|\r\n|   0  GeForce GTX 108...  Off  | 00000000:04:00.0 Off |                  N/A |\r\n|  0%   25C    P8    12W / 250W |    318MiB / 11178MiB |      0%      Default |\r\n+-------------------------------+----------------------+----------------------+\r\n                                                                               \r\n+-----------------------------------------------------------------------------+\r\n| Processes:                                                       GPU Memory |\r\n|  GPU       PID   Type   Process name                             Usage      |\r\n|=============================================================================|\r\n+-----------------------------------------------------------------------------+\r\n```\r\n\r\nThe Dockerfile specification is [available as a gist here](https://gist.github.com/ericmjl/2db8a3880b1b475e3b9f3a13b9757b8b).\r\n\r\nI have tried asking around on Twitter some friends at NVIDIA. It seems like the host driver is 440.36, but when I install the CUDA toolkit, the version that gets installed is 440.33, resulting in the DSO version error. I am working under the assumption that I can't change the host driver, so I'm stuck with whatever I can get into the container. Have you all encountered this issue before? Is there someone on the team who has experience with XLA + CUDA?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3558", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3558/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3558/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3558/events", "html_url": "https://github.com/google/jax/issues/3558", "id": 645711386, "node_id": "MDU6SXNzdWU2NDU3MTEzODY=", "number": 3558, "title": "Forward mode differentiation of `odeint` is not supported, but it does not give an error", "user": {"login": "john-m-jumper", "id": 65553630, "node_id": "MDQ6VXNlcjY1NTUzNjMw", "avatar_url": "https://avatars2.githubusercontent.com/u/65553630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/john-m-jumper", "html_url": "https://github.com/john-m-jumper", "followers_url": "https://api.github.com/users/john-m-jumper/followers", "following_url": "https://api.github.com/users/john-m-jumper/following{/other_user}", "gists_url": "https://api.github.com/users/john-m-jumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/john-m-jumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/john-m-jumper/subscriptions", "organizations_url": "https://api.github.com/users/john-m-jumper/orgs", "repos_url": "https://api.github.com/users/john-m-jumper/repos", "events_url": "https://api.github.com/users/john-m-jumper/events{/privacy}", "received_events_url": "https://api.github.com/users/john-m-jumper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782284, "node_id": "MDU6TGFiZWwxMTA0NzgyMjg0", "url": "https://api.github.com/repos/google/jax/labels/bug", "name": "bug", "color": "d73a4a", "default": true, "description": "Something isn't working"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 5, "created_at": "2020-06-25T16:49:32Z", "updated_at": "2020-06-26T03:57:35Z", "closed_at": "2020-06-26T03:57:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\ndef f(k):\r\n  return ode.odeint(lambda x, t: k*x, 1.,  jnp.linspace(0, 1., 50)).sum()\r\njax.jacfwd(f)(3.)\r\n```\r\nshould fail with an error since jvp of `odeint` is not supported, but it returns a value anyway.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3557", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3557/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3557/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3557/events", "html_url": "https://github.com/google/jax/issues/3557", "id": 645708772, "node_id": "MDU6SXNzdWU2NDU3MDg3NzI=", "number": 3557, "title": "Document gradient restrictions for odeint", "user": {"login": "john-m-jumper", "id": 65553630, "node_id": "MDQ6VXNlcjY1NTUzNjMw", "avatar_url": "https://avatars2.githubusercontent.com/u/65553630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/john-m-jumper", "html_url": "https://github.com/john-m-jumper", "followers_url": "https://api.github.com/users/john-m-jumper/followers", "following_url": "https://api.github.com/users/john-m-jumper/following{/other_user}", "gists_url": "https://api.github.com/users/john-m-jumper/gists{/gist_id}", "starred_url": "https://api.github.com/users/john-m-jumper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/john-m-jumper/subscriptions", "organizations_url": "https://api.github.com/users/john-m-jumper/orgs", "repos_url": "https://api.github.com/users/john-m-jumper/repos", "events_url": "https://api.github.com/users/john-m-jumper/events{/privacy}", "received_events_url": "https://api.github.com/users/john-m-jumper/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1209040225, "node_id": "MDU6TGFiZWwxMjA5MDQwMjI1", "url": "https://api.github.com/repos/google/jax/labels/documentation", "name": "documentation", "color": "4ee00b", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 4, "created_at": "2020-06-25T16:44:59Z", "updated_at": "2020-06-26T01:28:24Z", "closed_at": "2020-06-26T01:28:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "`jax.experimental.ode.odeint` takes a function `func(y, t, *args)`.  A known limitation of `odeint` is that `func` cannot close over any tensors, but this information is missing from the documentation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3556", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3556/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3556/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3556/events", "html_url": "https://github.com/google/jax/issues/3556", "id": 645706326, "node_id": "MDU6SXNzdWU2NDU3MDYzMjY=", "number": 3556, "title": "Mimicking egrad using jacfwd and vmap ", "user": {"login": "leakec", "id": 46822212, "node_id": "MDQ6VXNlcjQ2ODIyMjEy", "avatar_url": "https://avatars3.githubusercontent.com/u/46822212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leakec", "html_url": "https://github.com/leakec", "followers_url": "https://api.github.com/users/leakec/followers", "following_url": "https://api.github.com/users/leakec/following{/other_user}", "gists_url": "https://api.github.com/users/leakec/gists{/gist_id}", "starred_url": "https://api.github.com/users/leakec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leakec/subscriptions", "organizations_url": "https://api.github.com/users/leakec/orgs", "repos_url": "https://api.github.com/users/leakec/repos", "events_url": "https://api.github.com/users/leakec/events{/privacy}", "received_events_url": "https://api.github.com/users/leakec/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 2, "created_at": "2020-06-25T16:40:52Z", "updated_at": "2020-06-25T22:49:48Z", "closed_at": "2020-06-25T22:49:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am trying to mimic the use of egrad from autograd by composing vmap and jacfwd. This works well for simple functions, but I've had some strange shape behavior as the functions become slightly more complex. For example,\r\n\r\n```python\r\n#Import JAX\r\nfrom jax.config import config\r\nconfig.update('jax_enable_x64', True)\r\n\r\nimport jax.numpy as np\r\nfrom jax import core, grad, vmap, abstract_arrays, jacfwd, jacrev\r\n\r\n# Create simple data\r\nx = np.arange(10,dtype=np.float64)\r\nxi = np.ones(3)\r\n\r\nA = np.ones((10,3))\r\n\r\n# Create three functions, increasing in complexity\r\nf = lambda x: np.array([x,x**2,x**3]).T\r\nf2 = lambda x,xi: x*np.dot(f(x),xi)\r\nf3 = lambda x,xi: x*np.dot(f(x),xi)+np.dot(A,xi)\r\n\r\n# Attempt to mimic egrad behavior\r\ndef egrad(g):\r\n    return vmap(jacfwd(g))\r\ndef egrad2(g):\r\n    return vmap(jacfwd(g,0),(0,None),0)\r\n\r\n# Print results\r\nprint(\"Function f\")\r\nprint(egrad(f)(x))\r\nprint(\"\")\r\nprint(\"Function f2\")\r\nprint(egrad2(f2)(x,xi))\r\nprint(\"\")\r\nprint(\"Function f3\")\r\nprint(egrad2(f3)(x,xi))\r\nprint(\"\")\r\n\r\n\r\n```\r\n\r\nwhich results in,\r\n\r\n```python\r\nFunction f\r\n[[  1.   0.   0.]\r\n [  1.   2.   3.]\r\n [  1.   4.  12.]\r\n [  1.   6.  27.]\r\n [  1.   8.  48.]\r\n [  1.  10.  75.]\r\n [  1.  12. 108.]\r\n [  1.  14. 147.]\r\n [  1.  16. 192.]\r\n [  1.  18. 243.]]\r\n\r\nFunction f2\r\n[   0.    9.   48.  141.  312.  585.  984. 1533. 2256. 3177.]\r\n\r\nFunction f3\r\n[[   0.    0.    0.    0.    0.    0.    0.    0.    0.    0.]\r\n [   9.    9.    9.    9.    9.    9.    9.    9.    9.    9.]\r\n [  48.   48.   48.   48.   48.   48.   48.   48.   48.   48.]\r\n [ 141.  141.  141.  141.  141.  141.  141.  141.  141.  141.]\r\n [ 312.  312.  312.  312.  312.  312.  312.  312.  312.  312.]\r\n [ 585.  585.  585.  585.  585.  585.  585.  585.  585.  585.]\r\n [ 984.  984.  984.  984.  984.  984.  984.  984.  984.  984.]\r\n [1533. 1533. 1533. 1533. 1533. 1533. 1533. 1533. 1533. 1533.]\r\n [2256. 2256. 2256. 2256. 2256. 2256. 2256. 2256. 2256. 2256.]\r\n [3177. 3177. 3177. 3177. 3177. 3177. 3177. 3177. 3177. 3177.]]\r\n```\r\n\r\nThe shape of the first two outputs matches my expectation. However, the shape of the third output does not. I'd expect the shape of the third output to be a shape (10,) array like,\r\n\r\n```python\r\n[   0.    9.   48.  141.  312.  585.  984. 1533. 2256. 3177.]\r\n```\r\n\r\nIn other words, I'd expect the outputs of function 2 and function 3 to be identical. Have I done something incorrectly when creating the egrad functions, or are the shapes of the outputs to be expected?\r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3534", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3534/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3534/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3534/events", "html_url": "https://github.com/google/jax/issues/3534", "id": 644527447, "node_id": "MDU6SXNzdWU2NDQ1Mjc0NDc=", "number": 3534, "title": "parallelize a loop like Numba's prange", "user": {"login": "docyyz", "id": 34513766, "node_id": "MDQ6VXNlcjM0NTEzNzY2", "avatar_url": "https://avatars1.githubusercontent.com/u/34513766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/docyyz", "html_url": "https://github.com/docyyz", "followers_url": "https://api.github.com/users/docyyz/followers", "following_url": "https://api.github.com/users/docyyz/following{/other_user}", "gists_url": "https://api.github.com/users/docyyz/gists{/gist_id}", "starred_url": "https://api.github.com/users/docyyz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/docyyz/subscriptions", "organizations_url": "https://api.github.com/users/docyyz/orgs", "repos_url": "https://api.github.com/users/docyyz/repos", "events_url": "https://api.github.com/users/docyyz/events{/privacy}", "received_events_url": "https://api.github.com/users/docyyz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": {"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "mattjj", "id": 1458824, "node_id": "MDQ6VXNlcjE0NTg4MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1458824?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mattjj", "html_url": "https://github.com/mattjj", "followers_url": "https://api.github.com/users/mattjj/followers", "following_url": "https://api.github.com/users/mattjj/following{/other_user}", "gists_url": "https://api.github.com/users/mattjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/mattjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mattjj/subscriptions", "organizations_url": "https://api.github.com/users/mattjj/orgs", "repos_url": "https://api.github.com/users/mattjj/repos", "events_url": "https://api.github.com/users/mattjj/events{/privacy}", "received_events_url": "https://api.github.com/users/mattjj/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 3, "created_at": "2020-06-24T11:07:42Z", "updated_at": "2020-06-25T19:52:11Z", "closed_at": "2020-06-25T19:52:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI have the follow code, which I'd like to parallelize over the for loop.  This can be done quite easily using Numba's prange.  Is there something of an equivalent in JAX?\r\n```python\r\ngrad_jit = jit(grad(func), static_argnums=[1])\r\ngrad_out = np.zeros((n,m,k),dtype=np.float32)\r\nfor i in range(n):\r\n    din = de_noise(raw_input[i])\r\n    grad_out[i]=grad_jit(din,params)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3517", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3517/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3517/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3517/events", "html_url": "https://github.com/google/jax/issues/3517", "id": 643228963, "node_id": "MDU6SXNzdWU2NDMyMjg5NjM=", "number": 3517, "title": "cumsum inaccuracy", "user": {"login": "clemisch", "id": 5190547, "node_id": "MDQ6VXNlcjUxOTA1NDc=", "avatar_url": "https://avatars1.githubusercontent.com/u/5190547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemisch", "html_url": "https://github.com/clemisch", "followers_url": "https://api.github.com/users/clemisch/followers", "following_url": "https://api.github.com/users/clemisch/following{/other_user}", "gists_url": "https://api.github.com/users/clemisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemisch/subscriptions", "organizations_url": "https://api.github.com/users/clemisch/orgs", "repos_url": "https://api.github.com/users/clemisch/repos", "events_url": "https://api.github.com/users/clemisch/events{/privacy}", "received_events_url": "https://api.github.com/users/clemisch/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-06-22T17:02:25Z", "updated_at": "2020-06-23T02:48:40Z", "closed_at": "2020-06-23T02:48:33Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Dear jax team,\r\n\r\nI am working on adding `np.unwrap` in jax. I have implemented the functionality by adapting the numpy source, but I'm struggling to get the tests working due to numerical inaccuracy for large arrays. \r\n\r\nI think the reason is `np.cumsum`. The error between numpy and jax grows roughly linearly with array size for both unwrap and cumsum. I have created a [colab notebook](https://colab.research.google.com/drive/19UcmQcKkbqTWQI4O3Ai2DZscFLFWp2lJ?usp=sharing) with example plots.\r\n\r\nIs this inaccuracy expected with cumsum? If yes, how should I adapt tests for np.unwrap to account for this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/jax/issues/3515", "repository_url": "https://api.github.com/repos/google/jax", "labels_url": "https://api.github.com/repos/google/jax/issues/3515/labels{/name}", "comments_url": "https://api.github.com/repos/google/jax/issues/3515/comments", "events_url": "https://api.github.com/repos/google/jax/issues/3515/events", "html_url": "https://github.com/google/jax/issues/3515", "id": 643217533, "node_id": "MDU6SXNzdWU2NDMyMTc1MzM=", "number": 3515, "title": "Reason for not having a tanh activation function?", "user": {"login": "chisarie", "id": 43339851, "node_id": "MDQ6VXNlcjQzMzM5ODUx", "avatar_url": "https://avatars3.githubusercontent.com/u/43339851?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chisarie", "html_url": "https://github.com/chisarie", "followers_url": "https://api.github.com/users/chisarie/followers", "following_url": "https://api.github.com/users/chisarie/following{/other_user}", "gists_url": "https://api.github.com/users/chisarie/gists{/gist_id}", "starred_url": "https://api.github.com/users/chisarie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chisarie/subscriptions", "organizations_url": "https://api.github.com/users/chisarie/orgs", "repos_url": "https://api.github.com/users/chisarie/repos", "events_url": "https://api.github.com/users/chisarie/events{/privacy}", "received_events_url": "https://api.github.com/users/chisarie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1104782290, "node_id": "MDU6TGFiZWwxMTA0NzgyMjkw", "url": "https://api.github.com/repos/google/jax/labels/question", "name": "question", "color": "d876e3", "default": true, "description": "Further information is requested"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-06-22T16:42:46Z", "updated_at": "2020-06-23T06:30:49Z", "closed_at": "2020-06-23T02:53:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can see from the documentation [here](https://jax.readthedocs.io/en/latest/jax.nn.html#activation-functions) that there is no `tanh` activation function in jax. For now I am using the function `jax.lax.tanh`. Is this the right thing to do? Or is there a better alternative?", "performed_via_github_app": null, "score": 1.0}]}