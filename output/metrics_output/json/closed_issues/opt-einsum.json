{"total_count": 57, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/148", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/148/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/148/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/148/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/148", "id": 657950160, "node_id": "MDU6SXNzdWU2NTc5NTAxNjA=", "number": 148, "title": "Remove 'remaining' from PathInfo? (incurs n^2 memory overhead)", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-16T07:54:09Z", "updated_at": "2020-07-19T12:59:09Z", "closed_at": "2020-07-19T12:59:09Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "When building the ``contraction_list``, ``opt_einsum`` handles a list of 'remaining'  terms, and at each new step these are copied (``input_list`` below):\r\n\r\nhttps://github.com/dgasmith/opt_einsum/blob/2cbd28e612ff0af54656c34d7f6c239efe524b12/opt_einsum/contract.py#L306\r\n\r\nA single, consumed version of this list is needed for constructing the items in the contraction list. However all the copies at each stage are not needed in the actual contraction (``_core_contract``) function - they are just for printing in the ``PathInfo`` object. \r\n\r\nThe problem is that each copied list of remaining terms is of average length `n / 2` and there are generally `n - 1` of them, incurring a `n^2` memory overhead, which caused problems for us (10s of gigabytes of problems!) in some large contractions. Here's an extreme sample of such a gigantic ``PathInfo``:\r\n\r\n![Screenshot from 2020-07-15 19-11-55](https://user-images.githubusercontent.com/8982598/87640894-486a1400-c73f-11ea-98a1-dab04d3e02f8.png)\r\n\r\nWith 50 contractions each of several thousand tensors there was a total of nearly 100,000,000 'remaining' lists of strings.\r\n\r\nI'd suggest either:\r\n* a) *Easiest* - we just remove the 'remaining' terms from the ``PathInfo`` object, I'd be fine with this but possibly its useful information for others?\r\n* b) *Medium* - the 'remaining' terms are only accumulated below a certain threshold size\r\n* c) *Hardest* - they are generated lazily (and maybe optionally) by the ``PathInfo`` object upon request only (e.g. printing)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/147", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/147/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/147/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/147", "id": 657934405, "node_id": "MDU6SXNzdWU2NTc5MzQ0MDU=", "number": 147, "title": "Test fails with newer numpy", "user": {"login": "avdv", "id": 3471749, "node_id": "MDQ6VXNlcjM0NzE3NDk=", "avatar_url": "https://avatars2.githubusercontent.com/u/3471749?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avdv", "html_url": "https://github.com/avdv", "followers_url": "https://api.github.com/users/avdv/followers", "following_url": "https://api.github.com/users/avdv/following{/other_user}", "gists_url": "https://api.github.com/users/avdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/avdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avdv/subscriptions", "organizations_url": "https://api.github.com/users/avdv/orgs", "repos_url": "https://api.github.com/users/avdv/repos", "events_url": "https://api.github.com/users/avdv/events{/privacy}", "received_events_url": "https://api.github.com/users/avdv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-07-16T07:31:32Z", "updated_at": "2020-07-22T20:11:01Z", "closed_at": "2020-07-19T22:41:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi.\n\nWe've encountered that after upgrading numpy that builds would fail because numpy no longer raises a `TypeError` for invalid order parameters, but a `ValueError` instead.\n\nSee https://nix-cache.s3.amazonaws.com/log/zn2qyadxc7l1xrwn39wbrmnvjqj1mg9w-python3.7-opt_einsum-3.2.1.drv\n\nNumpy was upgraded from 1.18.5 -> 1.19.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/144", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/144/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/144/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/144", "id": 646531279, "node_id": "MDU6SXNzdWU2NDY1MzEyNzk=", "number": 144, "title": "cuTensor with cupy", "user": {"login": "cnk113", "id": 21249710, "node_id": "MDQ6VXNlcjIxMjQ5NzEw", "avatar_url": "https://avatars2.githubusercontent.com/u/21249710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cnk113", "html_url": "https://github.com/cnk113", "followers_url": "https://api.github.com/users/cnk113/followers", "following_url": "https://api.github.com/users/cnk113/following{/other_user}", "gists_url": "https://api.github.com/users/cnk113/gists{/gist_id}", "starred_url": "https://api.github.com/users/cnk113/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cnk113/subscriptions", "organizations_url": "https://api.github.com/users/cnk113/orgs", "repos_url": "https://api.github.com/users/cnk113/repos", "events_url": "https://api.github.com/users/cnk113/events{/privacy}", "received_events_url": "https://api.github.com/users/cnk113/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-26T21:55:43Z", "updated_at": "2020-07-19T13:30:46Z", "closed_at": "2020-07-19T13:30:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nAre you considering integrating cuTensor at this point? It looks like you were considering it before #97. \r\ncuTensor is released with CUDA 11, and seems to be a massive speedup., Also the cutensor module in [cupy](https://github.com/cupy/cupy/blob/master/cupy/cutensor.py) looks like it's fully integrated at this point. \r\n\r\nBest", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/142", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/142/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/142/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/142/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/142", "id": 627627814, "node_id": "MDU6SXNzdWU2Mjc2Mjc4MTQ=", "number": 142, "title": "Symbolic einsum support?", "user": {"login": "refraction-ray", "id": 35157286, "node_id": "MDQ6VXNlcjM1MTU3Mjg2", "avatar_url": "https://avatars2.githubusercontent.com/u/35157286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/refraction-ray", "html_url": "https://github.com/refraction-ray", "followers_url": "https://api.github.com/users/refraction-ray/followers", "following_url": "https://api.github.com/users/refraction-ray/following{/other_user}", "gists_url": "https://api.github.com/users/refraction-ray/gists{/gist_id}", "starred_url": "https://api.github.com/users/refraction-ray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/refraction-ray/subscriptions", "organizations_url": "https://api.github.com/users/refraction-ray/orgs", "repos_url": "https://api.github.com/users/refraction-ray/repos", "events_url": "https://api.github.com/users/refraction-ray/events{/privacy}", "received_events_url": "https://api.github.com/users/refraction-ray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-05-30T01:57:22Z", "updated_at": "2020-07-19T13:29:15Z", "closed_at": "2020-07-19T13:29:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "We can easily define some python duck types with ``__add__ ``, ``__mul__`` and so on, and do computations on them as a symbol. Actually many numpy primitives including ``tensordot`` already support such symbolic computations. However the fallback ``c_einsum`` in numpy doesn't support non numeric types, which may make the symbolic einsum fail if no-blas contraction is involved and ``c_einsum`` is directly invoked.\r\n\r\nTo be specific, please see this gist as an example on what I mean: https://gist.github.com/refraction-ray/dc22288a0d9e22bb263e59487ad8f5ea \r\n\r\nIs there a way currently in opt_einsum making these symbolic einsum work? If not, I guess the way out is to implement a pure python version of ``c_einsum``? It may be very slow but it anyhow works and can serve as a fallback fn for non numeric types?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/139", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/139/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/139/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/139/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/139", "id": 616206001, "node_id": "MDU6SXNzdWU2MTYyMDYwMDE=", "number": 139, "title": "Problem with sparse", "user": {"login": "Tomohirohashizume", "id": 55556714, "node_id": "MDQ6VXNlcjU1NTU2NzE0", "avatar_url": "https://avatars1.githubusercontent.com/u/55556714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Tomohirohashizume", "html_url": "https://github.com/Tomohirohashizume", "followers_url": "https://api.github.com/users/Tomohirohashizume/followers", "following_url": "https://api.github.com/users/Tomohirohashizume/following{/other_user}", "gists_url": "https://api.github.com/users/Tomohirohashizume/gists{/gist_id}", "starred_url": "https://api.github.com/users/Tomohirohashizume/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Tomohirohashizume/subscriptions", "organizations_url": "https://api.github.com/users/Tomohirohashizume/orgs", "repos_url": "https://api.github.com/users/Tomohirohashizume/repos", "events_url": "https://api.github.com/users/Tomohirohashizume/events{/privacy}", "received_events_url": "https://api.github.com/users/Tomohirohashizume/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-11T21:38:29Z", "updated_at": "2020-05-12T20:05:19Z", "closed_at": "2020-05-12T20:05:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "`Sparse version 0.9.1`\r\n`opt_einsum.__version__ = '0+untagged.56.g2664021.dirty'`\r\nFollowing code returns error `AttributeError: sparse doesn't seem to provide the function einsum\r\n` (detailed output follows the code)\r\n```\r\nimport opt_einsum as oe\r\nimport sparse as sp\r\n\r\nshapes = (3, 200), (200, 300), (300, 4)\r\n\r\nsxs = [sp.random(shp) for shp in shapes]\r\nprint (sxs)\r\nsy = oe.contract(\"ab,bc,cd->bd\", *sxs)\r\nprint(sy)\r\n```\r\nError message:\r\n```\r\nTraceback (most recent call last):\r\n  File \"einsumtest.py\", line 8, in <module>\r\n    sy = oe.contract(\"ab,bc,cd->bd\", *sxs)\r\n  File \"/path/.conda/envs/baseenv/lib/python3.7/site-packages/opt_einsum/contract.py\", line 483, in contract\r\n    return _core_contract(operands, contraction_list, backend=backend, **einsum_kwargs)\r\n  File \"/path/.conda/envs/baseenv/lib/python3.7/site-packages/opt_einsum/contract.py\", line 567, in _core_contract\r\n    new_view = _einsum(einsum_str, *tmp_operands, backend=backend, **einsum_kwargs)\r\n  File \"/path/.conda/envs/baseenv/lib/python3.7/site-packages/opt_einsum/sharing.py\", line 151, in cached_einsum\r\n    return einsum(*args, **kwargs)\r\n  File \"/path/.conda/envs/baseenv/lib/python3.7/site-packages/opt_einsum/contract.py\", line 324, in _einsum\r\n    fn = backends.get_func('einsum', kwargs.pop('backend', 'numpy'))\r\n  File \"path/.conda/envs/baseenv/lib/python3.7/site-packages/opt_einsum/backends/dispatch.py\", line 59, in get_func\r\n    fn = _import_func(func, backend, default)\r\n  File \"/path/.conda/envs/baseenv/lib/python3.7/site-packages/opt_einsum/backends/dispatch.py\", line 40, in _import_func\r\n    raise AttributeError(\"{} doesn't seem to provide the function {}\".format(backend, func))\r\nAttributeError: sparse doesn't seem to provide the function einsum", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/138", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/138/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/138/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/138", "id": 611566148, "node_id": "MDU6SXNzdWU2MTE1NjYxNDg=", "number": 138, "title": "questions about helpers.flop_count", "user": {"login": "refraction-ray", "id": 35157286, "node_id": "MDQ6VXNlcjM1MTU3Mjg2", "avatar_url": "https://avatars2.githubusercontent.com/u/35157286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/refraction-ray", "html_url": "https://github.com/refraction-ray", "followers_url": "https://api.github.com/users/refraction-ray/followers", "following_url": "https://api.github.com/users/refraction-ray/following{/other_user}", "gists_url": "https://api.github.com/users/refraction-ray/gists{/gist_id}", "starred_url": "https://api.github.com/users/refraction-ray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/refraction-ray/subscriptions", "organizations_url": "https://api.github.com/users/refraction-ray/orgs", "repos_url": "https://api.github.com/users/refraction-ray/repos", "events_url": "https://api.github.com/users/refraction-ray/events{/privacy}", "received_events_url": "https://api.github.com/users/refraction-ray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-04T02:18:35Z", "updated_at": "2020-05-04T08:23:51Z", "closed_at": "2020-05-04T08:23:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am confused with `helpers.flop_count` method.\r\nhttps://github.com/dgasmith/opt_einsum/blob/77568118fe1b198bd15b27f6766d32be16ae2e4e/opt_einsum/helpers.py#L160-L164\r\n\r\nThe function gives me different results from docstring example.\r\n```python\r\nflop_count('abc', False, 1, {'a': 2, 'b':3, 'c':5}), flop_count('abc', True, 2, {'a': 2, 'b':3, 'c':5})\r\n(30, 60)\r\n```\r\n\r\nI also want to know more about the meaning of the function inputs. Are the counting is supposed to calculate flop of contracting all indices in ``idx_contraction`` between ``num_terms`` of tensors? What is the ``inner`` switch for?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/137", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/137/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/137/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/137", "id": 608633128, "node_id": "MDU6SXNzdWU2MDg2MzMxMjg=", "number": 137, "title": "Possible bug in RandomGreedy path", "user": {"login": "emprice", "id": 3172578, "node_id": "MDQ6VXNlcjMxNzI1Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3172578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emprice", "html_url": "https://github.com/emprice", "followers_url": "https://api.github.com/users/emprice/followers", "following_url": "https://api.github.com/users/emprice/following{/other_user}", "gists_url": "https://api.github.com/users/emprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/emprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emprice/subscriptions", "organizations_url": "https://api.github.com/users/emprice/orgs", "repos_url": "https://api.github.com/users/emprice/repos", "events_url": "https://api.github.com/users/emprice/events{/privacy}", "received_events_url": "https://api.github.com/users/emprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-04-28T21:38:23Z", "updated_at": "2020-05-13T00:06:35Z", "closed_at": "2020-05-13T00:06:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have found an interesting quirk of the RandomGreedy optimizer that may not have been intended. In my application, I need to repeat two contractions several times. I use the same optimizer to compute the paths in advance and cache the result. If I use RandomGreedy, then I get the wrong shape for the second contraction, which leads me to believe that there's some internal state of RandomGreedy that persists into computing the second path. Below is a MWE.\r\n\r\n```python\r\nimport torch\r\nimport opt_einsum as oe\r\n\r\neqn1 = 'abc,bef,ahi,ehk,uvc,vwf,uxi,wxk->'\r\neqn2 = 'abd,beg,ahj,ehl,mndo,npgq,mrjs,prlt,uvo,vwq,uxs,wxt->'\r\nshapes1 = [(1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2), \r\n           (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2)] \r\nshapes2 = [(1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2, 2), (1, 1, 2, 2), \r\n           (1, 1, 2, 2), (1, 1, 2, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2), (1, 1, 2)] \r\ntens1 = [torch.randn(*sh) for sh in shapes1]\r\ntens2 = [torch.randn(*sh) for sh in shapes2]\r\n\r\nfor Opt in [oe.DynamicProgramming, oe.RandomGreedy]:\r\n    opt = Opt(minimize='flops')\r\n                                                                                                                                 \r\n    expr1 = oe.contract_expression(eqn1, *[ten.shape for ten in tens1], optimize=opt)\r\n    expr2 = oe.contract_expression(eqn2, *[ten.shape for ten in tens2], optimize=opt)\r\n\r\n    print(expr1(*tens1))\r\n    print(expr2(*tens2))\r\n```\r\n\r\nThe output of this program, using the latest PyPI release, is:\r\n\r\n```\r\ntensor(-0.0187)\r\ntensor(0.4303)\r\ntensor(-0.0187)\r\ntensor([[[[[-0.4418]],\r\n\r\n          [[ 1.2737]]]]])\r\n```\r\n\r\nLines 1 and 3 should match (and do), but so should 2 and 4 (and don't).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/130", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/130/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/130/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/130", "id": 576645648, "node_id": "MDU6SXNzdWU1NzY2NDU2NDg=", "number": 130, "title": "Confusing error messages when input shape doesn't match subscripts", "user": {"login": "bbbbbbbbba", "id": 6083021, "node_id": "MDQ6VXNlcjYwODMwMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/6083021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bbbbbbbbba", "html_url": "https://github.com/bbbbbbbbba", "followers_url": "https://api.github.com/users/bbbbbbbbba/followers", "following_url": "https://api.github.com/users/bbbbbbbbba/following{/other_user}", "gists_url": "https://api.github.com/users/bbbbbbbbba/gists{/gist_id}", "starred_url": "https://api.github.com/users/bbbbbbbbba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bbbbbbbbba/subscriptions", "organizations_url": "https://api.github.com/users/bbbbbbbbba/orgs", "repos_url": "https://api.github.com/users/bbbbbbbbba/repos", "events_url": "https://api.github.com/users/bbbbbbbbba/events{/privacy}", "received_events_url": "https://api.github.com/users/bbbbbbbbba/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-06T01:55:44Z", "updated_at": "2020-03-06T13:08:55Z", "closed_at": "2020-03-06T13:08:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\n>>> import numpy as np\r\n>>> import opt_einsum as oe\r\n>>> oe.contract('A,A->A', np.zeros((2,)), np.zeros((2, 2)))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/loaner/Library/Python/3.7/lib/python/site-packages/opt_einsum/contract.py\", line 477, in contract\r\n    use_blas=use_blas)\r\n  File \"/Users/loaner/Library/Python/3.7/lib/python/site-packages/opt_einsum/contract.py\", line 223, in contract_path\r\n    \"correct number of indices for operand {}.\".format(input_subscripts[tnum], tnum))\r\nValueError: Einstein sum subscript ',' does not contain the correct number of indices for operand 1.\r\n```\r\n\r\nApparently this is caused by a simple misuse of variable, where on line 233 `input_list` should be used instead of `input_subscripts`.\r\n\r\nhttps://github.com/dgasmith/opt_einsum/blob/84a805d35ee501abfce7a07030103a209f568af2/opt_einsum/contract.py#L213-L233", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/126", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/126/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/126/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/126", "id": 572758404, "node_id": "MDU6SXNzdWU1NzI3NTg0MDQ=", "number": 126, "title": "modify python_requires in setup.py to require python 3.6+", "user": {"login": "cdepillabout", "id": 64804, "node_id": "MDQ6VXNlcjY0ODA0", "avatar_url": "https://avatars1.githubusercontent.com/u/64804?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cdepillabout", "html_url": "https://github.com/cdepillabout", "followers_url": "https://api.github.com/users/cdepillabout/followers", "following_url": "https://api.github.com/users/cdepillabout/following{/other_user}", "gists_url": "https://api.github.com/users/cdepillabout/gists{/gist_id}", "starred_url": "https://api.github.com/users/cdepillabout/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cdepillabout/subscriptions", "organizations_url": "https://api.github.com/users/cdepillabout/orgs", "repos_url": "https://api.github.com/users/cdepillabout/repos", "events_url": "https://api.github.com/users/cdepillabout/events{/privacy}", "received_events_url": "https://api.github.com/users/cdepillabout/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-28T13:33:59Z", "updated_at": "2020-03-01T20:21:44Z", "closed_at": "2020-03-01T20:21:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "The `setup.py` file sets `python_requires='>=3.5'`:\r\n\r\nhttps://github.com/dgasmith/opt_einsum/blob/4323cfce5f415dc425143f216171cefa56d5d429/setup.py#L25\r\n\r\nHowever, `opt_einsum` is using `random.choices`, which is only available on `>=python-3.6`:\r\n\r\nhttps://github.com/dgasmith/opt_einsum/blob/4323cfce5f415dc425143f216171cefa56d5d429/opt_einsum/path_random.py#L263\r\n\r\n`random.choices` api docs: https://docs.python.org/3/library/random.html#random.choices\r\n\r\n----------------------------------\r\n\r\nAlso, as far as I can tell, travis is attempting to test with `python-3.5`:\r\n\r\nhttps://github.com/dgasmith/opt_einsum/blob/4323cfce5f415dc425143f216171cefa56d5d429/.travis.yml#L12\r\n\r\nhttps://github.com/dgasmith/opt_einsum/blob/4323cfce5f415dc425143f216171cefa56d5d429/.travis.yml#L21-L24\r\n\r\nBut these tests are actually running with `python-3.6`:\r\n\r\n- https://travis-ci.org/dgasmith/opt_einsum/jobs/645102401#L182\r\n- https://travis-ci.org/dgasmith/opt_einsum/jobs/645102401#L488\r\n- https://travis-ci.org/dgasmith/opt_einsum/jobs/645102401#L550", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/123", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/123/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/123/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/123/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/123", "id": 558702354, "node_id": "MDU6SXNzdWU1NTg3MDIzNTQ=", "number": 123, "title": "v3.2.0 Release", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920157, "node_id": "MDU6TGFiZWwxNTY5MjAxNTc=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-02T14:13:56Z", "updated_at": "2020-03-03T00:40:10Z", "closed_at": "2020-03-03T00:40:02Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Any objects to a minor release? It is smaller than out typical minor bump, but will include the new `auto-hq/random-greedy-128` aliases, `mars` backend, and the new wheel/3.8 support.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/118", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/118/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/118/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/118/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/118", "id": 530823764, "node_id": "MDU6SXNzdWU1MzA4MjM3NjQ=", "number": 118, "title": "optimize='dp' gets confused by singleton factors ", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-02T00:17:36Z", "updated_at": "2019-12-08T18:55:19Z", "closed_at": "2019-12-08T18:55:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "This hangs with 100% utilization. \r\n```\r\nimport opt_einsum as oe\r\neinsum_string = 'nlp,nlq->n'\r\nviews = oe.helpers.build_views(einsum_string, {'n': 30, 'i': 100, 'l': 100, 'p': 2, 'q': 2, 'z': 1})\r\npath, path_info = oe.contract_path(einsum_string, *views,optimize='dp')\r\nprint(path_info)\r\n```\r\nChanging optimizer or increasing size of `z` factor works", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/116", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/116/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/116/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/116", "id": 530635647, "node_id": "MDU6SXNzdWU1MzA2MzU2NDc=", "number": 116, "title": "Getting \"not enough values to unpack\" with optimize=dp", "user": {"login": "yaroslavvb", "id": 23068, "node_id": "MDQ6VXNlcjIzMDY4", "avatar_url": "https://avatars3.githubusercontent.com/u/23068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaroslavvb", "html_url": "https://github.com/yaroslavvb", "followers_url": "https://api.github.com/users/yaroslavvb/followers", "following_url": "https://api.github.com/users/yaroslavvb/following{/other_user}", "gists_url": "https://api.github.com/users/yaroslavvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaroslavvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaroslavvb/subscriptions", "organizations_url": "https://api.github.com/users/yaroslavvb/orgs", "repos_url": "https://api.github.com/users/yaroslavvb/repos", "events_url": "https://api.github.com/users/yaroslavvb/events{/privacy}", "received_events_url": "https://api.github.com/users/yaroslavvb/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-30T22:04:33Z", "updated_at": "2019-12-08T18:55:12Z", "closed_at": "2019-12-08T18:55:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "The following breaks with optimize='dp' but works with default optimizer\r\n```\r\nimport opt_einsum as oe \r\neinsum_string = 'a,bcd,efg->'\r\nviews = oe.helpers.build_views(einsum_string, {c: 2 for c in einsum_string.replace(',->','')})\r\npath, path_info = oe.contract_path(einsum_string, *views, optimize='dp')\r\nprint(path_info)\r\n```\r\nproduces\r\n```\r\n/usr/local/lib/python3.6/dist-packages/opt_einsum/contract.py in contract_path(*operands, **kwargs)\r\n    270     else:\r\n    271         path_optimizer = paths.get_path_fn(path_type)\r\n--> 272         path = path_optimizer(input_sets, output_set, dimension_dict, memory_arg)\r\n    273 \r\n    274     cost_list = []\r\n\r\n/usr/local/lib/python3.6/dist-packages/opt_einsum/paths.py in dynamic_programming(inputs, output, size_dict, memory_limit)\r\n    971 def dynamic_programming(inputs, output, size_dict, memory_limit=None):\r\n    972     optimizer = DynamicProgrammingOptimizer()\r\n--> 973     return optimizer(inputs, output, size_dict, memory_limit)\r\n    974 \r\n    975 \r\n\r\n/usr/local/lib/python3.6/dist-packages/opt_einsum/paths.py in __call__(self, inputs, output, size_dict, memory_limit)\r\n    872         inputs, inputs_contractions = zip(*[\r\n    873             (i - i_single, j if i.isdisjoint(i_single) else (j,))\r\n--> 874             for j, i in enumerate(inputs)\r\n    875             if len(i - i_single) > 0\r\n    876         ])\r\n\r\nValueError: not enough values to unpack (expected 2, got 0)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/113", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/113/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/113/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/113", "id": 530081634, "node_id": "MDU6SXNzdWU1MzAwODE2MzQ=", "number": 113, "title": "opt_einsum's capability of using multiple cores / gpus for MTTKRP-like operation between sparse tensor and dense factor matrices?", "user": {"login": "JunhaoWang", "id": 16586487, "node_id": "MDQ6VXNlcjE2NTg2NDg3", "avatar_url": "https://avatars1.githubusercontent.com/u/16586487?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JunhaoWang", "html_url": "https://github.com/JunhaoWang", "followers_url": "https://api.github.com/users/JunhaoWang/followers", "following_url": "https://api.github.com/users/JunhaoWang/following{/other_user}", "gists_url": "https://api.github.com/users/JunhaoWang/gists{/gist_id}", "starred_url": "https://api.github.com/users/JunhaoWang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JunhaoWang/subscriptions", "organizations_url": "https://api.github.com/users/JunhaoWang/orgs", "repos_url": "https://api.github.com/users/JunhaoWang/repos", "events_url": "https://api.github.com/users/JunhaoWang/events{/privacy}", "received_events_url": "https://api.github.com/users/JunhaoWang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-28T21:37:27Z", "updated_at": "2020-01-07T14:57:48Z", "closed_at": "2020-01-07T14:57:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "If I have sparse tensor and sparse or dense factor matrices:\r\n\r\nabc, bz, cz -> az   (used in CP decomposition)\r\n\r\nwhere abc is sparse, but bz and cz are dense or sparse, how would opt_einsum handle the contraction? And would it utilize multiple cpus and/or gpus in this contraction?\r\n\r\nsame question goes for \r\n\r\nabc, def, be, cf -> ad   (used in Tucker decomposition)\r\n\r\nwhere abc is sparse, but other components could be dense or sparse.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/108", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/108/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/108/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/108/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/108", "id": 504225548, "node_id": "MDU6SXNzdWU1MDQyMjU1NDg=", "number": 108, "title": "Migrate LGTM.com installation from OAuth to GitHub App", "user": {"login": "LGTM-badger", "id": 42374550, "node_id": "MDQ6VXNlcjQyMzc0NTUw", "avatar_url": "https://avatars2.githubusercontent.com/u/42374550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LGTM-badger", "html_url": "https://github.com/LGTM-badger", "followers_url": "https://api.github.com/users/LGTM-badger/followers", "following_url": "https://api.github.com/users/LGTM-badger/following{/other_user}", "gists_url": "https://api.github.com/users/LGTM-badger/gists{/gist_id}", "starred_url": "https://api.github.com/users/LGTM-badger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LGTM-badger/subscriptions", "organizations_url": "https://api.github.com/users/LGTM-badger/orgs", "repos_url": "https://api.github.com/users/LGTM-badger/repos", "events_url": "https://api.github.com/users/LGTM-badger/events{/privacy}", "received_events_url": "https://api.github.com/users/LGTM-badger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-08T19:11:30Z", "updated_at": "2019-10-09T14:27:36Z", "closed_at": "2019-10-09T14:27:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi There,\r\n\r\nThis project is still using an old implementation of LGTM's automated code review, which has now been disabled. To continue using automated code review, and receive checks on your Pull Requests, please [install the GitHub App](https://github.com/apps/lgtm-com/installations/new) on this repository.\r\n\r\nThanks,\r\nThe LGTM Team", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/107", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/107/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/107/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/107", "id": 499969217, "node_id": "MDU6SXNzdWU0OTk5NjkyMTc=", "number": 107, "title": "v3.1 Release", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1020624342, "node_id": "MDU6TGFiZWwxMDIwNjI0MzQy", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/release", "name": "release", "color": "9f79e0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-29T20:50:29Z", "updated_at": "2019-09-30T20:55:18Z", "closed_at": "2019-09-30T20:55:18Z", "author_association": "OWNER", "active_lock_reason": null, "body": "The dynamic path optimizations are in with documentation. I think we should cut a v3.1 release. Any objections?\r\n\r\n@jcmgray @mrader1248", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/99", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/99/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/99/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/99", "id": 483873767, "node_id": "MDU6SXNzdWU0ODM4NzM3Njc=", "number": 99, "title": "`Optimal` path not optimal?", "user": {"login": "Bonnevie", "id": 5861991, "node_id": "MDQ6VXNlcjU4NjE5OTE=", "avatar_url": "https://avatars2.githubusercontent.com/u/5861991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Bonnevie", "html_url": "https://github.com/Bonnevie", "followers_url": "https://api.github.com/users/Bonnevie/followers", "following_url": "https://api.github.com/users/Bonnevie/following{/other_user}", "gists_url": "https://api.github.com/users/Bonnevie/gists{/gist_id}", "starred_url": "https://api.github.com/users/Bonnevie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Bonnevie/subscriptions", "organizations_url": "https://api.github.com/users/Bonnevie/orgs", "repos_url": "https://api.github.com/users/Bonnevie/repos", "events_url": "https://api.github.com/users/Bonnevie/events{/privacy}", "received_events_url": "https://api.github.com/users/Bonnevie/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920152, "node_id": "MDU6TGFiZWwxNTY5MjAxNTI=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-08-22T09:24:14Z", "updated_at": "2019-12-07T16:35:49Z", "closed_at": "2019-12-07T16:35:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "First, thanks for the great package!\r\n\r\nWas running `optimal` vs. `auto` on a 10 element random expression, and while I know optimal is not recommended for larger networks, I found it odd that it gives worse scaling and with a larger intermediate size. Some of the other threads mention memory as a factor in the optimization, but the `auto` solution seems better on memory as well? All the tensors are 3x3. Is this intentional behaviour? \r\n\r\nauto path:\r\n```\r\n([(2, 3), (4, 8), (0, 4), (0, 4), (4, 5), (0, 2), (2, 3), (1, 2), (0, 1)],\r\n   Complete contraction:  db,cc,fe,fe,aa,ff,fe,cb,ea,ac->d\r\n          Naive scaling:  6\r\n      Optimized scaling:  3\r\n       Naive FLOP count:  7.290e+3\r\n   Optimized FLOP count:  2.700e+2\r\n    Theoretical speedup:  27.000\r\n   Largest intermediate:  9.000e+0 elements\r\n --------------------------------------------------------------------------------\r\n scaling        BLAS                current                             remaining\r\n --------------------------------------------------------------------------------\r\n    2              0              fe,fe->fe         db,cc,aa,ff,fe,cb,ea,ac,fe->d\r\n    2              0              fe,fe->fe            db,cc,aa,ff,cb,ea,ac,fe->d\r\n    3           GEMM              cb,db->cd               cc,aa,ff,ea,ac,fe,cd->d\r\n    2              0              ac,cc->ac                  aa,ff,ea,fe,cd,ac->d\r\n    3           GEMM              ac,cd->ad                     aa,ff,ea,fe,ad->d\r\n    2              0              ea,aa->ea                        ff,fe,ad,ea->d\r\n    3           GEMM              ea,ad->ed                           ff,fe,ed->d\r\n    3           GEMM              ed,fe->df                              ff,df->d\r\n```\r\n\r\noptimal path: \r\n```\r\n([(1, 7), (0, 8), (0, 2), (0, 1), (0, 5), (0, 3), (0, 3), (0, 2), (0, 1)],\r\n   Complete contraction:  db,cc,fe,fe,aa,ff,fe,cb,ea,ac->d\r\n          Naive scaling:  6\r\n      Optimized scaling:  4\r\n       Naive FLOP count:  7.290e+3\r\n   Optimized FLOP count:  5.130e+2\r\n    Theoretical speedup:  14.211\r\n   Largest intermediate:  2.700e+1 elements\r\n --------------------------------------------------------------------------------\r\n scaling        BLAS                current                             remaining\r\n --------------------------------------------------------------------------------\r\n    2              0              cb,cc->cb         db,fe,fe,aa,ff,fe,ea,ac,cb->d\r\n    3           GEMM              cb,db->cd            fe,fe,aa,ff,fe,ea,ac,cd->d\r\n    3              0             aa,fe->afe              fe,ff,fe,ea,ac,cd,afe->d\r\n    2              0              ff,fe->fe                 fe,ea,ac,cd,afe,fe->d\r\n    2              0              fe,fe->fe                    ea,ac,cd,afe,fe->d\r\n    3              0            afe,ea->afe                       ac,cd,fe,afe->d\r\n    4           GEMM            afe,ac->fec                          cd,fe,fec->d\r\n    4           GEMM            fec,cd->fed                             fe,fed->d\r\n    3           GEMM              fed,fe->d                                  d->d) \r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/98", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/98/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/98/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/98", "id": 482616008, "node_id": "MDU6SXNzdWU0ODI2MTYwMDg=", "number": 98, "title": "`import opt_einsum` fails due to jax.py", "user": {"login": "skye", "id": 88808, "node_id": "MDQ6VXNlcjg4ODA4", "avatar_url": "https://avatars1.githubusercontent.com/u/88808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skye", "html_url": "https://github.com/skye", "followers_url": "https://api.github.com/users/skye/followers", "following_url": "https://api.github.com/users/skye/following{/other_user}", "gists_url": "https://api.github.com/users/skye/gists{/gist_id}", "starred_url": "https://api.github.com/users/skye/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skye/subscriptions", "organizations_url": "https://api.github.com/users/skye/orgs", "repos_url": "https://api.github.com/users/skye/repos", "events_url": "https://api.github.com/users/skye/events{/privacy}", "received_events_url": "https://api.github.com/users/skye/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-20T02:46:52Z", "updated_at": "2019-08-23T21:45:53Z", "closed_at": "2019-08-23T21:45:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Importing opt_einsum 3.0.0 fails for me due to the new jax backend:\r\n```\r\nIn [1]: import opt_einsum\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-1-c4cbb6c93042> in <module>()\r\n----> 1 import opt_einsum\r\n\r\n.../opt_einsum/__init__.py in <module>()\r\n      7 from . import paths\r\n      8 from . import path_random\r\n----> 9 from .contract import contract, contract_path, contract_expression\r\n     10 from .parser import get_symbol\r\n     11 from .sharing import shared_intermediates\r\n\r\n.../opt_einsum/contract.py in <module>()\r\n      8 import numpy as np\r\n      9 \r\n---> 10 from . import backends\r\n     11 from . import blas\r\n     12 from . import helpers\r\n\r\n.../opt_einsum/backends/__init__.py in <module>()\r\n      5 # Backends\r\n      6 from .cupy import to_cupy\r\n----> 7 from .dispatch import (get_func, has_einsum, has_tensordot, build_expression, evaluate_constants, has_backend)\r\n      8 from .tensorflow import to_tensorflow\r\n      9 from .theano import to_theano\r\n\r\n.../opt_einsum/backends/dispatch.py in <module>()\r\n     10 \r\n     11 from . import cupy as _cupy\r\n---> 12 from . import jax as _jax\r\n     13 from . import tensorflow as _tensorflow\r\n     14 from . import theano as _theano\r\n\r\n.../opt_einsum/backends/jax.pyc in <module>()\r\n     13 \r\n     14     @to_backend_cache_wrap\r\n---> 15     @jax.jit\r\n     16     def to_jax(x):\r\n     17         return x\r\n\r\nAttributeError: 'module' object has no attribute 'jit'\r\n```\r\n\r\nI think the `import jax` at https://github.com/dgasmith/opt_einsum/blob/master/opt_einsum/backends/jax.py#L12 is importing itself since the file is named jax, instead of importing the installed library jax.\r\n\r\nOnce this is fixed, I suspect there'll be a circular import, since jax imports opt_einsum! https://github.com/google/jax/blob/master/jax/numpy/lax_numpy.py#L38 I'm not sure how best to resolve this -- the best I can come up with is one of us adds a \"lazy\" import inside a function, instead of at the top of the file, but maybe you can think of something more elegant. Maybe since jax already calls opt_einsum the jax backend isn't necessary?\r\n\r\nBTW, glad to see you're interested in jax! :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/97", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/97/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/97/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/97", "id": 481272491, "node_id": "MDU6SXNzdWU0ODEyNzI0OTE=", "number": 97, "title": "cuTENSOR + cupy backend", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-15T18:16:12Z", "updated_at": "2020-03-02T15:34:01Z", "closed_at": "2020-03-02T15:34:01Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Nvidia reached out about using cuTENSOR as backend (details [here](https://developer.nvidia.com/cutensor-product-page)) which is a low level implementation of tensor contraction on Nvidia GPU's.\r\n\r\nThis doesn't seem to be widely advertised, but cupy has support for this in their development head with some information [here](https://github.com/cupy/cupy/blob/83b53380a3e52103ab48a3be5b774fc193f98a44/examples/cutensor/contraction.py). Though the different syntax would require some minimal work to integrate.\r\n\r\nI don't have too many use cases personally to give this a try, but if anyone has some fun use cases I can benchmark them on a pair of V100s against other backends.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/93", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/93/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/93/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/93/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/93", "id": 478057188, "node_id": "MDU6SXNzdWU0NzgwNTcxODg=", "number": 93, "title": "Missing path_random in pip3 install", "user": {"login": "Thenerdstation", "id": 8702042, "node_id": "MDQ6VXNlcjg3MDIwNDI=", "avatar_url": "https://avatars0.githubusercontent.com/u/8702042?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thenerdstation", "html_url": "https://github.com/Thenerdstation", "followers_url": "https://api.github.com/users/Thenerdstation/followers", "following_url": "https://api.github.com/users/Thenerdstation/following{/other_user}", "gists_url": "https://api.github.com/users/Thenerdstation/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thenerdstation/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thenerdstation/subscriptions", "organizations_url": "https://api.github.com/users/Thenerdstation/orgs", "repos_url": "https://api.github.com/users/Thenerdstation/repos", "events_url": "https://api.github.com/users/Thenerdstation/events{/privacy}", "received_events_url": "https://api.github.com/users/Thenerdstation/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-07T17:41:02Z", "updated_at": "2019-08-15T01:21:54Z", "closed_at": "2019-08-15T01:21:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like `opt_einsum.path_random` is missing from the pip install package.\r\n\r\nVersion: 2.3.2\r\n\r\n```python\r\n>>> import opt_einsum\r\n>>> opt_einsum.__version__\r\n'v2.3.2'\r\n>>> dir(opt_einsum)\r\n['__builtins__', '__cached__', '__doc__', '__file__', '__git_revision__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_version', 'backends', 'blas', 'compat', 'contract', 'contract_expression', 'contract_path', 'get_symbol', 'helpers', 'parser', 'paths', 'shared_intermediates', 'sharing']\r\n>>> opt_einsum.path_random\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: module 'opt_einsum' has no attribute 'path_random'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/92", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/92/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/92/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/92", "id": 470818923, "node_id": "MDU6SXNzdWU0NzA4MTg5MjM=", "number": 92, "title": "Error when using PyTorch backend on large contraction", "user": {"login": "emprice", "id": 3172578, "node_id": "MDQ6VXNlcjMxNzI1Nzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3172578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emprice", "html_url": "https://github.com/emprice", "followers_url": "https://api.github.com/users/emprice/followers", "following_url": "https://api.github.com/users/emprice/following{/other_user}", "gists_url": "https://api.github.com/users/emprice/gists{/gist_id}", "starred_url": "https://api.github.com/users/emprice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emprice/subscriptions", "organizations_url": "https://api.github.com/users/emprice/orgs", "repos_url": "https://api.github.com/users/emprice/repos", "events_url": "https://api.github.com/users/emprice/events{/privacy}", "received_events_url": "https://api.github.com/users/emprice/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-07-21T20:02:45Z", "updated_at": "2020-03-02T18:28:16Z", "closed_at": "2020-03-02T15:32:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Great project! I'm looking forward to using it in my research.\r\n\r\nI came across this when I was trying to optimize a tensor (as in the quimb documentation) and wanted to try my hand at a contraction manually. My machine was using 88GB RAM to perform the contraction, which is simply _too much_, and I wanted to see which step of the contraction was causing a problem, since none of my tensors are very large.\r\n\r\nWhen I tried to put together a MWE, everything seems to work great until I actually want to do the contraction, using the PyTorch backend. It's important for my application to use PyTorch because I need to do the optimization step (are there other backends that would let me do that?) for a time-evolved state. I get the error: `RuntimeError: only lowercase letters a-z allowed as indices`.\r\n\r\nNow, this is obviously a limitation in PyTorch itself, not opt_einsum, but I'm wondering if there might be a clever workaround that I've missed? I could imagine that it would be possible to take a pre-computed contraction path and \r\n\r\n1. Limit the number of indices in any one step (maybe not, now that I think about it more), and/or\r\n2. Cleverly re-index so that separate calls to `einsum` use indices that start over at \"a\", which might mitigate or eliminate the problem, depending on how many indices are contracted in a given step\r\n\r\nIf it helps, this is the contraction I was trying, which I generated for a 2-dimensional quimb TensorNetwork:\r\n\r\n`abc,dbef,gehi,jhkl,mkn,aopq,drpst,gusvw,jxvyz,mAyB,oCDE,rFDGH,uIGJK,xLJMN,AOMP,CQRS,FTRUV,IWUXY,LZX\u00c0\u00c1,O\u00c2\u00c0\u00c3,Q\u00c4\u00c5,T\u00c4\u00c6\u00c7,W\u00c6\u00c8\u00c9,Z\u00c8\u00ca\u00cb,\u00c2\u00ca\u00cc,\u00cd\u00cec\u00cf,\u00d0\u00ce\u00d1f\u00d2,\u00d3\u00d1\u00d4i\u00d5,\u00d6\u00d4\u00d7l\u00d8,\u00d9\u00d7n\u00da,\u00cd\u00db\u00dcq\u00dd,\u00d0\u00de\u00dc\u00dft\u00e0,\u00d3\u00e1\u00df\u00e2w\u00e3,\u00d6\u00e4\u00e2\u00e5z\u00e6,\u00d9\u00e7\u00e5B\u00e8,\u00db\u00e9\u00eaE\u00eb,\u00de\u00ec\u00ea\u00edH\u00ee,\u00e1\u00ef\u00ed\u00f0K\u00f1,\u00e4\u00f2\u00f0\u00f3N\u00f4,\u00e7\u00f5\u00f3P\u00f6,\u00e9\u00f7\u00f8S\u00f9,\u00ec\u00fa\u00f8\u00fbV\u00fc,\u00ef\u00fd\u00fb\u00feY\u00ff,\u00f2\u0100\u00fe\u0101\u00c1\u0102,\u00f5\u0103\u0101\u00c3\u0104,\u00f7\u0105\u00c5\u0106,\u00fa\u0105\u0107\u00c7\u0108,\u00fd\u0107\u0109\u00c9\u010a,\u0100\u0109\u010b\u00cb\u010c,\u0103\u010b\u00cc\u010d,\u010e\u010f\u00cf,\u0110\u010f\u0111\u00d2,\u0112\u0111\u0113\u00d5,\u0114\u0113\u0115\u00d8,\u0116\u0115\u00da,\u010e\u0117\u0118\u00dd,\u0110\u0119\u0118\u011a\u00e0,\u0112\u011b\u011a\u011c\u00e3,\u0114\u011d\u011c\u011e\u00e6,\u0116\u011f\u011e\u00e8,\u0117\u0120\u0121\u00eb,\u0119\u0122\u0121\u0123\u00ee,\u011b\u0124\u0123\u0125\u00f1,\u011d\u0126\u0125\u0127\u00f4,\u011f\u0128\u0127\u00f6,\u0120\u0129\u012a\u00f9,\u0122\u012b\u012a\u012c\u00fc,\u0124\u012d\u012c\u012e\u00ff,\u0126\u012f\u012e\u0130\u0102,\u0128\u0131\u0130\u0104,\u0129\u0132\u0106,\u012b\u0132\u0133\u0108,\u012d\u0133\u0134\u010a,\u012f\u0134\u0135\u010c,\u0131\u0135\u010d->`\r\n\r\nThanks in advance for any help! Depending on the feasibility of the above, I might be able to help out in developing functionality that would allow contractions like this one, since they're important for my project.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/90", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/90/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/90/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/90/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/90", "id": 463857134, "node_id": "MDU6SXNzdWU0NjM4NTcxMzQ=", "number": 90, "title": "Separate symbolic path optimization from tensor backend?", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-03T16:54:03Z", "updated_at": "2019-07-18T00:53:40Z", "closed_at": "2019-07-18T00:53:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I really like that opt_einsum provides a pure-python dispatch mechanism that we can essentially use for symbolic computation. I'm opening this issue to discuss how we might **further** separate the path optimizer (which is purely symbolic) from the backend dispatch mechanism. (They are already mostly independent.)\r\n\r\n## Examples\r\n\r\nHere are a couple cool examples of purely symbolic path optimization, unrelated to tensor contraction:\r\n1. Kevin Murphy's [variable elimination code](https://github.com/probml/pyprobml/blob/4ede64b4cebf8a9c7fc40d5b14c5dd76c5667e50/scripts/bayesnet_inf_autodiff.py#L134) that uses `np.einsum_path` as an alternative to the Junction Tree algorithm for inference in graphical model. When these models are limited to discrete random variables, this example is equivalent to tensor contraction; however it generalizes to e.g. Gaussian variable elimination which is distinct from tensor contraction and really wants a different objective function.\r\n2. @eb8680 and I are similarly using the greedy optimizer to [optimize sum-product expressions](https://github.com/pyro-ppl/funsor/blob/14766efd8d5da091cb78e92a788f9fd25301de0b/funsor/optimizer.py#L174) involving not only sums but integrals, again typically Gaussian integrals.\r\n\r\nOne interesting aspect of both these examples is that, whereas tensor contraction cost is exponential space in time in the number of dimensions (of say fixed size), Gaussian contraction is only quadratic in space and cubic (or just sub-cubic) in number of dimensions. Thus Gaussian contractions should use a different FLOP computaiton.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/87", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/87/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/87/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/87/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/87", "id": 454208831, "node_id": "MDU6SXNzdWU0NTQyMDg4MzE=", "number": 87, "title": "TensorNetwork", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-10T14:47:51Z", "updated_at": "2019-06-20T22:29:26Z", "closed_at": "2019-06-20T22:29:26Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It looks like google put out a new TensorNetwork framework which is very similar to this project. It may be reaching out to them as their base algorithms are relatively simple:\r\n\r\nhttps://github.com/google/TensorNetwork", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/86", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/86/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/86/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/86/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/86", "id": 449168805, "node_id": "MDU6SXNzdWU0NDkxNjg4MDU=", "number": 86, "title": "Potential bug (outer tensor product)", "user": {"login": "fischbacher", "id": 43236470, "node_id": "MDQ6VXNlcjQzMjM2NDcw", "avatar_url": "https://avatars2.githubusercontent.com/u/43236470?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fischbacher", "html_url": "https://github.com/fischbacher", "followers_url": "https://api.github.com/users/fischbacher/followers", "following_url": "https://api.github.com/users/fischbacher/following{/other_user}", "gists_url": "https://api.github.com/users/fischbacher/gists{/gist_id}", "starred_url": "https://api.github.com/users/fischbacher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fischbacher/subscriptions", "organizations_url": "https://api.github.com/users/fischbacher/orgs", "repos_url": "https://api.github.com/users/fischbacher/repos", "events_url": "https://api.github.com/users/fischbacher/events{/privacy}", "received_events_url": "https://api.github.com/users/fischbacher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-28T09:43:37Z", "updated_at": "2020-07-03T00:38:08Z", "closed_at": "2020-07-03T00:38:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "This works...:\r\n\r\n```python\r\n>>> import mpmath\r\n>>> import numpy\r\n>>> m0 = numpy.eye(2)\r\n>>> opt_einsum.contract('bc,ad->abcd', m0, m0)\r\narray([[[[1., 0.], ...)\r\n```\r\n\r\n...but this breaks:\r\n\r\n```python\r\n>>> m1 = m0 + mpmath.mpc(0)\r\n>>> opt_einsum.contract('bc,ad->abcd', m1, m1)\r\nTraceback (most recent call last): (...)\r\nTypeError: invalid data type for einsum\r\n```\r\n\r\nHowever, using opt_einsum with mpmath is otherwise OK in principle:\r\n\r\n```python\r\n>>> opt_einsum.contract('bc,cd->bd', m1, m1)\r\narray([[mpc(real='1.0', imag='0.0'), mpc(real='0.0', imag='0.0')],\r\n       [mpc(real='0.0', imag='0.0'), mpc(real='1.0', imag='0.0')]],\r\n      dtype=object)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/85", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/85/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/85/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/85/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/85", "id": 413291768, "node_id": "MDU6SXNzdWU0MTMyOTE3Njg=", "number": 85, "title": "FR: cache hit/miss data", "user": {"login": "liwt31", "id": 22628546, "node_id": "MDQ6VXNlcjIyNjI4NTQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/22628546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liwt31", "html_url": "https://github.com/liwt31", "followers_url": "https://api.github.com/users/liwt31/followers", "following_url": "https://api.github.com/users/liwt31/following{/other_user}", "gists_url": "https://api.github.com/users/liwt31/gists{/gist_id}", "starred_url": "https://api.github.com/users/liwt31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liwt31/subscriptions", "organizations_url": "https://api.github.com/users/liwt31/orgs", "repos_url": "https://api.github.com/users/liwt31/repos", "events_url": "https://api.github.com/users/liwt31/events{/privacy}", "received_events_url": "https://api.github.com/users/liwt31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-22T08:21:06Z", "updated_at": "2019-02-22T13:44:57Z", "closed_at": "2019-02-22T12:01:17Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It would be nice to have something like this (partly copied from the document)\r\n```\r\n# copied\r\nwith shared_intermediates() as cache:\r\n    marginals = {output: contract('{}->{}'.format(inputs, output), *factors)\r\n                 for output in 'abcdef'}\r\n# new ideas\r\nprint(cache.hit)\r\nprint(cache.miss)\r\n```\r\nIf I understand correctly `cache` is now a simple dictionary and no direct operaetion on the variable is documented, so adding some new attributes won't be very difficult.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/83", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/83/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/83/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/83/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/83", "id": 412215264, "node_id": "MDU6SXNzdWU0MTIyMTUyNjQ=", "number": 83, "title": "v3.0 Planning", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1020624342, "node_id": "MDU6TGFiZWwxMDIwNjI0MzQy", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/release", "name": "release", "color": "9f79e0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-02-20T02:31:43Z", "updated_at": "2019-08-15T01:22:33Z", "closed_at": "2019-08-15T01:22:33Z", "author_association": "OWNER", "active_lock_reason": null, "body": "We are planning a major version bump for the following reasons:\r\n - Transition to be backend agnostic (NumPy is no longer the principle backend).\r\n   - See #81 which has the (small) potential to break current implementations.\r\n\r\nTODO Items:\r\n - [ ] Refactoring in preparation for NEP18 (#46) should be considered.\r\n - [ ] Consider adding a Ricci calculus parser `contract('A_ij B_jk A_kl', {\"A\": a, \"B\": b})`.\r\n - [x] Run through the backends to check where we can refactor.\r\n - [x] Update docs and README to reflect that we are NumPy agnostic.\r\n - [ ] Consider parsers that use metrics besides raw FLOPS (actually trying out several contraction paths for example).\r\n\r\nAre there other items where we might need to do a few (small) compatibility breaks that would be good for future sustainability?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/82", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/82/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/82/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/82/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/82", "id": 411246497, "node_id": "MDU6SXNzdWU0MTEyNDY0OTc=", "number": 82, "title": "FR: separate 'auto' strategy out of contract_path", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-17T22:55:53Z", "updated_at": "2019-02-20T17:30:15Z", "closed_at": "2019-02-20T17:30:15Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The 'auto' strategy is really nice, but it requires actual arrays because it is based into `contract_path`. Sometimes I want to get a path based merely on shapes. It should be easy to factor out the logic from `contract_path` to a new `paths.auto` that conforms to the standard shape-based path interface.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/79", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/79/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/79/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/79/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/79", "id": 399151123, "node_id": "MDU6SXNzdWUzOTkxNTExMjM=", "number": 79, "title": "Python2 Deprecation Plan", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1020624342, "node_id": "MDU6TGFiZWwxMDIwNjI0MzQy", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/release", "name": "release", "color": "9f79e0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2019-01-15T01:34:08Z", "updated_at": "2019-08-12T17:44:35Z", "closed_at": "2019-08-12T17:44:35Z", "author_association": "OWNER", "active_lock_reason": null, "body": "As Python2 will cease to be supported in 2020 and many Python projects have cut their last release of a Py2 compliant module (NumPy, SciPy, Pandas, iPython, SciKitLearn, [etc]( https://python3statement.org)) we may want to consider doing the same. The cleanup in this project is pretty low when considering the removal of Py2, so I do not see this as very urgent. I would be curious if anyone had thoughts as to this direction.\r\n\r\n@fritzo @jcmgray ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/75", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/75/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/75/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/75", "id": 384427070, "node_id": "MDU6SXNzdWUzODQ0MjcwNzA=", "number": 75, "title": "Indexing operations in Einsum?", "user": {"login": "srush", "id": 35882, "node_id": "MDQ6VXNlcjM1ODgy", "avatar_url": "https://avatars1.githubusercontent.com/u/35882?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srush", "html_url": "https://github.com/srush", "followers_url": "https://api.github.com/users/srush/followers", "following_url": "https://api.github.com/users/srush/following{/other_user}", "gists_url": "https://api.github.com/users/srush/gists{/gist_id}", "starred_url": "https://api.github.com/users/srush/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srush/subscriptions", "organizations_url": "https://api.github.com/users/srush/orgs", "repos_url": "https://api.github.com/users/srush/repos", "events_url": "https://api.github.com/users/srush/events{/privacy}", "received_events_url": "https://api.github.com/users/srush/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-11-26T17:08:34Z", "updated_at": "2019-08-28T15:54:24Z", "closed_at": "2019-08-28T15:54:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi opt-einsum, \r\n\r\nBig fan. I have a feature request / question.\r\n\r\nWe often find ourselves writing complicated indexing operations where we want something like `Z[i, j] = X[i, Y[i, j]]`. To do this in pytorch/numpy is a bug-prone hassle. \r\n\r\nGiven that this is just a sparse matrix multiply, I love the idea of writing it in einsum, maybe something like `einsum(ik,ijk*->ij, x, y)`. Where k is the implied dimension of treating Y as a sparse one-hot matrix. \r\n\r\nAny ideas on how I might implement a backend like this or notate it? Would want the sparse dimension to become fancy indexing. \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/71", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/71/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/71/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/71/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/71", "id": 372206404, "node_id": "MDU6SXNzdWUzNzIyMDY0MDQ=", "number": 71, "title": "let contract_expression use interleaved input", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-10-20T12:27:56Z", "updated_at": "2018-10-21T14:16:51Z", "closed_at": "2018-10-21T14:16:51Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Currently, ``contract_expression`` only accepts the 'equation' style input. This is an easy fix that I will do shortly. As part of that I can flesh out the docs on input (#70), unless you are already planning that @dgasmith ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/70", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/70/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/70/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/70/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/70", "id": 372205605, "node_id": "MDU6SXNzdWUzNzIyMDU2MDU=", "number": 70, "title": "Finish out input documentation", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1035166064, "node_id": "MDU6TGFiZWwxMDM1MTY2MDY0", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/documentation", "name": "documentation", "color": "39cca9", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/3", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3/labels", "id": 3598012, "node_id": "MDk6TWlsZXN0b25lMzU5ODAxMg==", "number": 3, "title": "v2.3", "description": null, "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2018-08-25T14:02:23Z", "updated_at": "2018-12-01T15:37:59Z", "due_on": null, "closed_at": "2018-12-01T15:37:59Z"}, "comments": 0, "created_at": "2018-10-20T12:16:47Z", "updated_at": "2018-10-21T14:16:51Z", "closed_at": "2018-10-21T14:16:51Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Input documentation was started in #68. However, the canonical `einsum` string and integer-based contractions specifications are not yet documented. The current stub can be found in `docs/source/input_format.rst`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/69", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/69/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/69/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/69/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/69", "id": 371449218, "node_id": "MDU6SXNzdWUzNzE0NDkyMTg=", "number": 69, "title": "Help required optimizing the use of contract_expression", "user": {"login": "galah92", "id": 14138433, "node_id": "MDQ6VXNlcjE0MTM4NDMz", "avatar_url": "https://avatars2.githubusercontent.com/u/14138433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galah92", "html_url": "https://github.com/galah92", "followers_url": "https://api.github.com/users/galah92/followers", "following_url": "https://api.github.com/users/galah92/following{/other_user}", "gists_url": "https://api.github.com/users/galah92/gists{/gist_id}", "starred_url": "https://api.github.com/users/galah92/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galah92/subscriptions", "organizations_url": "https://api.github.com/users/galah92/orgs", "repos_url": "https://api.github.com/users/galah92/repos", "events_url": "https://api.github.com/users/galah92/events{/privacy}", "received_events_url": "https://api.github.com/users/galah92/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-10-18T09:52:08Z", "updated_at": "2018-10-31T13:29:11Z", "closed_at": "2018-10-31T13:29:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nThank you for this great library - I see a significant improvement in my performance already.\r\n\r\nI'm facing a specific case where I got 4 matrices where only one of them is changing (real-time application). I'm successfully using the `contract_expression` like that:\r\n\r\n    import numpy as np\r\n    import opt_einsum as oe\r\n\r\n    t = 51\r\n    p = 51\r\n    r = 27\r\n    f = 56\r\n    x = 35\r\n    y = 39\r\n    A = np.arange(x * t * f).reshape([x, t, f])\r\n    B = np.arange(p * y * t * f).reshape([p, y, t, f])\r\n    C = np.arange(f * r).reshape([f, r])\r\n    D_shape = (y, x, f)\r\n\r\n    expr = oe.contract_expression('yxf,xtf,pytf,fr->tpr',\r\n                                D_shape, A, B, C,\r\n                                constants=[1, 2, 3],\r\n                                optimize='optimal')\r\n\r\n    # this is called multiple times\r\n    result = expr(D)  # D.shape == D_shape\r\n\r\nBut this doesn't yield performance improvement compared to default `np.einsum`.\r\n\r\nIn this scenario I can easily `np.transpose` `A`, `B`, `C` (and even `D`) in a way that'll yield the best path. I can change the order of the expression, and basically play with is as I'd like in order to get to the optimal path.\r\n\r\nIs there a way to do that using the library? I don't have intuition regarding what will yield the best performance.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/67", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/67/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/67/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/67", "id": 370972686, "node_id": "MDU6SXNzdWUzNzA5NzI2ODY=", "number": 67, "title": "Support more subscript symbols", "user": {"login": "liwt31", "id": 22628546, "node_id": "MDQ6VXNlcjIyNjI4NTQ2", "avatar_url": "https://avatars3.githubusercontent.com/u/22628546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liwt31", "html_url": "https://github.com/liwt31", "followers_url": "https://api.github.com/users/liwt31/followers", "following_url": "https://api.github.com/users/liwt31/following{/other_user}", "gists_url": "https://api.github.com/users/liwt31/gists{/gist_id}", "starred_url": "https://api.github.com/users/liwt31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liwt31/subscriptions", "organizations_url": "https://api.github.com/users/liwt31/orgs", "repos_url": "https://api.github.com/users/liwt31/repos", "events_url": "https://api.github.com/users/liwt31/events{/privacy}", "received_events_url": "https://api.github.com/users/liwt31/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-10-17T09:10:26Z", "updated_at": "2018-10-20T12:17:39Z", "closed_at": "2018-10-20T12:17:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The project now supports more than 52 subscripts, but only with integers, and it can quickly get confusing using so many integers. My suggestion is to support this kind of syntax:\r\n```\r\narr1 = np.zeros((2, 3))\r\nsub1 = '[left edge][bond]'\r\narr2 = np.zeros((3, 2))\r\nsub2 = '[bond][right edge]'\r\nout = '[left edge][right edge]'\r\nopt_einsum.contract(arr1, sub1, arr2, sub2, out)\r\n```\r\n\r\nI know that it's equivalent with:\r\n```\r\narr1 = np.zeros((2, 3))\r\nsub1 = [0, 1]\r\narr2 = np.zeros((3, 2))\r\nsub2 = [1, 2]\r\nout = [0, 2]\r\n```\r\n\r\nHowever, IMHO, when doing contraction with lots of tensor which have different meanings, it'll be nice to give them a proper name.\r\n\r\nI'm more than happy to prepare a PR for this, I think it's not extemely difficult.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/64", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/64/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/64/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/64", "id": 365995281, "node_id": "MDU6SXNzdWUzNjU5OTUyODE=", "number": 64, "title": "Allow custom cost objective functions", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/4", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/4", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/4/labels", "id": 3709227, "node_id": "MDk6TWlsZXN0b25lMzcwOTIyNw==", "number": 4, "title": "v3.0", "description": "", "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "closed", "created_at": "2018-10-03T13:44:19Z", "updated_at": "2020-03-03T00:40:21Z", "due_on": null, "closed_at": "2020-03-03T00:40:21Z"}, "comments": 4, "created_at": "2018-10-02T17:11:27Z", "updated_at": "2019-01-18T17:54:19Z", "closed_at": "2019-01-18T17:54:19Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Experimenting with #60 and #63 made me think that allowing custom cost objective functions would be neat. The current the cost function greedy uses is\r\n```python\r\nsize12 - size1 - size2\r\n```\r\nthough as @fritzo notes, just using\r\n```python\r\nsize12\r\n```\r\nmade some contractions more deterministic and thus easier to cache.\r\n\r\nGenerally you might have:\r\n```python\r\nA * size12 - B * size1 - C * size2\r\n```\r\nwith e.g. ``A``, ``B``, ``C`` random modifiers for #63. One might even try and learn the values using the contraction complexity / flop cost as a loss function.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/63", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/63/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/63/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/63", "id": 365990747, "node_id": "MDU6SXNzdWUzNjU5OTA3NDc=", "number": 63, "title": "Use best of many random greedy paths", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/4", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/4", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/4/labels", "id": 3709227, "node_id": "MDk6TWlsZXN0b25lMzcwOTIyNw==", "number": 4, "title": "v3.0", "description": "", "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 8, "state": "closed", "created_at": "2018-10-03T13:44:19Z", "updated_at": "2020-03-03T00:40:21Z", "due_on": null, "closed_at": "2020-03-03T00:40:21Z"}, "comments": 19, "created_at": "2018-10-02T16:58:52Z", "updated_at": "2019-01-18T17:54:19Z", "closed_at": "2019-01-18T17:54:19Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "In quantum computing simulations particularly, finding the optimal contraction sequence has a huge effect on what is computable - the amount of memory and time required is exponential in how 'bad' the path found is. The greedy approach is generally worse than the optimal approach but it is cheap to compute (and even cheaper with #60!).\r\n\r\nIf we introduce a random greedy algorithm by tweaking the cost objective function, we get a variety of different paths with varying costs and we can just pick the best one. I had a little play with contracting a 49 qubit depth 20 circuit (661 tensors overall) and randomly adjusting each cost by +- 5%.\r\n\r\nThe following are 'contraction complexities' (maximum rank of tensor produced - ``2^this`` is the memory required which is also a rough proxy for computation time) on the left and frequency on the right from 100 runs.\r\n```\r\n[(25, 1),\r\n (27, 1),\r\n (28, 3),\r\n (29, 6),\r\n (30, 10),\r\n (31, 16),\r\n (32, 6),  # <- this is what the current greedy finds\r\n (33, 9),\r\n (34, 21),\r\n (35, 8),\r\n (36, 8),\r\n (37, 1),\r\n (38, 4),\r\n (39, 2),\r\n (40, 1),\r\n (42, 3)]\r\n```\r\nSo the best contraction found vs the current contraction found requires ~128x less memory and computation, and turns the simulation from 'super'-computable to 'laptop'-computable.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/62", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/62/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/62/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/62/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/62", "id": 365308957, "node_id": "MDU6SXNzdWUzNjUzMDg5NTc=", "number": 62, "title": "[BUG] Path flop count computation is nondeterministic in Python 3", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-10-01T04:56:43Z", "updated_at": "2018-10-02T12:06:57Z", "closed_at": "2018-10-02T03:18:09Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "This came up in https://github.com/uber/pyro/issues/1427\r\n```py\r\ndef test_path_flop_count():\r\n    equation = 'bd,db,eac->ace'\r\n    shapes = [(3, 2), (2, 3), (4, 2, 3)]\r\n    operands = list(map(np.random.random, shapes))\r\n    path = [(0, 1), (1, 0), (0,)]\r\n    path, path_info = opt_einsum.contract_path(equation, *operands, path='greedy')\r\n    print(path_info)  # \"Optimized FLOP count\" is nondeterministic\r\n```\r\nAdmittedly this is kind of a weird path. See https://github.com/dgasmith/opt_einsum/pull/60#discussion_r221483126. Maybe the solution is to avoid paths like these, but I'm not sure how.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/57", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/57/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/57/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/57/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/57", "id": 354831557, "node_id": "MDU6SXNzdWUzNTQ4MzE1NTc=", "number": 57, "title": "Add some github tags to this repository", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/3", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3/labels", "id": 3598012, "node_id": "MDk6TWlsZXN0b25lMzU5ODAxMg==", "number": 3, "title": "v2.3", "description": null, "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2018-08-25T14:02:23Z", "updated_at": "2018-12-01T15:37:59Z", "due_on": null, "closed_at": "2018-12-01T15:37:59Z"}, "comments": 2, "created_at": "2018-08-28T17:33:13Z", "updated_at": "2018-08-28T19:41:27Z", "closed_at": "2018-08-28T19:13:00Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "@dgasmith, adding some tags might aid the discoverability of ``opt_einsum``? e.g ``tensor``, ``contraction``, ``python`` come to mind for starters. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/56", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/56/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/56/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/56/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/56", "id": 354431185, "node_id": "MDU6SXNzdWUzNTQ0MzExODU=", "number": 56, "title": "Reduce greedy complexity to sub-quadratic?", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-27T18:43:00Z", "updated_at": "2018-11-30T00:35:06Z", "closed_at": "2018-11-30T00:35:06Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The greedy strategy can be quite slow when given hundreds of tensors. Is it possible to reduce its complexity to sub-quadratic, possibly by:\r\n- using incremental computations when possible\r\n- using memoization when possible\r\n- maintaining a priority queue rather than recomputing min-cost contraction at each step", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/55", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/55/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/55/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/55", "id": 354087252, "node_id": "MDU6SXNzdWUzNTQwODcyNTI=", "number": 55, "title": "Make no memory limit the default?", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/3", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3/labels", "id": 3598012, "node_id": "MDk6TWlsZXN0b25lMzU5ODAxMg==", "number": 3, "title": "v2.3", "description": null, "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2018-08-25T14:02:23Z", "updated_at": "2018-12-01T15:37:59Z", "due_on": null, "closed_at": "2018-12-01T15:37:59Z"}, "comments": 5, "created_at": "2018-08-26T11:29:14Z", "updated_at": "2018-10-03T13:48:51Z", "closed_at": "2018-10-03T13:48:51Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "This is more a open question than a concrete suggestion. I'm just wondering if limiting the contraction memory to the largest input is the sensible choice for most use cases? I always turn it off, and need to to see best speedups for my use cases. In the contractions where memory *is* going to be an issue, limiting the possibly contractions results in exponentially slow progress anyway.\r\n\r\nI'm just thinking that maybe a lot of contractions could be made faster by default for users not aware of this.\r\n\r\nAnyway, I realise my use-cases are not everyones! And that this also might have also been influenced a bit by keeping maximum compatibility with numpy's einsum.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/51", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/51/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/51/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/51", "id": 353633611, "node_id": "MDU6SXNzdWUzNTM2MzM2MTE=", "number": 51, "title": "Support multi-threading in shared_intermediates", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-24T03:45:02Z", "updated_at": "2018-08-25T13:54:45Z", "closed_at": "2018-08-25T13:54:45Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following up on https://github.com/dgasmith/opt_einsum/pull/43#issuecomment-414661988, the `shared_intermediates` cache is currently not locked.\r\n\r\nOne option would be to assign the thread id of a unique owner of the cache, such that at least thread conflicts could be detected and reported, rather than mere silent performance degradation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/50", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/50/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/50/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/50", "id": 353633159, "node_id": "MDU6SXNzdWUzNTM2MzMxNTk=", "number": 50, "title": "Support more backends in shared_intermediates", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/3", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/3/labels", "id": 3598012, "node_id": "MDk6TWlsZXN0b25lMzU5ODAxMg==", "number": 3, "title": "v2.3", "description": null, "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 13, "state": "closed", "created_at": "2018-08-25T14:02:23Z", "updated_at": "2018-12-01T15:37:59Z", "due_on": null, "closed_at": "2018-12-01T15:37:59Z"}, "comments": 2, "created_at": "2018-08-24T03:42:35Z", "updated_at": "2018-08-29T20:24:10Z", "closed_at": "2018-08-29T20:24:10Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Following up on https://github.com/dgasmith/opt_einsum/pull/43#issuecomment-414661988, it would be nice if `with shared_intermediates():` supported more backends. This could start by refactoring towards a common `to_backend` function that is memoized.\r\n\r\n## Status\r\n\r\n- [x] numpy\r\n- [x] torch\r\n- [x] cupy\r\n- [ ] tensorflow\r\n- [ ] theano\r\n- [ ] sparse", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/45", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/45/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/45/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/45", "id": 353041654, "node_id": "MDU6SXNzdWUzNTMwNDE2NTQ=", "number": 45, "title": "v2.2 patch notes", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1020624342, "node_id": "MDU6TGFiZWwxMDIwNjI0MzQy", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/release", "name": "release", "color": "9f79e0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/2", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/2", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/2/labels", "id": 3591374, "node_id": "MDk6TWlsZXN0b25lMzU5MTM3NA==", "number": 2, "title": "v2.2", "description": null, "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 9, "state": "closed", "created_at": "2018-08-22T16:57:38Z", "updated_at": "2018-10-03T13:44:08Z", "due_on": null, "closed_at": "2018-10-03T13:44:08Z"}, "comments": 8, "created_at": "2018-08-22T16:59:18Z", "updated_at": "2018-09-11T19:39:48Z", "closed_at": "2018-09-11T19:39:48Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Gathering thoughts on the 2.1 patches notes and remaining TODO's.\r\n\r\nRemaining items:\r\n - [x] Unicode support for Python 2.7 #42.\r\n - [x] Update changelog before releasing.\r\n - [x] Docs passing updating doc strings to always contain a small example.\r\n\r\n----------------\r\n\r\nNew features:\r\n - (#48) Intermediates can now be shared between contractions, see [here](https://optimized-einsum.readthedocs.io/en/latest/sharing_intermediates.html) for more details.\r\n - (#53) Intermediate caching is thread safe.\r\n\r\nEnhancements:\r\n - (#48) Expressions are now mapped to non-unicode index set so that unicode input is support for all backends.\r\n - (#58) Adds tensorflow and theano with shared intermediates.\r\n\r\nBug fixes:\r\n - (#41) PyTorch indices are mapped back to a small `a-z` subset valid for PyTorch's einsum implementation.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/44", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/44/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/44/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/44", "id": 352297174, "node_id": "MDU6SXNzdWUzNTIyOTcxNzQ=", "number": 44, "title": "Bohrium Backend", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-08-20T21:08:36Z", "updated_at": "2019-08-10T18:36:31Z", "closed_at": "2019-08-10T18:36:31Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Spotted the following library that might be useful to explore: https://bohrium.readthedocs.io\r\n\r\nStill not sure exactly how we would integrate it (along the lines of numba/numexpr), but something to look at it.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/42", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/42/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/42/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/42", "id": 351772460, "node_id": "MDU6SXNzdWUzNTE3NzI0NjA=", "number": 42, "title": "Support for get_symbol(116) in Python 2", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920152, "node_id": "MDU6TGFiZWwxNTY5MjAxNTI=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-08-18T00:15:05Z", "updated_at": "2018-08-23T21:55:39Z", "closed_at": "2018-08-23T21:55:39Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "`get_symbol(x)` currently fails in Python 2 for any `x >= 116`:\r\n```\r\ni = 116\r\n\r\n    def get_symbol(i):\r\n        \"\"\"Get the symbol corresponding to int ``i`` - runs through the usual 52\r\n        letters before resorting to unicode characters, starting at ``chr(192)``.\r\n\r\n        Examples\r\n        --------\r\n        >>> get_symbol(2)\r\n        'c'\r\n\r\n        >>> oe.get_symbol(200)\r\n        '\u0154'\r\n\r\n        >>> oe.get_symbol(20000)\r\n        '\u4eac'\r\n        \"\"\"\r\n        if i < 52:\r\n            return einsum_symbols_base[i]\r\n>       return chr(i + 140)\r\nE       ValueError: chr() arg not in range(256)\r\n```\r\nCan we fix this by use `unichr()` and unicode strings in Python 2?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/40", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/40/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/40/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/40", "id": 350950635, "node_id": "MDU6SXNzdWUzNTA5NTA2MzU=", "number": 40, "title": "pip install opt_einsum fails due to versioneer", "user": {"login": "fritzo", "id": 648532, "node_id": "MDQ6VXNlcjY0ODUzMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/648532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzo", "html_url": "https://github.com/fritzo", "followers_url": "https://api.github.com/users/fritzo/followers", "following_url": "https://api.github.com/users/fritzo/following{/other_user}", "gists_url": "https://api.github.com/users/fritzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzo/subscriptions", "organizations_url": "https://api.github.com/users/fritzo/orgs", "repos_url": "https://api.github.com/users/fritzo/repos", "events_url": "https://api.github.com/users/fritzo/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-15T20:15:03Z", "updated_at": "2018-08-18T00:44:36Z", "closed_at": "2018-08-18T00:44:35Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When I try to `pip install opt_einsum` I get an error\r\n```\r\n$ pip install opt_einsum -U\r\nCollecting opt_einsum\r\n  Using cached https://files.pythonhosted.org/packages/30/52/64ed28228334a1124c082809402c01c4219085c5ee0f34991ace24a10dad/opt_einsum-2.1.1.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/var/folders/c5/cqn89jt900v5tmm2y7p0tf4r0000gn/T/pip-install-AyuWKs/opt-einsum/setup.py\", line 4, in <module>\r\n        import versioneer\r\n    ImportError: No module named versioneer\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/c5/cqn89jt900v5tmm2y7p0tf4r0000gn/T/pip-install-AyuWKs/opt-einsum/\r\n```\r\nWhen I then try to fix the missing dependency via `pip install versioneer`, I get\r\n```\r\n$ pip install versioneer\r\n# ...\r\n$ pip install opt_einsum\r\nCollecting opt_einsum\r\n  Using cached https://files.pythonhosted.org/packages/30/52/64ed28228334a1124c082809402c01c4219085c5ee0f34991ace24a10dad/opt_einsum-2.1.1.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/var/folders/c5/cqn89jt900v5tmm2y7p0tf4r0000gn/T/pip-install-SZkOZK/opt-einsum/setup.py\", line 12, in <module>\r\n        version=versioneer.get_version(),\r\n    AttributeError: 'module' object has no attribute 'get_version'\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/c5/cqn89jt900v5tmm2y7p0tf4r0000gn/T/pip-install-SZkOZK/opt-einsum/\r\n```\r\n\r\n## System info\r\n\r\n```\r\n$ python --version\r\nPython 2.7.14 :: Anaconda, Inc.\r\n$ uname -a\r\nDarwin fritzo-C02V61MRHTDG 17.4.0 Darwin Kernel Version 17.4.0: Sun Dec 17 09:19:54 PST 2017; root:xnu-4570.41.2~1/RELEASE_X86_64 x86_64\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/35", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/35/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/35/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/35/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/35", "id": 349537044, "node_id": "MDU6SXNzdWUzNDk1MzcwNDQ=", "number": 35, "title": "Release v2.1 patch notes", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}, {"id": 1020624342, "node_id": "MDU6TGFiZWwxMDIwNjI0MzQy", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/release", "name": "release", "color": "9f79e0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/1", "html_url": "https://github.com/dgasmith/opt_einsum/milestone/1", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/milestones/1/labels", "id": 3561028, "node_id": "MDk6TWlsZXN0b25lMzU2MTAyOA==", "number": 1, "title": "v2.1", "description": null, "creator": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 2, "state": "closed", "created_at": "2018-08-10T14:17:25Z", "updated_at": "2018-08-25T15:45:42Z", "due_on": null, "closed_at": "2018-08-25T15:45:42Z"}, "comments": 5, "created_at": "2018-08-10T14:27:41Z", "updated_at": "2018-08-15T17:13:17Z", "closed_at": "2018-08-15T17:13:17Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Gathering thoughts on the 2.1 patches notes and remaining TODO's.\r\n\r\nRemaining items:\r\n - [x] Update README me detailing backend support\r\n - [x]  Switch `setup.py` to correctly read `README.md` with new PyPi markdown support (pypi markdown support).\r\n  - [x] Add a note about citation to DOCS and end of the README.\r\n  - [x] `auto` path option for `optimal` for n<4.\r\n\r\n----------------\r\n`opt_einsum` continues to improve its support for additional backends beyond `NumPy` with PyTorch\r\n\r\nWe have also published the `opt_einsum` package in the [Journal of Open Source Software](http://joss.theoj.org/papers/10.21105/joss.00753). If you use this package in your work, please consider citing us!\r\n\r\nNew features:\r\n - PyTorch backend support\r\n - Tensorflow eager-mode execution backend support\r\n\r\nEnhancements:\r\n - Intermediate tensordot-like expressions are now ordered to avoid transposes.\r\n - CI now uses conda backend to better support GPU and tensor libraries.\r\n - Now accepts arbitrary unicode indices rather than a subset.\r\n - New `auto` path option which switches between `optimal` and `greedy` at 4 tensors.\r\n\r\nBug fixes:\r\n - Fixed issue where broadcast indices were incorrectly locked out of tensordot-like evaluations even after their dimension was broadcast.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/34", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/34/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/34/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/34", "id": 348341227, "node_id": "MDU6SXNzdWUzNDgzNDEyMjc=", "number": 34, "title": "Greedy vs optimal scaling miss", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920157, "node_id": "MDU6TGFiZWwxNTY5MjAxNTc=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/question", "name": "question", "color": "cc317c", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-08-07T14:16:05Z", "updated_at": "2018-08-15T16:36:45Z", "closed_at": "2018-08-15T16:36:45Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Found this in a SO comment. Posting here to take a look at.\r\n\r\n```\r\nM = np.arange(35 * 37 * 59).reshape([35, 37, 59])\r\nA = np.arange(35 * 51 * 59).reshape([35, 51, 59])\r\nB = np.arange(37 * 51 * 51 * 59).reshape([37, 51, 51, 59])\r\nC = np.arange(59 * 27).reshape([59, 27])\r\n\r\n>>> path, desc = np.einsum_path('xyf,xtf,ytpf,fr->tpr', M, A, B, C, optimize=\"greedy\");\r\n>>> print(desc)\r\n  Complete contraction:  xyf,xtf,ytpf,fr->tpr\r\n         Naive scaling:  6\r\n     Optimized scaling:  5\r\n      Naive FLOP count:  3.219e+10\r\n  Optimized FLOP count:  4.165e+08\r\n   Theoretical speedup:  77.299\r\n  Largest intermediate:  5.371e+06 elements\r\n--------------------------------------------------------------------------\r\nscaling                  current                                remaining\r\n--------------------------------------------------------------------------\r\n   5              ytpf,xyf->xptf                         xtf,fr,xptf->tpr\r\n   4               xptf,xtf->ptf                              fr,ptf->tpr\r\n   4                 ptf,fr->tpr                                 tpr->tpr\r\n\r\n>>> path, desc = np.einsum_path('xyf,xtf,ytpf,fr->tpr', M, A, B, C, optimize=\"optimal\");\r\n>>> print(desc)\r\n  Complete contraction:  xyf,xtf,ytpf,fr->tpr\r\n         Naive scaling:  6\r\n     Optimized scaling:  4\r\n      Naive FLOP count:  3.219e+10\r\n  Optimized FLOP count:  2.744e+07\r\n   Theoretical speedup:  1173.425\r\n  Largest intermediate:  1.535e+05 elements\r\n--------------------------------------------------------------------------\r\nscaling                  current                                remaining\r\n--------------------------------------------------------------------------\r\n   4                xtf,xyf->ytf                         ytpf,fr,ytf->tpr\r\n   4               ytf,ytpf->ptf                              fr,ptf->tpr\r\n   4                 ptf,fr->tpr                                 tpr->tpr\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/25", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/25/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/25/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/25/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/25", "id": 329615891, "node_id": "MDU6SXNzdWUzMjk2MTU4OTE=", "number": 25, "title": "Porting new path tech to NumPy", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2018-06-05T20:38:25Z", "updated_at": "2018-07-14T14:26:00Z", "closed_at": "2018-07-14T14:26:00Z", "author_association": "OWNER", "active_lock_reason": null, "body": "From discussion [here](https://github.com/numpy/numpy/issues/11210) I think we need to consider porting the new path technology over to NumPy. The `greedy` path has been significantly updated since the original port and the total FLOP comparisons should be much more accurate with the new FLOP counter.\r\n\r\nI see two options:\r\n1) Patch up the greedy path as it currently stands in NumPy for now.\r\n2) Replace current path technology with `opt_einsum` tech completely. This will be ~500 lines changed.\r\n\r\nOption 1 is a bit of a stop gap while option 2 will replace a significant amount of technology and will alter result times slightly. I also worry a bit as the use cases in NumPy proper are enormous, as `einsum` is one of the most flexible functions available it is not entirely clear to me that we are properly covering all use cases.\r\n\r\n@jcmgray are you ok with me adding chunks of your code to `numpy/numpy` (with you on the author list of course) or would like to take a try at it?\r\n\r\n@charris do you have an opinion between option 1/2?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/22", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/22/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/22/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/22/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/22", "id": 314740837, "node_id": "MDU6SXNzdWUzMTQ3NDA4Mzc=", "number": 22, "title": "dask backend attempts to use non-existent dask einsum function on an einsum broadcasting example", "user": {"login": "sjperkins", "id": 3530212, "node_id": "MDQ6VXNlcjM1MzAyMTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/3530212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sjperkins", "html_url": "https://github.com/sjperkins", "followers_url": "https://api.github.com/users/sjperkins/followers", "following_url": "https://api.github.com/users/sjperkins/following{/other_user}", "gists_url": "https://api.github.com/users/sjperkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/sjperkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sjperkins/subscriptions", "organizations_url": "https://api.github.com/users/sjperkins/orgs", "repos_url": "https://api.github.com/users/sjperkins/repos", "events_url": "https://api.github.com/users/sjperkins/events{/privacy}", "received_events_url": "https://api.github.com/users/sjperkins/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-16T17:00:58Z", "updated_at": "2018-04-19T21:33:04Z", "closed_at": "2018-04-19T21:33:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "From my reading of the code, broadcasting disables blas, which then defers to the dask einsum backend, which does not exist. This happens on master https://github.com/dgasmith/opt_einsum/commit/c235f0c1f4a0d2bfbd51137a5aee99eb72767f70\r\n\r\n```python\r\nimport dask.array as da\r\nfrom opt_einsum import contract\r\n\r\n# Produce random dask floats\r\nrf = lambda s,c: da.random.random(size=s, chunks=c)\r\n\r\nI = rf((10, 10, 10, 10), (5,5,5,5))\r\nC = rf((10, 10), (5,5))\r\n\r\n# Example in the docs, this works\r\nresult = contract('ea,fb,abcd,gc,hd->efgh', C, C, I, C, C,\r\n                               optimize='greedy', backend='dask')\r\n\r\n# dim sizes and their chunks\r\ns = 10\r\nsc = (5,5)\r\nt = 5\r\ntc = (2,3)\r\na = 7\r\nac = (3,4)\r\nc = 4\r\ncc = (2,2)\r\n\r\n# This fails\r\nresult = contract('sta,tac->stac',\r\n    rf((s,t,a), (sc,tc,ac)),\r\n    rf((t,a,c), (tc,ac,cc)),\r\n    backend='dask')\r\n```\r\n\r\nproduces\r\n\r\n```bash\r\n$ python test_opt_einsum.py \r\nTraceback (most recent call last):\r\n  File \"test_opt_einsum.py\", line 26, in <module>\r\n    backend='dask')\r\n  File \"/home/sperkins/venv/opt_einsum/local/lib/python2.7/site-packages/opt_einsum/contract.py\", line 423, in contract\r\n    return _core_contract(operands, contraction_list, backend=backend, **einsum_kwargs)\r\n  File \"/home/sperkins/venv/opt_einsum/local/lib/python2.7/site-packages/opt_einsum/contract.py\", line 484, in _core_contract\r\n    new_view = _einsum(einsum_str, *tmp_operands, backend=backend, **einsum_kwargs)\r\n  File \"/home/sperkins/venv/opt_einsum/local/lib/python2.7/site-packages/opt_einsum/contract.py\", line 280, in _einsum\r\n    fn = backends.get_func('einsum', kwargs.pop('backend', 'numpy'))\r\n  File \"/home/sperkins/venv/opt_einsum/local/lib/python2.7/site-packages/opt_einsum/backends.py\", line 39, in get_func\r\n    fn = _import_func(func, backend)\r\n  File \"/home/sperkins/venv/opt_einsum/local/lib/python2.7/site-packages/opt_einsum/backends.py\", line 21, in _import_func\r\n    raise AttributeError(\"{} doesn't seem to provide the function {}\".format(backend, func))\r\nAttributeError: dask doesn't seem to provide the function einsum\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/16", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/16/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/16/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/16", "id": 305136293, "node_id": "MDU6SXNzdWUzMDUxMzYyOTM=", "number": 16, "title": "Other backends: tensorflow, theano, sparse, dask etc", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-03-14T12:22:16Z", "updated_at": "2018-03-23T11:05:33Z", "closed_at": "2018-03-23T11:05:33Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "What do you think about adding other (optional) backends?\r\n\r\nI have this branch for gpu support [here](https://github.com/jcmgray/opt_einsum/tree/gpu-support) which was a fairly simple tweak to test using gpus with ``tensorflow``, ``theano`` and ``cupy``. It would also be very simple to add more backends since mostly they just need to implement ``tensordot`` and ``transpose`` (only ``einsum`` for non-blas operations).\r\n\r\nAnyway here's a brief summary of the possible ndarray libraries:\r\n\r\n| Library  | Tensordot? | Einsum? |\r\n| ------------- | ------------- | ------ |\r\n| [tensorflow](https://github.com/tensorflow/tensorflow) | yes | yes |\r\n| [theano](https://github.com/Theano/Theano) | yes | no |\r\n| [cupy](https://github.com/cupy/cupy) | yes | yes |\r\n| [dask](https://github.com/dask/dask) | yes | [not yet?](https://github.com/dask/dask/issues/732) |\r\n| [sparse](https://github.com/pydata/sparse) | yes | [not yet?](https://github.com/pydata/sparse/issues/31) |\r\n| [tblis python](https://github.com/devinamatthews/tblis/tree/python) | would be easy to implement I think? | yes |\r\n\r\n``tensorflow``, ``theano`` and I guess ``dask`` fit nicely with ``ContractExpression`` since they build/compile the graph of all the operations first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/14", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/14/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/14/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/14", "id": 299000537, "node_id": "MDU6SXNzdWUyOTkwMDA1Mzc=", "number": 14, "title": "Possible JOSS paper", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-21T14:53:44Z", "updated_at": "2018-05-17T13:08:34Z", "closed_at": "2018-05-17T13:08:34Z", "author_association": "OWNER", "active_lock_reason": null, "body": "I have been playing around with the idea of submitting this project as a paper to [The Journal of Open Source Software](http://joss.theoj.org). Once the documentation is fully ported over to ReadTheDocs the process should be relatively straightforward.\r\n\r\nI would be curious if any other contributors would be interested in being on the paper as well. I think @jcmgray should be especially for the latest contributions. Any other thoughts here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/13", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/13/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/13/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/13/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/13", "id": 298999813, "node_id": "MDU6SXNzdWUyOTg5OTk4MTM=", "number": 13, "title": "Einsum broadcast regression", "user": {"login": "dgasmith", "id": 1769841, "node_id": "MDQ6VXNlcjE3Njk4NDE=", "avatar_url": "https://avatars2.githubusercontent.com/u/1769841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgasmith", "html_url": "https://github.com/dgasmith", "followers_url": "https://api.github.com/users/dgasmith/followers", "following_url": "https://api.github.com/users/dgasmith/following{/other_user}", "gists_url": "https://api.github.com/users/dgasmith/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgasmith/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgasmith/subscriptions", "organizations_url": "https://api.github.com/users/dgasmith/orgs", "repos_url": "https://api.github.com/users/dgasmith/repos", "events_url": "https://api.github.com/users/dgasmith/events{/privacy}", "received_events_url": "https://api.github.com/users/dgasmith/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920152, "node_id": "MDU6TGFiZWwxNTY5MjAxNTI=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-02-21T14:51:51Z", "updated_at": "2018-04-02T02:04:04Z", "closed_at": "2018-04-02T02:04:04Z", "author_association": "OWNER", "active_lock_reason": null, "body": "It was pointed out on the main Numpy repository that the current python-based parsing tech misses a few broadcasting operations and tries to run them through BLAS routines which does not work.\r\n\r\nSee the issue [here](https://github.com/numpy/numpy/issues/10343) and PR to fix it [here](https://github.com/numpy/numpy/pull/10352). This patch needs to be pulled over to opt_einsum before the next release.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/10", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/10/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/10/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/10", "id": 277938513, "node_id": "MDU6SXNzdWUyNzc5Mzg1MTM=", "number": 10, "title": "reusable einsum expressions", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-29T22:59:10Z", "updated_at": "2017-12-07T11:55:49Z", "closed_at": "2017-12-07T11:55:49Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "Essentially, I'm using ``opt_einsum`` for some tensor network calculations, and a significant proportion of time is spent in ``contract_path``, even for relatively large sized tensors and pre-calculated paths.\r\n\r\nSpecifically, a huge number of contractions with the same indices and shapes are performed over and over again and I already cache these using the path from ``contract_path``. However, it seems even with the path supplied, a large amount of time is spent parsing the input, in ``can_blas``, ``parse_einsum_input`` etc.\r\n\r\nMy suggestion would be something like:\r\n\r\n```python\r\nshapes = [(2, 3), (3, 4), (4, 5)]\r\nmy_expr = einsum_expression(\"ab,bc,cd->ad\", *shapes)\r\n\r\nfor _ in many_repeats:\r\n    ...\r\n    x, y, z = (rand(s) for s in shapes)\r\n    out = my_expr(x, y, z)\r\n    ...\r\n```\r\n\r\nI.e. it would only accept arrays of the same dimensions (and probably an ``out`` argument) and would otherwise skip all parsing, using a ``contraction_list`` stored within the function.\r\n\r\nAnyway, I'm about to knock something up to test for myself, but thought it might be of more general interest.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/9", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/9/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/9/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/9", "id": 271473845, "node_id": "MDU6SXNzdWUyNzE0NzM4NDU=", "number": 9, "title": "Re-use intermediates across various contractions (Common Subexpression Elimination)", "user": {"login": "ebatz", "id": 33418330, "node_id": "MDQ6VXNlcjMzNDE4MzMw", "avatar_url": "https://avatars2.githubusercontent.com/u/33418330?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebatz", "html_url": "https://github.com/ebatz", "followers_url": "https://api.github.com/users/ebatz/followers", "following_url": "https://api.github.com/users/ebatz/following{/other_user}", "gists_url": "https://api.github.com/users/ebatz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebatz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebatz/subscriptions", "organizations_url": "https://api.github.com/users/ebatz/orgs", "repos_url": "https://api.github.com/users/ebatz/repos", "events_url": "https://api.github.com/users/ebatz/events{/privacy}", "received_events_url": "https://api.github.com/users/ebatz/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 156920154, "node_id": "MDU6TGFiZWwxNTY5MjAxNTQ=", "url": "https://api.github.com/repos/dgasmith/opt_einsum/labels/enhancement", "name": "enhancement", "color": "84b6eb", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2017-11-06T13:24:24Z", "updated_at": "2018-08-22T16:51:52Z", "closed_at": "2018-08-22T16:51:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Suppose you want to compute two contractions of the same tensors, e.g. contraction strings\r\n\r\n`['ab,dca,eb,cde', 'ab,cda,eb,cde']`\r\n\r\nThe (globally) optimal way to do this would be to first perform the contractions over indices a,b and e, and then perform the remaining contractions over c and d for the two sets of contractions. The current opt_einsum implementation does not allow for such a _global_ optimization of contraction order and re-use of common intermediates.\r\n\r\nI'm still organizing my thoughts on this, and all input would be most welcome. On a side note, I believe implementing such a more general optimization strategy will also fix #7 as a by-product.\r\n\r\n### Optimization logic\r\n\r\nA relevant publication suggesting a concrete algorithm for this optimization problem is\r\n\r\n[_Hartono et al_, Identifying Cost-Effective Common Subexpressions to Reduce Operation Count in Tensor Contraction Evaluations](http://www.csc.lsu.edu/~gb/TCE/Publications/OpMinCSE-ICCS06.pdf)\r\n\r\nI do not know to what extent the current code can be re-used in this more general setup, but the _single-term_ optimization should be under control with the current implementation.\r\n\r\n### Interface\r\n\r\nSuch a multi_contract function could be called with a list of tuples (contractionString, [tensors, ..]), and would return a list of results with the same length as the input list.\r\n\r\nInternally, one would have to find out which tensors are actually identical between the various contractions, and then use the above contraction logic. Ideally this information should be deduced automatically and not rely on user input being in the correct form. In the same spirit, dummy indices should be allowed to have arbitrary names, i.e. they should not have to match across different contractions to be correctly identified as a common subexpression.\r\nThis may require transforming the input into a 'canonical' form first to make sure that common subexpressions are captured correctly.\r\n\r\nIn contrast to the setup outlined in _Hartono et al_, contraction strings should maybe remain in their current 'simple' form and **not** be generalized to allow for numerical expressions like sums of tensors etc. Such a behavior can be implemented _a posteriori_ with the interface described here by computing the sum of the resulting tensors, e.g.\r\n\r\n`contract('ab,ab + ab,ba', N,M) -->  'sum'(multi_contract( [('ab,ab', N,M), ('ab,ba', N,M)] ))`\r\n\r\nThus, restricting contraction strings to be of the form currently used does not cause loss of generality, the only downside being that it might lead to a slightly increased memory-footprint as the function would return several arrays instead of one.\r\n\r\n\r\nOther thoughts?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/8", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/8/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/8/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/8", "id": 263271556, "node_id": "MDU6SXNzdWUyNjMyNzE1NTY=", "number": 8, "title": "memory_limit with 'greedy' contractions", "user": {"login": "jcmgray", "id": 8982598, "node_id": "MDQ6VXNlcjg5ODI1OTg=", "avatar_url": "https://avatars3.githubusercontent.com/u/8982598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmgray", "html_url": "https://github.com/jcmgray", "followers_url": "https://api.github.com/users/jcmgray/followers", "following_url": "https://api.github.com/users/jcmgray/following{/other_user}", "gists_url": "https://api.github.com/users/jcmgray/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmgray/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmgray/subscriptions", "organizations_url": "https://api.github.com/users/jcmgray/orgs", "repos_url": "https://api.github.com/users/jcmgray/repos", "events_url": "https://api.github.com/users/jcmgray/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmgray/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-05T21:25:41Z", "updated_at": "2017-10-17T23:15:23Z", "closed_at": "2017-10-17T23:15:23Z", "author_association": "COLLABORATOR", "active_lock_reason": null, "body": "I notice that with `path='greedy'`, `memory_limit` is locked at the max input size, for 'algorithmic' reasons. Is this still an issue? / any prospects of this being resolved?\r\n\r\nI did some brief testing with the limit just removed and all seemed ok (and faster!).\r\n\r\nP.S. thanks for the nice project! ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/7", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/7/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/7/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/7", "id": 257260584, "node_id": "MDU6SXNzdWUyNTcyNjA1ODQ=", "number": 7, "title": "Optimal path with constant arguments", "user": {"login": "shoyer", "id": 1217238, "node_id": "MDQ6VXNlcjEyMTcyMzg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shoyer", "html_url": "https://github.com/shoyer", "followers_url": "https://api.github.com/users/shoyer/followers", "following_url": "https://api.github.com/users/shoyer/following{/other_user}", "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions", "organizations_url": "https://api.github.com/users/shoyer/orgs", "repos_url": "https://api.github.com/users/shoyer/repos", "events_url": "https://api.github.com/users/shoyer/events{/privacy}", "received_events_url": "https://api.github.com/users/shoyer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-09-13T05:18:10Z", "updated_at": "2018-08-04T19:48:29Z", "closed_at": "2018-08-04T19:48:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an application where there is a large tensor contraction in the inner loop, with some arrays that are fixed and others that are updated between iterations. Operations only involving the constant terms could done ahead of time (outside the loop), but this may or may not actually improve performance.\r\n\r\nIt could be nice if opt-einsum had a way to mark some arguments as constant, in which case the cost of contracting them them could neglected when computing the cost of paths only involving these arguments.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/6", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/6/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/6/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/6", "id": 244131025, "node_id": "MDU6SXNzdWUyNDQxMzEwMjU=", "number": 6, "title": "optimal contraction path", "user": {"login": "jjren", "id": 11611898, "node_id": "MDQ6VXNlcjExNjExODk4", "avatar_url": "https://avatars3.githubusercontent.com/u/11611898?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjren", "html_url": "https://github.com/jjren", "followers_url": "https://api.github.com/users/jjren/followers", "following_url": "https://api.github.com/users/jjren/following{/other_user}", "gists_url": "https://api.github.com/users/jjren/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjren/subscriptions", "organizations_url": "https://api.github.com/users/jjren/orgs", "repos_url": "https://api.github.com/users/jjren/repos", "events_url": "https://api.github.com/users/jjren/events{/privacy}", "received_events_url": "https://api.github.com/users/jjren/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-07-19T18:24:29Z", "updated_at": "2017-07-22T17:32:56Z", "closed_at": "2017-07-22T17:32:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I tried to use opt_einsum to calculate the following tensor contraction. But the contraction path seems non-optimal.\r\n```\r\nres1 = opt_einsum.contract(\"abc,bdef,fghj,cem,mhk,ljk -> adgl\",A,B,C,D,E,F, path='optimal')\r\npathinfo = opt_einsum.contract_path(\"abc,bdef,fghj,cem,mhk,ljk -> adgl\" ,A,B,C,D,E,F, path=\"optimal\")\r\nThe \"optimal path\" printed is \r\n\r\n[(3, 4), (0, 1, 2, 3, 4)]\r\nComplete contraction:  abc,bdef,fghj,cem,mhk,ljk->adgl\r\nNaive scaling:  12\r\nOptimized scaling:  11\r\nNaive FLOP count:  3.075e+09\r\nOptimized FLOP count:  2.050e+08\r\nTheoretical speedup:  15.000\r\nLargest intermediate:  6.250e+02 elements\r\n--------------------------------------------------------------------------------\r\nscaling   BLAS                  current                                remaining\r\n--------------------------------------------------------------------------------\r\n   5      GEMM            mhk,cem->ckeh             abc,bdef,fghj,ljk,ckeh->adgl\r\n  11     False ckeh,ljk,fghj,bdef,abc->adgl                               adgl->adgl\r\n\r\n```\r\nMy question is that why the second contraction doesn't contract pairwise. T\r\nI also use tensordot to contract it pairwise. It's much faster.\r\nI guess the reason is that though in the pairwise tensordot, the total FLOPS is larger, but the speed is much faster.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/2", "repository_url": "https://api.github.com/repos/dgasmith/opt_einsum", "labels_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/2/comments", "events_url": "https://api.github.com/repos/dgasmith/opt_einsum/issues/2/events", "html_url": "https://github.com/dgasmith/opt_einsum/issues/2", "id": 75858023, "node_id": "MDU6SXNzdWU3NTg1ODAyMw==", "number": 2, "title": "Error with path=\"optimal\"", "user": {"login": "rmcgibbo", "id": 641278, "node_id": "MDQ6VXNlcjY0MTI3OA==", "avatar_url": "https://avatars2.githubusercontent.com/u/641278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rmcgibbo", "html_url": "https://github.com/rmcgibbo", "followers_url": "https://api.github.com/users/rmcgibbo/followers", "following_url": "https://api.github.com/users/rmcgibbo/following{/other_user}", "gists_url": "https://api.github.com/users/rmcgibbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rmcgibbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rmcgibbo/subscriptions", "organizations_url": "https://api.github.com/users/rmcgibbo/orgs", "repos_url": "https://api.github.com/users/rmcgibbo/repos", "events_url": "https://api.github.com/users/rmcgibbo/events{/privacy}", "received_events_url": "https://api.github.com/users/rmcgibbo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-05-13T05:50:08Z", "updated_at": "2015-05-13T20:18:30Z", "closed_at": "2015-05-13T20:18:30Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When running the following example, I get an exception\n\n```\ncontract('ia,aj,ka->ijk', A, B, C, path=\"optimal\")\n```\n\nThe traceback is \n\n```\nTraceback (most recent call last):\n  File \"opt_einsum.py\", line 477, in <module>\n    x, y = contract('ia,aj,ka->ijk', A, B, C, path=\"optimal\")\n  File \"opt_einsum.py\", line 425, in contract\n    tmp_inputs.append(input_list.pop(x))\nIndexError: pop index out of range\n```\n", "performed_via_github_app": null, "score": 1.0}]}