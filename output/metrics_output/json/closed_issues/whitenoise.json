{"total_count": 167, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/evansd/whitenoise/issues/256", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/256/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/256/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/256/events", "html_url": "https://github.com/evansd/whitenoise/issues/256", "id": 629189884, "node_id": "MDU6SXNzdWU2MjkxODk4ODQ=", "number": 256, "title": "ValueError at / Missing staticfiles manifest entry for 'images\\favicon.ico'", "user": {"login": "galactic0", "id": 6282461, "node_id": "MDQ6VXNlcjYyODI0NjE=", "avatar_url": "https://avatars2.githubusercontent.com/u/6282461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/galactic0", "html_url": "https://github.com/galactic0", "followers_url": "https://api.github.com/users/galactic0/followers", "following_url": "https://api.github.com/users/galactic0/following{/other_user}", "gists_url": "https://api.github.com/users/galactic0/gists{/gist_id}", "starred_url": "https://api.github.com/users/galactic0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/galactic0/subscriptions", "organizations_url": "https://api.github.com/users/galactic0/orgs", "repos_url": "https://api.github.com/users/galactic0/repos", "events_url": "https://api.github.com/users/galactic0/events{/privacy}", "received_events_url": "https://api.github.com/users/galactic0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-06-02T13:09:11Z", "updated_at": "2020-06-03T14:03:11Z", "closed_at": "2020-06-03T08:29:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "its leading to internal server error 500\r\n\r\nsettings.py \r\n\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\r\nSTATIC_URL = '/static/'\r\n\r\nSTATICFILES_DIRS = [\r\n'static'\r\n]\r\n\r\n\r\n\r\nInternal Server Error: /\r\n\r\nValueError at /\r\nMissing staticfiles manifest entry for 'images\\favicon.ico'\r\n\r\nRequest Method: GET\r\nRequest URL: http://127.0.0.1:8000/\r\nDjango Version: 2.0.4\r\nPython Executable: D:\\Amtpl project by aman\\AMTPL - Copy\\env\\Scripts\\python.exe\r\nPython Version: 3.8.0", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/252", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/252/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/252/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/252/events", "html_url": "https://github.com/evansd/whitenoise/issues/252", "id": 611249729, "node_id": "MDU6SXNzdWU2MTEyNDk3Mjk=", "number": 252, "title": "Add a config to change set manifest_strict in settings", "user": {"login": "MegacoderKim", "id": 9055384, "node_id": "MDQ6VXNlcjkwNTUzODQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/9055384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MegacoderKim", "html_url": "https://github.com/MegacoderKim", "followers_url": "https://api.github.com/users/MegacoderKim/followers", "following_url": "https://api.github.com/users/MegacoderKim/following{/other_user}", "gists_url": "https://api.github.com/users/MegacoderKim/gists{/gist_id}", "starred_url": "https://api.github.com/users/MegacoderKim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MegacoderKim/subscriptions", "organizations_url": "https://api.github.com/users/MegacoderKim/orgs", "repos_url": "https://api.github.com/users/MegacoderKim/repos", "events_url": "https://api.github.com/users/MegacoderKim/events{/privacy}", "received_events_url": "https://api.github.com/users/MegacoderKim/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-02T18:40:03Z", "updated_at": "2020-05-20T08:43:48Z", "closed_at": "2020-05-20T08:43:48Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Since  `whitenoise.storage.CompressedManifestStaticFilesStorage` already inherits from from django `django.contrib.staticfiles.storage.ManifestStaticFilesStorage` can we make  `ManifestStaticFilesStorage.manifest_strict` configurable to `False` via a config? \r\nI'd be happy to add this.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/247", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/247/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/247/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/247/events", "html_url": "https://github.com/evansd/whitenoise/issues/247", "id": 588563123, "node_id": "MDU6SXNzdWU1ODg1NjMxMjM=", "number": 247, "title": "Use whitenoise for tests", "user": {"login": "Pomax", "id": 177243, "node_id": "MDQ6VXNlcjE3NzI0Mw==", "avatar_url": "https://avatars2.githubusercontent.com/u/177243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pomax", "html_url": "https://github.com/Pomax", "followers_url": "https://api.github.com/users/Pomax/followers", "following_url": "https://api.github.com/users/Pomax/following{/other_user}", "gists_url": "https://api.github.com/users/Pomax/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pomax/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pomax/subscriptions", "organizations_url": "https://api.github.com/users/Pomax/orgs", "repos_url": "https://api.github.com/users/Pomax/repos", "events_url": "https://api.github.com/users/Pomax/events{/privacy}", "received_events_url": "https://api.github.com/users/Pomax/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-26T16:41:53Z", "updated_at": "2020-06-08T16:29:15Z", "closed_at": "2020-06-08T16:29:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't seem to find anything that explains how to make sure that whitenoise gets used during `manage test`, rather than the `django.contrib.staticfiles`. I have `whitenoise.runserver_nostatic` in my installed apps, above the contrib app, and `manag runserver` uses whitenoise as it should, but `manage test` shows it's not kicking in, and `manage test --nostatic` is an invalid runtime flag =(\r\n\r\nIs there an easy/clean way to make Django use Whitenoise during test runs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/246", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/246/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/246/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/246/events", "html_url": "https://github.com/evansd/whitenoise/issues/246", "id": 569093993, "node_id": "MDU6SXNzdWU1NjkwOTM5OTM=", "number": 246, "title": "Problem with collect static on start deploying with django", "user": {"login": "dnl-krsvch", "id": 32400952, "node_id": "MDQ6VXNlcjMyNDAwOTUy", "avatar_url": "https://avatars3.githubusercontent.com/u/32400952?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnl-krsvch", "html_url": "https://github.com/dnl-krsvch", "followers_url": "https://api.github.com/users/dnl-krsvch/followers", "following_url": "https://api.github.com/users/dnl-krsvch/following{/other_user}", "gists_url": "https://api.github.com/users/dnl-krsvch/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnl-krsvch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnl-krsvch/subscriptions", "organizations_url": "https://api.github.com/users/dnl-krsvch/orgs", "repos_url": "https://api.github.com/users/dnl-krsvch/repos", "events_url": "https://api.github.com/users/dnl-krsvch/events{/privacy}", "received_events_url": "https://api.github.com/users/dnl-krsvch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-21T17:44:20Z", "updated_at": "2020-02-21T18:12:16Z", "closed_at": "2020-02-21T18:12:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "-----> $ python manage.py collectstatic --noinput\r\n       Traceback (most recent call last):\r\n         File \"manage.py\", line 21, in <module>\r\n           main()\r\n         File \"manage.py\", line 17, in main\r\n           execute_from_command_line(sys.argv)\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\r\n           utility.execute()\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/__init__.py\", line 395, in execute\r\n           self.fetch_command(subcommand).run_from_argv(self.argv)\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/base.py\", line 328, in run_from_argv\r\n           self.execute(*args, **cmd_options)\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/management/base.py\", line 369, in execute\r\n           output = self.handle(*args, **options)\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 161, in handle\r\n           if self.is_local_storage() and self.storage.location:\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 215, in is_local_storage\r\n           return isinstance(self.storage, FileSystemStorage)\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/utils/functional.py\", line 224, in inner\r\n           self._setup()\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/contrib/staticfiles/storage.py\", line 501, in _setup\r\n           self._wrapped = get_storage_class(settings.STATICFILES_STORAGE)()\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/core/files/storage.py\", line 359, in get_storage_class\r\n           return import_string(import_path or settings.DEFAULT_FILE_STORAGE)\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/django/utils/module_loading.py\", line 17, in import_string\r\n           module = import_module(module_path)\r\n         File \"/app/.heroku/python/lib/python3.6/importlib/__init__.py\", line 126, in import_module\r\n           return _bootstrap._gcd_import(name[level:], package, level)\r\n         File \"<frozen importlib._bootstrap>\", line 994, in _gcd_import\r\n         File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n         File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n         File \"<frozen importlib._bootstrap>\", line 665, in _load_unlocked\r\n         File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n         File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\r\n         File \"/app/.heroku/python/lib/python3.6/site-packages/whitenoise/django.py\", line 2, in <module>\r\n           \"\\n\\n\"\r\n       ImportError: \r\n       Your WhiteNoise configuration is incompatible with WhiteNoise v4.0\r\n       This can be fixed by following the upgrade instructions at:\r\n       http://whitenoise.evans.io/en/stable/changelog.html#v4-0\r\n !     Error while running '$ python manage.py collectstatic --noinput'.\r\n       See traceback above for details.\r\n       You may need to update application code to resolve this error.\r\n       Or, you can disable collectstatic for this application:\r\n          $ heroku config:set DISABLE_COLLECTSTATIC=1\r\n       https://devcenter.heroku.com/articles/django-assets\r\n !     Push rejected, failed to compile Python app.\r\n !     Push failed", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/243", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/243/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/243/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/243/events", "html_url": "https://github.com/evansd/whitenoise/issues/243", "id": 556968636, "node_id": "MDU6SXNzdWU1NTY5Njg2MzY=", "number": 243, "title": "Django doesn't load new files from static directory until server restarted", "user": {"login": "arbazkiraak", "id": 13177578, "node_id": "MDQ6VXNlcjEzMTc3NTc4", "avatar_url": "https://avatars2.githubusercontent.com/u/13177578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arbazkiraak", "html_url": "https://github.com/arbazkiraak", "followers_url": "https://api.github.com/users/arbazkiraak/followers", "following_url": "https://api.github.com/users/arbazkiraak/following{/other_user}", "gists_url": "https://api.github.com/users/arbazkiraak/gists{/gist_id}", "starred_url": "https://api.github.com/users/arbazkiraak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arbazkiraak/subscriptions", "organizations_url": "https://api.github.com/users/arbazkiraak/orgs", "repos_url": "https://api.github.com/users/arbazkiraak/repos", "events_url": "https://api.github.com/users/arbazkiraak/events{/privacy}", "received_events_url": "https://api.github.com/users/arbazkiraak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T16:18:15Z", "updated_at": "2020-01-29T16:46:02Z", "closed_at": "2020-01-29T16:46:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Django app in production which have the functionality to save the images to the `app/static/gallery/` directory from the app.\r\n\r\nthen application loads those images from the directory in the template.\r\n\r\n```\r\n<img src=\"{% static 'gallery/1.jpg' %}\">\r\n```\r\n\r\n* Problem here is as the application is in production & constantly saves the images under `static/gallery` it won't load new images until I restarted the server.\r\n\r\nI'm using `http://whitenoise.evans.io/en/stable/django.html#` to serve static files.\r\n\r\n```\r\n\u2192 django-admin version\r\n2.2.4\r\n```\r\n\r\n* How to tackle this problem to always serve static files to load them instantly without restarting the server.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/241", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/241/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/241/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/241/events", "html_url": "https://github.com/evansd/whitenoise/issues/241", "id": 534193468, "node_id": "MDU6SXNzdWU1MzQxOTM0Njg=", "number": 241, "title": "Safari fails to load JavaScript due to \"Invalid character\" error when using Django 3.0", "user": {"login": "giilby", "id": 1571931, "node_id": "MDQ6VXNlcjE1NzE5MzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1571931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giilby", "html_url": "https://github.com/giilby", "followers_url": "https://api.github.com/users/giilby/followers", "following_url": "https://api.github.com/users/giilby/following{/other_user}", "gists_url": "https://api.github.com/users/giilby/gists{/gist_id}", "starred_url": "https://api.github.com/users/giilby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giilby/subscriptions", "organizations_url": "https://api.github.com/users/giilby/orgs", "repos_url": "https://api.github.com/users/giilby/repos", "events_url": "https://api.github.com/users/giilby/events{/privacy}", "received_events_url": "https://api.github.com/users/giilby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-06T18:27:51Z", "updated_at": "2019-12-10T21:45:50Z", "closed_at": "2019-12-10T21:45:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure whether this is a Safari, Django 3, or WhiteNoise bug, and I suspect it's Safari, but I thought it wouldn't hurt to document here. After upgrading a simple app to Django 3 + WhiteNoise 4.1.4, the app stopped working in Safari because its JavaScript bundle failed to load. Downgrading to Django 2.2.8 fixed the issue, and when investigating differences between the two, I discovered that Django 3 changed the way that `Content-Disposition` is output for file responses: https://github.com/django/django/commit/de4832c49b8a8cf00b2d602ab4d10c4ca69627bd#diff-eeebc8cb56240caf13a9952431189fef. By either preventing `Content-Disposition` from being output for the JavaScript file, or by setting it to `inline` instead of `inline; filename=\"index.min.d9b11ca4d877.js.gz\"`, Safari was able to load the script just fine. So, it appears that when `Content-Disposition: inline; filename=\"index.min.d9b11ca4d877.js.gz\"` is set on the response for the JavaScript bundle, Safari fails to recognize that it's a gzip file and tries to parse it before decompressing.\r\n\r\nI've created a demo of this issue: https://github.com/giilby/invalid-character-bug-demo. I'm happy to help resolve it in any way I can, and if we determine that it's actually a Django or Safari bug, I'll file a new report accordingly. Thanks for creating a great library, and thanks for your help!\r\n\r\nMy Safari version: 13.0.3 (15608.3.10.1.4)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/240", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/240/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/240/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/240/events", "html_url": "https://github.com/evansd/whitenoise/issues/240", "id": 534186584, "node_id": "MDU6SXNzdWU1MzQxODY1ODQ=", "number": 240, "title": "Content-Disposition header with inline disposition in Django 3.0 breaks in Safari", "user": {"login": "paltman", "id": 1192, "node_id": "MDQ6VXNlcjExOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paltman", "html_url": "https://github.com/paltman", "followers_url": "https://api.github.com/users/paltman/followers", "following_url": "https://api.github.com/users/paltman/following{/other_user}", "gists_url": "https://api.github.com/users/paltman/gists{/gist_id}", "starred_url": "https://api.github.com/users/paltman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paltman/subscriptions", "organizations_url": "https://api.github.com/users/paltman/orgs", "repos_url": "https://api.github.com/users/paltman/repos", "events_url": "https://api.github.com/users/paltman/events{/privacy}", "received_events_url": "https://api.github.com/users/paltman/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-06T18:11:12Z", "updated_at": "2019-12-19T10:33:11Z", "closed_at": "2019-12-06T22:00:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "I can't determine if this is something that needs to be addressed in Whitenoise or in Django but in Django 3.0, a `Content-Disposition` header is being added as `inline` and that is causing Safari to not parse it.\r\n\r\nThis new header was added in [de4832c49b8a8cf00b2d602ab4d10c4ca69627bd](https://github.com/django/django/commit/de4832c49b8a8cf00b2d602ab4d10c4ca69627bd).\r\n\r\nI can verify this works by adding this middleware before the WhiteNoiseMiddlware in my settings.py:\r\n\r\n```python\r\ndef strip_content_disposition(get_response):\r\n    def middleware(request):\r\n        response = get_response(request)\r\n        del response['Content-Disposition']\r\n        return response\r\n    return middleware\r\n```\r\n\r\nObviously that's not a good solution for this, but I'm not sure what is or even if this is a Whitenoise issue or a Django issue.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/239", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/239/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/239/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/239/events", "html_url": "https://github.com/evansd/whitenoise/issues/239", "id": 520180052, "node_id": "MDU6SXNzdWU1MjAxODAwNTI=", "number": 239, "title": "Missing staticfiles manifest entry for favicon.ico", "user": {"login": "jribbens", "id": 350846, "node_id": "MDQ6VXNlcjM1MDg0Ng==", "avatar_url": "https://avatars2.githubusercontent.com/u/350846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jribbens", "html_url": "https://github.com/jribbens", "followers_url": "https://api.github.com/users/jribbens/followers", "following_url": "https://api.github.com/users/jribbens/following{/other_user}", "gists_url": "https://api.github.com/users/jribbens/gists{/gist_id}", "starred_url": "https://api.github.com/users/jribbens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jribbens/subscriptions", "organizations_url": "https://api.github.com/users/jribbens/orgs", "repos_url": "https://api.github.com/users/jribbens/repos", "events_url": "https://api.github.com/users/jribbens/events{/privacy}", "received_events_url": "https://api.github.com/users/jribbens/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-08T18:56:37Z", "updated_at": "2019-11-11T19:16:04Z", "closed_at": "2019-11-11T19:16:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Django 2.1.14 with whitenoise 4.1.4 is throwing an exception in production `Missing staticfiles manifest entry for 'images/favicon.71317f9c63fb.ico'`.\r\n\r\nThe file `static/images/favicon.71317f9c63fb.ico` does exist (as does `static/images/favicon.ico`). `STATIC_ROOT` is set correctly.\r\n\r\n`findstatic` from the command-line is perfectly happily finding both `favicon.ico` and `favicon.71317f9c63fb.ico`.\r\n\r\nChanging  `STATICFILES_STORAGE` from `whitenoise.storage.CompressedManifestStaticFilesStorage` to `django.contrib.staticfiles.storage.StaticFilesStorage` makes the problem go away.\r\n\r\nWhat could be causing this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/230", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/230/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/230/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/230/events", "html_url": "https://github.com/evansd/whitenoise/issues/230", "id": 488222102, "node_id": "MDU6SXNzdWU0ODgyMjIxMDI=", "number": 230, "title": "Source map URLs are not rewritten to include hash", "user": {"login": "rik", "id": 3653, "node_id": "MDQ6VXNlcjM2NTM=", "avatar_url": "https://avatars3.githubusercontent.com/u/3653?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rik", "html_url": "https://github.com/rik", "followers_url": "https://api.github.com/users/rik/followers", "following_url": "https://api.github.com/users/rik/following{/other_user}", "gists_url": "https://api.github.com/users/rik/gists{/gist_id}", "starred_url": "https://api.github.com/users/rik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rik/subscriptions", "organizations_url": "https://api.github.com/users/rik/orgs", "repos_url": "https://api.github.com/users/rik/repos", "events_url": "https://api.github.com/users/rik/events{/privacy}", "received_events_url": "https://api.github.com/users/rik/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-02T14:39:24Z", "updated_at": "2019-09-03T09:12:04Z", "closed_at": "2019-09-03T09:12:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Combining `WHITENOISE_KEEP_ONLY_HASHED_FILES = True` with source maps result in source maps not being fetched when opening browser devtools.\r\n\r\nThe particular format I'm seeing at the end of my CSS file is this:\r\n```css\r\n/*# sourceMappingURL=/static/styles.css.map */\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/229", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/229/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/229/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/229/events", "html_url": "https://github.com/evansd/whitenoise/issues/229", "id": 483016427, "node_id": "MDU6SXNzdWU0ODMwMTY0Mjc=", "number": 229, "title": "Missing changelog for 4.1.3", "user": {"login": "bhrutledge", "id": 1326704, "node_id": "MDQ6VXNlcjEzMjY3MDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1326704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhrutledge", "html_url": "https://github.com/bhrutledge", "followers_url": "https://api.github.com/users/bhrutledge/followers", "following_url": "https://api.github.com/users/bhrutledge/following{/other_user}", "gists_url": "https://api.github.com/users/bhrutledge/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhrutledge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhrutledge/subscriptions", "organizations_url": "https://api.github.com/users/bhrutledge/orgs", "repos_url": "https://api.github.com/users/bhrutledge/repos", "events_url": "https://api.github.com/users/bhrutledge/events{/privacy}", "received_events_url": "https://api.github.com/users/bhrutledge/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-20T18:32:40Z", "updated_at": "2019-08-21T09:04:53Z", "closed_at": "2019-08-21T09:04:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm looking into this report from [`safety check`](https://pypi.org/project/safety/):\r\n\r\n```\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 whitenoise                 \u2502 4.1.2     \u2502 <4.1.3                   \u2502 37275    \u2502\r\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\r\n\u2502 whitenoise 4.1.3 change: Fix potential path traversal attack while running   \u2502\r\n\u2502 in autorefresh mode on    Windows                                            \u2502\r\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\r\n```\r\n\r\nHowever, while there is a [4.1.3 release on PyPI](https://pypi.org/project/whitenoise/4.1.3/), I don't see a mention of it in the [changelog](http://whitenoise.evans.io/en/stable/changelog.html).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/227", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/227/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/227/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/227/events", "html_url": "https://github.com/evansd/whitenoise/issues/227", "id": 473749364, "node_id": "MDU6SXNzdWU0NzM3NDkzNjQ=", "number": 227, "title": "Removing whitenoise from my django application worked for me", "user": {"login": "PRREMIA", "id": 52268942, "node_id": "MDQ6VXNlcjUyMjY4OTQy", "avatar_url": "https://avatars2.githubusercontent.com/u/52268942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PRREMIA", "html_url": "https://github.com/PRREMIA", "followers_url": "https://api.github.com/users/PRREMIA/followers", "following_url": "https://api.github.com/users/PRREMIA/following{/other_user}", "gists_url": "https://api.github.com/users/PRREMIA/gists{/gist_id}", "starred_url": "https://api.github.com/users/PRREMIA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PRREMIA/subscriptions", "organizations_url": "https://api.github.com/users/PRREMIA/orgs", "repos_url": "https://api.github.com/users/PRREMIA/repos", "events_url": "https://api.github.com/users/PRREMIA/events{/privacy}", "received_events_url": "https://api.github.com/users/PRREMIA/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-28T14:22:00Z", "updated_at": "2019-07-28T14:39:59Z", "closed_at": "2019-07-28T14:39:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "For a while, I had been trying to deploy my site to heroku but it hadn't been working. Once I removed whitenoise, it finally worked. (not really, the site just stopped giving a 500 error. the css didn't work).\r\n\r\nWhy didn't it work? It seems to be working perfectly fine with others.\r\n\r\nHere it is on [Github](https://github.com/PRREMIA/prremia-django)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/225", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/225/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/225/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/225/events", "html_url": "https://github.com/evansd/whitenoise/issues/225", "id": 467783672, "node_id": "MDU6SXNzdWU0Njc3ODM2NzI=", "number": 225, "title": "test_get_brotli failed in whitenoise 4.1.3", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 18, "created_at": "2019-07-14T01:36:13Z", "updated_at": "2019-09-24T15:40:03Z", "closed_at": "2019-09-24T15:40:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am getting the following test failures with the new release:\r\n```\r\n======================================================================\r\nERROR: test_get_brotli (tests.test_django_whitenoise.DjangoWhiteNoiseTest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/build/python-whitenoise/src/whitenoise-4.1.3/tests/test_django_whitenoise.py\", line 94, in test_get_brotli\r\n    self.assertEqual(brotli.decompress(response.content), self.static_files.js_content)\r\nbrotli.error: BrotliDecompress failed\r\n\r\n----------------------------------------------------------------------\r\n```\r\n\r\nTest environment contains the following Arch Linux x86_64 packages:\r\n```\r\nPackages (13) python-appdirs-1.4.3-2  python-chardet-3.0.4-2  python-idna-2.8-1  python-packaging-19.0-1  python-pyparsing-2.4.0-1\r\n              python-pytz-2019.1-1  python-six-1.12.0-1  python-sqlparse-0.2.4-2  python-urllib3-1.25.3-1  python-brotli-1.0.7-1\r\n              python-django-2.2.3-1  python-requests-2.22.0-1  python-setuptools-1:41.0.1-1\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/223", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/223/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/223/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/223/events", "html_url": "https://github.com/evansd/whitenoise/issues/223", "id": 459887634, "node_id": "MDU6SXNzdWU0NTk4ODc2MzQ=", "number": 223, "title": "Add a \"How do I know it's working?\" section to docs", "user": {"login": "evansd", "id": 19630, "node_id": "MDQ6VXNlcjE5NjMw", "avatar_url": "https://avatars2.githubusercontent.com/u/19630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evansd", "html_url": "https://github.com/evansd", "followers_url": "https://api.github.com/users/evansd/followers", "following_url": "https://api.github.com/users/evansd/following{/other_user}", "gists_url": "https://api.github.com/users/evansd/gists{/gist_id}", "starred_url": "https://api.github.com/users/evansd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evansd/subscriptions", "organizations_url": "https://api.github.com/users/evansd/orgs", "repos_url": "https://api.github.com/users/evansd/repos", "events_url": "https://api.github.com/users/evansd/events{/privacy}", "received_events_url": "https://api.github.com/users/evansd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-24T13:19:24Z", "updated_at": "2020-03-13T15:49:20Z", "closed_at": "2020-03-13T15:49:20Z", "author_association": "OWNER", "active_lock_reason": null, "body": "Following useful feedback from @sebbacon, we should add a section to the docs explaining how to confirm that WhiteNoise is correctly installed and working. This would also be a good place to go into the oddities around Django's DEBUG mode.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/222", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/222/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/222/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/222/events", "html_url": "https://github.com/evansd/whitenoise/issues/222", "id": 454847103, "node_id": "MDU6SXNzdWU0NTQ4NDcxMDM=", "number": 222, "title": "Provide mitigation for last-modified (mtime) of 0", "user": {"login": "twosigmajab", "id": 40300730, "node_id": "MDQ6VXNlcjQwMzAwNzMw", "avatar_url": "https://avatars0.githubusercontent.com/u/40300730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/twosigmajab", "html_url": "https://github.com/twosigmajab", "followers_url": "https://api.github.com/users/twosigmajab/followers", "following_url": "https://api.github.com/users/twosigmajab/following{/other_user}", "gists_url": "https://api.github.com/users/twosigmajab/gists{/gist_id}", "starred_url": "https://api.github.com/users/twosigmajab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/twosigmajab/subscriptions", "organizations_url": "https://api.github.com/users/twosigmajab/orgs", "repos_url": "https://api.github.com/users/twosigmajab/repos", "events_url": "https://api.github.com/users/twosigmajab/events{/privacy}", "received_events_url": "https://api.github.com/users/twosigmajab/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-06-11T18:46:49Z", "updated_at": "2019-07-13T11:14:31Z", "closed_at": "2019-07-13T11:14:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently, Whitenoise unconditionally adds a `Last-Modified` header to responses based on `file.stat.st_mtime`. It also uses the `mtime` to compute part of the `ETag` header.\r\n\r\nThis is a problem when serving static files from a filesystem beyond the user's control (e.g. some FUSE mount) that reports an `mtime` of 0. After Whitenoise sends the bogus `Last-Modified: Thu, 01 Jan 1970 00:00:00 GMT` header **as well as the `ETag` header that, due to the always-0 mtime, is always the same for different versions of the same file that have the same file size** (which is common with SPA index.html files that come with frameworks like Angular and React), clients will send corresponding `If-Modified-Since` and `If-None-Match` headers in subsequent requests, and Whitenoise will send bogus `304 Not Modified` responses, resulting in clients using stale content from their local caches. I'm supporting many Whitenoise users who are experiencing this problem.\r\n\r\nWould you accept a pull request that provided some mitigation for this?\r\n\r\nFor example:\r\n1. Add a special-case check for `mtime == 0`. When found, don't trust it.\r\n2. Provide an `ignore_mtime` option that mitigates filesystems that don't support `mtime`. If True, don't even waste time (or bytes transferred, etc.) computing and sending a `Last-Modified` header, and don't include the `mtime` in the `ETag` computation; instead use the file's inode number, as Apache does: https://httpd.apache.org/docs/2.4/mod/core.html#fileetag", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/221", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/221/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/221/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/221/events", "html_url": "https://github.com/evansd/whitenoise/issues/221", "id": 445388937, "node_id": "MDU6SXNzdWU0NDUzODg5Mzc=", "number": 221, "title": "WhiteNoise storage doesn't serve my static files", "user": {"login": "alexanderisora", "id": 13141157, "node_id": "MDQ6VXNlcjEzMTQxMTU3", "avatar_url": "https://avatars1.githubusercontent.com/u/13141157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexanderisora", "html_url": "https://github.com/alexanderisora", "followers_url": "https://api.github.com/users/alexanderisora/followers", "following_url": "https://api.github.com/users/alexanderisora/following{/other_user}", "gists_url": "https://api.github.com/users/alexanderisora/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexanderisora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexanderisora/subscriptions", "organizations_url": "https://api.github.com/users/alexanderisora/orgs", "repos_url": "https://api.github.com/users/alexanderisora/repos", "events_url": "https://api.github.com/users/alexanderisora/events{/privacy}", "received_events_url": "https://api.github.com/users/alexanderisora/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-17T11:06:40Z", "updated_at": "2019-05-21T09:00:34Z", "closed_at": "2019-05-21T09:00:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello! I'm using Whitenoise in my Django application running on Heroku.\r\n\r\nI've faced a problem and stumbled this post:\r\nhttp://whitenoise.evans.io/en/stable/django.html#troubleshooting-the-whitenoise-storage-backend\r\n\r\nWhen I set \r\n`STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'` \r\nmy static files are loaded well.\r\nBut when it is\r\n`STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'` \r\nthe static is not loaded properly.\r\n\r\nSome more info on the problem:\r\nI have 2 static files folders type:\r\n1) CSS and JS files created by me. They are named like this `my_styles.css` and changed only manually by me.\r\n2) CSS and JS files created by Webpack (create-react-app). They are named like this `main.a17463f1.chunk.js`. These files are generated by Webpack during a build.\r\n\r\nProblem: static files of type 1) are loaded every time - even with the whitenoise storage enabled. But files of the type 2) are NOT loaded with the whitenoise storage backend.\r\n\r\nIs this because of the hashes in the files' titles? \r\nIf so, does anyone have experience with serving the generated hashed static files with whitenoise?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/220", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/220/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/220/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/220/events", "html_url": "https://github.com/evansd/whitenoise/issues/220", "id": 439633079, "node_id": "MDU6SXNzdWU0Mzk2MzMwNzk=", "number": 220, "title": "Using Whitenoise with Cloudflare's CDN", "user": {"login": "subodh-malgonde", "id": 5463437, "node_id": "MDQ6VXNlcjU0NjM0Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5463437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/subodh-malgonde", "html_url": "https://github.com/subodh-malgonde", "followers_url": "https://api.github.com/users/subodh-malgonde/followers", "following_url": "https://api.github.com/users/subodh-malgonde/following{/other_user}", "gists_url": "https://api.github.com/users/subodh-malgonde/gists{/gist_id}", "starred_url": "https://api.github.com/users/subodh-malgonde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/subodh-malgonde/subscriptions", "organizations_url": "https://api.github.com/users/subodh-malgonde/orgs", "repos_url": "https://api.github.com/users/subodh-malgonde/repos", "events_url": "https://api.github.com/users/subodh-malgonde/events{/privacy}", "received_events_url": "https://api.github.com/users/subodh-malgonde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-02T14:52:07Z", "updated_at": "2019-05-02T15:24:49Z", "closed_at": "2019-05-02T15:24:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have transferred my domain's nameservers to Cloudflare, which provides CDN services  along with it. \r\n\r\nI just want to confirm my understanding of using Cloudflare's CDN when managing static files with Whitenoise:\r\n\r\n1. The docs contain instruction for setting up Whitenoise with Cloudfront. I am using Cloudflare and unlike Cloudfront it does not provide a CDN subdomain or host name. See this [Does Cloudflare provide me with a CDN subdomain or hostname?](https://support.cloudflare.com/hc/en-us/articles/203689034-Does-Cloudflare-provide-me-with-a-CDN-subdomain-or-hostname-).\r\n2. Cloudflare decides caching time based on file extensions and caching headers. See this [How Do I Tell Cloudflare What to Cache?](https://support.cloudflare.com/hc/en-us/articles/202775670). \r\n\r\nSince the headers are handled effectively by Whitenoise, I don't need to change anything in my Django settings (like setting static host when using Cloudfront) or change any settings in Cloudflare's dashboard. Am I right?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/219", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/219/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/219/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/219/events", "html_url": "https://github.com/evansd/whitenoise/issues/219", "id": 439074037, "node_id": "MDU6SXNzdWU0MzkwNzQwMzc=", "number": 219, "title": "Where can I find instructions to deploy a Django + Whitenoise app using gunicorn?", "user": {"login": "subodh-malgonde", "id": 5463437, "node_id": "MDQ6VXNlcjU0NjM0Mzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/5463437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/subodh-malgonde", "html_url": "https://github.com/subodh-malgonde", "followers_url": "https://api.github.com/users/subodh-malgonde/followers", "following_url": "https://api.github.com/users/subodh-malgonde/following{/other_user}", "gists_url": "https://api.github.com/users/subodh-malgonde/gists{/gist_id}", "starred_url": "https://api.github.com/users/subodh-malgonde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/subodh-malgonde/subscriptions", "organizations_url": "https://api.github.com/users/subodh-malgonde/orgs", "repos_url": "https://api.github.com/users/subodh-malgonde/repos", "events_url": "https://api.github.com/users/subodh-malgonde/events{/privacy}", "received_events_url": "https://api.github.com/users/subodh-malgonde/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-05-01T05:38:10Z", "updated_at": "2020-07-13T09:48:26Z", "closed_at": "2019-05-02T12:05:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI am using Whitenoise to serve static files in my Django app. I am **NOT** using Nginx. I plan to use a CDN like cloudfront in the future.\r\n\r\nI have been looking for deployment instructions, which handle these questions:\r\n\r\n1. Since I am not using nginx, I plan to bind gunicorn directly to port 80. This results in an error.\r\n2. How to handle SSL certificate stuff? Typically this is handled by servers like Nginx.\r\n\r\nI understand that these are beyond the scope of Whitenoise documentation, and this is not exactly a Whitenoise \"issue\". However I have been trying to figure this out for 2 days now. \r\n\r\nIt would be great if someone could point to instructions to do this. \r\n\r\n**EDIT**: I am deploying on a Ubuntu 18.04 on Google Compute Engine. \r\n\r\n**EDIT 2**: There are many tutorials about deploying with Whitenoise on Heroku. But none for deploying on own VM. So I think using nginx will just make my life a lot easier. Now the question is, should I use Whitenoise while I am using nginx as the reverse proxy?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/216", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/216/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/216/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/216/events", "html_url": "https://github.com/evansd/whitenoise/issues/216", "id": 422827956, "node_id": "MDU6SXNzdWU0MjI4Mjc5NTY=", "number": 216, "title": "disable caching for static files matching a pattern", "user": {"login": "satyanash", "id": 1559596, "node_id": "MDQ6VXNlcjE1NTk1OTY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1559596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/satyanash", "html_url": "https://github.com/satyanash", "followers_url": "https://api.github.com/users/satyanash/followers", "following_url": "https://api.github.com/users/satyanash/following{/other_user}", "gists_url": "https://api.github.com/users/satyanash/gists{/gist_id}", "starred_url": "https://api.github.com/users/satyanash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/satyanash/subscriptions", "organizations_url": "https://api.github.com/users/satyanash/orgs", "repos_url": "https://api.github.com/users/satyanash/repos", "events_url": "https://api.github.com/users/satyanash/events{/privacy}", "received_events_url": "https://api.github.com/users/satyanash/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-19T16:21:54Z", "updated_at": "2019-03-30T16:39:59Z", "closed_at": "2019-03-30T16:39:59Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the recommended way to control caching for static files that match a pattern?\r\nFor example:\r\n*  the browser should never cache all my `index.html` files (`max-age=0`). \r\n*  the browser should cache forever all paths starting with `static/foo` as these are already generated by $LATEST_JS_THING and have a unique hash in their name.\r\n* Any file that does not match above patterns should have the configured `max-age` as it does already.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/214", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/214/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/214/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/214/events", "html_url": "https://github.com/evansd/whitenoise/issues/214", "id": 418320339, "node_id": "MDU6SXNzdWU0MTgzMjAzMzk=", "number": 214, "title": "HTML5 History Mode for static site: rewrite engine support", "user": {"login": "GabLeRoux", "id": 1264761, "node_id": "MDQ6VXNlcjEyNjQ3NjE=", "avatar_url": "https://avatars1.githubusercontent.com/u/1264761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabLeRoux", "html_url": "https://github.com/GabLeRoux", "followers_url": "https://api.github.com/users/GabLeRoux/followers", "following_url": "https://api.github.com/users/GabLeRoux/following{/other_user}", "gists_url": "https://api.github.com/users/GabLeRoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabLeRoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabLeRoux/subscriptions", "organizations_url": "https://api.github.com/users/GabLeRoux/orgs", "repos_url": "https://api.github.com/users/GabLeRoux/repos", "events_url": "https://api.github.com/users/GabLeRoux/events{/privacy}", "received_events_url": "https://api.github.com/users/GabLeRoux/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-07T13:53:28Z", "updated_at": "2019-03-30T16:40:27Z", "closed_at": "2019-03-30T16:40:27Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,  \r\nwhitenoise is a very handy project, I've been using this for a while and it works very well, thanks :tada:\r\n\r\nSo here it is; I plan to do use a setup that looks like this:  \r\n1. API served on example.com/api\r\n2. Static site served on example.com/\r\n3. Static site will use the api as one would expect\r\n\r\nFrontend is currently built using `vue-js` I'd like to use vue's HTML5 History Mode. I've enabled `WHITENOISE_INDEX_FILE`, set `STATIC_URL` to `/` and prefixed all my django urls with `api/`.\r\n\r\nThis works fine, but I'd like to also use the [`vue-router`'s `HTML5 History Mode` documentation](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations).\r\n\r\nHere's the current behaviour:\r\n1. home page\r\n![image](https://user-images.githubusercontent.com/1264761/53960697-f5953c80-40b4-11e9-85fc-5174e798fadd.png)\r\n2. Click on login (using vue-router)\r\n![image](https://user-images.githubusercontent.com/1264761/53960715-ff1ea480-40b4-11e9-92fc-074b1c3b9038.png)\r\n3. Refresh the page\r\n![image](https://user-images.githubusercontent.com/1264761/53960742-0d6cc080-40b5-11e9-99ca-a34c2d6dda2d.png)\r\n\r\nIn [`vue-router`'s `HTML5 History Mode` documentation](https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations), they provide a few examples to configure web servers such as nginx, apache, caddy, firebase, etc. In the case of Nodejs, I would have used something like [bripkens/connect-history-api-fallback](https://github.com/bripkens/connect-history-api-fallback/). I'm wondering if there could be a quick way to achieve this with withenoise.\r\n\r\n_I'm asking here, but I may end up configuring two different subdomains and let caddy or any web server serve the static site as rewrite rules are easy to apply there._", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/213", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/213/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/213/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/213/events", "html_url": "https://github.com/evansd/whitenoise/issues/213", "id": 415668525, "node_id": "MDU6SXNzdWU0MTU2Njg1MjU=", "number": 213, "title": "Django 2.1.7 is not compatible with whitenoise", "user": {"login": "dkliban", "id": 294339, "node_id": "MDQ6VXNlcjI5NDMzOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/294339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkliban", "html_url": "https://github.com/dkliban", "followers_url": "https://api.github.com/users/dkliban/followers", "following_url": "https://api.github.com/users/dkliban/following{/other_user}", "gists_url": "https://api.github.com/users/dkliban/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkliban/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkliban/subscriptions", "organizations_url": "https://api.github.com/users/dkliban/orgs", "repos_url": "https://api.github.com/users/dkliban/repos", "events_url": "https://api.github.com/users/dkliban/events{/privacy}", "received_events_url": "https://api.github.com/users/dkliban/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-28T15:04:43Z", "updated_at": "2019-03-02T14:08:47Z", "closed_at": "2019-03-02T14:08:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our application uses whitenoise to serve static content. After upgrading Django to 2.1.7 I started seeing the following errors in our logs.\r\n\r\n```\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/style.css\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/insQ.min.js\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/url-polyfill.min.js\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/redoc-init.js\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/redoc/redoc.min.js\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/url-polyfill.min.js\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/redoc-init.js\r\nFeb 28 14:42:05 ... gunicorn[15681]: pulp: django.request:WARNING: Not Found: /static/drf-yasg/redoc/redoc.min.js```\r\n\r\n\r\nDowngrading to Django 2.1.5 fixes the problem. ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/212", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/212/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/212/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/212/events", "html_url": "https://github.com/evansd/whitenoise/issues/212", "id": 410126438, "node_id": "MDU6SXNzdWU0MTAxMjY0Mzg=", "number": 212, "title": "Fontawesome", "user": {"login": "ildarworld", "id": 20387073, "node_id": "MDQ6VXNlcjIwMzg3MDcz", "avatar_url": "https://avatars1.githubusercontent.com/u/20387073?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ildarworld", "html_url": "https://github.com/ildarworld", "followers_url": "https://api.github.com/users/ildarworld/followers", "following_url": "https://api.github.com/users/ildarworld/following{/other_user}", "gists_url": "https://api.github.com/users/ildarworld/gists{/gist_id}", "starred_url": "https://api.github.com/users/ildarworld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ildarworld/subscriptions", "organizations_url": "https://api.github.com/users/ildarworld/orgs", "repos_url": "https://api.github.com/users/ildarworld/repos", "events_url": "https://api.github.com/users/ildarworld/events{/privacy}", "received_events_url": "https://api.github.com/users/ildarworld/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-14T04:50:55Z", "updated_at": "2019-02-14T09:11:34Z", "closed_at": "2019-02-14T09:11:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Error message when doing collect static with font-awesome inside a project:\r\nMessage:\r\nPost-processing 'font-awesome.min.css' failed!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/211", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/211/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/211/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/211/events", "html_url": "https://github.com/evansd/whitenoise/issues/211", "id": 394045432, "node_id": "MDU6SXNzdWUzOTQwNDU0MzI=", "number": 211, "title": "`Content-Type` header not set for request of gzipped file", "user": {"login": "cph2117", "id": 6933080, "node_id": "MDQ6VXNlcjY5MzMwODA=", "avatar_url": "https://avatars1.githubusercontent.com/u/6933080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cph2117", "html_url": "https://github.com/cph2117", "followers_url": "https://api.github.com/users/cph2117/followers", "following_url": "https://api.github.com/users/cph2117/following{/other_user}", "gists_url": "https://api.github.com/users/cph2117/gists{/gist_id}", "starred_url": "https://api.github.com/users/cph2117/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cph2117/subscriptions", "organizations_url": "https://api.github.com/users/cph2117/orgs", "repos_url": "https://api.github.com/users/cph2117/repos", "events_url": "https://api.github.com/users/cph2117/events{/privacy}", "received_events_url": "https://api.github.com/users/cph2117/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-25T19:34:02Z", "updated_at": "2018-12-26T21:54:05Z", "closed_at": "2018-12-25T20:55:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've implemented Whitenoise in a Django/gunicorn/heroku project following the instructions:\r\n`settings.py`\r\n```\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n   # ...\r\n]\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n```\r\nI have a static `index.html` file that contains a script `<script src=\"/static/js/main.25c49024.chunk.js.gz\"></script>`. When the page loads it throws a console error: `Uncaught SyntaxError: Invalid or unexpected token`. Presumably it's because the browser doesn't recognize how to decode the file b/c the response headers don't indicate that it's a gzip file: \r\n<img width=\"288\" alt=\"screen shot 2018-12-25 at 2 31 39 pm\" src=\"https://user-images.githubusercontent.com/6933080/50426032-19850800-0852-11e9-8831-f4ba8870d918.png\">\r\n\r\nWhat am I missing here?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/210", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/210/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/210/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/210/events", "html_url": "https://github.com/evansd/whitenoise/issues/210", "id": 392769618, "node_id": "MDU6SXNzdWUzOTI3Njk2MTg=", "number": 210, "title": "Request to re-examine issues raised in #163", "user": {"login": "MalikRumi", "id": 5474426, "node_id": "MDQ6VXNlcjU0NzQ0MjY=", "avatar_url": "https://avatars0.githubusercontent.com/u/5474426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MalikRumi", "html_url": "https://github.com/MalikRumi", "followers_url": "https://api.github.com/users/MalikRumi/followers", "following_url": "https://api.github.com/users/MalikRumi/following{/other_user}", "gists_url": "https://api.github.com/users/MalikRumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/MalikRumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MalikRumi/subscriptions", "organizations_url": "https://api.github.com/users/MalikRumi/orgs", "repos_url": "https://api.github.com/users/MalikRumi/repos", "events_url": "https://api.github.com/users/MalikRumi/events{/privacy}", "received_events_url": "https://api.github.com/users/MalikRumi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-12-19T20:41:36Z", "updated_at": "2019-12-07T17:45:27Z", "closed_at": "2018-12-20T10:19:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "You closed #163 for lack of a response from the OP. I am having a similar issue and have spent a week on it without resolution. There are numerous unresolved posts on SO about similar issues. This one describes my situation the closest: https://stackoverflow.com/questions/46713538/cant-make-whitenoise-work-with-django-heroku-for-production. \r\n\r\nWith debug=True, it works. With debug=False, it comes up 500. It is the same with or without the django-heroku package https://github.com/heroku/django-heroku, which according to the Heroku docs, is supposed to 'just work': https://devcenter.heroku.com/articles/django-app-configuration.\r\n\r\nHeroku does not offer much support for application issues, and the last word I got from them was that, on top of that, they are suffering through a kind of 'Christmas rush' which pushes these issues further back from attention. \r\n\r\nI have upgraded to whitenoise v4+, edited wsgi.py, and added the whitenoise middleware. I am attaching a version of my settings with sensitive stuff omitted. I am also attaching a copy of wsgi.py. Ignore the reference to Django 1.7, I'm on 1.11.6. You can tell from the comments some of the variations I have already tried. I don't know what else to do.\r\n[wsgi.txt](https://github.com/evansd/whitenoise/files/2696429/wsgi.txt)\r\n \r\n[edited_settings_for_whitenoise_github_issues.txt](https://github.com/evansd/whitenoise/files/2696411/edited_settings_for_whitenoise_github_issues.txt)\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/209", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/209/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/209/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/209/events", "html_url": "https://github.com/evansd/whitenoise/issues/209", "id": 385707863, "node_id": "MDU6SXNzdWUzODU3MDc4NjM=", "number": 209, "title": "Docs build failing?", "user": {"login": "adamchainz", "id": 857609, "node_id": "MDQ6VXNlcjg1NzYwOQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/857609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamchainz", "html_url": "https://github.com/adamchainz", "followers_url": "https://api.github.com/users/adamchainz/followers", "following_url": "https://api.github.com/users/adamchainz/following{/other_user}", "gists_url": "https://api.github.com/users/adamchainz/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamchainz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamchainz/subscriptions", "organizations_url": "https://api.github.com/users/adamchainz/orgs", "repos_url": "https://api.github.com/users/adamchainz/repos", "events_url": "https://api.github.com/users/adamchainz/events{/privacy}", "received_events_url": "https://api.github.com/users/adamchainz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-29T12:13:40Z", "updated_at": "2018-11-29T12:20:43Z", "closed_at": "2018-11-29T12:18:04Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "http://whitenoise.evans.io/en/stable/changelog.html doesn't feature 4.1.2 but I see it was added in 8a374b49fb4bf8e17af4d51f3bfabb3e08d783a8, perhaps readthedocs is failing? I know I've missed it failing in the past on my own projects.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/207", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/207/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/207/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/207/events", "html_url": "https://github.com/evansd/whitenoise/issues/207", "id": 381589524, "node_id": "MDU6SXNzdWUzODE1ODk1MjQ=", "number": 207, "title": "[Django] Ease disabling gzip support", "user": {"login": "hartwork", "id": 1577132, "node_id": "MDQ6VXNlcjE1NzcxMzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/1577132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hartwork", "html_url": "https://github.com/hartwork", "followers_url": "https://api.github.com/users/hartwork/followers", "following_url": "https://api.github.com/users/hartwork/following{/other_user}", "gists_url": "https://api.github.com/users/hartwork/gists{/gist_id}", "starred_url": "https://api.github.com/users/hartwork/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hartwork/subscriptions", "organizations_url": "https://api.github.com/users/hartwork/orgs", "repos_url": "https://api.github.com/users/hartwork/repos", "events_url": "https://api.github.com/users/hartwork/events{/privacy}", "received_events_url": "https://api.github.com/users/hartwork/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-16T12:59:25Z", "updated_at": "2018-11-19T22:29:23Z", "closed_at": "2018-11-19T22:27:32Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nI'm very happy I ran into WhiteNoise, happy user, thanks for sharing it as software libre.\r\nI started using brotli (with [`brotli_static on;`](https://github.com/google/ngx_brotli#brotli_static)) at some point and noticed that compressing all the files with both gzip and brotli takes a few seconds. So I played with getting rid of gzip compression like this:\r\n\r\n```python\r\n# Copyright (c) 2018 Sebastian Pipping\r\n# Copyright (c) 2013 David Evans\r\n# License under the MIT license\r\n\r\nfrom django.conf import settings\r\nfrom whitenoise.compress import Compressor\r\nfrom whitenoise.storage import CompressedManifestStaticFilesStorage\r\n\r\n\r\nclass WhiteNoiseWithoutGzipStorage(CompressedManifestStaticFilesStorage):\r\n\r\n    def create_compressor(self, extensions):\r\n        return Compressor(extensions=extensions, quiet=True, use_gzip=False)\r\n\r\n    def compress_files(self, names):\r\n        extensions = getattr(settings,\r\n                             'WHITENOISE_SKIP_COMPRESS_EXTENSIONS', None)\r\n        compressor = self.create_compressor(extensions)\r\n        for name in names:\r\n            if compressor.should_compress(name):\r\n                path = self.path(name)\r\n                prefix_len = len(path) - len(name)\r\n                for compressed_path in compressor.compress(path):\r\n                    compressed_name = compressed_path[prefix_len:]\r\n                    yield name, compressed_name\r\n```\r\n(and then `STATICFILES_STORAGE = 'foo.bar.storage.WhiteNoiseWithoutGzipStorage'` in settings to activate, for completeness)\r\n\r\nAs you can see, to make that work, I currently need to duplicate 100% of `CompressedManifestStaticFilesStorage.compress_files`, which is not ideal.\r\n\r\nSo I wonder about how to best ease that case. One way would be to extract a new public-API method `create_compressor` similar to the one above, except without `use_gzip=False`. Would you except a pull request in that direction? Would you want to do it yourself? Other ideas?\r\n\r\nThanks and best, Sebastian", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/204", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/204/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/204/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/204/events", "html_url": "https://github.com/evansd/whitenoise/issues/204", "id": 381200955, "node_id": "MDU6SXNzdWUzODEyMDA5NTU=", "number": 204, "title": "Static files not served in StaticLiveServerTestCase", "user": {"login": "pupeno", "id": 8425, "node_id": "MDQ6VXNlcjg0MjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/8425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pupeno", "html_url": "https://github.com/pupeno", "followers_url": "https://api.github.com/users/pupeno/followers", "following_url": "https://api.github.com/users/pupeno/following{/other_user}", "gists_url": "https://api.github.com/users/pupeno/gists{/gist_id}", "starred_url": "https://api.github.com/users/pupeno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pupeno/subscriptions", "organizations_url": "https://api.github.com/users/pupeno/orgs", "repos_url": "https://api.github.com/users/pupeno/repos", "events_url": "https://api.github.com/users/pupeno/events{/privacy}", "received_events_url": "https://api.github.com/users/pupeno/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-11-15T15:03:47Z", "updated_at": "2018-11-16T09:46:32Z", "closed_at": "2018-11-16T09:38:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "First, I'm aware of issue #66 but the problem I'm experiencing doesn't get fixed by running `collectstatic`.\r\n\r\nI'm doing all of these experiments on a minimal Django 2.1.3 project with a fresh app, running on Python 3.7 and using whitenoise 4.1.1:\r\n\r\n```\r\nDjango==2.1.3\r\npsycopg2==2.7.6.1\r\npytz==2018.7\r\nselenium==3.141.0\r\nurllib3==1.24.1\r\nwhitenoise==4.1.1\r\n```\r\n\r\nThe starting settings are:\r\n\r\n```python\r\nDEBUG=True\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\r\n```\r\n\r\nand at that point the tests look good. The test itself looks like this:\r\n\r\n```python\r\nfrom django.contrib.auth.models import User\r\nfrom django.contrib.staticfiles.testing import StaticLiveServerTestCase\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.keys import Keys\r\n\r\n\r\nclass TestImportCRMData(StaticLiveServerTestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        super().setUpClass()\r\n        cls.webdriver = webdriver.Chrome()\r\n        cls.webdriver.implicitly_wait(10)\r\n\r\n    @classmethod\r\n    def tearDownClass(cls):\r\n        cls.webdriver.close()\r\n        cls.webdriver.quit()\r\n        super().tearDownClass()\r\n\r\n    def setUp(self):\r\n        self.admin = User.objects.create_superuser(username=\"username\", password=\"password\",\r\n                                                   email=\"example@example.com\")\r\n\r\n    def test_navigate_to_import_crm_data(self):\r\n        self.webdriver.get(f\"{self.live_server_url}/admin\")\r\n        self.webdriver.find_element_by_id(\"id_username\").send_keys(\"username\")\r\n        self.webdriver.find_element_by_id(\"id_password\").send_keys(\"password\")\r\n        self.webdriver.find_element_by_id(\"id_password\").send_keys(Keys.RETURN)\r\n        self.webdriver.find_element_by_link_text(\"Users\").click()\r\n```\r\n\r\nwhich should run in any application with the stock Django admin. When I add the app:\r\n\r\n```python\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    # ...\r\n]\r\n```\r\n\r\nand:\r\n\r\n```python\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n```\r\n\r\nand I run the test, I get\r\n\r\n> Server Error (500)\r\n\r\non the browser and\r\n\r\n```\r\nUserWarning: No directory at: C:\\Users\\pupeno\\Temporary\\untitled\\static\\\r\n  warnings.warn(u'No directory at: {}'.format(root))\r\n```\r\n\r\non the terminal. Even with `DEBUG` set to `True`. If I run `collectstatic` , then the test run, but all the static file URL return a 404.\r\n\r\nI tried setting `DEBUG` to `False` and the behavior was exactly the same.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/202", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/202/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/202/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/202/events", "html_url": "https://github.com/evansd/whitenoise/issues/202", "id": 379875241, "node_id": "MDU6SXNzdWUzNzk4NzUyNDE=", "number": 202, "title": "HTTP 304 being returned when Etag doesn't match", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-11-12T17:16:58Z", "updated_at": "2018-11-12T21:53:27Z", "closed_at": "2018-11-12T21:53:27Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi!\r\n\r\nCurrently WhiteNoise:\r\n* includes both an `Etag` and `Last-Modified` header on all responses\r\n* checks incoming requests to see if they specified a `If-None-Match` (used for Etag) or `If-Modified-Since` header, to determine whether to return an HTTP 304 response\r\n\r\nHowever the current implementation falls back to `If-Modified-Since` even if there was a non-matching `If-None-Match`, rather than returning false:\r\nhttps://github.com/evansd/whitenoise/blob/1b5a7f3a0f151ee1449d88da9e4813644e435fd4/whitenoise/responders.py#L169-L176\r\n\r\nThis is problematic since:\r\n* browsers (at least Firefox and Chrome, haven't checked the rest) always send both sets of headers\r\n* `If-Modified-Since` is unreliable in the case of deployment rollbacks (since by design the comparison is greater than or equal to modified time, rather than just equal to)\r\n\r\nDemo:\r\n\r\n```bash\r\ncurl -I https://treeherder.mozilla.org/ \\\r\n  -H 'If-None-Match: \"this-will-not-match\"' \\\r\n  -H 'If-Modified-Since: Thu, 25 Oct 2099 16:00:44 GMT'\r\n```\r\n\r\nCurrently this returns HTTP 304 even though it has a non-matching `If-None-Match` header value.\r\n\r\nThis caused frontend breakage after a rollback we performed today, which persisted until users force-refreshed:\r\n\r\n----\r\n\r\n![screenshot_2018-11-12 12 autoland](https://user-images.githubusercontent.com/501702/48365062-b6745300-e6a1-11e8-8dd9-cc37aa00d5d8.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/200", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/200/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/200/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/200/events", "html_url": "https://github.com/evansd/whitenoise/issues/200", "id": 377330222, "node_id": "MDU6SXNzdWUzNzczMzAyMjI=", "number": 200, "title": "Invalidate outdated browser cache when version changes", "user": {"login": "fabiocaccamo", "id": 1035294, "node_id": "MDQ6VXNlcjEwMzUyOTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1035294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabiocaccamo", "html_url": "https://github.com/fabiocaccamo", "followers_url": "https://api.github.com/users/fabiocaccamo/followers", "following_url": "https://api.github.com/users/fabiocaccamo/following{/other_user}", "gists_url": "https://api.github.com/users/fabiocaccamo/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabiocaccamo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabiocaccamo/subscriptions", "organizations_url": "https://api.github.com/users/fabiocaccamo/orgs", "repos_url": "https://api.github.com/users/fabiocaccamo/repos", "events_url": "https://api.github.com/users/fabiocaccamo/events{/privacy}", "received_events_url": "https://api.github.com/users/fabiocaccamo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-11-05T10:11:52Z", "updated_at": "2018-11-05T10:36:37Z", "closed_at": "2018-11-05T10:36:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be nice to have the possibility to avoid browser caching only when **file version** changes.\r\n\r\n`{% static \"path/to/app.js\" cache_version=True %}` -> `/static/path/to/app.js?version=1.1`\r\n\r\nIs it possible to do that?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/197", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/197/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/197/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/197/events", "html_url": "https://github.com/evansd/whitenoise/issues/197", "id": 359898351, "node_id": "MDU6SXNzdWUzNTk4OTgzNTE=", "number": 197, "title": "Potential Path Traversal in Windows", "user": {"login": "phith0n", "id": 5711185, "node_id": "MDQ6VXNlcjU3MTExODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5711185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phith0n", "html_url": "https://github.com/phith0n", "followers_url": "https://api.github.com/users/phith0n/followers", "following_url": "https://api.github.com/users/phith0n/following{/other_user}", "gists_url": "https://api.github.com/users/phith0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/phith0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phith0n/subscriptions", "organizations_url": "https://api.github.com/users/phith0n/orgs", "repos_url": "https://api.github.com/users/phith0n/repos", "events_url": "https://api.github.com/users/phith0n/events{/privacy}", "received_events_url": "https://api.github.com/users/phith0n/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-09-13T13:34:04Z", "updated_at": "2018-12-24T15:28:12Z", "closed_at": "2018-12-24T15:28:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "I saw that WhiteNoise use following function to check the path traversal attack:\r\n\r\n```python\r\n@staticmethod\r\ndef url_is_canonical(url):\r\n    \"\"\"\r\n    Check that the URL path does not contain any elements which might be\r\n    used in a path traversal attack\r\n    \"\"\"\r\n    if '\\\\' in url:\r\n        return False\r\n    normalised = normpath(url)\r\n    if url.endswith('/') and url != '/':\r\n        normalised += '/'\r\n    return normalised == url\r\n```\r\n\r\nIn Windows, we can use absolute path to bypass the checker, like `/static/C:/windows/win.ini`.\r\n\r\nA example application:\r\n\r\n```python\r\nfrom wsgiref.simple_server import make_server, demo_app\r\nfrom whitenoise import WhiteNoise\r\n\r\napplication = WhiteNoise(demo_app, root='static/', prefix='static/', autorefresh=True)\r\nhttpd = make_server('', 8000, application)\r\nhttpd.serve_forever()\r\n\r\n```\r\n\r\nPath traversal and downloading `C:/windows/win.ini`:\r\n\r\n![image](https://user-images.githubusercontent.com/5711185/45491544-880af200-b79c-11e8-9f9d-29fc89b3f2bf.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/194", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/194/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/194/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/194/events", "html_url": "https://github.com/evansd/whitenoise/issues/194", "id": 350898241, "node_id": "MDU6SXNzdWUzNTA4OTgyNDE=", "number": 194, "title": "Using CompressedStaticFilesMixin by itself doesn't seem to work", "user": {"login": "toolness", "id": 124687, "node_id": "MDQ6VXNlcjEyNDY4Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/124687?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toolness", "html_url": "https://github.com/toolness", "followers_url": "https://api.github.com/users/toolness/followers", "following_url": "https://api.github.com/users/toolness/following{/other_user}", "gists_url": "https://api.github.com/users/toolness/gists{/gist_id}", "starred_url": "https://api.github.com/users/toolness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toolness/subscriptions", "organizations_url": "https://api.github.com/users/toolness/orgs", "repos_url": "https://api.github.com/users/toolness/repos", "events_url": "https://api.github.com/users/toolness/events{/privacy}", "received_events_url": "https://api.github.com/users/toolness/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-08-15T17:36:07Z", "updated_at": "2018-09-11T20:51:14Z", "closed_at": "2018-09-11T20:51:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, for various complicated reasons I couldn't use the manifest-based static file storage, but I _did_ want gzip/brotli compression, so I thought I could use the [`CompressedStaticFilesMixin`](https://github.com/evansd/whitenoise/blob/master/whitenoise/storage.py) for that, since the documentation says:\r\n\r\n```\r\nWraps a StaticFilesStorage instance to create compressed versions of its\r\noutput files and, optionally, to delete the non-hashed files (i.e. those\r\nwithout the hash in their name)\r\n```\r\n\r\nSo I tried creating a trivial subclass of `StaticFilesStorage` that simply mixed-in `CompressedStaticFilesMixin`:\r\n\r\n```python\r\nclass CompressedStaticFilesStorage(CompressedStaticFilesMixin, StaticFilesStorage):\r\n    pass\r\n```\r\n\r\nHowever, running `collectstatic` with this storage backend then raised the following error:\r\n\r\n```pytb\r\nTraceback (most recent call last):\r\n...\r\n  File \"...\\lib\\site-packages\\whitenoise\\storage.py\", line 23, in post_process\r\n    files = super(CompressedStaticFilesMixin, self).post_process(*args, **kwargs)\r\nAttributeError: 'super' object has no attribute 'post_process'\r\n```\r\n\r\nI was then very confused because the [Django documentation](https://docs.djangoproject.com/en/2.1/ref/contrib/staticfiles/#django.contrib.staticfiles.storage.StaticFilesStorage.post_process) says that this `post_process` method actually _should_ exist, but it doesn't, so I filed https://code.djangoproject.com/ticket/29677.\r\n\r\nIn any case, after much fumbling, I managed to write this, which seemed to work:\r\n\r\n```python\r\nfrom django.contrib.staticfiles.storage import StaticFilesStorage\r\nfrom whitenoise.compress import Compressor\r\n\r\nclass CompressedStaticFilesStorage(StaticFilesStorage):\r\n    def post_process(self, paths, **options):\r\n        compressor = Compressor()\r\n        for path in paths:\r\n            if compressor.should_compress(path):\r\n                abspath = self.path(path)\r\n                for compressed_path in compressor.compress(abspath):\r\n                    yield path, compressed_path, True\r\n```\r\n\r\nI'm not really sure if I'm iterating the right values (the documentation for Django's `post_process` is not very informative on this).  But if it's useful to folks who want more of a middle ground between \"serve static assets uncompressed\" and \"serve static assets with compression _and_ hash their filenames\" then I could issue a PR, if that helps.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/192", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/192/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/192/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/192/events", "html_url": "https://github.com/evansd/whitenoise/issues/192", "id": 350080321, "node_id": "MDU6SXNzdWUzNTAwODAzMjE=", "number": 192, "title": "Incompatible with Pathlib from v4.0", "user": {"login": "browniebroke", "id": 861044, "node_id": "MDQ6VXNlcjg2MTA0NA==", "avatar_url": "https://avatars1.githubusercontent.com/u/861044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/browniebroke", "html_url": "https://github.com/browniebroke", "followers_url": "https://api.github.com/users/browniebroke/followers", "following_url": "https://api.github.com/users/browniebroke/following{/other_user}", "gists_url": "https://api.github.com/users/browniebroke/gists{/gist_id}", "starred_url": "https://api.github.com/users/browniebroke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/browniebroke/subscriptions", "organizations_url": "https://api.github.com/users/browniebroke/orgs", "repos_url": "https://api.github.com/users/browniebroke/repos", "events_url": "https://api.github.com/users/browniebroke/events{/privacy}", "received_events_url": "https://api.github.com/users/browniebroke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-08-13T15:31:15Z", "updated_at": "2018-09-12T02:25:33Z", "closed_at": "2018-09-11T21:50:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Python 3.4 added an awesome tool for working with path, [Pathlib](https://docs.python.org/3/library/pathlib.html), which has a nicer API than `os.path`. We've set up our Django project as follow:\r\n\r\n```python\r\nfrom pathlib import Path\r\n\r\nBASE_DIR = (Path(__file__) / '..' / '..' / '..' / '..').resolve()\r\nSTATICFILES_DIRS = [\r\n    BASE_DIR / 'static-build',\r\n]\r\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\r\n```\r\n\r\nSome changes [added in v4.0](https://github.com/evansd/whitenoise/blob/d1f3e2762c75912458f68924ff5f7068da4a130f/whitenoise/base.py#L92) are now relying on [`str.rstrip`](https://docs.python.org/3/library/stdtypes.html?highlight=rstrip#str.rstrip) when processing files to account for trailing slash (I assume). \r\n\r\nHowever, this is breaking our project as pathlib doesn't have the `rstrip()` method:\r\n\r\n```\r\nAttributeError: 'PosixPath' object has no attribute 'rstrip'\r\n```\r\n\r\nI'll try to send a patch to fix this.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/191", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/191/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/191/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/191/events", "html_url": "https://github.com/evansd/whitenoise/issues/191", "id": 350077213, "node_id": "MDU6SXNzdWUzNTAwNzcyMTM=", "number": 191, "title": "Warning shown if STATIC_ROOT directory missing in development", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-13T15:23:35Z", "updated_at": "2018-09-12T08:27:04Z", "closed_at": "2018-09-11T21:50:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi! :-)\r\n\r\n### STR:\r\n1. Update existing Django+WhiteNoise project from whitenoise 3.3.1 to 4.0.\r\n2. Don't run collectstatic (ie since developing locally), so the directory referenced by `STATIC_ROOT` doesn't yet exist\r\n3. With Django's `DEBUG = True`, run `./manage.py runserver`\r\n\r\n### Expected:\r\nNo console warnings about a missing static files directory.\r\n\r\n### Actual:\r\nWarning in the console:\r\n```\r\n...\r\nDjango version 1.11.15, using settings 'treeherder.config.settings'\r\nStarting development server at http://0.0.0.0:8000/\r\nQuit the server with CONTROL-C.\r\n/usr/local/lib/python2.7/site-packages/whitenoise/base.py:97: UserWarning: No directory at: /app/treeherder/static/\r\n  warnings.warn(u'No directory at: {}'.format(root))\r\n```\r\n\r\n### Notes:\r\n* The warning was added to `add_files()` in 2a883f5cda0336dbefebef7bb918c3a2b167a70d. \r\n* We don't pre-create the `STATIC_ROOT` directory, since:\r\n  - Django's `collectstatic` handles the creation of the directory automatically\r\n  - To create the directory we'd either need to use the `.gitkeep` type approach (which then causes `collectstatic` to output misleading warnings/prompts about overwriting existing files) or else have additional local setup steps prior to running `./manage.py runserver`.\r\n\r\nA possible solution might be to have `.add_files()` take an optional `ignore_missing=False` argument, which is left as `False` everywhere apart from the Django middleware static root usage. eg:\r\n\r\n```python\r\nif self.static_root:\r\n    self.add_files(self.static_root, prefix=self.static_prefix, ignore_missing=self.autorefresh)\r\n```\r\n\r\nThat said, should `static_root` even be added when run in `DEBUG` mode? The Django docs say not to place anything in the `STATIC_ROOT` directory directly, so it feels like there shouldn't be content there (though how many people go against that, I don't know).", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/190", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/190/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/190/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/190/events", "html_url": "https://github.com/evansd/whitenoise/issues/190", "id": 349738577, "node_id": "MDU6SXNzdWUzNDk3Mzg1Nzc=", "number": 190, "title": "Correct docs re STATICFILES_DIRS", "user": {"login": "evansd", "id": 19630, "node_id": "MDQ6VXNlcjE5NjMw", "avatar_url": "https://avatars2.githubusercontent.com/u/19630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/evansd", "html_url": "https://github.com/evansd", "followers_url": "https://api.github.com/users/evansd/followers", "following_url": "https://api.github.com/users/evansd/following{/other_user}", "gists_url": "https://api.github.com/users/evansd/gists{/gist_id}", "starred_url": "https://api.github.com/users/evansd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/evansd/subscriptions", "organizations_url": "https://api.github.com/users/evansd/orgs", "repos_url": "https://api.github.com/users/evansd/repos", "events_url": "https://api.github.com/users/evansd/events{/privacy}", "received_events_url": "https://api.github.com/users/evansd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-08-11T14:37:10Z", "updated_at": "2018-09-11T21:50:46Z", "closed_at": "2018-09-11T21:50:46Z", "author_association": "OWNER", "active_lock_reason": null, "body": "From https://twitter.com/jezdez/status/1027959567202873344:\r\n> Minor nit: When using the finders in prod, it\u2019s not only STATICFILES_DIRS that is used but also the files in the apps static subdirs, depending on the STATICFILES_FINDERS setting, right? May want to tweak the docs", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/189", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/189/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/189/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/189/events", "html_url": "https://github.com/evansd/whitenoise/issues/189", "id": 349701439, "node_id": "MDU6SXNzdWUzNDk3MDE0Mzk=", "number": 189, "title": "Test failure under Python 2.7", "user": {"login": "felixonmars", "id": 1006477, "node_id": "MDQ6VXNlcjEwMDY0Nzc=", "avatar_url": "https://avatars3.githubusercontent.com/u/1006477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/felixonmars", "html_url": "https://github.com/felixonmars", "followers_url": "https://api.github.com/users/felixonmars/followers", "following_url": "https://api.github.com/users/felixonmars/following{/other_user}", "gists_url": "https://api.github.com/users/felixonmars/gists{/gist_id}", "starred_url": "https://api.github.com/users/felixonmars/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/felixonmars/subscriptions", "organizations_url": "https://api.github.com/users/felixonmars/orgs", "repos_url": "https://api.github.com/users/felixonmars/repos", "events_url": "https://api.github.com/users/felixonmars/events{/privacy}", "received_events_url": "https://api.github.com/users/felixonmars/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2018-08-11T03:19:20Z", "updated_at": "2018-08-17T08:50:37Z", "closed_at": "2018-08-11T14:35:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "The latest 4.0 release passes the tests here under Python 3.7, but has one test failure under Python 2.7:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n__________ WhiteNoiseAutorefresh.test_warn_about_missing_directories ___________\r\n\r\nself = <tests.test_whitenoise.WhiteNoiseAutorefresh testMethod=test_warn_about_missing_directories>\r\n\r\n    def test_warn_about_missing_directories(self):\r\n        with warnings.catch_warnings(record=True) as warning_list:\r\n            self.application.add_files(u'/dev/null/nosuchdir\\u2713')\r\n>       self.assertEqual(len(warning_list), 1)\r\nE       AssertionError: 0 != 1\r\n\r\ntests/test_whitenoise.py:208: AssertionError\r\n=============================== warnings summary ===============================\r\ntests/test_django_whitenoise.py::TestServer\r\n  cannot collect test class 'TestServer' because it has a __init__ constructor\r\n\r\ntests/test_whitenoise.py::TestServer\r\n  cannot collect test class 'TestServer' because it has a __init__ constructor\r\n\r\n-- Docs: http://doc.pytest.org/en/latest/warnings.html\r\n=============== 1 failed, 90 passed, 2 warnings in 0.83 seconds ================\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/187", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/187/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/187/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/187/events", "html_url": "https://github.com/evansd/whitenoise/issues/187", "id": 336821551, "node_id": "MDU6SXNzdWUzMzY4MjE1NTE=", "number": 187, "title": "Add webroot support", "user": {"login": "astronouth7303", "id": 401438, "node_id": "MDQ6VXNlcjQwMTQzOA==", "avatar_url": "https://avatars3.githubusercontent.com/u/401438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astronouth7303", "html_url": "https://github.com/astronouth7303", "followers_url": "https://api.github.com/users/astronouth7303/followers", "following_url": "https://api.github.com/users/astronouth7303/following{/other_user}", "gists_url": "https://api.github.com/users/astronouth7303/gists{/gist_id}", "starred_url": "https://api.github.com/users/astronouth7303/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astronouth7303/subscriptions", "organizations_url": "https://api.github.com/users/astronouth7303/orgs", "repos_url": "https://api.github.com/users/astronouth7303/repos", "events_url": "https://api.github.com/users/astronouth7303/events{/privacy}", "received_events_url": "https://api.github.com/users/astronouth7303/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-06-29T00:15:27Z", "updated_at": "2018-09-11T21:51:24Z", "closed_at": "2018-09-11T21:51:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "The combination of gunicorn, whitenoise, django, and certbot (Let's Encrypt) is somewhat annoying.\r\n\r\nI kinda really like the usability of gunicorn+whitenoise, leaving out nginx, apache, etc.\r\n\r\nCan an option or standard configuration be added so that whitenoise can serve a certbot-controlled webroot, so that you can somewhat easily get certificates for gunicorn?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/186", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/186/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/186/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/186/events", "html_url": "https://github.com/evansd/whitenoise/issues/186", "id": 335777088, "node_id": "MDU6SXNzdWUzMzU3NzcwODg=", "number": 186, "title": "static file permission denied during collectstatic", "user": {"login": "DoubleCouponDay", "id": 7555725, "node_id": "MDQ6VXNlcjc1NTU3MjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/7555725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DoubleCouponDay", "html_url": "https://github.com/DoubleCouponDay", "followers_url": "https://api.github.com/users/DoubleCouponDay/followers", "following_url": "https://api.github.com/users/DoubleCouponDay/following{/other_user}", "gists_url": "https://api.github.com/users/DoubleCouponDay/gists{/gist_id}", "starred_url": "https://api.github.com/users/DoubleCouponDay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DoubleCouponDay/subscriptions", "organizations_url": "https://api.github.com/users/DoubleCouponDay/orgs", "repos_url": "https://api.github.com/users/DoubleCouponDay/repos", "events_url": "https://api.github.com/users/DoubleCouponDay/events{/privacy}", "received_events_url": "https://api.github.com/users/DoubleCouponDay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-06-26T11:34:11Z", "updated_at": "2019-12-13T19:37:54Z", "closed_at": "2019-12-10T21:32:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am using whitenoise to distribute static content. during an execution of runserver, in a development environment, I have the misfortune of experiencing a failed build due to file locks on static files. The only way to fix the issue is to remove the file so this is not feasible in production.\r\n\r\n```\r\nPost-processed 'admin\\css\\vendor\\select2\\select2.min.css' as 'admin/css/vendor/select2/select2.min.d44571114a90.css'\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\sjsui\\Desktop\\git_workshop\\MoonMachineProprietary\\herokuproprietary\\herokuproprietary\\MoonMachine\\MoonMachine/manage.py\", line 26, in <module>\r\n    execute_from_command_line([os.path.join(BASE_DIR, \"manage.py\"), \"collectstatic\", \"--no-input\"])\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 371, in execute_from_command_line\r\n    utility.execute()\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 365, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\core\\management\\base.py\", line 288, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\core\\management\\base.py\", line 335, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\contrib\\staticfiles\\management\\commands\\collectstatic.py\", line 189, in handle\r\n    collected = self.collect()\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\contrib\\staticfiles\\management\\commands\\collectstatic.py\", line 129, in collect\r\n    for original_path, processed_path, processed in processor:\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\pipeline\\storage.py\", line 39, in post_process\r\n    for name, hashed_name, processed in super_class.post_process(paths.copy(), dry_run, **options):\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\contrib\\staticfiles\\storage.py\", line 246, in post_process\r\n    for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\contrib\\staticfiles\\storage.py\", line 310, in _post_process\r\n    saved_name = self._save(hashed_name, content_file)\r\n  File \"C:\\Users\\sjsui\\.virtualenvs\\MoonMachine-oZ6UWPMB\\lib\\site-packages\\django\\core\\files\\storage.py\", line 264, in _save\r\n    fd = os.open(full_path, flags, 0o666)\r\nPermissionError: [Errno 13] Permission denied: 'C:\\\\Users\\\\sjsui\\\\Desktop\\\\git_workshop\\\\MoonMachineProprietary\\\\herokuproprietary\\\\herokuproprietary\\\\MoonMachine\\\\MoonMachine\\\\static\\\\admin\\\\css\\\\autocomplete.781713f30664.css'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/185", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/185/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/185/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/185/events", "html_url": "https://github.com/evansd/whitenoise/issues/185", "id": 324547374, "node_id": "MDU6SXNzdWUzMjQ1NDczNzQ=", "number": 185, "title": "Whitenoise throws MissingFileError for files in comments", "user": {"login": "GvS666", "id": 342720, "node_id": "MDQ6VXNlcjM0MjcyMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/342720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GvS666", "html_url": "https://github.com/GvS666", "followers_url": "https://api.github.com/users/GvS666/followers", "following_url": "https://api.github.com/users/GvS666/following{/other_user}", "gists_url": "https://api.github.com/users/GvS666/gists{/gist_id}", "starred_url": "https://api.github.com/users/GvS666/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GvS666/subscriptions", "organizations_url": "https://api.github.com/users/GvS666/orgs", "repos_url": "https://api.github.com/users/GvS666/repos", "events_url": "https://api.github.com/users/GvS666/events{/privacy}", "received_events_url": "https://api.github.com/users/GvS666/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-18T20:47:52Z", "updated_at": "2018-05-18T20:57:12Z", "closed_at": "2018-05-18T20:56:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a css file with commented code like this:\r\n`\r\n/* background-image: url(../addons/pager/icons/loading.gif) !important; */\r\n`\r\nand whitenoise throws error about missing file.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/184", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/184/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/184/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/184/events", "html_url": "https://github.com/evansd/whitenoise/issues/184", "id": 317724251, "node_id": "MDU6SXNzdWUzMTc3MjQyNTE=", "number": 184, "title": "Is there a way to tell WhiteNoise to ignore missing files", "user": {"login": "inikolaev", "id": 7585750, "node_id": "MDQ6VXNlcjc1ODU3NTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/7585750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inikolaev", "html_url": "https://github.com/inikolaev", "followers_url": "https://api.github.com/users/inikolaev/followers", "following_url": "https://api.github.com/users/inikolaev/following{/other_user}", "gists_url": "https://api.github.com/users/inikolaev/gists{/gist_id}", "starred_url": "https://api.github.com/users/inikolaev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inikolaev/subscriptions", "organizations_url": "https://api.github.com/users/inikolaev/orgs", "repos_url": "https://api.github.com/users/inikolaev/repos", "events_url": "https://api.github.com/users/inikolaev/events{/privacy}", "received_events_url": "https://api.github.com/users/inikolaev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-25T17:32:16Z", "updated_at": "2018-06-03T14:48:04Z", "closed_at": "2018-06-03T14:48:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using a library `bootstrap-formhelpers`, but CSS is referencing images which do not exist. \r\n\r\nI found a similar issue here https://github.com/tenex/rails-assets/issues/150 and wonder if there's some option in WhiteNoise which allows to ignore missing files and pretend that files are actually there without crashing?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/183", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/183/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/183/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/183/events", "html_url": "https://github.com/evansd/whitenoise/issues/183", "id": 317711670, "node_id": "MDU6SXNzdWUzMTc3MTE2NzA=", "number": 183, "title": "Allow multiple roots", "user": {"login": "aeby", "id": 46198, "node_id": "MDQ6VXNlcjQ2MTk4", "avatar_url": "https://avatars0.githubusercontent.com/u/46198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aeby", "html_url": "https://github.com/aeby", "followers_url": "https://api.github.com/users/aeby/followers", "following_url": "https://api.github.com/users/aeby/following{/other_user}", "gists_url": "https://api.github.com/users/aeby/gists{/gist_id}", "starred_url": "https://api.github.com/users/aeby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aeby/subscriptions", "organizations_url": "https://api.github.com/users/aeby/orgs", "repos_url": "https://api.github.com/users/aeby/repos", "events_url": "https://api.github.com/users/aeby/events{/privacy}", "received_events_url": "https://api.github.com/users/aeby/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-04-25T16:54:57Z", "updated_at": "2018-04-25T22:43:33Z", "closed_at": "2018-04-25T22:43:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it make sense/is a PR welcome to allow multiple \"root\" folders in the Django middleware? Right now the files in the directory specified by `WHITENOISE_ROOT` is served at `/`. I think of a setting like this:\r\n\r\n```\r\n# Keep this setting for backward compatibility\r\nWHITENOISE_ROOT = os.path.join(BASE_DIR, 'if/dist')\r\n\r\n# Roots as tuples of <DIRECTORY>, <PREFIX> \r\nWHITENOISE_ROOTS = (\r\n    (<MY_OTHER_DIR>, '/other/'),\r\n    (<MY_PWA_DIR>, '/pwa/')\r\n)\r\n```\r\nIn [middleware.py](https://github.com/evansd/whitenoise/blob/master/whitenoise/middleware.py#L41) we could allow other roots with something like this:\r\n\r\n```\r\nfor root in self.roots:\r\n    add_files(*root)\r\n```\r\nThe motivation behind are PWA with service workers that need to be served from a specific directory due to scoping. If I have for example an app running at /pwa i have to serve its service worker from this directory.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/182", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/182/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/182/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/182/events", "html_url": "https://github.com/evansd/whitenoise/issues/182", "id": 311752478, "node_id": "MDU6SXNzdWUzMTE3NTI0Nzg=", "number": 182, "title": "whitenoise throws errors on css files which contain urls in comments", "user": {"login": "guyjacks", "id": 6286429, "node_id": "MDQ6VXNlcjYyODY0Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6286429?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guyjacks", "html_url": "https://github.com/guyjacks", "followers_url": "https://api.github.com/users/guyjacks/followers", "following_url": "https://api.github.com/users/guyjacks/following{/other_user}", "gists_url": "https://api.github.com/users/guyjacks/gists{/gist_id}", "starred_url": "https://api.github.com/users/guyjacks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guyjacks/subscriptions", "organizations_url": "https://api.github.com/users/guyjacks/orgs", "repos_url": "https://api.github.com/users/guyjacks/repos", "events_url": "https://api.github.com/users/guyjacks/events{/privacy}", "received_events_url": "https://api.github.com/users/guyjacks/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-04-05T20:11:38Z", "updated_at": "2018-06-03T14:46:17Z", "closed_at": "2018-06-03T14:46:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm pretty certain that its a bug in Django, but I'm posting here because it really only matters if you're using Whitenoise.\r\n\r\nThis a critical issue, because this bug prevents deploying a Django app to Heroku if you're using whitenoise and your app depends on a css file with commented urls.  Heroku doesn't provide any hooks that allow us to remedy this before collectstatic runs via some kind of shell script.  \r\n\r\nThe only solution would be to prebuild the assets and include them in the repo and then remove any reference to css files with commented urls.  This is obviously not ideal.\r\n\r\nWhitenoise has been great, but we have tried everything we can think of and are likely going to have to use s3 for our static assets.  We've modified the NPM package so that it provides a minified css file without comments, but collectstatic still collects the other css file.  We've tried Heroku hooks, but collectstatic runs before they do.  A solution that will work is to manually store the files we need in the npm package and remove the npm package, but that's hacky.  Do you guys have any suggestions for how to get around this issue?\r\n\r\nHere's the bug in Django: https://code.djangoproject.com/ticket/21080#comment:7  Its five years old and for whatever reason the Django team has not prioritized resolving it.\r\n\r\nYou're help would be greatly appreciated.  Maybe you could convince the Django team that is an issue of strategic importance, because it essentially makes deploying django apps with modern javascript dependencies to Heroku very difficult.  Whitenoise makes Heroku + Django make sense.  Thanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/180", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/180/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/180/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/180/events", "html_url": "https://github.com/evansd/whitenoise/issues/180", "id": 311139616, "node_id": "MDU6SXNzdWUzMTExMzk2MTY=", "number": 180, "title": "Django 1.11 - ValueError at / Missing staticfiles manifest entry for ''", "user": {"login": "Adamcina", "id": 3274197, "node_id": "MDQ6VXNlcjMyNzQxOTc=", "avatar_url": "https://avatars0.githubusercontent.com/u/3274197?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Adamcina", "html_url": "https://github.com/Adamcina", "followers_url": "https://api.github.com/users/Adamcina/followers", "following_url": "https://api.github.com/users/Adamcina/following{/other_user}", "gists_url": "https://api.github.com/users/Adamcina/gists{/gist_id}", "starred_url": "https://api.github.com/users/Adamcina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Adamcina/subscriptions", "organizations_url": "https://api.github.com/users/Adamcina/orgs", "repos_url": "https://api.github.com/users/Adamcina/repos", "events_url": "https://api.github.com/users/Adamcina/events{/privacy}", "received_events_url": "https://api.github.com/users/Adamcina/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-04T08:51:30Z", "updated_at": "2018-04-04T16:32:45Z", "closed_at": "2018-04-04T16:32:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "My project consists of three separate apps, every one of them is using whitenoise for static files and AWS S3 for serving media files, and every app uses separate settings (appx_settings.py file). Third app is loading some models from the second app (if that matters somehow). \r\nI've been running python 2.7.5 Django 1.9.7 for a while and everything was working perfectly. In the meanwhile i've decided to move on Django 1.11. After upgrading, two of three apps are working fine, while the third one gives me headaches - i constantly get HTTP 500 error, with this line - `ValueError at / Missing staticfiles manifest entry for ''. ` I've been experimenting a lot and i've concluded that whitenoise may be the problem, because with these lines included (in my app3_settings.py):\r\n```\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'project/static/app3') \r\nSTATIC_URL = STATIC_HOST + '/static/'\r\n```\r\ni get `ValueError at / Missing staticfiles manifest entry for ''. ` I've also tried to change `STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'` to `STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'` but that didnt help.\r\nIf i delete those lines and add these instead:\r\n```\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\r\nSTATIC_URL = '/static/'\r\n```\r\neverything works fine. \r\nNormally, i've done `python collectstatic --setings=app3_settings`. Every django/python plugin is updated to the newest version (whitenoise==3.2).\r\nSo, long story short - everything works well under Django 1.9 but after upgrading it to 1.11 (and not touching the settings or anything else) i get HTTP 500 error.\r\nIf you may say that this type of question is not suitable for this forum, sorry for that, i've asked this on [StackOverflow](https://stackoverflow.com/questions/46479378/valueerror-at-missing-staticfiles-manifest-entry-for) 6 months ago, but unfortunately didn't get any answer, so i wanted to ask here if someone knows anything about this issue. Thanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/178", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/178/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/178/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/178/events", "html_url": "https://github.com/evansd/whitenoise/issues/178", "id": 310647857, "node_id": "MDU6SXNzdWUzMTA2NDc4NTc=", "number": 178, "title": "Comment recognition", "user": {"login": "joshua-s", "id": 1479244, "node_id": "MDQ6VXNlcjE0NzkyNDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1479244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshua-s", "html_url": "https://github.com/joshua-s", "followers_url": "https://api.github.com/users/joshua-s/followers", "following_url": "https://api.github.com/users/joshua-s/following{/other_user}", "gists_url": "https://api.github.com/users/joshua-s/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshua-s/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshua-s/subscriptions", "organizations_url": "https://api.github.com/users/joshua-s/orgs", "repos_url": "https://api.github.com/users/joshua-s/repos", "events_url": "https://api.github.com/users/joshua-s/events{/privacy}", "received_events_url": "https://api.github.com/users/joshua-s/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-04-02T23:52:21Z", "updated_at": "2018-04-03T00:15:21Z", "closed_at": "2018-04-03T00:15:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am using the current PyPI version of Whitenoise on Heroku. Perhaps this is an error with my configuration, but all settings related to static files and Whitenoise seem to be vanilla.\r\n\r\nSteps to Reproduce:\r\nUse this library on the frontend: https://github.com/jackocnr/intl-tel-input/\r\n\r\nActual result:\r\nThe deploy is currently failing because of a MissingFileError that occurs when collectstatic tries to follow https://github.com/jackocnr/intl-tel-input/blob/master/build/css/intlTelInput.css#L13\r\n\r\nExpected result:\r\nThis should be ignored because it is within a comment.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/176", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/176/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/176/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/176/events", "html_url": "https://github.com/evansd/whitenoise/issues/176", "id": 303321249, "node_id": "MDU6SXNzdWUzMDMzMjEyNDk=", "number": 176, "title": "Suddenly stopped working on Heroku", "user": {"login": "dbinetti", "id": 161722, "node_id": "MDQ6VXNlcjE2MTcyMg==", "avatar_url": "https://avatars0.githubusercontent.com/u/161722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dbinetti", "html_url": "https://github.com/dbinetti", "followers_url": "https://api.github.com/users/dbinetti/followers", "following_url": "https://api.github.com/users/dbinetti/following{/other_user}", "gists_url": "https://api.github.com/users/dbinetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/dbinetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dbinetti/subscriptions", "organizations_url": "https://api.github.com/users/dbinetti/orgs", "repos_url": "https://api.github.com/users/dbinetti/repos", "events_url": "https://api.github.com/users/dbinetti/events{/privacy}", "received_events_url": "https://api.github.com/users/dbinetti/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-03-08T01:21:18Z", "updated_at": "2018-03-08T01:21:21Z", "closed_at": "2018-03-08T01:21:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "Things suddenly stopped working on Heroku; I know they recently updated their build pack, has anyone else experienced problems?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/175", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/175/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/175/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/175/events", "html_url": "https://github.com/evansd/whitenoise/issues/175", "id": 302586492, "node_id": "MDU6SXNzdWUzMDI1ODY0OTI=", "number": 175, "title": "Dry run with whitenoise", "user": {"login": "braunsonm", "id": 5280764, "node_id": "MDQ6VXNlcjUyODA3NjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/5280764?v=4", "gravatar_id": "", "url": "https://api.github.com/users/braunsonm", "html_url": "https://github.com/braunsonm", "followers_url": "https://api.github.com/users/braunsonm/followers", "following_url": "https://api.github.com/users/braunsonm/following{/other_user}", "gists_url": "https://api.github.com/users/braunsonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/braunsonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/braunsonm/subscriptions", "organizations_url": "https://api.github.com/users/braunsonm/orgs", "repos_url": "https://api.github.com/users/braunsonm/repos", "events_url": "https://api.github.com/users/braunsonm/events{/privacy}", "received_events_url": "https://api.github.com/users/braunsonm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-03-06T07:04:02Z", "updated_at": "2018-03-06T09:43:09Z", "closed_at": "2018-03-06T09:43:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey @evansd, I just had a question I couldn't find an answer to in the docs.\r\n\r\nDoes whitenoise still fail if a static file is missing in a reference while running `collectstatic --dry-run`? According to the Django docs it says it does everything except file operations.\r\n\r\nI wanted to run this on my build server to make sure there are no missing references prior to deploying but running without the dry-run is expensive and time consuming on a build server.\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/172", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/172/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/172/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/172/events", "html_url": "https://github.com/evansd/whitenoise/issues/172", "id": 293947394, "node_id": "MDU6SXNzdWUyOTM5NDczOTQ=", "number": 172, "title": "Flask is not using WhiteNoise when wrapping app.wsgi_app", "user": {"login": "chhantyal", "id": 862941, "node_id": "MDQ6VXNlcjg2Mjk0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/862941?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chhantyal", "html_url": "https://github.com/chhantyal", "followers_url": "https://api.github.com/users/chhantyal/followers", "following_url": "https://api.github.com/users/chhantyal/following{/other_user}", "gists_url": "https://api.github.com/users/chhantyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/chhantyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chhantyal/subscriptions", "organizations_url": "https://api.github.com/users/chhantyal/orgs", "repos_url": "https://api.github.com/users/chhantyal/repos", "events_url": "https://api.github.com/users/chhantyal/events{/privacy}", "received_events_url": "https://api.github.com/users/chhantyal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-02T16:33:49Z", "updated_at": "2018-02-05T09:19:52Z", "closed_at": "2018-02-03T16:39:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I commented here #165, but it's bit different issue.\r\n\r\nI created flask app and wrapped like this:\r\n\r\n`app.wsgi_app = WhiteNoise(app.wsgi_app, root='static/')`\r\n\r\nHowever, Flask is not using whitenoise to serve static files. You can verify this by checking headers in served static files eg:\r\n\r\n```\r\nAccept-Ranges:bytes\r\nCache-Control:public, max-age=43200\r\nContent-Length:22\r\nContent-Type:text/css; charset=utf-8\r\nDate:Fri, 02 Feb 2018 16:31:28 GMT\r\nETag:\"1514995991.0-22-4149482383\"\r\nExpires:Sat, 03 Feb 2018 04:31:28 GMT\r\nLast-Modified:Wed, 03 Jan 2018 16:13:11 GMT\r\nServer:Werkzeug/0.14.1 Python/3.6.4\r\n```\r\nI have a sample application (see `app.py`) here https://github.com/chhantyal/flask-docker\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/170", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/170/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/170/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/170/events", "html_url": "https://github.com/evansd/whitenoise/issues/170", "id": 286813294, "node_id": "MDU6SXNzdWUyODY4MTMyOTQ=", "number": 170, "title": "Some files 404ing in WHITENOISE_ROOT on Heroku", "user": {"login": "philgyford", "id": 66670, "node_id": "MDQ6VXNlcjY2Njcw", "avatar_url": "https://avatars1.githubusercontent.com/u/66670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philgyford", "html_url": "https://github.com/philgyford", "followers_url": "https://api.github.com/users/philgyford/followers", "following_url": "https://api.github.com/users/philgyford/following{/other_user}", "gists_url": "https://api.github.com/users/philgyford/gists{/gist_id}", "starred_url": "https://api.github.com/users/philgyford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philgyford/subscriptions", "organizations_url": "https://api.github.com/users/philgyford/orgs", "repos_url": "https://api.github.com/users/philgyford/repos", "events_url": "https://api.github.com/users/philgyford/events{/privacy}", "received_events_url": "https://api.github.com/users/philgyford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-01-08T17:01:34Z", "updated_at": "2018-01-08T17:35:07Z", "closed_at": "2018-01-08T17:33:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using `WHITENOISE_ROOT` to serve some HTML/image files and it's mostly working wonderfully.\r\n\r\nBut a few files 404 on the site on Heroku (they're fine on my local Vagrant version) and I can't work out why they fail.\r\n\r\ne.g. http://www.gyford.com/japanese/ (index.html) works fine but http://www.gyford.com/japanese/icons/favicon.ico and http://www.gyford.com/japanese/icons/apple-touch-icon.png both 404.\r\n\r\nAnd while http://www.gyford.com/misc/askjeeves/ (index.html) works http://www.gyford.com/misc/mappiness/ (index.html) 404s.\r\n\r\nI can't see what's different about the working and non-working files. My settings are:\r\n\r\n```\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    # ...\r\n]\r\n\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n\r\nSTATIC_ROOT = os.path.join(APPS_DIR, 'static_collected/')\r\n\r\nSTATIC_URL = '/static/'\r\n\r\nSTATICFILES_DIRS = [\r\n    os.path.join(APPS_DIR, 'static'),\r\n]\r\n\r\nWHITENOISE_ROOT = os.path.join(APPS_DIR, 'static_html/')\r\n\r\nWHITENOISE_INDEX_FILE = True\r\n```\r\n\r\n`/japanese/` and `/misc/` are both within the `static_html` directory.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/169", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/169/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/169/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/169/events", "html_url": "https://github.com/evansd/whitenoise/issues/169", "id": 286305549, "node_id": "MDU6SXNzdWUyODYzMDU1NDk=", "number": 169, "title": "Missing staticfiles manifest entry for ...   ico and gif files?", "user": {"login": "KrzysztofMadejski", "id": 849975, "node_id": "MDQ6VXNlcjg0OTk3NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/849975?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KrzysztofMadejski", "html_url": "https://github.com/KrzysztofMadejski", "followers_url": "https://api.github.com/users/KrzysztofMadejski/followers", "following_url": "https://api.github.com/users/KrzysztofMadejski/following{/other_user}", "gists_url": "https://api.github.com/users/KrzysztofMadejski/gists{/gist_id}", "starred_url": "https://api.github.com/users/KrzysztofMadejski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KrzysztofMadejski/subscriptions", "organizations_url": "https://api.github.com/users/KrzysztofMadejski/orgs", "repos_url": "https://api.github.com/users/KrzysztofMadejski/repos", "events_url": "https://api.github.com/users/KrzysztofMadejski/events{/privacy}", "received_events_url": "https://api.github.com/users/KrzysztofMadejski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-05T14:36:46Z", "updated_at": "2018-01-05T14:41:52Z", "closed_at": "2018-01-05T14:41:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Serving static files using Whitenoise fails with:\r\n```\r\nValueError: Missing staticfiles manifest entry for 'img/favicon-kmonitor.ico'\r\nValueError: Missing staticfiles manifest entry for 'img/k-horizontalis_transp.gif'\r\n```\r\nSurprisingly it's working for other img files, it just seems to miss these two. They are the only ico and gif files, but I don't know if it is the reason.\r\n\r\nThat's the repo: https://github.com/themoonsheep/project-assetdeclarations-hungary\r\nI'm running the server with: `project_template.wsgi --access-logfile=- --error-logfile=-` and env variables `DJANGO_SETTINGS_MODULE=project_template.settings.heroku;SECRET_KEY=SECRET_KEY`.\r\n\r\nIt fails when one opens the page. x I'm using `whitenoise==3.3.1`\r\n\r\nCollect static run succesfully:\r\n```\r\nCopying '/home/kmadejski/Projects/moonsheep-ad-hungary/project_template/static/img/favicon-kmonitor.ico'\r\nCopying '/home/kmadejski/Projects/moonsheep-ad-hungary/project_template/static/img/k-horizontalis_transp.gif'\r\n```\r\n  ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/168", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/168/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/168/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/168/events", "html_url": "https://github.com/evansd/whitenoise/issues/168", "id": 285384000, "node_id": "MDU6SXNzdWUyODUzODQwMDA=", "number": 168, "title": "Whitenoise fails on Heroku when different letter cases are used", "user": {"login": "konoufo", "id": 9636748, "node_id": "MDQ6VXNlcjk2MzY3NDg=", "avatar_url": "https://avatars2.githubusercontent.com/u/9636748?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konoufo", "html_url": "https://github.com/konoufo", "followers_url": "https://api.github.com/users/konoufo/followers", "following_url": "https://api.github.com/users/konoufo/following{/other_user}", "gists_url": "https://api.github.com/users/konoufo/gists{/gist_id}", "starred_url": "https://api.github.com/users/konoufo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konoufo/subscriptions", "organizations_url": "https://api.github.com/users/konoufo/orgs", "repos_url": "https://api.github.com/users/konoufo/repos", "events_url": "https://api.github.com/users/konoufo/events{/privacy}", "received_events_url": "https://api.github.com/users/konoufo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-01-02T09:18:53Z", "updated_at": "2018-01-02T09:23:00Z", "closed_at": "2018-01-02T09:23:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "For instance, if a file named LOGO.png lives (after collecstatic) in `staticroot/img` folder and I write in a django template `{% static 'img/logo.png' %}`. I get : \r\n```\r\nValueError at /\r\nMissing staticfiles manifest entry for 'img/logo.png'\r\n```\r\nOn the other hand, `{% static 'img/LOGO.png' %}` works impeccable. I guess this case-sensitivity is not desired behavior ? So far i've tested on a Windows machine and Heroku. Windows doesn't have that problem.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/167", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/167/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/167/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/167/events", "html_url": "https://github.com/evansd/whitenoise/issues/167", "id": 285210493, "node_id": "MDU6SXNzdWUyODUyMTA0OTM=", "number": 167, "title": "Whitenoise processes references in comments", "user": {"login": "Folcon", "id": 123055, "node_id": "MDQ6VXNlcjEyMzA1NQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/123055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Folcon", "html_url": "https://github.com/Folcon", "followers_url": "https://api.github.com/users/Folcon/followers", "following_url": "https://api.github.com/users/Folcon/following{/other_user}", "gists_url": "https://api.github.com/users/Folcon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Folcon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Folcon/subscriptions", "organizations_url": "https://api.github.com/users/Folcon/orgs", "repos_url": "https://api.github.com/users/Folcon/repos", "events_url": "https://api.github.com/users/Folcon/events{/privacy}", "received_events_url": "https://api.github.com/users/Folcon/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-12-30T16:18:37Z", "updated_at": "2018-01-08T10:41:40Z", "closed_at": "2018-01-08T10:41:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\r\nwhitenoise.storage.MissingFileError: The file 'vendor/css/bootstrap/less/variables.less' could not be found with <whitenoise.storage.CompressedManifestStaticFilesStorage object at 0x1069b25c0>.\r\n\r\nThe CSS file 'vendor/css/re-com.css' references a file which could not be found:\r\n  vendor/css/bootstrap/less/variables.less\r\n\r\nPlease check the URL references in this CSS file, particularly any\r\nrelative paths which might be pointing to the wrong location.\r\n```\r\n\r\nEven though the references are in the comments, whitenoise processes it.\r\n\r\nI don't believe this is correct behaviour?\r\n\r\nNote: I've added the txt extension to get github to allow attaching it.\r\n[re-com.css.txt](https://github.com/evansd/whitenoise/files/1594538/re-com.css.txt)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/166", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/166/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/166/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/166/events", "html_url": "https://github.com/evansd/whitenoise/issues/166", "id": 284337496, "node_id": "MDU6SXNzdWUyODQzMzc0OTY=", "number": 166, "title": "Should fail-fast with clear error if root path does not exist", "user": {"login": "javabrett", "id": 1103477, "node_id": "MDQ6VXNlcjExMDM0Nzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1103477?v=4", "gravatar_id": "", "url": "https://api.github.com/users/javabrett", "html_url": "https://github.com/javabrett", "followers_url": "https://api.github.com/users/javabrett/followers", "following_url": "https://api.github.com/users/javabrett/following{/other_user}", "gists_url": "https://api.github.com/users/javabrett/gists{/gist_id}", "starred_url": "https://api.github.com/users/javabrett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/javabrett/subscriptions", "organizations_url": "https://api.github.com/users/javabrett/orgs", "repos_url": "https://api.github.com/users/javabrett/repos", "events_url": "https://api.github.com/users/javabrett/events{/privacy}", "received_events_url": "https://api.github.com/users/javabrett/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-12-24T01:57:37Z", "updated_at": "2018-07-12T22:43:48Z", "closed_at": "2018-07-12T22:43:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Some behavioural changes can be observed when moving to Python 3.5+ when `scandir` becomes-available, as used in [`scantree.py`](https://github.com/evansd/whitenoise/blob/master/whitenoise/scantree.py#L19).\r\n\r\n`os.walk()` was forgiving of a non-existent root, but `os.scandir()` is not.\r\n\r\nIt is not clear whether Whitenoise should fail-fast if it is passed a `root` that does not exist, but that seems reasonable.  Either way the behaviour should be consistent regardless of whether `scandir` is present or not.\r\n\r\n/cc https://github.com/kennethreitz/httpbin/issues/403", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/165", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/165/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/165/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/165/events", "html_url": "https://github.com/evansd/whitenoise/issues/165", "id": 284214593, "node_id": "MDU6SXNzdWUyODQyMTQ1OTM=", "number": 165, "title": "WhiteNoise integration with Flask", "user": {"login": "fernandobohrer", "id": 9141950, "node_id": "MDQ6VXNlcjkxNDE5NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/9141950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fernandobohrer", "html_url": "https://github.com/fernandobohrer", "followers_url": "https://api.github.com/users/fernandobohrer/followers", "following_url": "https://api.github.com/users/fernandobohrer/following{/other_user}", "gists_url": "https://api.github.com/users/fernandobohrer/gists{/gist_id}", "starred_url": "https://api.github.com/users/fernandobohrer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fernandobohrer/subscriptions", "organizations_url": "https://api.github.com/users/fernandobohrer/orgs", "repos_url": "https://api.github.com/users/fernandobohrer/repos", "events_url": "https://api.github.com/users/fernandobohrer/events{/privacy}", "received_events_url": "https://api.github.com/users/fernandobohrer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-12-22T17:28:42Z", "updated_at": "2018-02-02T15:21:29Z", "closed_at": "2017-12-24T16:53:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there,\r\n\r\nI've followed the Flask basic startup guide and tried to integrate my Flask app with WhiteNoise. After changing the app configuration as the WhiteNoise documentation suggests, wheneaver I try to run the app, the following error shows up:\r\n\r\n```\r\n(.venv) bohrer@1VCS442 ~/dev/flask_experiment/flask_experiment $ python app.py \r\nTraceback (most recent call last):\r\n  File \"app.py\", line 9, in <module>\r\n    @app.route('/')\r\nAttributeError: 'WhiteNoise' object has no attribute 'route'\r\n```\r\nThe code is available here: https://github.com/fernandobohrer/flask_experiment/blob/master/flask_experiment/app.py\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/164", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/164/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/164/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/164/events", "html_url": "https://github.com/evansd/whitenoise/issues/164", "id": 280822508, "node_id": "MDU6SXNzdWUyODA4MjI1MDg=", "number": 164, "title": "WhiteNoise + Lambda + Zappa", "user": {"login": "efimerdlerkravitz", "id": 33550454, "node_id": "MDQ6VXNlcjMzNTUwNDU0", "avatar_url": "https://avatars2.githubusercontent.com/u/33550454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efimerdlerkravitz", "html_url": "https://github.com/efimerdlerkravitz", "followers_url": "https://api.github.com/users/efimerdlerkravitz/followers", "following_url": "https://api.github.com/users/efimerdlerkravitz/following{/other_user}", "gists_url": "https://api.github.com/users/efimerdlerkravitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/efimerdlerkravitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efimerdlerkravitz/subscriptions", "organizations_url": "https://api.github.com/users/efimerdlerkravitz/orgs", "repos_url": "https://api.github.com/users/efimerdlerkravitz/repos", "events_url": "https://api.github.com/users/efimerdlerkravitz/events{/privacy}", "received_events_url": "https://api.github.com/users/efimerdlerkravitz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-12-10T16:30:01Z", "updated_at": "2019-04-16T11:17:42Z", "closed_at": "2017-12-11T13:38:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello Guys,\r\n\r\nWe are using Zappa + Django in AWS Lambda. I really like the idea of using whitenoise, at least for serving our Django admin pages, it sounds to me like a simple solution that does not require a lot of configuration (like similar S3 solutions).\r\n\r\nI followed the tutorial and tried the following with no avail:\r\n\r\n```\r\nsettings.py\r\n-----------\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\r\n\r\n$ zappa manage production collectstatic\r\n...\r\nerror stack\r\n...\r\nRead-only file system: '/var/task/staticfiles'\r\n```\r\n\r\nWell makes sense, from what I know the only writeable directory is /tmp so I tried\r\n```\r\nSTATIC_URL = '/static/'\r\nSTATIC_ROOT = /tmp/staticfiles'\r\n...\r\n\r\n$ zappa manage production collectstatic\r\n\r\n61 static files copied to '/tmp/staticfiles'.\r\n[END] RequestId: 4b9c1c60-ddc4-11e7-a97d-e193c05b0571\r\n[REPORT] RequestId: 4b9c1c60-ddc4-11e7-a97d-e193c05b0571\r\nDuration: 77.20 ms\r\nBilled Duration: 100 ms\r\nMemory Size: 512 MB\r\nMax Memory Used: 44 MB\r\n```\r\n\r\nWhen go to `my-site.com/admin` I'm getting 403 when trying to retrieve the resources which again makes sense.\r\n\r\nSo what is the correct way to implement it ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/163", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/163/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/163/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/163/events", "html_url": "https://github.com/evansd/whitenoise/issues/163", "id": 277868133, "node_id": "MDU6SXNzdWUyNzc4NjgxMzM=", "number": 163, "title": "Whitenoise Storage backend problems in Django 1.11.7", "user": {"login": "phcerdan", "id": 3021667, "node_id": "MDQ6VXNlcjMwMjE2Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3021667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phcerdan", "html_url": "https://github.com/phcerdan", "followers_url": "https://api.github.com/users/phcerdan/followers", "following_url": "https://api.github.com/users/phcerdan/following{/other_user}", "gists_url": "https://api.github.com/users/phcerdan/gists{/gist_id}", "starred_url": "https://api.github.com/users/phcerdan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phcerdan/subscriptions", "organizations_url": "https://api.github.com/users/phcerdan/orgs", "repos_url": "https://api.github.com/users/phcerdan/repos", "events_url": "https://api.github.com/users/phcerdan/events{/privacy}", "received_events_url": "https://api.github.com/users/phcerdan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-11-29T18:58:00Z", "updated_at": "2018-07-21T15:16:19Z", "closed_at": "2018-07-21T15:16:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Following [whitenoise docs](http://whitenoise.evans.io/en/stable/django.html#troubleshooting-the-whitenoise-storage-backend), I am reporting that changing the storage backend from:\r\n```\r\n# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n# Django default for debugging: http://whitenoise.evans.io/en/stable/django.html#troubleshooting-the-whitenoise-storage-backend\r\nSTATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'\r\n```\r\nsolved error (status=500) not finding some staticfiles (css). This only happened in production (heroku) when visiting the site, collectstatic was ok.\r\n\r\nI am using:\r\n```\r\nDjango=1.11.7\r\nwhitenoise=3.3.1\r\n```\r\n\r\nJust reporting, let me know if I can help, or provide more info. Error attached.\r\n[delete_me.txt](https://github.com/evansd/whitenoise/files/1515116/delete_me.txt)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/162", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/162/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/162/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/162/events", "html_url": "https://github.com/evansd/whitenoise/issues/162", "id": 277602147, "node_id": "MDU6SXNzdWUyNzc2MDIxNDc=", "number": 162, "title": "nginx with whitenoise", "user": {"login": "geasyheart", "id": 11239531, "node_id": "MDQ6VXNlcjExMjM5NTMx", "avatar_url": "https://avatars1.githubusercontent.com/u/11239531?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geasyheart", "html_url": "https://github.com/geasyheart", "followers_url": "https://api.github.com/users/geasyheart/followers", "following_url": "https://api.github.com/users/geasyheart/following{/other_user}", "gists_url": "https://api.github.com/users/geasyheart/gists{/gist_id}", "starred_url": "https://api.github.com/users/geasyheart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geasyheart/subscriptions", "organizations_url": "https://api.github.com/users/geasyheart/orgs", "repos_url": "https://api.github.com/users/geasyheart/repos", "events_url": "https://api.github.com/users/geasyheart/events{/privacy}", "received_events_url": "https://api.github.com/users/geasyheart/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-11-29T01:52:58Z", "updated_at": "2017-11-29T13:17:57Z", "closed_at": "2017-11-29T13:17:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "Maybe Django cannot serving static files when debug=False, So i use whitenoise to serving django-rest-framework static files,without nginx evenything work well, but with nginx all static file through nginx,here is my settings:\r\n\r\n1. Django \r\n```\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'backend_static')\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n\r\nSTATIC_HOST = os.environ.get('ROOT_SERVER_STATIC_HOST', '')\r\nSTATIC_URL = STATIC_HOST + '/backend_static/'\r\n\r\n```\r\n\r\n2. Nginx\r\n\r\n```\r\n    #location ^~ /backend_static/ {\r\n    #    root /home/workspace/test/django_with_restframework/;\r\n    #}\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/161", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/161/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/161/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/161/events", "html_url": "https://github.com/evansd/whitenoise/issues/161", "id": 276160234, "node_id": "MDU6SXNzdWUyNzYxNjAyMzQ=", "number": 161, "title": "Django 1.11 support", "user": {"login": "scotu", "id": 868, "node_id": "MDQ6VXNlcjg2OA==", "avatar_url": "https://avatars3.githubusercontent.com/u/868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scotu", "html_url": "https://github.com/scotu", "followers_url": "https://api.github.com/users/scotu/followers", "following_url": "https://api.github.com/users/scotu/following{/other_user}", "gists_url": "https://api.github.com/users/scotu/gists{/gist_id}", "starred_url": "https://api.github.com/users/scotu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scotu/subscriptions", "organizations_url": "https://api.github.com/users/scotu/orgs", "repos_url": "https://api.github.com/users/scotu/repos", "events_url": "https://api.github.com/users/scotu/events{/privacy}", "received_events_url": "https://api.github.com/users/scotu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-22T18:04:22Z", "updated_at": "2017-11-22T18:15:42Z", "closed_at": "2017-11-22T18:15:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, \r\n\r\nI have a couple of questions about the status of django 1.11 support:\r\n\r\n* I see that the v4 beta adds explicit support for it and I was wondering if there is a timeline for a final release\r\n* I can't see any open issues raised about 1.11 support and wonder if anybody is running on 1.11 successfully with the latest stable release\r\n\r\nthanks for your answers and for the work on whitenoise!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/159", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/159/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/159/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/159/events", "html_url": "https://github.com/evansd/whitenoise/issues/159", "id": 274023593, "node_id": "MDU6SXNzdWUyNzQwMjM1OTM=", "number": 159, "title": "Whitenose doesn't cache .css files compiled with django-sass-processor", "user": {"login": "lsnk", "id": 2228806, "node_id": "MDQ6VXNlcjIyMjg4MDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2228806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lsnk", "html_url": "https://github.com/lsnk", "followers_url": "https://api.github.com/users/lsnk/followers", "following_url": "https://api.github.com/users/lsnk/following{/other_user}", "gists_url": "https://api.github.com/users/lsnk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lsnk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lsnk/subscriptions", "organizations_url": "https://api.github.com/users/lsnk/orgs", "repos_url": "https://api.github.com/users/lsnk/repos", "events_url": "https://api.github.com/users/lsnk/events{/privacy}", "received_events_url": "https://api.github.com/users/lsnk/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-11-15T03:33:10Z", "updated_at": "2018-07-21T15:15:47Z", "closed_at": "2018-07-21T15:15:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, I'm using whitenoise on Heroku with caching and everything is fine: page is rendered fine, all .js files use cached versions (like js/menu.b8a7e331f3f0.js) for example. All .css files are also use cached versions except two files (base_style.css and style.css), which must be compiled by django-sass-processor (there are no such files inside project git repo, only scss ones).\r\n\r\nI have heroku pre-compile script:\r\n```\r\npython manage.py compilescss\r\npython manage.py collectstatic --noinput\r\n```\r\n\r\nWhich compiles my css into /static/ folder first and then collects all the static into /staticfiles/ dir.\r\n\r\nI can see all needed files I believe:\r\n```\r\nbase_style.5b54f53f7ab5.scss     base_style.css     base_style.daaa12ce41fb.css     base_style.scss     style.15249cb1dc11.css     style.901a541104a5.scss.br  style.css.br   style.scss.gz\r\nbase_style.5b54f53f7ab5.scss.br  base_style.css.br  base_style.daaa12ce41fb.css.br  base_style.scss.br  style.15249cb1dc11.css.br  style.901a541104a5.scss.gz  style.scss\r\nbase_style.5b54f53f7ab5.scss.gz  base_style.css.gz  base_style.daaa12ce41fb.css.gz  base_style.scss.gz  style.901a541104a5.scss    style.css                   style.scss.br\r\n```\r\nInside a proper directory inside /staticfiles/ but on a browser page whitenoise uses uncached version of them (base_style.css and style.css instead of base_style.daaa12ce41fb.css and style.15249cb1dc11.css respectively)\r\n\r\nCan I correct this behavior? \r\nBest Regards.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/157", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/157/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/157/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/157/events", "html_url": "https://github.com/evansd/whitenoise/issues/157", "id": 265840440, "node_id": "MDU6SXNzdWUyNjU4NDA0NDA=", "number": 157, "title": "'WhiteNoise' object has no attribute 'config'", "user": {"login": "joshlsullivan", "id": 6425587, "node_id": "MDQ6VXNlcjY0MjU1ODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6425587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshlsullivan", "html_url": "https://github.com/joshlsullivan", "followers_url": "https://api.github.com/users/joshlsullivan/followers", "following_url": "https://api.github.com/users/joshlsullivan/following{/other_user}", "gists_url": "https://api.github.com/users/joshlsullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshlsullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshlsullivan/subscriptions", "organizations_url": "https://api.github.com/users/joshlsullivan/orgs", "repos_url": "https://api.github.com/users/joshlsullivan/repos", "events_url": "https://api.github.com/users/joshlsullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/joshlsullivan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-16T16:53:33Z", "updated_at": "2017-10-20T15:36:56Z", "closed_at": "2017-10-20T15:36:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I receive the error `'WhiteNoise' object has no attribute 'config'`. Any ideas?\r\n\r\n```\r\napp = WhiteNoise(Flask(__name__), root='static/')\r\napp.secret_key = os.urandom(24)\r\napp.config['SQLALCHEMY_DATABASE_URI'] = os.environ['DATABASE_URL']\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\ndb = SQLAlchemy(app)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/156", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/156/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/156/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/156/events", "html_url": "https://github.com/evansd/whitenoise/issues/156", "id": 265275905, "node_id": "MDU6SXNzdWUyNjUyNzU5MDU=", "number": 156, "title": "PATH_INFO is optional", "user": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-13T12:42:39Z", "updated_at": "2018-07-16T21:23:17Z", "closed_at": "2018-07-16T21:05:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Just had a request throw a `KeyError` from `WhiteNoise.__call__` https://github.com/evansd/whitenoise/blob/master/whitenoise/base.py#L68 when getting `PATH_INFO` from the environment. \r\n\r\nWas trying to figure out if the issue was the server (uwsgi) or whitehoise. From reading the wsgi pep it seems the key is optional when the value is a blank string, so maybe whitenoise should handle this?\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/154", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/154/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/154/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/154/events", "html_url": "https://github.com/evansd/whitenoise/issues/154", "id": 262064748, "node_id": "MDU6SXNzdWUyNjIwNjQ3NDg=", "number": 154, "title": "Recommend Brotli instead of brotlipy?", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-10-02T12:12:18Z", "updated_at": "2018-07-21T14:49:16Z", "closed_at": "2018-07-21T14:49:16Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "When Brotli support was first added to WhiteNoise, if I remember correctly, the official brotli repo did not yet have its own Python package/bindings. As such, the WhiteNoise docs recommend using [brotlipy](https://pypi.python.org/pypi/brotlipy).\r\n\r\nHowever there's now the official Python package, [Brotli](https://pypi.python.org/pypi/Brotli), which I've been using with WhiteNoise for a while.\r\n\r\nUnless there are good reasons to stick with the unofficial bindings, I think we should update the WhiteNoise docs to point people at the `Brotli` package instead.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/152", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/152/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/152/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/152/events", "html_url": "https://github.com/evansd/whitenoise/issues/152", "id": 261980783, "node_id": "MDU6SXNzdWUyNjE5ODA3ODM=", "number": 152, "title": "Question about speeding up tests", "user": {"login": "oTree-org", "id": 5423929, "node_id": "MDQ6VXNlcjU0MjM5Mjk=", "avatar_url": "https://avatars3.githubusercontent.com/u/5423929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oTree-org", "html_url": "https://github.com/oTree-org", "followers_url": "https://api.github.com/users/oTree-org/followers", "following_url": "https://api.github.com/users/oTree-org/following{/other_user}", "gists_url": "https://api.github.com/users/oTree-org/gists{/gist_id}", "starred_url": "https://api.github.com/users/oTree-org/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oTree-org/subscriptions", "organizations_url": "https://api.github.com/users/oTree-org/orgs", "repos_url": "https://api.github.com/users/oTree-org/repos", "events_url": "https://api.github.com/users/oTree-org/events{/privacy}", "received_events_url": "https://api.github.com/users/oTree-org/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-10-02T04:34:14Z", "updated_at": "2017-10-02T14:17:12Z", "closed_at": "2017-10-02T08:17:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a Django project with about 200 test methods, many of which test my views and loading pages. When I run my Django test suite, it takes 30 seconds to complete. cProfile shows that 9 seconds are spent in `whitenoise.base.add_files` and `whitenoise.base.update_files_dictionary`. 91 calls are made to each of those functions. Is this to be expected with a test suite like mine? Is there a way to speed this up?\r\n\r\nMy tests already set Django's DEBUG setting to False.\r\n\r\nI'm using Django 1.8.8, Whitenoise 3.2.1/3.3.1, and Python 3.6.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/151", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/151/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/151/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/151/events", "html_url": "https://github.com/evansd/whitenoise/issues/151", "id": 259763469, "node_id": "MDU6SXNzdWUyNTk3NjM0Njk=", "number": 151, "title": "Immutability Issue w/ CDN", "user": {"login": "lskillen", "id": 2248287, "node_id": "MDQ6VXNlcjIyNDgyODc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2248287?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lskillen", "html_url": "https://github.com/lskillen", "followers_url": "https://api.github.com/users/lskillen/followers", "following_url": "https://api.github.com/users/lskillen/following{/other_user}", "gists_url": "https://api.github.com/users/lskillen/gists{/gist_id}", "starred_url": "https://api.github.com/users/lskillen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lskillen/subscriptions", "organizations_url": "https://api.github.com/users/lskillen/orgs", "repos_url": "https://api.github.com/users/lskillen/repos", "events_url": "https://api.github.com/users/lskillen/events{/privacy}", "received_events_url": "https://api.github.com/users/lskillen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-09-22T09:56:15Z", "updated_at": "2017-09-25T11:26:23Z", "closed_at": "2017-09-23T17:16:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello - First of all, thank you for developing and maintaining whitenoise. Making the leap from an S3-based storage to whitenoise proved to solve *many* headaches, and has only introduced some very minor ones in the process. ;-) We love it!\r\n\r\nWe're currently experiencing an issue with 3.3.0 not being able to determine that a static file is immutable when it actually is. I've done a bit of digging into this and it looks like it's because our public facing URL doesn't have the static prefix in it.\r\n\r\nOur setup:\r\n\r\n- CDN:\r\n  - Public URL: `https://foo/path/to/asset.abc123.js`\r\n  - Origin URL: `https://foo/static/path/to/asset.abc123.js`\r\n\r\n- Django:\r\n  - STATIC_URL: `https://foo/`\r\n  - WHITENOISE_STATIC_PREFIX: `/static/`\r\n\r\n[The whitenoise code](https://github.com/evansd/whitenoise/blob/bc8fe1edb7a350607b2d40104d3ce9b8e2e22b16/whitenoise/django.py#L98-L102) that evaluates to the immutability test to False:\r\n\r\n```\r\n        # If the static URL function maps the name without hash\r\n        # back to the original URL, then we know we've got a\r\n        # versioned filename\r\n        if static_url and static_url.endswith(url):\r\n            return True\r\n```\r\n\r\nI note that the code remains the same on the 4.0 release candidates, so this is probably a good time to reconsider this. It seems like the code should either only be looking at the `basename` for the file when performing the check, or perhaps it should integrate the `WHITENOISE_STATIC_PREFIX` value into the url prior to checking. Thoughts?\r\n\r\nThis is currently making our production website not cache assets for more than 60 seconds, so we'll probably put *some* sort-of fix in today, but it'd be great to get a permanent fix in too. :-)\r\n\r\nThanks!\r\n\r\n*Update1:* We've got a [very simple bugfix available on our fork](https://github.com/cloudsmith-io/whitenoise/commit/aaf3758185129f4e48e4c83759f8271b7dfd5e87). We could turn this into a PR for 4.0 but until it's released a hotfix for 3.3.0 would be fantastic too. :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/150", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/150/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/150/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/150/events", "html_url": "https://github.com/evansd/whitenoise/issues/150", "id": 258342796, "node_id": "MDU6SXNzdWUyNTgzNDI3OTY=", "number": 150, "title": "CompressedStaticFilesMixin compresses each CSS file multiple times", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-09-17T23:09:07Z", "updated_at": "2018-07-16T21:10:22Z", "closed_at": "2018-07-16T21:10:22Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I noticed as part of #148 (by modifying `CompressedStaticFilesMixin` so that it passes `quiet=False` to `Compressor` to give more log output) that CSS files are run through the compressor multiple times:\r\n```\r\n$ ./manage.py collectstatic --noinput -v 3 > collectstatic.log\r\n$ grep -e 'Brotli compressed .*\\.css ' collectstatic.log | sort\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/base.31652d31b392.css (15K -> 3K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/base.6b517d0d5813.css (15K -> 3K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/base.6b517d0d5813.css (15K -> 3K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/base.css (15K -> 3K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/base.css (15K -> 3K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/base.css (15K -> 3K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/changelists.css (6K -> 1K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/changelists.css (6K -> 1K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/changelists.css (6K -> 1K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/changelists.f6dc691f8d62.css (6K -> 1K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/changelists.f6dc691f8d62.css (6K -> 1K)\r\nBrotli compressed /home/vagrant/test/test/static/admin/css/changelists.f6dc691f8d62.css (6K -> 1K)\r\n...\r\n```\r\n\r\nThis is due to a bug in Django's `HashedFilesMixin`, for which I've filed an upstream issue:\r\nhttps://code.djangoproject.com/ticket/28607\r\n\r\nThe upstream bug only affects \"adjustable files\" (ie files that `HashedFilesMixin` has to do a second pass on, in case they cross-reference other files that have been hashed, so might need renaming with a new hash) - which currently is just *.css. However it still has a significant impact on the number of compressions performed:\r\n```\r\n$ grep 'Brotli compressed' collectstatic.log | wc -l\r\n370\r\n$ grep 'Brotli compressed' collectstatic.log | sort -u | wc -l\r\n276\r\n```\r\n\r\nEven though this is due to an upstream bug, it would be good to work around it in the meantime.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/147", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/147/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/147/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/147/events", "html_url": "https://github.com/evansd/whitenoise/issues/147", "id": 258116368, "node_id": "MDU6SXNzdWUyNTgxMTYzNjg=", "number": 147, "title": "Try to work around leftover intermediate ManifestStaticFilesStorage files", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-15T17:52:14Z", "updated_at": "2018-06-03T14:41:07Z", "closed_at": "2018-06-03T14:41:07Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The stock Django `ManifestStaticFilesStorage` storage back-end has to loop through the files several times when creating the hashed versions to try and handle nested/circular dependencies. Currently this results in intermediate files being left behind, for example looking at `contrib.admin`'s output:\r\n```\r\ncss/base.31652d31b392.css\r\ncss/base.5af66c1b1797.css\r\ncss/base.6b517d0d5813.css\r\ncss/base.css\r\n...\r\n```\r\n\r\nThis is currently unavoidable on Django's side until at least Django 3.0 ([see here](https://groups.google.com/forum/#!topic/django-developers/fmfQvuHBStk)).\r\n\r\nWhen using WhiteNoise's `CompressedManifestStaticFilesStorage` (from current master, 9d3ad51f7f05e5391ec6f2f03211d958a08e374f) , the resultant `base.css` related files are:\r\n```\r\ncss/base.31652d31b392.css\r\ncss/base.31652d31b392.css.br\r\ncss/base.31652d31b392.css.gz\r\ncss/base.5af66c1b1797.css\r\ncss/base.6b517d0d5813.css\r\ncss/base.6b517d0d5813.css.br\r\ncss/base.6b517d0d5813.css.gz\r\ncss/base.css\r\ncss/base.css.br\r\ncss/base.css.gz\r\n```\r\n\r\nAnd even with `WHITENOISE_KEEP_ONLY_HASHED_FILES` set to `True`, there are still many redundant files:\r\n```\r\ncss/base.31652d31b392.css\r\ncss/base.31652d31b392.css.br\r\ncss/base.31652d31b392.css.gz\r\ncss/base.5af66c1b1797.css\r\ncss/base.6b517d0d5813.css\r\ncss/base.6b517d0d5813.css.br\r\ncss/base.6b517d0d5813.css.gz\r\n```\r\n\r\nCompare this to the file list in `staticfiles.json`, which only has one `base.css` related entry:\r\n```\r\n{\r\n    \"admin/css/base.css\": \"admin/css/base.6b517d0d5813.css\",\r\n    ...\r\n}\r\n```\r\n\r\nIt would be great if `CompressedManifestStaticFilesStorage` could try and remove these intermediate files and in the example above only keep `base.6b517d0d5813.css{,.bz,.gz}`.\r\n\r\nAlso, I can't figure out why only some of the intermediate files get the compressed versions rather than all or none? For example `base.5af66c1b1797.css` doesn't get compressed versions. Bit strange.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/146", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/146/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/146/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/146/events", "html_url": "https://github.com/evansd/whitenoise/issues/146", "id": 258004554, "node_id": "MDU6SXNzdWUyNTgwMDQ1NTQ=", "number": 146, "title": "Enable WHITENOISE_KEEP_ONLY_HASHED_FILES by default", "user": {"login": "edmorley", "id": 501702, "node_id": "MDQ6VXNlcjUwMTcwMg==", "avatar_url": "https://avatars3.githubusercontent.com/u/501702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edmorley", "html_url": "https://github.com/edmorley", "followers_url": "https://api.github.com/users/edmorley/followers", "following_url": "https://api.github.com/users/edmorley/following{/other_user}", "gists_url": "https://api.github.com/users/edmorley/gists{/gist_id}", "starred_url": "https://api.github.com/users/edmorley/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edmorley/subscriptions", "organizations_url": "https://api.github.com/users/edmorley/orgs", "repos_url": "https://api.github.com/users/edmorley/repos", "events_url": "https://api.github.com/users/edmorley/events{/privacy}", "received_events_url": "https://api.github.com/users/edmorley/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-15T11:06:29Z", "updated_at": "2018-07-16T21:07:37Z", "closed_at": "2018-07-16T21:07:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "WhiteNoise 4 adds a `WHITENOISE_KEEP_ONLY_HASHED_FILES` option, which causes the non-hashed files to be deleted. Given this is a major version bump release that's not yet come out of beta, I wondered whether the option should be set to `True` by default instead of the current `False` - so that WhiteNoise does the most efficient thing out of the box?\r\n\r\nI was also thinking it would be good to upstream this behaviour - seems like there is a good chance it would be accepted:\r\nhttps://code.djangoproject.com/ticket/27929", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/145", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/145/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/145/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/145/events", "html_url": "https://github.com/evansd/whitenoise/issues/145", "id": 255691832, "node_id": "MDU6SXNzdWUyNTU2OTE4MzI=", "number": 145, "title": "MIDDLEWARE order", "user": {"login": "philgyford", "id": 66670, "node_id": "MDQ6VXNlcjY2Njcw", "avatar_url": "https://avatars1.githubusercontent.com/u/66670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philgyford", "html_url": "https://github.com/philgyford", "followers_url": "https://api.github.com/users/philgyford/followers", "following_url": "https://api.github.com/users/philgyford/following{/other_user}", "gists_url": "https://api.github.com/users/philgyford/gists{/gist_id}", "starred_url": "https://api.github.com/users/philgyford/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philgyford/subscriptions", "organizations_url": "https://api.github.com/users/philgyford/orgs", "repos_url": "https://api.github.com/users/philgyford/repos", "events_url": "https://api.github.com/users/philgyford/events{/privacy}", "received_events_url": "https://api.github.com/users/philgyford/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-09-06T17:59:33Z", "updated_at": "2018-07-23T10:50:46Z", "closed_at": "2018-07-21T15:14:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "The docs say that `WhiteNoiseMiddleware` should come after Django's `SecurityMiddleware`, but don't refer to any or Django's other middlewares. So *maybe* it doesn't matter, but some other middlewares have specific instructions and I'm not sure if they're relevant.\r\n\r\nFor example `django.middleware.cache.UpdateCacheMiddleware` \"must be before those that modify the `Vary` header\" - does Whitenoise do that?\r\n\r\nAnd `django.middleware.gzip.GZipMiddleware` must go \"before any middleware that may change or use the response body\". Again, is that Whitenoise?\r\n\r\nApologies for my ignorance, but without delving into the gritty details of how these things work I'm not sure if I'm setting things up correctly.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/144", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/144/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/144/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/144/events", "html_url": "https://github.com/evansd/whitenoise/issues/144", "id": 253127361, "node_id": "MDU6SXNzdWUyNTMxMjczNjE=", "number": 144, "title": "Whitenoise problems with DEBUG=False", "user": {"login": "racitup", "id": 18157195, "node_id": "MDQ6VXNlcjE4MTU3MTk1", "avatar_url": "https://avatars2.githubusercontent.com/u/18157195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/racitup", "html_url": "https://github.com/racitup", "followers_url": "https://api.github.com/users/racitup/followers", "following_url": "https://api.github.com/users/racitup/following{/other_user}", "gists_url": "https://api.github.com/users/racitup/gists{/gist_id}", "starred_url": "https://api.github.com/users/racitup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/racitup/subscriptions", "organizations_url": "https://api.github.com/users/racitup/orgs", "repos_url": "https://api.github.com/users/racitup/repos", "events_url": "https://api.github.com/users/racitup/events{/privacy}", "received_events_url": "https://api.github.com/users/racitup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-08-26T22:36:31Z", "updated_at": "2017-08-27T17:20:26Z", "closed_at": "2017-08-27T17:20:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm a bit stumped having tried to get whitenoise working for a few days now. I'm testing locally with gunicorn before I deploy to Heroku. I've followed all the guides I could find about Django and whitenoise but with no luck and hope someone can help.\r\n\r\nThe pruned **config** (let me know if there's anything else might be involved):\r\n```\r\nMIDDLEWARE_CLASSES = [\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    ...\r\nSTATIC_URL = '/static/'\r\nDEBUG = False\r\nALLOWED_HOSTS = ['127.0.0.1', '127.0.0.1:8000']\r\nSTATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static_public', 'static')\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n```\r\n\r\nThe **process**:\r\n```\r\n./manage.py collectstatic\r\ngunicorn myapp.wsgi\r\n<browser to http://127.0.0.1:8000>\r\n```\r\n\r\nWhat **happens**:\r\n\r\n- Collectstatic gathers all the files okay and they are visible in the right directory:\r\n`2855 static files copied to '/Users/rich/Documents/source/heroku-test/static_public/static', 2855 post-processed.`\r\n- A partially rendered page and browser console 404 errors for GETs matching those below\r\n- The static folder also has a CACHE directory which contains all of the \"Not found\" files below which appear to be created as they are accessed\r\n- If I browse to one of the \"Not found\" files directly, sometimes they appear, sometimes not. It seems to be related to waiting a minute or two before trying to access the file.\r\n\r\nThe gunicorn **console**:\r\n> [2017-08-26 23:16:59 +0100] [20019] [INFO] Starting gunicorn 19.6.0\r\n> [2017-08-26 23:16:59 +0100] [20019] [INFO] Listening at: http://127.0.0.1:8000 (20019)\r\n> [2017-08-26 23:16:59 +0100] [20019] [INFO] Using worker: sync\r\n> [2017-08-26 23:16:59 +0100] [20036] [INFO] Booting worker with pid: 20036\r\n> [2017-08-26 23:17:27,518 django.request] WARNING: Not Found: /\r\n> [2017-08-26 23:17:27,815 django.request] WARNING: Not Found: /static/CACHE/js/15656dcc525b.js\r\n> [2017-08-26 23:18:12,285 django.request] WARNING: Not Found: /\r\n> [2017-08-26 23:18:12,498 django.request] WARNING: Not Found: /static/CACHE/js/24e0a4ecdb71.js\r\n\r\nCould this be some weird interaction with the Django cache? I've left the Django cache backend setting at the default.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/141", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/141/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/141/events", "html_url": "https://github.com/evansd/whitenoise/issues/141", "id": 251588532, "node_id": "MDU6SXNzdWUyNTE1ODg1MzI=", "number": 141, "title": "Make whitenoise faster", "user": {"login": "ionelmc", "id": 129501, "node_id": "MDQ6VXNlcjEyOTUwMQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/129501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ionelmc", "html_url": "https://github.com/ionelmc", "followers_url": "https://api.github.com/users/ionelmc/followers", "following_url": "https://api.github.com/users/ionelmc/following{/other_user}", "gists_url": "https://api.github.com/users/ionelmc/gists{/gist_id}", "starred_url": "https://api.github.com/users/ionelmc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ionelmc/subscriptions", "organizations_url": "https://api.github.com/users/ionelmc/orgs", "repos_url": "https://api.github.com/users/ionelmc/repos", "events_url": "https://api.github.com/users/ionelmc/events{/privacy}", "received_events_url": "https://api.github.com/users/ionelmc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-21T08:43:31Z", "updated_at": "2018-07-16T21:11:11Z", "closed_at": "2018-07-16T21:11:11Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I would like to hear your thoughts on this topic before doing anything. Do you think it be possible to get responses under 50ms with whitenoise on cpython?\r\n\r\nMost obvious thing that can be improved would be removing/avoiding unnecessary function calls, but then comes the question of what is part of the public api, and what doesn't need to be extensible. Do you have any guidelines regarding this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/138", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/138/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/138/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/138/events", "html_url": "https://github.com/evansd/whitenoise/issues/138", "id": 243169635, "node_id": "MDU6SXNzdWUyNDMxNjk2MzU=", "number": 138, "title": "4.0 Brotli compression is never used", "user": {"login": "fuwaneko", "id": 34433, "node_id": "MDQ6VXNlcjM0NDMz", "avatar_url": "https://avatars0.githubusercontent.com/u/34433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuwaneko", "html_url": "https://github.com/fuwaneko", "followers_url": "https://api.github.com/users/fuwaneko/followers", "following_url": "https://api.github.com/users/fuwaneko/following{/other_user}", "gists_url": "https://api.github.com/users/fuwaneko/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuwaneko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuwaneko/subscriptions", "organizations_url": "https://api.github.com/users/fuwaneko/orgs", "repos_url": "https://api.github.com/users/fuwaneko/repos", "events_url": "https://api.github.com/users/fuwaneko/events{/privacy}", "received_events_url": "https://api.github.com/users/fuwaneko/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-15T11:20:52Z", "updated_at": "2017-07-15T12:44:30Z", "closed_at": "2017-07-15T12:44:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Due to regular expression mismatch, instead of \"brotli\" it should match to \"br\" in header.\r\n\r\nExpression compiles [here](https://github.com/evansd/whitenoise/blob/master/whitenoise/responders.py#L162), matches [here](https://github.com/evansd/whitenoise/blob/master/whitenoise/responders.py#L180). But StaticFile is constructed with \"brotli\" as encoding, instead of \"br\" \u2014 [here](https://github.com/evansd/whitenoise/blob/master/whitenoise/base.py#L191).\r\n\r\nI also wonder why there's no best compression selection mechanism, it seems code just uses the first match.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/137", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/137/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/137/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/137/events", "html_url": "https://github.com/evansd/whitenoise/issues/137", "id": 241879852, "node_id": "MDU6SXNzdWUyNDE4Nzk4NTI=", "number": 137, "title": "Can't figure out correct setup with Heroku in production mode", "user": {"login": "nadzimo", "id": 25529064, "node_id": "MDQ6VXNlcjI1NTI5MDY0", "avatar_url": "https://avatars1.githubusercontent.com/u/25529064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nadzimo", "html_url": "https://github.com/nadzimo", "followers_url": "https://api.github.com/users/nadzimo/followers", "following_url": "https://api.github.com/users/nadzimo/following{/other_user}", "gists_url": "https://api.github.com/users/nadzimo/gists{/gist_id}", "starred_url": "https://api.github.com/users/nadzimo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nadzimo/subscriptions", "organizations_url": "https://api.github.com/users/nadzimo/orgs", "repos_url": "https://api.github.com/users/nadzimo/repos", "events_url": "https://api.github.com/users/nadzimo/events{/privacy}", "received_events_url": "https://api.github.com/users/nadzimo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-07-10T23:20:48Z", "updated_at": "2017-07-11T01:23:26Z", "closed_at": "2017-07-11T01:23:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI've followed the instructions to set up whitenoise in the docs. On my localhost when I'm using Django's development server with `DEBUG=True` in `settings.py` my app works fine, but I'm having trouble serving staticfiles on Heroku when `DEBUG=False`. When I try to load any url (eg. mysite.com/) I get a 400 Bad Request response, except if I try to load Django's admin app it works fine (mysite.com/admin/) and I see versioned static files being served (with the hash of the file in the name).\r\n\r\n`settings.py`:\r\n```\r\nALLOWED_HOSTS = ['*']\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\r\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') #I also tried PROJECT_ROOT instead of BASE_DIR\r\nSTATIC_URL = '/static/'\r\nSTATICFILES_DIRS = [\r\n    os.path.join(PROJECT_ROOT, 'static'),\r\n]\r\n```\r\n\r\nI also wanted to see if I could try serving the static files with Django's built in staticfiles app like the [Whitenoise troubleshooting doc suggested](http://whitenoise.evans.io/en/stable/django.html#storage-troubleshoot), but it seems I would need to have access to Heroku's server configuration [as per Django's doc](https://docs.djangoproject.com/en/1.10/howto/static-files/deployment/) which is not possible with Heroku.\r\nI also tried following [Heroku's instructions here](https://devcenter.heroku.com/articles/django-assets) but to no avail.\r\n\r\nI can see collectstatic is running correctly without failing when I deploy on Heroku, and as proof as mentioned I can see the static assets of the django /admin/ app being served correctly.\r\n\r\nCould you please offer some guidance?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/136", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/136/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/136/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/136/events", "html_url": "https://github.com/evansd/whitenoise/issues/136", "id": 240506816, "node_id": "MDU6SXNzdWUyNDA1MDY4MTY=", "number": 136, "title": "Question: Is useless compressing during the build if I'm using the whitenoise's storage class?", "user": {"login": "semente", "id": 29862, "node_id": "MDQ6VXNlcjI5ODYy", "avatar_url": "https://avatars1.githubusercontent.com/u/29862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/semente", "html_url": "https://github.com/semente", "followers_url": "https://api.github.com/users/semente/followers", "following_url": "https://api.github.com/users/semente/following{/other_user}", "gists_url": "https://api.github.com/users/semente/gists{/gist_id}", "starred_url": "https://api.github.com/users/semente/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/semente/subscriptions", "organizations_url": "https://api.github.com/users/semente/orgs", "repos_url": "https://api.github.com/users/semente/repos", "events_url": "https://api.github.com/users/semente/events{/privacy}", "received_events_url": "https://api.github.com/users/semente/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-07-04T22:51:26Z", "updated_at": "2017-07-05T10:47:12Z", "closed_at": "2017-07-05T10:47:12Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI'm compressing the static files using the following command during the build process of my application:\r\n\r\n```\r\npython -m whitenoise.compress /app/_assets/static\r\n```\r\n\r\nI have plans to cache the static files forever using your `whitenoise.storage.CompressedManifestStaticFilesStorage`.\r\n\r\nWill both work well together? If so, will I get benefits by compressing the files during the build (i.e. do it will compress only once)?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/134", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/134/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/134/events", "html_url": "https://github.com/evansd/whitenoise/issues/134", "id": 234458647, "node_id": "MDU6SXNzdWUyMzQ0NTg2NDc=", "number": 134, "title": "Different timestamps for uncompressed and compressed files", "user": {"login": "jaap3", "id": 48517, "node_id": "MDQ6VXNlcjQ4NTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/48517?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jaap3", "html_url": "https://github.com/jaap3", "followers_url": "https://api.github.com/users/jaap3/followers", "following_url": "https://api.github.com/users/jaap3/following{/other_user}", "gists_url": "https://api.github.com/users/jaap3/gists{/gist_id}", "starred_url": "https://api.github.com/users/jaap3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jaap3/subscriptions", "organizations_url": "https://api.github.com/users/jaap3/orgs", "repos_url": "https://api.github.com/users/jaap3/repos", "events_url": "https://api.github.com/users/jaap3/events{/privacy}", "received_events_url": "https://api.github.com/users/jaap3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-06-08T09:05:10Z", "updated_at": "2017-07-05T11:58:09Z", "closed_at": "2017-07-04T20:11:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The [`ngx_http_gzip_static_module`](http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html) docs say:\r\n\r\n>  It is recommended that the modification date and time of original and compressed files be the same.\r\n\r\nCurrently this is (usually) the case for the \"hashed\" version of the assets, but not for the originals. Is it be possible to ensure that the created/modified times of the compressed assets matches the timestamps of the source file?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/133", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/133/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/133/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/133/events", "html_url": "https://github.com/evansd/whitenoise/issues/133", "id": 228538318, "node_id": "MDU6SXNzdWUyMjg1MzgzMTg=", "number": 133, "title": "Static files being served without unique hash", "user": {"login": "Edke", "id": 115118, "node_id": "MDQ6VXNlcjExNTExOA==", "avatar_url": "https://avatars2.githubusercontent.com/u/115118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edke", "html_url": "https://github.com/Edke", "followers_url": "https://api.github.com/users/Edke/followers", "following_url": "https://api.github.com/users/Edke/following{/other_user}", "gists_url": "https://api.github.com/users/Edke/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edke/subscriptions", "organizations_url": "https://api.github.com/users/Edke/orgs", "repos_url": "https://api.github.com/users/Edke/repos", "events_url": "https://api.github.com/users/Edke/events{/privacy}", "received_events_url": "https://api.github.com/users/Edke/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-05-14T12:25:19Z", "updated_at": "2017-05-15T17:46:03Z", "closed_at": "2017-05-15T17:46:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello.\r\n\r\nTesting whitenoise, followed instructions but static files rendered using static tag are missing unique hash. Using in my Django app, tested in development mode and production using uwsgi. \r\n\r\n- middleware is configured\r\n- using static tag\r\n- using whitenoise storage\r\n- collectstatic executed before uwsgi\r\n- staticfiles.json  is in place within static files folder\r\n\r\nStill statics are rendered without unique part:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"/static/design2016/libraries/jquery-1.12.3.min.js\"></script>\r\n```\r\nAlthough URL with unique name is served properly: `/static/design2016/libraries/jquery-1.12.3.min.c07f2267a050.js`\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/132", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/132/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/132/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/132/events", "html_url": "https://github.com/evansd/whitenoise/issues/132", "id": 227666666, "node_id": "MDU6SXNzdWUyMjc2NjY2NjY=", "number": 132, "title": "Old versions of javascripts are being served", "user": {"login": "ranihorev", "id": 17147717, "node_id": "MDQ6VXNlcjE3MTQ3NzE3", "avatar_url": "https://avatars0.githubusercontent.com/u/17147717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranihorev", "html_url": "https://github.com/ranihorev", "followers_url": "https://api.github.com/users/ranihorev/followers", "following_url": "https://api.github.com/users/ranihorev/following{/other_user}", "gists_url": "https://api.github.com/users/ranihorev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranihorev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranihorev/subscriptions", "organizations_url": "https://api.github.com/users/ranihorev/orgs", "repos_url": "https://api.github.com/users/ranihorev/repos", "events_url": "https://api.github.com/users/ranihorev/events{/privacy}", "received_events_url": "https://api.github.com/users/ranihorev/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-05-10T12:42:53Z", "updated_at": "2017-05-11T14:52:01Z", "closed_at": "2017-05-11T14:52:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey,\r\n\r\nI'm using Whitenoise to serve my static files on Django. In front of it I'm using Cloudfront.\r\nWhen I execute collectstatic I can see the new version of the js files but Django keep serving the older version. If I'll create a new version of the file and collectstatic again, it will use the previous version.\r\n\r\nI'm running the Django app on docker if it matters (don't think it should).\r\n\r\nI have know idea what to do...\r\n\r\nThis is my settings file:\r\n```\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'whitenoise.runserver_nostatic',\r\n    'django.contrib.staticfiles',\r\n    'django.contrib.sites',\r\n\r\n    'snips.apps.snipsConfig',\r\n\r\n    'wagtail.wagtailforms',\r\n    'wagtail.wagtailredirects',\r\n    'wagtail.wagtailembeds',\r\n    'wagtail.wagtailsites',\r\n    'wagtail.wagtailusers',\r\n    'wagtail.wagtailsnippets',\r\n    'wagtail.wagtaildocs',\r\n    'wagtail.wagtailimages',\r\n    'wagtail.wagtailsearch',\r\n    'wagtail.wagtailadmin',\r\n    'wagtail.wagtailcore',\r\n    'wagtail.contrib.modeladmin',\r\n\r\n    'huey.contrib.djhuey',\r\n    'paypal.standard.ipn',\r\n\r\n    'allauth',\r\n    'allauth.account',\r\n    'allauth.socialaccount',\r\n    'allauth.socialaccount.providers.facebook',\r\n    'django_filters',\r\n    'modelcluster',\r\n]\r\n\r\nMIDDLEWARE_CLASSES = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n\r\n    'wagtail.wagtailcore.middleware.SiteMiddleware',\r\n    'wagtail.wagtailredirects.middleware.RedirectMiddleware',\r\n\r\n    'simple_history.middleware.HistoryRequestMiddleware',\r\n]\r\nWSGI_APPLICATION = 'djangoApp.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/1.9/ref/settings/#databases\r\n\r\nSTATICFILES_DIRS = [\r\n    os.path.join(BASE_DIR, \"static\"),\r\n]\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n```\r\n\r\nWSGI.py\r\n\r\n```\r\nfrom django.core.wsgi import get_wsgi_application\r\nfrom whitenoise.django import DjangoWhiteNoise\r\n\r\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"djangoApp.settings\")\r\n\r\napplication = get_wsgi_application()\r\napplication = DjangoWhiteNoise(application)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/131", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/131/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/131/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/131/events", "html_url": "https://github.com/evansd/whitenoise/issues/131", "id": 221511735, "node_id": "MDU6SXNzdWUyMjE1MTE3MzU=", "number": 131, "title": "testing installation", "user": {"login": "andreav", "id": 1358304, "node_id": "MDQ6VXNlcjEzNTgzMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1358304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreav", "html_url": "https://github.com/andreav", "followers_url": "https://api.github.com/users/andreav/followers", "following_url": "https://api.github.com/users/andreav/following{/other_user}", "gists_url": "https://api.github.com/users/andreav/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreav/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreav/subscriptions", "organizations_url": "https://api.github.com/users/andreav/orgs", "repos_url": "https://api.github.com/users/andreav/repos", "events_url": "https://api.github.com/users/andreav/events{/privacy}", "received_events_url": "https://api.github.com/users/andreav/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-04-13T09:45:23Z", "updated_at": "2017-04-13T10:01:14Z", "closed_at": "2017-04-13T09:58:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI have installed last pip version, 3.3.0 with Django 1.9.\r\n\r\n```\r\nMIDDLEWARE_CLASSES = (\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n...\r\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n```\r\n\r\nI continue getting status code 200  and not 304 when retrieving static files.\r\n\r\nThis happens in all these scenarios:\r\n* development running applciation with runserver --nostatic\r\n* development running applciation with gunicorn\r\n* producition (DEBUG=False)\r\n\r\nFiles are correvtly generated, ie.:\r\n* t2g-polyfills.js\r\n* t2g-polyfills.js.gz\r\n* t2g-polyfills.615dcc41d2ff.js\r\n* t2g-polyfills.615dcc41d2ff.js.gz\r\n\r\nI do not know how to thoubleshoot this problem.\r\nI also created a minimal project, only Djano and whitenoise but still same behaviour.\r\n\r\nAs a request/response example (directly from production) [form Chrome Network analizer]:\r\n\r\n```\r\nGeneral:\r\n\r\nRequest URL:http://trip2go.tours/static/site/js/t2g-polyfills.615dcc41d2ff.js\r\nRequest Method:GET\r\nStatus Code:200 OK\r\nRemote Address:139.59.149.27:80\r\nReferrer Policy:no-referrer-when-downgrade\r\n\r\nResponse Headers:\r\n\r\nAccess-Control-Allow-Origin:*\r\nCache-Control:max-age=315360000, public, immutable\r\nConnection:keep-alive\r\nContent-Encoding:gzip\r\nContent-Language:en\r\nContent-Length:362\r\nContent-Type:application/javascript; charset=\"utf-8\"\r\nDate:Thu, 13 Apr 2017 09:10:48 GMT\r\nLast-Modified:Thu, 13 Apr 2017 08:53:46 GMT\r\nServer:nginx/1.10.0 (Ubuntu)\r\nVary:Accept-Encoding, Accept-Language\r\nX-Frame-Options:SAMEORIGIN\r\n\r\nRequest Headers:\r\n\r\nAccept:*/*\r\nAccept-Encoding:gzip, deflate, sdch\r\nAccept-Language:en-US,en;q=0.8,it-IT;q=0.6,it;q=0.4\r\nCache-Control:no-cache\r\nConnection:keep-alive\r\nCookie:csrftoken=8wjypAYfBB6Nb3cGKchv2NqufKDcXxsU\r\nHost:trip2go.tours\r\nPragma:no-cache\r\nReferer:http://trip2go.tours/trips/search/\r\nUser-Agent:Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36\r\n```\r\n\r\nThank you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/130", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/130/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/130/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/130/events", "html_url": "https://github.com/evansd/whitenoise/issues/130", "id": 220489256, "node_id": "MDU6SXNzdWUyMjA0ODkyNTY=", "number": 130, "title": "Exception when running tests with Django 1.11", "user": {"login": "jameschristopher", "id": 13838056, "node_id": "MDQ6VXNlcjEzODM4MDU2", "avatar_url": "https://avatars1.githubusercontent.com/u/13838056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jameschristopher", "html_url": "https://github.com/jameschristopher", "followers_url": "https://api.github.com/users/jameschristopher/followers", "following_url": "https://api.github.com/users/jameschristopher/following{/other_user}", "gists_url": "https://api.github.com/users/jameschristopher/gists{/gist_id}", "starred_url": "https://api.github.com/users/jameschristopher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jameschristopher/subscriptions", "organizations_url": "https://api.github.com/users/jameschristopher/orgs", "repos_url": "https://api.github.com/users/jameschristopher/repos", "events_url": "https://api.github.com/users/jameschristopher/events{/privacy}", "received_events_url": "https://api.github.com/users/jameschristopher/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-09T18:32:51Z", "updated_at": "2018-01-05T14:49:19Z", "closed_at": "2017-04-11T16:11:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "There seems to be an issue with how Whitenoise interacts with the `manifest_strict` attribute on `django.contrib.staticfiles.storage.ManifestFilesMixin` when running tests.\r\n\r\n```\r\nValueError: Missing staticfiles manifest entry for\r\n```\r\n[It seems the new `manifest_strict` attribute is automatically set to True, whereas the old behavior was as if it was set to False.](https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#manifeststaticfilesstorage) This error does not appear when `STATICFILES_STORAGE` is the default. [Here is where the `manifest_strict` attribute is used by django.](https://github.com/django/django/blob/master/django/contrib/staticfiles/storage.py#L421)\r\n\r\nThoughts? Maybe someone can attempt to replicate the issue?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/129", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/129/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/129/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/129/events", "html_url": "https://github.com/evansd/whitenoise/issues/129", "id": 219675711, "node_id": "MDU6SXNzdWUyMTk2NzU3MTE=", "number": 129, "title": "ETag and If-None-Match", "user": {"login": "guyhughes", "id": 5915486, "node_id": "MDQ6VXNlcjU5MTU0ODY=", "avatar_url": "https://avatars2.githubusercontent.com/u/5915486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guyhughes", "html_url": "https://github.com/guyhughes", "followers_url": "https://api.github.com/users/guyhughes/followers", "following_url": "https://api.github.com/users/guyhughes/following{/other_user}", "gists_url": "https://api.github.com/users/guyhughes/gists{/gist_id}", "starred_url": "https://api.github.com/users/guyhughes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guyhughes/subscriptions", "organizations_url": "https://api.github.com/users/guyhughes/orgs", "repos_url": "https://api.github.com/users/guyhughes/repos", "events_url": "https://api.github.com/users/guyhughes/events{/privacy}", "received_events_url": "https://api.github.com/users/guyhughes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-04-05T18:34:31Z", "updated_at": "2017-07-04T21:06:01Z", "closed_at": "2017-07-04T21:06:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would you be willing to accept a contrib package that implements ETag and If-None-Match conforming to [RFC 7232 s. 2.3](https://tools.ietf.org/html/rfc7232#section-2.3) with a full test suite?\r\n\r\nI have one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/127", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/127/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/127/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/127/events", "html_url": "https://github.com/evansd/whitenoise/issues/127", "id": 219052740, "node_id": "MDU6SXNzdWUyMTkwNTI3NDA=", "number": 127, "title": "Throw Errors in Django in Debug when it will be thrown in Production", "user": {"login": "joesolly", "id": 5065964, "node_id": "MDQ6VXNlcjUwNjU5NjQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/5065964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joesolly", "html_url": "https://github.com/joesolly", "followers_url": "https://api.github.com/users/joesolly/followers", "following_url": "https://api.github.com/users/joesolly/following{/other_user}", "gists_url": "https://api.github.com/users/joesolly/gists{/gist_id}", "starred_url": "https://api.github.com/users/joesolly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joesolly/subscriptions", "organizations_url": "https://api.github.com/users/joesolly/orgs", "repos_url": "https://api.github.com/users/joesolly/repos", "events_url": "https://api.github.com/users/joesolly/events{/privacy}", "received_events_url": "https://api.github.com/users/joesolly/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-03T20:31:20Z", "updated_at": "2017-04-05T16:29:12Z", "closed_at": "2017-04-04T14:29:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "We have run into a problem a few times where a developer will put in a templatetag to an invalid file: `{% static 'js/apps.jss' %}` and the development environment quietly hides the issue. When we get to a production environment, the file is not found in the static files manifest and the manifest attempts to create a hashed version of it and throws an exception when the file is not found. We were thinking it might make sense to add a check in the CompressedManifestStaticFilesStorage url function to check to see if a file exists and throw an error there if it doesn't. That way, we can get the same errors in development as we see in production.\r\n\r\nWould anyone else have any thoughts on if this should go here or what they think about the feature?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/126", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/126/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/126/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/126/events", "html_url": "https://github.com/evansd/whitenoise/issues/126", "id": 209323543, "node_id": "MDU6SXNzdWUyMDkzMjM1NDM=", "number": 126, "title": "WhiteNoise fails on missing file (that's there)", "user": {"login": "paulnicholsen27", "id": 2072392, "node_id": "MDQ6VXNlcjIwNzIzOTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2072392?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulnicholsen27", "html_url": "https://github.com/paulnicholsen27", "followers_url": "https://api.github.com/users/paulnicholsen27/followers", "following_url": "https://api.github.com/users/paulnicholsen27/following{/other_user}", "gists_url": "https://api.github.com/users/paulnicholsen27/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulnicholsen27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulnicholsen27/subscriptions", "organizations_url": "https://api.github.com/users/paulnicholsen27/orgs", "repos_url": "https://api.github.com/users/paulnicholsen27/repos", "events_url": "https://api.github.com/users/paulnicholsen27/events{/privacy}", "received_events_url": "https://api.github.com/users/paulnicholsen27/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-02-22T01:18:02Z", "updated_at": "2020-04-30T01:47:01Z", "closed_at": "2017-02-27T14:44:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I enable WhiteNoise locally (added middleware, and `STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'`) but when I run `collectstatic` I get the error that `The CSS file 'css/business-casual.css' references a file which could not be found:\r\n  staticfiles/img/clouds.jpg`.  The file is definitely there (my css has a relative path to its storage spot in my staticfiles directory... I'm pretty sure I did it right).   Removing the staticfiles_storage fixes it locally although I'm still having trouble deploying it to heroku.  Not sure if the errors are related or not\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/124", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/124/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/124/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/124/events", "html_url": "https://github.com/evansd/whitenoise/issues/124", "id": 208362592, "node_id": "MDU6SXNzdWUyMDgzNjI1OTI=", "number": 124, "title": "login required condition to serve files", "user": {"login": "jxrossel", "id": 12891830, "node_id": "MDQ6VXNlcjEyODkxODMw", "avatar_url": "https://avatars2.githubusercontent.com/u/12891830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxrossel", "html_url": "https://github.com/jxrossel", "followers_url": "https://api.github.com/users/jxrossel/followers", "following_url": "https://api.github.com/users/jxrossel/following{/other_user}", "gists_url": "https://api.github.com/users/jxrossel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxrossel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxrossel/subscriptions", "organizations_url": "https://api.github.com/users/jxrossel/orgs", "repos_url": "https://api.github.com/users/jxrossel/repos", "events_url": "https://api.github.com/users/jxrossel/events{/privacy}", "received_events_url": "https://api.github.com/users/jxrossel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-02-17T07:48:10Z", "updated_at": "2017-04-04T14:34:15Z", "closed_at": "2017-02-22T18:44:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nNot really an issue, but rather a question. Is there a way to limit static files access (or access to a subset of them) to authenticated users ?\r\n\r\nCheers,\r\n\r\nJonathan", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/122", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/122/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/122/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/122/events", "html_url": "https://github.com/evansd/whitenoise/issues/122", "id": 208013939, "node_id": "MDU6SXNzdWUyMDgwMTM5Mzk=", "number": 122, "title": "Wording in docs about SecurityMiddleware might be confusing new users ", "user": {"login": "alexlouden", "id": 1332954, "node_id": "MDQ6VXNlcjEzMzI5NTQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1332954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexlouden", "html_url": "https://github.com/alexlouden", "followers_url": "https://api.github.com/users/alexlouden/followers", "following_url": "https://api.github.com/users/alexlouden/following{/other_user}", "gists_url": "https://api.github.com/users/alexlouden/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexlouden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexlouden/subscriptions", "organizations_url": "https://api.github.com/users/alexlouden/orgs", "repos_url": "https://api.github.com/users/alexlouden/repos", "events_url": "https://api.github.com/users/alexlouden/events{/privacy}", "received_events_url": "https://api.github.com/users/alexlouden/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2017-02-16T04:35:45Z", "updated_at": "2017-02-16T12:59:24Z", "closed_at": "2017-02-16T12:59:24Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I came across (and answered) [this question](http://stackoverflow.com/questions/42261467/django-security-middleware-vs-whitenoise/) on stack overflow asking about why they can't use `SecurityMiddleware` and `WhiteNoiseMiddleware` together. They linked to [this section](http://whitenoise.evans.io/en/stable/django.html#enable-whitenoise) of the documentation.\r\n\r\nThe docs are currently:\r\n\r\n> Edit your settings.py file and add WhiteNoise to the MIDDLEWARE_CLASSES list, above all other middleware apart from Django\u2019s SecurityMiddleware:\r\n\r\n```\r\nMIDDLEWARE_CLASSES = [\r\n  # 'django.middleware.security.SecurityMiddleware',\r\n  'whitenoise.middleware.WhiteNoiseMiddleware',\r\n  # ...\r\n]\r\n```\r\n\r\nI think the commented out SecurityMiddleware and maybe the term \"apart from\" might have given them the wrong impression. May I suggest changing the wording and the commenting in the example?\r\n\r\n> Edit your settings.py file and add WhiteNoise to the MIDDLEWARE_CLASSES list. The WhiteNoise middleware should be placed directly after the Django security middleware.\r\n\r\n```\r\nMIDDLEWARE_CLASSES = [\r\n  'django.middleware.security.SecurityMiddleware',\r\n  'whitenoise.middleware.WhiteNoiseMiddleware',\r\n  # ...\r\n]\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/121", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/121/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/121/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/121/events", "html_url": "https://github.com/evansd/whitenoise/issues/121", "id": 207476710, "node_id": "MDU6SXNzdWUyMDc0NzY3MTA=", "number": 121, "title": "GzipManifestPipelineStorage could not find file", "user": {"login": "pythdasch", "id": 2873224, "node_id": "MDQ6VXNlcjI4NzMyMjQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/2873224?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pythdasch", "html_url": "https://github.com/pythdasch", "followers_url": "https://api.github.com/users/pythdasch/followers", "following_url": "https://api.github.com/users/pythdasch/following{/other_user}", "gists_url": "https://api.github.com/users/pythdasch/gists{/gist_id}", "starred_url": "https://api.github.com/users/pythdasch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pythdasch/subscriptions", "organizations_url": "https://api.github.com/users/pythdasch/orgs", "repos_url": "https://api.github.com/users/pythdasch/repos", "events_url": "https://api.github.com/users/pythdasch/events{/privacy}", "received_events_url": "https://api.github.com/users/pythdasch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-02-14T10:31:49Z", "updated_at": "2017-02-27T14:53:55Z", "closed_at": "2017-02-27T14:53:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nthanks for this nice library ! \r\n\r\nAll is doing fine when I collectstatic, it normally creates the cache files, all seems fine.\r\n```\r\n\r\n`Post-processed 'compiled/dashboard.min.css' as 'compiled/dashboard.min.7058dfd4311a.css'\r\nPost-processed 'compiled/common.min.js' as 'compiled/common.min.ccc4b6941036.js'\r\nPost-processed 'compiled/form.min.js' as 'compiled/form.min.f919b770e800.js'\r\nPost-processed 'compiled/dashboard.min.js' as 'compiled/dashboard.min.a9893fbed25e.js'\r\n```\r\n`\r\nbut when I get on the website : \r\n\r\nI have a 500 error because of : \r\n`ValueError at / The file \u2018compiled/compiled.min.css\u2019 could not be found with <core.custom_storage.GzipManifestPipelineStorage object at 0x7f1bd2aa87d0>.\r\n`\r\nThat's strange that he doesn't look for the cached version of compiled/compiled.min.css\r\n...\r\n\r\nI did the installation of all this with this tutorial\r\nhttps://devcenter.heroku.com/articles/django-assets\r\n\r\nI also added cloudfront and pipeline\r\n\r\nHere is my custom storage : \r\n```\r\n`from pipeline.storage import PipelineMixin\r\nfrom whitenoise.django import GzipManifestStaticFilesStorage\r\n\r\n\r\nclass GzipManifestPipelineStorage(PipelineMixin, GzipManifestStaticFilesStorage):\r\npass`\r\n\r\n```\r\nand whitenoise settings\r\n```\r\n`STATIC_HOST = 'https://********.cloudfront.net'\r\nWHITENOISE_STATIC_PREFIX = \"/static/\" # Important to make Whitenoise and cloudfront work together\r\nSTATIC_URL = STATIC_HOST + '/static/'`\r\n```\r\n\r\nIn the logs the error is launch there : \r\n```\r\n`File \"/app/.heroku/python/lib/python2.7/site-packages/django/contrib/staticfiles/storage.py\", line 280, in stored_name\r\n2017-02-14T12:03:30.772543473Z app[web.1]:     cache_name = self.clean_name(self.hashed_name(name))\r\n2017-02-14T12:03:30.772545462Z app[web.1]:   File \"/app/.heroku/python/lib/python2.7/site-packages/django/contrib/staticfiles/storage.py\", line 94, in hashed_name\r\n2017-02-14T12:03:30.772547519Z app[web.1]:     (clean_name, self))\r\n```\r\n`\r\nif someone can help me would it be awesome ! \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/120", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/120/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/120/events", "html_url": "https://github.com/evansd/whitenoise/issues/120", "id": 206542062, "node_id": "MDU6SXNzdWUyMDY1NDIwNjI=", "number": 120, "title": "Charset issue after whitenoise", "user": {"login": "jxrossel", "id": 12891830, "node_id": "MDQ6VXNlcjEyODkxODMw", "avatar_url": "https://avatars2.githubusercontent.com/u/12891830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxrossel", "html_url": "https://github.com/jxrossel", "followers_url": "https://api.github.com/users/jxrossel/followers", "following_url": "https://api.github.com/users/jxrossel/following{/other_user}", "gists_url": "https://api.github.com/users/jxrossel/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxrossel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxrossel/subscriptions", "organizations_url": "https://api.github.com/users/jxrossel/orgs", "repos_url": "https://api.github.com/users/jxrossel/repos", "events_url": "https://api.github.com/users/jxrossel/events{/privacy}", "received_events_url": "https://api.github.com/users/jxrossel/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-02-09T15:47:06Z", "updated_at": "2017-02-10T13:01:03Z", "closed_at": "2017-02-10T13:01:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI'm trying to serve this file with whitenoise (from the visjs library):\r\nhttps://cdnjs.cloudflare.com/ajax/libs/vis/4.18.1/vis.min.js\r\n\r\nUsing Django static server, I don't have any issue. On my prod website, with whitenoise (and without encoding / compression), the obtained file is slightly different (due to some special characters towards the end) and the execution fails. I have seen that we can set the charset in Whitenoise, but utf-8 is fine in general.\r\n\r\n[vis.min_after_whitenoise.txt](https://github.com/evansd/whitenoise/files/764140/vis.min_after_whitenoise.txt)\r\n[vis.min.txt](https://github.com/evansd/whitenoise/files/764141/vis.min.txt)\r\n\r\nI use Django (1.10.5), Channels (1.0.3) and Whitenoise (3.3.0)\r\n\r\nAny idea ?\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/119", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/119/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/119/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/119/events", "html_url": "https://github.com/evansd/whitenoise/issues/119", "id": 203040496, "node_id": "MDU6SXNzdWUyMDMwNDA0OTY=", "number": 119, "title": "Files not compressed when called by JavaScript", "user": {"login": "mimischi", "id": 1052860, "node_id": "MDQ6VXNlcjEwNTI4NjA=", "avatar_url": "https://avatars3.githubusercontent.com/u/1052860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mimischi", "html_url": "https://github.com/mimischi", "followers_url": "https://api.github.com/users/mimischi/followers", "following_url": "https://api.github.com/users/mimischi/following{/other_user}", "gists_url": "https://api.github.com/users/mimischi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mimischi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mimischi/subscriptions", "organizations_url": "https://api.github.com/users/mimischi/orgs", "repos_url": "https://api.github.com/users/mimischi/repos", "events_url": "https://api.github.com/users/mimischi/events{/privacy}", "received_events_url": "https://api.github.com/users/mimischi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-01-25T08:31:02Z", "updated_at": "2017-01-30T09:18:40Z", "closed_at": "2017-01-30T09:18:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "We're using [Swipebox](http://brutaldesign.github.io/swipebox/) in a project, to show a small image gallery. WhiteNoise is running perfectly for the rest of the site.\r\n\r\nBasically the Swipebox overlay is opened after you click on a button. The problem now is, that Swipebox is supposed to show arrow icons to switch between images. These buttons are only put into the DOM after you click that specific button, for the overlay to come up. They are not loaded beforehand.\r\n\r\nThe buttons are then embedded like so:\r\n\r\n```\r\n<div id=\"swipebox-arrows\">\r\n<a id=\"swipebox-prev\" style=\"background-image: url(\"background-image: url(\"https://myurl/static/preview/src_swipebox/img/icons.486f0204fc9b.svg\");\");\" class=\"disabled\"></a>\r\n<a id=\"swipebox-next\" style=\"background-image: url(\"background-image: url(\"https://myurl/static/preview/src_swipebox/img/icons.486f0204fc9b.svg\");\");\"></a>\r\n</div>\r\n```\r\n\r\nThe URL gets changed, but the actual file never gets compressed/cached and therefore results in a 404 error inside the browsers console. Not sure how to solve that or what to do to get rid of this error.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/116", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/116/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/116/events", "html_url": "https://github.com/evansd/whitenoise/issues/116", "id": 200830308, "node_id": "MDU6SXNzdWUyMDA4MzAzMDg=", "number": 116, "title": "Using WhiteNoise with S3", "user": {"login": "amberdiehl", "id": 5828080, "node_id": "MDQ6VXNlcjU4MjgwODA=", "avatar_url": "https://avatars3.githubusercontent.com/u/5828080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amberdiehl", "html_url": "https://github.com/amberdiehl", "followers_url": "https://api.github.com/users/amberdiehl/followers", "following_url": "https://api.github.com/users/amberdiehl/following{/other_user}", "gists_url": "https://api.github.com/users/amberdiehl/gists{/gist_id}", "starred_url": "https://api.github.com/users/amberdiehl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amberdiehl/subscriptions", "organizations_url": "https://api.github.com/users/amberdiehl/orgs", "repos_url": "https://api.github.com/users/amberdiehl/repos", "events_url": "https://api.github.com/users/amberdiehl/events{/privacy}", "received_events_url": "https://api.github.com/users/amberdiehl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2017-01-14T21:16:12Z", "updated_at": "2017-01-18T22:36:35Z", "closed_at": "2017-01-18T22:36:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi There,\r\n\r\nI am attempting to use WhiteNoise with my Amazon S3 bucket after previously (and successfully) setting the bucket up and moving assets there without WhiteNoise. I am also using WhiteNoise in my local environment which accesses the same static files locally.\r\n\r\nI 'think' WhiteNoise is working okay locally--when I run collectstatic I have a bunch of files now in my project/staticfiles folder including what appears to be compressed versions.\r\n\r\nHowever, when I run collectstatic on the production server (or in my local environment with the settings to act like production) I get a very different result where it keeps copying static files only for admin and one of my apps. None of the assets sitting in the root static folder are being touched and nothing appears to be minimized. \r\n\r\nHere are the bits I think you need to inspect in my settings file(s):\r\n\r\nMIDDLEWARE_CLASSES = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'whitenoise.middleware.WhiteNoiseMiddleware',\r\n    ...\r\n\r\nDEBUG = True\r\n\r\nif DEBUG:\r\n\r\n    # Static files (CSS, JavaScript, Images)\r\n    # https://docs.djangoproject.com/en/1.10/howto/static-files/\r\n\r\n    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\r\n\r\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\r\n    STATICFILES_DIRS = (os.path.join(BASE_DIR, '..', \"static\"),)\r\n    STATIC_URL = '/static/'\r\n\r\n    MEDIA_ROOT = os.path.join(MAIN_DIR, 'media')\r\n    MEDIA_URL = '/media/'\r\n\r\nelse:\r\n\r\n    # ** PRODUCTION STATIC AND MEDIA SETTINGS **\r\n    # Use while running locally only for debugging/testing purposes\r\n    AWS_STORAGE_BUCKET_NAME = '***'\r\n    AWS_ACCESS_KEY_ID = '***'\r\n    AWS_SECRET_ACCESS_KEY = '***'\r\n\r\n    AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME\r\n\r\n    #STATIC_URL = \"https://%s/\" % AWS_S3_CUSTOM_DOMAIN\r\n    #STATICFILES_STORAGE = 'storages.backends.s3boto.S3BotoStorage'\r\n\r\n    STATIC_HOST = 'https://***.cloudfront.net'\r\n    STATICFILES_LOCATION = 'static'\r\n    STATIC_URL = \"https://%s/%s/\" % (STATIC_HOST, STATICFILES_LOCATION)\r\n    STATICFILES_STORAGE = 'custom_storages.StaticStorage'\r\n\r\n    MEDIAFILES_LOCATION = 'media'\r\n    MEDIA_URL = \"https://%s/%s/\" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)\r\n    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'\r\n\r\nCONTENT_TYPES = ['image', 'video']\r\nMAX_UPLOAD_SIZE = \"5242880\"\r\n\r\nAnd here is the project tree for help:\r\n\r\ndandeliondiary_project/\r\n   app1/\r\n      static\r\n\r\n   app2/\r\n      ...\r\n\r\n   dandeliondiary/\r\n      settings/\r\n         base.py\r\n         production.py\r\n      staticfiles/\r\n\r\n      manage.py\r\n      static/\r\n          css/\r\n          images/\r\n          plugins/\r\n\r\nApp1 static is being found and copied (but I don't see any files being compressed). Nothing is being done with static/.\r\n\r\nAny help would be greatly appreciated.\r\n\r\nCheers,\r\nAmber", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/115", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/115/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/115/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/115/events", "html_url": "https://github.com/evansd/whitenoise/issues/115", "id": 198968749, "node_id": "MDU6SXNzdWUxOTg5Njg3NDk=", "number": 115, "title": "UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte", "user": {"login": "EmadMokhtar", "id": 311636, "node_id": "MDQ6VXNlcjMxMTYzNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/311636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/EmadMokhtar", "html_url": "https://github.com/EmadMokhtar", "followers_url": "https://api.github.com/users/EmadMokhtar/followers", "following_url": "https://api.github.com/users/EmadMokhtar/following{/other_user}", "gists_url": "https://api.github.com/users/EmadMokhtar/gists{/gist_id}", "starred_url": "https://api.github.com/users/EmadMokhtar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/EmadMokhtar/subscriptions", "organizations_url": "https://api.github.com/users/EmadMokhtar/orgs", "repos_url": "https://api.github.com/users/EmadMokhtar/repos", "events_url": "https://api.github.com/users/EmadMokhtar/events{/privacy}", "received_events_url": "https://api.github.com/users/EmadMokhtar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-01-05T14:31:50Z", "updated_at": "2017-01-09T19:10:48Z", "closed_at": "2017-01-09T19:10:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have Django 1.10.4 installed and I tried to run `python manage.py collectstatic --noinput` command, I got `UnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte`\r\n\r\nI tried to run the same command using Python 3.5, 3.6, 2.7.13 and Django 1.10.2 and still the same issue.\r\n\r\n**Settings.py**\r\n\r\n``` python\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/1.9/howto/static-files/\r\n\r\nPROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))\r\n\r\nSTATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')\r\nSTATIC_URL = '/static/'\r\n\r\n# Simplified static file serving.\r\n# https://warehouse.python.org/project/whitenoise/\r\n\r\nSTATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'\r\n```\r\n\r\n**Here is the full log**\r\n```\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/base.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/changelists.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/dashboard.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/fonts.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/forms.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/login.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/rtl.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/css/widgets.css'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/fonts/LICENSE.txt'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/fonts/README.txt'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/fonts/Roboto-Bold-webfont.woff'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/fonts/Roboto-Light-webfont.woff'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/fonts/Roboto-Regular-webfont.woff'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/calendar-icons.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-addlink.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-alert.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-calendar.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-changelink.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-clock.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-deletelink.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-no.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-unknown-alt.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-unknown.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/icon-yes.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/inline-delete.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/LICENSE'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/README.txt'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/search.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/selector-icons.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/sorting-icons.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/tooltag-add.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/tooltag-arrowright.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/gis/move_vertex_off.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/img/gis/move_vertex_on.svg'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/actions.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/actions.min.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/calendar.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/cancel.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/change_form.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/collapse.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/collapse.min.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/core.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/inlines.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/inlines.min.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/jquery.init.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/popup_response.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/prepopulate.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/prepopulate.min.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/prepopulate_init.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/SelectBox.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/SelectFilter2.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/timeparse.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/urlify.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/admin/DateTimeShortcuts.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/vendor/jquery/jquery.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/vendor/jquery/jquery.min.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/vendor/jquery/LICENSE-JQUERY.txt'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/vendor/xregexp/LICENSE-XREGEXP.txt'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/vendor/xregexp/xregexp.js'\r\nCopying '/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/admin/static/admin/js/vendor/xregexp/xregexp.min.js'\r\nPost-processed 'admin/css/base.css' as 'admin/css/base.ba3dc2f88fc5.css'\r\nPost-processed 'admin/css/changelists.css' as 'admin/css/changelists.b1b060f73d37.css'\r\nPost-processed 'admin/css/dashboard.css' as 'admin/css/dashboard.4898e2e9983d.css'\r\nPost-processed 'admin/css/fonts.css' as 'admin/css/fonts.cc6140298ba7.css'\r\nPost-processed 'admin/css/forms.css' as 'admin/css/forms.70b858e61281.css'\r\nPost-processed 'admin/css/login.css' as 'admin/css/login.a846c0e2ef65.css'\r\nPost-processed 'admin/css/rtl.css' as 'admin/css/rtl.e024aaf6df25.css'\r\nPost-processed 'admin/css/widgets.css' as 'admin/css/widgets.a7251c097987.css'\r\nTraceback (most recent call last):\r\n  File \"manage.py\", line 10, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/core/management/__init__.py\", line 367, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/core/management/__init__.py\", line 359, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/core/management/base.py\", line 294, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/core/management/base.py\", line 345, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 193, in handle\r\n    collected = self.collect()\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/staticfiles/management/commands/collectstatic.py\", line 139, in collect\r\n    for original_path, processed_path, processed in processor:\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/whitenoise/storage.py\", line 67, in post_process\r\n    for name, hashed_name, processed in files:\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/whitenoise/storage.py\", line 29, in post_process_with_compression\r\n    for name, hashed_name, processed in files:\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 333, in post_process\r\n    for post_processed in all_post_processed:\r\n  File \"/Users/Emad/virtualenv/halaqat/lib/python3.5/site-packages/django/contrib/staticfiles/storage.py\", line 251, in post_process\r\n    content = original_file.read().decode(settings.FILE_CHARSET)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/114", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/114/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/114/events", "html_url": "https://github.com/evansd/whitenoise/issues/114", "id": 198293180, "node_id": "MDU6SXNzdWUxOTgyOTMxODA=", "number": 114, "title": "Include deployment suggestion in documentation", "user": {"login": "bittner", "id": 665072, "node_id": "MDQ6VXNlcjY2NTA3Mg==", "avatar_url": "https://avatars2.githubusercontent.com/u/665072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bittner", "html_url": "https://github.com/bittner", "followers_url": "https://api.github.com/users/bittner/followers", "following_url": "https://api.github.com/users/bittner/following{/other_user}", "gists_url": "https://api.github.com/users/bittner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bittner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bittner/subscriptions", "organizations_url": "https://api.github.com/users/bittner/orgs", "repos_url": "https://api.github.com/users/bittner/repos", "events_url": "https://api.github.com/users/bittner/events{/privacy}", "received_events_url": "https://api.github.com/users/bittner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-01-02T03:24:04Z", "updated_at": "2019-05-02T12:14:34Z", "closed_at": "2017-01-02T09:30:07Z", "author_association": "NONE", "active_lock_reason": null, "body": "It would be helpful if the [WhiteNoise documentation](https://whitenoise.readthedocs.io/en/latest/) demonstrated how to actually deploy a Django application.\r\n\r\nFrom [reading the docs](https://whitenoise.readthedocs.io/en/latest/django.html) I would guess you're suggesting to actually run `python manage.py runserver` directly. In other words, say with Docker, you would come up with 2 containers, one for Django and one for Postgres, in a simple case. Is that really it? :worried: \r\n\r\nIf not, how would a setup look like that used uWGI or gunicorn (without Nginx or Apache, obviously)? The [Django docs](https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/) unfortunately talk about combining, e.g., `uwsgi` with Apache or Nginx just as if that were the only good solution.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/113", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/113/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/113/events", "html_url": "https://github.com/evansd/whitenoise/issues/113", "id": 196511395, "node_id": "MDU6SXNzdWUxOTY1MTEzOTU=", "number": 113, "title": "Better production/dev parity", "user": {"login": "blopker", "id": 757503, "node_id": "MDQ6VXNlcjc1NzUwMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/757503?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blopker", "html_url": "https://github.com/blopker", "followers_url": "https://api.github.com/users/blopker/followers", "following_url": "https://api.github.com/users/blopker/following{/other_user}", "gists_url": "https://api.github.com/users/blopker/gists{/gist_id}", "starred_url": "https://api.github.com/users/blopker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blopker/subscriptions", "organizations_url": "https://api.github.com/users/blopker/orgs", "repos_url": "https://api.github.com/users/blopker/repos", "events_url": "https://api.github.com/users/blopker/events{/privacy}", "received_events_url": "https://api.github.com/users/blopker/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-19T20:22:13Z", "updated_at": "2016-12-20T20:12:31Z", "closed_at": "2016-12-19T21:46:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey, first off, thank you for this lib. I use it for all the apps, so great.\r\n\r\nI just wanted to raise an issue we've ran in to regarding the differences between dev and prod.\r\n\r\nThe issue arises when `DEBUG` is on. Missing images do not throw errors like they do in production. Say there's an included template like:\r\n```html\r\n{% load staticfiles %}\r\n<img src=\"{% static 'img/home/mobile.png' %}\" srcset=\"{% static 'img/home/mobile_2x.png' %} 2x\"/>\r\n```\r\nAnd pretend the `mobile.png` is missing (or has the wrong extension in our case). When `DEBUG` is on the page will load fine and if the browser decides to use the 2x image, no 404 will be shown for the 1x image.\r\n\r\nHowever, in production Django will try and include the template above and fail at finding the hashed version of the image. This will throw an exception and remove the whole template from the page, but render the rest of the page fine. \r\n\r\nThe production behavior is good, I think. What I'm interested in discussing is if we can get that same behavior with `DEBUG` on? e.g. throw an exception with the image name in the console. This would make naming issues much more visible in development.\r\n\r\nIf this is something you'd be interested in I could put together a PR.\r\n\r\nCheers!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/112", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/112/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/112/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/112/events", "html_url": "https://github.com/evansd/whitenoise/issues/112", "id": 196249410, "node_id": "MDU6SXNzdWUxOTYyNDk0MTA=", "number": 112, "title": "certain requests cause an internal server error", "user": {"login": "km-pg", "id": 12038869, "node_id": "MDQ6VXNlcjEyMDM4ODY5", "avatar_url": "https://avatars1.githubusercontent.com/u/12038869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/km-pg", "html_url": "https://github.com/km-pg", "followers_url": "https://api.github.com/users/km-pg/followers", "following_url": "https://api.github.com/users/km-pg/following{/other_user}", "gists_url": "https://api.github.com/users/km-pg/gists{/gist_id}", "starred_url": "https://api.github.com/users/km-pg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/km-pg/subscriptions", "organizations_url": "https://api.github.com/users/km-pg/orgs", "repos_url": "https://api.github.com/users/km-pg/repos", "events_url": "https://api.github.com/users/km-pg/events{/privacy}", "received_events_url": "https://api.github.com/users/km-pg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-12-17T23:48:07Z", "updated_at": "2017-05-30T10:28:24Z", "closed_at": "2016-12-18T14:49:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Here's an example of a request that causes an internal server error because of whitenoise. If I comment out the DjangoWhiteNoise wrapper, this doesn't happen.\r\n\r\n```\r\n$ curl localhost:8000/%A3\r\n<html>\r\n  <head>\r\n    <title>Internal Server Error</title>\r\n  </head>\r\n  <body>\r\n    <h1><p>Internal Server Error</p></h1>\r\n    \r\n  </body>\r\n</html>\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/mulka/Documents/Code/gamzoo/venv/lib/python2.7/site-packages/gunicorn/workers/sync.py\", line 135, in handle\r\n    self.handle_request(listener, req, client, addr)\r\n  File \"/Users/mulka/Documents/Code/gamzoo/venv/lib/python2.7/site-packages/gunicorn/workers/sync.py\", line 176, in handle_request\r\n    respiter = self.wsgi(environ, resp.start_response)\r\n  File \"/Users/mulka/Documents/Code/gamzoo/venv/lib/python2.7/site-packages/whitenoise/base.py\", line 60, in __call__\r\n    path = decode_path_info(environ['PATH_INFO'])\r\n  File \"/Users/mulka/Documents/Code/gamzoo/venv/lib/python2.7/site-packages/whitenoise/utils.py\", line 39, in decode_path_info\r\n    return path_info.decode('utf-8')\r\n  File \"/Users/mulka/Documents/Code/gamzoo/venv/lib/python2.7/encodings/utf_8.py\", line 16, in decode\r\n    return codecs.utf_8_decode(input, errors, True)\r\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xa3 in position 1: invalid start byte\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/110", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/110/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/110/events", "html_url": "https://github.com/evansd/whitenoise/issues/110", "id": 195133807, "node_id": "MDU6SXNzdWUxOTUxMzM4MDc=", "number": 110, "title": "Handle `OSError: [Errno 36] File name too long:` instead of throwing 500 error.", "user": {"login": "mrmachine", "id": 51939, "node_id": "MDQ6VXNlcjUxOTM5", "avatar_url": "https://avatars3.githubusercontent.com/u/51939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrmachine", "html_url": "https://github.com/mrmachine", "followers_url": "https://api.github.com/users/mrmachine/followers", "following_url": "https://api.github.com/users/mrmachine/following{/other_user}", "gists_url": "https://api.github.com/users/mrmachine/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrmachine/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrmachine/subscriptions", "organizations_url": "https://api.github.com/users/mrmachine/orgs", "repos_url": "https://api.github.com/users/mrmachine/repos", "events_url": "https://api.github.com/users/mrmachine/events{/privacy}", "received_events_url": "https://api.github.com/users/mrmachine/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-12-13T01:19:21Z", "updated_at": "2016-12-17T17:58:50Z", "closed_at": "2016-12-17T17:57:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I think this only shows up when `WHITENOISE_AUTOREFRESH=True`, but still I think this should return a 404 if the file is not found, no matter what type of path is passed in to whitenoise (too long, badly encoded, whatever).\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/109", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/109/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/109/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/109/events", "html_url": "https://github.com/evansd/whitenoise/issues/109", "id": 187070895, "node_id": "MDU6SXNzdWUxODcwNzA4OTU=", "number": 109, "title": "django debug toolbar", "user": {"login": "oppianmatt", "id": 48596, "node_id": "MDQ6VXNlcjQ4NTk2", "avatar_url": "https://avatars0.githubusercontent.com/u/48596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oppianmatt", "html_url": "https://github.com/oppianmatt", "followers_url": "https://api.github.com/users/oppianmatt/followers", "following_url": "https://api.github.com/users/oppianmatt/following{/other_user}", "gists_url": "https://api.github.com/users/oppianmatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/oppianmatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oppianmatt/subscriptions", "organizations_url": "https://api.github.com/users/oppianmatt/orgs", "repos_url": "https://api.github.com/users/oppianmatt/repos", "events_url": "https://api.github.com/users/oppianmatt/events{/privacy}", "received_events_url": "https://api.github.com/users/oppianmatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-11-03T14:13:29Z", "updated_at": "2016-11-30T12:06:49Z", "closed_at": "2016-11-30T12:06:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using whitenoise and django-debug-toolbar together makes it really slow. It looks like that django debug toolbar is running all it's panels/collectors for the static media requests.\r\n\r\nIs there a way to shortcircuit this, perhaps ordering of the middleware? Or some setting to disable debug toolbar on requests handled by whitenoise?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/107", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/107/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/107/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/107/events", "html_url": "https://github.com/evansd/whitenoise/issues/107", "id": 175884302, "node_id": "MDU6SXNzdWUxNzU4ODQzMDI=", "number": 107, "title": "filename encoding problem", "user": {"login": "stray-leone", "id": 5601181, "node_id": "MDQ6VXNlcjU2MDExODE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5601181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stray-leone", "html_url": "https://github.com/stray-leone", "followers_url": "https://api.github.com/users/stray-leone/followers", "following_url": "https://api.github.com/users/stray-leone/following{/other_user}", "gists_url": "https://api.github.com/users/stray-leone/gists{/gist_id}", "starred_url": "https://api.github.com/users/stray-leone/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stray-leone/subscriptions", "organizations_url": "https://api.github.com/users/stray-leone/orgs", "repos_url": "https://api.github.com/users/stray-leone/repos", "events_url": "https://api.github.com/users/stray-leone/events{/privacy}", "received_events_url": "https://api.github.com/users/stray-leone/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-09-08T22:48:35Z", "updated_at": "2016-09-26T22:42:16Z", "closed_at": "2016-09-26T22:42:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "when static file name is non-ascii, error is shown at below code line at web application runtime\nhttps://github.com/evansd/whitenoise/blob/008b938354fc0d4a5cf04eb22a7d494cfc564c73/whitenoise/base.py#L90\n\nerror message is beloow\n\n> UnicodeDecodeError: 'ascii' codec can't decode byte 0xeb in position 9: ordinal not in range(128)\n\ncould you give me some way of solving this problem??\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/106", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/106/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/106/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/106/events", "html_url": "https://github.com/evansd/whitenoise/issues/106", "id": 175872389, "node_id": "MDU6SXNzdWUxNzU4NzIzODk=", "number": 106, "title": "Django 1.10 with GzipManifestStaticFilesStorage breaks on absolute path in CSS with double slash", "user": {"login": "reverie", "id": 73446, "node_id": "MDQ6VXNlcjczNDQ2", "avatar_url": "https://avatars1.githubusercontent.com/u/73446?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reverie", "html_url": "https://github.com/reverie", "followers_url": "https://api.github.com/users/reverie/followers", "following_url": "https://api.github.com/users/reverie/following{/other_user}", "gists_url": "https://api.github.com/users/reverie/gists{/gist_id}", "starred_url": "https://api.github.com/users/reverie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reverie/subscriptions", "organizations_url": "https://api.github.com/users/reverie/orgs", "repos_url": "https://api.github.com/users/reverie/repos", "events_url": "https://api.github.com/users/reverie/events{/privacy}", "received_events_url": "https://api.github.com/users/reverie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-09-08T21:44:07Z", "updated_at": "2016-09-09T11:11:40Z", "closed_at": "2016-09-08T22:00:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "After upgrading Django to 1.10, my `manage.py collectstatic` command broke with an error like this one: \n\n`django.core.exceptions.SuspiciousFileOperation: The joined path (/fonts/crimson/CrimsonText-Bold.ttf) is located outside of the base path component (/Users/andrew/tmp/verse_collectstatic_test/_staticfiles)`\n\nThis occurs with whitenoise 2.0.6 or 3.2.1. Downgrading to Django 1.9 fixes the issue (`collectstatic` runs successfully), as does removing the line `STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'` from my settings.py. The static file it is attempting to process in the above example is a .css file containing:\n\n```\n@font-face {\n  font-family: \"Crimson\";\n  src: url(\"/static//fonts/crimson/CrimsonText-Bold.ttf\");\n  font-weight: bold;\n}\n```\n\nNote the double slash in the font path. This is a typo, but it is not a syntactic or semantic error, and it worked fine before. It runs fine if I fix the double-slash. This is an easy workaround, but I am filing this issue because it may be tricky for other users to diagnose, and because there may be some more dangerous underlying bug.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/105", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/105/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/105/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/105/events", "html_url": "https://github.com/evansd/whitenoise/issues/105", "id": 173102657, "node_id": "MDU6SXNzdWUxNzMxMDI2NTc=", "number": 105, "title": "with Django-leaflet, getting static file not found", "user": {"login": "ndanielsen", "id": 2944777, "node_id": "MDQ6VXNlcjI5NDQ3Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/2944777?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndanielsen", "html_url": "https://github.com/ndanielsen", "followers_url": "https://api.github.com/users/ndanielsen/followers", "following_url": "https://api.github.com/users/ndanielsen/following{/other_user}", "gists_url": "https://api.github.com/users/ndanielsen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndanielsen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndanielsen/subscriptions", "organizations_url": "https://api.github.com/users/ndanielsen/orgs", "repos_url": "https://api.github.com/users/ndanielsen/repos", "events_url": "https://api.github.com/users/ndanielsen/events{/privacy}", "received_events_url": "https://api.github.com/users/ndanielsen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-25T02:49:11Z", "updated_at": "2016-09-01T20:44:06Z", "closed_at": "2016-09-01T20:44:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey David,\n\nJust wanted to first say thank you for maintaining such a helpful package. This is one of my standard go to packages.\n\nI'm using it with leaflet and django-leafet. I keep getting the following error on collectstatic. \n\nValueError: The file 'leaflet/draw/leaflet.draw.css' could not be found with <whitenoise.storage.CompressedManifestStaticFilesStorage object at 0x7fc1be653208>.\n\nit works fine with: STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'\n\nAny thoughts or ideas on how to fix this?\n\nThank you so much again for maintaiinng this. \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/104", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/104/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/104/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/104/events", "html_url": "https://github.com/evansd/whitenoise/issues/104", "id": 171856494, "node_id": "MDU6SXNzdWUxNzE4NTY0OTQ=", "number": 104, "title": "use of 'whitenoise.runserver_nostatic' (switches self off in production?)", "user": {"login": "andytwoods", "id": 595166, "node_id": "MDQ6VXNlcjU5NTE2Ng==", "avatar_url": "https://avatars1.githubusercontent.com/u/595166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andytwoods", "html_url": "https://github.com/andytwoods", "followers_url": "https://api.github.com/users/andytwoods/followers", "following_url": "https://api.github.com/users/andytwoods/following{/other_user}", "gists_url": "https://api.github.com/users/andytwoods/gists{/gist_id}", "starred_url": "https://api.github.com/users/andytwoods/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andytwoods/subscriptions", "organizations_url": "https://api.github.com/users/andytwoods/orgs", "repos_url": "https://api.github.com/users/andytwoods/repos", "events_url": "https://api.github.com/users/andytwoods/events{/privacy}", "received_events_url": "https://api.github.com/users/andytwoods/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-08-18T09:25:43Z", "updated_at": "2016-08-18T09:55:44Z", "closed_at": "2016-08-18T09:55:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Sorry for the silly Q. I am still learning.\n\nYou advice using 'whitenoise.runserver_nostatic' on development servers. Can I leave in this app when on Production? That is, will it detect eg debug=True and switch itself off?\n\nIts the requirement for the above app to be above 'django.contrib.staticfiles' which makes it a little fiddly to have different Production and Base settings files, you see.\n\nMany thanks,\nAndy.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/103", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/103/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/103/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/103/events", "html_url": "https://github.com/evansd/whitenoise/issues/103", "id": 167409048, "node_id": "MDU6SXNzdWUxNjc0MDkwNDg=", "number": 103, "title": "content-language is the same as the previous request", "user": {"login": "oppianmatt", "id": 48596, "node_id": "MDQ6VXNlcjQ4NTk2", "avatar_url": "https://avatars0.githubusercontent.com/u/48596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oppianmatt", "html_url": "https://github.com/oppianmatt", "followers_url": "https://api.github.com/users/oppianmatt/followers", "following_url": "https://api.github.com/users/oppianmatt/following{/other_user}", "gists_url": "https://api.github.com/users/oppianmatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/oppianmatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oppianmatt/subscriptions", "organizations_url": "https://api.github.com/users/oppianmatt/orgs", "repos_url": "https://api.github.com/users/oppianmatt/repos", "events_url": "https://api.github.com/users/oppianmatt/events{/privacy}", "received_events_url": "https://api.github.com/users/oppianmatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-25T16:28:40Z", "updated_at": "2016-07-26T13:54:11Z", "closed_at": "2016-07-26T13:54:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "If you look at https://github.com/evansd/whitenoise/issues/102\n\nYou will see there are Content-Language: headers in the response. They correspond to the previous request (for example I made a request to /cs/search/) and now static content served by whitenoise, i.e. /static/js/search.js will have the content-language set to cs. Same if I go visit /fr/search/, now all the static comes back with fr language.\n\nWe have the whitenoise middleware first in the middleware settings, and then later we have the i18n url middleware (actually using 'solid_i18n.middleware.SolidLocaleMiddleware' since it let's us have the main url without a lang prefix).\n\nShould the whitenoise middleware go later? Or should the whitenoise middleware clear the content-language header since static content is language agnostic, and would get a better hit rate that way.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/102", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/102/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/102/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/102/events", "html_url": "https://github.com/evansd/whitenoise/issues/102", "id": 167407807, "node_id": "MDU6SXNzdWUxNjc0MDc4MDc=", "number": 102, "title": "occasional file corruption in development mode", "user": {"login": "oppianmatt", "id": 48596, "node_id": "MDQ6VXNlcjQ4NTk2", "avatar_url": "https://avatars0.githubusercontent.com/u/48596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oppianmatt", "html_url": "https://github.com/oppianmatt", "followers_url": "https://api.github.com/users/oppianmatt/followers", "following_url": "https://api.github.com/users/oppianmatt/following{/other_user}", "gists_url": "https://api.github.com/users/oppianmatt/gists{/gist_id}", "starred_url": "https://api.github.com/users/oppianmatt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oppianmatt/subscriptions", "organizations_url": "https://api.github.com/users/oppianmatt/orgs", "repos_url": "https://api.github.com/users/oppianmatt/repos", "events_url": "https://api.github.com/users/oppianmatt/events{/privacy}", "received_events_url": "https://api.github.com/users/oppianmatt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-25T16:22:55Z", "updated_at": "2016-07-25T17:37:45Z", "closed_at": "2016-07-25T17:37:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "In development mode sometimes a js file will get stuck and be corrupted. Changing the file contents no longer shows any changes in the file. Deleting the file and recreating it fixes it.\n\n```\ncurl -v \"http://127.0.0.1:8000/static/js/search.js\" | cat -v\n* Hostname was NOT found in DNS cache\n*   Trying 127.0.0.1...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\n> GET /static/js/search.js HTTP/1.1\n> User-Agent: curl/7.38.0\n> Host: 127.0.0.1:8000\n> Accept: */*\n>\n  0     0    0     0    0     0      0      0 --:--:--  0:00:06 --:--:--     0< HTTP/1.1 200 OK\n* Server gunicorn/19.6.0 is not blacklisted\n< Server: gunicorn/19.6.0\n< Date: Mon, 25 Jul 2016 16:20:19 GMT\n< Connection: close\n< Content-Length: 896\n< Content-Language: cs\n< Vary: X-Requested-With, X-http2\n< Last-Modified: Mon, 25 Jul 2016 16:03:51 GMT\n< Cache-Control: public, max-age=0\n< Access-Control-Allow-Origin: *\n< Content-Type: application/javascript; charset=\"utf-8\"\n<\n{ [data not shown]\n100   896  100   896    0     0    142      0  0:00:06  0:00:06 --:--:--   219\n* Closing connection 0\n/*\n * search.js\n * search javascript for search pages (www)\n *  - priceslider on request\n *  - start up lastbooked\n */\n\nrequire(['config'], function(){\n  require(['jquery'], function ($) {\n    \"use strict\";\n\n    // search specific stuff here\n\n    /*\n     * Load price slider on request\n     */\n\n    // check if on price tab\n    if ($('.filterbox ul.tabs_nav li.active a').data('href') === '#price-tab') {\n      require(['pupriceslider']);\n    } else {\n      // init the price range slider when tab shows\n      $(document).on('pu.sidebar.tabchange', function (evt) {\n        if (evt.tab == '#price-tab') {\n          // no more event handling on tab change\n          $(document).off('pu.sidebar.tabchange');\n          require(['pupriceslider']);\n        }\n      });\n    }\n\n    /*\n     * Load last booked now but async\n     */\n    require(['lastbooked']);\n  });\n});\n^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@\n```\n\nEven restarting gunicorns they are still like that. As stated editing the file has no effect, deleting it and recreating it fixes it.\n\nIt's not always at the end of the file too.\n\nFile contents:\n\n```\ncat -v pitchup/static/js/search.js\n/*\n * search.js\n * search javascript for search pages (www)\n *  - priceslider on request\n *  - start up lastbooked\n */\n\nrequirejs.config({\n  \"paths\": {\n    // define jquery as empty since already on page\n    \"jquery\": \"empty:\"\n  }\n});\n\n\nrequire(['jquery'], function ($) {\n  \"use strict\";\n\n  // search specific stuff here\n\n  /*\n   * Load price slider on request\n   */\n\n  // check if on price tab\n  if ($('.filterbox ul.tabs_nav li.active a').data('href') === '#price-tab') {\n    require(['pupriceslider']);\n  } else {\n    // init the price range slider when tab shows\n    $(document).on('pu.sidebar.tabchange', function (evt) {\n      if (evt.tab == '#price-tab') {\n        // no more event handling on tab change\n        $(document).off('pu.sidebar.tabchange');\n        require(['pupriceslider']);\n      }\n    });\n  }\n\n  /*\n   * Load last booked now but async\n   */\n  require(['lastbooked']);\n});\n\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/101", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/101/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/101/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/101/events", "html_url": "https://github.com/evansd/whitenoise/issues/101", "id": 166281291, "node_id": "MDU6SXNzdWUxNjYyODEyOTE=", "number": 101, "title": "WHITENOISE_STATIC_PREFIX does not work", "user": {"login": "pinguin999", "id": 1874603, "node_id": "MDQ6VXNlcjE4NzQ2MDM=", "avatar_url": "https://avatars2.githubusercontent.com/u/1874603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pinguin999", "html_url": "https://github.com/pinguin999", "followers_url": "https://api.github.com/users/pinguin999/followers", "following_url": "https://api.github.com/users/pinguin999/following{/other_user}", "gists_url": "https://api.github.com/users/pinguin999/gists{/gist_id}", "starred_url": "https://api.github.com/users/pinguin999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pinguin999/subscriptions", "organizations_url": "https://api.github.com/users/pinguin999/orgs", "repos_url": "https://api.github.com/users/pinguin999/repos", "events_url": "https://api.github.com/users/pinguin999/events{/privacy}", "received_events_url": "https://api.github.com/users/pinguin999/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2016-07-19T09:01:13Z", "updated_at": "2016-07-27T14:10:24Z", "closed_at": "2016-07-26T12:47:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi devs,\n\nI want to use the WHITENOISE_STATIC_PREFIX in django settings file. \n\nAs I can see there is no point in the code where WHITENOISE_STATIC_PREFIX is read. \n\nAnd the GitHub Search only finds WHITENOISE_STATIC_PREFIX in the docs and the change log.\n\nAnd https://github.com/evansd/whitenoise/commit/a4a4556f5e86fdf4abaf1b48ada55a23ed58dedd looks like not adding this at all.\n\nThx for any help\nKolja\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/100", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/100/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/100/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/100/events", "html_url": "https://github.com/evansd/whitenoise/issues/100", "id": 165567705, "node_id": "MDU6SXNzdWUxNjU1Njc3MDU=", "number": 100, "title": "middleware order", "user": {"login": "kevinmickey", "id": 6294082, "node_id": "MDQ6VXNlcjYyOTQwODI=", "avatar_url": "https://avatars1.githubusercontent.com/u/6294082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmickey", "html_url": "https://github.com/kevinmickey", "followers_url": "https://api.github.com/users/kevinmickey/followers", "following_url": "https://api.github.com/users/kevinmickey/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmickey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmickey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmickey/subscriptions", "organizations_url": "https://api.github.com/users/kevinmickey/orgs", "repos_url": "https://api.github.com/users/kevinmickey/repos", "events_url": "https://api.github.com/users/kevinmickey/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmickey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-07-14T13:54:12Z", "updated_at": "2016-07-18T11:18:43Z", "closed_at": "2016-07-17T20:52:42Z", "author_association": "NONE", "active_lock_reason": null, "body": "The documentation says to place whitenoise middleware above all others apart from Django's SecurityMiddleware (http://whitenoise.evans.io/en/stable/django.html#enable-whitenoise).  That works for [1.9 when it's at the top](https://docs.djangoproject.com/en/1.9/topics/http/middleware/) but [1.8 puts it at the bottom](https://docs.djangoproject.com/en/1.8/topics/http/middleware/).\n\nI don't know if security can be put at the top for 1.8, or if the docs need more clarification here.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/99", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/99/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/99/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/99/events", "html_url": "https://github.com/evansd/whitenoise/issues/99", "id": 165447936, "node_id": "MDU6SXNzdWUxNjU0NDc5MzY=", "number": 99, "title": "Any URIs with unicode characters in them throw an exception in middleware", "user": {"login": "foslock", "id": 759549, "node_id": "MDQ6VXNlcjc1OTU0OQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/759549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/foslock", "html_url": "https://github.com/foslock", "followers_url": "https://api.github.com/users/foslock/followers", "following_url": "https://api.github.com/users/foslock/following{/other_user}", "gists_url": "https://api.github.com/users/foslock/gists{/gist_id}", "starred_url": "https://api.github.com/users/foslock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/foslock/subscriptions", "organizations_url": "https://api.github.com/users/foslock/orgs", "repos_url": "https://api.github.com/users/foslock/repos", "events_url": "https://api.github.com/users/foslock/events{/privacy}", "received_events_url": "https://api.github.com/users/foslock/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-13T23:57:35Z", "updated_at": "2016-08-09T21:18:44Z", "closed_at": "2016-08-09T21:18:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "Whenever a URI is processed through the **whitenoise** middleware, if there are any unicode characters in that URI, an exception is thrown and results in a 500 error if being run in a Django server. This **only occurs when the _autorefresh_ setting is *True***. It seemingly only affects development environments.\n\nFor example:\n\n``` bash\n$ curl -X GET http://127.0.0.1:8000/static/\uf8ff\n```\n\nwill result in a stack trace like so, which is an uncaught exception in Django middleware, causing a 500.\n\n``` python\nTraceback (most recent call last):\n  File \".../lib/python2.7/wsgiref/handlers.py\", line 85, in run\n    self.result = application(self.environ, self.start_response)\n  File \".../lib/python2.7/site-packages/whitenoise/base.py\", line 57, in __call__\n    static_file = self.find_file(environ['PATH_INFO'])\n  File \".../lib/python2.7/site-packages/whitenoise/django.py\", line 75, in find_file\n    if self.use_finders and url.startswith(self.static_prefix):\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe2 in position 78: ordinal not in range(128)\n```\n\nThis can be reproduced on a bare Django project (I am using v1.9.6, Python 2.7.11) simply by configuring the STATIC_URL and adding the whitenoise middleware.\n\nLooking in the library, it seems like when the **PATH_INFO** environment variable is pulled (whitenoise/base.py:57), it is left as a plain byte string instead of being decoded into a unicode object. Decoding this str object at this spot seems to fix my issue, but I don't know if other places need this as well.\n\nIt seems the crux of this error can be reproduced by the following code:\n\n``` python\n>>> b\"\uf8ff\"\n'\\xef\\xa3\\xbf'\n>>> b\"\uf8ff\".startswith(u\"some text\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 0: ordinal not in range(128)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/evansd/whitenoise/issues/98", "repository_url": "https://api.github.com/repos/evansd/whitenoise", "labels_url": "https://api.github.com/repos/evansd/whitenoise/issues/98/labels{/name}", "comments_url": "https://api.github.com/repos/evansd/whitenoise/issues/98/comments", "events_url": "https://api.github.com/repos/evansd/whitenoise/issues/98/events", "html_url": "https://github.com/evansd/whitenoise/issues/98", "id": 163854836, "node_id": "MDU6SXNzdWUxNjM4NTQ4MzY=", "number": 98, "title": "Use stream compression.", "user": {"login": "pahaz", "id": 1394025, "node_id": "MDQ6VXNlcjEzOTQwMjU=", "avatar_url": "https://avatars2.githubusercontent.com/u/1394025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pahaz", "html_url": "https://github.com/pahaz", "followers_url": "https://api.github.com/users/pahaz/followers", "following_url": "https://api.github.com/users/pahaz/following{/other_user}", "gists_url": "https://api.github.com/users/pahaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pahaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pahaz/subscriptions", "organizations_url": "https://api.github.com/users/pahaz/orgs", "repos_url": "https://api.github.com/users/pahaz/repos", "events_url": "https://api.github.com/users/pahaz/events{/privacy}", "received_events_url": "https://api.github.com/users/pahaz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2016-07-05T13:47:36Z", "updated_at": "2016-07-05T14:26:42Z", "closed_at": "2016-07-05T14:18:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "It`s bad idea use `data = file.read()` for compression.\n\nIf file have large size?\n", "performed_via_github_app": null, "score": 1.0}]}