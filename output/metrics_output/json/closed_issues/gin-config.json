{"total_count": 27, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/google/gin-config/issues/77", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/77/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/77/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/77/events", "html_url": "https://github.com/google/gin-config/issues/77", "id": 650960287, "node_id": "MDU6SXNzdWU2NTA5NjAyODc=", "number": 77, "title": "Python 3.7 throws error \"future feature google_type_annotations is not defined\"", "user": {"login": "essandess", "id": 3449314, "node_id": "MDQ6VXNlcjM0NDkzMTQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/3449314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/essandess", "html_url": "https://github.com/essandess", "followers_url": "https://api.github.com/users/essandess/followers", "following_url": "https://api.github.com/users/essandess/following{/other_user}", "gists_url": "https://api.github.com/users/essandess/gists{/gist_id}", "starred_url": "https://api.github.com/users/essandess/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/essandess/subscriptions", "organizations_url": "https://api.github.com/users/essandess/orgs", "repos_url": "https://api.github.com/users/essandess/repos", "events_url": "https://api.github.com/users/essandess/events{/privacy}", "received_events_url": "https://api.github.com/users/essandess/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-04T21:40:26Z", "updated_at": "2020-07-09T17:18:05Z", "closed_at": "2020-07-09T17:18:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "> `$ python3 -c 'import sys; print(sys.version); import gin'`\r\n```\r\n3.7.7 (default, Mar 14 2020, 02:39:38) \r\n[Clang 11.0.0 (clang-1100.0.33.17)]\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gin/__init__.py\", line 17, in <module>\r\n    from gin.config import add_config_file_search_path\r\n  File \"/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/gin/config.py\", line 87\r\n    from __future__ import google_type_annotations\r\n    ^\r\nSyntaxError: future feature google_type_annotations is not defined\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/75", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/75/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/75/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/75/events", "html_url": "https://github.com/google/gin-config/issues/75", "id": 641951611, "node_id": "MDU6SXNzdWU2NDE5NTE2MTE=", "number": 75, "title": "Unsure how to parameterise class methods", "user": {"login": "hemmer", "id": 915048, "node_id": "MDQ6VXNlcjkxNTA0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/915048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hemmer", "html_url": "https://github.com/hemmer", "followers_url": "https://api.github.com/users/hemmer/followers", "following_url": "https://api.github.com/users/hemmer/following{/other_user}", "gists_url": "https://api.github.com/users/hemmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/hemmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hemmer/subscriptions", "organizations_url": "https://api.github.com/users/hemmer/orgs", "repos_url": "https://api.github.com/users/hemmer/repos", "events_url": "https://api.github.com/users/hemmer/events{/privacy}", "received_events_url": "https://api.github.com/users/hemmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-06-19T13:00:06Z", "updated_at": "2020-06-22T07:41:24Z", "closed_at": "2020-06-22T07:41:24Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm not sure if this is possible but I would like to gin-parametrise a class method:\r\n\r\n```\r\nimport gin\r\n\r\n\r\n@gin.configurable\r\ndef func_static(b):\r\n    print(\"a\", b)\r\n\r\n@gin.configurable\r\nclass Test():\r\n    @gin.configurable\r\n    def func(self, b):\r\n        print(\"a\", b)\r\n\r\nif __name__ == '__main__':\r\n    # works\r\n    gin.parse_config(\"func_static.b = 'b'\")\r\n    func_static()\r\n\r\n    # doesnt work\r\n    gin.parse_config(\"Test.func.b = 'b'\")\r\n    Test().printa()\r\n```\r\n\r\nI get the same issue if I remove either of the gin.configurable statements from the class Test(). Is this supported?  \r\n\r\n```gin-config                0.3.0     ```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/63", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/63/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/63/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/63/events", "html_url": "https://github.com/google/gin-config/issues/63", "id": 591428927, "node_id": "MDU6SXNzdWU1OTE0Mjg5Mjc=", "number": 63, "title": "Getting \"no module named gin.torch\" when doing \"import gin.torch\"", "user": {"login": "pseeth", "id": 1054895, "node_id": "MDQ6VXNlcjEwNTQ4OTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/1054895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pseeth", "html_url": "https://github.com/pseeth", "followers_url": "https://api.github.com/users/pseeth/followers", "following_url": "https://api.github.com/users/pseeth/following{/other_user}", "gists_url": "https://api.github.com/users/pseeth/gists{/gist_id}", "starred_url": "https://api.github.com/users/pseeth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pseeth/subscriptions", "organizations_url": "https://api.github.com/users/pseeth/orgs", "repos_url": "https://api.github.com/users/pseeth/repos", "events_url": "https://api.github.com/users/pseeth/events{/privacy}", "received_events_url": "https://api.github.com/users/pseeth/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-31T21:08:37Z", "updated_at": "2020-03-31T21:43:05Z", "closed_at": "2020-03-31T21:43:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "I set up a new environment using this sequence of commands:\r\n\r\n    conda create -n test-gin python=3.7\r\n    conda activate test-gin\r\n    pip install torch\r\n    pip install gin-config\r\n    python -c \"import gin.torch\"\r\n\r\nThis results in the following:\r\n\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n    ModuleNotFoundError: No module named 'gin.torch'\r\n\r\nUnsure what's going wrong.\r\n\r\nThanks in advance for the help! ``gin`` is quite cool and working well for me otherwise.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/55", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/55/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/55/events", "html_url": "https://github.com/google/gin-config/issues/55", "id": 577284571, "node_id": "MDU6SXNzdWU1NzcyODQ1NzE=", "number": 55, "title": "Example of using the command line functionality", "user": {"login": "caseyjconger", "id": 20136730, "node_id": "MDQ6VXNlcjIwMTM2NzMw", "avatar_url": "https://avatars3.githubusercontent.com/u/20136730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/caseyjconger", "html_url": "https://github.com/caseyjconger", "followers_url": "https://api.github.com/users/caseyjconger/followers", "following_url": "https://api.github.com/users/caseyjconger/following{/other_user}", "gists_url": "https://api.github.com/users/caseyjconger/gists{/gist_id}", "starred_url": "https://api.github.com/users/caseyjconger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/caseyjconger/subscriptions", "organizations_url": "https://api.github.com/users/caseyjconger/orgs", "repos_url": "https://api.github.com/users/caseyjconger/repos", "events_url": "https://api.github.com/users/caseyjconger/events{/privacy}", "received_events_url": "https://api.github.com/users/caseyjconger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-03-07T05:56:09Z", "updated_at": "2020-04-02T04:32:40Z", "closed_at": "2020-03-11T00:27:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Do you think you guys could provide an example of passing configurable parameters via command line?\r\n\r\nRegardless, thank you to everyone involved with gin-config! I had been hacking something together along these lines but you guys came along and saved me a lot of effort producing something that does half as much. Great work!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/51", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/51/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/51/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/51/events", "html_url": "https://github.com/google/gin-config/issues/51", "id": 557775703, "node_id": "MDU6SXNzdWU1NTc3NzU3MDM=", "number": 51, "title": "Feature Request: Parse within Python", "user": {"login": "corynezin", "id": 30993572, "node_id": "MDQ6VXNlcjMwOTkzNTcy", "avatar_url": "https://avatars1.githubusercontent.com/u/30993572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/corynezin", "html_url": "https://github.com/corynezin", "followers_url": "https://api.github.com/users/corynezin/followers", "following_url": "https://api.github.com/users/corynezin/following{/other_user}", "gists_url": "https://api.github.com/users/corynezin/gists{/gist_id}", "starred_url": "https://api.github.com/users/corynezin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/corynezin/subscriptions", "organizations_url": "https://api.github.com/users/corynezin/orgs", "repos_url": "https://api.github.com/users/corynezin/repos", "events_url": "https://api.github.com/users/corynezin/events{/privacy}", "received_events_url": "https://api.github.com/users/corynezin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-30T21:47:57Z", "updated_at": "2020-01-30T21:52:34Z", "closed_at": "2020-01-30T21:52:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like for the following to be valid:\r\n```\r\ngin.parse_line('foo.x=1')\r\n```\r\nSo I can inject values programatically.\r\n\r\nThoughts?\r\n\r\nEdit: I see this is achievable with `gin.parse_config`, somehow I missed it!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/50", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/50/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/50/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/50/events", "html_url": "https://github.com/google/gin-config/issues/50", "id": 557083304, "node_id": "MDU6SXNzdWU1NTcwODMzMDQ=", "number": 50, "title": "AttributeError: module 'tensorflow._api.v1.io.gfile' has no attribute 'FastGFile'", "user": {"login": "rbtirumala", "id": 57397605, "node_id": "MDQ6VXNlcjU3Mzk3NjA1", "avatar_url": "https://avatars0.githubusercontent.com/u/57397605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rbtirumala", "html_url": "https://github.com/rbtirumala", "followers_url": "https://api.github.com/users/rbtirumala/followers", "following_url": "https://api.github.com/users/rbtirumala/following{/other_user}", "gists_url": "https://api.github.com/users/rbtirumala/gists{/gist_id}", "starred_url": "https://api.github.com/users/rbtirumala/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rbtirumala/subscriptions", "organizations_url": "https://api.github.com/users/rbtirumala/orgs", "repos_url": "https://api.github.com/users/rbtirumala/repos", "events_url": "https://api.github.com/users/rbtirumala/events{/privacy}", "received_events_url": "https://api.github.com/users/rbtirumala/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-29T19:58:43Z", "updated_at": "2020-03-05T22:02:25Z", "closed_at": "2020-03-05T21:59:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have Jetpack 4.2, Tensorflow 1.15.0. Need help. I had tf 2.0 and read that previous versions would fix but it didn't. Any help appreciated", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/42", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/42/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/42/events", "html_url": "https://github.com/google/gin-config/issues/42", "id": 540982122, "node_id": "MDU6SXNzdWU1NDA5ODIxMjI=", "number": 42, "title": "Can't cloudpickle gin-configured class", "user": {"login": "piojanu", "id": 23562932, "node_id": "MDQ6VXNlcjIzNTYyOTMy", "avatar_url": "https://avatars0.githubusercontent.com/u/23562932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/piojanu", "html_url": "https://github.com/piojanu", "followers_url": "https://api.github.com/users/piojanu/followers", "following_url": "https://api.github.com/users/piojanu/following{/other_user}", "gists_url": "https://api.github.com/users/piojanu/gists{/gist_id}", "starred_url": "https://api.github.com/users/piojanu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/piojanu/subscriptions", "organizations_url": "https://api.github.com/users/piojanu/orgs", "repos_url": "https://api.github.com/users/piojanu/repos", "events_url": "https://api.github.com/users/piojanu/events{/privacy}", "received_events_url": "https://api.github.com/users/piojanu/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-20T12:56:29Z", "updated_at": "2020-01-06T16:47:39Z", "closed_at": "2020-01-06T16:47:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running this code...\r\n```\r\nimport cloudpickle\r\nimport gin\r\nimport pickle\r\n\r\n\r\n@gin.configurable\r\ndef msg_fn(msg):\r\n    return msg\r\n\r\n\r\n@gin.configurable\r\nclass Foo:\r\n    def __init__(self, msg_fn):\r\n        self.msg = msg_fn()\r\n\r\n\r\nconfig = \"\"\"\r\nmsg_fn.msg = \"Hello World\"\r\nFoo.msg_fn = @msg_fn\r\n\"\"\"\r\ngin.parse_config(config)\r\n\r\ntry:\r\n    pkl = pickle.dumps(Foo)\r\n    foo = pickle.loads(pkl)()\r\n    print(\"Can pickle: {}!\".format(foo.msg))\r\nexcept:\r\n    print(\"Can't pickle!\")\r\n\r\ntry:\r\n    cpkl = cloudpickle.dumps(Foo)\r\n    foo = cloudpickle.loads(cpkl)()\r\n    print(\"Can cloudpickle: {}!\".format(foo.msg))\r\nexcept:\r\n    print(\"Can't cloudpickle!\")\r\n```\r\n...prints:\r\n```\r\nCan pickle: Hello World!!\r\nCan't cloudpickle!\r\n```\r\n\r\nCloudpickle rises Error on `cloudpickle.dumps()`: `TypeError: can't pickle _thread.lock objects`.\r\n\r\nThis is a problem, because [Ray](https://ray.readthedocs.io/en/latest/index.html) uses cloudpickle to serialize objects. We can't send gin configurable classes to Ray actors or Ray object store (with `ray.put`). Is it a bug or should it be done differently? I didn't know where to open this issue (in cloudpickle, ray or here). Can you help us with this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/34", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/34/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/34/events", "html_url": "https://github.com/google/gin-config/issues/34", "id": 508727558, "node_id": "MDU6SXNzdWU1MDg3Mjc1NTg=", "number": 34, "title": "Load gin config to 1 function or as a dict", "user": {"login": "chledowski", "id": 24462884, "node_id": "MDQ6VXNlcjI0NDYyODg0", "avatar_url": "https://avatars2.githubusercontent.com/u/24462884?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chledowski", "html_url": "https://github.com/chledowski", "followers_url": "https://api.github.com/users/chledowski/followers", "following_url": "https://api.github.com/users/chledowski/following{/other_user}", "gists_url": "https://api.github.com/users/chledowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/chledowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chledowski/subscriptions", "organizations_url": "https://api.github.com/users/chledowski/orgs", "repos_url": "https://api.github.com/users/chledowski/repos", "events_url": "https://api.github.com/users/chledowski/events{/privacy}", "received_events_url": "https://api.github.com/users/chledowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-17T21:22:14Z", "updated_at": "2019-10-17T23:28:22Z", "closed_at": "2019-10-17T23:28:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. Thanks for your nice work.\r\n\r\nI am using gin to configure my experiments. Next, while visualizing results in a Jupyter Notebook, I would like to be able to load only my model parameters from the `.gin` file. \r\n\r\nIs there a way to just load the `.gin` params to only one function? Or just to load it as a dict?\r\n\r\nThanks :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/33", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/33/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/33/events", "html_url": "https://github.com/google/gin-config/issues/33", "id": 500275911, "node_id": "MDU6SXNzdWU1MDAyNzU5MTE=", "number": 33, "title": "unable to leverage imports due to 'Failed to parse token' ; SyntaxError: Expected '='. ; ModuleNotFoundError: No module named ; SyntaxError: malformed node or string", "user": {"login": "bionicles", "id": 24532336, "node_id": "MDQ6VXNlcjI0NTMyMzM2", "avatar_url": "https://avatars2.githubusercontent.com/u/24532336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bionicles", "html_url": "https://github.com/bionicles", "followers_url": "https://api.github.com/users/bionicles/followers", "following_url": "https://api.github.com/users/bionicles/following{/other_user}", "gists_url": "https://api.github.com/users/bionicles/gists{/gist_id}", "starred_url": "https://api.github.com/users/bionicles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bionicles/subscriptions", "organizations_url": "https://api.github.com/users/bionicles/orgs", "repos_url": "https://api.github.com/users/bionicles/repos", "events_url": "https://api.github.com/users/bionicles/events{/privacy}", "received_events_url": "https://api.github.com/users/bionicles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-30T13:25:22Z", "updated_at": "2019-10-17T22:50:31Z", "closed_at": "2019-10-17T22:50:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "We'd like to configure our modular project with gin but the imports always break:\r\n\r\n`import nature`\r\n\r\n```\r\n  File \"config.gin\", line 3\r\n    FC = nature.FC\r\n        ^\r\nSyntaxError: malformed node or string: <_ast.Name object at 0x7f5aeb65b0f0>\r\n    Failed to parse token 'nature'\r\n```\r\n\r\n`from nature import *`\r\n```\r\n  File \"config.gin\", line 1\r\n    from nature import *\r\n        ^\r\nSyntaxError: Expected '='.\r\n```\r\n\r\n`import nature.bricks.built_in.fc.FC`\r\n```\r\nModuleNotFoundError: No module named 'nature.bricks.built_in.fc.FC'; 'nature.bricks.built_in.fc' is not a package\r\n  In file \"config.gin\", line 1\r\n    import nature.bricks.built_in.fc.FC\r\n```\r\n\r\n`import nature.bricks.built_in.fc`\r\n```\r\n\r\n  File \"config.gin\", line 23\r\n    Layer.layer_fn = fc.FC\r\n                    ^\r\nSyntaxError: malformed node or string: <_ast.Name object at 0x7fa62799bba8>\r\n    Failed to parse token 'fc'\r\n```\r\n\r\nFC is decorated with @gin.configurable and we import nature in the normal python file which invokes `gin.parse_config_file`\r\n\r\nmaybe if \"gin\" files were .py files, then the imports would work, but as it stands, gin doesn't work like normal python because it's a separate/reinvented format, and thus always fails on imports, aliases, functions", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/32", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/32/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/32/events", "html_url": "https://github.com/google/gin-config/issues/32", "id": 499448011, "node_id": "MDU6SXNzdWU0OTk0NDgwMTE=", "number": 32, "title": "gin.operative_config_str() does not show values changed during unlock", "user": {"login": "miguelvr", "id": 7456627, "node_id": "MDQ6VXNlcjc0NTY2Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7456627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelvr", "html_url": "https://github.com/miguelvr", "followers_url": "https://api.github.com/users/miguelvr/followers", "following_url": "https://api.github.com/users/miguelvr/following{/other_user}", "gists_url": "https://api.github.com/users/miguelvr/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelvr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelvr/subscriptions", "organizations_url": "https://api.github.com/users/miguelvr/orgs", "repos_url": "https://api.github.com/users/miguelvr/repos", "events_url": "https://api.github.com/users/miguelvr/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelvr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-27T13:30:49Z", "updated_at": "2019-09-30T07:38:16Z", "closed_at": "2019-09-30T07:38:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a function that generates a random seed integer if None is provided. \r\n\r\nBecause I want to make my experiments reproducible I need to dump the exact value of the random seed in the config. I am using `gin.operative_config_str()` to do so. However, this string logs `None` for a seed value instead of the overloaded one.\r\n\r\nSimple example:\r\n\r\n```python\r\nimport gin\r\nimport random\r\nimport numpy as np\r\n\r\n\r\ndef set_random_seed(seed=None):\r\n    if seed is None:\r\n        seed = random.randint(0, 1024)\r\n\r\n    random.seed(seed)\r\n    np.random.seed(seed)\r\n    return seed\r\n\r\n\r\n@gin.configurable('experiment')\r\ndef confgurable_fn(arg1, seed=None):\r\n    seed = set_random_seed(seed)\r\n\r\n    with gin.unlock_config():\r\n        gin.bind_parameter(\"experiment.seed\", seed)\r\n    return {'arg1': arg1, 'seed': seed}\r\n\r\n\r\nif __name__ == '__main__':\r\n    gin.bind_parameter('experiment.arg1', 1)\r\n    confgurable_fn()\r\n    print(gin.operative_config_str())\r\n```\r\n\r\nWhich prints\r\n\r\n```\r\n# Parameters for experiment:\r\n# ==============================================================================\r\nexperiment.arg1 = 1\r\nexperiment.seed = None\r\n```\r\n\r\nIs this the expected behaviour? If so, is there any workaround?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/28", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/28/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/28/events", "html_url": "https://github.com/google/gin-config/issues/28", "id": 489060371, "node_id": "MDU6SXNzdWU0ODkwNjAzNzE=", "number": 28, "title": "List of external configurables", "user": {"login": "miguelvr", "id": 7456627, "node_id": "MDQ6VXNlcjc0NTY2Mjc=", "avatar_url": "https://avatars3.githubusercontent.com/u/7456627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelvr", "html_url": "https://github.com/miguelvr", "followers_url": "https://api.github.com/users/miguelvr/followers", "following_url": "https://api.github.com/users/miguelvr/following{/other_user}", "gists_url": "https://api.github.com/users/miguelvr/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelvr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelvr/subscriptions", "organizations_url": "https://api.github.com/users/miguelvr/orgs", "repos_url": "https://api.github.com/users/miguelvr/repos", "events_url": "https://api.github.com/users/miguelvr/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelvr/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-04T09:55:58Z", "updated_at": "2019-09-04T15:06:33Z", "closed_at": "2019-09-04T11:34:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to pass a list of external configurables in the gin configuration?\r\n\r\nSomething on the lines of:\r\n\r\n```python\r\nbuild_transforms.transforms_list = [\r\n    @transform1,\r\n    @transform2,\r\n    @transform3\r\n]\r\n\r\ntransform1.param = 1\r\ntransform3.other_param = 2\r\n```\r\n\r\nAnd if not, is there any way of achieving a similar result?\r\n\r\nI need to be able to control the data transforms pipeline and set each transform's parameters individually", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/27", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/27/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/27/events", "html_url": "https://github.com/google/gin-config/issues/27", "id": 487822696, "node_id": "MDU6SXNzdWU0ODc4MjI2OTY=", "number": 27, "title": "[Feature Requests] Support configuration aliases / names that persist through code refactoring", "user": {"login": "yzhuang", "id": 423730, "node_id": "MDQ6VXNlcjQyMzczMA==", "avatar_url": "https://avatars0.githubusercontent.com/u/423730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yzhuang", "html_url": "https://github.com/yzhuang", "followers_url": "https://api.github.com/users/yzhuang/followers", "following_url": "https://api.github.com/users/yzhuang/following{/other_user}", "gists_url": "https://api.github.com/users/yzhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/yzhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yzhuang/subscriptions", "organizations_url": "https://api.github.com/users/yzhuang/orgs", "repos_url": "https://api.github.com/users/yzhuang/repos", "events_url": "https://api.github.com/users/yzhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/yzhuang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-01T00:00:28Z", "updated_at": "2019-09-02T21:23:07Z", "closed_at": "2019-09-02T20:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello project maintainers,\r\n\r\nWe started evaluating gin-config for wider use in some of our projects. One thing I noticed is that gin config files are tied to symbol names in code (i.e. class names and function names). \r\n\r\nIn repositories with high change velocity, refactoring class and function names tend to break their associated config files. Could you provide a functionality to specify stable aliases for configuration names? For example, like this:\r\n\r\n```\r\n@gin.configurable(alias=model_training_config)\r\ndef train_model(learning_rate):\r\n  pass\r\n```\r\n\r\n```\r\nmodel_training_config.learning_rate=0.001\r\n```\r\n\r\nThe goal is that when we refactor and change the function name, it's associated configuration should not break.  This functionality is usually available in dependency injection frameworks in general.\r\n\r\nThank you very much for your time.\r\n\r\n-Yi", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/24", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/24/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/24/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/24/events", "html_url": "https://github.com/google/gin-config/issues/24", "id": 458882807, "node_id": "MDU6SXNzdWU0NTg4ODI4MDc=", "number": 24, "title": "configurable error with pytorch bottleneck profiler ", "user": {"login": "mnoukhov", "id": 3391297, "node_id": "MDQ6VXNlcjMzOTEyOTc=", "avatar_url": "https://avatars1.githubusercontent.com/u/3391297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mnoukhov", "html_url": "https://github.com/mnoukhov", "followers_url": "https://api.github.com/users/mnoukhov/followers", "following_url": "https://api.github.com/users/mnoukhov/following{/other_user}", "gists_url": "https://api.github.com/users/mnoukhov/gists{/gist_id}", "starred_url": "https://api.github.com/users/mnoukhov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mnoukhov/subscriptions", "organizations_url": "https://api.github.com/users/mnoukhov/orgs", "repos_url": "https://api.github.com/users/mnoukhov/repos", "events_url": "https://api.github.com/users/mnoukhov/events{/privacy}", "received_events_url": "https://api.github.com/users/mnoukhov/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-06-20T21:07:38Z", "updated_at": "2019-06-25T20:39:54Z", "closed_at": "2019-06-25T20:39:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "Running pytorch's bottleneck profiler if your script has gin configurables causes an error\r\n`RuntimeError: Attempted to add a new configurable after the config was locked.` or `ValueError: A configurable matching 'some.configurable.module' already exists.`\r\n\r\nIt seems that the profiler runs the script twice using `exec`, once for `cprofile` and once for the autograd profiler (https://github.com/pytorch/pytorch/blob/1aae4b02df797f98239fde511575c96b8d6806da/torch/utils/bottleneck/__main__.py#L210) and on the second run, my guess is that gin tries to recreate configs that already exist, causing this error.\r\n\r\nThis is a pretty niche problem and it's possible for someone to just run `cprofile` and the `autograd` profiler separately but I was wondering if there could be a simple workaround. Is there a way to either reset the configurables created (which could be put at the end of the script), somehow ignore errors, or some other workaround you see? Thanks\r\n\r\nHere's a minimal snippet\r\n```python\r\nimport gin\r\n\r\n\r\n@gin.configurable\r\ndef main(word):\r\n    print(f'hello {word}')\r\n\r\nif __name__ == '__main__':\r\n    main('world')\r\n```\r\nwhen run with `python -m torch.utils.bottleneck script.py` gives the output\r\n\r\n```\r\nRunning environment analysis...\r\nRunning your script with cProfile\r\nhello world\r\nRunning your script with the autograd profiler...\r\nTraceback (most recent call last):\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/torch/utils/bottleneck/__main__.py\", line 231, in <module>\r\n    main()\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/torch/utils/bottleneck/__main__.py\", line 210, in main\r\n    autograd_prof_cpu, autograd_prof_cuda = run_autograd_prof(code, globs)\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/torch/utils/bottleneck/__main__.py\", line 102, in run_autograd_prof\r\n    result = [run_prof(use_cuda=False)]\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/torch/utils/bottleneck/__main__.py\", line 98, in run_prof\r\n    exec(code, globs, None)\r\n  File \"torchgin.py\", line 4, in <module>\r\n    @gin.configurable\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/gin/config.py\", line 1129, in configurable\r\n    return perform_decoration(decoration_target)\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/gin/config.py\", line 1126, in perform_decoration\r\n    return _make_configurable(fn_or_cls, name, module, whitelist, blacklist)\r\n  File \"/home/mnoukhov/miniconda3/envs/selfish/lib/python3.7/site-packages/gin/config.py\", line 891, in _make_configurable\r\n    raise ValueError(err_str.format(selector))\r\nValueError: A configurable matching '__main__.main' already exists.\r\n```\r\nI'm running `pytorch 1.1.0` and `gin-config 0.1.4`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/23", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/23/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/23/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/23/events", "html_url": "https://github.com/google/gin-config/issues/23", "id": 453847445, "node_id": "MDU6SXNzdWU0NTM4NDc0NDU=", "number": 23, "title": "Gin Breaks Jupyter Module Reload", "user": {"login": "xanderdunn", "id": 1313618, "node_id": "MDQ6VXNlcjEzMTM2MTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/1313618?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xanderdunn", "html_url": "https://github.com/xanderdunn", "followers_url": "https://api.github.com/users/xanderdunn/followers", "following_url": "https://api.github.com/users/xanderdunn/following{/other_user}", "gists_url": "https://api.github.com/users/xanderdunn/gists{/gist_id}", "starred_url": "https://api.github.com/users/xanderdunn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xanderdunn/subscriptions", "organizations_url": "https://api.github.com/users/xanderdunn/orgs", "repos_url": "https://api.github.com/users/xanderdunn/repos", "events_url": "https://api.github.com/users/xanderdunn/events{/privacy}", "received_events_url": "https://api.github.com/users/xanderdunn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-09T00:08:10Z", "updated_at": "2019-06-13T00:09:54Z", "closed_at": "2019-06-13T00:09:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm using gin in a Jupyter notebook and I'm unable to reload a module when I've made changes to it.  I'll get an error that the configurables already exist: `ValueError: A configurable matching 'main.get_train_envs' already exists.`\r\n\r\nI tried running this before doing a module reload:\r\n```\r\ntf.reset_default_graph()\r\ngin.config.clear_config()\r\n```\r\nBut this doesn't work because it doesn't clear the gin registry.  \r\n\r\nThis is a real pain because it requires me to restart my Jupyter kernel and re-run every cell in my notebook on any change to any dependency.  Typically this is unnecessary in Jupyter notebook development.  Modules can be automatically reloaded with:\r\n```\r\n%load_ext autoreload\r\n%autoreload 2\r\n```\r\n\r\nOr manually with:\r\n```\r\nimport importlib\r\nimportlib.reload(some_module)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/19", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/19/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/19/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/19/events", "html_url": "https://github.com/google/gin-config/issues/19", "id": 444581633, "node_id": "MDU6SXNzdWU0NDQ1ODE2MzM=", "number": 19, "title": "Unable to bind tf.keras.* classes ", "user": {"login": "kuldeep-techchefs", "id": 17822420, "node_id": "MDQ6VXNlcjE3ODIyNDIw", "avatar_url": "https://avatars3.githubusercontent.com/u/17822420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kuldeep-techchefs", "html_url": "https://github.com/kuldeep-techchefs", "followers_url": "https://api.github.com/users/kuldeep-techchefs/followers", "following_url": "https://api.github.com/users/kuldeep-techchefs/following{/other_user}", "gists_url": "https://api.github.com/users/kuldeep-techchefs/gists{/gist_id}", "starred_url": "https://api.github.com/users/kuldeep-techchefs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kuldeep-techchefs/subscriptions", "organizations_url": "https://api.github.com/users/kuldeep-techchefs/orgs", "repos_url": "https://api.github.com/users/kuldeep-techchefs/repos", "events_url": "https://api.github.com/users/kuldeep-techchefs/events{/privacy}", "received_events_url": "https://api.github.com/users/kuldeep-techchefs/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-15T18:26:52Z", "updated_at": "2019-05-16T05:30:16Z", "closed_at": "2019-05-16T05:30:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "config.gin\r\n\r\nbuild_model.optimizer = @tf.keras.optimizers.Adam()\r\nbuild_model.loss_fn = @tf.keras.losses.sparse_categorical_crossentropy\r\n\r\n---------------------------------------------------------------------------------------------------\r\n\r\n@gin.configurable\r\n def build_model(self, optimizer, loss_fn):\r\n        self.model.compile(optimizer=optimizer,\r\n              loss=loss_fn,\r\n              metrics=['accuracy'])\r\n\r\n---------------------------------------------------------------------------------------------------\r\n\r\nGetting following error\r\n\r\nNo configurable matching reference '@tf.keras.optimizers.Adam()'.\r\n  In file \"../configs/config.gin\", line 4\r\n    build_model.optimizer = @tf.keras.optimizers.Adam()\r\n\r\n---------------------------------------------------------------------------------------------------\r\nBy the way it works fine if I replace @tf.keras.optimizers.Adam() with @tf.train.AdamOptimizer()", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/18", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/18/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/18/events", "html_url": "https://github.com/google/gin-config/issues/18", "id": 440444201, "node_id": "MDU6SXNzdWU0NDA0NDQyMDE=", "number": 18, "title": "can't bind/rebind constant after parsing config", "user": {"login": "leomao", "id": 1811303, "node_id": "MDQ6VXNlcjE4MTEzMDM=", "avatar_url": "https://avatars3.githubusercontent.com/u/1811303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leomao", "html_url": "https://github.com/leomao", "followers_url": "https://api.github.com/users/leomao/followers", "following_url": "https://api.github.com/users/leomao/following{/other_user}", "gists_url": "https://api.github.com/users/leomao/gists{/gist_id}", "starred_url": "https://api.github.com/users/leomao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leomao/subscriptions", "organizations_url": "https://api.github.com/users/leomao/orgs", "repos_url": "https://api.github.com/users/leomao/repos", "events_url": "https://api.github.com/users/leomao/events{/privacy}", "received_events_url": "https://api.github.com/users/leomao/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-05T13:23:21Z", "updated_at": "2019-05-11T11:32:02Z", "closed_at": "2019-05-11T11:32:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Consider a macro is referenced in a config but not bound in that config.  One may want to specify that constant in the program after parsing the config.  For example, consider a configurable function:\r\n```\r\n@gin.configurable\r\ndef func(x):\r\n    return x\r\n```\r\nand the configuration:\r\n```\r\ngin.parse_config('func.x = %num')\r\ngin.constant('num', 20)\r\n\r\nfunc() # error\r\n```\r\nCurrently, the code above will cause `No values supplied by Gin or caller for arguments: ['value']`.  On the other hand, the following code snippet work as expected:\r\n```\r\ngin.constant('num', 20)\r\ngin.parse_config('func.x = %num')\r\n\r\nfunc() # get 20\r\n```\r\nNote that if we bind the macro in the config and rebind it using `gin.constant` afterward:\r\n```\r\ngin.parse_config('''\r\nfunc.x = %num\r\nnum = 10\r\n''')\r\ngin.constant('num', 20)\r\n\r\nfunc() # get 10 instead of 20\r\n```\r\nIt seems that `gin.constant` doesn't affect the config that is parsed before it.  I think this behavior is a bug...?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/16", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/16/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/16/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/16/events", "html_url": "https://github.com/google/gin-config/issues/16", "id": 439546695, "node_id": "MDU6SXNzdWU0Mzk1NDY2OTU=", "number": 16, "title": "configured values sometimes ignored", "user": {"login": "jackd", "id": 659115, "node_id": "MDQ6VXNlcjY1OTExNQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/659115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackd", "html_url": "https://github.com/jackd", "followers_url": "https://api.github.com/users/jackd/followers", "following_url": "https://api.github.com/users/jackd/following{/other_user}", "gists_url": "https://api.github.com/users/jackd/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackd/subscriptions", "organizations_url": "https://api.github.com/users/jackd/orgs", "repos_url": "https://api.github.com/users/jackd/repos", "events_url": "https://api.github.com/users/jackd/events{/privacy}", "received_events_url": "https://api.github.com/users/jackd/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-02T11:38:22Z", "updated_at": "2019-05-02T23:44:45Z", "closed_at": "2019-05-02T23:44:45Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've been witnessing some inconsistent behaviour with basic configuration - some configs are ignored completely. I wish I could be more specific as to when they are ignored and when they aren't, but I'm at a loss as to any kind of pattern.\r\n\r\nMinimal example [here](https://gist.github.com/jackd/f345b1dcd75e0efa53ba912d169852ec)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/15", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/15/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/15/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/15/events", "html_url": "https://github.com/google/gin-config/issues/15", "id": 432390719, "node_id": "MDU6SXNzdWU0MzIzOTA3MTk=", "number": 15, "title": "[bug] `enum34` is always installed as dependency even though I'm on Python 3.4+", "user": {"login": "w4-jaesup", "id": 39186008, "node_id": "MDQ6VXNlcjM5MTg2MDA4", "avatar_url": "https://avatars1.githubusercontent.com/u/39186008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/w4-jaesup", "html_url": "https://github.com/w4-jaesup", "followers_url": "https://api.github.com/users/w4-jaesup/followers", "following_url": "https://api.github.com/users/w4-jaesup/following{/other_user}", "gists_url": "https://api.github.com/users/w4-jaesup/gists{/gist_id}", "starred_url": "https://api.github.com/users/w4-jaesup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/w4-jaesup/subscriptions", "organizations_url": "https://api.github.com/users/w4-jaesup/orgs", "repos_url": "https://api.github.com/users/w4-jaesup/repos", "events_url": "https://api.github.com/users/w4-jaesup/events{/privacy}", "received_events_url": "https://api.github.com/users/w4-jaesup/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-04-12T05:15:29Z", "updated_at": "2019-07-11T22:21:40Z", "closed_at": "2019-07-11T22:21:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "I spotted suspicious change in `setup.py` and left a comment.\r\n(https://github.com/google/gin-config/commit/2cc20e3a3f138d35fe50719a0ff9d7c101545c3f#r33152619)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/12", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/12/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/12/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/12/events", "html_url": "https://github.com/google/gin-config/issues/12", "id": 421444983, "node_id": "MDU6SXNzdWU0MjE0NDQ5ODM=", "number": 12, "title": "Enum constants not reloaded after clear_config", "user": {"login": "MistaGiggles", "id": 289942, "node_id": "MDQ6VXNlcjI4OTk0Mg==", "avatar_url": "https://avatars0.githubusercontent.com/u/289942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MistaGiggles", "html_url": "https://github.com/MistaGiggles", "followers_url": "https://api.github.com/users/MistaGiggles/followers", "following_url": "https://api.github.com/users/MistaGiggles/following{/other_user}", "gists_url": "https://api.github.com/users/MistaGiggles/gists{/gist_id}", "starred_url": "https://api.github.com/users/MistaGiggles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MistaGiggles/subscriptions", "organizations_url": "https://api.github.com/users/MistaGiggles/orgs", "repos_url": "https://api.github.com/users/MistaGiggles/repos", "events_url": "https://api.github.com/users/MistaGiggles/events{/privacy}", "received_events_url": "https://api.github.com/users/MistaGiggles/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-15T10:14:30Z", "updated_at": "2019-05-02T23:52:53Z", "closed_at": "2019-05-02T23:52:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I ran into a rather confusing issue related to using constants_from_enum decorator and gin.clear_config(clear_constants=True). In my code there is a loop over multiple parameter sets that clears the configuration and constants before reparsing the input file.\r\n\r\nMy enum was defined in a separate file which is imported by the config file. The decorator is executed and the constants are added to _CONSTANTS. Once `clear_config(clear_constants=True) `is called these constants are removed.\r\n`parse_config` is called again, but this time `mymodule` has already been imported and is skipped. This means that the decorator is not run again and the enum constants are missing from _CONSTANTS and gin complains that a macro is missing a value.\r\n\r\nThis problem can be avoid by setting `clear_constants=False`, but perhaps gin could prevent this issue by treating enum constants as a special case and not clearing them out?\r\n\r\nBelow is an example recreating the issue\r\n\r\nmymodule.py:\r\n```\r\nimport enum\r\nimport gin\r\n\r\n@gin.constants_from_enum\r\nclass MyEnum(enum.Enum):\r\n    A = 1\r\n    B = 2\r\n```\r\n\r\nmain.py:\r\n```\r\nimport gin\r\n#mymodule can be imported here, with a similar effect\r\n\r\n@gin.configurable\r\ndef myfunc(value):\r\n    print(value)\r\n\r\nfor i in range(3):\r\n\tgin.clear_config(clear_constants=True)\r\n\tgin.parse_config([\r\n\t\t'import mymodule',\r\n\t\t'myfunc.value = %MyEnum.B'\r\n\t])\r\n\r\n\tmyfunc()\r\n```\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/11", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/11/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/11/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/11/events", "html_url": "https://github.com/google/gin-config/issues/11", "id": 415525512, "node_id": "MDU6SXNzdWU0MTU1MjU1MTI=", "number": 11, "title": "Query the value of a macro", "user": {"login": "hemmer", "id": 915048, "node_id": "MDQ6VXNlcjkxNTA0OA==", "avatar_url": "https://avatars1.githubusercontent.com/u/915048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hemmer", "html_url": "https://github.com/hemmer", "followers_url": "https://api.github.com/users/hemmer/followers", "following_url": "https://api.github.com/users/hemmer/following{/other_user}", "gists_url": "https://api.github.com/users/hemmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/hemmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hemmer/subscriptions", "organizations_url": "https://api.github.com/users/hemmer/orgs", "repos_url": "https://api.github.com/users/hemmer/repos", "events_url": "https://api.github.com/users/hemmer/events{/privacy}", "received_events_url": "https://api.github.com/users/hemmer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-28T09:29:09Z", "updated_at": "2019-05-02T23:53:26Z", "closed_at": "2019-05-02T23:53:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to query the value of a macro? I have tried:\r\n\r\n```\r\ngin.parse_config(\"my_macro = 3\")\r\nprint(gin.query_parameter(\"my_macro\"))\r\n```\r\nto which I get the message:\r\n`ValueError: No configurable matching 'my_macro'.`\r\n\r\nSame occurs for `print(gin.query_parameter(\"gin.macro.my_macro\"))` or `print(gin.query_parameter(\"%my_macro\"))`\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/10", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/10/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/10/events", "html_url": "https://github.com/google/gin-config/issues/10", "id": 411493341, "node_id": "MDU6SXNzdWU0MTE0OTMzNDE=", "number": 10, "title": "AttributeError: module 'tensorflow._api.v1.random' has no attribute 'categorical'", "user": {"login": "jinPrelude", "id": 16518993, "node_id": "MDQ6VXNlcjE2NTE4OTkz", "avatar_url": "https://avatars1.githubusercontent.com/u/16518993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinPrelude", "html_url": "https://github.com/jinPrelude", "followers_url": "https://api.github.com/users/jinPrelude/followers", "following_url": "https://api.github.com/users/jinPrelude/following{/other_user}", "gists_url": "https://api.github.com/users/jinPrelude/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinPrelude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinPrelude/subscriptions", "organizations_url": "https://api.github.com/users/jinPrelude/orgs", "repos_url": "https://api.github.com/users/jinPrelude/repos", "events_url": "https://api.github.com/users/jinPrelude/events{/privacy}", "received_events_url": "https://api.github.com/users/jinPrelude/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-02-18T14:09:43Z", "updated_at": "2019-02-20T09:41:22Z", "closed_at": "2019-02-19T07:41:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Problem Definition\r\n\r\nI receive the following error when running `import gin.tf.external_configurables` : \r\n`AttributeError: module 'tensorflow._api.v1.random' has no attribute 'categorical'`\r\n\r\n\r\n### Install Process\r\nI installed `gin-config' via GitHub, and installed older version to avoid the error #9   : \r\n```\r\ngit clone https://github.com/google/gin-config.git\r\ngit checkout 89e9c79d465263ce825e718d90413e2bcffadd64\r\npython -m setup.py install\r\n``` \r\n\r\n### TraceBack\r\n\r\n```\r\nPython 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 05:52:31) \r\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gin.tf.external_configurables\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"<frozen importlib._bootstrap>\", line 971, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 955, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 656, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 626, in _load_backward_compatible\r\n  File \"/Users/user-name/rl/lib/python3.6/site-packages/gin_config-0.1.2-py3.6.egg/gin/tf/external_configurables.py\", line 99, in <module>\r\nAttributeError: module 'tensorflow._api.v1.random' has no attribute 'categorical'\r\n```\r\n\r\n### Versions\r\n```\r\ntensorflow   1.12.0\r\ngin-config   0.1.2\r\n```\r\n\r\nAny assistance is greatly appreciated!!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/9", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/9/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/9/events", "html_url": "https://github.com/google/gin-config/issues/9", "id": 411244396, "node_id": "MDU6SXNzdWU0MTEyNDQzOTY=", "number": 9, "title": "AttributeError: module 'tensorflow._api.v1.io' has no attribute 'gfile'", "user": {"login": "sccrthlt", "id": 3453279, "node_id": "MDQ6VXNlcjM0NTMyNzk=", "avatar_url": "https://avatars0.githubusercontent.com/u/3453279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sccrthlt", "html_url": "https://github.com/sccrthlt", "followers_url": "https://api.github.com/users/sccrthlt/followers", "following_url": "https://api.github.com/users/sccrthlt/following{/other_user}", "gists_url": "https://api.github.com/users/sccrthlt/gists{/gist_id}", "starred_url": "https://api.github.com/users/sccrthlt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sccrthlt/subscriptions", "organizations_url": "https://api.github.com/users/sccrthlt/orgs", "repos_url": "https://api.github.com/users/sccrthlt/repos", "events_url": "https://api.github.com/users/sccrthlt/events{/privacy}", "received_events_url": "https://api.github.com/users/sccrthlt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-02-17T22:35:36Z", "updated_at": "2020-01-30T10:58:16Z", "closed_at": "2019-02-18T22:01:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Problem Definition\r\nI receive the following error when running `import gin.tf`:\r\n`AttributeError: module 'tensorflow._api.v1.io' has no attribute 'gfile'`\r\n\r\n### Install Process\r\nI installed `gin-config` via `pip` inside an existing Anaconda environment:\r\n`pip install gin-config`\r\n\r\n### Traceback\r\n```\r\nPython 3.6.7 |Anaconda custom (64-bit)| (default, Dec 10 2018, 20:35:02) [MSC v.1915 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import gym.tf\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nModuleNotFoundError: No module named 'gym.tf'\r\n>>> import gin.tf\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\18048\\AppData\\Local\\Continuum\\anaconda3\\envs\\base_3_6\\lib\\site-packages\\gin_config-0.1.3-py3.6.egg\\gin\\tf\\__init__.py\", line 20, in <module>\r\n    from gin.tf.utils import GinConfigSaverHook\r\n  File \"C:\\Users\\18048\\AppData\\Local\\Continuum\\anaconda3\\envs\\base_3_6\\lib\\site-packages\\gin_config-0.1.3-py3.6.egg\\gin\\tf\\utils.py\", line 34, in <module>\r\n    config.register_file_reader(tf.io.gfile.GFile, tf.io.gfile.exists)\r\nAttributeError: module 'tensorflow._api.v1.io' has no attribute 'gfile'\r\n```\r\n\r\n### Versions\r\n```\r\ntensorflow                1.12.0\r\ngin-config                0.1.3               \r\n```\r\n\r\nAny assistance is greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/8", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/8/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/8/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/8/events", "html_url": "https://github.com/google/gin-config/issues/8", "id": 408730320, "node_id": "MDU6SXNzdWU0MDg3MzAzMjA=", "number": 8, "title": "Unable to pickle objects bound by `.. = @SomeClass()`", "user": {"login": "Avsecz", "id": 10011161, "node_id": "MDQ6VXNlcjEwMDExMTYx", "avatar_url": "https://avatars3.githubusercontent.com/u/10011161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avsecz", "html_url": "https://github.com/Avsecz", "followers_url": "https://api.github.com/users/Avsecz/followers", "following_url": "https://api.github.com/users/Avsecz/following{/other_user}", "gists_url": "https://api.github.com/users/Avsecz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avsecz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avsecz/subscriptions", "organizations_url": "https://api.github.com/users/Avsecz/orgs", "repos_url": "https://api.github.com/users/Avsecz/repos", "events_url": "https://api.github.com/users/Avsecz/events{/privacy}", "received_events_url": "https://api.github.com/users/Avsecz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-02-11T11:06:26Z", "updated_at": "2019-12-30T11:12:01Z", "closed_at": "2019-07-30T14:30:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm unable to pickle objects that were assigned to the function argument using the following synthax`... = @SomeClass()`.\r\n\r\nConsider the following script:\r\n\r\n```python\r\nimport pickle\r\nimport gin\r\n\r\n\r\n@gin.configurable\r\nclass Example:\r\n    def __init__(self, a):\r\n        self.a = a\r\n\r\n    def __call__(self):\r\n        print(\"hello\", self.a)\r\n        print(\"Pickle:\")\r\n        print(pickle.dumps(self))\r\n\r\n\r\n@gin.configurable\r\ndef say_hello(example):\r\n    print(\"in function say_hello\")\r\n    example()\r\n\r\n\r\nif __name__ == '__main__':\r\n    gin.parse_config_files_and_bindings(config_files=[],\r\n                                        bindings=['say_hello.example = @Example()',\r\n                                                  'Example.a = 1'])\r\n    e = Example()\r\n    e()\r\n    say_hello()\r\n```\r\n\r\nWhen I run it, I get the following error:\r\n```\r\n python script.py\r\nhello 1\r\nPickle:\r\nb'\\x80\\x03c__main__\\nExample\\nq\\x00)\\x81q\\x01}q\\x02X\\x01\\x00\\x00\\x00aq\\x03K\\x01sb.'\r\nin function say_hello\r\nhello 1\r\nPickle:\r\nTraceback (most recent call last):\r\n  File \"script.py\", line 28, in <module>\r\n    say_hello()\r\n  File \"/opt/modules/i12g/anaconda/3-5.0.1/lib/python3.6/site-packages/gin/config.py\", line 1032, in wrapper\r\n    utils.augment_exception_message_and_reraise(e, err_str)\r\n  File \"/opt/modules/i12g/anaconda/3-5.0.1/lib/python3.6/site-packages/gin/utils.py\", line 48, in augment_exception_message_and_reraise\r\n    six.raise_from(proxy.with_traceback(exception.__traceback__), None)\r\n  File \"<string>\", line 3, in raise_from\r\n  File \"/opt/modules/i12g/anaconda/3-5.0.1/lib/python3.6/site-packages/gin/config.py\", line 1009, in wrapper\r\n    return fn(*new_args, **new_kwargs)\r\n  File \"script.py\", line 19, in say_hello\r\n    example()\r\n  File \"script.py\", line 13, in __call__\r\n    print(pickle.dumps(self))\r\n_pickle.PicklingError: Can't pickle <class '__main__.Example'>: it's not the same object as __main__.Example\r\n  In call to configurable 'say_hello' (<function say_hello at 0x7f92c765de18>)\r\n```\r\n\r\nYou can see that the first instance of `Example` could be correctly pickled whereas the second one, bounded to `say_hello.example` argument, couldn't. Any ideas on how to solve this issue? I'm using the recent gin-config package from PyPI (0.1.2) on python 3.6.8.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/7", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/7/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/7/events", "html_url": "https://github.com/google/gin-config/issues/7", "id": 405847173, "node_id": "MDU6SXNzdWU0MDU4NDcxNzM=", "number": 7, "title": "[bug] gin.REQUIRED ignored when default value of a keyword arg", "user": {"login": "lamblin", "id": 178249, "node_id": "MDQ6VXNlcjE3ODI0OQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lamblin", "html_url": "https://github.com/lamblin", "followers_url": "https://api.github.com/users/lamblin/followers", "following_url": "https://api.github.com/users/lamblin/following{/other_user}", "gists_url": "https://api.github.com/users/lamblin/gists{/gist_id}", "starred_url": "https://api.github.com/users/lamblin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lamblin/subscriptions", "organizations_url": "https://api.github.com/users/lamblin/orgs", "repos_url": "https://api.github.com/users/lamblin/repos", "events_url": "https://api.github.com/users/lamblin/events{/privacy}", "received_events_url": "https://api.github.com/users/lamblin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-02-01T19:44:55Z", "updated_at": "2019-09-04T15:07:43Z", "closed_at": "2019-09-04T15:07:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "When a function decorated with `@gin.configurable` is passed `gin.REQUIRED`, not as an explicit value but as the default value of a keyword argument, it does not raise a `RuntimeError`, but happily uses the string value `'__gin_required__'`.\r\n\r\nFor instance, using a slight modification of an example on https://github.com/google/gin-config/blob/master/gin/gin_intro.ipynb:\r\n```python\r\ngin.clear_config()\r\n\r\n@gin.configurable\r\ndef say_hello(name=gin.REQUIRED):\r\n  print(\"Hello %s!\" % name)\r\n\r\ntry:\r\n  say_hello()\r\nexcept RuntimeError as e:\r\n  print('Error message (gin.REQUIRED):', e)\r\n```\r\nActual output:\r\n```\r\nHello __gin_required__!\r\n```\r\nExpected output:\r\n```\r\nError message (gin.REQUIRED): Required bindings for `say_hello` not provided in config: ['name']\r\n```\r\n\r\nNote that explicitly passing `gin.REQUIRED` works as expected:\r\n```python\r\ntry:\r\n  say_hello(gin.REQUIRED)\r\nexcept RuntimeError as e:\r\n  print('Error message (gin.REQUIRED):', e)\r\n```\r\nproduces the expected output:\r\n```\r\nError message (gin.REQUIRED): Required bindings for `say_hello` not provided in config: ['name']\r\n```\r\n\r\nI understand that in such a simple case, I could just declare `def say_hello(name)` and let Python complain about the missing argument. However, it would be really useful to be able to essentially mark a keyword argument as required through `gin`. Moreover, it is really surprising to have different behaviors when the argument is passed explicitly vs. implicitly.\r\n\r\nThis happened with the latest development version.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/6", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/6/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/6/events", "html_url": "https://github.com/google/gin-config/issues/6", "id": 402824058, "node_id": "MDU6SXNzdWU0MDI4MjQwNTg=", "number": 6, "title": "Easy way to export all configuration variables into JSON/Dictionary?", "user": {"login": "bfortuner", "id": 2335896, "node_id": "MDQ6VXNlcjIzMzU4OTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2335896?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bfortuner", "html_url": "https://github.com/bfortuner", "followers_url": "https://api.github.com/users/bfortuner/followers", "following_url": "https://api.github.com/users/bfortuner/following{/other_user}", "gists_url": "https://api.github.com/users/bfortuner/gists{/gist_id}", "starred_url": "https://api.github.com/users/bfortuner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bfortuner/subscriptions", "organizations_url": "https://api.github.com/users/bfortuner/orgs", "repos_url": "https://api.github.com/users/bfortuner/repos", "events_url": "https://api.github.com/users/bfortuner/events{/privacy}", "received_events_url": "https://api.github.com/users/bfortuner/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-01-24T17:48:08Z", "updated_at": "2019-09-04T15:09:41Z", "closed_at": "2019-09-04T15:09:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I would like to store all the configuration values stored in gin at runtime (files, function constants, etc) in my postgres database. Is there an easy way to export everything gin is holding at runtime?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/4", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/4/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/4/events", "html_url": "https://github.com/google/gin-config/issues/4", "id": 398490725, "node_id": "MDU6SXNzdWUzOTg0OTA3MjU=", "number": 4, "title": "Feature Request: Remove restriction to define all configurables before parsing config file?", "user": {"login": "colllin", "id": 185923, "node_id": "MDQ6VXNlcjE4NTkyMw==", "avatar_url": "https://avatars1.githubusercontent.com/u/185923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/colllin", "html_url": "https://github.com/colllin", "followers_url": "https://api.github.com/users/colllin/followers", "following_url": "https://api.github.com/users/colllin/following{/other_user}", "gists_url": "https://api.github.com/users/colllin/gists{/gist_id}", "starred_url": "https://api.github.com/users/colllin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/colllin/subscriptions", "organizations_url": "https://api.github.com/users/colllin/orgs", "repos_url": "https://api.github.com/users/colllin/repos", "events_url": "https://api.github.com/users/colllin/events{/privacy}", "received_events_url": "https://api.github.com/users/colllin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-01-11T23:37:43Z", "updated_at": "2019-01-24T19:30:51Z", "closed_at": "2019-01-24T19:30:51Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm working in a Jupyter notebook.  I would like to `import gin` and `gin.parse_config_file('config.gin')` at the top of the notebook.  Then, inside the notebook, I would like to define a `@gin.configurable` function which is only needed inside this notebook.  Currently, when I do this, I get an error at the point where I parse the config file (before defining the configurable function):\r\n\r\n```\r\nValueError: No configurable matching 'my_function'.\r\n  In file \"config.gin\", line 3\r\n    my_function.my_arg = 'my_string'\r\n```\r\n\r\nIs this behavior intentional?  If so, why?  (I'm fairly new to python, so it could be that there's a great reason for this, but it's not obvious to me.)\r\n\r\nI think this feature request would make gin more flexible and easier to use in this setting, and it seems like a reasonable behavior given that gin already requires configurable names to be unique.  It seems like one of the benefits of gin is providing deep configuration of your python functions and classes, meaning that I can, for example, configure the constructor of a particular class without changing any of the code which instantiates that class to know about the configuration.  So it seems counter-intuitive, then, that the same library would require me to define all of my configurable functions and classes in advance of loading my config file, which essentially means that I need an executable script which is completely independent of any (configurable) function or class definitions.\r\n\r\nWithout knowing the technical complexity of the change, it seems like the only trade-off in supporting this feature request is that we would lose the ability to give this kind of error message (shown above) upon parsing a config file,\u00a0because we wouldn't know in advance whether a particular configurable will ever be defined.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/google/gin-config/issues/1", "repository_url": "https://api.github.com/repos/google/gin-config", "labels_url": "https://api.github.com/repos/google/gin-config/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/google/gin-config/issues/1/comments", "events_url": "https://api.github.com/repos/google/gin-config/issues/1/events", "html_url": "https://github.com/google/gin-config/issues/1", "id": 358972382, "node_id": "MDU6SXNzdWUzNTg5NzIzODI=", "number": 1, "title": "How to bind configurable references using `gin.bind_parameter`?", "user": {"login": "Szkered", "id": 2672146, "node_id": "MDQ6VXNlcjI2NzIxNDY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2672146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Szkered", "html_url": "https://github.com/Szkered", "followers_url": "https://api.github.com/users/Szkered/followers", "following_url": "https://api.github.com/users/Szkered/following{/other_user}", "gists_url": "https://api.github.com/users/Szkered/gists{/gist_id}", "starred_url": "https://api.github.com/users/Szkered/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Szkered/subscriptions", "organizations_url": "https://api.github.com/users/Szkered/orgs", "repos_url": "https://api.github.com/users/Szkered/repos", "events_url": "https://api.github.com/users/Szkered/events{/privacy}", "received_events_url": "https://api.github.com/users/Szkered/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-09-11T09:55:34Z", "updated_at": "2018-09-11T10:56:04Z", "closed_at": "2018-09-11T10:56:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Currently I'm doing some hyperparameter optimization for some gin-configured object, and I need to rebind some configurable references at run-time. I can bind an object to some name using `gin.bind_parameter`, but when I save the config using `gin.operative_config_str()`, the run-time binding is not there. What's the best way to do this? Thanks", "performed_via_github_app": null, "score": 1.0}]}