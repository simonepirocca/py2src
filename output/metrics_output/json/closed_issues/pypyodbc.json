{"total_count": 12, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/92", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/92/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/92/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/92/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/92", "id": 408114611, "node_id": "MDU6SXNzdWU0MDgxMTQ2MTE=", "number": 92, "title": "SQL Query returning wrong data", "user": {"login": "YoloSwag4Jesus420", "id": 27497420, "node_id": "MDQ6VXNlcjI3NDk3NDIw", "avatar_url": "https://avatars0.githubusercontent.com/u/27497420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YoloSwag4Jesus420", "html_url": "https://github.com/YoloSwag4Jesus420", "followers_url": "https://api.github.com/users/YoloSwag4Jesus420/followers", "following_url": "https://api.github.com/users/YoloSwag4Jesus420/following{/other_user}", "gists_url": "https://api.github.com/users/YoloSwag4Jesus420/gists{/gist_id}", "starred_url": "https://api.github.com/users/YoloSwag4Jesus420/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YoloSwag4Jesus420/subscriptions", "organizations_url": "https://api.github.com/users/YoloSwag4Jesus420/orgs", "repos_url": "https://api.github.com/users/YoloSwag4Jesus420/repos", "events_url": "https://api.github.com/users/YoloSwag4Jesus420/events{/privacy}", "received_events_url": "https://api.github.com/users/YoloSwag4Jesus420/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-08T11:35:05Z", "updated_at": "2019-02-08T12:30:34Z", "closed_at": "2019-02-08T12:30:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there so bit of an odd one, the sql query im running is\r\n`SELECT [idPerson] FROM tblPersons WHERE [Email] LIKE 'Joe.Pike%'`\r\n\r\nIf i run this in the server i get my correct personID, however when i run it in my code i get a random personID that doesn't exist, now what is even weirder is that my second bit of code queries based on the personID and that even returns a value\r\n\r\n```\r\nfor row in result:\r\n\tUserName = row[1]+'.'+row[2]\r\n\tPassword = 'XXXXXXXX'\r\n\tEmail = UserName + '@XXXXXXX.org.uk'\r\n\t\r\n\temaillike = [str(row[1]+'.'+row[2]).replace(\"'\", '')+\"%\"]\r\n\r\n\tsql = (\"\"\"SELECT [idPerson] FROM tblPersons WHERE [Email] LIKE {}\"\"\").format(str(emaillike).replace(\"[\",\"\").replace(\"]\",\"\"))\r\n\tPersonId = cursor.execute(sql).fetchone()\r\n    \r\n\tPersonPin = \\\r\n\t    str(cursor.execute('SELECT [Pin] FROM tblPersonPins WHERE [PersonId] = ?'\r\n\t                   , [PersonId[0]]).fetchone()).replace(\"'\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\"\")\r\n\r\n\tprint(sql)\r\n\tprint(emaillike)\r\n\tprint(str(PersonId))\r\n\tprint(PersonPin)\r\n```\r\n\r\nmy print statements return : \r\nSELECT [idPerson] FROM tblPersons WHERE [Email] LIKE 'Joe.Pike%'\r\n['Joe.Pike%']\r\n(105524,)\r\n7271\r\n\r\nI even tried to fetchall rows with Email LIKE but that still only returned one row and that is the 105524 value\r\n\r\nEDIT: The sql server is MSSQL server 2017 and im running Python 3.7.2\r\nIt also appears to be an issue with pyodbc as well as pypyodbc", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/78", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/78/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/78/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/78/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/78", "id": 322664870, "node_id": "MDU6SXNzdWUzMjI2NjQ4NzA=", "number": 78, "title": "Selecting a uniqueidentifier field returns a string that looks like bytes", "user": {"login": "junctionapps", "id": 8778630, "node_id": "MDQ6VXNlcjg3Nzg2MzA=", "avatar_url": "https://avatars3.githubusercontent.com/u/8778630?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junctionapps", "html_url": "https://github.com/junctionapps", "followers_url": "https://api.github.com/users/junctionapps/followers", "following_url": "https://api.github.com/users/junctionapps/following{/other_user}", "gists_url": "https://api.github.com/users/junctionapps/gists{/gist_id}", "starred_url": "https://api.github.com/users/junctionapps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junctionapps/subscriptions", "organizations_url": "https://api.github.com/users/junctionapps/orgs", "repos_url": "https://api.github.com/users/junctionapps/repos", "events_url": "https://api.github.com/users/junctionapps/events{/privacy}", "received_events_url": "https://api.github.com/users/junctionapps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2018-05-14T03:56:58Z", "updated_at": "2018-05-16T23:28:46Z", "closed_at": "2018-05-16T23:28:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not sure if I'm doing something wrong, however, if I select a uuid field from ms sql the console appears to display it as a bytes object by prefixing with b, however, it is actually a str quoted with b''. To get the uuid you need to slice with row['itemid'][2:-1]\r\n\r\nIs that the desired behaviour? Caused some grief when trying to insert the value into another table.\r\n\r\n```\r\n    cursor.execute(\"select voucher_draft.ItemID, voucher_draft.comments \"\r\n                   \"from voucher_draft \"\r\n                   \"where voucher_draft.ExpenseRef = ?\", ('1234123412345', ))\r\n    row = cursor.fetchone()\r\n    print(row['itemid'])\r\n    # yields: b'B335FDAD-DE0B-41DA-BB07-0DA10C04D59A'\r\n    print(type(row['itemid']))\r\n    # yields: <class 'str'>\r\n    print(row['itemid'].upper())\r\n    # yields: B'B335FDAD-DE0B-41DA-BB07-0DA10C04D59A'\r\n    # note the uppercase B \r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/67", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/67/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/67/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/67/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/67", "id": 275427900, "node_id": "MDU6SXNzdWUyNzU0Mjc5MDA=", "number": 67, "title": "'Byte string too long' error, query too long", "user": {"login": "mayurpande", "id": 6522456, "node_id": "MDQ6VXNlcjY1MjI0NTY=", "avatar_url": "https://avatars3.githubusercontent.com/u/6522456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayurpande", "html_url": "https://github.com/mayurpande", "followers_url": "https://api.github.com/users/mayurpande/followers", "following_url": "https://api.github.com/users/mayurpande/following{/other_user}", "gists_url": "https://api.github.com/users/mayurpande/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayurpande/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayurpande/subscriptions", "organizations_url": "https://api.github.com/users/mayurpande/orgs", "repos_url": "https://api.github.com/users/mayurpande/repos", "events_url": "https://api.github.com/users/mayurpande/events{/privacy}", "received_events_url": "https://api.github.com/users/mayurpande/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-20T17:00:19Z", "updated_at": "2018-07-02T15:41:01Z", "closed_at": "2018-07-02T15:41:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems my insert query is too long.\r\n\r\nI have the following settings;\r\n\r\nodbc.ini\r\n\r\n```\r\n[sqlserverdatasource]\r\nDriver = FreeTDS\r\nDescription = ODBC connection via FreeTDS\r\nTrace = No\r\nServername = sqlserver\r\nDatabase = ReadOnly\r\n\r\n```\r\n\r\nodbcinst.ini\r\n```\r\n\r\n[SQL Server]\r\nDescription=TDS driver (Sybase/MS SQL)\r\nDriver=/usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\r\nSetup=/usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\r\nCPTimeout=\r\nCPReuse=\r\nFileUsage=1\r\n\r\n[ODBC Driver 13 for SQL Server]\r\nDescription=Microsoft ODBC Driver 13 for SQL Server\r\nDriver=/opt/microsoft/msodbcsql/lib64/libmsodbcsql-13.1.so.9.1\r\nUsageCount=1\r\n\r\n```\r\n\r\n\r\nfreetds.conf\r\n\r\n```\r\n#   $Id: freetds.conf,v 1.12 2007/12/25 06:02:36 jklowden Exp $\r\n#\r\n# This file is installed by FreeTDS if no file by the same \r\n# name is found in the installation directory.  \r\n#\r\n# For information about the layout of this file and its settings, \r\n# see the freetds.conf manpage \"man freetds.conf\".  \r\n\r\n# Global settings are overridden by those in a database\r\n# server specific section\r\n[global]\r\n        # TDS protocol version\r\n;   tds version = 8.0\r\n\r\n    # Whether to write a TDSDUMP file for diagnostic purposes\r\n    # (setting this to /tmp is insecure on a multi-user system)\r\n;   dump file = /tmp/freetds.log\r\n;   debug flags = 0xffff\r\n\r\n    # Command and connection timeouts\r\n;   timeout = 10\r\n;   connect timeout = 10\r\n\r\n    # If you get out-of-memory errors, it may mean that your client\r\n    # is trying to allocate a huge buffer for a TEXT field.  \r\n    # Try setting 'text size' to a more reasonable limit \r\n    text size = 64512\r\n\r\n# A typical Sybase server\r\n[egServer50]\r\n    host = symachine.domain.com\r\n    port = 5000\r\n    tds version = 8.0\r\n\r\n# A typical Microsoft server\r\n[sqlserver]\r\n    host = xx.xx.xxx.xxx\r\n    port = xxxxx\r\n    tds version = 8.0\r\n\r\n\r\n```\r\n\r\nThe query works fine in MSSql Server. So not sure what it going on.\r\n\r\n\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/64", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/64/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/64/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/64/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/64", "id": 273082778, "node_id": "MDU6SXNzdWUyNzMwODI3Nzg=", "number": 64, "title": "autocommit does not work like pyodbc", "user": {"login": "AlainBouchard", "id": 28354336, "node_id": "MDQ6VXNlcjI4MzU0MzM2", "avatar_url": "https://avatars3.githubusercontent.com/u/28354336?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlainBouchard", "html_url": "https://github.com/AlainBouchard", "followers_url": "https://api.github.com/users/AlainBouchard/followers", "following_url": "https://api.github.com/users/AlainBouchard/following{/other_user}", "gists_url": "https://api.github.com/users/AlainBouchard/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlainBouchard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlainBouchard/subscriptions", "organizations_url": "https://api.github.com/users/AlainBouchard/orgs", "repos_url": "https://api.github.com/users/AlainBouchard/repos", "events_url": "https://api.github.com/users/AlainBouchard/events{/privacy}", "received_events_url": "https://api.github.com/users/AlainBouchard/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-11-10T22:50:03Z", "updated_at": "2020-01-03T17:52:46Z", "closed_at": "2020-01-03T17:52:46Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to move away from pyodbc and I switched to pypyodbc.  The autocommit=True, either on the .connect() or conn.autocommit=True, does not work like pyodbc.   I get the following message:\r\n\r\npypyodbc.ProgrammingError: ('42000', '[42000] [Microsoft][ODBC Driver 11 for SQL Server][SQL Server]CREATE DATABASE statement not allowed within multi-statement transaction.')\r\n\r\n...When creating a snapshot (so a database):\r\n            my_cursor.execute(\"IF EXISTS (SELECT database_id FROM sys.databases WHERE NAME='{0}') DROP DATABASE {0}\".format(my_snapshot))\r\n            my_cursor.execute(\"CREATE DATABASE {0} ON ( NAME = {1}, FILENAME = N'{2}') AS SNAPSHOT OF {1}\".format(my_snapshot, database, my_snapshot_file))\r\n\r\nNote:  It works just fine with pyodbc\r\n\r\nThanks\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/59", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/59/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/59/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/59", "id": 247787600, "node_id": "MDU6SXNzdWUyNDc3ODc2MDA=", "number": 59, "title": "insert statements get lost", "user": {"login": "stolpovsky", "id": 7675128, "node_id": "MDQ6VXNlcjc2NzUxMjg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7675128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stolpovsky", "html_url": "https://github.com/stolpovsky", "followers_url": "https://api.github.com/users/stolpovsky/followers", "following_url": "https://api.github.com/users/stolpovsky/following{/other_user}", "gists_url": "https://api.github.com/users/stolpovsky/gists{/gist_id}", "starred_url": "https://api.github.com/users/stolpovsky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stolpovsky/subscriptions", "organizations_url": "https://api.github.com/users/stolpovsky/orgs", "repos_url": "https://api.github.com/users/stolpovsky/repos", "events_url": "https://api.github.com/users/stolpovsky/events{/privacy}", "received_events_url": "https://api.github.com/users/stolpovsky/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-08-03T17:58:38Z", "updated_at": "2017-08-09T20:52:50Z", "closed_at": "2017-08-09T20:52:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am executing around 1200 insert statements , only about half of them are reflected in the target table. There is no exception raised, it just silently ignores part of the input.\r\n\r\n>         with pypyodbc.connect(conn_string) as con:\r\n>             cursor = con.cursor()\r\n>             cursor.execute('\\n'.join(insert_statements))\r\n>             cursor.commit()\r\n\r\nI checked `c_query_string.value`, in `execdirect()`, it contains the entire string, nothing gets truncated there. `len(query_string)` is 427118. `ODBC_API.SQLExecDirect` returns 0.\r\n\r\nThe database is MS SQL Server 2012. Interestingly, the number of insert statements that get executed keeps changing. There are no SQL errors - If I execute generated string in the GUI, there are no errors and all rows are inserted.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/53", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/53/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/53/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/53/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/53", "id": 219867089, "node_id": "MDU6SXNzdWUyMTk4NjcwODk=", "number": 53, "title": "ValueError for microseconds when using TDS >7.3", "user": {"login": "tappoz", "id": 5919778, "node_id": "MDQ6VXNlcjU5MTk3Nzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/5919778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tappoz", "html_url": "https://github.com/tappoz", "followers_url": "https://api.github.com/users/tappoz/followers", "following_url": "https://api.github.com/users/tappoz/following{/other_user}", "gists_url": "https://api.github.com/users/tappoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/tappoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tappoz/subscriptions", "organizations_url": "https://api.github.com/users/tappoz/orgs", "repos_url": "https://api.github.com/users/tappoz/repos", "events_url": "https://api.github.com/users/tappoz/events{/privacy}", "received_events_url": "https://api.github.com/users/tappoz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-06T11:25:39Z", "updated_at": "2017-04-11T10:50:29Z", "closed_at": "2017-04-07T10:00:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am currently using an Azure SQL Server database and found out that I had to modify the way `pypyodbc` is handling microseconds in `dttm_cvt(x)` at line 592 from `x[20:].ljust(6,'0')` to `x[20:26].ljust(6,'0')`. Otherwise I get: `ValueError: microsecond must be in 0..999999`.\r\n\r\nThis may be related to https://github.com/jiangwen365/pypyodbc/issues/26\r\n\r\nInformation about my setup:\r\n\r\n- `SELECT @@VERSION;` gives `Microsoft SQL Azure (RTM) - 12.0.2000.8   Feb  8 2017 04:15:27   Copyright (C) 2016 Microsoft Corporation. All rights reserved.`\r\n- `SELECT CONVERT(BINARY(4), (SELECT TOP 1 protocol_version from sys.dm_exec_connections)) AS TDS_VERSION;` gives `0x74000004` which afaik should be TDS version 7.4\r\n- my ODBC connection string starts with: `DRIVER={SQL Server Native Client 11.0};`\r\n\r\nCf. also these variable length data types: https://msdn.microsoft.com/en-us/library/dd358341.aspx \r\nwhere they say:\r\n```\r\n DATETIMNTYPE        =   %x6F  ; (see below)\r\n DATENTYPE           =   %x28  ; (introduced in TDS 7.3)\r\n TIMENTYPE           =   %x29  ; (introduced in TDS 7.3)\r\n DATETIME2NTYPE      =   %x2A  ; (introduced in TDS 7.3)\r\n DATETIMEOFFSETNTYPE =   %x2B  ; (introduced in TDS 7.3)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/49", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/49/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/49/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/49/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/49", "id": 215400044, "node_id": "MDU6SXNzdWUyMTU0MDAwNDQ=", "number": 49, "title": "Sequentially inserting multiple rows in accessdb", "user": {"login": "dhanababum", "id": 5729855, "node_id": "MDQ6VXNlcjU3Mjk4NTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/5729855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhanababum", "html_url": "https://github.com/dhanababum", "followers_url": "https://api.github.com/users/dhanababum/followers", "following_url": "https://api.github.com/users/dhanababum/following{/other_user}", "gists_url": "https://api.github.com/users/dhanababum/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhanababum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhanababum/subscriptions", "organizations_url": "https://api.github.com/users/dhanababum/orgs", "repos_url": "https://api.github.com/users/dhanababum/repos", "events_url": "https://api.github.com/users/dhanababum/events{/privacy}", "received_events_url": "https://api.github.com/users/dhanababum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-20T12:02:57Z", "updated_at": "2017-03-20T15:13:09Z", "closed_at": "2017-03-20T15:13:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm using pyodbc to insert multiple rows with sequential order, But pyodbc inserting rows in random order. Is this normal ?\r\n\r\nFor understanding I'm giving example,\r\n\r\nparams = [ ('A', 1), ('B', 2), ('C', 3), ('D', 4) ]\r\nexecutemany(\"insert into t(name, id) values (?, ?)\", params)\r\n\r\nBut in table, I can see order like this,\r\n\r\n![image](https://cloud.githubusercontent.com/assets/5729855/24096791/19b8cc64-0d89-11e7-81f1-b68737befa39.png)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/47", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/47/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/47/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/47", "id": 210469706, "node_id": "MDU6SXNzdWUyMTA0Njk3MDY=", "number": 47, "title": "ALTER INDEX", "user": {"login": "arnaufp", "id": 7857485, "node_id": "MDQ6VXNlcjc4NTc0ODU=", "avatar_url": "https://avatars0.githubusercontent.com/u/7857485?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arnaufp", "html_url": "https://github.com/arnaufp", "followers_url": "https://api.github.com/users/arnaufp/followers", "following_url": "https://api.github.com/users/arnaufp/following{/other_user}", "gists_url": "https://api.github.com/users/arnaufp/gists{/gist_id}", "starred_url": "https://api.github.com/users/arnaufp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arnaufp/subscriptions", "organizations_url": "https://api.github.com/users/arnaufp/orgs", "repos_url": "https://api.github.com/users/arnaufp/repos", "events_url": "https://api.github.com/users/arnaufp/events{/privacy}", "received_events_url": "https://api.github.com/users/arnaufp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-02-27T12:25:50Z", "updated_at": "2017-02-27T14:03:29Z", "closed_at": "2017-02-27T14:03:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/45", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/45/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/45/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/45", "id": 204569565, "node_id": "MDU6SXNzdWUyMDQ1Njk1NjU=", "number": 45, "title": "Version 1.3.3 removed from pypi", "user": {"login": "Smirl", "id": 5792870, "node_id": "MDQ6VXNlcjU3OTI4NzA=", "avatar_url": "https://avatars1.githubusercontent.com/u/5792870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Smirl", "html_url": "https://github.com/Smirl", "followers_url": "https://api.github.com/users/Smirl/followers", "following_url": "https://api.github.com/users/Smirl/following{/other_user}", "gists_url": "https://api.github.com/users/Smirl/gists{/gist_id}", "starred_url": "https://api.github.com/users/Smirl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Smirl/subscriptions", "organizations_url": "https://api.github.com/users/Smirl/orgs", "repos_url": "https://api.github.com/users/Smirl/repos", "events_url": "https://api.github.com/users/Smirl/events{/privacy}", "received_events_url": "https://api.github.com/users/Smirl/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-01T12:21:02Z", "updated_at": "2017-02-03T13:20:57Z", "closed_at": "2017-02-03T13:20:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "With the recent release of 1.3.4 and 1.3.5 it looks like the 1.3.3 package has been removed from pypi.\r\nUpgrading to the latest version isn't trivial as 1.3.4+ includes breaking changes (despite only being a minor version bump) .\r\nWe have worked around this problem by keeping a local mirror of it, but others might see issues such as production servers not provisioning, builds failing, or local dev workflow interupted.\r\n\r\nCould this package be added to pypi again?\r\n\r\nURL:\r\nhttps://pypi.python.org/simple/pypyodbc/\r\n\r\nOUTPUT:\r\n```\r\nLinks for pypyodbc\r\n\r\npypyodbc-1.3.4.1.zip\r\npypyodbc-1.2.1.zip\r\npypyodbc-1.3.4.3.zip\r\npypyodbc-1.3.1.zip\r\npypyodbc-1.3.0.zip\r\npypyodbc-1.3.2.zip\r\npypyodbc-1.3.5.2.zip\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/27", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/27/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/27/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/27/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/27", "id": 138581645, "node_id": "MDU6SXNzdWUxMzg1ODE2NDU=", "number": 27, "title": "on linux, unicode parameters cannot be longer than 128", "user": {"login": "kaiaeberli", "id": 5165565, "node_id": "MDQ6VXNlcjUxNjU1NjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/5165565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kaiaeberli", "html_url": "https://github.com/kaiaeberli", "followers_url": "https://api.github.com/users/kaiaeberli/followers", "following_url": "https://api.github.com/users/kaiaeberli/following{/other_user}", "gists_url": "https://api.github.com/users/kaiaeberli/gists{/gist_id}", "starred_url": "https://api.github.com/users/kaiaeberli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kaiaeberli/subscriptions", "organizations_url": "https://api.github.com/users/kaiaeberli/orgs", "repos_url": "https://api.github.com/users/kaiaeberli/repos", "events_url": "https://api.github.com/users/kaiaeberli/events{/privacy}", "received_events_url": "https://api.github.com/users/kaiaeberli/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-03-04T20:42:15Z", "updated_at": "2018-07-02T15:40:47Z", "closed_at": "2018-07-02T15:40:47Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed the following when posting a query from linux using parameters:\n\nIf the parameter string is longer than 127 characters, pypyodbc will throw an error on row 1572 when trying this:\n\n`param_buffer.value = c_char_buf`\n\nIt complains that c_char_buf is too large.\n\nI checked: c_char_buf is created by UCS_buf() if parameter type is 'u' (unicode less than 255 characters):\n\n```\nc_char_buf = UCS_buf(param_val)\nc_buf_len = len(c_char_buf)\n```\n\nUCS_buf(string) is defined to return encoding(utf-16-le) for linux, and return its argument for windows.\n\nThus on linux, due to 2 byte minimum char width for utf-16, the length of the byte array will be double the length of the underlying string.\n\nAs param_buffer.value size is defined as 255 no matter what platform, this leads to above error.\n\nMy fix was to double the buffer size for linux:\n\n```\n if param_types[col_num][0] == 'u':\n                sql_c_type = SQL_C_WCHAR\n                sql_type = SQL_WVARCHAR \n                if sys.platform not in ('win32','cli'):\n                          buf_size = 255 * 2 # double buffer size for linux                 \n                else:\n                         buf_size = 255\n                ParameterBuffer = create_buffer_u(buf_size)   \n```\n\nHope this helps someone.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/20", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/20/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/20/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/20/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/20", "id": 70156553, "node_id": "MDU6SXNzdWU3MDE1NjU1Mw==", "number": 20, "title": "Problem inserting dataframe into MSSQL table", "user": {"login": "VathsalaAchar", "id": 1846599, "node_id": "MDQ6VXNlcjE4NDY1OTk=", "avatar_url": "https://avatars2.githubusercontent.com/u/1846599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VathsalaAchar", "html_url": "https://github.com/VathsalaAchar", "followers_url": "https://api.github.com/users/VathsalaAchar/followers", "following_url": "https://api.github.com/users/VathsalaAchar/following{/other_user}", "gists_url": "https://api.github.com/users/VathsalaAchar/gists{/gist_id}", "starred_url": "https://api.github.com/users/VathsalaAchar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VathsalaAchar/subscriptions", "organizations_url": "https://api.github.com/users/VathsalaAchar/orgs", "repos_url": "https://api.github.com/users/VathsalaAchar/repos", "events_url": "https://api.github.com/users/VathsalaAchar/events{/privacy}", "received_events_url": "https://api.github.com/users/VathsalaAchar/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-04-22T15:18:02Z", "updated_at": "2017-11-07T18:00:44Z", "closed_at": "2017-11-07T18:00:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've tried to use sqlalchemy with pypyodbc following [these steps](https://code.google.com/p/pypyodbc/wiki/Enable_SQLAlchemy_on_PyPy). \n\nI can directly write to the table, but using pandas' to_sql method fails. The same error is thrown when I use read_sql_table. \n\nI really hope someone can help me out.\n\n```\n---------------------------------------------------------------------------\nError                                     Traceback (most recent call last)\n<ipython-input-77-b7f657b9fe3c> in <module>()\n      6 engine = create_engine(db_connection_string)\n      7 \n----> 8 data.to_sql(name='tbl_something',schema='NOT_DBO', con=engine, if_exists='append',  index=False, chunksize=100)\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pandas\\core\\generic.pyc in to_sql(self, name, con, flavor, schema, if_exists, index, index_label, chunksize, dtype)\n    964             self, name, con, flavor=flavor, schema=schema, if_exists=if_exists,\n    965             index=index, index_label=index_label, chunksize=chunksize,\n--> 966             dtype=dtype)\n    967 \n    968     def to_pickle(self, path):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pandas\\io\\sql.pyc in to_sql(frame, name, con, flavor, schema, if_exists, index, index_label, chunksize, dtype)\n    536     pandas_sql.to_sql(frame, name, if_exists=if_exists, index=index,\n    537                       index_label=index_label, schema=schema,\n--> 538                       chunksize=chunksize, dtype=dtype)\n    539 \n    540 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pandas\\io\\sql.pyc in to_sql(self, frame, name, if_exists, index, index_label, schema, chunksize, dtype)\n   1169                          if_exists=if_exists, index_label=index_label,\n   1170                          schema=schema, dtype=dtype)\n-> 1171         table.create()\n   1172         table.insert(chunksize)\n   1173         # check for potentially case sensitivity issues (GH7815)\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pandas\\io\\sql.pyc in create(self)\n    635 \n    636     def create(self):\n--> 637         if self.exists():\n    638             if self.if_exists == 'fail':\n    639                 raise ValueError(\"Table '%s' already exists.\" % self.name)\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pandas\\io\\sql.pyc in exists(self)\n    623 \n    624     def exists(self):\n--> 625         return self.pd_sql.has_table(self.name, self.schema)\n    626 \n    627     def sql_schema(self):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pandas\\io\\sql.pyc in has_table(self, name, schema)\n   1183 \n   1184     def has_table(self, name, schema=None):\n-> 1185         return self.engine.has_table(name, schema or self.meta.schema)\n   1186 \n   1187     def get_table(self, table_name, schema=None):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\engine\\base.pyc in has_table(self, table_name, schema)\n   1938 \n   1939         \"\"\"\n-> 1940         return self.run_callable(self.dialect.has_table, table_name, schema)\n   1941 \n   1942     def raw_connection(self):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\engine\\base.pyc in run_callable(self, callable_, *args, **kwargs)\n   1841 \n   1842         \"\"\"\n-> 1843         with self.contextual_connect() as conn:\n   1844             return conn.run_callable(callable_, *args, **kwargs)\n   1845 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\engine\\base.pyc in contextual_connect(self, close_with_result, **kwargs)\n   1908 \n   1909         return self._connection_cls(self,\n-> 1910                                     self.pool.connect(),\n   1911                                     close_with_result=close_with_result,\n   1912                                     **kwargs)\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\pool.pyc in connect(self)\n    336         \"\"\"\n    337         if not self._use_threadlocal:\n--> 338             return _ConnectionFairy._checkout(self)\n    339 \n    340         try:\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\pool.pyc in _checkout(cls, pool, threadconns, fairy)\n    643     def _checkout(cls, pool, threadconns=None, fairy=None):\n    644         if not fairy:\n--> 645             fairy = _ConnectionRecord.checkout(pool)\n    646 \n    647             fairy._pool = pool\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\pool.pyc in checkout(cls, pool)\n    438     @classmethod\n    439     def checkout(cls, pool):\n--> 440         rec = pool._do_get()\n    441         try:\n    442             dbapi_connection = rec.get_connection()\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\pool.pyc in _do_get(self)\n    962             if self._inc_overflow():\n    963                 try:\n--> 964                     return self._create_connection()\n    965                 except:\n    966                     self._dec_overflow()\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\pool.pyc in _create_connection(self)\n    283         \"\"\"Called by subclasses to create a new ConnectionRecord.\"\"\"\n    284 \n--> 285         return _ConnectionRecord(self)\n    286 \n    287     def _invalidate(self, connection, exception=None):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\pool.pyc in __init__(self, pool)\n    414         pool.dispatch.first_connect.\\\n    415             for_modify(pool.dispatch).\\\n--> 416             exec_once(self.connection, self)\n    417         pool.dispatch.connect(self.connection, self)\n    418 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\event\\attr.pyc in exec_once(self, *args, **kw)\n    248                 if not self._exec_once:\n    249                     try:\n--> 250                         self(*args, **kw)\n    251                     finally:\n    252                         self._exec_once = True\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\event\\attr.pyc in __call__(self, *args, **kw)\n    258             fn(*args, **kw)\n    259         for fn in self.listeners:\n--> 260             fn(*args, **kw)\n    261 \n    262     def __len__(self):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\util\\langhelpers.pyc in go(*arg, **kw)\n   1217         if once:\n   1218             once_fn = once.pop()\n-> 1219             return once_fn(*arg, **kw)\n   1220 \n   1221     return go\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\engine\\strategies.pyc in first_connect(dbapi_connection, connection_record)\n    164                                     _has_events=False)\n    165                 c._execution_options = util.immutabledict()\n--> 166                 dialect.initialize(c)\n    167             event.listen(pool, 'first_connect', first_connect, once=True)\n    168 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\connectors\\pypyodbc.pyc in initialize(self, connection)\n    141 \n    142         # run other initialization which asks for user name, etc.\n--> 143         super(PyODBCConnector, self).initialize(connection)\n    144 \n    145 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\dialects\\mssql\\base.pyc in initialize(self, connection)\n   1371 \n   1372     def initialize(self, connection):\n-> 1373         super(MSDialect, self).initialize(connection)\n   1374         if self.server_version_info[0] not in list(range(8, 17)):\n   1375             # FreeTDS with version 4.2 seems to report here\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\engine\\default.pyc in initialize(self, connection)\n    246 \n    247         if self.description_encoding is not None and \\\n--> 248                 self._check_unicode_description(connection):\n    249             self._description_decoder = self.description_encoding = None\n    250 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\sqlalchemy\\engine\\default.pyc in _check_unicode_description(self, connection)\n    333                     expression.select([\n    334                         expression.literal_column(\"'x'\").label(\"some_label\")\n--> 335                     ]).compile(dialect=self)\n    336                 )\n    337             )\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pypyodbc.py in execute(self, query_string, params, many_mode, call_mode)\n   1603                 #self._BindCols()\n   1604 \n-> 1605         else:\n   1606             self.execdirect(query_string)\n   1607         return self\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pypyodbc.py in execdirect(self, query_string)\n   1631             ret = ODBC_API.SQLExecDirect(self.stmt_h, c_query_string, len(query_string))\n   1632         check_success(self, ret)\n-> 1633         self._NumOfRows()\n   1634         self._UpdateDesc()\n   1635         #self._BindCols()\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pypyodbc.py in _UpdateDesc(self)\n   1783             self._row_type = self.row_type_callable(self)\n   1784         else:\n-> 1785             self.description = None\n   1786         self._CreateColBuf()\n   1787 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pypyodbc.py in _CreateColBuf(self)\n   1726             if bind_data:\n   1727                 ret = ODBC_API.SQLBindCol(self.stmt_h, col_num + 1, target_type, ADDR(alloc_buffer), total_buf_len, ADDR(used_buf_len))\n-> 1728                 if ret != SQL_SUCCESS:\n   1729                     check_success(self, ret)\n   1730 \n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pypyodbc.py in check_success(ODBC_obj, ret)\n    984     \"\"\" Validate return value, if not success, raise exceptions based on the handle \"\"\"\n    985     if ret not in (SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NO_DATA):\n--> 986         if isinstance(ODBC_obj, Cursor):\n    987             ctrl_err(SQL_HANDLE_STMT, ODBC_obj.stmt_h, ret, ODBC_obj.ansi)\n    988         elif isinstance(ODBC_obj, Connection):\n\nC:\\Anaconda\\envs\\etl2\\lib\\site-packages\\pypyodbc.py in ctrl_err(ht, h, val_ret, ansi)\n    962             elif state in (raw_s('HYT00'),raw_s('HYT01')):\n    963                 raise OperationalError(state,err_text)\n--> 964             elif state[:2] in (raw_s('IM'),raw_s('HY')):\n    965                 raise Error(state,err_text)\n    966             else:\n\nError: (u'HY090', u'[HY090] [Microsoft][ODBC Driver Manager] Invalid string or buffer length')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/3", "repository_url": "https://api.github.com/repos/jiangwen365/pypyodbc", "labels_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/3/comments", "events_url": "https://api.github.com/repos/jiangwen365/pypyodbc/issues/3/events", "html_url": "https://github.com/jiangwen365/pypyodbc/issues/3", "id": 12258924, "node_id": "MDU6SXNzdWUxMjI1ODkyNA==", "number": 3, "title": "issue  in python3", "user": {"login": "hyacinthus", "id": 488292, "node_id": "MDQ6VXNlcjQ4ODI5Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/488292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hyacinthus", "html_url": "https://github.com/hyacinthus", "followers_url": "https://api.github.com/users/hyacinthus/followers", "following_url": "https://api.github.com/users/hyacinthus/following{/other_user}", "gists_url": "https://api.github.com/users/hyacinthus/gists{/gist_id}", "starred_url": "https://api.github.com/users/hyacinthus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hyacinthus/subscriptions", "organizations_url": "https://api.github.com/users/hyacinthus/orgs", "repos_url": "https://api.github.com/users/hyacinthus/repos", "events_url": "https://api.github.com/users/hyacinthus/events{/privacy}", "received_events_url": "https://api.github.com/users/hyacinthus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2013-03-21T03:11:32Z", "updated_at": "2013-04-16T07:47:51Z", "closed_at": "2013-03-26T03:36:49Z", "author_association": "NONE", "active_lock_reason": null, "body": " In python3 and ansi mode , line 1003 in func ctrl_err, will mix str and bytes ,then typeerror .\n", "performed_via_github_app": null, "score": 1.0}]}