{"total_count": 29, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/141", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/141/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/141/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/141/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/141", "id": 586714285, "node_id": "MDU6SXNzdWU1ODY3MTQyODU=", "number": 141, "title": "user table without id as primary key", "user": {"login": "khirul", "id": 10750997, "node_id": "MDQ6VXNlcjEwNzUwOTk3", "avatar_url": "https://avatars2.githubusercontent.com/u/10750997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khirul", "html_url": "https://github.com/khirul", "followers_url": "https://api.github.com/users/khirul/followers", "following_url": "https://api.github.com/users/khirul/following{/other_user}", "gists_url": "https://api.github.com/users/khirul/gists{/gist_id}", "starred_url": "https://api.github.com/users/khirul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khirul/subscriptions", "organizations_url": "https://api.github.com/users/khirul/orgs", "repos_url": "https://api.github.com/users/khirul/repos", "events_url": "https://api.github.com/users/khirul/events{/privacy}", "received_events_url": "https://api.github.com/users/khirul/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-03-24T05:59:38Z", "updated_at": "2020-03-24T11:38:33Z", "closed_at": "2020-03-24T11:38:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "i am using established database for my project. the problem is my user table  using user_id instead of id as primary key.. the system give this error AttributeError: 'UserModel' object has no attribute 'id'.. my question is how to tell identity to use user_id instead of id?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/134", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/134/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/134/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/134/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/134", "id": 460262153, "node_id": "MDU6SXNzdWU0NjAyNjIxNTM=", "number": 134, "title": "Provide different secret to decode function.", "user": {"login": "alihen", "id": 5153131, "node_id": "MDQ6VXNlcjUxNTMxMzE=", "avatar_url": "https://avatars1.githubusercontent.com/u/5153131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alihen", "html_url": "https://github.com/alihen", "followers_url": "https://api.github.com/users/alihen/followers", "following_url": "https://api.github.com/users/alihen/following{/other_user}", "gists_url": "https://api.github.com/users/alihen/gists{/gist_id}", "starred_url": "https://api.github.com/users/alihen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alihen/subscriptions", "organizations_url": "https://api.github.com/users/alihen/orgs", "repos_url": "https://api.github.com/users/alihen/repos", "events_url": "https://api.github.com/users/alihen/events{/privacy}", "received_events_url": "https://api.github.com/users/alihen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-25T07:39:00Z", "updated_at": "2019-07-03T12:20:50Z", "closed_at": "2019-07-03T12:20:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to pass in a different secret for some tokens I decode manually in the `[_default_jwt_decode_handler](https://github.com/mattupstate/flask-jwt/blob/master/flask_jwt/__init__.py#L74)`. I'm aware that I'd likely need to disable `JWT_VERIFY` and call the decode/verify each token myself on a request.\r\n\r\nIs there any way to pass a secret as a parameter to any of the current decode methods?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/120", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/120/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/120/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/120/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/120", "id": 238150573, "node_id": "MDU6SXNzdWUyMzgxNTA1NzM=", "number": 120, "title": "ok", "user": {"login": "badZombi", "id": 1497327, "node_id": "MDQ6VXNlcjE0OTczMjc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1497327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badZombi", "html_url": "https://github.com/badZombi", "followers_url": "https://api.github.com/users/badZombi/followers", "following_url": "https://api.github.com/users/badZombi/following{/other_user}", "gists_url": "https://api.github.com/users/badZombi/gists{/gist_id}", "starred_url": "https://api.github.com/users/badZombi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badZombi/subscriptions", "organizations_url": "https://api.github.com/users/badZombi/orgs", "repos_url": "https://api.github.com/users/badZombi/repos", "events_url": "https://api.github.com/users/badZombi/events{/privacy}", "received_events_url": "https://api.github.com/users/badZombi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2017-06-23T13:58:55Z", "updated_at": "2017-06-23T14:00:18Z", "closed_at": "2017-06-23T14:00:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/116", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/116/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/116/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/116/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/116", "id": 209877920, "node_id": "MDU6SXNzdWUyMDk4Nzc5MjA=", "number": 116, "title": "Help? Using jwt_required() decorator correctly.", "user": {"login": "justindz", "id": 13970, "node_id": "MDQ6VXNlcjEzOTcw", "avatar_url": "https://avatars1.githubusercontent.com/u/13970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justindz", "html_url": "https://github.com/justindz", "followers_url": "https://api.github.com/users/justindz/followers", "following_url": "https://api.github.com/users/justindz/following{/other_user}", "gists_url": "https://api.github.com/users/justindz/gists{/gist_id}", "starred_url": "https://api.github.com/users/justindz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justindz/subscriptions", "organizations_url": "https://api.github.com/users/justindz/orgs", "repos_url": "https://api.github.com/users/justindz/repos", "events_url": "https://api.github.com/users/justindz/events{/privacy}", "received_events_url": "https://api.github.com/users/justindz/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-02-23T20:40:23Z", "updated_at": "2017-02-24T02:47:01Z", "closed_at": "2017-02-24T02:47:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am hoping to use flask-jwt for authentication to my RESTful API. Here is my setup:\r\n\r\n`def authenticate(email, password):\r\n    account = connection.Account.find_one({'email': email})\r\n\r\n    if account and safe_str_comp(account.password.encode('utf-8'), password.encode('utf-8')):\r\n        return account\r\n\r\n    return None\r\n\r\ndef identity(payload):\r\n    email = payload['identity']\r\n    account = connection.Account.find_one({'email': email})\r\n    return account\r\n\r\n# configuration\r\napp = Flask(__name__)\r\napp.config.from_object(__name__)\r\napp.config['DATABASE'] = 'arpgmanager'\r\napp.config['MONGODB_HOST'] = '127.0.0.1'\r\napp.config['MONGODB_PORT'] = 27017\r\napp.config['SECRET_KEY'] = '[redacted]'\r\n\r\nlogging.basicConfig()\r\n\r\njwt = JWT(app, authenticate, identity)`\r\n\r\nPlease note that the Flask server is running in DEBUG mode.\r\n\r\nAnd here is the endpoint:\r\n\r\n`@app.route('/player/<pid>')\r\n@jwt_required()\r\ndef get_player(pid):\r\n    player = connection.Player.find_one({'id': pid})\r\n    return dumps(player)`\r\n\r\nScenario: I call the endpoint without first calling /auth and getting an access token.\r\nExpected: The JSON dump of the player object is protected and does not get returned.\r\nActual: The JSON dump of the player object is returned to the client as normal. An ERROR saying the request doesn't contain an access token is logged to the console.\r\n\r\nI believe I'm not understand this correctly the documentation correctly. Should I, in the endpoint decorated by jwt_required, be manually checking for an error, or for some state of current_identity and determining whether to respond to the requester? I did not expect a protected endpoint to work without an access token.\r\n\r\nThanks in advance for any guidance you can provide?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/114", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/114/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/114/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/114/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/114", "id": 201782913, "node_id": "MDU6SXNzdWUyMDE3ODI5MTM=", "number": 114, "title": "make question detection more robust", "user": {"login": "divyashan", "id": 925623, "node_id": "MDQ6VXNlcjkyNTYyMw==", "avatar_url": "https://avatars2.githubusercontent.com/u/925623?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divyashan", "html_url": "https://github.com/divyashan", "followers_url": "https://api.github.com/users/divyashan/followers", "following_url": "https://api.github.com/users/divyashan/following{/other_user}", "gists_url": "https://api.github.com/users/divyashan/gists{/gist_id}", "starred_url": "https://api.github.com/users/divyashan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divyashan/subscriptions", "organizations_url": "https://api.github.com/users/divyashan/orgs", "repos_url": "https://api.github.com/users/divyashan/repos", "events_url": "https://api.github.com/users/divyashan/events{/privacy}", "received_events_url": "https://api.github.com/users/divyashan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-19T07:24:08Z", "updated_at": "2017-01-19T07:25:48Z", "closed_at": "2017-01-19T07:25:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/113", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/113/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/113/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/113/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/113", "id": 199681914, "node_id": "MDU6SXNzdWUxOTk2ODE5MTQ=", "number": 113, "title": "Identity handler 'User' object is not callable", "user": {"login": "carc1n0gen", "id": 8248986, "node_id": "MDQ6VXNlcjgyNDg5ODY=", "avatar_url": "https://avatars0.githubusercontent.com/u/8248986?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carc1n0gen", "html_url": "https://github.com/carc1n0gen", "followers_url": "https://api.github.com/users/carc1n0gen/followers", "following_url": "https://api.github.com/users/carc1n0gen/following{/other_user}", "gists_url": "https://api.github.com/users/carc1n0gen/gists{/gist_id}", "starred_url": "https://api.github.com/users/carc1n0gen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carc1n0gen/subscriptions", "organizations_url": "https://api.github.com/users/carc1n0gen/orgs", "repos_url": "https://api.github.com/users/carc1n0gen/repos", "events_url": "https://api.github.com/users/carc1n0gen/events{/privacy}", "received_events_url": "https://api.github.com/users/carc1n0gen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-01-09T22:35:56Z", "updated_at": "2017-01-09T22:40:29Z", "closed_at": "2017-01-09T22:40:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've set up a minimal flask app to test jwt.  My authenticate handler works fine, but my identity handler keeps raising `TypeError: 'User' object is not callable`\r\n\r\napp.py\r\n```python\r\nfrom flask import Flask, current_app\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom flask_jwt import JWT, jwt_required, current_identity\r\nfrom werkzeug.security import safe_str_cmp\r\n\r\napp = Flask(__name__)\r\napp.config.from_object('config')\r\nDB = SQLAlchemy(app)\r\nfrom app.jwt import authenticate, identity # Must import these after the database connection is made\r\njwt = JWT(app, authenticate, identity)\r\n\r\n@app.route('/protected')\r\n@jwt_required()\r\ndef protected():\r\n    return current_identity\r\n```\r\n\r\njwt.py\r\n```python\r\nfrom werkzeug.security import safe_str_cmp\r\nfrom bcrypt import checkpw\r\nfrom app.database.models import User\r\n\r\ndef authenticate(username, password):\r\n    user = User.query.filter(User.email == username).scalar()\r\n    if user and checkpw(password.encode('utf-8'), user.password.encode('utf-8')):\r\n        return user\r\n\r\ndef identity(payload):\r\n    return User.query.filter(User.id == payload['identity']).scalar()\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/110", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/110/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/110/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/110/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/110", "id": 196753859, "node_id": "MDU6SXNzdWUxOTY3NTM4NTk=", "number": 110, "title": "LDAP authentication", "user": {"login": "diegovini", "id": 15785474, "node_id": "MDQ6VXNlcjE1Nzg1NDc0", "avatar_url": "https://avatars3.githubusercontent.com/u/15785474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/diegovini", "html_url": "https://github.com/diegovini", "followers_url": "https://api.github.com/users/diegovini/followers", "following_url": "https://api.github.com/users/diegovini/following{/other_user}", "gists_url": "https://api.github.com/users/diegovini/gists{/gist_id}", "starred_url": "https://api.github.com/users/diegovini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/diegovini/subscriptions", "organizations_url": "https://api.github.com/users/diegovini/orgs", "repos_url": "https://api.github.com/users/diegovini/repos", "events_url": "https://api.github.com/users/diegovini/events{/privacy}", "received_events_url": "https://api.github.com/users/diegovini/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-12-20T19:10:07Z", "updated_at": "2017-02-03T18:59:26Z", "closed_at": "2017-02-03T18:59:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi guys, \r\nI need to authenticate my users in Active Directory before they can use my REST API.\r\n\r\nAfter beeing authenticated, I need to pass them the jwt.\r\n\r\nIs it possible to do it using Flask-jwt?\r\nIt not, any ideias how I can implement that?\r\n\r\nThx!\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/97", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/97/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/97/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/97/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/97", "id": 175403225, "node_id": "MDU6SXNzdWUxNzU0MDMyMjU=", "number": 97, "title": "When using flask-jwt how to exempt flask-wft CSRF for POST requests??", "user": {"login": "rlam3", "id": 1154044, "node_id": "MDQ6VXNlcjExNTQwNDQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1154044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rlam3", "html_url": "https://github.com/rlam3", "followers_url": "https://api.github.com/users/rlam3/followers", "following_url": "https://api.github.com/users/rlam3/following{/other_user}", "gists_url": "https://api.github.com/users/rlam3/gists{/gist_id}", "starred_url": "https://api.github.com/users/rlam3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rlam3/subscriptions", "organizations_url": "https://api.github.com/users/rlam3/orgs", "repos_url": "https://api.github.com/users/rlam3/repos", "events_url": "https://api.github.com/users/rlam3/events{/privacy}", "received_events_url": "https://api.github.com/users/rlam3/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2016-09-07T03:12:53Z", "updated_at": "2016-10-17T19:46:01Z", "closed_at": "2016-10-17T19:46:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using flask-jwt how to exempt flask-wtf CSRF for POST requests?? \n\nWould love a guide into how to use flask-jwt and flask-wtf together but have csrf exempt from the authentication using the application factory approach. Thanks! \n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/94", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/94/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/94/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/94/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/94", "id": 168406905, "node_id": "MDU6SXNzdWUxNjg0MDY5MDU=", "number": 94, "title": "Can this be used with Python v2.6.x?", "user": {"login": "goterpsgo", "id": 2955286, "node_id": "MDQ6VXNlcjI5NTUyODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/2955286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goterpsgo", "html_url": "https://github.com/goterpsgo", "followers_url": "https://api.github.com/users/goterpsgo/followers", "following_url": "https://api.github.com/users/goterpsgo/following{/other_user}", "gists_url": "https://api.github.com/users/goterpsgo/gists{/gist_id}", "starred_url": "https://api.github.com/users/goterpsgo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goterpsgo/subscriptions", "organizations_url": "https://api.github.com/users/goterpsgo/orgs", "repos_url": "https://api.github.com/users/goterpsgo/repos", "events_url": "https://api.github.com/users/goterpsgo/events{/privacy}", "received_events_url": "https://api.github.com/users/goterpsgo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2016-07-29T20:24:08Z", "updated_at": "2016-08-01T18:05:38Z", "closed_at": "2016-08-01T18:05:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm working on a project that requires using Python v2.6.6 on Centos 6.x. I am using the sample code published by this repo (https://github.com/mattupstate/flask-jwt/blob/master/example/app.py) and python is returning a syntax error from __init__.py:\n\n<pre>Traceback (most recent call last):\n  File \"./wsgi.py\", line 1, in <module>\n    from main import app as application\n  File \"./main.py\", line 5, in <module>\n    from auth import api_auth\n  File \"./auth.py\", line 3, in <module>\n    from flask_jwt import JWT\n  File \"/opt/mist_base/env/lib/python2.6/site-packages/flask_jwt/__init__.py\", line 83\n    for claim in verify_claims\n      ^\nSyntaxError: invalid syntax</pre>\n\n\nI assume this works for other people's instances, and I know there are issues using some libraries with v2.6.x - is this the case?\n\nthx,\n- Joe\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/74", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/74/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/74/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/74/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/74", "id": 129223827, "node_id": "MDU6SXNzdWUxMjkyMjM4Mjc=", "number": 74, "title": "Internal Server Error when app.debug = False", "user": {"login": "vimalloc", "id": 238933, "node_id": "MDQ6VXNlcjIzODkzMw==", "avatar_url": "https://avatars3.githubusercontent.com/u/238933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vimalloc", "html_url": "https://github.com/vimalloc", "followers_url": "https://api.github.com/users/vimalloc/followers", "following_url": "https://api.github.com/users/vimalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vimalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vimalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vimalloc/subscriptions", "organizations_url": "https://api.github.com/users/vimalloc/orgs", "repos_url": "https://api.github.com/users/vimalloc/repos", "events_url": "https://api.github.com/users/vimalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vimalloc/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2016-01-27T18:05:50Z", "updated_at": "2018-06-24T04:04:47Z", "closed_at": "2016-03-24T18:02:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "When I have debug = True in the flask application, and I make a call to a jwt protected endpoint without an access token I get the following back:\n\n``` json\n{\n  \"description\": \"Request does not contain an access token\",\n  \"error\": \"Authorization Required\",\n  \"status_code\": 401\n}\n```\n\nHowever, when I try the same thing with debug = False, instead I get this:\n\n``` json\n{\"message\": \"Internal Server Error\"}\n```\n\nAnd in the logs, I see:\n\n```\nflask_jwt.JWTError: Authorization Required. Request does not contain an access token\n```\n\nAs far as I can tell, the jwt.init_app() function is registering a custom error handler for JWTErrors in the flask app, however it only seems to be working when flask debug is enabled. Any ideas why this might be the case?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/61", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/61/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/61/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/61/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/61", "id": 114790332, "node_id": "MDU6SXNzdWUxMTQ3OTAzMzI=", "number": 61, "title": "IndexError: list index out of range on Authorization header set to empty string", "user": {"login": "boromil", "id": 11292, "node_id": "MDQ6VXNlcjExMjky", "avatar_url": "https://avatars2.githubusercontent.com/u/11292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boromil", "html_url": "https://github.com/boromil", "followers_url": "https://api.github.com/users/boromil/followers", "following_url": "https://api.github.com/users/boromil/following{/other_user}", "gists_url": "https://api.github.com/users/boromil/gists{/gist_id}", "starred_url": "https://api.github.com/users/boromil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boromil/subscriptions", "organizations_url": "https://api.github.com/users/boromil/orgs", "repos_url": "https://api.github.com/users/boromil/repos", "events_url": "https://api.github.com/users/boromil/events{/privacy}", "received_events_url": "https://api.github.com/users/boromil/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2015-11-03T11:03:31Z", "updated_at": "2015-11-03T14:43:25Z", "closed_at": "2015-11-03T14:43:25Z", "author_association": "NONE", "active_lock_reason": null, "body": "full stack trace:\n\n<pre>\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/usr/local/lib/python2.7/dist-packages/flask_jwt/__init__.py\", line 176, in decorator\n    _jwt_required(realm or current_app.config['JWT_DEFAULT_REALM'])\n  File \"/usr/local/lib/python2.7/dist-packages/flask_jwt/__init__.py\", line 151, in _jwt_required\n    token = _jwt.request_callback()\n  File \"/usr/local/lib/python2.7/dist-packages/flask_jwt/__init__.py\", line 103, in _default_request_handler\n    if parts[0].lower() != auth_header_prefix.lower():\nIndexError: list index out of range\n</pre>\n\n\nthink that _request_handler_ should have an additional check, for example:\n\n``` python\nauth_header_value = request.headers.get('Authorization', None)\nif auth_header_value == '':\n    raise JWTError('Invalid JWT header', 'Empty value')\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/58", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/58/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/58/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/58/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/58", "id": 112146992, "node_id": "MDU6SXNzdWUxMTIxNDY5OTI=", "number": 58, "title": "AttributeError: 'NoneType' object has no attribute 'get'", "user": {"login": "mayantigo", "id": 4076977, "node_id": "MDQ6VXNlcjQwNzY5Nzc=", "avatar_url": "https://avatars0.githubusercontent.com/u/4076977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mayantigo", "html_url": "https://github.com/mayantigo", "followers_url": "https://api.github.com/users/mayantigo/followers", "following_url": "https://api.github.com/users/mayantigo/following{/other_user}", "gists_url": "https://api.github.com/users/mayantigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/mayantigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mayantigo/subscriptions", "organizations_url": "https://api.github.com/users/mayantigo/orgs", "repos_url": "https://api.github.com/users/mayantigo/repos", "events_url": "https://api.github.com/users/mayantigo/events{/privacy}", "received_events_url": "https://api.github.com/users/mayantigo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-10-19T13:42:58Z", "updated_at": "2019-08-21T05:10:58Z", "closed_at": "2015-10-20T08:31:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi!.\n\nIm running exactly the example of GitHub. When I try get the token the log tell me this:\n\n  File \"C:\\Python34\\lib\\site-packages\\flask_jwt__init__.py\", line 114, in _def\nult_auth_request_handler\n    username = data.get(current_app.config.get('JWT_AUTH_USERNAME_KEY'), None)\nAttributeError: 'NoneType' object has no attribute 'get'\n\nIm checking the code and I see nothing\nIs exactly the same code of the example.\n\nAny suggestion?.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/55", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/55/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/55/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/55/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/55", "id": 110867323, "node_id": "MDU6SXNzdWUxMTA4NjczMjM=", "number": 55, "title": "How handle a token?", "user": {"login": "rchampa", "id": 3956444, "node_id": "MDQ6VXNlcjM5NTY0NDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/3956444?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchampa", "html_url": "https://github.com/rchampa", "followers_url": "https://api.github.com/users/rchampa/followers", "following_url": "https://api.github.com/users/rchampa/following{/other_user}", "gists_url": "https://api.github.com/users/rchampa/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchampa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchampa/subscriptions", "organizations_url": "https://api.github.com/users/rchampa/orgs", "repos_url": "https://api.github.com/users/rchampa/repos", "events_url": "https://api.github.com/users/rchampa/events{/privacy}", "received_events_url": "https://api.github.com/users/rchampa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-10-11T16:47:29Z", "updated_at": "2015-10-12T08:27:44Z", "closed_at": "2015-10-12T08:27:44Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm new using JWT so I run the example where I find in docs. I read this https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/ to get a better understanding of JWT.\n\nBut now I wonder how I should handle more than one token?\nI mean, a user post his credentials to \"/auth\" and then return a token to a client.\nWhen the client send a new request he should sent the token. \n\nMy question is how I know what \"token\" belongs which user and where \"tokens\" are stored?\nShould I store in database?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/47", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/47/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/47/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/47/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/47", "id": 81041843, "node_id": "MDU6SXNzdWU4MTA0MTg0Mw==", "number": 47, "title": "HMAC(key, msg, digestmod) - key: expected bytes or bytearray, but got 'NoneType'", "user": {"login": "s4p0", "id": 747601, "node_id": "MDQ6VXNlcjc0NzYwMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/747601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/s4p0", "html_url": "https://github.com/s4p0", "followers_url": "https://api.github.com/users/s4p0/followers", "following_url": "https://api.github.com/users/s4p0/following{/other_user}", "gists_url": "https://api.github.com/users/s4p0/gists{/gist_id}", "starred_url": "https://api.github.com/users/s4p0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/s4p0/subscriptions", "organizations_url": "https://api.github.com/users/s4p0/orgs", "repos_url": "https://api.github.com/users/s4p0/repos", "events_url": "https://api.github.com/users/s4p0/events{/privacy}", "received_events_url": "https://api.github.com/users/s4p0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-05-26T16:37:38Z", "updated_at": "2015-05-26T18:53:21Z", "closed_at": "2015-05-26T18:53:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm getting the following error, however if I run the example it works quite good!\nThen, I don't know if I'm doing something really wrong (as solo, it works!) or is some kind of bug, somehow.\n\n```\nTraceback (most recent call last):\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1836, in __call__\n    return self.wsgi_app(environ, start_response)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\_compat.py\", line 33, in reraise\n    raise value\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\_compat.py\", line 33, in reraise\n    raise value\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\views.py\", line 84, in view\n    return self.dispatch_request(*args, **kwargs)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask\\views.py\", line 149, in dispatch_request\n    return meth(*args, **kwargs)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask_jwt\\__init__.py\", line 154, in post\n    token = _jwt.encode_callback(payload)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\flask_jwt\\__init__.py\", line 50, in _default_encode_handler\n    return _get_serializer().dumps(payload).decode('utf-8')\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\itsdangerous.py\", line 742, in dumps\n    return signer.sign(self.dump_payload(header, obj))\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\itsdangerous.py\", line 353, in sign\n    return value + want_bytes(self.sep) + self.get_signature(value)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\itsdangerous.py\", line 348, in get_signature\n    sig = self.algorithm.get_signature(key, value)\n  File \"\\\\mypath\\.venv\\lib\\site-packages\\itsdangerous.py\", line 268, in get_signature\n    mac = hmac.new(key, msg=value, digestmod=self.digest_method)\n  File \"\\\\mypath\\.venv\\lib\\hmac.py\", line 144, in new\n    return HMAC(key, msg, digestmod)\n  File \"\\\\mypath\\.venv\\lib\\hmac.py\", line 42, in __init__\n    raise TypeError(\"key: expected bytes or bytearray, but got %r\" % type(key).__name__)\nTypeError: key: expected bytes or bytearray, but got 'NoneType'\n```\n\nmy directory structure is as follows:\n- app.py\n- main.py\n- auth.py\n\nwhere app.py has:\n\n``` python\nfrom flask import Flask\n# JWT\nfrom flask_jwt import JWT\n\napp = Flask(__name__)\njwt = JWT(app)\n```\n\nauth.py:\n\n``` python\nfrom app import app, db, jwt\nfrom flask_jwt import jwt_required\n\nclass User(object):\n    def __init__(self, **kwargs):\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n\n@app.route('/protected')\n@jwt_required()\ndef protected():\n    return 'Success!'\n\n@jwt.authentication_handler\ndef authenticate(username, password):\n    # import pdb; pdb.set_trace()\n    if username == 'joe' and password == 'pass':\n        return User(id=1, username='joe')\n\n@jwt.user_handler\ndef load_user(payload):\n    if payload['user_id'] == 1:\n        return User(id=1, username='joe')\n```\n\nand main.py:\n\n``` python\nfrom app import app\nfrom auth import *\nfrom api import *\nfrom views import *\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/44", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/44/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/44/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/44/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/44", "id": 72773075, "node_id": "MDU6SXNzdWU3Mjc3MzA3NQ==", "number": 44, "title": "HAMC failed @ _get_serializer().dumps @ encode_handler @ generate_token", "user": {"login": "minhoryang", "id": 1270855, "node_id": "MDQ6VXNlcjEyNzA4NTU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1270855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/minhoryang", "html_url": "https://github.com/minhoryang", "followers_url": "https://api.github.com/users/minhoryang/followers", "following_url": "https://api.github.com/users/minhoryang/following{/other_user}", "gists_url": "https://api.github.com/users/minhoryang/gists{/gist_id}", "starred_url": "https://api.github.com/users/minhoryang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/minhoryang/subscriptions", "organizations_url": "https://api.github.com/users/minhoryang/orgs", "repos_url": "https://api.github.com/users/minhoryang/repos", "events_url": "https://api.github.com/users/minhoryang/events{/privacy}", "received_events_url": "https://api.github.com/users/minhoryang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2015-05-03T08:37:53Z", "updated_at": "2015-05-03T08:40:06Z", "closed_at": "2015-05-03T08:40:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Traceback (most recent call last):\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1836, in **call**\n    return self.wsgi_app(environ, start_response)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1820, in wsgi_app\n    response = self.make_response(self.handle_exception(e))\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask_restful/**init**.py\", line 265, in error_router\n    return original_handler(e)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1403, in handle_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/_compat.py\", line 32, in reraise\n    raise value.with_traceback(tb)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1817, in wsgi_app\n    response = self.full_dispatch_request()\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1477, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask_restful/__init__.py\", line 265, in error_router\n    return original_handler(e)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1381, in handle_user_exception\n    reraise(exc_type, exc_value, tb)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/_compat.py\", line 32, in reraise\n    raise value.with_traceback(tb)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask_restful/__init__.py\", line 446, in wrapper\n    resp = resource(_args, *_kwargs)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask/views.py\", line 84, in view\n    return self.dispatch_request(_args, *_kwargs)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/flask_restful/**init**.py\", line 550, in dispatch_request\n    resp = meth(_args, *_kwargs)\n  File \"/Volumes/Unsigned/server/application/models/user.py\", line 45, in post\n    return {'status': 200, 'message': generate_token(user)}  # TODO : SESSION!\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/src/flask-jwt/flask_jwt/**init**.py\", line 147, in generate_token\n    token = _jwt.encode_callback(payload)\n  File \"/Volumes/Unsigned/server/application/models/user.py\", line 88, in encode_handler\n    return t.dumps(payload).decode('utf-8')\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/itsdangerous.py\", line 742, in dumps\n    return signer.sign(self.dump_payload(header, obj))\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/itsdangerous.py\", line 353, in sign\n    return value + want_bytes(self.sep) + self.get_signature(value)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/itsdangerous.py\", line 348, in get_signature\n    sig = self.algorithm.get_signature(key, value)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2-server/lib/python3.4/site-packages/itsdangerous.py\", line 268, in get_signature\n    mac = hmac.new(key, msg=value, digestmod=self.digest_method)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2/lib/python3.4/hmac.py\", line 144, in new\n    return HMAC(key, msg, digestmod)\n  File \"/usr/local/var/lib/pyenv/versions/3.4.2/lib/python3.4/hmac.py\", line 42, in __init__\n    raise TypeError(\"key: expected bytes or bytearray, but got %r\" % type(key).**name**)\nTypeError: key: expected bytes or bytearray, but got 'NoneType'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/43", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/43/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/43/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/43/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/43", "id": 68858832, "node_id": "MDU6SXNzdWU2ODg1ODgzMg==", "number": 43, "title": "UnboundLocalError if JWT_VERIFY_EXPIRATION is False", "user": {"login": "lustdante", "id": 1984184, "node_id": "MDQ6VXNlcjE5ODQxODQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/1984184?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lustdante", "html_url": "https://github.com/lustdante", "followers_url": "https://api.github.com/users/lustdante/followers", "following_url": "https://api.github.com/users/lustdante/following{/other_user}", "gists_url": "https://api.github.com/users/lustdante/gists{/gist_id}", "starred_url": "https://api.github.com/users/lustdante/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lustdante/subscriptions", "organizations_url": "https://api.github.com/users/lustdante/orgs", "repos_url": "https://api.github.com/users/lustdante/repos", "events_url": "https://api.github.com/users/lustdante/events{/privacy}", "received_events_url": "https://api.github.com/users/lustdante/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2015-04-16T06:54:01Z", "updated_at": "2016-02-17T01:43:49Z", "closed_at": "2016-02-17T01:43:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "```\ndef _default_decode_handler(token):\n    \"\"\"Return the decoded token.\"\"\"\n    try:\n        result = _get_serializer().loads(token)\n    except SignatureExpired:\n        if current_app.config['JWT_VERIFY_EXPIRATION']:\n            raise\n    return result\n```\n\nEven if not checking expiration is not recommended, it should still be an option, but since timed serializer will not deserialize, it raises:\n\n```\nUnboundLocalError: local variable 'result' referenced before assignment\n```\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/42", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/42/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/42/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/42/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/42", "id": 68625302, "node_id": "MDU6SXNzdWU2ODYyNTMwMg==", "number": 42, "title": "Manually generate token", "user": {"login": "fernandojsg", "id": 782511, "node_id": "MDQ6VXNlcjc4MjUxMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/782511?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fernandojsg", "html_url": "https://github.com/fernandojsg", "followers_url": "https://api.github.com/users/fernandojsg/followers", "following_url": "https://api.github.com/users/fernandojsg/following{/other_user}", "gists_url": "https://api.github.com/users/fernandojsg/gists{/gist_id}", "starred_url": "https://api.github.com/users/fernandojsg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fernandojsg/subscriptions", "organizations_url": "https://api.github.com/users/fernandojsg/orgs", "repos_url": "https://api.github.com/users/fernandojsg/repos", "events_url": "https://api.github.com/users/fernandojsg/events{/privacy}", "received_events_url": "https://api.github.com/users/fernandojsg/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-04-15T09:25:16Z", "updated_at": "2015-05-21T07:35:26Z", "closed_at": "2015-05-21T07:35:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently using flask-jwt in my project with angularjs frontend. The users can get the token providing  the user/pass and everything works just fine.\n\nThe problem appeared when I needed to get a token to authenticate an external application. I did the following:\n\n``` python\n@api_bp.route(\"/external_auth/<id_key>/<json_hash>\")\ndef external_auth(id_key,json_hash):\n\n    external_api_key = ExternalApiKey.query.get(id_key)\n    if external_api_key == None:\n        abort(401)\n\n# blalbalbla specific app code\n\n    return json.dumps({\"token\":generate_jwt_token({\"user_id\":data['user_id'], ... extra params})})\n```\n\nAs I didn't want to use app/password for the external api calls, but I needed the token I basically used your code to generate a token with my custom payload.\n\n``` python\nfrom flask import current_app\nfrom itsdangerous import (\n    TimedJSONWebSignatureSerializer,\n    SignatureExpired,\n    BadSignature\n)\nfrom datetime import timedelta\n\ndef generate_jwt_token(payload):\n    expires_in = current_app.config['JWT_EXPIRATION_DELTA']\n    if isinstance(expires_in, timedelta):\n        expires_in = int(expires_in.total_seconds())\n    expires_in_total = expires_in + current_app.config['JWT_LEEWAY']\n    serializer = TimedJSONWebSignatureSerializer(\n        secret_key=current_app.config['JWT_SECRET_KEY'],\n        expires_in=expires_in_total,\n        algorithm_name=current_app.config['JWT_ALGORITHM']\n    )\n\n    return serializer.dumps(payload).decode('utf-8')\n```\n\nMy question is... is there any \"pretty\" way to access your flask_jwt code to do this? I feel like using private functions or objects doesn't looks nice, so that's why I duplicated most of the token generation code.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/41", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/41/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/41/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/41/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/41", "id": 67158142, "node_id": "MDU6SXNzdWU2NzE1ODE0Mg==", "number": 41, "title": "Misunderstanding of the difference between JWS and JWT", "user": {"login": "ptxmac", "id": 56919, "node_id": "MDQ6VXNlcjU2OTE5", "avatar_url": "https://avatars1.githubusercontent.com/u/56919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptxmac", "html_url": "https://github.com/ptxmac", "followers_url": "https://api.github.com/users/ptxmac/followers", "following_url": "https://api.github.com/users/ptxmac/following{/other_user}", "gists_url": "https://api.github.com/users/ptxmac/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptxmac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptxmac/subscriptions", "organizations_url": "https://api.github.com/users/ptxmac/orgs", "repos_url": "https://api.github.com/users/ptxmac/repos", "events_url": "https://api.github.com/users/ptxmac/events{/privacy}", "received_events_url": "https://api.github.com/users/ptxmac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2015-04-08T15:38:48Z", "updated_at": "2015-10-23T14:57:43Z", "closed_at": "2015-10-23T14:57:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Internally Flask-JWT are using the TimedJSONWebSignatureSerializer from its dangerous. Unfortunately this ISN'T a JWT generator. Instead it creates a JWS with some extra information in the header like 'exp'.\n\nAccording to the JWT specification, all the claims are supposed to be part of the payload NOT the header. (They are allowed to be replicated in the header, but not if omitted in the payload)\n\nThis seems to me as quite a big misunderstanding of the specification and should be rectified\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/40", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/40/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/40/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/40/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/40", "id": 59440606, "node_id": "MDU6SXNzdWU1OTQ0MDYwNg==", "number": 40, "title": "exp claim in header rather than body ?", "user": {"login": "harmon25", "id": 6964054, "node_id": "MDQ6VXNlcjY5NjQwNTQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/6964054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harmon25", "html_url": "https://github.com/harmon25", "followers_url": "https://api.github.com/users/harmon25/followers", "following_url": "https://api.github.com/users/harmon25/following{/other_user}", "gists_url": "https://api.github.com/users/harmon25/gists{/gist_id}", "starred_url": "https://api.github.com/users/harmon25/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harmon25/subscriptions", "organizations_url": "https://api.github.com/users/harmon25/orgs", "repos_url": "https://api.github.com/users/harmon25/repos", "events_url": "https://api.github.com/users/harmon25/events{/privacy}", "received_events_url": "https://api.github.com/users/harmon25/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2015-03-02T05:35:09Z", "updated_at": "2015-03-10T04:34:52Z", "closed_at": "2015-03-10T04:34:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "Have had great success using this library with angular-jwt... until attempting to implement client side token expiry notifications...\nthe angular-jwt module has a function to check if a token is expired, it is looking in the JWT body for the exp claim - however it appears flask-jwt is writing the exp and iat to the JWT header by default? \n\nAm I doing something wrong? or should the exp and iat be contained within the body?\n\nAny help would be great, thanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/38", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/38/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/38/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/38/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/38", "id": 58472372, "node_id": "MDU6SXNzdWU1ODQ3MjM3Mg==", "number": 38, "title": "New release", "user": {"login": "mr337", "id": 413937, "node_id": "MDQ6VXNlcjQxMzkzNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/413937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mr337", "html_url": "https://github.com/mr337", "followers_url": "https://api.github.com/users/mr337/followers", "following_url": "https://api.github.com/users/mr337/following{/other_user}", "gists_url": "https://api.github.com/users/mr337/gists{/gist_id}", "starred_url": "https://api.github.com/users/mr337/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mr337/subscriptions", "organizations_url": "https://api.github.com/users/mr337/orgs", "repos_url": "https://api.github.com/users/mr337/repos", "events_url": "https://api.github.com/users/mr337/events{/privacy}", "received_events_url": "https://api.github.com/users/mr337/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2015-02-21T19:52:33Z", "updated_at": "2015-10-16T14:16:31Z", "closed_at": "2015-10-16T14:16:31Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nWondering what is the plan on a new release on pypi? There have been some code changes that would be useful to get.\n\nThx!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/37", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/37/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/37/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/37/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/37", "id": 56936992, "node_id": "MDU6SXNzdWU1NjkzNjk5Mg==", "number": 37, "title": "Issue when combined with Flask-restful Resource classes?", "user": {"login": "kathychurch", "id": 10003254, "node_id": "MDQ6VXNlcjEwMDAzMjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/10003254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kathychurch", "html_url": "https://github.com/kathychurch", "followers_url": "https://api.github.com/users/kathychurch/followers", "following_url": "https://api.github.com/users/kathychurch/following{/other_user}", "gists_url": "https://api.github.com/users/kathychurch/gists{/gist_id}", "starred_url": "https://api.github.com/users/kathychurch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kathychurch/subscriptions", "organizations_url": "https://api.github.com/users/kathychurch/orgs", "repos_url": "https://api.github.com/users/kathychurch/repos", "events_url": "https://api.github.com/users/kathychurch/events{/privacy}", "received_events_url": "https://api.github.com/users/kathychurch/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2015-02-08T03:28:53Z", "updated_at": "2016-03-23T03:40:33Z", "closed_at": "2015-02-09T19:18:33Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I was having good luck with your package so far, but when I tried to integrate it with my Flask-restful resource classes, I ran into issues. Is there a way to use this decorator with Resource classes?  Here is a code snippet and error.  Thanks!\n\nclass Events(Resource):\n    @marshal_with(eventFields, envelope=\"events\")\n    @jwt_required\n    def get(self):\n        return events.values()\n\nTraceback (most recent call last):\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1475, in full_dispatch_request\n    rv = self.dispatch_request()\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask/app.py\", line 1461, in dispatch_request\n    return self.view_functions[rule.endpoint](**req.view_args)\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask_restful/**init**.py\", line 431, in wrapper\n    resp = resource(_args, *_kwargs)\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask/views.py\", line 84, in view\n    return self.dispatch_request(_args, *_kwargs)\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask_restful/**init**.py\", line 521, in dispatch_request\n    resp = meth(_args, *_kwargs)\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask_restful/**init**.py\", line 613, in wrapper\n    resp = f(_args, *_kwargs)\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/site-packages/flask_jwt/**init**.py\", line 85, in wrapper\n    @wraps(fn)\n  File \"/opt/iat/IaT5.1/usr/local/lib/python2.7/functools.py\", line 33, in update_wrapper\n    setattr(wrapper, attr, getattr(wrapped, attr))\nAttributeError: 'Events' object has no attribute '**name**'\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/36", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/36/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/36/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/36/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/36", "id": 54714552, "node_id": "MDU6SXNzdWU1NDcxNDU1Mg==", "number": 36, "title": "Can JWTs be assigned without going to /auth?", "user": {"login": "sureshjoshi", "id": 3823045, "node_id": "MDQ6VXNlcjM4MjMwNDU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3823045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sureshjoshi", "html_url": "https://github.com/sureshjoshi", "followers_url": "https://api.github.com/users/sureshjoshi/followers", "following_url": "https://api.github.com/users/sureshjoshi/following{/other_user}", "gists_url": "https://api.github.com/users/sureshjoshi/gists{/gist_id}", "starred_url": "https://api.github.com/users/sureshjoshi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sureshjoshi/subscriptions", "organizations_url": "https://api.github.com/users/sureshjoshi/orgs", "repos_url": "https://api.github.com/users/sureshjoshi/repos", "events_url": "https://api.github.com/users/sureshjoshi/events{/privacy}", "received_events_url": "https://api.github.com/users/sureshjoshi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2015-01-18T23:25:19Z", "updated_at": "2015-02-03T03:40:14Z", "closed_at": "2015-01-18T23:37:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've switched over all of my auth mechanisms to use JWTs across the board, but there is one workflow that would be great if there was an easy way to spit out a JWT from the library. \n\nIn my user registration workflow, they fill in their data, I add them to the database (after validation), I send them a confirmation mail, but now I'm requiring them to re-login to go through the @jwt_required workflow so I can return a JWT. \n\nAfter registration, I want them to log in directly, so is there a way to extract a JWT (given that they just gave me their username/pass), without having to re-encode them manually?\n\nThanks!\n-SJ\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/33", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/33/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/33/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/33/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/33", "id": 48025070, "node_id": "MDU6SXNzdWU0ODAyNTA3MA==", "number": 33, "title": "Why is _get_serializer() private?", "user": {"login": "efriese", "id": 938161, "node_id": "MDQ6VXNlcjkzODE2MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/938161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/efriese", "html_url": "https://github.com/efriese", "followers_url": "https://api.github.com/users/efriese/followers", "following_url": "https://api.github.com/users/efriese/following{/other_user}", "gists_url": "https://api.github.com/users/efriese/gists{/gist_id}", "starred_url": "https://api.github.com/users/efriese/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/efriese/subscriptions", "organizations_url": "https://api.github.com/users/efriese/orgs", "repos_url": "https://api.github.com/users/efriese/repos", "events_url": "https://api.github.com/users/efriese/events{/privacy}", "received_events_url": "https://api.github.com/users/efriese/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-11-06T22:46:24Z", "updated_at": "2015-10-23T15:02:38Z", "closed_at": "2015-10-23T15:02:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "It seems like you allow the user to overwrite the default decoder method, but _get_serializer is a private method. I want to add some extra steps to decoding (I'm adding functionality to track and revoke tokens), but I can't see how I can write a new decoder without also having to rewrite a serializer. \n\nThanks for creating this module!\n\n-Eric\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/32", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/32/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/32/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/32/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/32", "id": 46945218, "node_id": "MDU6SXNzdWU0Njk0NTIxOA==", "number": 32, "title": "Error handler not works", "user": {"login": "alexandre", "id": 5252795, "node_id": "MDQ6VXNlcjUyNTI3OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5252795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandre", "html_url": "https://github.com/alexandre", "followers_url": "https://api.github.com/users/alexandre/followers", "following_url": "https://api.github.com/users/alexandre/following{/other_user}", "gists_url": "https://api.github.com/users/alexandre/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandre/subscriptions", "organizations_url": "https://api.github.com/users/alexandre/orgs", "repos_url": "https://api.github.com/users/alexandre/repos", "events_url": "https://api.github.com/users/alexandre/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandre/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2014-10-27T18:59:47Z", "updated_at": "2014-10-28T14:49:26Z", "closed_at": "2014-10-28T14:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\n\nI'm testing this project and the error handler have returned a 500 status code and not the status code that showed in this message:\n\n```\nin verify_jwt\n    'WWW-Authenticate': 'JWT realm=\"%s\"' % realm\nflask_jwt.JWTError: ('Authorization Required', 'Authorization header was missing', 401, {'WWW-Authenticate': 'JWT realm=\"Login Required\"'})\n```\n\nMy first idea was to create a specific class to handle it, but reading the source code you already did it. So, I just followed the example to create a error_handler function available on the docstring.\n\nSome idea?\n\n[ ]'s\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/30", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/30/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/30/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/30/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/30", "id": 44899328, "node_id": "MDU6SXNzdWU0NDg5OTMyOA==", "number": 30, "title": "Testing support.", "user": {"login": "unhashable", "id": 263587, "node_id": "MDQ6VXNlcjI2MzU4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/263587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unhashable", "html_url": "https://github.com/unhashable", "followers_url": "https://api.github.com/users/unhashable/followers", "following_url": "https://api.github.com/users/unhashable/following{/other_user}", "gists_url": "https://api.github.com/users/unhashable/gists{/gist_id}", "starred_url": "https://api.github.com/users/unhashable/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unhashable/subscriptions", "organizations_url": "https://api.github.com/users/unhashable/orgs", "repos_url": "https://api.github.com/users/unhashable/repos", "events_url": "https://api.github.com/users/unhashable/events{/privacy}", "received_events_url": "https://api.github.com/users/unhashable/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-10-05T00:50:02Z", "updated_at": "2014-10-05T01:25:11Z", "closed_at": "2014-10-05T01:24:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "Can you suggest how to go about testing views that are protected with the `jwt_required` decorator?\n\nThanks much\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/28", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/28/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/28/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/28/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/28", "id": 44876178, "node_id": "MDU6SXNzdWU0NDg3NjE3OA==", "number": 28, "title": "Use with Github-Flask?", "user": {"login": "unhashable", "id": 263587, "node_id": "MDQ6VXNlcjI2MzU4Nw==", "avatar_url": "https://avatars1.githubusercontent.com/u/263587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unhashable", "html_url": "https://github.com/unhashable", "followers_url": "https://api.github.com/users/unhashable/followers", "following_url": "https://api.github.com/users/unhashable/following{/other_user}", "gists_url": "https://api.github.com/users/unhashable/gists{/gist_id}", "starred_url": "https://api.github.com/users/unhashable/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unhashable/subscriptions", "organizations_url": "https://api.github.com/users/unhashable/orgs", "repos_url": "https://api.github.com/users/unhashable/repos", "events_url": "https://api.github.com/users/unhashable/events{/privacy}", "received_events_url": "https://api.github.com/users/unhashable/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2014-10-04T07:57:10Z", "updated_at": "2014-10-04T10:12:02Z", "closed_at": "2014-10-04T10:09:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently using [github-flask](https://github.com/cenkalti/github-flask) to allow my users to authenticate  - you think its possible to avoid cookies to remember the session and instead use flask-jwt?\n\nThanks!\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/14", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/14/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/14/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/14/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/14", "id": 34432232, "node_id": "MDU6SXNzdWUzNDQzMjIzMg==", "number": 14, "title": "Specify all handlers using decorators instead of app config values?", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2014-05-28T03:17:37Z", "updated_at": "2014-06-05T15:06:08Z", "closed_at": "2014-06-05T15:06:08Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "There are currently two different ways to specify handlers:\n- App config values: `JWT_ENCODE_HANDLER`, `JWT_DECODE_HANDLER`, `JWT_PAYLOAD_HANDLER`\n- Decorators: `JWT#user_handler`, `JWT#error_handler`\n\nWhy not just have one mechanism for defining these handlers? Personally, the decorator syntax feels most natural:\n\n``` python\n@jwt.payload_handler\ndef make_payload(user):\n    return {'user_id': user.id }\n\n@jwt.user_handler\ndef get_user(payload):\n    return User.get(payload['user_id']\n```\n\nThis makes for a more consistent and cohesive API.\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/10", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/10/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/10/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/10", "id": 33630543, "node_id": "MDU6SXNzdWUzMzYzMDU0Mw==", "number": 10, "title": "[question] itsdangerous vs PyJWT?", "user": {"login": "sloria", "id": 2379650, "node_id": "MDQ6VXNlcjIzNzk2NTA=", "avatar_url": "https://avatars2.githubusercontent.com/u/2379650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sloria", "html_url": "https://github.com/sloria", "followers_url": "https://api.github.com/users/sloria/followers", "following_url": "https://api.github.com/users/sloria/following{/other_user}", "gists_url": "https://api.github.com/users/sloria/gists{/gist_id}", "starred_url": "https://api.github.com/users/sloria/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sloria/subscriptions", "organizations_url": "https://api.github.com/users/sloria/orgs", "repos_url": "https://api.github.com/users/sloria/repos", "events_url": "https://api.github.com/users/sloria/events{/privacy}", "received_events_url": "https://api.github.com/users/sloria/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2014-05-15T22:19:20Z", "updated_at": "2014-06-10T17:09:37Z", "closed_at": "2014-06-10T17:09:37Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Why use PyJWT instead of itsdangerous, which has an [implementation of JWS](http://pythonhosted.org/itsdangerous/#json-web-signatures)?\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/9", "repository_url": "https://api.github.com/repos/mattupstate/flask-jwt", "labels_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/9/labels{/name}", "comments_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/9/comments", "events_url": "https://api.github.com/repos/mattupstate/flask-jwt/issues/9/events", "html_url": "https://github.com/mattupstate/flask-jwt/issues/9", "id": 31695295, "node_id": "MDU6SXNzdWUzMTY5NTI5NQ==", "number": 9, "title": "Add better documentation for user_handler and current_user", "user": {"login": "svenstaro", "id": 1664, "node_id": "MDQ6VXNlcjE2NjQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svenstaro", "html_url": "https://github.com/svenstaro", "followers_url": "https://api.github.com/users/svenstaro/followers", "following_url": "https://api.github.com/users/svenstaro/following{/other_user}", "gists_url": "https://api.github.com/users/svenstaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/svenstaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svenstaro/subscriptions", "organizations_url": "https://api.github.com/users/svenstaro/orgs", "repos_url": "https://api.github.com/users/svenstaro/repos", "events_url": "https://api.github.com/users/svenstaro/events{/privacy}", "received_events_url": "https://api.github.com/users/svenstaro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2014-04-17T01:55:09Z", "updated_at": "2014-05-28T03:43:38Z", "closed_at": "2014-05-28T03:43:38Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "It appears there something like current_user from flask_login, sadly it doesn't appear to be documented. Could you add documentation on that?\n\nAlso, user_handler is not sufficiently documented, I think. Why do I need it if I already have the auth handler?\n", "performed_via_github_app": null, "score": 1.0}]}