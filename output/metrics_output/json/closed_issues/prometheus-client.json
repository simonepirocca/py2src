{"total_count": 263, "incomplete_results": false, "items": [{"url": "https://api.github.com/repos/prometheus/client_python/issues/571", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/571/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/571/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/571/events", "html_url": "https://github.com/prometheus/client_python/issues/571", "id": 673635439, "node_id": "MDU6SXNzdWU2NzM2MzU0Mzk=", "number": 571, "title": "Metric prefix addition during the output generation", "user": {"login": "pfreixes", "id": 1226121, "node_id": "MDQ6VXNlcjEyMjYxMjE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1226121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pfreixes", "html_url": "https://github.com/pfreixes", "followers_url": "https://api.github.com/users/pfreixes/followers", "following_url": "https://api.github.com/users/pfreixes/following{/other_user}", "gists_url": "https://api.github.com/users/pfreixes/gists{/gist_id}", "starred_url": "https://api.github.com/users/pfreixes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pfreixes/subscriptions", "organizations_url": "https://api.github.com/users/pfreixes/orgs", "repos_url": "https://api.github.com/users/pfreixes/repos", "events_url": "https://api.github.com/users/pfreixes/events{/privacy}", "received_events_url": "https://api.github.com/users/pfreixes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-05T15:35:32Z", "updated_at": "2020-08-05T17:49:30Z", "closed_at": "2020-08-05T17:49:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "HI,\r\n\r\nSeems that Prometheus client prescribes a pattern for declaring the metrics at module level, which has the good benefit of making it available quite straightforward by just importing that specific symbol, also allow the system to have it in memory - not deallocated by the GC - for the whole process time.\r\n\r\nThere is one downside effect by using that pattern, if we want to use the same code and metrics for many different services where the only thing that changes is the prefix of the metric and that prefix is only available at runtime - not load time - there is no way on adding this prefix to the already created metrics.\r\n\r\nWhat do you recommend in this scenario?\r\n\r\nIm wondering if we should create our own `Registry` - BTW is the class a public interface ? - and use the same instance in all of our metrics and when the data is gathered by `generate_latest` do something like this:\r\n\r\n```python\r\nfrom myregistry import REGISTRY\r\nif REGISTRY.prefix is None\r\n    REGISTRY.prefix = \"fooservice\"\r\ngenerate_latest(REGISTRY)\r\n```\r\nBehind the scenes `REGISTRY` would override the `collect` metric or other and would mutate the metric name by adding the prefix that was configured.\r\n\r\nWDYT?\r\n\r\nQuestion? What would happen if we would have the same requirement for labels? so for example, if we would like to add some labels during the `generate_latest`? As an exmple of the lables that could be introduced for all of the metrics would be the pod name.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/570", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/570/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/570/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/570/events", "html_url": "https://github.com/prometheus/client_python/issues/570", "id": 673214232, "node_id": "MDU6SXNzdWU2NzMyMTQyMzI=", "number": 570, "title": "What is the correct way to terminate the sample program?", "user": {"login": "KansaiUser", "id": 67377117, "node_id": "MDQ6VXNlcjY3Mzc3MTE3", "avatar_url": "https://avatars1.githubusercontent.com/u/67377117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KansaiUser", "html_url": "https://github.com/KansaiUser", "followers_url": "https://api.github.com/users/KansaiUser/followers", "following_url": "https://api.github.com/users/KansaiUser/following{/other_user}", "gists_url": "https://api.github.com/users/KansaiUser/gists{/gist_id}", "starred_url": "https://api.github.com/users/KansaiUser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KansaiUser/subscriptions", "organizations_url": "https://api.github.com/users/KansaiUser/orgs", "repos_url": "https://api.github.com/users/KansaiUser/repos", "events_url": "https://api.github.com/users/KansaiUser/events{/privacy}", "received_events_url": "https://api.github.com/users/KansaiUser/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-05T02:57:58Z", "updated_at": "2020-08-05T07:51:54Z", "closed_at": "2020-08-05T07:51:54Z", "author_association": "NONE", "active_lock_reason": null, "body": "In your readme page you have this program \r\n\r\n```\r\nfrom prometheus_client import start_http_server, Summary\r\nimport random\r\nimport time\r\n\r\n# Create a metric to track time spent and requests made.\r\nREQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')\r\n\r\n# Decorate function with metric.\r\n@REQUEST_TIME.time()\r\ndef process_request(t):\r\n    \"\"\"A dummy function that takes some time.\"\"\"\r\n    time.sleep(t)\r\n\r\nif __name__ == '__main__':\r\n    # Start up the server to expose the metrics.\r\n    start_http_server(8000)\r\n    # Generate some requests.\r\n    while True:\r\n        process_request(random.random())\r\n\r\n```\r\n\r\nWhen I run it (with spyder) for the first time I got no problem. \r\nBut later I do Ctrl-C to stop the program. \r\n\r\nThen when I try to run it again I got \r\n\r\n> ValueError: Duplicated timeseries in CollectorRegistry: {'request_processing_seconds_created', 'request_processing_seconds_sum', 'request_processing_seconds_count', 'request_processing_seconds'}\r\n\r\nThis is due to line 31 in your registry.py file. \r\n\r\nWhat is the correct way to terminate the program so that timeseries are not left hanging on?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/569", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/569/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/569/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/569/events", "html_url": "https://github.com/prometheus/client_python/issues/569", "id": 671640523, "node_id": "MDU6SXNzdWU2NzE2NDA1MjM=", "number": 569, "title": "Prometheus metrics not getting exposed for tasks running from celery workers", "user": {"login": "utkarshyadavin", "id": 23925121, "node_id": "MDQ6VXNlcjIzOTI1MTIx", "avatar_url": "https://avatars1.githubusercontent.com/u/23925121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/utkarshyadavin", "html_url": "https://github.com/utkarshyadavin", "followers_url": "https://api.github.com/users/utkarshyadavin/followers", "following_url": "https://api.github.com/users/utkarshyadavin/following{/other_user}", "gists_url": "https://api.github.com/users/utkarshyadavin/gists{/gist_id}", "starred_url": "https://api.github.com/users/utkarshyadavin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/utkarshyadavin/subscriptions", "organizations_url": "https://api.github.com/users/utkarshyadavin/orgs", "repos_url": "https://api.github.com/users/utkarshyadavin/repos", "events_url": "https://api.github.com/users/utkarshyadavin/events{/privacy}", "received_events_url": "https://api.github.com/users/utkarshyadavin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-08-02T15:52:02Z", "updated_at": "2020-08-02T16:03:49Z", "closed_at": "2020-08-02T16:03:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running a Fastapi python server along with multiple celery workers to process tasks in background. So basically two apps are running in parallel. But the prometheus metrics of tasks run by worker process are not getting exposed at the /metrics endpoint. Anybody has any idea how to get around this?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/566", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/566/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/566/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/566/events", "html_url": "https://github.com/prometheus/client_python/issues/566", "id": 662127244, "node_id": "MDU6SXNzdWU2NjIxMjcyNDQ=", "number": 566, "title": "Multiprocess: Only gauge files deleted on child exit?", "user": {"login": "carletes", "id": 1711, "node_id": "MDQ6VXNlcjE3MTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/1711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carletes", "html_url": "https://github.com/carletes", "followers_url": "https://api.github.com/users/carletes/followers", "following_url": "https://api.github.com/users/carletes/following{/other_user}", "gists_url": "https://api.github.com/users/carletes/gists{/gist_id}", "starred_url": "https://api.github.com/users/carletes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carletes/subscriptions", "organizations_url": "https://api.github.com/users/carletes/orgs", "repos_url": "https://api.github.com/users/carletes/repos", "events_url": "https://api.github.com/users/carletes/events{/privacy}", "received_events_url": "https://api.github.com/users/carletes/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-20T18:29:58Z", "updated_at": "2020-07-20T20:11:00Z", "closed_at": "2020-07-20T20:11:00Z", "author_association": "NONE", "active_lock_reason": null, "body": "I noticed that `prometheus_client.multiprocess.mark_process_dead(pid)` only deletes files backing gauge objects for the given `pid`. All other files backing counters, histograms, etc for the same `pid` are kept.\r\n\r\nShouldn't those other files be deleted as well? After reading https://github.com/prometheus/client_python#multiprocess-mode-gunicorn:\r\n\r\n> This directory must be wiped between Gunicorn runs (before startup is recommended)\r\n\r\nI would have expected them to be deleted, too, because they refer to a process that no longer exists, and keeping them around would produce misleading metrics and waste disk space.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/565", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/565/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/565/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/565/events", "html_url": "https://github.com/prometheus/client_python/issues/565", "id": 656530300, "node_id": "MDU6SXNzdWU2NTY1MzAzMDA=", "number": 565, "title": "Bug(?): Prometheus multiprocess not working", "user": {"login": "trallnag", "id": 24834206, "node_id": "MDQ6VXNlcjI0ODM0MjA2", "avatar_url": "https://avatars3.githubusercontent.com/u/24834206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/trallnag", "html_url": "https://github.com/trallnag", "followers_url": "https://api.github.com/users/trallnag/followers", "following_url": "https://api.github.com/users/trallnag/following{/other_user}", "gists_url": "https://api.github.com/users/trallnag/gists{/gist_id}", "starred_url": "https://api.github.com/users/trallnag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/trallnag/subscriptions", "organizations_url": "https://api.github.com/users/trallnag/orgs", "repos_url": "https://api.github.com/users/trallnag/repos", "events_url": "https://api.github.com/users/trallnag/events{/privacy}", "received_events_url": "https://api.github.com/users/trallnag/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-07-14T11:10:24Z", "updated_at": "2020-07-14T11:38:41Z", "closed_at": "2020-07-14T11:38:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "I cannot get the Prometheus client to work in multiprocess mode. I managed to reduce my code to the following few lines and the issue still persists. Am I missing something?\r\n\r\nhttps://repl.it/repls/StimulatingDearestSampler\r\n\r\n1. Requirements / Dependencies:\r\n\r\n* prometheus client 0.8.0\r\n\r\n2. Script:\r\n\r\n```python\r\nimport tempfile\r\nimport os\r\n\r\nfrom prometheus_client import Counter, REGISTRY\r\n\r\nfrom prometheus_client import generate_latest, CollectorRegistry\r\nfrom prometheus_client import multiprocess\r\n\r\nCOUNTER = Counter(\"gimp\", \"green is my pepper\")\r\n\r\nwith tempfile.TemporaryDirectory() as tmpdir:\r\n    print('created temporary directory', tmpdir)\r\n    os.environ[\"prometheus_multiproc_dir\"] = tmpdir\r\n\r\n    COUNTER.inc()\r\n    COUNTER.inc()\r\n    COUNTER.inc()\r\n    COUNTER.inc()\r\n\r\n    if \"prometheus_multiproc_dir\" in os.environ:\r\n      registry = CollectorRegistry()\r\n      multiprocess.MultiProcessCollector(registry)\r\n    else:\r\n        registry = REGISTRY\r\n\r\n    print(generate_latest(registry))\r\n```\r\n\r\nWhen I run the script I get the following output:\r\n\r\n```\r\ncreated temporary directory /tmp/tmpy_rdbzg4\r\nb''\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/561", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/561/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/561/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/561/events", "html_url": "https://github.com/prometheus/client_python/issues/561", "id": 643881479, "node_id": "MDU6SXNzdWU2NDM4ODE0Nzk=", "number": 561, "title": "Setting up a Gauge with labels causes `set_to_current_time()` to complain", "user": {"login": "aanastasiou", "id": 1336337, "node_id": "MDQ6VXNlcjEzMzYzMzc=", "avatar_url": "https://avatars1.githubusercontent.com/u/1336337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aanastasiou", "html_url": "https://github.com/aanastasiou", "followers_url": "https://api.github.com/users/aanastasiou/followers", "following_url": "https://api.github.com/users/aanastasiou/following{/other_user}", "gists_url": "https://api.github.com/users/aanastasiou/gists{/gist_id}", "starred_url": "https://api.github.com/users/aanastasiou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aanastasiou/subscriptions", "organizations_url": "https://api.github.com/users/aanastasiou/orgs", "repos_url": "https://api.github.com/users/aanastasiou/repos", "events_url": "https://api.github.com/users/aanastasiou/events{/privacy}", "received_events_url": "https://api.github.com/users/aanastasiou/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-06-23T14:17:35Z", "updated_at": "2020-06-23T14:30:40Z", "closed_at": "2020-06-23T14:30:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello\r\n\r\nI am trying to set up a Gauge with labels but this causes `set_to_current_time()` to fire an error. When the Gauge is setup without labels, the whole thing works as expected. \r\n\r\nI am setting up the Gague as follows:\r\n\r\n```\r\nsome_gauge = prometheus_client.Gauge(\"some_parameter\", \r\n                                      \"An instantaneous parameter\",\r\n                                      labelnames = (\"dim1\",\"dim2\",\"dim3\"),\r\n                                      namespace=\"somens\",\r\n                                      unit=\"some_unit\")\r\n\r\n...\r\n...\r\n...\r\n```\r\n\r\nAnd at the point of updating its instantaneous value:\r\n\r\n```\r\nsome_gauge.set_to_current_time()\r\nsome_gauge.labels(\"Alpha\", \"Beta\", \"Gamma\").set(current_gauge_value)\r\n```\r\n\r\nThis fails with:\r\n\r\n```\r\n...\r\nself._value.set(float(value))\r\nAttributeError: 'Gauge' object has no attribute '_value'\r\n```\r\n\r\nThat is, it does not even get to the point where the server is raised so that Prometheus can connect to it.\r\n\r\nIf however I define the gauge as:\r\n\r\n```\r\nsome_gauge = prometheus_client.Gauge(\"some_parameter\", \r\n                                      \"An instantaneous parameter\")\r\n```\r\n\r\nEverything works as expected. The point is, I need to add the labels along with the measurement as well.\r\n\r\nWorking in Ubuntu 20.04(Linux 5.3.0-1028-azure x86_64), Python 3.8, prometheus, version 2.7.1+ds (branch: debian/sid, revision: 2.7.1+ds-3), prometheus-client version 0.8.0\r\n\r\nAny ideas?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/558", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/558/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/558/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/558/events", "html_url": "https://github.com/prometheus/client_python/issues/558", "id": 639940484, "node_id": "MDU6SXNzdWU2Mzk5NDA0ODQ=", "number": 558, "title": "Windows Metrics for Grafana Dashboard", "user": {"login": "Zayan1221", "id": 65530039, "node_id": "MDQ6VXNlcjY1NTMwMDM5", "avatar_url": "https://avatars0.githubusercontent.com/u/65530039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zayan1221", "html_url": "https://github.com/Zayan1221", "followers_url": "https://api.github.com/users/Zayan1221/followers", "following_url": "https://api.github.com/users/Zayan1221/following{/other_user}", "gists_url": "https://api.github.com/users/Zayan1221/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zayan1221/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zayan1221/subscriptions", "organizations_url": "https://api.github.com/users/Zayan1221/orgs", "repos_url": "https://api.github.com/users/Zayan1221/repos", "events_url": "https://api.github.com/users/Zayan1221/events{/privacy}", "received_events_url": "https://api.github.com/users/Zayan1221/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-16T20:08:14Z", "updated_at": "2020-06-16T20:51:10Z", "closed_at": "2020-06-16T20:51:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nCan I have scripts for these Metrics Windows client.\r\n\u00a7 CPU utilization\r\n\u00a7 File System utilization\r\n\u00a7 System messages (ex. Errors in /var/log/messages) Any critical errors reported in logs\r\n\u00a7 Disk INODE utilization\r\n\u00a7 System process monitoring (ex. Set of services on a server if they are running or not) Alarm if services are not running.\r\n\r\nFor Memory I got this executed fine :\r\n100 * (windows_os_physical_memory_free_bytes{instance=\"$instance\"}) / windows_cs_physical_memory_bytes{instance=\"$instance\"}", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/557", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/557/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/557/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/557/events", "html_url": "https://github.com/prometheus/client_python/issues/557", "id": 634580236, "node_id": "MDU6SXNzdWU2MzQ1ODAyMzY=", "number": 557, "title": "double namespace/prefix when using MultiProcessCollector", "user": {"login": "arahayrabedian", "id": 5959895, "node_id": "MDQ6VXNlcjU5NTk4OTU=", "avatar_url": "https://avatars0.githubusercontent.com/u/5959895?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arahayrabedian", "html_url": "https://github.com/arahayrabedian", "followers_url": "https://api.github.com/users/arahayrabedian/followers", "following_url": "https://api.github.com/users/arahayrabedian/following{/other_user}", "gists_url": "https://api.github.com/users/arahayrabedian/gists{/gist_id}", "starred_url": "https://api.github.com/users/arahayrabedian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arahayrabedian/subscriptions", "organizations_url": "https://api.github.com/users/arahayrabedian/orgs", "repos_url": "https://api.github.com/users/arahayrabedian/repos", "events_url": "https://api.github.com/users/arahayrabedian/events{/privacy}", "received_events_url": "https://api.github.com/users/arahayrabedian/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2020-06-08T12:45:01Z", "updated_at": "2020-06-08T17:41:08Z", "closed_at": "2020-06-08T16:06:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe've been trying to wrap around prometheus client in order to standardize some things within our application (in this case, prefixes/namespaces). We have one application that uses a process pool and so we started to use the `MultiProcessCollector` and faced an issue with metrics appearing with a duplicated prefix. Tracing this down we found that the first version was kind of our own fault, but then moving to using the `namespace` argument that this is a deeper-running issue with the client.\r\n\r\nI don't know why this only happens with `MultiProcessCollector`, as I've seen it happen *internally* in the prometheus lib itself while debugging this issue without `MultiProcessCollector`, but then somehow the weird metrics don't appear in the final output.\r\n\r\nMinimal POC below, please ensure that you've set `prometheus_multiproc_dir` env var to somewhere convenient to you and that you don't forget to remove the `*.db` files between runs.\r\n\r\n```python\r\n#!/usr/bin/env python\r\n\r\nfrom prometheus_client import generate_latest\r\nfrom prometheus_client import CollectorRegistry\r\nfrom prometheus_client.multiprocess import MultiProcessCollector\r\nfrom prometheus_client import Counter\r\n\r\nprometheus_registry = CollectorRegistry()\r\nMultiProcessCollector(prometheus_registry)\r\n\r\nMY_PREFIX = \"dejavu\"\r\n\r\nclass MyCounter1(Counter):\r\n    def __init__(self, name, *args, **kwargs):\r\n        name = \"_\".join((MY_PREFIX, name))\r\n        super().__init__(name, *args, **kwargs)\r\n\r\nclass MyCounter2(Counter):\r\n    def __init__(self, name, *args, **kwargs):\r\n        super().__init__(name, namespace=MY_PREFIX, *args, **kwargs)\r\n\r\nif __name__ == \"__main__\":\r\n    counter_1 = MyCounter1(\"first\", \"the premiere\", (\"label_one\", \"label_two\"), registry=prometheus_registry)\r\n    counter_2 = MyCounter2(\"second\", \"the less premiere-y one\", (\"label_three\", \"label_four\"), registry=prometheus_registry)\r\n\r\n    counter_1.labels(\"one\", \"two\").inc(3)\r\n    counter_2.labels(\"three\", \"four\").inc(3)\r\n\r\n    print(generate_latest(prometheus_registry))\r\n```\r\n\r\nthis should result in:\r\n\r\n```\r\n# HELP dejavu_dejavu_first_total Multiprocess metric\r\n# TYPE dejavu_dejavu_first_total counter\r\ndejavu_dejavu_first_total{label_one=\"one\",label_two=\"two\"} 3.0\r\n# HELP dejavu_dejavu_second_total Multiprocess metric\r\n# TYPE dejavu_dejavu_second_total counter\r\ndejavu_dejavu_second_total{label_four=\"four\",label_three=\"three\"} 3.0\r\n# HELP dejavu_first_total the premiere\r\n# TYPE dejavu_first_total counter\r\ndejavu_first_total{label_one=\"one\",label_two=\"two\"} 3.0\r\n# HELP dejavu_first_created the premiere\r\n# TYPE dejavu_first_created gauge\r\ndejavu_first_created{label_one=\"one\",label_two=\"two\"} 1.591620096175255e+09\r\n# HELP dejavu_second_total the less premiere-y one\r\n# TYPE dejavu_second_total counter\r\ndejavu_second_total{label_four=\"four\",label_three=\"three\"} 3.0\r\n# HELP dejavu_second_created the less premiere-y one\r\n# TYPE dejavu_second_created gauge\r\ndejavu_second_created{label_four=\"four\",label_three=\"three\"} 1.591620096175297e+09\r\n```\r\n\r\nnotice the `dejavu_` and `dejavu_dejavu_` prefixes. This also happens for Histograms, etc.\r\n\r\nthis POC was run on Ubuntu with a fresh virtualenv running python 3.8.2 and `prometheus-client==0.8.0`\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/556", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/556/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/556/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/556/events", "html_url": "https://github.com/prometheus/client_python/issues/556", "id": 631388937, "node_id": "MDU6SXNzdWU2MzEzODg5Mzc=", "number": 556, "title": "Cannot build rpm/deb for old python <= 3.4 starting from 0.8.0", "user": {"login": "sayf-eddine-scality", "id": 40466122, "node_id": "MDQ6VXNlcjQwNDY2MTIy", "avatar_url": "https://avatars3.githubusercontent.com/u/40466122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sayf-eddine-scality", "html_url": "https://github.com/sayf-eddine-scality", "followers_url": "https://api.github.com/users/sayf-eddine-scality/followers", "following_url": "https://api.github.com/users/sayf-eddine-scality/following{/other_user}", "gists_url": "https://api.github.com/users/sayf-eddine-scality/gists{/gist_id}", "starred_url": "https://api.github.com/users/sayf-eddine-scality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sayf-eddine-scality/subscriptions", "organizations_url": "https://api.github.com/users/sayf-eddine-scality/orgs", "repos_url": "https://api.github.com/users/sayf-eddine-scality/repos", "events_url": "https://api.github.com/users/sayf-eddine-scality/events{/privacy}", "received_events_url": "https://api.github.com/users/sayf-eddine-scality/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T07:50:48Z", "updated_at": "2020-06-10T21:14:41Z", "closed_at": "2020-06-10T21:14:41Z", "author_association": "NONE", "active_lock_reason": null, "body": "Setup.py says the client 0.8.0 supports python3.4. This is true if you are installing using pip.\r\nBut building an rpm/deb file will fail because it will try to byte-compile all the files including `asgi.py` which has `async` syntax that is not compatible with python <= 3.4.\r\nI can work around this in the setup.py by overriding the buildcmd but it still a bit annoying.\r\nJust letting you know, not expecting a fix", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/555", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/555/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/555/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/555/events", "html_url": "https://github.com/prometheus/client_python/issues/555", "id": 631237799, "node_id": "MDU6SXNzdWU2MzEyMzc3OTk=", "number": 555, "title": "How to clear old data", "user": {"login": "kengan", "id": 18627678, "node_id": "MDQ6VXNlcjE4NjI3Njc4", "avatar_url": "https://avatars1.githubusercontent.com/u/18627678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kengan", "html_url": "https://github.com/kengan", "followers_url": "https://api.github.com/users/kengan/followers", "following_url": "https://api.github.com/users/kengan/following{/other_user}", "gists_url": "https://api.github.com/users/kengan/gists{/gist_id}", "starred_url": "https://api.github.com/users/kengan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kengan/subscriptions", "organizations_url": "https://api.github.com/users/kengan/orgs", "repos_url": "https://api.github.com/users/kengan/repos", "events_url": "https://api.github.com/users/kengan/events{/privacy}", "received_events_url": "https://api.github.com/users/kengan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-06-05T01:02:07Z", "updated_at": "2020-06-05T08:46:39Z", "closed_at": "2020-06-05T08:46:39Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a  Gauge in my application\r\nI also have a array which saves the metrics\r\nFor example \r\nat 10:00, the array likes this\r\narray[1]=\"machine{'test'=1}\"\r\narray[2]=\"machine{'test'=2}\"\r\neach recod in array is a metrics and using Gauge.labes().set() to update metrics\r\n\r\nbut at 10:30, the array likes this\r\narray[1]=\"machine{'test'=1}\"\r\n the second record has been removed\r\n\r\nbut the Gauge still has the record which has been removed\r\n\r\n\r\nCan someone help me how to clear the old data? Right now I solve this problem by restarting my application.\r\nThank  you.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/553", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/553/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/553/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/553/events", "html_url": "https://github.com/prometheus/client_python/issues/553", "id": 626500222, "node_id": "MDU6SXNzdWU2MjY1MDAyMjI=", "number": 553, "title": "Broken metrics when updating to 0.8.0 because of appended units", "user": {"login": "Sebadst", "id": 14879302, "node_id": "MDQ6VXNlcjE0ODc5MzAy", "avatar_url": "https://avatars2.githubusercontent.com/u/14879302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sebadst", "html_url": "https://github.com/Sebadst", "followers_url": "https://api.github.com/users/Sebadst/followers", "following_url": "https://api.github.com/users/Sebadst/following{/other_user}", "gists_url": "https://api.github.com/users/Sebadst/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sebadst/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sebadst/subscriptions", "organizations_url": "https://api.github.com/users/Sebadst/orgs", "repos_url": "https://api.github.com/users/Sebadst/repos", "events_url": "https://api.github.com/users/Sebadst/events{/privacy}", "received_events_url": "https://api.github.com/users/Sebadst/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T13:16:06Z", "updated_at": "2020-05-28T13:35:06Z", "closed_at": "2020-05-28T13:35:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI am having issues when updating the version of this library from `0.7.1` to `0.8.0` . I left a comment in [this pr](https://github.com/prometheus/client_python/pull/543#issuecomment-635332470) but I wasn't sure if you'll read closed PRs comments, therefore I decided to also open this issue.\r\n\r\nI am not sure whether it is intended to have this behaviour with the unit appended again but, as an external developer, I find a bit weird that this is happening from version `0.7.x` to `0.8.x` given that it actually is a breaking change.\r\nCould you please let me know your thoughts on the topic? \r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/552", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/552/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/552/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/552/events", "html_url": "https://github.com/prometheus/client_python/issues/552", "id": 626433524, "node_id": "MDU6SXNzdWU2MjY0MzM1MjQ=", "number": 552, "title": "Histograms with bucket labels starting with '-' are missing _sum metric in 0.8.0?", "user": {"login": "tobiasbp", "id": 5671083, "node_id": "MDQ6VXNlcjU2NzEwODM=", "avatar_url": "https://avatars0.githubusercontent.com/u/5671083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobiasbp", "html_url": "https://github.com/tobiasbp", "followers_url": "https://api.github.com/users/tobiasbp/followers", "following_url": "https://api.github.com/users/tobiasbp/following{/other_user}", "gists_url": "https://api.github.com/users/tobiasbp/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobiasbp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobiasbp/subscriptions", "organizations_url": "https://api.github.com/users/tobiasbp/orgs", "repos_url": "https://api.github.com/users/tobiasbp/repos", "events_url": "https://api.github.com/users/tobiasbp/events{/privacy}", "received_events_url": "https://api.github.com/users/tobiasbp/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-28T11:27:15Z", "updated_at": "2020-05-28T13:36:17Z", "closed_at": "2020-05-28T13:36:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have encountered an issue with my metrics after having upgraded from version 0.7.1 to 0.8.0.\r\n\r\nIn the example below, the resulting histogram does not have the sum metric (suffix _sum) when using 0.8.0. If I use version 0.7.1, the _sum metric is back.     \r\n```\r\nlabel_values = ['1', 'DKK']\r\nbucket_values = [['-50000', 40], ['+Inf', 40]]\r\nbuckets_sum = 3000.0\r\n\r\nh = HistogramMetricFamily(name, desc, labels=label_names)\r\nh.add_metric(label_values, bucket_values, buckets_sum)\r\n\r\nyield h\r\n```\r\n\r\nIf I change the value of the 1st bucket, so it no longer has the minus/dash prefix (As seen below), the _sum metric is no longer missing in when using version 0.8.0.\r\n\r\n`bucket_values = [['50000', 40], ['+Inf', 40]]`\r\n\r\nIs this behaviour a feature (Which I do not understand) or a regression?\r\n\r\nThanks,\r\nTobias\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/551", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/551/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/551/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/551/events", "html_url": "https://github.com/prometheus/client_python/issues/551", "id": 623283316, "node_id": "MDU6SXNzdWU2MjMyODMzMTY=", "number": 551, "title": "set a metric with no data on porpouse", "user": {"login": "1ber", "id": 36287145, "node_id": "MDQ6VXNlcjM2Mjg3MTQ1", "avatar_url": "https://avatars1.githubusercontent.com/u/36287145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1ber", "html_url": "https://github.com/1ber", "followers_url": "https://api.github.com/users/1ber/followers", "following_url": "https://api.github.com/users/1ber/following{/other_user}", "gists_url": "https://api.github.com/users/1ber/gists{/gist_id}", "starred_url": "https://api.github.com/users/1ber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1ber/subscriptions", "organizations_url": "https://api.github.com/users/1ber/orgs", "repos_url": "https://api.github.com/users/1ber/repos", "events_url": "https://api.github.com/users/1ber/events{/privacy}", "received_events_url": "https://api.github.com/users/1ber/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-22T15:18:35Z", "updated_at": "2020-05-22T16:15:48Z", "closed_at": "2020-05-22T16:15:48Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have an exporter in which i get some values from an application and i want to show when i can't read the values (instead of keeping the old values). If i try to set the Gauge with None i get an error:\r\n\r\nprometheus_client/metrics.py\", line 344, in set\r\n    self._value.set(float(value))\r\nTypeError: float() argument must be a string or a number, not 'NoneType'\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/550", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/550/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/550/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/550/events", "html_url": "https://github.com/prometheus/client_python/issues/550", "id": 621781856, "node_id": "MDU6SXNzdWU2MjE3ODE4NTY=", "number": 550, "title": "ImportError on make_asgi_app ", "user": {"login": "larsclaussen", "id": 10025277, "node_id": "MDQ6VXNlcjEwMDI1Mjc3", "avatar_url": "https://avatars0.githubusercontent.com/u/10025277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/larsclaussen", "html_url": "https://github.com/larsclaussen", "followers_url": "https://api.github.com/users/larsclaussen/followers", "following_url": "https://api.github.com/users/larsclaussen/following{/other_user}", "gists_url": "https://api.github.com/users/larsclaussen/gists{/gist_id}", "starred_url": "https://api.github.com/users/larsclaussen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/larsclaussen/subscriptions", "organizations_url": "https://api.github.com/users/larsclaussen/orgs", "repos_url": "https://api.github.com/users/larsclaussen/repos", "events_url": "https://api.github.com/users/larsclaussen/events{/privacy}", "received_events_url": "https://api.github.com/users/larsclaussen/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T13:53:42Z", "updated_at": "2020-05-20T16:43:59Z", "closed_at": "2020-05-20T16:43:58Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm trying to import the `make_asgi_app` function as stated in the documentation which leads to an exception\r\n\r\n```\r\nIn [4]: from prometheus_client import make_asgi_app                                                                                           \r\n---------------------------------------------------------------------------\r\nImportError                               Traceback (most recent call last)\r\n<ipython-input-4-cad669a02132> in <module>\r\n----> 1 from prometheus_client import make_asgi_app\r\n\r\nImportError: cannot import name 'make_asgi_app' from 'prometheus_client' (/usr/local/lib/python3.7/site-packages/prometheus_client/__init__.py)\r\n```\r\nOh I see it is not included in the release code and the documentation is based on master apparently. Maybe it would be good idea to move the docs to readthedocs or something alike and pin it to a release. \r\n ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/549", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/549/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/549/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/549/events", "html_url": "https://github.com/prometheus/client_python/issues/549", "id": 621761002, "node_id": "MDU6SXNzdWU2MjE3NjEwMDI=", "number": 549, "title": "Unexpected behaviour around registries and Gauge constructor", "user": {"login": "jonerer", "id": 130371, "node_id": "MDQ6VXNlcjEzMDM3MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/130371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonerer", "html_url": "https://github.com/jonerer", "followers_url": "https://api.github.com/users/jonerer/followers", "following_url": "https://api.github.com/users/jonerer/following{/other_user}", "gists_url": "https://api.github.com/users/jonerer/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonerer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonerer/subscriptions", "organizations_url": "https://api.github.com/users/jonerer/orgs", "repos_url": "https://api.github.com/users/jonerer/repos", "events_url": "https://api.github.com/users/jonerer/events{/privacy}", "received_events_url": "https://api.github.com/users/jonerer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-20T13:25:28Z", "updated_at": "2020-05-20T16:43:11Z", "closed_at": "2020-05-20T16:43:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello!\r\n\r\nThanks for the great library! We've used to great success to gather metrics for various python services. But we have also stumbled upon some quite unexpected behaviour when figuring out how to use it. Here is some example code (using 0.7.1):\r\n\r\n```\r\nfrom prometheus_client import (\r\n    CollectorRegistry,\r\n    Gauge,\r\n    pushadd_to_gateway,\r\n    generate_latest,\r\n)\r\nlabels = ['namespace']\r\nlabel_values = ['dev']\r\n\r\n# 1\r\nregistry = CollectorRegistry()\r\ngauge = Gauge(\"example\", \"Example gauge\", registry=registry, labelnames=labels)\r\ngauge.labels(label_values).set(5)\r\n\r\nprint(generate_latest(registry))\r\n# HELP example Example gauge\\n# TYPE example gauge\\nexample{namespace=\"[\\'dev\\']\"} 5.0\\n'\r\n# Contains gauge, with labels. As expected.\r\n\r\n\r\n# -----------------\r\n# 2\r\nregistry = CollectorRegistry()\r\ngauge = Gauge(\r\n    \"example\",\r\n    \"Example gauge\",\r\n    registry=registry,\r\n    labelnames=labels,\r\n    labelvalues=label_values,\r\n)\r\ngauge.set(5)\r\n\r\nprint(generate_latest(registry))\r\n# b''\r\n# Gauge is never added to registry if we supply \"labelvalues\". This is unexpected, and not mentioned by a warning log or so.\r\n\r\n# -----------------\r\n# 3\r\nregistry = CollectorRegistry()\r\ngauge = Gauge(\r\n    \"example\",\r\n    \"Example gauge\",\r\n    registry=registry,\r\n    labelnames=labels,\r\n    labelvalues=label_values,\r\n)\r\ngauge.set(5)\r\n\r\nregistry.register(gauge)\r\n\r\nprint(generate_latest(registry))\r\n# b'# HELP example Example gauge\\n# TYPE example gauge\\nexample 5.0\\n'\r\n# Contains the gauge, but the value is *not* set to the correct label\r\n```\r\n\r\nWe have found that behaviour # 2 seems to be deliberately programmed, but we can't figure out what the reasoning is:\r\n\r\n```\r\n# metrics.py\r\nclass MetricWrapperBase(object):\r\n    def __init__(self,\r\n        [...snip...]\r\n        if not self._labelvalues:\r\n            # Register the multi-wrapper parent metric, or if a label-less metric, the whole shebang.    \r\n            if registry:\r\n                registry.register(self)\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/546", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/546/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/546/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/546/events", "html_url": "https://github.com/prometheus/client_python/issues/546", "id": 617041520, "node_id": "MDU6SXNzdWU2MTcwNDE1MjA=", "number": 546, "title": "Pushgateway exposition: properly handle empty label values in grouping key", "user": {"login": "beorn7", "id": 5609886, "node_id": "MDQ6VXNlcjU2MDk4ODY=", "avatar_url": "https://avatars3.githubusercontent.com/u/5609886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beorn7", "html_url": "https://github.com/beorn7", "followers_url": "https://api.github.com/users/beorn7/followers", "following_url": "https://api.github.com/users/beorn7/following{/other_user}", "gists_url": "https://api.github.com/users/beorn7/gists{/gist_id}", "starred_url": "https://api.github.com/users/beorn7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beorn7/subscriptions", "organizations_url": "https://api.github.com/users/beorn7/orgs", "repos_url": "https://api.github.com/users/beorn7/repos", "events_url": "https://api.github.com/users/beorn7/events{/privacy}", "received_events_url": "https://api.github.com/users/beorn7/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-05-13T00:01:33Z", "updated_at": "2020-05-15T11:29:23Z", "closed_at": "2020-05-15T11:29:23Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "See https://github.com/prometheus/pushgateway/pull/346 for a documentation update for the PGW about empty label values in the grouping key. (Note: It's really just documenting the current state of the PGW. No change of behavior of the PGW involved.)\r\n\r\nThe code in `exposition.py` currently accepts empty label values for the grouping key. However, it then attempts to push in an invalid way, see  https://github.com/prometheus/pushgateway/issues/344 for details (the issue demonstrates it with client_golang, but presumably client_python would show exactly the same behavior).\r\n\r\nWhile the use case for empty label values in the grouping key is somewhat esoteric, a case can be made for it. Thus, we should probably support it in the way now [documented](https://github.com/prometheus/pushgateway/pull/346). Alternative is to disallow it in `exposition.py`. Just the current state of pretending it works but then fail to push is clearly a bug.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/545", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/545/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/545/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/545/events", "html_url": "https://github.com/prometheus/client_python/issues/545", "id": 616496450, "node_id": "MDU6SXNzdWU2MTY0OTY0NTA=", "number": 545, "title": "Names for gauge collectors", "user": {"login": "Lawouach", "id": 769982, "node_id": "MDQ6VXNlcjc2OTk4Mg==", "avatar_url": "https://avatars1.githubusercontent.com/u/769982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lawouach", "html_url": "https://github.com/Lawouach", "followers_url": "https://api.github.com/users/Lawouach/followers", "following_url": "https://api.github.com/users/Lawouach/following{/other_user}", "gists_url": "https://api.github.com/users/Lawouach/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lawouach/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lawouach/subscriptions", "organizations_url": "https://api.github.com/users/Lawouach/orgs", "repos_url": "https://api.github.com/users/Lawouach/repos", "events_url": "https://api.github.com/users/Lawouach/events{/privacy}", "received_events_url": "https://api.github.com/users/Lawouach/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-05-12T09:16:08Z", "updated_at": "2020-05-12T09:50:03Z", "closed_at": "2020-05-12T09:50:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello there,\r\n\r\nI'm using the lastest master so I fully appreciate things are still under work. I just wanted to see if I'm miunderstanding something.\r\n\r\nIn https://github.com/prometheus/client_python/blob/master/prometheus_client/registry.py#L59, we have no entry for `\"gauge\"` types. Only `\"gaugehistogram\"` meaning no additional suffixes are added to gauges. Is that expected?\r\n\r\nThanks,\r\n- Sylvain", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/542", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/542/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/542/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/542/events", "html_url": "https://github.com/prometheus/client_python/issues/542", "id": 614406717, "node_id": "MDU6SXNzdWU2MTQ0MDY3MTc=", "number": 542, "title": "Setting metric unit to \"total\"", "user": {"login": "nritsche", "id": 2536635, "node_id": "MDQ6VXNlcjI1MzY2MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2536635?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nritsche", "html_url": "https://github.com/nritsche", "followers_url": "https://api.github.com/users/nritsche/followers", "following_url": "https://api.github.com/users/nritsche/following{/other_user}", "gists_url": "https://api.github.com/users/nritsche/gists{/gist_id}", "starred_url": "https://api.github.com/users/nritsche/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nritsche/subscriptions", "organizations_url": "https://api.github.com/users/nritsche/orgs", "repos_url": "https://api.github.com/users/nritsche/repos", "events_url": "https://api.github.com/users/nritsche/events{/privacy}", "received_events_url": "https://api.github.com/users/nritsche/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175849139, "node_id": "MDU6TGFiZWwxNzU4NDkxMzk=", "url": "https://api.github.com/repos/prometheus/client_python/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-05-07T23:32:26Z", "updated_at": "2020-05-15T10:47:17Z", "closed_at": "2020-05-15T10:47:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "a4dd93bcc6a0422e10cfa585048d1813909c6786 enforced counters ending in `_total`, but the `unit=` parameter doesn't seem to interact well with that. If I pass `unit=\"total\"` to a `Counter`, I get a `_total_total` suffix (but only in some places?).\r\n```\r\n$ python3.6\r\nPython 3.6.8 (default, Aug  7 2019, 17:28:10) \r\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from prometheus_client import Counter\r\n>>> c = Counter('my_failures', 'Description of counter', unit=\"total\")\r\n>>> c.inc(6.6)\r\n>>> from prometheus_client import start_http_server, Summary\r\n>>> start_http_server(8000)\r\n```\r\n```\r\n$ curl localhost:8000/metrics\r\n...\r\n# HELP my_failures_total_total Description of counter\r\n# TYPE my_failures_total_total counter\r\nmy_failures_total 6.6\r\nmy_failures_created 1.5888939194938827e+09\r\n```\r\n\r\nThis is with version `0.7.1`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/541", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/541/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/541/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/541/events", "html_url": "https://github.com/prometheus/client_python/issues/541", "id": 614033824, "node_id": "MDU6SXNzdWU2MTQwMzM4MjQ=", "number": 541, "title": "metrics endpoint stopped responding", "user": {"login": "NadavkOptimalQ", "id": 45461973, "node_id": "MDQ6VXNlcjQ1NDYxOTcz", "avatar_url": "https://avatars0.githubusercontent.com/u/45461973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NadavkOptimalQ", "html_url": "https://github.com/NadavkOptimalQ", "followers_url": "https://api.github.com/users/NadavkOptimalQ/followers", "following_url": "https://api.github.com/users/NadavkOptimalQ/following{/other_user}", "gists_url": "https://api.github.com/users/NadavkOptimalQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/NadavkOptimalQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NadavkOptimalQ/subscriptions", "organizations_url": "https://api.github.com/users/NadavkOptimalQ/orgs", "repos_url": "https://api.github.com/users/NadavkOptimalQ/repos", "events_url": "https://api.github.com/users/NadavkOptimalQ/events{/privacy}", "received_events_url": "https://api.github.com/users/NadavkOptimalQ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-05-07T12:52:32Z", "updated_at": "2020-08-16T13:35:09Z", "closed_at": "2020-05-12T08:38:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have service running on kubernetes. I have prometheus operator installed (using helm) and the services using python 2.7. I would also mention that we are using gevent.\r\n\r\nThe code is as such:\r\n```\r\n    def setup(self, contextId, port, isTest=False):\r\n        if self._workerThread is not None:\r\n            logging.error(u\"Metrics already setup\")\r\n            return\r\n\r\n        logging.info(u\"Starting metrics listener on port {}\".format(port), extra=makeExtraFromContextId(contextId))\r\n\r\n        self._port = port\r\n        self._isTest = isTest\r\n\r\n        if not self._isTest:\r\n            self._workerThread = Thread(target=self._httpWorkerFunction, args=[contextId, self._event])\r\n            self._workerThread.start()\r\n\r\n    def _httpWorkerFunction(self, contextId, event):\r\n        try:\r\n            app = make_wsgi_app()\r\n            httpd = make_server('', self._port, app)\r\n        except Exception as ex:\r\n            logging.exception(u\"Failed to start metrics listener on port {} - {}\".format(self._port, ex.message),\r\n                              extra=makeExtraFromContextId(contextId))\r\n\r\n            return\r\n\r\n        while not event.is_set():\r\n            try:\r\n                httpd.handle_request()\r\n            except Exception as ex:\r\n                logging.exception(u\"Exception in metrics listener request handle {}\".format(ex.message))\r\n``` \r\n\r\nEverything was working fine until suddenly I get an alert that some of the services are down. \r\nThese are two different services, one with 2 pods and the other with 3. 1 of the first services and 2 of the second stopped responding.\r\n\r\nI tried calling the metrics endpoint myself from within the other pods but the request just hangs and eventually times out.\r\n\r\nI haven't restarted them yet so we can investigate but I really have no idea that happened.\r\n\r\nAny help would be much appreciated ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/539", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/539/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/539/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/539/events", "html_url": "https://github.com/prometheus/client_python/issues/539", "id": 607831137, "node_id": "MDU6SXNzdWU2MDc4MzExMzc=", "number": 539, "title": "Metric miss when setting the gauge value to zero", "user": {"login": "raul1991", "id": 1281636, "node_id": "MDQ6VXNlcjEyODE2MzY=", "avatar_url": "https://avatars0.githubusercontent.com/u/1281636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raul1991", "html_url": "https://github.com/raul1991", "followers_url": "https://api.github.com/users/raul1991/followers", "following_url": "https://api.github.com/users/raul1991/following{/other_user}", "gists_url": "https://api.github.com/users/raul1991/gists{/gist_id}", "starred_url": "https://api.github.com/users/raul1991/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raul1991/subscriptions", "organizations_url": "https://api.github.com/users/raul1991/orgs", "repos_url": "https://api.github.com/users/raul1991/repos", "events_url": "https://api.github.com/users/raul1991/events{/privacy}", "received_events_url": "https://api.github.com/users/raul1991/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2020-04-27T20:27:40Z", "updated_at": "2020-05-03T18:44:32Z", "closed_at": "2020-04-27T22:00:29Z", "author_association": "NONE", "active_lock_reason": null, "body": "I use the python client for storing metrics for a user's online presence. For example when a user comes online I start counting seconds and then as soon as he goes offline ,I post the metric to grafana. Now after posting the online timespan I immediately need to update that user has gone offline so I set the metric value to 0.\n\nThe last update remains and the one value before it does not appear on grafana as prometheus metric show the last metric reading only (checked via /metrics)\n\n# Steps to reproduce\n\n# Example using a Gauge class in the client\n\n- User 1 comes online for 20 seconds\n- /metrics updated with 20seconds \n- Now set /metrics to 0 since user has gone offline.\n- Earlier metric disappeared.\n\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/537", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/537/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/537/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/537/events", "html_url": "https://github.com/prometheus/client_python/issues/537", "id": 601037341, "node_id": "MDU6SXNzdWU2MDEwMzczNDE=", "number": 537, "title": "Duplicated timeseries in CollectorRegistry", "user": {"login": "robinwangrubin", "id": 24934186, "node_id": "MDQ6VXNlcjI0OTM0MTg2", "avatar_url": "https://avatars1.githubusercontent.com/u/24934186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robinwangrubin", "html_url": "https://github.com/robinwangrubin", "followers_url": "https://api.github.com/users/robinwangrubin/followers", "following_url": "https://api.github.com/users/robinwangrubin/following{/other_user}", "gists_url": "https://api.github.com/users/robinwangrubin/gists{/gist_id}", "starred_url": "https://api.github.com/users/robinwangrubin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robinwangrubin/subscriptions", "organizations_url": "https://api.github.com/users/robinwangrubin/orgs", "repos_url": "https://api.github.com/users/robinwangrubin/repos", "events_url": "https://api.github.com/users/robinwangrubin/events{/privacy}", "received_events_url": "https://api.github.com/users/robinwangrubin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-16T13:07:11Z", "updated_at": "2020-04-16T13:15:18Z", "closed_at": "2020-04-16T13:15:18Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, when i tried to write a custom exporter, i met some error:\r\n```\r\nDuplicated timeseries in CollectorRegistry\r\n```\r\n\r\nHere is my code.\r\n```\r\ndef Aliyun_MongoDB_monitor(DBInstanceId):\r\n    \r\n    StartTime = (datetime.utcnow() - timedelta(minutes=1)).strftime('%Y-%m-%dT%H:%MZ') \r\n    EndTime = datetime.utcnow().strftime('%Y-%m-%dT%H:%MZ')\r\n\r\n    request.set_StartTime(StartTime)\r\n    request.set_EndTime(EndTime)\r\n    request.set_DBInstanceId(DBInstanceId)\r\n\r\n    response = json.loads(client.do_action_with_exception(request))\r\n\r\n    for item in response['PerformanceKeys']['PerformanceKey']:\r\n        if '&' in item['ValueFormat']:\r\n            n = 0\r\n            for name in item['ValueFormat'].split('&'):\r\n                monitor_item_name = item['Key'] + '_' + name\r\n                monitor_item_volume = item['PerformanceValues']['PerformanceValue'][0]['Value'].split('&')[n]\r\n                print(monitor_item_name,monitor_item_volume)\r\n                Gauge(monitor_item_name, 'Description of gauge').set(monitor_item_volume)\r\n                n = n + 1            \r\n        else:\r\n            monitor_item_name = item['Key']\r\n            monitor_item_volume = item['PerformanceValues']['PerformanceValue'][0]['Value']\r\n            Gauge(monitor_item_name, 'Description of gauge').set(monitor_item_volume)\r\n            print(monitor_item_name,monitor_item_volume)\r\n\r\n\r\n\r\nif __name__ == '__main__':\r\n    # Start up the server to expose the metrics.\r\n    start_http_server(8000)\r\n    # Generate some requests.\r\n    while True:\r\n        Aliyun_MongoDB_monitor('dds-xxxxxxxxxxxxx')\r\n        time.sleep(60)\r\n```\r\n\r\n\r\nI found out that i can't run `Gauge(monitor_item_name, 'Description of gauge').set(monitor_item_volume)` multiple times.  \r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/536", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/536/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/536/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/536/events", "html_url": "https://github.com/prometheus/client_python/issues/536", "id": 598056451, "node_id": "MDU6SXNzdWU1OTgwNTY0NTE=", "number": 536, "title": "How to push untyped metric to  pushgateway?", "user": {"login": "sukill", "id": 10053875, "node_id": "MDQ6VXNlcjEwMDUzODc1", "avatar_url": "https://avatars0.githubusercontent.com/u/10053875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sukill", "html_url": "https://github.com/sukill", "followers_url": "https://api.github.com/users/sukill/followers", "following_url": "https://api.github.com/users/sukill/following{/other_user}", "gists_url": "https://api.github.com/users/sukill/gists{/gist_id}", "starred_url": "https://api.github.com/users/sukill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sukill/subscriptions", "organizations_url": "https://api.github.com/users/sukill/orgs", "repos_url": "https://api.github.com/users/sukill/repos", "events_url": "https://api.github.com/users/sukill/events{/privacy}", "received_events_url": "https://api.github.com/users/sukill/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-10T19:31:42Z", "updated_at": "2020-04-10T19:34:09Z", "closed_at": "2020-04-10T19:34:09Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/534", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/534/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/534/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/534/events", "html_url": "https://github.com/prometheus/client_python/issues/534", "id": 596392220, "node_id": "MDU6SXNzdWU1OTYzOTIyMjA=", "number": 534, "title": "Historical exposed metrics memorization", "user": {"login": "Dani1994Italy", "id": 63339571, "node_id": "MDQ6VXNlcjYzMzM5NTcx", "avatar_url": "https://avatars3.githubusercontent.com/u/63339571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani1994Italy", "html_url": "https://github.com/Dani1994Italy", "followers_url": "https://api.github.com/users/Dani1994Italy/followers", "following_url": "https://api.github.com/users/Dani1994Italy/following{/other_user}", "gists_url": "https://api.github.com/users/Dani1994Italy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani1994Italy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani1994Italy/subscriptions", "organizations_url": "https://api.github.com/users/Dani1994Italy/orgs", "repos_url": "https://api.github.com/users/Dani1994Italy/repos", "events_url": "https://api.github.com/users/Dani1994Italy/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani1994Italy/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-08T08:12:23Z", "updated_at": "2020-04-08T08:41:50Z", "closed_at": "2020-04-08T08:41:49Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nI found out the follow unexpected beahviour between my prometheus db and customized client_python exporter:\r\n\r\nI've tried to delete metrics from prometheus db using follow Web API commands:\r\n\r\n- curl -X POST -g 'http://localhost:9090/api/v1/admin/tsdb/delete_series?match[]=<name_metric>\r\n- curl -X POST -g \"http://localhost:9090/api/v1/admin/tsdb/clean_tombstones\r\n\r\nAll the time series metric diseppeared from prometheus db but after few seconds, probably after the new scraping iteration, all the time series was restored. (I tried with a two hour time series, very short).\r\nSo, the questions is:  was the timeseries SAVED in the client_python exporter (buffer, cache, registry etc) and re-exposed every time to prometheus or the problem is at prometheus db side?\r\n\r\nIs it a configurable option?\r\n\r\nThank you,\r\nDaniele.\r\n\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/533", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/533/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/533/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/533/events", "html_url": "https://github.com/prometheus/client_python/issues/533", "id": 591848071, "node_id": "MDU6SXNzdWU1OTE4NDgwNzE=", "number": 533, "title": "proposal: split parser into it's own library", "user": {"login": "alexandrevicenzi", "id": 2637672, "node_id": "MDQ6VXNlcjI2Mzc2NzI=", "avatar_url": "https://avatars3.githubusercontent.com/u/2637672?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexandrevicenzi", "html_url": "https://github.com/alexandrevicenzi", "followers_url": "https://api.github.com/users/alexandrevicenzi/followers", "following_url": "https://api.github.com/users/alexandrevicenzi/following{/other_user}", "gists_url": "https://api.github.com/users/alexandrevicenzi/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexandrevicenzi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexandrevicenzi/subscriptions", "organizations_url": "https://api.github.com/users/alexandrevicenzi/orgs", "repos_url": "https://api.github.com/users/alexandrevicenzi/repos", "events_url": "https://api.github.com/users/alexandrevicenzi/events{/privacy}", "received_events_url": "https://api.github.com/users/alexandrevicenzi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-04-01T11:37:23Z", "updated_at": "2020-05-07T12:38:36Z", "closed_at": "2020-05-07T12:38:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nIt would be nice if [parser.py](https://github.com/prometheus/client_python/blob/master/prometheus_client/parser.py) was a library outside this client.\r\n\r\nThe use case would be, I want to parse files that I have stored, I don't need most of the code in the client (and twisted) because I'm only parsing files.\r\n\r\nHere is a sample code that uses only parser.\r\n\r\n```py\r\nfrom prometheus_client import parser\r\n\r\nfd = open('metrics', 'r')\r\n\r\nfor metric in parser.text_fd_to_metric_families(fd):\r\n  print(metric)\r\n```\r\n\r\nPrometheus client would make use of Prometheus parser library, everything would still work as expected.\r\n\r\nI'm willing to send a patch if this seems like a good idea.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/532", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/532/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/532/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/532/events", "html_url": "https://github.com/prometheus/client_python/issues/532", "id": 589139237, "node_id": "MDU6SXNzdWU1ODkxMzkyMzc=", "number": 532, "title": "Misleading behavior due to non-destructive collect()", "user": {"login": "FedericoCeratto", "id": 91576, "node_id": "MDQ6VXNlcjkxNTc2", "avatar_url": "https://avatars0.githubusercontent.com/u/91576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FedericoCeratto", "html_url": "https://github.com/FedericoCeratto", "followers_url": "https://api.github.com/users/FedericoCeratto/followers", "following_url": "https://api.github.com/users/FedericoCeratto/following{/other_user}", "gists_url": "https://api.github.com/users/FedericoCeratto/gists{/gist_id}", "starred_url": "https://api.github.com/users/FedericoCeratto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FedericoCeratto/subscriptions", "organizations_url": "https://api.github.com/users/FedericoCeratto/orgs", "repos_url": "https://api.github.com/users/FedericoCeratto/repos", "events_url": "https://api.github.com/users/FedericoCeratto/events{/privacy}", "received_events_url": "https://api.github.com/users/FedericoCeratto/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-03-27T13:37:12Z", "updated_at": "2020-04-15T10:15:18Z", "closed_at": "2020-04-15T10:15:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "collect() on a gauge does not reset or remove already-collected values.\r\nThe same happens when write_to_textfile is called on the registry.\r\nWhen labels are created dynamically this easily leads to lingering old values being collected forever:\r\n\r\n```gauge = Gauge(\"x\",\"y\",labelnames=[\"l1\", \"l2\"])\r\ngauge.labels(\"a\", \"b\").set(1)\r\ngauge.collect()\r\ngauge.labels(\"new_x\", \"new_y\").set(1)\r\ngauge.collect() # Outputs both the old and new gauges\r\n```\r\nThe Gauge object does not appear to expose methods to reset all gauges to zero or remove them.\r\n\r\nAlso, the whole Gauge object cannot be deleted and recreated between each use because it triggers #281\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/531", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/531/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/531/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/531/events", "html_url": "https://github.com/prometheus/client_python/issues/531", "id": 586173520, "node_id": "MDU6SXNzdWU1ODYxNzM1MjA=", "number": 531, "title": "Cannot import the new module `make_asgi_app`", "user": {"login": "idob111", "id": 62502081, "node_id": "MDQ6VXNlcjYyNTAyMDgx", "avatar_url": "https://avatars1.githubusercontent.com/u/62502081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/idob111", "html_url": "https://github.com/idob111", "followers_url": "https://api.github.com/users/idob111/followers", "following_url": "https://api.github.com/users/idob111/following{/other_user}", "gists_url": "https://api.github.com/users/idob111/gists{/gist_id}", "starred_url": "https://api.github.com/users/idob111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/idob111/subscriptions", "organizations_url": "https://api.github.com/users/idob111/orgs", "repos_url": "https://api.github.com/users/idob111/repos", "events_url": "https://api.github.com/users/idob111/events{/privacy}", "received_events_url": "https://api.github.com/users/idob111/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-23T12:30:39Z", "updated_at": "2020-05-25T12:26:04Z", "closed_at": "2020-05-25T12:26:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "I love your project and it's really helpful .\r\nAfter doing `pip install prometheus_client`\r\nWhen i try to import `make_asgi_app` the app could not recognize the module (while it does recognize the `make_wsgi_app`).\r\nWhen I perform a local pip install  it does work.\r\n\r\nIs there an option that the pip is not updated or am i doing something wrong?\r\ntnx :)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/526", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/526/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/526/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/526/events", "html_url": "https://github.com/prometheus/client_python/issues/526", "id": 579355492, "node_id": "MDU6SXNzdWU1NzkzNTU0OTI=", "number": 526, "title": "Support set_function for Enum", "user": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 9, "created_at": "2020-03-11T15:36:36Z", "updated_at": "2020-03-12T08:54:04Z", "closed_at": "2020-03-12T08:54:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Gauges have a handy `set_function` that can be used to calculate the gauge's value on demand.  However, Enums do not.  So an exporter that uses both Gauges and Enums must still use a polling loop for the enums, even though it can calculate the Gauges' values on demand.  It would be handy of Enum had a `set_function` method, too.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/523", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/523/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/523/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/523/events", "html_url": "https://github.com/prometheus/client_python/issues/523", "id": 574082377, "node_id": "MDU6SXNzdWU1NzQwODIzNzc=", "number": 523, "title": "Will there be any new release soon?", "user": {"login": "esanchezm", "id": 219745, "node_id": "MDQ6VXNlcjIxOTc0NQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/219745?v=4", "gravatar_id": "", "url": "https://api.github.com/users/esanchezm", "html_url": "https://github.com/esanchezm", "followers_url": "https://api.github.com/users/esanchezm/followers", "following_url": "https://api.github.com/users/esanchezm/following{/other_user}", "gists_url": "https://api.github.com/users/esanchezm/gists{/gist_id}", "starred_url": "https://api.github.com/users/esanchezm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/esanchezm/subscriptions", "organizations_url": "https://api.github.com/users/esanchezm/orgs", "repos_url": "https://api.github.com/users/esanchezm/repos", "events_url": "https://api.github.com/users/esanchezm/events{/privacy}", "received_events_url": "https://api.github.com/users/esanchezm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2020-03-02T16:13:34Z", "updated_at": "2020-05-25T12:26:10Z", "closed_at": "2020-05-25T12:26:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nWe're using this library in our systems, specifically for the Prometheus Pushgateway, and we just have a minor issue with the `grouping_key` that I found it's already resolved in the master branch. It was resolved in PR #442 (August 2019) but that (and many other fixes) weren't released in a new public version.\r\n\r\nThe latest released version is 0.7.1 on the 20 Jun 2019 and I'd like to know if there's any plan to do a new release that includes that and many other fixes. Can anyone tell me?\r\n\r\n*Note*: _I know I could install a newest version from the git repository, but I'd like to avoid that. I think it would be beneficial for newcomers as well_", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/521", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/521/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/521/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/521/events", "html_url": "https://github.com/prometheus/client_python/issues/521", "id": 573642041, "node_id": "MDU6SXNzdWU1NzM2NDIwNDE=", "number": 521, "title": "prometheus_client.exposition generate_latest throws error if registry contains an Info metric", "user": {"login": "deinspanjer", "id": 286641, "node_id": "MDQ6VXNlcjI4NjY0MQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/286641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/deinspanjer", "html_url": "https://github.com/deinspanjer", "followers_url": "https://api.github.com/users/deinspanjer/followers", "following_url": "https://api.github.com/users/deinspanjer/following{/other_user}", "gists_url": "https://api.github.com/users/deinspanjer/gists{/gist_id}", "starred_url": "https://api.github.com/users/deinspanjer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/deinspanjer/subscriptions", "organizations_url": "https://api.github.com/users/deinspanjer/orgs", "repos_url": "https://api.github.com/users/deinspanjer/repos", "events_url": "https://api.github.com/users/deinspanjer/events{/privacy}", "received_events_url": "https://api.github.com/users/deinspanjer/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-03-01T23:32:24Z", "updated_at": "2020-04-01T08:58:16Z", "closed_at": "2020-03-31T23:11:20Z", "author_association": "NONE", "active_lock_reason": null, "body": "Using prometheus_client version 0.7.1.\r\nHere is the relevant part of the stack trace:\r\n```\r\n    logging.info('Metrics:\\n' + indent(generate_latest(PUSH_METRICS_REGISTRY), '    '))\r\n  File \".../lib/python3.7/site-packages/prometheus_client/exposition.py\", line 121, in generate_latest\r\n    output.append(sample_line(s))\r\n  File \".../lib/python3.7/site-packages/prometheus_client/exposition.py\", line 79, in sample_line\r\n    for k, v in sorted(line.labels.items())]))\r\n  File \".../lib/python3.7/site-packages/prometheus_client/exposition.py\", line 79, in <listcomp>\r\n    for k, v in sorted(line.labels.items())]))\r\nAttributeError: (\"'dict' object has no attribute 'replace'\", Metric(my_info, The metadata about ... such as its version, config, and deployment state, info, , [Sample(name='my_info_info', labels={'foo': 'fubar', 'version': '1.2.3', 'deployment_state': 'OFF', 'config': {}}, value=1.0, timestamp=None, exemplar=None)]))\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/519", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/519/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/519/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/519/events", "html_url": "https://github.com/prometheus/client_python/issues/519", "id": 572836661, "node_id": "MDU6SXNzdWU1NzI4MzY2NjE=", "number": 519, "title": "TestProcessCollector failing on ppc64le architecture", "user": {"login": "stefanotorresi", "id": 2952427, "node_id": "MDQ6VXNlcjI5NTI0Mjc=", "avatar_url": "https://avatars2.githubusercontent.com/u/2952427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefanotorresi", "html_url": "https://github.com/stefanotorresi", "followers_url": "https://api.github.com/users/stefanotorresi/followers", "following_url": "https://api.github.com/users/stefanotorresi/following{/other_user}", "gists_url": "https://api.github.com/users/stefanotorresi/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefanotorresi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefanotorresi/subscriptions", "organizations_url": "https://api.github.com/users/stefanotorresi/orgs", "repos_url": "https://api.github.com/users/stefanotorresi/repos", "events_url": "https://api.github.com/users/stefanotorresi/events{/privacy}", "received_events_url": "https://api.github.com/users/stefanotorresi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2020-02-28T15:47:10Z", "updated_at": "2020-03-02T18:08:40Z", "closed_at": "2020-03-02T18:08:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I'm not quite clear why, but when trying to run the tests on little-endian PowerPC 64 host, three tests fail the assertion about memory-resident bytes.\r\n\r\nHere is a log portion extrapolated from an RPM build done in SUSE's Open Build Service:\r\n\r\n```\r\n============================= test session starts ==============================\r\n[  254s] platform linux2 -- Python 2.7.17, pytest-3.10.1, py-1.5.2, pluggy-0.8.0 -- /usr/bin/python2\r\n[  254s] cachedir: .pytest_cache\r\n[  254s] rootdir: /home/abuild/rpmbuild/BUILD/client_python-0.7.1, inifile:\r\n[  266s] collecting ... collected 232 items\r\n[  266s] \r\n[  266s] tests/test_core.py::TestCounter::test_block_decorator PASSED             [  0%]\r\n[  266s] tests/test_core.py::TestCounter::test_function_decorator PASSED          [  0%]\r\n[  266s] tests/test_core.py::TestCounter::test_increment PASSED                   [  1%]\r\n[  266s] tests/test_core.py::TestCounter::test_negative_increment_raises PASSED   [  1%]\r\n[  269s] tests/test_core.py::TestGauge::test_function_decorator_multithread PASSED [  2%]\r\n[  269s] tests/test_core.py::TestGauge::test_gauge PASSED                         [  2%]\r\n[  269s] tests/test_core.py::TestGauge::test_gauge_function PASSED                [  3%]\r\n[  269s] tests/test_core.py::TestGauge::test_inprogress_block_decorator PASSED    [  3%]\r\n[  269s] tests/test_core.py::TestGauge::test_inprogress_function_decorator PASSED [  3%]\r\n[  269s] tests/test_core.py::TestGauge::test_time_block_decorator PASSED          [  4%]\r\n[  269s] tests/test_core.py::TestGauge::test_time_function_decorator PASSED       [  4%]\r\n[  269s] tests/test_core.py::TestSummary::test_block_decorator PASSED             [  5%]\r\n[  269s] tests/test_core.py::TestSummary::test_function_decorator PASSED          [  5%]\r\n[  269s] tests/test_core.py::TestSummary::test_function_decorator_multithread PASSED [  6%]\r\n[  269s] tests/test_core.py::TestSummary::test_function_decorator_reentrancy PASSED [  6%]\r\n[  269s] tests/test_core.py::TestSummary::test_summary PASSED                     [  6%]\r\n[  269s] tests/test_core.py::TestHistogram::test_block_decorator PASSED           [  7%]\r\n[  269s] tests/test_core.py::TestHistogram::test_function_decorator PASSED        [  7%]\r\n[  270s] tests/test_core.py::TestHistogram::test_function_decorator_multithread PASSED [  8%]\r\n[  270s] tests/test_core.py::TestHistogram::test_histogram PASSED                 [  8%]\r\n[  270s] tests/test_core.py::TestHistogram::test_labels PASSED                    [  9%]\r\n[  270s] tests/test_core.py::TestHistogram::test_setting_buckets PASSED           [  9%]\r\n[  270s] tests/test_core.py::TestInfo::test_info PASSED                           [  9%]\r\n[  270s] tests/test_core.py::TestInfo::test_labels PASSED                         [ 10%]\r\n[  270s] tests/test_core.py::TestEnum::test_enum PASSED                           [ 10%]\r\n[  270s] tests/test_core.py::TestEnum::test_labels PASSED                         [ 11%]\r\n[  270s] tests/test_core.py::TestEnum::test_overlapping_labels PASSED             [ 11%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_child PASSED                 [ 12%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_empty_labels_list PASSED     [ 12%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_incorrect_label_count_raises PASSED [ 12%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_invalid_names_raise PASSED   [ 13%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_labels_by_kwarg PASSED       [ 13%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_labels_coerced_to_string PASSED [ 14%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_labels_on_labels PASSED      [ 14%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_namespace_subsystem_concatenated PASSED [ 15%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_no_units_for_info_enum PASSED [ 15%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_non_string_labels_raises PASSED [ 15%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_remove PASSED                [ 16%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_unit_appended PASSED         [ 16%]\r\n[  270s] tests/test_core.py::TestMetricWrapper::test_unit_notappended PASSED      [ 17%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_bad_constructors PASSED     [ 17%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_counter PASSED              [ 18%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_counter_labels PASSED       [ 18%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_counter_total PASSED        [ 18%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_gauge PASSED                [ 19%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_gauge_labels PASSED         [ 19%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_gaugehistogram PASSED       [ 20%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_gaugehistogram_labels PASSED [ 20%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_histogram PASSED            [ 21%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_histogram_labels PASSED     [ 21%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_info PASSED                 [ 21%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_info_labels PASSED          [ 22%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_labelnames PASSED           [ 22%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_stateset PASSED             [ 23%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_stateset_labels PASSED      [ 23%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_summary PASSED              [ 24%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_summary_labels PASSED       [ 24%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_untyped PASSED              [ 25%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_untyped_labels PASSED       [ 25%]\r\n[  270s] tests/test_core.py::TestMetricFamilies::test_untyped_unit PASSED         [ 25%]\r\n[  270s] tests/test_core.py::TestCollectorRegistry::test_autodescribe_disabled_by_default PASSED [ 26%]\r\n[  270s] tests/test_core.py::TestCollectorRegistry::test_duplicate_metrics_raises PASSED [ 26%]\r\n[  270s] tests/test_core.py::TestCollectorRegistry::test_restricted_registry PASSED [ 27%]\r\n[  270s] tests/test_core.py::TestCollectorRegistry::test_unregister_works PASSED  [ 27%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_counter PASSED          [ 28%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_counter_total PASSED    [ 28%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_enum PASSED             [ 28%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_escaping PASSED         [ 29%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_gauge PASSED            [ 29%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_gaugehistogram PASSED   [ 30%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_histogram PASSED        [ 30%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_info PASSED             [ 31%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_nonnumber PASSED        [ 31%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_summary PASSED          [ 31%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_timestamp PASSED        [ 32%]\r\n[  270s] tests/test_exposition.py::TestGenerateText::test_unicode PASSED          [ 32%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_delete PASSED            [ 33%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_delete_with_groupingkey PASSED [ 33%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_instance_ip_grouping_key PASSED [ 34%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_metrics_handler PASSED   [ 34%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_metrics_handler_subclassing PASSED [ 34%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_push PASSED              [ 35%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_push_with_basic_auth_handler PASSED [ 35%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_push_with_complex_groupingkey PASSED [ 36%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_push_with_groupingkey PASSED [ 36%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_push_with_handler PASSED [ 37%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_pushadd PASSED           [ 37%]\r\n[  270s] tests/test_exposition.py::TestPushGateway::test_pushadd_with_groupingkey PASSED [ 37%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[None-TypeError-CounterMetricFamily] PASSED [ 38%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[None-TypeError-GaugeMetricFamily] PASSED [ 38%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[-ValueError-CounterMetricFamily] PASSED [ 39%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[-ValueError-GaugeMetricFamily] PASSED [ 39%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[x-ValueError-CounterMetricFamily] PASSED [ 40%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[x-ValueError-GaugeMetricFamily] PASSED [ 40%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[value3-TypeError-CounterMetricFamily] PASSED [ 40%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[value3-TypeError-GaugeMetricFamily] PASSED [ 41%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[value4-TypeError-CounterMetricFamily] PASSED [ 41%]\r\n[  270s] tests/test_exposition.py::test_basic_metric_families[value4-TypeError-GaugeMetricFamily] PASSED [ 42%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[None-0-TypeError] PASSED [ 42%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[0-None-TypeError] PASSED [ 43%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[-0-ValueError] PASSED [ 43%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[0--ValueError] PASSED [ 43%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[count_value4-0-TypeError] PASSED [ 44%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[0-sum_value5-TypeError] PASSED [ 44%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[count_value6-0-TypeError] PASSED [ 45%]\r\n[  270s] tests/test_exposition.py::test_summary_metric_family[0-sum_value7-TypeError] PASSED [ 45%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets0-None-TypeError-HistogramMetricFamily] PASSED [ 46%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets0-None-TypeError-GaugeHistogramMetricFamily] PASSED [ 46%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets1-0-TypeError-HistogramMetricFamily] PASSED [ 46%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets1-0-TypeError-GaugeHistogramMetricFamily] PASSED [ 47%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets2-0-AttributeError-HistogramMetricFamily] PASSED [ 47%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets2-0-AttributeError-GaugeHistogramMetricFamily] PASSED [ 48%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets3-0-TypeError-HistogramMetricFamily] PASSED [ 48%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets3-0-TypeError-GaugeHistogramMetricFamily] PASSED [ 49%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets4-0-AttributeError-HistogramMetricFamily] PASSED [ 49%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets4-0-AttributeError-GaugeHistogramMetricFamily] PASSED [ 50%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets5--ValueError-HistogramMetricFamily] PASSED [ 50%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets5--ValueError-GaugeHistogramMetricFamily] PASSED [ 50%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets6-0-ValueError-HistogramMetricFamily] PASSED [ 51%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets6-0-ValueError-GaugeHistogramMetricFamily] PASSED [ 51%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets7-0-ValueError-HistogramMetricFamily] PASSED [ 52%]\r\n[  270s] tests/test_exposition.py::test_histogram_metric_families[buckets7-0-ValueError-GaugeHistogramMetricFamily] PASSED [ 52%]\r\n[  270s] tests/test_gc_collector.py::TestGCCollector::test_empty SKIPPED          [ 53%]\r\n[  270s] tests/test_gc_collector.py::TestGCCollector::test_working SKIPPED        [ 53%]\r\n[  270s] tests/test_graphite_bridge.py::TestGraphiteBridge::test_labels PASSED    [ 53%]\r\n[  270s] tests/test_graphite_bridge.py::TestGraphiteBridge::test_nolabels PASSED  [ 54%]\r\n[  270s] tests/test_graphite_bridge.py::TestGraphiteBridge::test_prefix PASSED    [ 54%]\r\n[  270s] tests/test_graphite_bridge.py::TestGraphiteBridge::test_sanitizing PASSED [ 55%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_collect PASSED        [ 55%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_counter_across_forks PASSED [ 56%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_counter_adds PASSED   [ 56%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_gauge_all PASSED      [ 56%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_gauge_liveall PASSED  [ 57%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_gauge_livesum PASSED  [ 57%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_gauge_max PASSED      [ 58%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_gauge_min PASSED      [ 58%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_histogram_adds PASSED [ 59%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_initialization_detects_pid_change PASSED [ 59%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_merge_no_accumulate PASSED [ 59%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_missing_gauge_file_during_merge PASSED [ 60%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_namespace_subsystem PASSED [ 60%]\r\n[  270s] tests/test_multiprocess.py::TestMultiProcess::test_summary_adds PASSED   [ 61%]\r\n[  270s] tests/test_multiprocess.py::TestMmapedDict::test_corruption_detected PASSED [ 61%]\r\n[  270s] tests/test_multiprocess.py::TestMmapedDict::test_expansion PASSED        [ 62%]\r\n[  271s] tests/test_multiprocess.py::TestMmapedDict::test_multi_expansion PASSED  [ 62%]\r\n[  271s] tests/test_multiprocess.py::TestMmapedDict::test_process_restart PASSED  [ 62%]\r\n[  271s] tests/test_multiprocess.py::TestUnsetEnv::test_file_syncpath PASSED      [ 63%]\r\n[  271s] tests/test_multiprocess.py::TestUnsetEnv::test_unset_syncdir_env PASSED  [ 63%]\r\n[  271s] tests/test_parser.py::TestParse::test_blank_lines_and_comments PASSED    [ 64%]\r\n[  271s] tests/test_parser.py::TestParse::test_commas PASSED                      [ 64%]\r\n[  271s] tests/test_parser.py::TestParse::test_empty_brackets PASSED              [ 65%]\r\n[  271s] tests/test_parser.py::TestParse::test_empty_help PASSED                  [ 65%]\r\n[  271s] tests/test_parser.py::TestParse::test_empty_label PASSED                 [ 65%]\r\n[  271s] tests/test_parser.py::TestParse::test_escaping PASSED                    [ 66%]\r\n[  271s] tests/test_parser.py::TestParse::test_help_escaping PASSED               [ 66%]\r\n[  271s] tests/test_parser.py::TestParse::test_label_escaping PASSED              [ 67%]\r\n[  271s] tests/test_parser.py::TestParse::test_labels_and_infinite PASSED         [ 67%]\r\n[  271s] tests/test_parser.py::TestParse::test_labels_with_curly_braces PASSED    [ 68%]\r\n[  271s] tests/test_parser.py::TestParse::test_multiple_trailing_commas PASSED    [ 68%]\r\n[  271s] tests/test_parser.py::TestParse::test_nan PASSED                         [ 68%]\r\n[  271s] tests/test_parser.py::TestParse::test_no_metadata PASSED                 [ 69%]\r\n[  271s] tests/test_parser.py::TestParse::test_roundtrip PASSED                   [ 69%]\r\n[  271s] tests/test_parser.py::TestParse::test_simple_counter PASSED              [ 70%]\r\n[  271s] tests/test_parser.py::TestParse::test_simple_gauge PASSED                [ 70%]\r\n[  271s] tests/test_parser.py::TestParse::test_simple_histogram PASSED            [ 71%]\r\n[  271s] tests/test_parser.py::TestParse::test_simple_summary PASSED              [ 71%]\r\n[  271s] tests/test_parser.py::TestParse::test_spaces PASSED                      [ 71%]\r\n[  271s] tests/test_parser.py::TestParse::test_summary_quantiles PASSED           [ 72%]\r\n[  271s] tests/test_parser.py::TestParse::test_tabs PASSED                        [ 72%]\r\n[  271s] tests/test_parser.py::TestParse::test_timestamps_discarded PASSED        [ 73%]\r\n[  271s] tests/test_parser.py::TestParse::test_type_help_switched PASSED          [ 73%]\r\n[  271s] tests/test_parser.py::TestParse::test_untyped PASSED                     [ 74%]\r\n[  271s] tests/test_platform_collector.py::TestPlatformCollector::test_python_info PASSED [ 74%]\r\n[  271s] tests/test_platform_collector.py::TestPlatformCollector::test_system_info_java PASSED [ 75%]\r\n[  271s] tests/test_process_collector.py::TestProcessCollector::test_namespace FAILED [ 75%]\r\n[  271s] tests/test_process_collector.py::TestProcessCollector::test_working FAILED [ 75%]\r\n[  271s] tests/test_process_collector.py::TestProcessCollector::test_working_584 FAILED [ 76%]\r\n[  271s] tests/test_process_collector.py::TestProcessCollector::test_working_fake_pid PASSED [ 76%]\r\n[  271s] tests/test_twisted.py::MetricsResourceTest::test_reports_metrics SKIPPED [ 77%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_counter PASSED [ 77%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_counter_total PASSED [ 78%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_enum PASSED [ 78%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_escaping PASSED [ 78%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_gauge PASSED [ 79%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_gaugehistogram PASSED [ 79%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_histogram PASSED [ 80%]\r\n[  271s] tests/openmetrics/test_exposition.py::TestGenerateText::test_histogram_exemplar PASSED [ 80%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_info PASSED [ 81%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_nonhistogram_bucket_exemplar PASSED [ 81%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_nonhistogram_exemplar PASSED [ 81%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_nonnumber PASSED [ 82%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_summary PASSED [ 82%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_timestamp PASSED [ 83%]\r\n[  272s] tests/openmetrics/test_exposition.py::TestGenerateText::test_unicode PASSED [ 83%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_duplicate_timestamps PASSED [ 84%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_empty_brackets PASSED  [ 84%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_empty_help PASSED      [ 84%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_empty_label PASSED     [ 85%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_empty_metadata PASSED  [ 85%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_escaping PASSED        [ 86%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_exemplars_with_hash_in_label_values PASSED [ 86%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_fallback_to_state_machine_label_parsing SKIPPED [ 87%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_float_gauge PASSED     [ 87%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_gaugehistogram_exemplars PASSED [ 87%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_hash_in_label_value PASSED [ 88%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_help_escaping PASSED   [ 88%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_histogram_exemplars PASSED [ 89%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_info_timestamps PASSED [ 89%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_invalid_float_input PASSED [ 90%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_invalid_input PASSED   [ 90%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_label_escaping PASSED  [ 90%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_labels_and_infinite PASSED [ 91%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_labels_with_curly_braces PASSED [ 91%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_nan PASSED             [ 92%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_nan_gauge PASSED       [ 92%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_no_metadata PASSED     [ 93%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_no_newline_after_eof PASSED [ 93%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_null_byte PASSED       [ 93%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_roundtrip PASSED       [ 94%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_counter PASSED  [ 94%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_gauge PASSED    [ 95%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_gaugehistogram PASSED [ 95%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_histogram PASSED [ 96%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_info PASSED     [ 96%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_stateset PASSED [ 96%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_simple_summary PASSED  [ 97%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_summary_quantiles PASSED [ 97%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_timestamps PASSED      [ 98%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_type_help_switched PASSED [ 98%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_uint64_counter PASSED  [ 99%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_unit_gauge PASSED      [ 99%]\r\n[  272s] tests/openmetrics/test_parser.py::TestParse::test_untyped PASSED         [100%]\r\n[  272s] \r\n[  272s] =================================== FAILURES ===================================\r\n[  272s] _____________________ TestProcessCollector.test_namespace ______________________\r\n[  272s] \r\n[  272s] self = <tests.test_process_collector.TestProcessCollector testMethod=test_namespace>\r\n[  272s] \r\n[  272s]     def test_namespace(self):\r\n[  272s]         collector = ProcessCollector(proc=self.test_proc, pid=lambda: 26231, registry=self.registry, namespace='n')\r\n[  272s]         collector._ticks = 100\r\n[  272s]     \r\n[  272s]         self.assertEqual(17.21, self.registry.get_sample_value('n_process_cpu_seconds_total'))\r\n[  272s]         self.assertEqual(56274944.0, self.registry.get_sample_value('n_process_virtual_memory_bytes'))\r\n[  272s] >       self.assertEqual(8114176, self.registry.get_sample_value('n_process_resident_memory_bytes'))\r\n[  272s] E       AssertionError: 8114176 != 129826816.0\r\n[  272s] \r\n[  272s] tests/test_process_collector.py:32: AssertionError\r\n[  272s] ______________________ TestProcessCollector.test_working _______________________\r\n[  272s] \r\n[  272s] self = <tests.test_process_collector.TestProcessCollector testMethod=test_working>\r\n[  272s] \r\n[  272s]     def test_working(self):\r\n[  272s]         collector = ProcessCollector(proc=self.test_proc, pid=lambda: 26231, registry=self.registry)\r\n[  272s]         collector._ticks = 100\r\n[  272s]     \r\n[  272s]         self.assertEqual(17.21, self.registry.get_sample_value('process_cpu_seconds_total'))\r\n[  272s]         self.assertEqual(56274944.0, self.registry.get_sample_value('process_virtual_memory_bytes'))\r\n[  272s] >       self.assertEqual(8114176, self.registry.get_sample_value('process_resident_memory_bytes'))\r\n[  272s] E       AssertionError: 8114176 != 129826816.0\r\n[  272s] \r\n[  272s] tests/test_process_collector.py:20: AssertionError\r\n[  272s] ____________________ TestProcessCollector.test_working_584 _____________________\r\n[  272s] \r\n[  272s] self = <tests.test_process_collector.TestProcessCollector testMethod=test_working_584>\r\n[  272s] \r\n[  272s]     def test_working_584(self):\r\n[  272s]         collector = ProcessCollector(proc=self.test_proc, pid=lambda: \"584\\n\", registry=self.registry)\r\n[  272s]         collector._ticks = 100\r\n[  272s]     \r\n[  272s]         self.assertEqual(0.0, self.registry.get_sample_value('process_cpu_seconds_total'))\r\n[  272s]         self.assertEqual(10395648.0, self.registry.get_sample_value('process_virtual_memory_bytes'))\r\n[  272s] >       self.assertEqual(634880, self.registry.get_sample_value('process_resident_memory_bytes'))\r\n[  272s] E       AssertionError: 634880 != 10158080.0\r\n[  272s] \r\n[  272s] tests/test_process_collector.py:44: AssertionError\r\n[  272s] =============== 3 failed, 225 passed, 4 skipped in 16.75 seconds ===============\r\n```\r\n\r\nI realise it might not be necessarily easy for you folks to get a PPC box, but I if you had any suggestion on how to attempt a fix, I might be able to get ahold of one.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/516", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/516/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/516/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/516/events", "html_url": "https://github.com/prometheus/client_python/issues/516", "id": 572406230, "node_id": "MDU6SXNzdWU1NzI0MDYyMzA=", "number": 516, "title": "Can't create gauges with labels and sample values", "user": {"login": "MoritzFago", "id": 4459068, "node_id": "MDQ6VXNlcjQ0NTkwNjg=", "avatar_url": "https://avatars3.githubusercontent.com/u/4459068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MoritzFago", "html_url": "https://github.com/MoritzFago", "followers_url": "https://api.github.com/users/MoritzFago/followers", "following_url": "https://api.github.com/users/MoritzFago/following{/other_user}", "gists_url": "https://api.github.com/users/MoritzFago/gists{/gist_id}", "starred_url": "https://api.github.com/users/MoritzFago/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MoritzFago/subscriptions", "organizations_url": "https://api.github.com/users/MoritzFago/orgs", "repos_url": "https://api.github.com/users/MoritzFago/repos", "events_url": "https://api.github.com/users/MoritzFago/events{/privacy}", "received_events_url": "https://api.github.com/users/MoritzFago/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-27T22:39:27Z", "updated_at": "2020-02-28T12:03:12Z", "closed_at": "2020-02-28T09:00:53Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'd like to have a gauge with labels and a value.\r\nBut if i try to do that, I get a AttributeError for _value.\r\nTo reproduce:\r\n```python\r\n>>> from prometheus_client import Gauge\r\n>>> g = Gauge('my_inprogress_requests', 'Description of gauge', ['l1','l2'])\r\n>>> g.labels(l1='foo',l2='ba')\r\n<prometheus_client.metrics.Gauge object at 0x1078f5f50>\r\n>>> g.set(4)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/moritzfago/Softwareprojekt/repo/exporter/lib/python3.7/site-packages/prometheus_client/metrics.py\", line 344, in set\r\n    self._value.set(float(value))\r\nAttributeError: 'Gauge' object has no attribute '_value'\r\n```\r\n\r\nBut:\r\n```\r\n>>> g.labels(l1='foo',l2='ba').set(4)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/515", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/515/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/515/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/515/events", "html_url": "https://github.com/prometheus/client_python/issues/515", "id": 569007114, "node_id": "MDU6SXNzdWU1NjkwMDcxMTQ=", "number": 515, "title": "Load metrics from file (or anything else)", "user": {"login": "mirceaulinic", "id": 16694679, "node_id": "MDQ6VXNlcjE2Njk0Njc5", "avatar_url": "https://avatars1.githubusercontent.com/u/16694679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mirceaulinic", "html_url": "https://github.com/mirceaulinic", "followers_url": "https://api.github.com/users/mirceaulinic/followers", "following_url": "https://api.github.com/users/mirceaulinic/following{/other_user}", "gists_url": "https://api.github.com/users/mirceaulinic/gists{/gist_id}", "starred_url": "https://api.github.com/users/mirceaulinic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mirceaulinic/subscriptions", "organizations_url": "https://api.github.com/users/mirceaulinic/orgs", "repos_url": "https://api.github.com/users/mirceaulinic/repos", "events_url": "https://api.github.com/users/mirceaulinic/events{/privacy}", "received_events_url": "https://api.github.com/users/mirceaulinic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-21T15:01:33Z", "updated_at": "2020-02-21T15:49:22Z", "closed_at": "2020-02-21T15:36:50Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello good folks,\r\n\r\nThis might be a silly question, but I'll here I am: I would need to enable persistence for some metrics (looks like the push gateway might be a no-go for now) and I was thinking to have my app dump the metrics, say into a file (e.g., using the `write_to_textfile` function) - then when the app restarts to firstly attempt to load the metrics from there, so it ensures continuity. I understand this doesn't sound like the most ideal scenario, but such are the constraints am afraid... Anyway, so what I'm asking basically is if there's a way, or anyone is aware, of the counter-part of the `write_to_textfile` function to load the metrics from text into the registry.\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/510", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/510/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/510/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/510/events", "html_url": "https://github.com/prometheus/client_python/issues/510", "id": 563265663, "node_id": "MDU6SXNzdWU1NjMyNjU2NjM=", "number": 510, "title": "Performing queries to Prometheus", "user": {"login": "bzurkowski", "id": 6787563, "node_id": "MDQ6VXNlcjY3ODc1NjM=", "avatar_url": "https://avatars2.githubusercontent.com/u/6787563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzurkowski", "html_url": "https://github.com/bzurkowski", "followers_url": "https://api.github.com/users/bzurkowski/followers", "following_url": "https://api.github.com/users/bzurkowski/following{/other_user}", "gists_url": "https://api.github.com/users/bzurkowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzurkowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzurkowski/subscriptions", "organizations_url": "https://api.github.com/users/bzurkowski/orgs", "repos_url": "https://api.github.com/users/bzurkowski/repos", "events_url": "https://api.github.com/users/bzurkowski/events{/privacy}", "received_events_url": "https://api.github.com/users/bzurkowski/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-02-11T15:00:57Z", "updated_at": "2020-02-11T18:47:31Z", "closed_at": "2020-02-11T18:47:30Z", "author_association": "NONE", "active_lock_reason": null, "body": "Does the client enable performing queries to Prometheus? Or, it's objective is only to instrument metrics exposure for Prometheus scrape jobs?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/508", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/508/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/508/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/508/events", "html_url": "https://github.com/prometheus/client_python/issues/508", "id": 560877112, "node_id": "MDU6SXNzdWU1NjA4NzcxMTI=", "number": 508, "title": "metrics response using flask", "user": {"login": "guylissak", "id": 38490162, "node_id": "MDQ6VXNlcjM4NDkwMTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/38490162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guylissak", "html_url": "https://github.com/guylissak", "followers_url": "https://api.github.com/users/guylissak/followers", "following_url": "https://api.github.com/users/guylissak/following{/other_user}", "gists_url": "https://api.github.com/users/guylissak/gists{/gist_id}", "starred_url": "https://api.github.com/users/guylissak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guylissak/subscriptions", "organizations_url": "https://api.github.com/users/guylissak/orgs", "repos_url": "https://api.github.com/users/guylissak/repos", "events_url": "https://api.github.com/users/guylissak/events{/privacy}", "received_events_url": "https://api.github.com/users/guylissak/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-06T09:17:37Z", "updated_at": "2020-02-06T19:01:24Z", "closed_at": "2020-02-06T19:01:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\nI have a microservices app where my worker is implemented in python, I also have flask server running in deamon thread, it has few routes for readiness and liveness (being polled by k8s), in the same flask server which is used as Monitor server i want to make a route which update my prom metrics on each request (the business logic of updating the metrics is cleared and works as expected), what i would like to know is if i can send the metrics in the response on each request, that means i need somehow to get the metrics object, in the node.js client this is done by register.metrics(), so bottom line is it supported in the python client?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/504", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/504/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/504/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/504/events", "html_url": "https://github.com/prometheus/client_python/issues/504", "id": 557106828, "node_id": "MDU6SXNzdWU1NTcxMDY4Mjg=", "number": 504, "title": "gauge.set_function() doesn't work in multiprocess mode", "user": {"login": "MatthewMaclean", "id": 1004435, "node_id": "MDQ6VXNlcjEwMDQ0MzU=", "avatar_url": "https://avatars0.githubusercontent.com/u/1004435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MatthewMaclean", "html_url": "https://github.com/MatthewMaclean", "followers_url": "https://api.github.com/users/MatthewMaclean/followers", "following_url": "https://api.github.com/users/MatthewMaclean/following{/other_user}", "gists_url": "https://api.github.com/users/MatthewMaclean/gists{/gist_id}", "starred_url": "https://api.github.com/users/MatthewMaclean/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MatthewMaclean/subscriptions", "organizations_url": "https://api.github.com/users/MatthewMaclean/orgs", "repos_url": "https://api.github.com/users/MatthewMaclean/repos", "events_url": "https://api.github.com/users/MatthewMaclean/events{/privacy}", "received_events_url": "https://api.github.com/users/MatthewMaclean/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-01-29T20:48:09Z", "updated_at": "2020-01-30T15:57:15Z", "closed_at": "2020-01-30T15:57:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "Multiprocess mode's [collect()](https://github.com/prometheus/client_python/blob/470b2d3849fe069a6d390f0818b91b75c9fde79e/prometheus_client/multiprocess.py#L147) reads the registry files and aggregates metrics that have been written to `prometheus_multiproc_dir`.\r\n\r\nThis doesn't work with `gauge.set_function()` which does not record its value. The provided function is just [called during collection](https://github.com/prometheus/client_python/blob/470b2d3849fe069a6d390f0818b91b75c9fde79e/prometheus_client/registry.py#L82).\r\n\r\nThat means with the following code:\r\n```\r\nregistry = CollectorRegistry()\r\nGauge(\"test\", \"test\", registry=self._registry).set_function(lambda: 100)\r\nmultiprocess.MultiProcessCollector(registry)\r\n```\r\n\r\nThe output will be:\r\n```\r\n# HELP test test\r\n# TYPE test gauge\r\ntest 100.0\r\n# HELP test Multiprocess metric\r\n# TYPE test gauge\r\ntest{pid=\"10705\"} 0.0\r\n```\r\n\r\nCurrent side effects:\r\n- If any mode other than `all` or `liveall` is used, the `pid` tag won't be included. This results in duplicate metrics being reported to Prometheus. Prometheus currently only uses the first metric it reads, which is non-deterministic due to iteration over the [registry's dictionary](https://github.com/prometheus/client_python/blob/470b2d3849fe069a6d390f0818b91b75c9fde79e/prometheus_client/registry.py#L81).\r\n- If `registry=None` to avoid double reporting, only the default value of `0.0` is reported.\r\n- Current way to work around it is to use the mode `all` and to ignore gauges in Prometheus and with the tag `pid`.\r\n\r\nProposal:\r\nI'm not sure how you could incorporate `set_function` into the multiprocess registry and I'm not convinced how useful of a feature it would be. Is it reasonable to add a new `multiprocess_mode: exclude` which would prevent the incorrect 0.0 value being reported? Or would it be better to just add documentation to recommend using two independent registries? ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/502", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/502/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/502/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/502/events", "html_url": "https://github.com/prometheus/client_python/issues/502", "id": 547553036, "node_id": "MDU6SXNzdWU1NDc1NTMwMzY=", "number": 502, "title": "Provide public interface to examine a metric samples", "user": {"login": "ldealmei", "id": 5574992, "node_id": "MDQ6VXNlcjU1NzQ5OTI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5574992?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldealmei", "html_url": "https://github.com/ldealmei", "followers_url": "https://api.github.com/users/ldealmei/followers", "following_url": "https://api.github.com/users/ldealmei/following{/other_user}", "gists_url": "https://api.github.com/users/ldealmei/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldealmei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldealmei/subscriptions", "organizations_url": "https://api.github.com/users/ldealmei/orgs", "repos_url": "https://api.github.com/users/ldealmei/repos", "events_url": "https://api.github.com/users/ldealmei/events{/privacy}", "received_events_url": "https://api.github.com/users/ldealmei/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-01-09T15:34:50Z", "updated_at": "2020-01-10T10:41:20Z", "closed_at": "2020-01-10T09:05:38Z", "author_association": "NONE", "active_lock_reason": null, "body": "I'm currently developing a helper package to allow developers to easily instrument their code and enforce best practices and internal conventions behind the scenes.\r\n\r\nOne of my use cases, requires me to be able to have access to the samples set on a metric. However there is no public interface to do so.\r\n\r\n`MetricWrapperBase` does implement a `collect()` method which returns the information I am looking for but not in a way that is clean to parse. For example, getting a dictionary of the labels set on a sample.\r\n\r\nWould it be possible to provide a public interface to get access to a metric's samples?\r\n\r\nThank you!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/501", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/501/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/501/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/501/events", "html_url": "https://github.com/prometheus/client_python/issues/501", "id": 546182385, "node_id": "MDU6SXNzdWU1NDYxODIzODU=", "number": 501, "title": "Enums not checking labelnames are valid", "user": {"login": "brian-brazil", "id": 7115638, "node_id": "MDQ6VXNlcjcxMTU2Mzg=", "avatar_url": "https://avatars0.githubusercontent.com/u/7115638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brian-brazil", "html_url": "https://github.com/brian-brazil", "followers_url": "https://api.github.com/users/brian-brazil/followers", "following_url": "https://api.github.com/users/brian-brazil/following{/other_user}", "gists_url": "https://api.github.com/users/brian-brazil/gists{/gist_id}", "starred_url": "https://api.github.com/users/brian-brazil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brian-brazil/subscriptions", "organizations_url": "https://api.github.com/users/brian-brazil/orgs", "repos_url": "https://api.github.com/users/brian-brazil/repos", "events_url": "https://api.github.com/users/brian-brazil/events{/privacy}", "received_events_url": "https://api.github.com/users/brian-brazil/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 175849139, "node_id": "MDU6TGFiZWwxNzU4NDkxMzk=", "url": "https://api.github.com/repos/prometheus/client_python/labels/bug", "name": "bug", "color": "fc2929", "default": true, "description": null}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-01-07T09:45:41Z", "updated_at": "2020-02-29T15:12:48Z", "closed_at": "2020-02-29T15:12:48Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This should throw an exception:\r\n\r\n```\r\ne = Enum(\"a\", \"b\", labelnames=('taskId', ), states=[\"foo\"])\r\ne.state(\"foo\")\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/500", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/500/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/500/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/500/events", "html_url": "https://github.com/prometheus/client_python/issues/500", "id": 545828902, "node_id": "MDU6SXNzdWU1NDU4Mjg5MDI=", "number": 500, "title": "Can I create a counter with no labels? And if not can I set default values some how?", "user": {"login": "NadavkOptimalQ", "id": 45461973, "node_id": "MDQ6VXNlcjQ1NDYxOTcz", "avatar_url": "https://avatars0.githubusercontent.com/u/45461973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NadavkOptimalQ", "html_url": "https://github.com/NadavkOptimalQ", "followers_url": "https://api.github.com/users/NadavkOptimalQ/followers", "following_url": "https://api.github.com/users/NadavkOptimalQ/following{/other_user}", "gists_url": "https://api.github.com/users/NadavkOptimalQ/gists{/gist_id}", "starred_url": "https://api.github.com/users/NadavkOptimalQ/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NadavkOptimalQ/subscriptions", "organizations_url": "https://api.github.com/users/NadavkOptimalQ/orgs", "repos_url": "https://api.github.com/users/NadavkOptimalQ/repos", "events_url": "https://api.github.com/users/NadavkOptimalQ/events{/privacy}", "received_events_url": "https://api.github.com/users/NadavkOptimalQ/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-01-06T16:53:25Z", "updated_at": "2020-01-06T17:01:28Z", "closed_at": "2020-01-06T17:01:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "I started using Prometheus and I when I create a metric (counter for example) and I give empty labels it lets me create it.\r\nWhen I go and increase I get an error `ValueError: No label names were set when constructing`\r\nIf labels are mandatory why does it now fail on creation?\r\n```\r\n    labels = ()\r\n    c = Counter(\"name\", \"documentation\", labelnames=labels)\r\n    c.labels(labels).inc(3)\r\n```\r\n\r\nAlso lets say I do define labels, why do I always have to provide all of them? What if some parts of my code don't have all the data? Can I set default values for labels? \r\n\r\nThank you", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/498", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/498/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/498/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/498/events", "html_url": "https://github.com/prometheus/client_python/issues/498", "id": 542000325, "node_id": "MDU6SXNzdWU1NDIwMDAzMjU=", "number": 498, "title": "how to auto remove the unused metrics", "user": {"login": "hanbaga", "id": 7145468, "node_id": "MDQ6VXNlcjcxNDU0Njg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7145468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hanbaga", "html_url": "https://github.com/hanbaga", "followers_url": "https://api.github.com/users/hanbaga/followers", "following_url": "https://api.github.com/users/hanbaga/following{/other_user}", "gists_url": "https://api.github.com/users/hanbaga/gists{/gist_id}", "starred_url": "https://api.github.com/users/hanbaga/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hanbaga/subscriptions", "organizations_url": "https://api.github.com/users/hanbaga/orgs", "repos_url": "https://api.github.com/users/hanbaga/repos", "events_url": "https://api.github.com/users/hanbaga/events{/privacy}", "received_events_url": "https://api.github.com/users/hanbaga/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-24T05:46:53Z", "updated_at": "2019-12-24T06:57:13Z", "closed_at": "2019-12-24T06:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "i try unregister and register REGISTRY.  not work. need a solution", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/495", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/495/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/495/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/495/events", "html_url": "https://github.com/prometheus/client_python/issues/495", "id": 537834817, "node_id": "MDU6SXNzdWU1Mzc4MzQ4MTc=", "number": 495, "title": "Multiprocess - gauge metric continue to be reported after process exist", "user": {"login": "asherf", "id": 1268088, "node_id": "MDQ6VXNlcjEyNjgwODg=", "avatar_url": "https://avatars1.githubusercontent.com/u/1268088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asherf", "html_url": "https://github.com/asherf", "followers_url": "https://api.github.com/users/asherf/followers", "following_url": "https://api.github.com/users/asherf/following{/other_user}", "gists_url": "https://api.github.com/users/asherf/gists{/gist_id}", "starred_url": "https://api.github.com/users/asherf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asherf/subscriptions", "organizations_url": "https://api.github.com/users/asherf/orgs", "repos_url": "https://api.github.com/users/asherf/repos", "events_url": "https://api.github.com/users/asherf/events{/privacy}", "received_events_url": "https://api.github.com/users/asherf/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-12-14T00:23:03Z", "updated_at": "2019-12-14T09:06:34Z", "closed_at": "2019-12-14T09:06:34Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Very similar to https://github.com/prometheus/client_python/issues/236 (well, basically the same...)\r\nWhat I am seeing (added some logging before & after calling `multiprocess.mark_process_dead(worker.pid)`\r\n\r\nAnd I am seeing this:\r\n```\r\n[REDACTED-POD_NAME gunicorn] [2019-12-13 23:34:04 INFO] child_exit start. pid=11 files=['counter_1.db', 'histogram_1.db', 'counter_12.db', 'counter_11.db', 'histogram_11.db', 'histogram_12.db', 'counter_13.db', 'histogram_13.db', 'gauge_all_1.db'] worker=<gunicorn.workers.sync.SyncWorker object at 0x7f544f110a90> server=<gunicorn.arbiter.Arbiter object at 0x7f544f1f6550>\r\n[REDACTED-POD_NAME gunicorn] [2019-12-13 23:34:04 INFO] child_exit end. pid=11 files=['counter_1.db', 'histogram_1.db', 'counter_12.db', 'counter_11.db', 'histogram_11.db', 'histogram_12.db', 'counter_13.db', 'histogram_13.db', 'gauge_all_1.db']\r\n```\r\nThe issue is, that not cleaning up those files (specifically, gauge_all_XXX) means that the metrics in them is being returned to prometheus even though the gunicorn process is no longer alive (and thus not updating the value).\r\nthis is a problem because we use the gauge to report a version number of an internal DB and we have a check (alert) to make sure we have the same version(value) across all of the pods (this runs in k8s) running this app.\r\n\r\n@brian-brazil I think cleaning up those DBs is worth while, right now, my workaround is to do it from my app code (after `multiprocess.mark_process_dead(worker.pid)` returns)\r\nbut it feels to be that the client library should cleanup after itself...\r\n\r\nI am happy to work on a PR/code to fix this if this is something you will consider merging.\r\nOtherwise, feel free to close this issue.\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/494", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/494/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/494/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/494/events", "html_url": "https://github.com/prometheus/client_python/issues/494", "id": 535971999, "node_id": "MDU6SXNzdWU1MzU5NzE5OTk=", "number": 494, "title": "Exception while processing request in custom exporter", "user": {"login": "dtolj", "id": 34097, "node_id": "MDQ6VXNlcjM0MDk3", "avatar_url": "https://avatars1.githubusercontent.com/u/34097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolj", "html_url": "https://github.com/dtolj", "followers_url": "https://api.github.com/users/dtolj/followers", "following_url": "https://api.github.com/users/dtolj/following{/other_user}", "gists_url": "https://api.github.com/users/dtolj/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolj/subscriptions", "organizations_url": "https://api.github.com/users/dtolj/orgs", "repos_url": "https://api.github.com/users/dtolj/repos", "events_url": "https://api.github.com/users/dtolj/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolj/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-10T20:19:36Z", "updated_at": "2019-12-10T20:48:57Z", "closed_at": "2019-12-10T20:48:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have increased the number of points over 1000 and started to see this error. \r\n\r\n`Exception happened during processing of request from ('10.102.113.108', 50670)\r\nTraceback (most recent call last):\r\n  File \"/usr/lib64/python3.6/socketserver.py\", line 639, in process_request_thread\r\n    self.finish_request(request, client_address)\r\n  File \"/usr/lib64/python3.6/socketserver.py\", line 361, in finish_request\r\n    self.RequestHandlerClass(request, client_address, self)\r\n  File \"/usr/lib64/python3.6/socketserver.py\", line 696, in __init__\r\n    self.handle()\r\n  File \"/usr/lib64/python3.6/http/server.py\", line 418, in handle\r\n    self.handle_one_request()\r\n  File \"/usr/lib64/python3.6/http/server.py\", line 406, in handle_one_request\r\n    method()\r\n  File \"/root/.pex/install/prometheus_client-0.7.1-py3-none-any.whl.06415bcb7c0b3633c5ccf0878d4a58913f999a41/prometheus_client-0.7.1-py3-none-any.whl/prometheus_client/exposition.py\", line 159, in do_GET\r\n    self.wfile.write(output)\r\n  File \"/usr/lib64/python3.6/socketserver.py\", line 775, in write\r\n    self._sock.sendall(b)\r\nBrokenPipeError: [Errno 32] Broken pipe`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/490", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/490/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/490/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/490/events", "html_url": "https://github.com/prometheus/client_python/issues/490", "id": 531245740, "node_id": "MDU6SXNzdWU1MzEyNDU3NDA=", "number": 490, "title": "Multiprocessing collector doesn't work", "user": {"login": "Sayed-Soroush-Hashemi", "id": 11487710, "node_id": "MDQ6VXNlcjExNDg3NzEw", "avatar_url": "https://avatars3.githubusercontent.com/u/11487710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sayed-Soroush-Hashemi", "html_url": "https://github.com/Sayed-Soroush-Hashemi", "followers_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/followers", "following_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/following{/other_user}", "gists_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/subscriptions", "organizations_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/orgs", "repos_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/repos", "events_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/events{/privacy}", "received_events_url": "https://api.github.com/users/Sayed-Soroush-Hashemi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-02T16:26:25Z", "updated_at": "2019-12-05T14:13:39Z", "closed_at": "2019-12-02T17:29:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "### version\r\nprometheus_client==0.7.1\r\n\r\n### How to reproduce\r\n```python\r\nimport json\r\nimport os\r\nimport time\r\nfrom multiprocessing import Pool\r\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor \r\n\r\nfrom prometheus_client import Counter, CollectorRegistry, multiprocess, start_http_server, generate_latest\r\n\r\nos.environ['prometheus_multiproc_dir'] = './tmp_test' \r\n\r\nregistry = CollectorRegistry()\r\nmultiprocess.MultiProcessCollector(registry)\r\n\r\ncounter_1 = Counter('name_counter_1', '', ['l1', 'l2'], registry=registry)\r\n\r\ndef f(i):\r\n\twhile True:\r\n\t\tcounter_1.labels(f'l1_val_{i}').inc()\r\n\t\tprint(f'process {i}')\r\n\t\tprint(generate_latest(registry).decode('utf-8'))\r\n\t\ttime.sleep(i+1)\r\n\r\ndef test_multiprocessing_pool():\r\n\twith Pool(2) as p:\r\n\t\tp.map(f, [1, 2])\r\n\r\ndef test_process_pool_executor():\r\n\twith ProcessPoolExecutor(2) as p:\r\n\t\tp.map(f, [1, 2])\r\n\r\ndef test_thread_pool_executor():\r\n\twith ThreadPoolExecutor(2) as p:\r\n\t\tp.map(f, [1, 2])\r\n\r\n\r\nif __name__ == '__main__':\r\n\t# test_multiprocessing_pool()\r\n\ttest_process_pool_executor()\r\n\t# test_thread_pool_executor()\r\n\r\n```\r\n### what I see\r\nEach process collects only its own metrics when using `ProcessPollExecuter` and `multiprocessing.Pool`, but it works correctly when using `ThreadPoolExecutor`.\r\n```text\r\nprocess 1\r\n# HELP name_counter_1_total \r\n# TYPE name_counter_1_total counter\r\nname_counter_1_total{l=\"l_val_1\"} 2.0\r\n# TYPE name_counter_1_created gauge\r\nname_counter_1_created{l=\"l_val_1\"} 1.575303633967081e+09\r\n\r\nprocess 2\r\n# HELP name_counter_1_total \r\n# TYPE name_counter_1_total counter\r\nname_counter_1_total{l=\"l_val_2\"} 2.0\r\n# TYPE name_counter_1_created gauge\r\nname_counter_1_created{l=\"l_val_2\"} 1.5753036339671488e+09\r\n```\r\n### what I expect\r\nEach process should be able to collect all the metrics in all the processes.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/488", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/488/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/488/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/488/events", "html_url": "https://github.com/prometheus/client_python/issues/488", "id": 523490814, "node_id": "MDU6SXNzdWU1MjM0OTA4MTQ=", "number": 488, "title": "Import data from a file and export it to Prometheus", "user": {"login": "lorentinoooo", "id": 48497789, "node_id": "MDQ6VXNlcjQ4NDk3Nzg5", "avatar_url": "https://avatars0.githubusercontent.com/u/48497789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorentinoooo", "html_url": "https://github.com/lorentinoooo", "followers_url": "https://api.github.com/users/lorentinoooo/followers", "following_url": "https://api.github.com/users/lorentinoooo/following{/other_user}", "gists_url": "https://api.github.com/users/lorentinoooo/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorentinoooo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorentinoooo/subscriptions", "organizations_url": "https://api.github.com/users/lorentinoooo/orgs", "repos_url": "https://api.github.com/users/lorentinoooo/repos", "events_url": "https://api.github.com/users/lorentinoooo/events{/privacy}", "received_events_url": "https://api.github.com/users/lorentinoooo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-11-15T14:09:56Z", "updated_at": "2019-11-15T14:42:06Z", "closed_at": "2019-11-15T14:42:06Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to know how I could get to import data from a text file and then export it to Prometheus. I've done a piece of code that it works but at the moment I try to display the values in Prometheus, it only shows one value and not all of them as I would like. Next, I attached some pictures about the code and what Prometheus do, just to show you a little bit. I don't really know what is wrong to not obtain what I want. The problem is like Prometheus was not able to process such amount information in short amount of time. It only plots the first value. Besides, collect function is called more than once and it keeps plotting the same value again and again.\r\n\r\n```\r\nimport os, time\r\n\r\nfrom prometheus_client import start_http_server\r\nfrom prometheus_client.core import GaugeMetricFamily, REGISTRY\r\n\r\nclass getParameters(object): # read some parameters from a given file and store them in a Gauge \r\n    def __init__(self, param):\r\n        self.param = param\r\n\r\n    def _readSheet(self):\r\n        thgpt = GaugeMetricFamily('TFM_throughpt', 'Throughpt Measure', labels=['IP','module'])\r\n        for file in os.listdir(\".\"):\r\n            if os.path.isfile(file) and file.startswith(\"test_\", 0, 5):\r\n                try:\r\n                    with open(file,'r',encoding = 'utf-8') as f:\r\n                        line = f.readline()\r\n                        while line:\r\n                            if line:\r\n                                aux = line.split(\" \")\r\n                                if ('Thgptup:' in line):\r\n                                    thgpt.add_metric([self.param, 'Upload'],float(aux[1]))\r\n                                elif ('Thgptdown' in line):\r\n                                    thgpt.add_metric([self.param, 'Download'],float(aux[1]))\r\n                                elif ('Thgpt' in line):\r\n                                    thgpt.add_metric([self.param, 'Overall'],float(aux[1]))\r\n                                line = f.readline()\r\n\r\n                        yield thgpt\r\n\r\n                except Exception as f:\r\n                    print(f)\r\n\r\n    def _getParam(self): #just read the sample which has been stored in the  Gauge above\r\n        for data in self._readSheet():\r\n            yield data\r\n\r\n    def collect(self):\r\n        for x in self._getParam():\r\n            yield x\r\n\r\n        yield GaugeMetricFamily('my_gauge', 'Help text', value=7)\r\n\r\nparam = 'localhost'\r\nREGISTRY.register(getParameters(param))\r\nprint ('Reading is Done!')\r\nstart_http_server(8000)\r\n\r\ntry:\r\n    wait_time = 20.0\r\n    while True:\r\n        time.sleep(wait_time)\r\nexcept KeyboardInterrupt:\r\n    pass\r\n```\r\n![Captura de pantalla 2019-11-14 a las 22 28 33](https://user-images.githubusercontent.com/48497789/68948894-35223580-07b9-11ea-8a80-d8ee3f4a352a.png)\r\n![Captura de pantalla 2019-11-14 a las 22 28 51](https://user-images.githubusercontent.com/48497789/68948896-35223580-07b9-11ea-80cb-f2d7057adee9.png)\r\n\r\nand next you can see what I really want to obtain:\r\n\r\n![Captura de pantalla 2019-11-14 a las 22 33 02](https://user-images.githubusercontent.com/48497789/68948898-35223580-07b9-11ea-98cd-29c92096b81f.png)\r\n\r\nDoes anyone help me out with this task, please? I really appreciate your help.\r\nThanks in advance guys.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/486", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/486/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/486/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/486/events", "html_url": "https://github.com/prometheus/client_python/issues/486", "id": 518851270, "node_id": "MDU6SXNzdWU1MTg4NTEyNzA=", "number": 486, "title": "Can varying pods in Kube Cluster affect the Metrics results", "user": {"login": "PradeepGogulamudi", "id": 46973718, "node_id": "MDQ6VXNlcjQ2OTczNzE4", "avatar_url": "https://avatars2.githubusercontent.com/u/46973718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PradeepGogulamudi", "html_url": "https://github.com/PradeepGogulamudi", "followers_url": "https://api.github.com/users/PradeepGogulamudi/followers", "following_url": "https://api.github.com/users/PradeepGogulamudi/following{/other_user}", "gists_url": "https://api.github.com/users/PradeepGogulamudi/gists{/gist_id}", "starred_url": "https://api.github.com/users/PradeepGogulamudi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PradeepGogulamudi/subscriptions", "organizations_url": "https://api.github.com/users/PradeepGogulamudi/orgs", "repos_url": "https://api.github.com/users/PradeepGogulamudi/repos", "events_url": "https://api.github.com/users/PradeepGogulamudi/events{/privacy}", "received_events_url": "https://api.github.com/users/PradeepGogulamudi/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-06T22:05:40Z", "updated_at": "2019-11-07T06:43:17Z", "closed_at": "2019-11-07T06:43:17Z", "author_association": "NONE", "active_lock_reason": null, "body": "", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/485", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/485/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/485/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/485/events", "html_url": "https://github.com/prometheus/client_python/issues/485", "id": 516994691, "node_id": "MDU6SXNzdWU1MTY5OTQ2OTE=", "number": 485, "title": "Need to create a custom metric to host data to Prometheus default port using .NET", "user": {"login": "Srivaniausali", "id": 57004304, "node_id": "MDQ6VXNlcjU3MDA0MzA0", "avatar_url": "https://avatars0.githubusercontent.com/u/57004304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Srivaniausali", "html_url": "https://github.com/Srivaniausali", "followers_url": "https://api.github.com/users/Srivaniausali/followers", "following_url": "https://api.github.com/users/Srivaniausali/following{/other_user}", "gists_url": "https://api.github.com/users/Srivaniausali/gists{/gist_id}", "starred_url": "https://api.github.com/users/Srivaniausali/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Srivaniausali/subscriptions", "organizations_url": "https://api.github.com/users/Srivaniausali/orgs", "repos_url": "https://api.github.com/users/Srivaniausali/repos", "events_url": "https://api.github.com/users/Srivaniausali/events{/privacy}", "received_events_url": "https://api.github.com/users/Srivaniausali/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-11-04T07:39:28Z", "updated_at": "2019-11-05T10:56:44Z", "closed_at": "2019-11-04T09:04:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi\r\nI am new to Prometheus Dataserver.\r\nas per my understanding Counter, gauge, Summary, Histogram are 4 standard type of metrics in Prometheus.\r\nBut, I want to Create the customized metric based on my data and reporting needs using .net(c#).\r\nI got the equivalent to create customized metric in Python that is : UnknownMetricFamily\r\n\r\n\"\"\"EXAMPLE 2\"\"\"\r\n\r\n## Code start##\r\n\r\nclass mycollector(object):\r\ndef collect(self):\r\nmf = UnknownMetricFamily(\"test\", \"\",labels=[\"XXX\", \"YYY\", \"location\", \"ZZZ\"])\r\nmf.add_metric([\"abc\", \"12\", \"Hyderabad\", \"34\"], 1)\r\nyield mf\r\n\r\n\t\"test\" is my Metric/measurement name \r\n\"XXX\", \"location\", \"ZZZ\"  are my Tag keys \r\n\"YYY\" is my Field key\r\nif name == 'main':\r\nREGISTRY.register(mycollector())\r\nstart_http_server(8080)\r\nwhile True:\r\ntime.sleep(1)\r\n\r\n##end code ##\r\n\r\nwhere as I need this equivalent to create customized metric in .net.\r\nIs this the correct way to achieve my requirement? or Do we have any other alternate to proceed further. \r\nCould you please help on this . Thanks in advance.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/484", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/484/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/484/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/484/events", "html_url": "https://github.com/prometheus/client_python/issues/484", "id": 513273500, "node_id": "MDU6SXNzdWU1MTMyNzM1MDA=", "number": 484, "title": "query parser", "user": {"login": "eranreshef", "id": 3725751, "node_id": "MDQ6VXNlcjM3MjU3NTE=", "avatar_url": "https://avatars0.githubusercontent.com/u/3725751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eranreshef", "html_url": "https://github.com/eranreshef", "followers_url": "https://api.github.com/users/eranreshef/followers", "following_url": "https://api.github.com/users/eranreshef/following{/other_user}", "gists_url": "https://api.github.com/users/eranreshef/gists{/gist_id}", "starred_url": "https://api.github.com/users/eranreshef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eranreshef/subscriptions", "organizations_url": "https://api.github.com/users/eranreshef/orgs", "repos_url": "https://api.github.com/users/eranreshef/repos", "events_url": "https://api.github.com/users/eranreshef/events{/privacy}", "received_events_url": "https://api.github.com/users/eranreshef/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-10-28T12:27:14Z", "updated_at": "2019-10-29T12:03:23Z", "closed_at": "2019-10-29T12:03:23Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way (pythonic or not) to parse a promql query and extract all the metrics being used in it?\r\n\r\nThanks.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/477", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/477/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/477/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/477/events", "html_url": "https://github.com/prometheus/client_python/issues/477", "id": 509864214, "node_id": "MDU6SXNzdWU1MDk4NjQyMTQ=", "number": 477, "title": "Can't import  any functions from prometheus_client with python 3.7.4 ", "user": {"login": "alextsm", "id": 18166127, "node_id": "MDQ6VXNlcjE4MTY2MTI3", "avatar_url": "https://avatars2.githubusercontent.com/u/18166127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alextsm", "html_url": "https://github.com/alextsm", "followers_url": "https://api.github.com/users/alextsm/followers", "following_url": "https://api.github.com/users/alextsm/following{/other_user}", "gists_url": "https://api.github.com/users/alextsm/gists{/gist_id}", "starred_url": "https://api.github.com/users/alextsm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alextsm/subscriptions", "organizations_url": "https://api.github.com/users/alextsm/orgs", "repos_url": "https://api.github.com/users/alextsm/repos", "events_url": "https://api.github.com/users/alextsm/events{/privacy}", "received_events_url": "https://api.github.com/users/alextsm/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-21T10:09:49Z", "updated_at": "2019-10-21T11:08:40Z", "closed_at": "2019-10-21T11:08:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello, Im using latest conda environment with python 3.7.4  and prometheus_client 0.7.1 and cannot import any functions from prometheus_client.\r\nEverything works well with Python 3.6.9\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/476", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/476/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/476/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/476/events", "html_url": "https://github.com/prometheus/client_python/issues/476", "id": 507039788, "node_id": "MDU6SXNzdWU1MDcwMzk3ODg=", "number": 476, "title": "push_to_gateway failed", "user": {"login": "gkany", "id": 43233929, "node_id": "MDQ6VXNlcjQzMjMzOTI5", "avatar_url": "https://avatars0.githubusercontent.com/u/43233929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gkany", "html_url": "https://github.com/gkany", "followers_url": "https://api.github.com/users/gkany/followers", "following_url": "https://api.github.com/users/gkany/following{/other_user}", "gists_url": "https://api.github.com/users/gkany/gists{/gist_id}", "starred_url": "https://api.github.com/users/gkany/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gkany/subscriptions", "organizations_url": "https://api.github.com/users/gkany/orgs", "repos_url": "https://api.github.com/users/gkany/repos", "events_url": "https://api.github.com/users/gkany/events{/privacy}", "received_events_url": "https://api.github.com/users/gkany/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-15T06:43:03Z", "updated_at": "2019-10-15T09:57:13Z", "closed_at": "2019-10-15T09:57:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` python\r\nregistry = CollectorRegistry()\r\ng_test = Gauge('test-push_data', 'test data', ['label_a', 'b', 'c', 'd'], registry=registry)\r\nwhile 1:\r\n    if queue is not None:\r\n        data = queue.pop\r\n        print('data: {}'.format(data))  # The output always has data, about 2s apart\r\n        try:\r\n            g_test.labels(data['a'], data['b'], data['c'], data['d'])\r\n            push_to_gateway(prometheus_addr, job='push-data_test_job', registry=registry)\r\n        except Exception as e:\r\n            print(repr(e))  #no exception log\r\n    sleep(0.2)\r\n```\r\n\r\nMy code format is as above.\r\n\r\nThere is data on the pushgateway at first, but I can't see the data in a few hours. What's even more strange is that the job is not on the pushgateway. I don't know why.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/475", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/475/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/475/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/475/events", "html_url": "https://github.com/prometheus/client_python/issues/475", "id": 503877590, "node_id": "MDU6SXNzdWU1MDM4Nzc1OTA=", "number": 475, "title": "High memory consumption ", "user": {"login": "dhananjaysathe", "id": 866950, "node_id": "MDQ6VXNlcjg2Njk1MA==", "avatar_url": "https://avatars2.githubusercontent.com/u/866950?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dhananjaysathe", "html_url": "https://github.com/dhananjaysathe", "followers_url": "https://api.github.com/users/dhananjaysathe/followers", "following_url": "https://api.github.com/users/dhananjaysathe/following{/other_user}", "gists_url": "https://api.github.com/users/dhananjaysathe/gists{/gist_id}", "starred_url": "https://api.github.com/users/dhananjaysathe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dhananjaysathe/subscriptions", "organizations_url": "https://api.github.com/users/dhananjaysathe/orgs", "repos_url": "https://api.github.com/users/dhananjaysathe/repos", "events_url": "https://api.github.com/users/dhananjaysathe/events{/privacy}", "received_events_url": "https://api.github.com/users/dhananjaysathe/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-08T07:32:37Z", "updated_at": "2019-10-08T09:36:07Z", "closed_at": "2019-10-08T08:13:37Z", "author_association": "NONE", "active_lock_reason": null, "body": "What is the expected memory overhead of adding this library to code? For 5 metrics in noticed it added ~180mb , that sounds a tad ludicrous.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/474", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/474/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/474/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/474/events", "html_url": "https://github.com/prometheus/client_python/issues/474", "id": 501856762, "node_id": "MDU6SXNzdWU1MDE4NTY3NjI=", "number": 474, "title": "Question regarding multiprocess with uwsgi", "user": {"login": "allenc97", "id": 35978194, "node_id": "MDQ6VXNlcjM1OTc4MTk0", "avatar_url": "https://avatars0.githubusercontent.com/u/35978194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/allenc97", "html_url": "https://github.com/allenc97", "followers_url": "https://api.github.com/users/allenc97/followers", "following_url": "https://api.github.com/users/allenc97/following{/other_user}", "gists_url": "https://api.github.com/users/allenc97/gists{/gist_id}", "starred_url": "https://api.github.com/users/allenc97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/allenc97/subscriptions", "organizations_url": "https://api.github.com/users/allenc97/orgs", "repos_url": "https://api.github.com/users/allenc97/repos", "events_url": "https://api.github.com/users/allenc97/events{/privacy}", "received_events_url": "https://api.github.com/users/allenc97/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-03T05:10:37Z", "updated_at": "2019-10-03T09:30:28Z", "closed_at": "2019-10-03T09:30:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nAssuming I have a supervisord controlled nginx + uwsgi combination, with the UWSGI server serving a number of flask app processes. In this case, what is my best option to invoke the multiprocess module's mark_process_dead() if my uwsgi worker process dies and is terminated by master? It seems to me like the only possibility is using python's atexit.\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/473", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/473/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/473/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/473/events", "html_url": "https://github.com/prometheus/client_python/issues/473", "id": 501641152, "node_id": "MDU6SXNzdWU1MDE2NDExNTI=", "number": 473, "title": "Python runtime metrics", "user": {"login": "jzelinskie", "id": 343539, "node_id": "MDQ6VXNlcjM0MzUzOQ==", "avatar_url": "https://avatars3.githubusercontent.com/u/343539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jzelinskie", "html_url": "https://github.com/jzelinskie", "followers_url": "https://api.github.com/users/jzelinskie/followers", "following_url": "https://api.github.com/users/jzelinskie/following{/other_user}", "gists_url": "https://api.github.com/users/jzelinskie/gists{/gist_id}", "starred_url": "https://api.github.com/users/jzelinskie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jzelinskie/subscriptions", "organizations_url": "https://api.github.com/users/jzelinskie/orgs", "repos_url": "https://api.github.com/users/jzelinskie/repos", "events_url": "https://api.github.com/users/jzelinskie/events{/privacy}", "received_events_url": "https://api.github.com/users/jzelinskie/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-10-02T18:04:03Z", "updated_at": "2019-10-02T19:49:26Z", "closed_at": "2019-10-02T19:49:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hey there,\r\n\r\nThe Go client library includes some metrics on the language runtime by default. Perhaps we could do the same with Python. A quick search yielded [this package] which includes some basic metrics from the `gc` package. Is there any additional logic that we'd need to consider to support the multiprocess/gunicorn mode?\r\n\r\n[this package]: https://github.com/korfuri/python-gc-prometheus", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/472", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/472/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/472/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/472/events", "html_url": "https://github.com/prometheus/client_python/issues/472", "id": 501060632, "node_id": "MDU6SXNzdWU1MDEwNjA2MzI=", "number": 472, "title": "How to set path to ", "user": {"login": "Hedgehogues", "id": 4973667, "node_id": "MDQ6VXNlcjQ5NzM2Njc=", "avatar_url": "https://avatars2.githubusercontent.com/u/4973667?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Hedgehogues", "html_url": "https://github.com/Hedgehogues", "followers_url": "https://api.github.com/users/Hedgehogues/followers", "following_url": "https://api.github.com/users/Hedgehogues/following{/other_user}", "gists_url": "https://api.github.com/users/Hedgehogues/gists{/gist_id}", "starred_url": "https://api.github.com/users/Hedgehogues/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Hedgehogues/subscriptions", "organizations_url": "https://api.github.com/users/Hedgehogues/orgs", "repos_url": "https://api.github.com/users/Hedgehogues/repos", "events_url": "https://api.github.com/users/Hedgehogues/events{/privacy}", "received_events_url": "https://api.github.com/users/Hedgehogues/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T18:11:43Z", "updated_at": "2019-10-01T18:35:26Z", "closed_at": "2019-10-01T18:35:26Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to update metrics from python. My tool is processing mail and I need to count the number of letters. Raised the prometheus in the docker. In the script do this:\r\n\r\n    from prometheus_client import Counter\r\n    def process(self):\r\n            ...\r\n            c = Counter('my_failures_111', 'Description of counter')\r\n            c.inc()  # Increment by 1\r\n\r\nHow can I prometheus_client explicitly indicate where to put the metrics? My prometheus uses port 9090. I am started prometheus in docker with this repo https://github.com/prometheus/prometheus", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/470", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/470/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/470/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/470/events", "html_url": "https://github.com/prometheus/client_python/issues/470", "id": 500887820, "node_id": "MDU6SXNzdWU1MDA4ODc4MjA=", "number": 470, "title": "The `_created` auto-created metrics (e.g. for Counter) cause failure of `promtool check metrics` because of lack of HELP", "user": {"login": "davidlukac", "id": 1215290, "node_id": "MDQ6VXNlcjEyMTUyOTA=", "avatar_url": "https://avatars0.githubusercontent.com/u/1215290?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlukac", "html_url": "https://github.com/davidlukac", "followers_url": "https://api.github.com/users/davidlukac/followers", "following_url": "https://api.github.com/users/davidlukac/following{/other_user}", "gists_url": "https://api.github.com/users/davidlukac/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlukac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlukac/subscriptions", "organizations_url": "https://api.github.com/users/davidlukac/orgs", "repos_url": "https://api.github.com/users/davidlukac/repos", "events_url": "https://api.github.com/users/davidlukac/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlukac/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-10-01T13:14:44Z", "updated_at": "2019-10-01T15:28:58Z", "closed_at": "2019-10-01T15:28:58Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "- `prometheus/client_python` version: `0.7.1`\r\n- Python version `3.7.1`\r\n- `promtool` version from current `HEAD`:  `2.13.0-rc.0`\r\n\r\nWhen creating a counter, e.g.\r\n```\r\nc = Counter('some_counter', \"Some counter\")\r\n```\r\n\r\nthis will create two metrics:\r\n\r\n```\r\n# HELP some_counter Some counter\r\n# TYPE some_counter counter\r\nsome_counter_total 4.0\r\n# TYPE some_counter_created gauge\r\nsome_counter_created 1.5699349744874952e+09\r\n```\r\n\r\nThe output lacks the `HELP` line for the `_created` metric. This causes a failure with `promtool`:\r\n```\r\n$ curl -s http://localhost:8080/metrics | promtool check metrics\r\nsome_counter_created no help text\r\n```\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/468", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/468/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/468/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/468/events", "html_url": "https://github.com/prometheus/client_python/issues/468", "id": 497113064, "node_id": "MDU6SXNzdWU0OTcxMTMwNjQ=", "number": 468, "title": "Duplicated timeseries in CollectorRegistry in a custom collector", "user": {"login": "nralbers", "id": 3678798, "node_id": "MDQ6VXNlcjM2Nzg3OTg=", "avatar_url": "https://avatars2.githubusercontent.com/u/3678798?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nralbers", "html_url": "https://github.com/nralbers", "followers_url": "https://api.github.com/users/nralbers/followers", "following_url": "https://api.github.com/users/nralbers/following{/other_user}", "gists_url": "https://api.github.com/users/nralbers/gists{/gist_id}", "starred_url": "https://api.github.com/users/nralbers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nralbers/subscriptions", "organizations_url": "https://api.github.com/users/nralbers/orgs", "repos_url": "https://api.github.com/users/nralbers/repos", "events_url": "https://api.github.com/users/nralbers/events{/privacy}", "received_events_url": "https://api.github.com/users/nralbers/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-09-23T13:53:53Z", "updated_at": "2019-09-23T15:01:22Z", "closed_at": "2019-09-23T15:01:21Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have the following custom collector definition (in a django app that i'm using to define component service windows and expose as metrics):\r\n\r\n```\r\nclass ComponentCollector(object):\r\n    metrics = {}\r\n\r\n    def collect(self):\r\n        moment = timezone.now()\r\n        components = Component.objects.all()\r\n\r\n        if not self.metrics:\r\n            for component in components:\r\n                labels = component.get_labels()\r\n                prefix = component.name.replace('-', '_') + \"_\"\r\n                self.metrics[component.name] = {\r\n                    'last_start': GaugeMetricFamily(''.join((prefix, SERVICE_WINDOW_LAST_START_METRIC)),\r\n                                                    SERVICE_WINDOW_LAST_START_DOC, labels=labels.keys()),\r\n\r\n                    'last_end': GaugeMetricFamily(''.join((prefix, SERVICE_WINDOW_LAST_END_METRIC)),\r\n                                                  SERVICE_WINDOW_LAST_END_DOC, labels=labels.keys()),\r\n\r\n                    'next_start': GaugeMetricFamily(''.join((prefix, SERVICE_WINDOW_NEXT_START_METRIC)),\r\n                                                    SERVICE_WINDOW_NEXT_START_DOC, labels=labels.keys()),\r\n\r\n                    'next_end': GaugeMetricFamily(''.join((prefix, SERVICE_WINDOW_NEXT_END_METRIC)),\r\n                                                  SERVICE_WINDOW_NEXT_END_DOC, labels=labels.keys()),\r\n\r\n                    'in_window': GaugeMetricFamily(''.join((prefix, SERVICE_WINDOW_IN_WINDOW_METRIC)),\r\n                                                   SERVICE_WINDOW_IN_WINDOW_DOC, labels=labels.keys()),\r\n                }\r\n\r\n        for component in components:\r\n            labels = component.get_labels()\r\n            self.metrics[component.name]['last_start'].add_metric(labels=labels.values(),\r\n                                                                  value=component.get_last_start_time(moment).timestamp())\r\n            self.metrics[component.name]['last_end'].add_metric(labels=labels.values(),\r\n                                                                value=component.get_next_end_time(moment).timestamp())\r\n            self.metrics[component.name]['next_start'].add_metric(labels=labels.values(),\r\n                                                                  value=component.get_next_start_time(moment).timestamp())\r\n            self.metrics[component.name]['next_end'].add_metric(labels=labels.values(),\r\n                                                                value=component.get_next_end_time(moment).timestamp())\r\n            self.metrics[component.name]['in_window'].add_metric(labels=labels.values(),\r\n                                                                 value=int(component.in_window(moment)))\r\n        for comp in self.metrics.keys():\r\n            for metric in self.metrics[comp].values():\r\n                yield metric\r\n```\r\n\r\nI do a register in the application start (runs once, and no issues).\r\nHowever, when a collect is triggered in the app, I get the following error:\r\n\r\n```\r\nValueError(\\\"Duplicated timeseries in CollectorRegistry: {'nginx_service_window_next_end', 'unix_service_window_last_end', 'unix_service_window_in_window', 'unix_service_window_last_start', 'nginx_service_window_last_end', 'nginx_service_window_last_start', 'oracle_service_window_next_start', 'nginx_service_window_next_start', 'oracle_service_window_last_start', 'unix_service_window_next_start', 'unix_service_window_next_end', 'nginx_service_window_in_window', 'oracle_service_window_next_end', 'oracle_service_window_last_end', 'oracle_service_window_in_window'}\r\n```\r\nAs far as I can tell, i'm only creating the GaugeMetricFamily once, then updating values on each call. Running through the debugger triggers an exception on the first yield on the second run through (and properly doesn't recreate the GaugeMetricFamily object.\r\nWhat am I doing wrong?\r\nThe only examples I can find don't even bother protecting the creation of the GaugeMetricFamily from running more than once. (https://www.robustperception.io/writing-a-jenkins-exporter-in-python)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/465", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/465/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/465/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/465/events", "html_url": "https://github.com/prometheus/client_python/issues/465", "id": 491659691, "node_id": "MDU6SXNzdWU0OTE2NTk2OTE=", "number": 465, "title": "int value will be changed to float after using generate_latest function to print plain text", "user": {"login": "zhiyong-lv", "id": 19340980, "node_id": "MDQ6VXNlcjE5MzQwOTgw", "avatar_url": "https://avatars3.githubusercontent.com/u/19340980?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhiyong-lv", "html_url": "https://github.com/zhiyong-lv", "followers_url": "https://api.github.com/users/zhiyong-lv/followers", "following_url": "https://api.github.com/users/zhiyong-lv/following{/other_user}", "gists_url": "https://api.github.com/users/zhiyong-lv/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhiyong-lv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhiyong-lv/subscriptions", "organizations_url": "https://api.github.com/users/zhiyong-lv/orgs", "repos_url": "https://api.github.com/users/zhiyong-lv/repos", "events_url": "https://api.github.com/users/zhiyong-lv/events{/privacy}", "received_events_url": "https://api.github.com/users/zhiyong-lv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-10T13:04:13Z", "updated_at": "2019-11-14T12:01:11Z", "closed_at": "2019-11-14T12:01:11Z", "author_association": "NONE", "active_lock_reason": null, "body": "### Test Script\r\n```python\r\nfrom __future__ import print_function\r\nfrom prometheus_client.parser import text_string_to_metric_families, text_fd_to_metric_families\r\nfrom prometheus_client import CollectorRegistry, write_to_textfile\r\nfrom prometheus_client.exposition import generate_latest\r\nimport getopt\r\nimport sys\r\nimport json\r\n\r\n# conf_json_text = '''\r\n# {\r\n#     \"added_lables\": {\r\n#         \"cloud\": \"AWS\",\r\n#         \"region\": \"us-east-1\",\r\n#         \"testid\": \"1234567890\"\r\n#     }\r\n# }\r\n# '''\r\n#\r\nmetrics_text = '''\r\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\r\n# TYPE promhttp_metric_handler_requests_in_flight gauge\r\npromhttp_metric_handler_requests_in_flight 1\r\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\r\n# TYPE promhttp_metric_handler_requests_total counter\r\npromhttp_metric_handler_requests_total{code=\"200\"} 3.01018286712\r\npromhttp_metric_handler_requests_total{code=\"500\"} 1\r\npromhttp_metric_handler_requests_total{code=\"503\"} 0\r\n'''\r\n\r\nSUCCESS_CODE = 0\r\nINPUT_ERROR_CODE = 1\r\nINTERNAL_ERROR_CODE = 2\r\n\r\nhelp_info = '''\r\n-h --help:                  print help\r\n-c --config={config_json}:  config json text. \r\n                            the config json text is as following:\r\n                            {\\\\\"added_lables\\\\\":{\\\\\"cloud\\\\\":\\\\\"AWS\\\\\",\\\\\"region\\\\\":\\\\\"us-east-1\\\\\",\\\\\"testid\\\\\":\\\\\"1234567890\\\\\"}}\r\n-f --file={file_name}:      input file name. If none, use stdin as input.\r\n'''\r\n\r\ndef usage():\r\n    print(help_info)\r\n\r\n\r\ndef add_lable(metrics_text, tags):\r\n    class TextCollector(object):\r\n        def __init__(self, text, added_lables_json):\r\n            self.metrics_family = list(text_string_to_metric_families(text))\r\n            self.added_lables_json = added_lables_json\r\n\r\n        def collect(self):\r\n            return self.metrics_family\r\n\r\n        def add_lables(self):\r\n            for metric in self.metrics_family:\r\n                for sample in metric.samples:\r\n                    for k, v in self.added_lables_json.items():\r\n                        sample.labels[k] = v\r\n\r\n    registry = CollectorRegistry()\r\n    collector = TextCollector(metrics_text, tags)\r\n    collector.add_lables()\r\n    registry.register(collector)\r\n    return generate_latest(registry)\r\n\r\ndef main():\r\n    conf_json_text = \"\"\r\n    metrics_text_file = \"\"\r\n\r\n    try:\r\n        options, args = getopt.getopt(sys.argv[1:], \"hc:f:\", [\"help\", \"config=\", \"file=\"])\r\n    except getopt.GetoptError:\r\n        sys.exit()\r\n    for name, value in options:\r\n        if name in (\"-h\", \"--help\"):\r\n            usage()\r\n        if name in (\"-c\", \"--config\"):\r\n            conf_json_text = value\r\n        if name in (\"-f\", \"--file\"):\r\n            metrics_text_file = value\r\n\r\n    if len(conf_json_text) > 0:\r\n        try:\r\n            conf_json = json.loads(conf_json_text)\r\n            tags = conf_json[\"added_lables\"]\r\n        except Exception as e:\r\n            print(\"input configuration json error. \", conf_json_text)\r\n            usage()\r\n            exit(INPUT_ERROR_CODE)\r\n    else:\r\n        print(\"input configuration json missing.\")\r\n        usage()\r\n        exit(INPUT_ERROR_CODE)\r\n\r\n\r\n    # if len(metrics_text_file) > 0:\r\n    #     try:\r\n    #         fp = open(metrics_text_file)\r\n    #         metrics_text = fp.read()\r\n    #     except Exception as e:\r\n    #         print(\"read {} error.\".format(metrics_text_file))\r\n    #         usage()\r\n    #         exit(INPUT_ERROR_CODE)\r\n    # else:\r\n    #     try:\r\n    #         metrics_text = sys.stdin.read()\r\n    #     except Exception as e:\r\n    #         print(\"read standard input error.\")\r\n    #         usage()\r\n    #         exit(INPUT_ERROR_CODE)\r\n\r\n    latest = add_lable(metrics_text, tags)\r\n    print(latest.decode('ascii'))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n\r\n```\r\n\r\n### Reproduce Steps\r\n1. issue the following command:\r\n> prom_metrics_lable_handler.py -c '{\\\"added_lables\\\":{\\\"cloud\\\":\\\"AWS\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"testid\\\":\\\"1234567890\\\"}}'\r\n\r\n2. check the result:\r\n```python\r\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\r\n# TYPE promhttp_metric_handler_requests_in_flight gauge\r\npromhttp_metric_handler_requests_in_flight{cloud=\"AWS\",region=\"us-east-1\",testid=\"1234567890\"} 1.0\r\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\r\n# TYPE promhttp_metric_handler_requests_total counter\r\npromhttp_metric_handler_requests_total{cloud=\"AWS\",code=\"200\",region=\"us-east-1\",testid=\"1234567890\"} 3.01018286712\r\npromhttp_metric_handler_requests_total{cloud=\"AWS\",code=\"500\",region=\"us-east-1\",testid=\"1234567890\"} 1.0\r\npromhttp_metric_handler_requests_total{cloud=\"AWS\",code=\"503\",region=\"us-east-1\",testid=\"1234567890\"} 0.0\r\n```\r\n\r\n### Issue\r\nexpected result should be:\r\n```\r\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\r\n# TYPE promhttp_metric_handler_requests_in_flight gauge\r\npromhttp_metric_handler_requests_in_flight{cloud=\"AWS\",region=\"us-east-1\",testid=\"1234567890\"} 1\r\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\r\n# TYPE promhttp_metric_handler_requests_total counter\r\npromhttp_metric_handler_requests_total{cloud=\"AWS\",code=\"200\",region=\"us-east-1\",testid=\"1234567890\"} 3.01018286712\r\npromhttp_metric_handler_requests_total{cloud=\"AWS\",code=\"500\",region=\"us-east-1\",testid=\"1234567890\"} 1\r\npromhttp_metric_handler_requests_total{cloud=\"AWS\",code=\"503\",region=\"us-east-1\",testid=\"1234567890\"} 0\r\n```\r\n\r\n**We want to get int values, but get float values**\r\n\r\n### RC\r\nFrom the following code, you could see that, no matter s.exemplar.value is int or float, generate_latest will treat it as float always\r\n\r\n```python\r\ndef generate_latest(registry):\r\n    ......\r\n            for s in metric.samples:\r\n                ...\r\n                if s.exemplar:\r\n                    .....\r\n                    if s.exemplar.timestamp is not None:\r\n                        exemplarstr = ' # {0} {1} {2}'.format(\r\n                            labels,\r\n                            floatToGoString(s.exemplar.value),\r\n                            s.exemplar.timestamp,\r\n                        )\r\n                    else:\r\n                        exemplarstr = ' # {0} {1}'.format(\r\n                            labels,\r\n                            floatToGoString(s.exemplar.value),\r\n                        )\r\n                else:\r\n                    exemplarstr = ''\r\n                timestamp = ''\r\n                if s.timestamp is not None:\r\n                    timestamp = ' {0}'.format(s.timestamp)\r\n                output.append('{0}{1} {2}{3}{4}\\n'.format(\r\n                    s.name,\r\n                    labelstr,\r\n                    floatToGoString(s.value),\r\n                    timestamp,\r\n                    exemplarstr,\r\n                ))\r\n        except Exception as exception:\r\n            exception.args = (exception.args or ('',)) + (metric,)\r\n            raise\r\n\r\n    output.append('# EOF\\n')\r\n    return ''.join(output).encode('utf-8')\r\n```\r\n\r\n### Fix\r\nThe following are how I fix this issue in my own environment. I didn't do a fully test and analysis, you could fix this issue in another way.\r\n\r\n```python\r\n$ git diff\r\ndiff --git a/prometheus_client/openmetrics/exposition.py b/prometheus_client/openmetrics/exposition.py\r\nindex 6d5925e..6426346 100644\r\n--- a/prometheus_client/openmetrics/exposition.py\r\n+++ b/prometheus_client/openmetrics/exposition.py\r\n@@ -9,7 +9,7 @@ CONTENT_TYPE_LATEST = str('application/openmetrics-text; version=0.0.1; charset=\r\n\r\n\r\n def generate_latest(registry):\r\n-    '''Returns the metrics from the registry in latest text format as a string.'''\r\n+    '''Returns the metrics from the registry in latest text format as a value.'''\r\n     output = []\r\n     for metric in registry.collect():\r\n         try:\r\n@@ -34,16 +34,20 @@ def generate_latest(registry):\r\n                         ['{0}=\"{1}\"'.format(\r\n                             k, v.replace('\\\\', r'\\\\').replace('\\n', r'\\n').replace('\"', r'\\\"'))\r\n                             for k, v in sorted(s.exemplar.labels.items())]))\r\n+                    if type(s.exemplar.value) == int:\r\n+                        value = int(s.exemplar.value)\r\n+                    else:\r\n+                        value = floatToGoString(s.exemplar.value)\r\n                     if s.exemplar.timestamp is not None:\r\n                         exemplarstr = ' # {0} {1} {2}'.format(\r\n                             labels,\r\n-                            floatToGoString(s.exemplar.value),\r\n+                            value,\r\n                             s.exemplar.timestamp,\r\n                         )\r\n                     else:\r\n                         exemplarstr = ' # {0} {1}'.format(\r\n                             labels,\r\n-                            floatToGoString(s.exemplar.value),\r\n+                            value,\r\n                         )\r\n                 else:\r\n                     exemplarstr = ''\r\ndiff --git a/prometheus_client/parser.py b/prometheus_client/parser.py\r\nindex d3c7832..6ccb5fc 100644\r\n--- a/prometheus_client/parser.py\r\n+++ b/prometheus_client/parser.py\r\n@@ -123,7 +123,10 @@ def _parse_sample(text):\r\n         # We ignore the starting curly brace\r\n         label = text[label_start + 1:label_end]\r\n         # The value is after the label end (ignoring curly brace and space)\r\n-        value = float(_parse_value(text[label_end + 2:]))\r\n+        try:\r\n+            value = int(_parse_value(text[label_end + 2:]))\r\n+        except Exception as e:\r\n+            value = float(_parse_value(text[label_end + 2:]))\r\n         return Sample(name, _parse_labels(label), value)\r\n\r\n     # We don't have labels\r\n@@ -135,7 +138,10 @@ def _parse_sample(text):\r\n         name_end = text.index(separator)\r\n         name = text[:name_end]\r\n         # The value is after the name\r\n-        value = float(_parse_value(text[name_end:]))\r\n+        try:\r\n+            value = int(_parse_value(text[name_end:]))\r\n+        except Exception as e:\r\n+            value = float(_parse_value(text[name_end:]))\r\n         return Sample(name, {}, value)\r\n\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/464", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/464/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/464/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/464/events", "html_url": "https://github.com/prometheus/client_python/issues/464", "id": 490722988, "node_id": "MDU6SXNzdWU0OTA3MjI5ODg=", "number": 464, "title": "Expose timestamp via python client", "user": {"login": "salehdeh76", "id": 30825335, "node_id": "MDQ6VXNlcjMwODI1MzM1", "avatar_url": "https://avatars1.githubusercontent.com/u/30825335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salehdeh76", "html_url": "https://github.com/salehdeh76", "followers_url": "https://api.github.com/users/salehdeh76/followers", "following_url": "https://api.github.com/users/salehdeh76/following{/other_user}", "gists_url": "https://api.github.com/users/salehdeh76/gists{/gist_id}", "starred_url": "https://api.github.com/users/salehdeh76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salehdeh76/subscriptions", "organizations_url": "https://api.github.com/users/salehdeh76/orgs", "repos_url": "https://api.github.com/users/salehdeh76/repos", "events_url": "https://api.github.com/users/salehdeh76/events{/privacy}", "received_events_url": "https://api.github.com/users/salehdeh76/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-08T07:50:34Z", "updated_at": "2019-09-08T14:24:16Z", "closed_at": "2019-09-08T14:24:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "As you know, there is a place to put timestamp in [prometheus's exposition format.](https://prometheus.io/docs/instrumenting/exposition_formats/#text-format-details) \r\n\r\nIs there a method in python client, so we'll be able to expose timestamp in prometheus text format?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/461", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/461/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/461/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/461/events", "html_url": "https://github.com/prometheus/client_python/issues/461", "id": 490576501, "node_id": "MDU6SXNzdWU0OTA1NzY1MDE=", "number": 461, "title": "Difference in parser behaviour compared to prometheus/common/expfmt ", "user": {"login": "zegelin", "id": 19296634, "node_id": "MDQ6VXNlcjE5Mjk2NjM0", "avatar_url": "https://avatars3.githubusercontent.com/u/19296634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zegelin", "html_url": "https://github.com/zegelin", "followers_url": "https://api.github.com/users/zegelin/followers", "following_url": "https://api.github.com/users/zegelin/following{/other_user}", "gists_url": "https://api.github.com/users/zegelin/gists{/gist_id}", "starred_url": "https://api.github.com/users/zegelin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zegelin/subscriptions", "organizations_url": "https://api.github.com/users/zegelin/orgs", "repos_url": "https://api.github.com/users/zegelin/repos", "events_url": "https://api.github.com/users/zegelin/events{/privacy}", "received_events_url": "https://api.github.com/users/zegelin/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-09-07T01:35:52Z", "updated_at": "2019-10-29T23:22:32Z", "closed_at": "2019-10-29T23:22:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "The behaviour of the Python client's built-in text format parser differs to that of the parser found inside Prometheus itself.\r\n\r\nGiven the following (poorly formed, but apparently still valid) exposition output:\r\n\r\n```\r\ntest_metric_a {hello=\"world\"} 0 0\r\ntest_metric_b {hello=\"world\"} 0 0\r\ntest_metric_a {hello=\"universe\"} 0 0\r\ntest_metric_b {hello=\"universe\"} 0 0\r\n```\r\n\r\nThe Go expfmt `TextParser.TextToMetricFamilies(...)` function produces:\r\n\r\n```\r\n(map[string]*io_prometheus_client.MetricFamily) (len=2) {\r\n (string) (len=13) \"test_metric_a\": (*io_prometheus_client.MetricFamily)(0xc0000c4320)(name:\"test_metric_a\" type:UNTYPED metric:<label:<name:\"hello\" value:\"world\" > untyped:<value:0 > timestamp_ms:0 > metric:<label:<name:\"hello\" value:\"universe\" > untyped:<value:0 > timestamp_ms:0 > ),\r\n (string) (len=13) \"test_metric_b\": (*io_prometheus_client.MetricFamily)(0xc0000c4370)(name:\"test_metric_b\" type:UNTYPED metric:<label:<name:\"hello\" value:\"world\" > untyped:<value:0 > timestamp_ms:0 > metric:<label:<name:\"hello\" value:\"universe\" > untyped:<value:0 > timestamp_ms:0 > )\r\n}\r\n```\r\n\r\nwhereas the Python client's `parser.text_fd_to_metric_families(...)` function produces:\r\n\r\n```\r\n[\r\n    Metric(test_metric_a, , unknown, , [Sample(name='test_metric_a', labels={'hello': 'world'}, value=0.0, timestamp=None, exemplar=None)]),\r\n    Metric(test_metric_b, , unknown, , [Sample(name='test_metric_b', labels={'hello': 'world'}, value=0.0, timestamp=None, exemplar=None)]),\r\n    Metric(test_metric_a, , unknown, , [Sample(name='test_metric_a', labels={'hello': 'universe'}, value=0.0, timestamp=None, exemplar=None)]),\r\n    Metric(test_metric_b, , unknown, , [Sample(name='test_metric_b', labels={'hello': 'universe'}, value=0.0, timestamp=None, exemplar=None)])\r\n]\r\n```\r\n\r\nAs you can see the Go parser groups the samples into two untyped metric families with two samples each whereas the Python parser creates a new metric family for each sample.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/459", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/459/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/459/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/459/events", "html_url": "https://github.com/prometheus/client_python/issues/459", "id": 489023684, "node_id": "MDU6SXNzdWU0ODkwMjM2ODQ=", "number": 459, "title": "How to send and how to recieve?", "user": {"login": "herdonyan", "id": 37699868, "node_id": "MDQ6VXNlcjM3Njk5ODY4", "avatar_url": "https://avatars3.githubusercontent.com/u/37699868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/herdonyan", "html_url": "https://github.com/herdonyan", "followers_url": "https://api.github.com/users/herdonyan/followers", "following_url": "https://api.github.com/users/herdonyan/following{/other_user}", "gists_url": "https://api.github.com/users/herdonyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/herdonyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/herdonyan/subscriptions", "organizations_url": "https://api.github.com/users/herdonyan/orgs", "repos_url": "https://api.github.com/users/herdonyan/repos", "events_url": "https://api.github.com/users/herdonyan/events{/privacy}", "received_events_url": "https://api.github.com/users/herdonyan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-09-04T08:44:17Z", "updated_at": "2019-09-09T07:31:56Z", "closed_at": "2019-09-09T07:31:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Excuse me? I'm trying to write some codes and deploy it on my PC for an experiment. However, Readme.txt seems too complicated for me. I couldn't get useful information and start quickly. What I want is as following, \r\n(1)a table with all metrics,\r\n(2)an example source code to send indicated metrics to target,\r\n(3)an example source code to recieve metrics and print in a command line.\r\nCould it be structured with above 3 advices? What should I do to start my work with prometheus-client_python? Thanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/458", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/458/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/458/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/458/events", "html_url": "https://github.com/prometheus/client_python/issues/458", "id": 487863131, "node_id": "MDU6SXNzdWU0ODc4NjMxMzE=", "number": 458, "title": "Expose metrics to a different configurable path (rather the default /metrics )", "user": {"login": "salehdeh76", "id": 30825335, "node_id": "MDQ6VXNlcjMwODI1MzM1", "avatar_url": "https://avatars1.githubusercontent.com/u/30825335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/salehdeh76", "html_url": "https://github.com/salehdeh76", "followers_url": "https://api.github.com/users/salehdeh76/followers", "following_url": "https://api.github.com/users/salehdeh76/following{/other_user}", "gists_url": "https://api.github.com/users/salehdeh76/gists{/gist_id}", "starred_url": "https://api.github.com/users/salehdeh76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/salehdeh76/subscriptions", "organizations_url": "https://api.github.com/users/salehdeh76/orgs", "repos_url": "https://api.github.com/users/salehdeh76/repos", "events_url": "https://api.github.com/users/salehdeh76/events{/privacy}", "received_events_url": "https://api.github.com/users/salehdeh76/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-09-01T09:32:10Z", "updated_at": "2019-11-14T12:06:10Z", "closed_at": "2019-11-14T12:06:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to expose the metrics (the `start_http_server` method) to another path?\r\n\r\nFor example I want to use this path : http://192.168.56.102:9800/mycustommetrics\r\ninstead of the default http://192.168.56.102:9800/metrics", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/457", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/457/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/457/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/457/events", "html_url": "https://github.com/prometheus/client_python/issues/457", "id": 486469607, "node_id": "MDU6SXNzdWU0ODY0Njk2MDc=", "number": 457, "title": "python wheel", "user": {"login": "gjcarneiro", "id": 2197096, "node_id": "MDQ6VXNlcjIxOTcwOTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2197096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjcarneiro", "html_url": "https://github.com/gjcarneiro", "followers_url": "https://api.github.com/users/gjcarneiro/followers", "following_url": "https://api.github.com/users/gjcarneiro/following{/other_user}", "gists_url": "https://api.github.com/users/gjcarneiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjcarneiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjcarneiro/subscriptions", "organizations_url": "https://api.github.com/users/gjcarneiro/orgs", "repos_url": "https://api.github.com/users/gjcarneiro/repos", "events_url": "https://api.github.com/users/gjcarneiro/events{/privacy}", "received_events_url": "https://api.github.com/users/gjcarneiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2019-08-28T15:56:40Z", "updated_at": "2020-03-09T23:49:14Z", "closed_at": "2019-11-14T12:07:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Would it be possible, from now on, to also generate and upload Python wheels?  It will speed up installation of this package a lot...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/456", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/456/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/456/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/456/events", "html_url": "https://github.com/prometheus/client_python/issues/456", "id": 482592585, "node_id": "MDU6SXNzdWU0ODI1OTI1ODU=", "number": 456, "title": "[Question] Globally configuring namespace and subsystem", "user": {"login": "sidps", "id": 9342606, "node_id": "MDQ6VXNlcjkzNDI2MDY=", "avatar_url": "https://avatars2.githubusercontent.com/u/9342606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sidps", "html_url": "https://github.com/sidps", "followers_url": "https://api.github.com/users/sidps/followers", "following_url": "https://api.github.com/users/sidps/following{/other_user}", "gists_url": "https://api.github.com/users/sidps/gists{/gist_id}", "starred_url": "https://api.github.com/users/sidps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sidps/subscriptions", "organizations_url": "https://api.github.com/users/sidps/orgs", "repos_url": "https://api.github.com/users/sidps/repos", "events_url": "https://api.github.com/users/sidps/events{/privacy}", "received_events_url": "https://api.github.com/users/sidps/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-08-20T00:53:44Z", "updated_at": "2019-09-19T19:32:31Z", "closed_at": "2019-09-03T12:59:19Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is it possible to configure a global namespace and subsystem, instead of using these as arguments while creating a given metric? My current workaround is to pass these configs around all over the codebase.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/454", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/454/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/454/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/454/events", "html_url": "https://github.com/prometheus/client_python/issues/454", "id": 482270104, "node_id": "MDU6SXNzdWU0ODIyNzAxMDQ=", "number": 454, "title": "'Counter' object has no attribute '_value'", "user": {"login": "AlexPadron", "id": 5444494, "node_id": "MDQ6VXNlcjU0NDQ0OTQ=", "avatar_url": "https://avatars2.githubusercontent.com/u/5444494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AlexPadron", "html_url": "https://github.com/AlexPadron", "followers_url": "https://api.github.com/users/AlexPadron/followers", "following_url": "https://api.github.com/users/AlexPadron/following{/other_user}", "gists_url": "https://api.github.com/users/AlexPadron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AlexPadron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AlexPadron/subscriptions", "organizations_url": "https://api.github.com/users/AlexPadron/orgs", "repos_url": "https://api.github.com/users/AlexPadron/repos", "events_url": "https://api.github.com/users/AlexPadron/events{/privacy}", "received_events_url": "https://api.github.com/users/AlexPadron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-08-19T11:59:31Z", "updated_at": "2019-11-14T12:07:21Z", "closed_at": "2019-11-14T12:07:21Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi all, \r\n\r\nI'm running into an issue when creating an exception counter out of a standard counter without passing label names. Specifically, it does not provide an informative error if a user incorrectly passes labels when calling `count_exceptions`. Code to replicate:\r\n\r\n```\r\nfrom prometheus_client import Counter\r\n\r\n\r\nc = Counter('counter', documentation='A sample counter', labelnames=('label',))\r\n\r\nwith c.count_exceptions():\r\n    raise RuntimeError('panic!')\r\n```\r\n\r\nExpected behavior: `c.count_exceptions()` should raise an informative error message because the incorrect labels are passed.\r\n\r\nActual behavior: `AttributeError: 'Counter' object has no attribute '_value'` occurs when the exception is raised, because we are trying to increment an non observable metric.\r\n\r\nProposed fix: Check `self._is_observable()` in the `count_exceptions` method, and raise an error if the user is constructing an `ExceptionCounter` out of a non observable `Counter`.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/451", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/451/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/451/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/451/events", "html_url": "https://github.com/prometheus/client_python/issues/451", "id": 480003595, "node_id": "MDU6SXNzdWU0ODAwMDM1OTU=", "number": 451, "title": "How to transfer the CollectorRegistry in multiprocessing", "user": {"login": "ben741863140", "id": 27225638, "node_id": "MDQ6VXNlcjI3MjI1NjM4", "avatar_url": "https://avatars2.githubusercontent.com/u/27225638?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben741863140", "html_url": "https://github.com/ben741863140", "followers_url": "https://api.github.com/users/ben741863140/followers", "following_url": "https://api.github.com/users/ben741863140/following{/other_user}", "gists_url": "https://api.github.com/users/ben741863140/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben741863140/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben741863140/subscriptions", "organizations_url": "https://api.github.com/users/ben741863140/orgs", "repos_url": "https://api.github.com/users/ben741863140/repos", "events_url": "https://api.github.com/users/ben741863140/events{/privacy}", "received_events_url": "https://api.github.com/users/ben741863140/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-13T07:34:26Z", "updated_at": "2019-08-13T09:15:08Z", "closed_at": "2019-08-13T09:15:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "I want to transfer a CollectorRegistry which store lots of Gauge from my main process to its fork process with pipe or multiprocessing.queue. However, none of them can do their job. Could u tell me that how can I finish my program ? @brian-brazil ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/450", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/450/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/450/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/450/events", "html_url": "https://github.com/prometheus/client_python/issues/450", "id": 479636542, "node_id": "MDU6SXNzdWU0Nzk2MzY1NDI=", "number": 450, "title": "Facilitate sharing of collectors", "user": {"login": "AndreLouisCaron", "id": 135974, "node_id": "MDQ6VXNlcjEzNTk3NA==", "avatar_url": "https://avatars3.githubusercontent.com/u/135974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreLouisCaron", "html_url": "https://github.com/AndreLouisCaron", "followers_url": "https://api.github.com/users/AndreLouisCaron/followers", "following_url": "https://api.github.com/users/AndreLouisCaron/following{/other_user}", "gists_url": "https://api.github.com/users/AndreLouisCaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreLouisCaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreLouisCaron/subscriptions", "organizations_url": "https://api.github.com/users/AndreLouisCaron/orgs", "repos_url": "https://api.github.com/users/AndreLouisCaron/repos", "events_url": "https://api.github.com/users/AndreLouisCaron/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreLouisCaron/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-12T13:08:20Z", "updated_at": "2019-08-13T12:57:11Z", "closed_at": "2019-08-13T12:57:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi there!\r\n\r\nThanks for this library, it's been quite useful to me team and I :-)\r\n\r\nI have a use case where mutltiple [Pyramid](https://docs.pylonsproject.org/projects/pyramid/en/latest/) applications are hosted in the same process.  While trying to expose a histogram metric for HTTP request duration, I noticed that each Pyramid application tries to create the \"same\" `prometheus_client.Histogram` object while sharing a single `prometheus_client.CollectorRegistry` for the whole process.\r\n\r\nUnfortunately, this is not allowed.  I can easily reproduce the behavior:\r\n\r\n```python\r\n>>> import prometheus_client\r\n>>> r = prometheus_client.CollectorRegistry()\r\n>>>\r\n>>> h1 = prometheus_client.Histogram(\r\n...    'http_request_duration_seconds',\r\n...    'HTTP request duration in seconds',\r\n...    registry=r,\r\n... )\r\n>>> print(h1)\r\n<prometheus_client.metrics.Histogram object at 0x000001746C91A320>\r\n>>>\r\n>>> h2 = prometheus_client.Histogram(\r\n...     'http_request_duration_seconds',\r\n...     'HTTP request duration in seconds',\r\n...     registry=r,\r\n... )\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"\u2026\\lib\\site-packages\\prometheus_client\\metrics.py\", line 499, in __init__\r\n    labelvalues=labelvalues,\r\n  File \"\u2026\\lib\\site-packages\\prometheus_client\\metrics.py\", line 107, in __init__\r\n    registry.register(self)\r\n  File \"\u2026\\lib\\site-packages\\prometheus_client\\registry.py\", line 29, in register\r\n    duplicates))\r\nValueError: Duplicated timeseries in CollectorRegistry: {'http_request_duration_seconds_count', 'http_request_duration_seconds_created', 'http_request_duration_seconds_bucket', 'http_request_duration_seconds_sum'}\r\n```\r\n\r\nI understand why duplicate time series are not allowed -- clearly, that wouldn't make sense for Prometheus when collecting the metrics.\r\n\r\nI also understand that deploying multiple applications in the same process is not recommended in a microservices architecture.  However, this pattern is quite common in Python code bases and it's quite useful for us to keep this behavior during our transition away from a monolithic deployment to microservices.\r\n\r\nI currently work around this problem within something like this:\r\n\r\n```python\r\n>>> import prometheus_client\r\n>>>\r\n>>> def get_collector(t, n):\r\n>>>     collectors = set(r._collector_to_names.keys())\r\n>>>     for c in collectors:\r\n>>>         if c._type != t:\r\n>>>             continue\r\n>>>         if c._name != n:\r\n>>>             continue\r\n>>>         return c\r\n>>>     raise ValueError('collector not found')\r\n>>> \r\n>>> r = prometheus_client.CollectorRegistry()\r\n>>> \r\n>>> h1 = prometheus_client.Histogram(\r\n>>>     'http_request_duration_seconds',\r\n>>>     'HTTP request duration in seconds',\r\n>>>     registry=r,\r\n>>> )\r\n>>> print(h1)\r\n<prometheus_client.metrics.Histogram object at 0x000001C5363FAC88>\r\n>>>\r\n>>> h2 = get_collector(\r\n>>>     'histogram',\r\n>>>     'http_request_duration_seconds',\r\n>>> )\r\n>>> print(h2)\r\n<prometheus_client.metrics.Histogram object at 0x000001C5363FAC88>\r\n>>>\r\n>>> assert h1 is h2\r\n```\r\n\r\nIn short, using this pattern, we can \"create-or-resolve\" a given collector and everything works out just the way we wanted.\r\n\r\nHowever, I'm not super comfortable with this implementation because it means my app depends on implementation details of `prometheus_client`.  I hope we can work something out to get a public API for this use case.\r\n\r\nIt seems to me like this is only limited by an API design choice: applications instantiate the collector objects directly.  If they were using some kind of caching factory pattern like this, then we'd get the best of both worlds:\r\n\r\n```python\r\nh = registry.histogram(\r\n    'http_request_duration_seconds',\r\n    'HTTP request duration in seconds'\r\n)\r\n```\r\n\r\nWould you willing to accept a change to the library that adds such an API?  I'm willing to put some effort into a PR if you're open to it.\r\n\r\nThanks in advance :-)", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/449", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/449/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/449/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/449/events", "html_url": "https://github.com/prometheus/client_python/issues/449", "id": 479397618, "node_id": "MDU6SXNzdWU0NzkzOTc2MTg=", "number": 449, "title": "Using multi prometheus replica in K8s scraping from external end point using custom collector", "user": {"login": "atangger", "id": 22708039, "node_id": "MDQ6VXNlcjIyNzA4MDM5", "avatar_url": "https://avatars1.githubusercontent.com/u/22708039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atangger", "html_url": "https://github.com/atangger", "followers_url": "https://api.github.com/users/atangger/followers", "following_url": "https://api.github.com/users/atangger/following{/other_user}", "gists_url": "https://api.github.com/users/atangger/gists{/gist_id}", "starred_url": "https://api.github.com/users/atangger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atangger/subscriptions", "organizations_url": "https://api.github.com/users/atangger/orgs", "repos_url": "https://api.github.com/users/atangger/repos", "events_url": "https://api.github.com/users/atangger/events{/privacy}", "received_events_url": "https://api.github.com/users/atangger/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-08-11T18:34:36Z", "updated_at": "2019-08-12T23:30:01Z", "closed_at": "2019-08-11T20:56:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am trying to implement a metrics agent which allow reporting previous metrics data with timestamp.\r\nIt seems that I have to use CustomCollector.\r\nBut when I use the following code, it seems that I got two metrics with the same name and label. I have two Prometheus instance running in the K8s cluster and I can see that each time of scraping the CustomCollector is called two times.\r\n```\r\nfrom prometheus_client import start_http_server, Summary, Gauge\r\nfrom prometheus_client.core import GaugeMetricFamily, CounterMetricFamily, REGISTRY\r\nfrom prometheus_client.registry import CollectorRegistry\r\nimport random\r\nimport time\r\n\r\n\r\nclass CustomCollector(object):\r\n    def collect(self):\r\n        print(\"Start collector\")\r\n        global ga\r\n        c = GaugeMetricFamily('my_god_gauge132', 'Help text', labels=['foo'])\r\n        c.add_metric(['bar'], random.randint(0,100))\r\n        yield c\r\n# Decorate function with metric.\r\n@REQUEST_TIME.time()\r\ndef process_request(t):\r\n    \"\"\"A dummy function that takes some time.\"\"\"\r\n    time.sleep(t)\r\n\r\nif __name__ == '__main__':\r\n    # Start up the server to expose the metrics.\r\n    start_http_server(9400)\r\n    REGISTRY.register(CustomCollector())\r\n    # Generate some requests\r\n    while True:\r\n        process_request(random.random())\r\n```\r\n![Screen Shot 2019-08-11 at 11 19 57 AM](https://user-images.githubusercontent.com/22708039/62838001-2f054180-bc2b-11e9-8c82-c08404209f18.png)\r\n![Screen Shot 2019-08-11 at 11 20 03 AM](https://user-images.githubusercontent.com/22708039/62838002-30cf0500-bc2b-11e9-86f8-80133cdffa89.png)\r\n\r\nIt seems that the union of those two metrics have all of the data, but I am curious why this is happening.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/447", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/447/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/447/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/447/events", "html_url": "https://github.com/prometheus/client_python/issues/447", "id": 478457460, "node_id": "MDU6SXNzdWU0Nzg0NTc0NjA=", "number": 447, "title": "Singleton HTTP server", "user": {"login": "khssnv", "id": 833019, "node_id": "MDQ6VXNlcjgzMzAxOQ==", "avatar_url": "https://avatars1.githubusercontent.com/u/833019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/khssnv", "html_url": "https://github.com/khssnv", "followers_url": "https://api.github.com/users/khssnv/followers", "following_url": "https://api.github.com/users/khssnv/following{/other_user}", "gists_url": "https://api.github.com/users/khssnv/gists{/gist_id}", "starred_url": "https://api.github.com/users/khssnv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/khssnv/subscriptions", "organizations_url": "https://api.github.com/users/khssnv/orgs", "repos_url": "https://api.github.com/users/khssnv/repos", "events_url": "https://api.github.com/users/khssnv/events{/privacy}", "received_events_url": "https://api.github.com/users/khssnv/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-08-08T13:01:37Z", "updated_at": "2019-08-08T13:30:13Z", "closed_at": "2019-08-08T13:30:13Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi. I didn't find this implement, but it feels like a handy feature.\r\n\r\nWe have `start_http_server` [makes](https://github.com/prometheus/client_python/blob/a8f5c80f651ea570577c364203e0edbef67db727/prometheus_client/exposition.py#L193) new HTTP server instance on each call.\r\n\r\nI use `client_python` to collect application execution metrics. It fires metrics from decorated functions. It seems like:\r\n\r\n```python\r\nfrom prometheus_client import start_http_server, Gauge\r\n\r\nstart_http_server(3904)\r\n\r\ndef profiler(func):\r\n    metric = Gauge(func.__qualname__ + \"elapsed\", \"Time spent for a function call\")\r\n    def wrapper(*args, **kwargs):\r\n        metric = Gauge(func.__qualname__ + \"elapsed\", \"Time spent for a function call\")\r\n        t1 = time.time()\r\n        ret = func(*args, **kwargs)\r\n        t2 = time.time()\r\n        metric.set(dt)\r\n        return ret\r\n    return wrapper\r\n```\r\n\r\nAs you can see, it starts new HTTP server for each `import` and fails at second import because it use port the same.\r\n\r\nWhat could be handy is a singletone behavior like\r\n```python\r\nstart_http_server(port, addr='', registry=REGISTRY, use_existing=False)\r\n```\r\nwhere it skip new server creation if there is a server on `port` and `use_existing` flag is set.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/446", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/446/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/446/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/446/events", "html_url": "https://github.com/prometheus/client_python/issues/446", "id": 477995268, "node_id": "MDU6SXNzdWU0Nzc5OTUyNjg=", "number": 446, "title": "Missing gauge metrics for labels only used in subprocess", "user": {"login": "martinitus", "id": 7611856, "node_id": "MDQ6VXNlcjc2MTE4NTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/7611856?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinitus", "html_url": "https://github.com/martinitus", "followers_url": "https://api.github.com/users/martinitus/followers", "following_url": "https://api.github.com/users/martinitus/following{/other_user}", "gists_url": "https://api.github.com/users/martinitus/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinitus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinitus/subscriptions", "organizations_url": "https://api.github.com/users/martinitus/orgs", "repos_url": "https://api.github.com/users/martinitus/repos", "events_url": "https://api.github.com/users/martinitus/events{/privacy}", "received_events_url": "https://api.github.com/users/martinitus/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-08-07T15:23:01Z", "updated_at": "2019-08-09T12:24:41Z", "closed_at": "2019-08-09T12:24:40Z", "author_association": "NONE", "active_lock_reason": null, "body": "When using the multiprocess collector and gauges, the exposed metrics only list those gauges that  have labels set in the parent process. Output of test case:\r\n\r\n```\r\n# HELP some_gauge Multiprocess metric\r\n# TYPE some_gauge gauge\r\nsome_gauge{labelname=\"labelvalue\",pid=\"1493\"} 1.0\r\nsome_gauge{labelname=\"labelvalue\",pid=\"1503\"} 0.0\r\nsome_gauge{labelname=\"sub-process\",pid=\"1503\"} 2.0\r\n# HELP some_gauge Some Description\r\n# TYPE some_gauge gauge\r\nsome_gauge{labelname=\"labelvalue\"} 1.0\r\n```\r\nI would expect at least the following additional line:\r\n```\r\nsome_gauge{labelname=\"sub-process\"} 2.0\r\n```\r\nTest case for reproducing (prometheus-client 0.7.1, Python 3.7.3)\r\n```\r\n# NOTE: Do not import any prometheus modules here, as that may initialize some of the static variables while\r\n#       the prometheus_multiproc_dir environment variable is not yet set.\r\nimport multiprocessing\r\nimport os\r\nimport shutil\r\nimport time\r\nfrom multiprocessing import current_process\r\nfrom unittest import TestCase\r\n\r\n\r\nclass TestMultiProcessPrometheus(TestCase):\r\n\r\n    @classmethod\r\n    def setUpClass(cls) -> None:\r\n        os.environ.update({\"prometheus_multiproc_dir\": \"/tmp/prom\"})\r\n\r\n    def setUp(self) -> None:\r\n        if os.path.exists(\"/tmp/prom\"):\r\n            shutil.rmtree(\"/tmp/prom\")\r\n        os.makedirs(\"/tmp/prom\")\r\n\r\n    def test_multiprocessing_gauge(self):\r\n        import prometheus_client\r\n        from prometheus_client.multiprocess import MultiProcessCollector\r\n        from prometheus_client.registry import CollectorRegistry\r\n        from prometheus_client import generate_latest\r\n\r\n        gauge = prometheus_client.Gauge(\"some_gauge\", \"Some Description\", labelnames=[\"labelname\"], registry=None)\r\n        registry = CollectorRegistry()\r\n        MultiProcessCollector(registry=registry)\r\n        registry.register(gauge)\r\n\r\n        gauge.labels(\"labelvalue\").set(1)\r\n\r\n        def subprocess():\r\n            gauge.labels(\"sub-process\").set(2)\r\n\r\n        process = multiprocessing.Process(target=subprocess)\r\n        process.start()\r\n        process.join()\r\n\r\n        text = generate_latest(registry).decode('utf-8')\r\n        print(text)\r\n        self.assertIn('some_gauge{labelname=\"labelvalue\"} 2.0', text.split('\\n'))\r\n``` \r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/444", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/444/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/444/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/444/events", "html_url": "https://github.com/prometheus/client_python/issues/444", "id": 476843340, "node_id": "MDU6SXNzdWU0NzY4NDMzNDA=", "number": 444, "title": "`CollectorRegistry(auto_describe=True)` problem - registry with auto_describe does not proccess several metrics properly.", "user": {"login": "amadeuszkryze", "id": 37712172, "node_id": "MDQ6VXNlcjM3NzEyMTcy", "avatar_url": "https://avatars0.githubusercontent.com/u/37712172?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amadeuszkryze", "html_url": "https://github.com/amadeuszkryze", "followers_url": "https://api.github.com/users/amadeuszkryze/followers", "following_url": "https://api.github.com/users/amadeuszkryze/following{/other_user}", "gists_url": "https://api.github.com/users/amadeuszkryze/gists{/gist_id}", "starred_url": "https://api.github.com/users/amadeuszkryze/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amadeuszkryze/subscriptions", "organizations_url": "https://api.github.com/users/amadeuszkryze/orgs", "repos_url": "https://api.github.com/users/amadeuszkryze/repos", "events_url": "https://api.github.com/users/amadeuszkryze/events{/privacy}", "received_events_url": "https://api.github.com/users/amadeuszkryze/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-08-05T12:54:29Z", "updated_at": "2019-08-07T14:27:36Z", "closed_at": "2019-08-07T14:27:36Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi, I'm working on modified version of [django-prometheus](https://github.com/korfuri/django-prometheus) that is able to send metrics to pushgateway. I've encountered very strange problem - once registry is initialized with `auto_describe` it does not store metrics defined like:\r\n\r\n```\r\nrequests_by_view_transport_method = Counter(\r\n    'django_http_requests_total_by_view_transport_method',\r\n    'Count of requests by view, transport, method.',\r\n    ['view', 'transport', 'method'],\r\n)\r\n```\r\nin fact once metrics also are served like:\r\n```\r\nfrom prometheus_client import make_wsgi_app\r\nfrom wsgiref.simple_server import make_server\r\n\r\napp = make_wsgi_app()\r\nhttpd = make_server('', 8000, app)\r\nhttpd.serve_forever()\r\n```\r\nthose metrics are present, but once doing\r\n```\r\ndef PushMetrics(registry, name=\"django\"):\r\n    push_to_gateway(\r\n        f\"{settings.PUSHGATEWAY_HOST}\",\r\n        job=name,\r\n        grouping_key={\r\n            'container': socket.gethostname(),\r\n            'service': settings.SERVICE,\r\n        },\r\n        registry=registry,\r\n    )\r\n\r\nPushMetrics(prometheus_client.REGISTRY, f\"django-info\")\r\n```\r\nthey are not visible in `pushgateway:port/metrics`", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/440", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/440/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/440/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/440/events", "html_url": "https://github.com/prometheus/client_python/issues/440", "id": 467925358, "node_id": "MDU6SXNzdWU0Njc5MjUzNTg=", "number": 440, "title": "How to add custom alert massages to 9093 alert manager?", "user": {"login": "xx-zhang", "id": 47806549, "node_id": "MDQ6VXNlcjQ3ODA2NTQ5", "avatar_url": "https://avatars3.githubusercontent.com/u/47806549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xx-zhang", "html_url": "https://github.com/xx-zhang", "followers_url": "https://api.github.com/users/xx-zhang/followers", "following_url": "https://api.github.com/users/xx-zhang/following{/other_user}", "gists_url": "https://api.github.com/users/xx-zhang/gists{/gist_id}", "starred_url": "https://api.github.com/users/xx-zhang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xx-zhang/subscriptions", "organizations_url": "https://api.github.com/users/xx-zhang/orgs", "repos_url": "https://api.github.com/users/xx-zhang/repos", "events_url": "https://api.github.com/users/xx-zhang/events{/privacy}", "received_events_url": "https://api.github.com/users/xx-zhang/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-15T03:24:09Z", "updated_at": "2019-07-15T09:39:32Z", "closed_at": "2019-07-15T09:39:32Z", "author_association": "NONE", "active_lock_reason": null, "body": "How to add custom alert massages to 9093 alert manager? \\\r\n\r\n> what i want to do is that i want to add msg to alert massages about some process or port info update, and i'not good at edit the alert rule-file. so i want to know how can i do to add alert msg by client_python", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/438", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/438/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/438/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/438/events", "html_url": "https://github.com/prometheus/client_python/issues/438", "id": 466144730, "node_id": "MDU6SXNzdWU0NjYxNDQ3MzA=", "number": 438, "title": "Unwanted _created variables", "user": {"login": "Wilm0r", "id": 6828117, "node_id": "MDQ6VXNlcjY4MjgxMTc=", "avatar_url": "https://avatars2.githubusercontent.com/u/6828117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Wilm0r", "html_url": "https://github.com/Wilm0r", "followers_url": "https://api.github.com/users/Wilm0r/followers", "following_url": "https://api.github.com/users/Wilm0r/following{/other_user}", "gists_url": "https://api.github.com/users/Wilm0r/gists{/gist_id}", "starred_url": "https://api.github.com/users/Wilm0r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Wilm0r/subscriptions", "organizations_url": "https://api.github.com/users/Wilm0r/orgs", "repos_url": "https://api.github.com/users/Wilm0r/repos", "events_url": "https://api.github.com/users/Wilm0r/events{/privacy}", "received_events_url": "https://api.github.com/users/Wilm0r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-07-10T07:26:21Z", "updated_at": "2019-12-11T09:50:49Z", "closed_at": "2019-11-14T12:08:51Z", "author_association": "NONE", "active_lock_reason": null, "body": "I've recently upgraded to the python-prometheus-client that comes with Debian Buster and just noticed a lot of variables I don't use in a small Python-based exporter I wrote, mostly the _created suffix ones drawing my attention. This seems to be a timestamp of when a variable (and in case of mapped/label variables, every individual label under it) got created.\r\n\r\nLooking at the source, there seems to be no proper way to disable this near-2\u00d7 explosion of data that I have no need for at all?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/437", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/437/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/437/events", "html_url": "https://github.com/prometheus/client_python/issues/437", "id": 465991229, "node_id": "MDU6SXNzdWU0NjU5OTEyMjk=", "number": 437, "title": "File write error that seems to be unique to both docker and my system", "user": {"login": "jeffreyt", "id": 4825567, "node_id": "MDQ6VXNlcjQ4MjU1Njc=", "avatar_url": "https://avatars1.githubusercontent.com/u/4825567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeffreyt", "html_url": "https://github.com/jeffreyt", "followers_url": "https://api.github.com/users/jeffreyt/followers", "following_url": "https://api.github.com/users/jeffreyt/following{/other_user}", "gists_url": "https://api.github.com/users/jeffreyt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeffreyt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeffreyt/subscriptions", "organizations_url": "https://api.github.com/users/jeffreyt/orgs", "repos_url": "https://api.github.com/users/jeffreyt/repos", "events_url": "https://api.github.com/users/jeffreyt/events{/privacy}", "received_events_url": "https://api.github.com/users/jeffreyt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-07-09T21:23:06Z", "updated_at": "2019-11-14T12:09:15Z", "closed_at": "2019-11-14T12:09:15Z", "author_association": "NONE", "active_lock_reason": null, "body": "Seeing the below error trace from trying to set up a gauge in my main.py.  Weird thing is I'm literally only seeing it on my system in a docker container.  Not seeing on other dev systems and on cloud cluster.  Also very strange, when it seems to work on other machines I don't even see the `tmp` directory being used at all.   \r\n\r\nSorry I hope this is not too obscure as it has to do with docker but any help would be appreciated.\r\n```\r\nTraceback (most recent call last):\r\n  File \"./main.py\", line 28, in <module>\r\n    \"My Gague\",\r\n  File \"/usr/local/lib/python3.7/site-packages/prometheus_client/metrics.py\", line 324, in __init__\r\n    labelvalues=labelvalues,\r\n  File \"/usr/local/lib/python3.7/site-packages/prometheus_client/metrics.py\", line 102, in __init__\r\n    self._metric_init()\r\n  File \"/usr/local/lib/python3.7/site-packages/prometheus_client/metrics.py\", line 331, in _metric_init\r\n    multiprocess_mode=self._multiprocess_mode\r\n  File \"/usr/local/lib/python3.7/site-packages/prometheus_client/values.py\", line 49, in __init__\r\n    self.__reset()\r\n  File \"/usr/local/lib/python3.7/site-packages/prometheus_client/values.py\", line 63, in __reset\r\n    files[file_prefix] = MmapedDict(filename)\r\n  File \"/usr/local/lib/python3.7/site-packages/prometheus_client/mmap_dict.py\", line 61, in __init__\r\n    self._f = open(filename, 'rb' if read_mode else 'a+b')\r\nFileNotFoundError: [Errno 2] No such file or directory: 'tmp/prometheus_cache/gauge_all_13.db'\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/436", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/436/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/436/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/436/events", "html_url": "https://github.com/prometheus/client_python/issues/436", "id": 465689795, "node_id": "MDU6SXNzdWU0NjU2ODk3OTU=", "number": 436, "title": "Storing custom time series data in prometheus", "user": {"login": "danny311296", "id": 15380498, "node_id": "MDQ6VXNlcjE1MzgwNDk4", "avatar_url": "https://avatars0.githubusercontent.com/u/15380498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danny311296", "html_url": "https://github.com/danny311296", "followers_url": "https://api.github.com/users/danny311296/followers", "following_url": "https://api.github.com/users/danny311296/following{/other_user}", "gists_url": "https://api.github.com/users/danny311296/gists{/gist_id}", "starred_url": "https://api.github.com/users/danny311296/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danny311296/subscriptions", "organizations_url": "https://api.github.com/users/danny311296/orgs", "repos_url": "https://api.github.com/users/danny311296/repos", "events_url": "https://api.github.com/users/danny311296/events{/privacy}", "received_events_url": "https://api.github.com/users/danny311296/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-07-09T10:03:35Z", "updated_at": "2019-07-09T10:20:22Z", "closed_at": "2019-07-09T10:20:22Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have a process constantly generating time series data like [[1562665673.783, '0'], [1562665674.783, '0'], [1562665675.783, '0'], [1562665676.783, '0'], [1562665677.783, '0'], [1562665678.783, '0'], [1562665679.783, '0'], [1562665680.783, '0'], [1562665681.783, '0'], [1562665682.783, '0'], [1562665683.783, '0']], ...\r\n\r\nConsidering the basic nature of this task, is there any direct way of doing this without using custom collectors, etc ?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/435", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/435/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/435/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/435/events", "html_url": "https://github.com/prometheus/client_python/issues/435", "id": 464720613, "node_id": "MDU6SXNzdWU0NjQ3MjA2MTM=", "number": 435, "title": "How to track in progess request processed less then 1s?", "user": {"login": "ghosthamlet", "id": 758325, "node_id": "MDQ6VXNlcjc1ODMyNQ==", "avatar_url": "https://avatars2.githubusercontent.com/u/758325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ghosthamlet", "html_url": "https://github.com/ghosthamlet", "followers_url": "https://api.github.com/users/ghosthamlet/followers", "following_url": "https://api.github.com/users/ghosthamlet/following{/other_user}", "gists_url": "https://api.github.com/users/ghosthamlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ghosthamlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ghosthamlet/subscriptions", "organizations_url": "https://api.github.com/users/ghosthamlet/orgs", "repos_url": "https://api.github.com/users/ghosthamlet/repos", "events_url": "https://api.github.com/users/ghosthamlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ghosthamlet/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-05T17:17:50Z", "updated_at": "2019-07-06T03:27:21Z", "closed_at": "2019-07-05T17:23:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have two problem with prometheus  guage\uff0c first: I think the Guage track_inprogress just can track request taken more then 1s to run\uff0cthe fast request Guage.inc will always be reduced by Guage.dec quickly\uff0cno chance stay in memory for prometheus scrape. \r\n\r\nSecond: how to count the current db querys? If after one http request\uff0ccount is 10\uff0cand no new request come in\uff0cthen db query will be 10 forever\uff0cif no new request\uff0cdb query shoud be 0\uff0cas no new request\uff0cpython can not run guage.set/dec\uff0cso can prometheus or this library don't use prev old value and default to 0 if no new update to this metric? I think these two problem didnot exists in statsd/graphite\uff0cdon't know why prometheus so different?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/433", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/433/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/433/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/433/events", "html_url": "https://github.com/prometheus/client_python/issues/433", "id": 462740471, "node_id": "MDU6SXNzdWU0NjI3NDA0NzE=", "number": 433, "title": "Default metrics (cpu, ram etc...) with MultiProcessCollector ?", "user": {"login": "noam1610", "id": 8570784, "node_id": "MDQ6VXNlcjg1NzA3ODQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/8570784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noam1610", "html_url": "https://github.com/noam1610", "followers_url": "https://api.github.com/users/noam1610/followers", "following_url": "https://api.github.com/users/noam1610/following{/other_user}", "gists_url": "https://api.github.com/users/noam1610/gists{/gist_id}", "starred_url": "https://api.github.com/users/noam1610/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noam1610/subscriptions", "organizations_url": "https://api.github.com/users/noam1610/orgs", "repos_url": "https://api.github.com/users/noam1610/repos", "events_url": "https://api.github.com/users/noam1610/events{/privacy}", "received_events_url": "https://api.github.com/users/noam1610/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-07-01T14:17:08Z", "updated_at": "2019-11-14T12:09:44Z", "closed_at": "2019-11-14T12:09:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhen using the MultiProcessCollector with gunicorn, we loose all the default metrics like cpu, ram etc ...\r\n\r\nIs there a way to have these metrics even with MultiProcessCollector  ?\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/432", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/432/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/432/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/432/events", "html_url": "https://github.com/prometheus/client_python/issues/432", "id": 462586058, "node_id": "MDU6SXNzdWU0NjI1ODYwNTg=", "number": 432, "title": "Prometheus counters disappears !", "user": {"login": "h4ckroot", "id": 408050, "node_id": "MDQ6VXNlcjQwODA1MA==", "avatar_url": "https://avatars3.githubusercontent.com/u/408050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h4ckroot", "html_url": "https://github.com/h4ckroot", "followers_url": "https://api.github.com/users/h4ckroot/followers", "following_url": "https://api.github.com/users/h4ckroot/following{/other_user}", "gists_url": "https://api.github.com/users/h4ckroot/gists{/gist_id}", "starred_url": "https://api.github.com/users/h4ckroot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h4ckroot/subscriptions", "organizations_url": "https://api.github.com/users/h4ckroot/orgs", "repos_url": "https://api.github.com/users/h4ckroot/repos", "events_url": "https://api.github.com/users/h4ckroot/events{/privacy}", "received_events_url": "https://api.github.com/users/h4ckroot/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-07-01T08:38:33Z", "updated_at": "2019-07-01T10:59:13Z", "closed_at": "2019-07-01T08:48:03Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello,\r\nI have a small python service, which I am using for capturing some events from another system and publish these events as Prometheus metrics. The service is simple !. It uses flask for exposing APIs for external systems, and based on hits on the API, it will increase the count of the corresponding prometheus counter. I am also using uwsgi, along with Nginx. The service looks like the below code. My problem is, I can fetch the metrics from Prometheus easily, but after a while (hours), the counters seem to disappear, and when I curl the metrics endpoint, I can see only the description of the metric, and no values at all!\r\n\r\nfrom flask import Flask, Response, Request, request\r\nimport prometheus_client\r\nfrom prometheus_client import start_http_server, Counter, Summary\r\n\r\nCONTENT_TYPE_LATEST = str('text/plain; version=0.0.4; charset=utf-8')\r\n\r\nSERVICE_RESPONSE_CODE_2xx = Counter('service_response_code_2xx_total',\r\n        'service response code 2xx triggered.',\r\n        labelnames=['service', 'code'])\r\n\r\napp = Flask(__name__)\r\n@app.route('/service/response-code/2xx', methods=['POST'])\r\ndef service_response_code_2xx():\r\n    code = request.json['code']\r\n    service = request.json['service']\r\n    service_RESPONSE_CODE_2xx.labels(service,code).inc()\r\n    LOG_TOTAL_REQUESTS.labels(service).inc()\r\n    return 'OK', 200\r\n\r\n@app.route('/metrics')\r\ndef metrics():\r\n    return Response(prometheus_client.generate_latest(), mimetype=CONTENT_TYPE_LATEST)\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/431", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/431/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/431/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/431/events", "html_url": "https://github.com/prometheus/client_python/issues/431", "id": 461469071, "node_id": "MDU6SXNzdWU0NjE0NjkwNzE=", "number": 431, "title": "Multiprocessing with multithreading", "user": {"login": "ochedru", "id": 2545624, "node_id": "MDQ6VXNlcjI1NDU2MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2545624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ochedru", "html_url": "https://github.com/ochedru", "followers_url": "https://api.github.com/users/ochedru/followers", "following_url": "https://api.github.com/users/ochedru/following{/other_user}", "gists_url": "https://api.github.com/users/ochedru/gists{/gist_id}", "starred_url": "https://api.github.com/users/ochedru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ochedru/subscriptions", "organizations_url": "https://api.github.com/users/ochedru/orgs", "repos_url": "https://api.github.com/users/ochedru/repos", "events_url": "https://api.github.com/users/ochedru/events{/privacy}", "received_events_url": "https://api.github.com/users/ochedru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-06-27T11:15:09Z", "updated_at": "2019-08-08T10:51:56Z", "closed_at": "2019-08-08T10:51:56Z", "author_association": "NONE", "active_lock_reason": null, "body": "Our main process is multithreaded and forks child processes. I acknowledge this can be a recipe for disaster when `threading.Lock` instances are acquired all over the place.\r\nNo surprise, I encountered this exact issue with Prometheus metrics with multiprocessing mode enabled:\r\n```\r\nCurrent thread 0x00007fd4ec3ba700 (most recent call first):\r\n  File \"/usr/lib/python3.7/site-packages/prometheus_client/values.py\", line 86 in set\r\n  File \"/usr/lib/python3.7/site-packages/prometheus_client/metrics.py\", line 344 in set\r\n```\r\nThe Prometheus gauge is created in the main process. It owns a `threading.Lock` instance which obviously can deadlock after fork. There is a nice comment about it:\r\n```\r\ndef MultiProcessValue(_pidFunc=os.getpid):\r\n    files = {}\r\n    values = []\r\n    pid = {'value': _pidFunc()}\r\n    # Use a single global lock when in multi-processing mode\r\n    # as we presume this means there is no threading going on.\r\n    # This avoids the need to also have mutexes in __MmapDict.\r\n    lock = Lock()\r\n```\r\nSo maybe the documentation should include \"no multithreading\" as a limitation for the multiprocessing mode. Anyway, I am trying to find a workaround:\r\n- Create new metrics with the same name in the child process just after fork. Will this work with multiprocessing mode enabled?\r\n- Could the Prometheus client code be changed to use a `multiprocessing.Lock` instead of a `threading.Lock`?\r\n\r\nThank you for reading!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/429", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/429/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/429/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/429/events", "html_url": "https://github.com/prometheus/client_python/issues/429", "id": 457059181, "node_id": "MDU6SXNzdWU0NTcwNTkxODE=", "number": 429, "title": "python_gc_duration_seconds gone between 0.4 and 0.7", "user": {"login": "gjcarneiro", "id": 2197096, "node_id": "MDQ6VXNlcjIxOTcwOTY=", "avatar_url": "https://avatars2.githubusercontent.com/u/2197096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gjcarneiro", "html_url": "https://github.com/gjcarneiro", "followers_url": "https://api.github.com/users/gjcarneiro/followers", "following_url": "https://api.github.com/users/gjcarneiro/following{/other_user}", "gists_url": "https://api.github.com/users/gjcarneiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/gjcarneiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gjcarneiro/subscriptions", "organizations_url": "https://api.github.com/users/gjcarneiro/orgs", "repos_url": "https://api.github.com/users/gjcarneiro/repos", "events_url": "https://api.github.com/users/gjcarneiro/events{/privacy}", "received_events_url": "https://api.github.com/users/gjcarneiro/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-06-17T17:36:38Z", "updated_at": "2019-06-17T18:29:10Z", "closed_at": "2019-06-17T18:29:10Z", "author_association": "NONE", "active_lock_reason": null, "body": "I have always found the `python_gc_duration_seconds` Histogram extremely useful to track down latency problems in Python caused by the GC.  But this metric seems to have disappeared when I upgraded client_prometheus from 0.4 to 0.7.  Any chance to get it back?  Pretty please?", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/426", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/426/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/426/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/426/events", "html_url": "https://github.com/prometheus/client_python/issues/426", "id": 455696622, "node_id": "MDU6SXNzdWU0NTU2OTY2MjI=", "number": 426, "title": "Make _INITIAL_MMAP_SIZE configurable and/or part of public API", "user": {"login": "xavfernandez", "id": 1089744, "node_id": "MDQ6VXNlcjEwODk3NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1089744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xavfernandez", "html_url": "https://github.com/xavfernandez", "followers_url": "https://api.github.com/users/xavfernandez/followers", "following_url": "https://api.github.com/users/xavfernandez/following{/other_user}", "gists_url": "https://api.github.com/users/xavfernandez/gists{/gist_id}", "starred_url": "https://api.github.com/users/xavfernandez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xavfernandez/subscriptions", "organizations_url": "https://api.github.com/users/xavfernandez/orgs", "repos_url": "https://api.github.com/users/xavfernandez/repos", "events_url": "https://api.github.com/users/xavfernandez/events{/privacy}", "received_events_url": "https://api.github.com/users/xavfernandez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-06-13T11:52:41Z", "updated_at": "2019-06-13T13:07:43Z", "closed_at": "2019-06-13T13:07:43Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "We tend to create a lot of processes leading to lot of metrics files lying around (around 30k pids used in a week).\r\nWith each file taking initially 1MB, this leads to 30GB of used space, mainly containing zeroes.\r\n\r\nAn easy fix was to monkey-patch `prometheus_client.core._INITIAL_MMAP_SIZE` and set it to 1kB instead.\r\n\r\nIt works perfectly but apparently the import moved and is now `prometheus_client.mmap_dict._INITIAL_MMAP_SIZE`.\r\nWe'll update it (and add an assert to check for its next move ^^) but it would be cleaner if this was officially configurable.\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/425", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/425/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/425/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/425/events", "html_url": "https://github.com/prometheus/client_python/issues/425", "id": 455687670, "node_id": "MDU6SXNzdWU0NTU2ODc2NzA=", "number": 425, "title": "MultiProcessCollector.collect() crashing on missing files", "user": {"login": "xavfernandez", "id": 1089744, "node_id": "MDQ6VXNlcjEwODk3NDQ=", "avatar_url": "https://avatars0.githubusercontent.com/u/1089744?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xavfernandez", "html_url": "https://github.com/xavfernandez", "followers_url": "https://api.github.com/users/xavfernandez/followers", "following_url": "https://api.github.com/users/xavfernandez/following{/other_user}", "gists_url": "https://api.github.com/users/xavfernandez/gists{/gist_id}", "starred_url": "https://api.github.com/users/xavfernandez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xavfernandez/subscriptions", "organizations_url": "https://api.github.com/users/xavfernandez/orgs", "repos_url": "https://api.github.com/users/xavfernandez/repos", "events_url": "https://api.github.com/users/xavfernandez/events{/privacy}", "received_events_url": "https://api.github.com/users/xavfernandez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-06-13T11:31:13Z", "updated_at": "2019-06-18T11:46:40Z", "closed_at": "2019-06-18T11:46:40Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hello,\r\n\r\nWhen you've used a lot of pids and have a lot of metrics files lying around, there is a high probability that `mark_process_dead` \r\nhttps://github.com/prometheus/client_python/blob/8a4f2deec5ea90a65465171dddf7c576e2e23188/prometheus_client/multiprocess.py#L140-L147\r\n will be called between the `glob.glob` call and the `self.merge` one:\r\nhttps://github.com/prometheus/client_python/blob/8a4f2deec5ea90a65465171dddf7c576e2e23188/prometheus_client/multiprocess.py#L136-L137\r\n\r\nleading to:\r\n\r\n```\r\n$ prometheus_multiproc_dir=/tmp/prometheus_metrics python\r\nPython 3.7.3 (default, May  8 2019, 05:31:59)\r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from prometheus_client import multiprocess\r\n>>> from prometheus_client import generate_latest, CollectorRegistry\r\n>>> registry = CollectorRegistry()\r\n>>> multiprocess.MultiProcessCollector(registry)\r\n<prometheus_client.multiprocess.MultiProcessCollector object at 0x7ffb0b1efa58>\r\n>>> data = generate_latest(registry)\r\nTraceback (most recent call last):\r\n File \"<stdin>\", line 1, in <module>\r\n File \"/home/grocker/app.venv/lib/python3.7/site-packages/prometheus_client/exposition.py\", line 89, in generate_latest\r\n   for metric in registry.collect():\r\n File \"/home/grocker/app.venv/lib/python3.7/site-packages/prometheus_client/registry.py\", line 75, in collect\r\n   for metric in collector.collect():\r\n File \"/home/grocker/app.venv/lib/python3.7/site-packages/prometheus_client/multiprocess.py\", line 30, in collect\r\n   return self.merge(files, accumulate=True)\r\n File \"/home/grocker/app.venv/lib/python3.7/site-packages/prometheus_client/multiprocess.py\", line 43, in merge\r\n   d = MmapedDict(f, read_mode=True)\r\n File \"/home/grocker/app.venv/lib/python3.7/site-packages/prometheus_client/mmap_dict.py\", line 39, in __init__\r\n   self._f = open(filename, 'rb' if read_mode else 'a+b')\r\nFileNotFoundError: [Errno 2] No such file or directory: '/tmp/prometheus_metrics/gauge_livesum_37367.db'\r\n```\r\nAn easy fix could be #424.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/423", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/423/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/423/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/423/events", "html_url": "https://github.com/prometheus/client_python/issues/423", "id": 454175634, "node_id": "MDU6SXNzdWU0NTQxNzU2MzQ=", "number": 423, "title": "restricted_registry() error", "user": {"login": "fetidbell", "id": 38924863, "node_id": "MDQ6VXNlcjM4OTI0ODYz", "avatar_url": "https://avatars1.githubusercontent.com/u/38924863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fetidbell", "html_url": "https://github.com/fetidbell", "followers_url": "https://api.github.com/users/fetidbell/followers", "following_url": "https://api.github.com/users/fetidbell/following{/other_user}", "gists_url": "https://api.github.com/users/fetidbell/gists{/gist_id}", "starred_url": "https://api.github.com/users/fetidbell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fetidbell/subscriptions", "organizations_url": "https://api.github.com/users/fetidbell/orgs", "repos_url": "https://api.github.com/users/fetidbell/repos", "events_url": "https://api.github.com/users/fetidbell/events{/privacy}", "received_events_url": "https://api.github.com/users/fetidbell/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-06-10T13:38:21Z", "updated_at": "2019-06-18T07:11:28Z", "closed_at": "2019-06-18T07:11:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "``` Python\r\nimport prometheus_client\r\n\r\ndef queue_current_depth():\r\n    ibm_queue_depth_total = prometheus_client.Gauge(\r\n                                 'ibm_queue_depth_total', \r\n                                 'Current queue depth', \r\n                                 ['inst']\r\n    )\r\n    METRICS = ['ibm_queue_depth_total']\r\n    REGISTRY = prometheus_client.REGISTRY\r\n\r\n    # fill the metrics\r\n    queues = get_queues()\r\n    for queue_name in queues:\r\n        current_depth  = get_queue_depth(queue_name ) #returns int\r\n        ibm_queue_depth_total.labels(inst=queue_name).set(current_depth)\r\n\r\n    rr = REGISTRY.restricted_registry(METRICS)\r\n```\r\n\r\n> File \"D:\\Projects\\uwsgi-flask\\ibm_mq_methods\\queue_info.py\", line 93, in queue_current_depth\r\n>     rr = REGISTRY.restricted_registry(METRICS)\r\n>   File \"D:\\Python\\lib\\site-packages\\prometheus_client\\registry.py\", line 96, in restricted_registry\r\n>     for metric in collector.collect():\r\n>   File \"D:\\Python\\lib\\site-packages\\prometheus_client\\metrics.py\", line 68, in collect\r\n>     for suffix, labels, value in self._samples():\r\n>   File \"D:\\Python\\lib\\site-packages\\prometheus_client\\metrics.py\", line 182, in _multi_samples\r\n>     for suffix, sample_labels, value in metric._samples():\r\n>   File \"D:\\Python\\lib\\site-packages\\prometheus_client\\metrics.py\", line 175, in _samples\r\n>     return self._child_samples()\r\n>   File \"D:\\Python\\lib\\site-packages\\prometheus_client\\metrics.py\", line 375, in _child_samples\r\n>     return (('', {}, self._value.get()),)\r\n> AttributeError: 'tuple' object has no attribute 'get'\r\n\r\n\r\nHi, guys!\r\nI get this error sometimes, honestly, i cant imagine why it's happen. This script, actually, fill one metric with ~430 labels, and he can work without any kind of error for more then a week. But then, out of a clear sky, an error appears.\r\n\r\nIn normal conditions, _value object is always MutexValue class object, why it can turn into tuple, or why this tuple may appear?\r\n\r\nThanks for your time and help!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/416", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/416/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/416/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/416/events", "html_url": "https://github.com/prometheus/client_python/issues/416", "id": 449780845, "node_id": "MDU6SXNzdWU0NDk3ODA4NDU=", "number": 416, "title": "Enum: custom label for state", "user": {"login": "jmsantorum", "id": 7532198, "node_id": "MDQ6VXNlcjc1MzIxOTg=", "avatar_url": "https://avatars1.githubusercontent.com/u/7532198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmsantorum", "html_url": "https://github.com/jmsantorum", "followers_url": "https://api.github.com/users/jmsantorum/followers", "following_url": "https://api.github.com/users/jmsantorum/following{/other_user}", "gists_url": "https://api.github.com/users/jmsantorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmsantorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmsantorum/subscriptions", "organizations_url": "https://api.github.com/users/jmsantorum/orgs", "repos_url": "https://api.github.com/users/jmsantorum/repos", "events_url": "https://api.github.com/users/jmsantorum/events{/privacy}", "received_events_url": "https://api.github.com/users/jmsantorum/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": true, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-05-29T12:33:24Z", "updated_at": "2020-01-07T09:16:09Z", "closed_at": "2019-11-14T12:10:21Z", "author_association": "NONE", "active_lock_reason": "off-topic", "body": "We're using the `Enum` metric to represent the state of different critical processes in the following way:\r\n\r\n```python\r\nregistry = CollectorRegistry()\r\n\r\ndeadline_start = Enum(\r\n  'deadline_start', 'Start of a time-critical process',\r\n  labelnames=['customer'], states=['waiting', 'late', 'started'],\r\n  registry=registry\r\n)\r\n\r\ndeadline_end = Enum(\r\n  'deadline_end', 'Completion of a time-critical process',\r\n  labelnames=['customer'], states=['waiting', 'late', 'started'],\r\n  registry=registry\r\n)\r\n```\r\n\r\nand the result we obtain is:\r\n\r\n```\r\n# HELP deadline_start Start of a time-critical process\r\n# TYPE deadline_start gauge\r\ndeadline_start{customer=\"customerA\",deadline_start=\"waiting\"} 1.0\r\ndeadline_start{customer=\"customerA\",deadline_start=\"late\"} 0.0\r\ndeadline_start{customer=\"customerA\",deadline_start=\"started\"} 0.0\r\n# HELP deadline_end Completion of a time-critical process\r\n# TYPE deadline_end gauge\r\ndeadline_end{customer=\"customerA\",deadline_end=\"waiting\"} 1.0\r\ndeadline_end{customer=\"customerA\",deadline_end=\"late\"} 0.0\r\ndeadline_end{customer=\"customerA\",deadline_end=\"started\"} 0.0\r\n```\r\n\r\nbut we would like to have a custom_label for the state instead of the metric name as we need to have the same label for all the metrics. \r\n\r\n```\r\n# HELP deadline_start Start of a time-critical process\r\n# TYPE deadline_start gauge\r\ndeadline_start{customer=\"customerA\",custom_label=\"waiting\"} 1.0\r\ndeadline_start{customer=\"customerA\",custom_label=\"late\"} 0.0\r\ndeadline_start{customer=\"customerA\",custom_label=\"started\"} 0.0\r\n# HELP deadline_end Completion of a time-critical process\r\n# TYPE deadline_end gauge\r\ndeadline_end{customer=\"customerA\",custom_label=\"waiting\"} 1.0\r\ndeadline_end{customer=\"customerA\",custom_label=\"late\"} 0.0\r\ndeadline_end{customer=\"customerA\",custom_label=\"started\"} 0.0\r\n```\r\n\r\nthe same happens with `StateSetMetricFamily`.\r\n\r\nWould be possible to allow to pass a custom label? I can make a PR with the improvement", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/414", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/414/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/414/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/414/events", "html_url": "https://github.com/prometheus/client_python/issues/414", "id": 447273900, "node_id": "MDU6SXNzdWU0NDcyNzM5MDA=", "number": 414, "title": "Optionally disable Process and Platform collectors", "user": {"login": "glasswalk3r", "id": 3854915, "node_id": "MDQ6VXNlcjM4NTQ5MTU=", "avatar_url": "https://avatars1.githubusercontent.com/u/3854915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glasswalk3r", "html_url": "https://github.com/glasswalk3r", "followers_url": "https://api.github.com/users/glasswalk3r/followers", "following_url": "https://api.github.com/users/glasswalk3r/following{/other_user}", "gists_url": "https://api.github.com/users/glasswalk3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/glasswalk3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glasswalk3r/subscriptions", "organizations_url": "https://api.github.com/users/glasswalk3r/orgs", "repos_url": "https://api.github.com/users/glasswalk3r/repos", "events_url": "https://api.github.com/users/glasswalk3r/events{/privacy}", "received_events_url": "https://api.github.com/users/glasswalk3r/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-05-22T18:09:49Z", "updated_at": "2020-06-29T18:37:08Z", "closed_at": "2019-08-05T14:26:01Z", "author_association": "NONE", "active_lock_reason": null, "body": "Is there any way to optionally disable those collectors during usage? I would like to be able to disable those metrics from being generated except if they will actually be used.\r\n\r\nA quick check on the code shows me that they are loaded from `prometheus_client/__init__.py` but there aren't (that I see) many options on that except by doing a PR with code modified.\r\n\r\nI was able to see that trying to `import resource` on Microsoft Windows [used to cause](https://github.com/prometheus/client_python/pull/28) an exception, but the current version only ignores and generate constant values for those metrics:\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/412", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/412/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/412/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/412/events", "html_url": "https://github.com/prometheus/client_python/issues/412", "id": 446879035, "node_id": "MDU6SXNzdWU0NDY4NzkwMzU=", "number": 412, "title": "Histogram.observe is slow O(n)", "user": {"login": "belm0", "id": 1708631, "node_id": "MDQ6VXNlcjE3MDg2MzE=", "avatar_url": "https://avatars3.githubusercontent.com/u/1708631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belm0", "html_url": "https://github.com/belm0", "followers_url": "https://api.github.com/users/belm0/followers", "following_url": "https://api.github.com/users/belm0/following{/other_user}", "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belm0/subscriptions", "organizations_url": "https://api.github.com/users/belm0/orgs", "repos_url": "https://api.github.com/users/belm0/repos", "events_url": "https://api.github.com/users/belm0/events{/privacy}", "received_events_url": "https://api.github.com/users/belm0/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-22T00:22:16Z", "updated_at": "2019-11-14T12:11:06Z", "closed_at": "2019-11-14T12:11:05Z", "author_association": "NONE", "active_lock_reason": null, "body": "Recording an observation is a slow O(n) on the number of bins.  By \"slow\" I mean the loop is in Python (as opposed to something like `sum()` where the loop is in C within the interpreter.\r\n\r\nhttps://github.com/prometheus/client_python/blob/3cb4c9247f3f08dfbe650b6bdf1f53aa5f6683c1/prometheus_client/metrics.py#L525-L531\r\n\r\nIt should be straightforward to use the builtin bisect module for bin lookup.  It's O(log n) and implemented in C.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/407", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/407/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/407/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/407/events", "html_url": "https://github.com/prometheus/client_python/issues/407", "id": 445114148, "node_id": "MDU6SXNzdWU0NDUxMTQxNDg=", "number": 407, "title": "except ImportError: not working as expected since python 3.3", "user": {"login": "tyleracorn", "id": 10730870, "node_id": "MDQ6VXNlcjEwNzMwODcw", "avatar_url": "https://avatars0.githubusercontent.com/u/10730870?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tyleracorn", "html_url": "https://github.com/tyleracorn", "followers_url": "https://api.github.com/users/tyleracorn/followers", "following_url": "https://api.github.com/users/tyleracorn/following{/other_user}", "gists_url": "https://api.github.com/users/tyleracorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/tyleracorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tyleracorn/subscriptions", "organizations_url": "https://api.github.com/users/tyleracorn/orgs", "repos_url": "https://api.github.com/users/tyleracorn/repos", "events_url": "https://api.github.com/users/tyleracorn/events{/privacy}", "received_events_url": "https://api.github.com/users/tyleracorn/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-05-16T19:07:47Z", "updated_at": "2019-08-08T10:53:58Z", "closed_at": "2019-08-08T10:53:57Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am running into some issues with prometheus_client trying import the resource package since I'm on a Windows machine. It looks like there was a previous fix #28 . However, that fix no longer works properly for some of us. I looks like Since Python 3.3+ you can import an empty folder and therefore when it try's to import the resource package it doesn't always raise an ImportError. It does however raise an AttributeError when it try's to get the page size.\r\n\r\nI'll submit a pull request since it's a simple fix, but I figured I'd submit an issue for tracking first.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/406", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/406/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/406/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/406/events", "html_url": "https://github.com/prometheus/client_python/issues/406", "id": 444310768, "node_id": "MDU6SXNzdWU0NDQzMTA3Njg=", "number": 406, "title": "Add ConstLabels feature in python client", "user": {"login": "Ashish-Bansal", "id": 6122999, "node_id": "MDQ6VXNlcjYxMjI5OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6122999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ashish-Bansal", "html_url": "https://github.com/Ashish-Bansal", "followers_url": "https://api.github.com/users/Ashish-Bansal/followers", "following_url": "https://api.github.com/users/Ashish-Bansal/following{/other_user}", "gists_url": "https://api.github.com/users/Ashish-Bansal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ashish-Bansal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ashish-Bansal/subscriptions", "organizations_url": "https://api.github.com/users/Ashish-Bansal/orgs", "repos_url": "https://api.github.com/users/Ashish-Bansal/repos", "events_url": "https://api.github.com/users/Ashish-Bansal/events{/privacy}", "received_events_url": "https://api.github.com/users/Ashish-Bansal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-05-15T08:44:56Z", "updated_at": "2019-08-08T10:54:34Z", "closed_at": "2019-08-08T10:54:34Z", "author_association": "NONE", "active_lock_reason": null, "body": "There's ConstLabels feature in the Prometheus Go client which is missing in the python client.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/405", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/405/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/405/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/405/events", "html_url": "https://github.com/prometheus/client_python/issues/405", "id": 443626581, "node_id": "MDU6SXNzdWU0NDM2MjY1ODE=", "number": 405, "title": "Counters do not report a _created gauge in multiprocessing mode", "user": {"login": "optroodt", "id": 1515592, "node_id": "MDQ6VXNlcjE1MTU1OTI=", "avatar_url": "https://avatars3.githubusercontent.com/u/1515592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/optroodt", "html_url": "https://github.com/optroodt", "followers_url": "https://api.github.com/users/optroodt/followers", "following_url": "https://api.github.com/users/optroodt/following{/other_user}", "gists_url": "https://api.github.com/users/optroodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/optroodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/optroodt/subscriptions", "organizations_url": "https://api.github.com/users/optroodt/orgs", "repos_url": "https://api.github.com/users/optroodt/repos", "events_url": "https://api.github.com/users/optroodt/events{/privacy}", "received_events_url": "https://api.github.com/users/optroodt/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-05-13T22:19:13Z", "updated_at": "2019-05-13T22:56:14Z", "closed_at": "2019-05-13T22:56:14Z", "author_association": "NONE", "active_lock_reason": null, "body": "I am experiencing an issue when trying to graph a rate of requests, the number seems way too low.\r\n\r\nSome context, I'm using:\r\n- Python 3.7.3\r\n- Gunicorn 19.9.0\r\n- sanic_prometheus 0.1.7\r\n- prometheus_client 0.6.0\r\n- Sanic 19.3.1\r\n- MacOS 10.4 / Ubuntu 18.04\r\n\r\nFirst I wasn't running `prometheus_client` in multiprocessing mode, so the metrics were sort of screwed up. However, when plotting a graph for request counts (`sanic_request_count_total`) in the prometheus graph ui (or Grafana for that matter) at least the numbers made some sense (the order of magnitude). \r\n\r\nExample query:\r\n`rate(sanic_request_count_total[5m])`\r\n\r\nWhen I found out that Gunicorn would report any worker's data when requested by prometheus, I switched on the [multiprocessing mode](https://github.com/dkruchinin/sanic-prometheus#multiprocess-mode). All looked fine, the numbers seem to add up when requesting the `/metrics` url.\r\n\r\nWhen graphing the same query mentioned earlier, the numbers are way too low. It's like 1/100 or 1/1000th of what it should be. I started looking into the different between multiprocessing and regular mode. In regular, next to the `sanic_request_count_total` counter, also a `sanic_request_count_created` gauge is exported, which is not present when in multiprocessing mode. \r\n\r\nThis seems to be the only difference and makes me think it is the reason for the graphs being off in prometheus. \r\n\r\nIs it expected behaviour that there is no _created metric for counters when in multiprocessing mode?\r\n\r\nExample in regular mode (no Gunicorn/multiprocessing):\r\n```\r\n# HELP sanic_request_count_total Sanic Request Count\r\n# TYPE sanic_request_count_total counter\r\nsanic_request_count_total{endpoint=\"/api/flight/median_price\",http_status=\"200\",method=\"POST\"} 1.0\r\n# TYPE sanic_request_count_created gauge\r\nsanic_request_count_created{endpoint=\"/api/flight/median_price\",http_status=\"200\",method=\"POST\"} 1.557782800956583e+09\r\n```\r\n\r\nWith Gunicorn/multiprocessing:\r\n```\r\n# HELP sanic_request_count_total Multiprocess metric\r\n# TYPE sanic_request_count_total counter\r\nsanic_request_count_total{endpoint=\"/api/flight/median_price\",http_status=\"200\",method=\"POST\"} 25.0\r\n```\r\n\r\nMaybe I'm missing something, but any help would be greatly appreciated!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/404", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/404/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/404/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/404/events", "html_url": "https://github.com/prometheus/client_python/issues/404", "id": 441934532, "node_id": "MDU6SXNzdWU0NDE5MzQ1MzI=", "number": 404, "title": "push_to_gateway resets gauges if declared globally", "user": {"login": "Ashish-Bansal", "id": 6122999, "node_id": "MDQ6VXNlcjYxMjI5OTk=", "avatar_url": "https://avatars3.githubusercontent.com/u/6122999?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ashish-Bansal", "html_url": "https://github.com/Ashish-Bansal", "followers_url": "https://api.github.com/users/Ashish-Bansal/followers", "following_url": "https://api.github.com/users/Ashish-Bansal/following{/other_user}", "gists_url": "https://api.github.com/users/Ashish-Bansal/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ashish-Bansal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ashish-Bansal/subscriptions", "organizations_url": "https://api.github.com/users/Ashish-Bansal/orgs", "repos_url": "https://api.github.com/users/Ashish-Bansal/repos", "events_url": "https://api.github.com/users/Ashish-Bansal/events{/privacy}", "received_events_url": "https://api.github.com/users/Ashish-Bansal/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-05-08T21:13:32Z", "updated_at": "2019-05-09T06:59:05Z", "closed_at": "2019-05-09T06:59:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hello everyone!\r\n\r\nI found that if I declare\r\n```\r\ngauge_foo = Gauge(\r\n    'foo',\r\n    'Gauge Foo',\r\n    registry=prometheus_registry,\r\n)\r\n```\r\n\r\nand then call `push_to_gateway`, it will send `0` value for the gauge to the push gateway. I gave a quick look in the code https://github.com/prometheus/client_python/blob/master/prometheus_client/exposition.py#L71. I personally feel this is incorrect behaviour, atleast for gauge. It shouldn't send the `0` value unless `gauge.some_operation` isn't called on the object. If there's any reasoning behind this design decision, I'm looking forward to it. \r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/401", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/401/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/401/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/401/events", "html_url": "https://github.com/prometheus/client_python/issues/401", "id": 440608346, "node_id": "MDU6SXNzdWU0NDA2MDgzNDY=", "number": 401, "title": "Openmetrics text parser performance", "user": {"login": "ahmed-mez", "id": 38987709, "node_id": "MDQ6VXNlcjM4OTg3NzA5", "avatar_url": "https://avatars1.githubusercontent.com/u/38987709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmed-mez", "html_url": "https://github.com/ahmed-mez", "followers_url": "https://api.github.com/users/ahmed-mez/followers", "following_url": "https://api.github.com/users/ahmed-mez/following{/other_user}", "gists_url": "https://api.github.com/users/ahmed-mez/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmed-mez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmed-mez/subscriptions", "organizations_url": "https://api.github.com/users/ahmed-mez/orgs", "repos_url": "https://api.github.com/users/ahmed-mez/repos", "events_url": "https://api.github.com/users/ahmed-mez/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmed-mez/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-05-06T09:13:24Z", "updated_at": "2019-05-17T09:45:28Z", "closed_at": "2019-05-17T09:45:28Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "Hi,\r\n\r\nSince v0.4.0, the prometheus parser trims the `_total` suffix from counter metric names, this is a breaking change for few projects.\r\n\r\nAn alternative, would be using the `openmetrics.parser` instead but unfortunately it's very slow compared to the prometheus parser, as the following logic https://github.com/prometheus/client_python/pull/282 that optimized the prometheus parser wasn't reused in the new `openmetrics.parser`.\r\n\r\nImplementing the same optimization logic for `openmetrics.parser` would enhance considerably the parser's performance (~3.3x perf enhancement for the KSM metric example) and would make it close to the prometheus parser. I tried some tests and I got promising results.\r\n\r\nHere is some benchmark using `timeit`:\r\n```\r\ncall (x100000): _parse_sample('simple_metric 1.513767429e+09')\r\n\r\nSimple example with prometheus parser: 0.2489180564880371\r\nSimple example with openmetrics parser: 1.1144659519195557\r\nSimple example with the optimized openmetrics parser: 0.5948491096496582\r\n```\r\n```\r\ncall (x100000): _parse_sample('kube_service_labels{label_app=\"kube-state-metrics\",label_chart=\"kube-state-metrics-0.5.0\",label_heritage=\"Tiller\",label_release=\"ungaged-panther\",namespace=\"default\",service=\"ungaged-panther-kube-state-metrics\"} 1')\r\n\r\nKSM metric example with prometheus parser: 1.6796550750732422\r\nKSM metric example openmetrics parser: 6.6183180809021\r\nKSM metric example optimized openmetrics parser: 2.0289480686187744\r\n```\r\n\r\nWould you support optimizing `openmetrics.parser` ?\r\n\r\nThanks!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/399", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/399/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/399/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/399/events", "html_url": "https://github.com/prometheus/client_python/issues/399", "id": 435256616, "node_id": "MDU6SXNzdWU0MzUyNTY2MTY=", "number": 399, "title": "Invalid response to \"application/openmetrics-text\" Prometheus requests", "user": {"login": "Gyllsdorff", "id": 1038004, "node_id": "MDQ6VXNlcjEwMzgwMDQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/1038004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gyllsdorff", "html_url": "https://github.com/Gyllsdorff", "followers_url": "https://api.github.com/users/Gyllsdorff/followers", "following_url": "https://api.github.com/users/Gyllsdorff/following{/other_user}", "gists_url": "https://api.github.com/users/Gyllsdorff/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gyllsdorff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gyllsdorff/subscriptions", "organizations_url": "https://api.github.com/users/Gyllsdorff/orgs", "repos_url": "https://api.github.com/users/Gyllsdorff/repos", "events_url": "https://api.github.com/users/Gyllsdorff/events{/privacy}", "received_events_url": "https://api.github.com/users/Gyllsdorff/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2019-04-19T17:58:00Z", "updated_at": "2019-04-20T12:38:43Z", "closed_at": "2019-04-20T12:38:43Z", "author_association": "NONE", "active_lock_reason": null, "body": "I just setup Prometheus 2.9.1, when it tries to parse my `/metrics` url it throws a `invalid metric type \"info\"` error if I have a `Info` line.\r\n\r\nError from Prometheus log:\r\n```\r\nprometheus_1                          | level=warn ts=2019-04-19T17:59:44.932649585Z caller=scrape.go:835 component=\"scrape manager\" scrape_pool=apps target=http://127.0.0.1:20171/metrics msg=\"append failed\" err=\"invalid metric type \\\"info\\\"\"\r\n```\r\n\r\nCode:\r\n```python3\r\nfrom prometheus_client import Info\r\napp_info = Info(\"app_info\", \"Application information\")\r\n```\r\n\r\n`curl http://localhost/metrics --header \"Application: foo\"`:\r\n```\r\n# HELP python_info Python platform information\r\n# TYPE python_info gauge\r\npython_info{implementation=\"CPython\",major=\"3\",minor=\"7\",patchlevel=\"2\",version=\"3.7.2\"} 1.0\r\n# HELP app_bm_info Application information\r\n# TYPE app_bm_info gauge\r\napp_bm_info{test=\"bar\"} 1.0\r\n```\r\n\r\n`curl http://localhost/metrics --header \"Accept: application/openmetrics-text; version=0.0.1,text/plain;version=0.0.4;q=0.5,*/*;q=0.1\"`:\r\n```\r\n# HELP python_info Python platform information\r\n# TYPE python_info gauge\r\npython_info{implementation=\"CPython\",major=\"3\",minor=\"7\",patchlevel=\"2\",version=\"3.7.2\"} 1.0\r\n# HELP app_bm_info Application information\r\n# TYPE app_bm_info info\r\napp_bm_info{test=\"bar\"} 1.0\r\n```\r\n\r\nIf I intercept prometheus request and change the `Accept` header to something else Prometheus get the response in a format it can parse.\r\n\r\nIt is the `# TYPE app_bm_info info` line Prometheus does not like.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/391", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/391/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/391/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/391/events", "html_url": "https://github.com/prometheus/client_python/issues/391", "id": 429138296, "node_id": "MDU6SXNzdWU0MjkxMzgyOTY=", "number": 391, "title": "Error cannot import name _floatToGoString", "user": {"login": "sandr30", "id": 44641528, "node_id": "MDQ6VXNlcjQ0NjQxNTI4", "avatar_url": "https://avatars1.githubusercontent.com/u/44641528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sandr30", "html_url": "https://github.com/sandr30", "followers_url": "https://api.github.com/users/sandr30/followers", "following_url": "https://api.github.com/users/sandr30/following{/other_user}", "gists_url": "https://api.github.com/users/sandr30/gists{/gist_id}", "starred_url": "https://api.github.com/users/sandr30/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sandr30/subscriptions", "organizations_url": "https://api.github.com/users/sandr30/orgs", "repos_url": "https://api.github.com/users/sandr30/repos", "events_url": "https://api.github.com/users/sandr30/events{/privacy}", "received_events_url": "https://api.github.com/users/sandr30/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-04-04T08:08:17Z", "updated_at": "2019-05-28T08:23:41Z", "closed_at": "2019-04-04T08:09:52Z", "author_association": "NONE", "active_lock_reason": null, "body": "from prometheus_client.core import GaugeMetricFamily, _floatToGoString\r\nImportError: cannot import name _floatToGoString\r\nNo start service. Help me!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/389", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/389/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/389/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/389/events", "html_url": "https://github.com/prometheus/client_python/issues/389", "id": 427248552, "node_id": "MDU6SXNzdWU0MjcyNDg1NTI=", "number": 389, "title": "What is the meaning of the argument labelvalues in the init function\uff1f", "user": {"login": "ilpan", "id": 23193162, "node_id": "MDQ6VXNlcjIzMTkzMTYy", "avatar_url": "https://avatars1.githubusercontent.com/u/23193162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilpan", "html_url": "https://github.com/ilpan", "followers_url": "https://api.github.com/users/ilpan/followers", "following_url": "https://api.github.com/users/ilpan/following{/other_user}", "gists_url": "https://api.github.com/users/ilpan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilpan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilpan/subscriptions", "organizations_url": "https://api.github.com/users/ilpan/orgs", "repos_url": "https://api.github.com/users/ilpan/repos", "events_url": "https://api.github.com/users/ilpan/events{/privacy}", "received_events_url": "https://api.github.com/users/ilpan/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-03-30T06:13:31Z", "updated_at": "2019-04-01T08:19:35Z", "closed_at": "2019-04-01T08:19:35Z", "author_association": "NONE", "active_lock_reason": null, "body": "when a metric is constructed with labelvalues\uff0cit won't be registered by a registry, that means in generate_latest won't collect this metric\uff0cso I'm confused with the argument labelvalues.\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/23193162/55272300-6b2bab80-52f5-11e9-98a9-ea96f4ba0020.png)\r\n\r\n![image](https://user-images.githubusercontent.com/23193162/55272282-36b7ef80-52f5-11e9-9f55-0839203debd9.png)\r\n\r\n![image](https://user-images.githubusercontent.com/23193162/55272289-49cabf80-52f5-11e9-982e-5c7851098e14.png)\r\n", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/385", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/385/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/385/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/385/events", "html_url": "https://github.com/prometheus/client_python/issues/385", "id": 422844040, "node_id": "MDU6SXNzdWU0MjI4NDQwNDA=", "number": 385, "title": "MetricWrapperBase.remove() should accept kwargs in the same way as label() does", "user": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars0.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-03-19T16:53:30Z", "updated_at": "2019-11-14T12:12:04Z", "closed_at": "2019-11-14T12:12:04Z", "author_association": "NONE", "active_lock_reason": null, "body": "https://github.com/prometheus/client_python/blob/master/prometheus_client/metrics.py#L160\r\n\r\nMaking it usable as `ctr.labels(...).remove()` can also be a useful enhancement, by holding a reference to the parent Counter inside children.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/383", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/383/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/383/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/383/events", "html_url": "https://github.com/prometheus/client_python/issues/383", "id": 421324188, "node_id": "MDU6SXNzdWU0MjEzMjQxODg=", "number": 383, "title": "Crashes if Softlimit is set to unlimited", "user": {"login": "Smithx10", "id": 12032554, "node_id": "MDQ6VXNlcjEyMDMyNTU0", "avatar_url": "https://avatars2.githubusercontent.com/u/12032554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Smithx10", "html_url": "https://github.com/Smithx10", "followers_url": "https://api.github.com/users/Smithx10/followers", "following_url": "https://api.github.com/users/Smithx10/following{/other_user}", "gists_url": "https://api.github.com/users/Smithx10/gists{/gist_id}", "starred_url": "https://api.github.com/users/Smithx10/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Smithx10/subscriptions", "organizations_url": "https://api.github.com/users/Smithx10/orgs", "repos_url": "https://api.github.com/users/Smithx10/repos", "events_url": "https://api.github.com/users/Smithx10/events{/privacy}", "received_events_url": "https://api.github.com/users/Smithx10/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-15T02:21:47Z", "updated_at": "2019-03-16T17:24:02Z", "closed_at": "2019-03-16T17:24:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "  \r\nFile \"/opt/conda/lib/python3.7/site-packages/prometheus_client/process_collector.py\", line 84, in collect\r\n    value=float(line.split()[3]))\r\nValueError: could not convert string to float: b'unlimited'\r\n\r\nhttps://github.com/prometheus/client_python/blob/master/prometheus_client/process_collector.py#L85\r\n\r\n```\r\n        try:\r\n            with open(os.path.join(pid, 'limits'), 'rb') as limits:\r\n                for line in limits:\r\n                    if line.startswith(b'Max open file'):\r\n                        max_fds = GaugeMetricFamily(self._prefix + 'max_fds',\r\n                                                    'Maximum number of open file descriptors.',\r\n                                                    value=float(line.split()[3]))\r\n                        break\r\n            open_fds = GaugeMetricFamily(self._prefix + 'open_fds',\r\n                                         'Number of open file descriptors.',\r\n                                         len(os.listdir(os.path.join(pid, 'fd'))))\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/382", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/382/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/382/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/382/events", "html_url": "https://github.com/prometheus/client_python/issues/382", "id": 420737937, "node_id": "MDU6SXNzdWU0MjA3Mzc5Mzc=", "number": 382, "title": "Question: how to instrument a multiprocessing program?", "user": {"login": "moio", "id": 250541, "node_id": "MDQ6VXNlcjI1MDU0MQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/250541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/moio", "html_url": "https://github.com/moio", "followers_url": "https://api.github.com/users/moio/followers", "following_url": "https://api.github.com/users/moio/following{/other_user}", "gists_url": "https://api.github.com/users/moio/gists{/gist_id}", "starred_url": "https://api.github.com/users/moio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/moio/subscriptions", "organizations_url": "https://api.github.com/users/moio/orgs", "repos_url": "https://api.github.com/users/moio/repos", "events_url": "https://api.github.com/users/moio/events{/privacy}", "received_events_url": "https://api.github.com/users/moio/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-13T21:56:39Z", "updated_at": "2019-03-13T22:40:09Z", "closed_at": "2019-03-13T22:39:16Z", "author_association": "NONE", "active_lock_reason": null, "body": "Specifically: I am trying to instrument a program that uses `multiprocessing` directly, without Gunicorn or any other framework/server.\r\n\r\nWhat are the basic assumptions? What I am currently doing (in the parent process) is:\r\n\r\n```python\r\nprometheus_dir = \"/tmp/my-dir\"\r\nshutil.rmtree(prometheus_dir, ignore_errors=True)\r\nos.mkdir(prometheus_dir)\r\nos.environ[\"prometheus_multiproc_dir\"] = prometheus_dir\r\n\r\nregistry = CollectorRegistry()\r\nmultiprocess.MultiProcessCollector(registry)\r\nstart_http_server(8004, registry=registry)\r\n```\r\n\r\nThen code I want to instrument lives in child processes, where I am using:\r\n\r\n```python\r\nREQUEST_TIME = Summary('request_processing_seconds', 'Time spent in request')\r\n\r\n[...]\r\n\r\n@REQUEST_TIME.time()\r\n@tornado.gen.coroutine\r\ndef method(self, load):\r\n  [...]\r\n```\r\n\r\n\r\nExpected behavior: `request_processing_seconds_count` and `request_processing_seconds_sum` grow as `method` gets called.\r\n\r\nActual behavior: `request_processing_seconds_count` and `request_processing_seconds_sum` stay at 0.0.\r\n\r\n\r\nI am surely doing something wrong, but I could not figure out what from documentation or internal code so far - if anybody could explain that would be very very nice.\r\n\r\nThanks in advance!", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/381", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/381/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/381/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/381/events", "html_url": "https://github.com/prometheus/client_python/issues/381", "id": 416079347, "node_id": "MDU6SXNzdWU0MTYwNzkzNDc=", "number": 381, "title": "[BUG] labels  value with special chars", "user": {"login": "koolay", "id": 4273490, "node_id": "MDQ6VXNlcjQyNzM0OTA=", "avatar_url": "https://avatars1.githubusercontent.com/u/4273490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koolay", "html_url": "https://github.com/koolay", "followers_url": "https://api.github.com/users/koolay/followers", "following_url": "https://api.github.com/users/koolay/following{/other_user}", "gists_url": "https://api.github.com/users/koolay/gists{/gist_id}", "starred_url": "https://api.github.com/users/koolay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koolay/subscriptions", "organizations_url": "https://api.github.com/users/koolay/orgs", "repos_url": "https://api.github.com/users/koolay/repos", "events_url": "https://api.github.com/users/koolay/events{/privacy}", "received_events_url": "https://api.github.com/users/koolay/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2019-03-01T12:22:17Z", "updated_at": "2019-03-12T18:17:02Z", "closed_at": "2019-03-12T18:17:02Z", "author_association": "NONE", "active_lock_reason": null, "body": "Failed call `generate_latest(registry)`\r\n\r\n**call stack**\r\n\r\n`Invalid control character at: line 1 column 126 (char 125)`\r\n\r\n```\r\n File \"prometheus_client/exposition.py\", line 89, in generate_latest\r\n    for metric in registry.collect():\r\n  File \"prometheus_client/registry.py\", line 75, in collect\r\n    for metric in collector.collect():\r\n  File \"prometheus_client/multiprocess.py\", line 30, in collect\r\n    return self.merge(files, accumulate=True)\r\n  File \"prometheus_client/multiprocess.py\", line 45, in merge\r\n    metric_name, name, labels = json.loads(key)\r\n  File \"json/__init__.py\", line 319, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"json/decoder.py\", line 339, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"json/decoder.py\", line 355, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\n```", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/379", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/379/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/379/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/379/events", "html_url": "https://github.com/prometheus/client_python/issues/379", "id": 412721682, "node_id": "MDU6SXNzdWU0MTI3MjE2ODI=", "number": 379, "title": "Question: are metrics from imported subpackages automatically registered?", "user": {"login": "r0fls", "id": 1858004, "node_id": "MDQ6VXNlcjE4NTgwMDQ=", "avatar_url": "https://avatars1.githubusercontent.com/u/1858004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r0fls", "html_url": "https://github.com/r0fls", "followers_url": "https://api.github.com/users/r0fls/followers", "following_url": "https://api.github.com/users/r0fls/following{/other_user}", "gists_url": "https://api.github.com/users/r0fls/gists{/gist_id}", "starred_url": "https://api.github.com/users/r0fls/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r0fls/subscriptions", "organizations_url": "https://api.github.com/users/r0fls/orgs", "repos_url": "https://api.github.com/users/r0fls/repos", "events_url": "https://api.github.com/users/r0fls/events{/privacy}", "received_events_url": "https://api.github.com/users/r0fls/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-02-21T02:40:07Z", "updated_at": "2019-02-21T02:54:55Z", "closed_at": "2019-02-21T02:54:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "Let's say I have a utility sub program that implements a gauge:\r\n\r\n```\r\nfrom prometheus_client import Gauge\r\n\r\nclass Foo:\r\n    g = Gauge('my_inprogress_requests', 'Description of gauge')\r\n    def do_stuff(self):\r\n        g.inc()\r\n```\r\n\r\nThat gets imported and used in a different program. Will `g` automatically be posted if I instantiate `Foo` _and_ call `start_http_server` from within that program, or do I need to register it somehow?\r\n\r\nI'm not sure if this is worth mentioning in the docs, just seems different from the golang client where you have to explicitly register metrics.", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/378", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/378/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/378/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/378/events", "html_url": "https://github.com/prometheus/client_python/issues/378", "id": 412575290, "node_id": "MDU6SXNzdWU0MTI1NzUyOTA=", "number": 378, "title": "GCCollector raises an exception in PyPy7.0/Python3.5", "user": {"login": "zcarlson-signifai", "id": 20101847, "node_id": "MDQ6VXNlcjIwMTAxODQ3", "avatar_url": "https://avatars2.githubusercontent.com/u/20101847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zcarlson-signifai", "html_url": "https://github.com/zcarlson-signifai", "followers_url": "https://api.github.com/users/zcarlson-signifai/followers", "following_url": "https://api.github.com/users/zcarlson-signifai/following{/other_user}", "gists_url": "https://api.github.com/users/zcarlson-signifai/gists{/gist_id}", "starred_url": "https://api.github.com/users/zcarlson-signifai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zcarlson-signifai/subscriptions", "organizations_url": "https://api.github.com/users/zcarlson-signifai/orgs", "repos_url": "https://api.github.com/users/zcarlson-signifai/repos", "events_url": "https://api.github.com/users/zcarlson-signifai/events{/privacy}", "received_events_url": "https://api.github.com/users/zcarlson-signifai/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-02-20T18:50:51Z", "updated_at": "2019-08-16T19:06:55Z", "closed_at": "2019-08-16T19:06:55Z", "author_association": "NONE", "active_lock_reason": null, "body": "When attempting to import prometheus_client in the PyPy 7.0 runtime with the Python 3.5 language implementation, the following exception is raised:\r\n\r\n```\r\n(prometheus-client) [zcarlson@eleusinia-forge prometheus-client]$ python\r\nPython 3.5.3 (928a4f70d3de7d17449456946154c5da6e600162, Feb 09 2019, 11:50:43)\r\n[PyPy 7.0.0 with GCC 8.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>>> import prometheus_client\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/zcarlson/Code/prometheus-client/env/pypy7.0-python3.5/site-packages/prometheus_client/__init__.py\", line 5, in <module>\r\n    from . import gc_collector\r\n  File \"/home/zcarlson/Code/prometheus-client/env/pypy7.0-python3.5/site-packages/prometheus_client/gc_collector.py\", line 46, in <module>\r\n    GC_COLLECTOR = GCCollector()\r\n  File \"/home/zcarlson/Code/prometheus-client/env/pypy7.0-python3.5/site-packages/prometheus_client/gc_collector.py\", line 17, in __init__\r\n    registry.register(self)\r\n  File \"/home/zcarlson/Code/prometheus-client/env/pypy7.0-python3.5/site-packages/prometheus_client/registry.py\", line 24, in register\r\n    names = self._get_names(collector)\r\n  File \"/home/zcarlson/Code/prometheus-client/env/pypy7.0-python3.5/site-packages/prometheus_client/registry.py\", line 64, in _get_names\r\n    for metric in desc_func():\r\n  File \"/home/zcarlson/Code/prometheus-client/env/pypy7.0-python3.5/site-packages/prometheus_client/gc_collector.py\", line 37, in collect\r\n    for generation, stat in enumerate(gc.get_stats()):\r\nTypeError: 'GcStats' object is not iterable\r\n```\r\n\r\nI believe this is because pypy has a different GC from stock CPython, and thus `gc_stats()` returns different information. \r\n\r\nprometheus_client 0.5.0 seems to work, however, from initial testing...", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/377", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/377/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/377/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/377/events", "html_url": "https://github.com/prometheus/client_python/issues/377", "id": 412010225, "node_id": "MDU6SXNzdWU0MTIwMTAyMjU=", "number": 377, "title": "File descriptor leak caused by clients causing system to get down", "user": {"login": "tusharmakkar08", "id": 2357025, "node_id": "MDQ6VXNlcjIzNTcwMjU=", "avatar_url": "https://avatars0.githubusercontent.com/u/2357025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tusharmakkar08", "html_url": "https://github.com/tusharmakkar08", "followers_url": "https://api.github.com/users/tusharmakkar08/followers", "following_url": "https://api.github.com/users/tusharmakkar08/following{/other_user}", "gists_url": "https://api.github.com/users/tusharmakkar08/gists{/gist_id}", "starred_url": "https://api.github.com/users/tusharmakkar08/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tusharmakkar08/subscriptions", "organizations_url": "https://api.github.com/users/tusharmakkar08/orgs", "repos_url": "https://api.github.com/users/tusharmakkar08/repos", "events_url": "https://api.github.com/users/tusharmakkar08/events{/privacy}", "received_events_url": "https://api.github.com/users/tusharmakkar08/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2019-02-19T16:25:14Z", "updated_at": "2019-11-14T12:12:49Z", "closed_at": "2019-11-14T12:12:49Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "I am facing this issue with prometheus-client==0.5.0 and Python 3.5.2. I am using `start_http_server` command to start the server. \r\n\r\nTo be precise my close_wait connections keep on increasing till my server stops serving requests.\r\n\r\nx@ip-10-0-0-0:~$ lsof -i | grep 8002\r\npython 10601 x 3u IPv4 78413488 0t0 TCP *:8002 (LISTEN)\r\npython 10601 x 55u IPv4 82060563 0t0 TCP ip-10-0-0-0.ap-south-1.compute.internal:8002->ip-172-00-00-00.ap-south-1.compute.internal:45114 (CLOSE_WAIT)\r\npython 10601 x 80u IPv4 82089551 0t0 TCP ip-10-0-0-0.ap-south-1.compute.internal:8002->ip-172-00-00-00.ap-south-1.compute.internal:45976 (CLOSE_WAIT)\r\npython 10601 x 81u IPv4 82088475 0t0 TCP ip-10-0-0-0.ap-south-1.compute.internal:8002->ip-172-00-00-00.ap-south-1.compute.internal:46006 (CLOSE_WAIT)\r\npython 10601 x 82u IPv4 82089875 0t0 TCP ip-10-0-0-0.ap-south-1.compute.internal:8002->ip-172-00-00-00.ap-south-1.compute.internal:46034 (CLOSE_WAIT)\r\npython 10601 x 83u IPv4 82092200 0t0 TCP ip-10-0-0-0.ap-south-1.compute.internal:8002->ip-172-00-00-00.ap-south-1.compute.internal:46064 (CLOSE_WAIT)\r\n\r\n![image](https://user-images.githubusercontent.com/2357025/52057592-7085a780-258b-11e9-9242-a3fc0cef98d4.png) \r\n\r\nThis issue is similar to https://github.com/prometheus/jmx_exporter/issues/327 \r\n\r\nAttaching strace here for the issue. https://ideone.com/0VORDa ", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/376", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/376/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/376/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/376/events", "html_url": "https://github.com/prometheus/client_python/issues/376", "id": 411959781, "node_id": "MDU6SXNzdWU0MTE5NTk3ODE=", "number": 376, "title": "Is it possible to have a sample for a flask app using prometheus client to expose one metric ?", "user": {"login": "Geoffrey42", "id": 14931652, "node_id": "MDQ6VXNlcjE0OTMxNjUy", "avatar_url": "https://avatars1.githubusercontent.com/u/14931652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geoffrey42", "html_url": "https://github.com/Geoffrey42", "followers_url": "https://api.github.com/users/Geoffrey42/followers", "following_url": "https://api.github.com/users/Geoffrey42/following{/other_user}", "gists_url": "https://api.github.com/users/Geoffrey42/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geoffrey42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geoffrey42/subscriptions", "organizations_url": "https://api.github.com/users/Geoffrey42/orgs", "repos_url": "https://api.github.com/users/Geoffrey42/repos", "events_url": "https://api.github.com/users/Geoffrey42/events{/privacy}", "received_events_url": "https://api.github.com/users/Geoffrey42/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-02-19T14:46:13Z", "updated_at": "2019-02-19T17:21:02Z", "closed_at": "2019-02-19T16:18:28Z", "author_association": "NONE", "active_lock_reason": null, "body": "Hi,\r\n\r\nI want to build an exporter to expose some metrics from a router to Prometheus using your client.\r\nSince I also want to \"trigger\" the exporter to execute some ssh command using URL I naturally find Flask as a good choice.\r\n\r\nThe problem is I juste can't figure out how to use the wsgi dispatcher from your README.\r\nIf at least you could add a little more to the existing snippet. Like how to expose one metric to prometheus alongside a flask-like route. Because for now it's really unclear.\r\n\r\nIf my request is completely off topic, please let me know\r\n\r\nThanks", "performed_via_github_app": null, "score": 1.0}, {"url": "https://api.github.com/repos/prometheus/client_python/issues/375", "repository_url": "https://api.github.com/repos/prometheus/client_python", "labels_url": "https://api.github.com/repos/prometheus/client_python/issues/375/labels{/name}", "comments_url": "https://api.github.com/repos/prometheus/client_python/issues/375/comments", "events_url": "https://api.github.com/repos/prometheus/client_python/issues/375/events", "html_url": "https://github.com/prometheus/client_python/issues/375", "id": 411522099, "node_id": "MDU6SXNzdWU0MTE1MjIwOTk=", "number": 375, "title": "Deadlock in exposition.py", "user": {"login": "ochedru", "id": 2545624, "node_id": "MDQ6VXNlcjI1NDU2MjQ=", "avatar_url": "https://avatars3.githubusercontent.com/u/2545624?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ochedru", "html_url": "https://github.com/ochedru", "followers_url": "https://api.github.com/users/ochedru/followers", "following_url": "https://api.github.com/users/ochedru/following{/other_user}", "gists_url": "https://api.github.com/users/ochedru/gists{/gist_id}", "starred_url": "https://api.github.com/users/ochedru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ochedru/subscriptions", "organizations_url": "https://api.github.com/users/ochedru/orgs", "repos_url": "https://api.github.com/users/ochedru/repos", "events_url": "https://api.github.com/users/ochedru/events{/privacy}", "received_events_url": "https://api.github.com/users/ochedru/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2019-02-18T15:11:29Z", "updated_at": "2019-08-08T10:57:08Z", "closed_at": "2019-08-08T10:57:08Z", "author_association": "NONE", "active_lock_reason": null, "body": "We are using prometheus-client 0.5.0.\r\n\r\nOur server application regularly stops reporting prometheus metrics. A bunch of threads are stuck with the same stack:\r\n```\r\nThread 0x00007fe2a3aba700 (most recent call first):\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/values.py\", line 27 in get\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/metrics.py\", line 546 in _child_samples\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/metrics.py\", line 175 in _samples\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/metrics.py\", line 182 in _multi_samples\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/metrics.py\", line 68 in collect\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/registry.py\", line 75 in collect\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/exposition.py\", line 89 in generate_latest\r\n  File \"/usr/lib/python3.6/site-packages/prometheus_client/exposition.py\", line 146 in do_GET\r\n  File \"/usr/lib/python3.6/http/server.py\", line 406 in handle_one_request\r\n  File \"/usr/lib/python3.6/http/server.py\", line 418 in handle\r\n  File \"/usr/lib/python3.6/socketserver.py\", line 724 in __init__\r\n  File \"/usr/lib/python3.6/socketserver.py\", line 364 in finish_request\r\n  File \"/usr/lib/python3.6/socketserver.py\", line 654 in process_request_thread\r\n  File \"/usr/lib/python3.6/threading.py\", line 864 in run\r\n  File \"/usr/lib/python3.6/threading.py\", line 916 in _bootstrap_inner\r\n  File \"/usr/lib/python3.6/threading.py\", line 884 in _bootstrap\r\n```\r\n(We are exposing prometheus metrics with `start_http_server()`).\r\nThis looks like a thread died with the lock acquired.\r\nI searched for something related to GC (#371), but there is no thread GCing at that time.\r\nAny idea? Thank you.", "performed_via_github_app": null, "score": 1.0}]}