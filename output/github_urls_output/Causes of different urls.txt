USEFUL ROWS

- In my script I didn't found URLs because there are not in PyPi page (caught with OSSGadget), whereas his script found it, but wrong 
 --> cffi, https://github.com/cffi/cffi, https://github.com/python-cffi/release-doc
 --> babel, https://github.com/babel/babel, https://github.com/babel/babel

- In my script I didn't found URLs because there are not in PyPi page (caught with OSSGadget), whereas his script found it, and they are linked to the same page 
 --> pycrypto, https://github.com/pycrypto/pycrypto, https://github.com/dlitz/pycrypto

- In my script I found the right URL, whereas his script found it, but wrong 
 --> typing, https://github.com/python/typing, https://github.com/python/cpython

- In my script I found the right URL, whereas his script found it, and they are linked to the same page 
 --> identify, https://github.com/chriskuehl/identify, https://github.com/pre-commit/identify


USELESS ROWS

- In my script I didn't found URLs because there are not in PyPi page (caught with OSSGadget), whereas his script found it, and it's right 
 --> future, https://github.com/future/future, https://github.com/PythonCharmers/python-future
 --> contextlib2, https://github.com/contextlib2/contextlib2, https://github.com/contextlib2/contextlib2

---------------------------------------------------------------------------------------------------------------------------------------------

MY ALGORITHM
1. Open "https://pypi.org/project/{package_name}" page
2. See among all links ("a" tag) till both
   - netloc == "github.com"               (we are looking at a GitHub link)
   - path.count("/") == 2                 (it must direct to the homepage of repository)
   - "warehouse" not in url_parts.path    (we can find "https://github.com/pypa/warehouse" link, that is wrong)

PROBLEMS:
- It doesn't check if the URL is a valid one
- It just crawls the PyPi repository page


---------------------------------------------------------------------------------------------------------------------------------------------

HIS ALGORITHM
1. Find github url from homepage or codepage from "https://pypi.org/pypi/{package_name}/json"
2. Find github url from homepage (again?)
3. Find github url among "https://pypi.org/project/{package_name}" page links ("a" tag), checking that netloc == "github.com"
4. Return the first url that is correct (200 response and path.count("/") == 2)

PROBLEMS
- Many times it doesn't find the url, or the url is wrong